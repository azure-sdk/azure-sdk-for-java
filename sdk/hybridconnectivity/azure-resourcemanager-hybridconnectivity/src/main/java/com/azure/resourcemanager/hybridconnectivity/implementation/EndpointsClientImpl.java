// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.hybridconnectivity.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.hybridconnectivity.fluent.EndpointsClient;
import com.azure.resourcemanager.hybridconnectivity.fluent.models.HybridConnectivityEndpointInner;
import com.azure.resourcemanager.hybridconnectivity.fluent.models.IngressGatewayAssetInner;
import com.azure.resourcemanager.hybridconnectivity.fluent.models.ManagedProxyAssetInner;
import com.azure.resourcemanager.hybridconnectivity.fluent.models.TargetResourceEndpointAccessInner;
import com.azure.resourcemanager.hybridconnectivity.implementation.models.EndpointsList;
import com.azure.resourcemanager.hybridconnectivity.models.ListCredentialsRequest;
import com.azure.resourcemanager.hybridconnectivity.models.ManagedProxyRequest;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in EndpointsClient.
 */
public final class EndpointsClientImpl implements EndpointsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final EndpointsService service;

    /**
     * The service client containing this operation class.
     */
    private final HybridConnectivityMgmtClientImpl client;

    /**
     * Initializes an instance of EndpointsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    EndpointsClientImpl(HybridConnectivityMgmtClientImpl client) {
        this.service
            = RestProxy.create(EndpointsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for HybridConnectivityMgmtClientEndpoints to be used by the proxy service
     * to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "HybridConnectivityMg")
    public interface EndpointsService {
        @Headers({ "Content-Type: application/json" })
        @Get("/{resourceUri}/providers/Microsoft.HybridConnectivity/endpoints/{endpointName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<HybridConnectivityEndpointInner>> get(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam(value = "resourceUri", encoded = true) String resourceUri,
            @PathParam("endpointName") String endpointName, @HeaderParam("Accept") String accept, Context context);

        @Put("/{resourceUri}/providers/Microsoft.HybridConnectivity/endpoints/{endpointName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<HybridConnectivityEndpointInner>> createOrUpdate(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam(value = "resourceUri", encoded = true) String resourceUri,
            @PathParam("endpointName") String endpointName, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept,
            @BodyParam("application/json") HybridConnectivityEndpointInner endpointResource, Context context);

        @Patch("/{resourceUri}/providers/Microsoft.HybridConnectivity/endpoints/{endpointName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<HybridConnectivityEndpointInner>> update(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam(value = "resourceUri", encoded = true) String resourceUri,
            @PathParam("endpointName") String endpointName, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept,
            @BodyParam("application/json") HybridConnectivityEndpointInner endpointResource, Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/{resourceUri}/providers/Microsoft.HybridConnectivity/endpoints/{endpointName}")
        @ExpectedResponses({ 200, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> delete(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam(value = "resourceUri", encoded = true) String resourceUri,
            @PathParam("endpointName") String endpointName, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/{resourceUri}/providers/Microsoft.HybridConnectivity/endpoints")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<EndpointsList>> list(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam(value = "resourceUri", encoded = true) String resourceUri, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/{resourceUri}/providers/Microsoft.HybridConnectivity/endpoints/{endpointName}/listCredentials")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<TargetResourceEndpointAccessInner>> listCredentials(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam(value = "resourceUri", encoded = true) String resourceUri,
            @PathParam("endpointName") String endpointName, @QueryParam("expiresin") Long expiresin,
            @HeaderParam("Accept") String accept,
            @BodyParam("application/json") ListCredentialsRequest listCredentialsRequest, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/{resourceUri}/providers/Microsoft.HybridConnectivity/endpoints/{endpointName}/listIngressGatewayCredentials")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<IngressGatewayAssetInner>> listIngressGatewayCredentials(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam(value = "resourceUri", encoded = true) String resourceUri,
            @PathParam("endpointName") String endpointName, @QueryParam("expiresin") Long expiresin,
            @HeaderParam("Accept") String accept, Context context);

        @Post("/{resourceUri}/providers/Microsoft.HybridConnectivity/endpoints/{endpointName}/listManagedProxyDetails")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ManagedProxyAssetInner>> listManagedProxyDetails(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam(value = "resourceUri", encoded = true) String resourceUri,
            @PathParam("endpointName") String endpointName, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept,
            @BodyParam("application/json") ManagedProxyRequest managedProxyRequest, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<EndpointsList>> listNext(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("endpoint") String endpoint, @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Gets the endpoint to the resource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param endpointName The endpoint name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the endpoint to the resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<HybridConnectivityEndpointInner>> getWithResponseAsync(String resourceUri,
        String endpointName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceUri == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceUri is required and cannot be null."));
        }
        if (endpointName == null) {
            return Mono.error(new IllegalArgumentException("Parameter endpointName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), this.client.getApiVersion(), resourceUri,
                endpointName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets the endpoint to the resource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param endpointName The endpoint name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the endpoint to the resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<HybridConnectivityEndpointInner>> getWithResponseAsync(String resourceUri,
        String endpointName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceUri == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceUri is required and cannot be null."));
        }
        if (endpointName == null) {
            return Mono.error(new IllegalArgumentException("Parameter endpointName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), this.client.getApiVersion(), resourceUri, endpointName, accept,
            context);
    }

    /**
     * Gets the endpoint to the resource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param endpointName The endpoint name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the endpoint to the resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<HybridConnectivityEndpointInner> getAsync(String resourceUri, String endpointName) {
        return getWithResponseAsync(resourceUri, endpointName).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets the endpoint to the resource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param endpointName The endpoint name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the endpoint to the resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<HybridConnectivityEndpointInner> getWithResponse(String resourceUri, String endpointName,
        Context context) {
        return getWithResponseAsync(resourceUri, endpointName, context).block();
    }

    /**
     * Gets the endpoint to the resource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param endpointName The endpoint name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the endpoint to the resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public HybridConnectivityEndpointInner get(String resourceUri, String endpointName) {
        return getWithResponse(resourceUri, endpointName, Context.NONE).getValue();
    }

    /**
     * Create or update the endpoint to the target resource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param endpointName The endpoint name.
     * @param endpointResource Endpoint details.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the endpoint for the target resource along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<HybridConnectivityEndpointInner>> createOrUpdateWithResponseAsync(String resourceUri,
        String endpointName, HybridConnectivityEndpointInner endpointResource) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceUri == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceUri is required and cannot be null."));
        }
        if (endpointName == null) {
            return Mono.error(new IllegalArgumentException("Parameter endpointName is required and cannot be null."));
        }
        if (endpointResource == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter endpointResource is required and cannot be null."));
        } else {
            endpointResource.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.createOrUpdate(this.client.getEndpoint(), this.client.getApiVersion(),
                resourceUri, endpointName, contentType, accept, endpointResource, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create or update the endpoint to the target resource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param endpointName The endpoint name.
     * @param endpointResource Endpoint details.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the endpoint for the target resource along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<HybridConnectivityEndpointInner>> createOrUpdateWithResponseAsync(String resourceUri,
        String endpointName, HybridConnectivityEndpointInner endpointResource, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceUri == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceUri is required and cannot be null."));
        }
        if (endpointName == null) {
            return Mono.error(new IllegalArgumentException("Parameter endpointName is required and cannot be null."));
        }
        if (endpointResource == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter endpointResource is required and cannot be null."));
        } else {
            endpointResource.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.createOrUpdate(this.client.getEndpoint(), this.client.getApiVersion(), resourceUri, endpointName,
            contentType, accept, endpointResource, context);
    }

    /**
     * Create or update the endpoint to the target resource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param endpointName The endpoint name.
     * @param endpointResource Endpoint details.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the endpoint for the target resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<HybridConnectivityEndpointInner> createOrUpdateAsync(String resourceUri, String endpointName,
        HybridConnectivityEndpointInner endpointResource) {
        return createOrUpdateWithResponseAsync(resourceUri, endpointName, endpointResource)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Create or update the endpoint to the target resource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param endpointName The endpoint name.
     * @param endpointResource Endpoint details.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the endpoint for the target resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<HybridConnectivityEndpointInner> createOrUpdateWithResponse(String resourceUri, String endpointName,
        HybridConnectivityEndpointInner endpointResource, Context context) {
        return createOrUpdateWithResponseAsync(resourceUri, endpointName, endpointResource, context).block();
    }

    /**
     * Create or update the endpoint to the target resource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param endpointName The endpoint name.
     * @param endpointResource Endpoint details.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the endpoint for the target resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public HybridConnectivityEndpointInner createOrUpdate(String resourceUri, String endpointName,
        HybridConnectivityEndpointInner endpointResource) {
        return createOrUpdateWithResponse(resourceUri, endpointName, endpointResource, Context.NONE).getValue();
    }

    /**
     * Update the endpoint to the target resource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param endpointName The endpoint name.
     * @param endpointResource Endpoint details.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the endpoint for the target resource along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<HybridConnectivityEndpointInner>> updateWithResponseAsync(String resourceUri,
        String endpointName, HybridConnectivityEndpointInner endpointResource) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceUri == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceUri is required and cannot be null."));
        }
        if (endpointName == null) {
            return Mono.error(new IllegalArgumentException("Parameter endpointName is required and cannot be null."));
        }
        if (endpointResource == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter endpointResource is required and cannot be null."));
        } else {
            endpointResource.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.update(this.client.getEndpoint(), this.client.getApiVersion(), resourceUri,
                endpointName, contentType, accept, endpointResource, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Update the endpoint to the target resource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param endpointName The endpoint name.
     * @param endpointResource Endpoint details.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the endpoint for the target resource along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<HybridConnectivityEndpointInner>> updateWithResponseAsync(String resourceUri,
        String endpointName, HybridConnectivityEndpointInner endpointResource, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceUri == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceUri is required and cannot be null."));
        }
        if (endpointName == null) {
            return Mono.error(new IllegalArgumentException("Parameter endpointName is required and cannot be null."));
        }
        if (endpointResource == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter endpointResource is required and cannot be null."));
        } else {
            endpointResource.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.update(this.client.getEndpoint(), this.client.getApiVersion(), resourceUri, endpointName,
            contentType, accept, endpointResource, context);
    }

    /**
     * Update the endpoint to the target resource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param endpointName The endpoint name.
     * @param endpointResource Endpoint details.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the endpoint for the target resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<HybridConnectivityEndpointInner> updateAsync(String resourceUri, String endpointName,
        HybridConnectivityEndpointInner endpointResource) {
        return updateWithResponseAsync(resourceUri, endpointName, endpointResource)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Update the endpoint to the target resource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param endpointName The endpoint name.
     * @param endpointResource Endpoint details.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the endpoint for the target resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<HybridConnectivityEndpointInner> updateWithResponse(String resourceUri, String endpointName,
        HybridConnectivityEndpointInner endpointResource, Context context) {
        return updateWithResponseAsync(resourceUri, endpointName, endpointResource, context).block();
    }

    /**
     * Update the endpoint to the target resource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param endpointName The endpoint name.
     * @param endpointResource Endpoint details.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the endpoint for the target resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public HybridConnectivityEndpointInner update(String resourceUri, String endpointName,
        HybridConnectivityEndpointInner endpointResource) {
        return updateWithResponse(resourceUri, endpointName, endpointResource, Context.NONE).getValue();
    }

    /**
     * Deletes the endpoint access to the target resource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param endpointName The endpoint name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(String resourceUri, String endpointName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceUri == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceUri is required and cannot be null."));
        }
        if (endpointName == null) {
            return Mono.error(new IllegalArgumentException("Parameter endpointName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.delete(this.client.getEndpoint(), this.client.getApiVersion(), resourceUri,
                endpointName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Deletes the endpoint access to the target resource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param endpointName The endpoint name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(String resourceUri, String endpointName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceUri == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceUri is required and cannot be null."));
        }
        if (endpointName == null) {
            return Mono.error(new IllegalArgumentException("Parameter endpointName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.delete(this.client.getEndpoint(), this.client.getApiVersion(), resourceUri, endpointName, accept,
            context);
    }

    /**
     * Deletes the endpoint access to the target resource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param endpointName The endpoint name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceUri, String endpointName) {
        return deleteWithResponseAsync(resourceUri, endpointName).flatMap(ignored -> Mono.empty());
    }

    /**
     * Deletes the endpoint access to the target resource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param endpointName The endpoint name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(String resourceUri, String endpointName, Context context) {
        return deleteWithResponseAsync(resourceUri, endpointName, context).block();
    }

    /**
     * Deletes the endpoint access to the target resource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param endpointName The endpoint name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceUri, String endpointName) {
        deleteWithResponse(resourceUri, endpointName, Context.NONE);
    }

    /**
     * List of endpoints to the target resource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of endpoints along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<HybridConnectivityEndpointInner>> listSinglePageAsync(String resourceUri) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceUri == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceUri is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.list(this.client.getEndpoint(), this.client.getApiVersion(), resourceUri,
                accept, context))
            .<PagedResponse<HybridConnectivityEndpointInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List of endpoints to the target resource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of endpoints along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<HybridConnectivityEndpointInner>> listSinglePageAsync(String resourceUri,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceUri == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceUri is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.list(this.client.getEndpoint(), this.client.getApiVersion(), resourceUri, accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * List of endpoints to the target resource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of endpoints as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<HybridConnectivityEndpointInner> listAsync(String resourceUri) {
        return new PagedFlux<>(() -> listSinglePageAsync(resourceUri), nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * List of endpoints to the target resource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of endpoints as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<HybridConnectivityEndpointInner> listAsync(String resourceUri, Context context) {
        return new PagedFlux<>(() -> listSinglePageAsync(resourceUri, context),
            nextLink -> listNextSinglePageAsync(nextLink, context));
    }

    /**
     * List of endpoints to the target resource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of endpoints as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<HybridConnectivityEndpointInner> list(String resourceUri) {
        return new PagedIterable<>(listAsync(resourceUri));
    }

    /**
     * List of endpoints to the target resource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of endpoints as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<HybridConnectivityEndpointInner> list(String resourceUri, Context context) {
        return new PagedIterable<>(listAsync(resourceUri, context));
    }

    /**
     * Gets the endpoint access credentials to the resource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param endpointName The endpoint name.
     * @param expiresin The is how long the endpoint access token is valid (in seconds).
     * @param listCredentialsRequest Object of type ListCredentialsRequest.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the endpoint access credentials to the resource along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<TargetResourceEndpointAccessInner>> listCredentialsWithResponseAsync(String resourceUri,
        String endpointName, Long expiresin, ListCredentialsRequest listCredentialsRequest) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceUri == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceUri is required and cannot be null."));
        }
        if (endpointName == null) {
            return Mono.error(new IllegalArgumentException("Parameter endpointName is required and cannot be null."));
        }
        if (listCredentialsRequest != null) {
            listCredentialsRequest.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listCredentials(this.client.getEndpoint(), this.client.getApiVersion(),
                resourceUri, endpointName, expiresin, accept, listCredentialsRequest, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets the endpoint access credentials to the resource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param endpointName The endpoint name.
     * @param expiresin The is how long the endpoint access token is valid (in seconds).
     * @param listCredentialsRequest Object of type ListCredentialsRequest.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the endpoint access credentials to the resource along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<TargetResourceEndpointAccessInner>> listCredentialsWithResponseAsync(String resourceUri,
        String endpointName, Long expiresin, ListCredentialsRequest listCredentialsRequest, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceUri == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceUri is required and cannot be null."));
        }
        if (endpointName == null) {
            return Mono.error(new IllegalArgumentException("Parameter endpointName is required and cannot be null."));
        }
        if (listCredentialsRequest != null) {
            listCredentialsRequest.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listCredentials(this.client.getEndpoint(), this.client.getApiVersion(), resourceUri,
            endpointName, expiresin, accept, listCredentialsRequest, context);
    }

    /**
     * Gets the endpoint access credentials to the resource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param endpointName The endpoint name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the endpoint access credentials to the resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<TargetResourceEndpointAccessInner> listCredentialsAsync(String resourceUri, String endpointName) {
        final Long expiresin = null;
        final ListCredentialsRequest listCredentialsRequest = null;
        return listCredentialsWithResponseAsync(resourceUri, endpointName, expiresin, listCredentialsRequest)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets the endpoint access credentials to the resource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param endpointName The endpoint name.
     * @param expiresin The is how long the endpoint access token is valid (in seconds).
     * @param listCredentialsRequest Object of type ListCredentialsRequest.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the endpoint access credentials to the resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<TargetResourceEndpointAccessInner> listCredentialsWithResponse(String resourceUri,
        String endpointName, Long expiresin, ListCredentialsRequest listCredentialsRequest, Context context) {
        return listCredentialsWithResponseAsync(resourceUri, endpointName, expiresin, listCredentialsRequest, context)
            .block();
    }

    /**
     * Gets the endpoint access credentials to the resource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param endpointName The endpoint name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the endpoint access credentials to the resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TargetResourceEndpointAccessInner listCredentials(String resourceUri, String endpointName) {
        final Long expiresin = null;
        final ListCredentialsRequest listCredentialsRequest = null;
        return listCredentialsWithResponse(resourceUri, endpointName, expiresin, listCredentialsRequest, Context.NONE)
            .getValue();
    }

    /**
     * Gets the ingress gateway endpoint credentials.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param endpointName The endpoint name.
     * @param expiresin The is how long the endpoint access token is valid (in seconds).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ingress gateway endpoint credentials along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<IngressGatewayAssetInner>> listIngressGatewayCredentialsWithResponseAsync(String resourceUri,
        String endpointName, Long expiresin) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceUri == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceUri is required and cannot be null."));
        }
        if (endpointName == null) {
            return Mono.error(new IllegalArgumentException("Parameter endpointName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listIngressGatewayCredentials(this.client.getEndpoint(),
                this.client.getApiVersion(), resourceUri, endpointName, expiresin, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets the ingress gateway endpoint credentials.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param endpointName The endpoint name.
     * @param expiresin The is how long the endpoint access token is valid (in seconds).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ingress gateway endpoint credentials along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<IngressGatewayAssetInner>> listIngressGatewayCredentialsWithResponseAsync(String resourceUri,
        String endpointName, Long expiresin, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceUri == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceUri is required and cannot be null."));
        }
        if (endpointName == null) {
            return Mono.error(new IllegalArgumentException("Parameter endpointName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listIngressGatewayCredentials(this.client.getEndpoint(), this.client.getApiVersion(),
            resourceUri, endpointName, expiresin, accept, context);
    }

    /**
     * Gets the ingress gateway endpoint credentials.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param endpointName The endpoint name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ingress gateway endpoint credentials on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<IngressGatewayAssetInner> listIngressGatewayCredentialsAsync(String resourceUri, String endpointName) {
        final Long expiresin = null;
        return listIngressGatewayCredentialsWithResponseAsync(resourceUri, endpointName, expiresin)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets the ingress gateway endpoint credentials.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param endpointName The endpoint name.
     * @param expiresin The is how long the endpoint access token is valid (in seconds).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ingress gateway endpoint credentials along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<IngressGatewayAssetInner> listIngressGatewayCredentialsWithResponse(String resourceUri,
        String endpointName, Long expiresin, Context context) {
        return listIngressGatewayCredentialsWithResponseAsync(resourceUri, endpointName, expiresin, context).block();
    }

    /**
     * Gets the ingress gateway endpoint credentials.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param endpointName The endpoint name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ingress gateway endpoint credentials.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public IngressGatewayAssetInner listIngressGatewayCredentials(String resourceUri, String endpointName) {
        final Long expiresin = null;
        return listIngressGatewayCredentialsWithResponse(resourceUri, endpointName, expiresin, Context.NONE).getValue();
    }

    /**
     * Fetches the managed proxy details.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param endpointName The endpoint name.
     * @param managedProxyRequest Object of type ManagedProxyRequest.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return managed Proxy along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ManagedProxyAssetInner>> listManagedProxyDetailsWithResponseAsync(String resourceUri,
        String endpointName, ManagedProxyRequest managedProxyRequest) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceUri == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceUri is required and cannot be null."));
        }
        if (endpointName == null) {
            return Mono.error(new IllegalArgumentException("Parameter endpointName is required and cannot be null."));
        }
        if (managedProxyRequest == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managedProxyRequest is required and cannot be null."));
        } else {
            managedProxyRequest.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listManagedProxyDetails(this.client.getEndpoint(), this.client.getApiVersion(),
                    resourceUri, endpointName, contentType, accept, managedProxyRequest, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Fetches the managed proxy details.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param endpointName The endpoint name.
     * @param managedProxyRequest Object of type ManagedProxyRequest.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return managed Proxy along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ManagedProxyAssetInner>> listManagedProxyDetailsWithResponseAsync(String resourceUri,
        String endpointName, ManagedProxyRequest managedProxyRequest, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceUri == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceUri is required and cannot be null."));
        }
        if (endpointName == null) {
            return Mono.error(new IllegalArgumentException("Parameter endpointName is required and cannot be null."));
        }
        if (managedProxyRequest == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managedProxyRequest is required and cannot be null."));
        } else {
            managedProxyRequest.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listManagedProxyDetails(this.client.getEndpoint(), this.client.getApiVersion(), resourceUri,
            endpointName, contentType, accept, managedProxyRequest, context);
    }

    /**
     * Fetches the managed proxy details.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param endpointName The endpoint name.
     * @param managedProxyRequest Object of type ManagedProxyRequest.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return managed Proxy on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ManagedProxyAssetInner> listManagedProxyDetailsAsync(String resourceUri, String endpointName,
        ManagedProxyRequest managedProxyRequest) {
        return listManagedProxyDetailsWithResponseAsync(resourceUri, endpointName, managedProxyRequest)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Fetches the managed proxy details.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param endpointName The endpoint name.
     * @param managedProxyRequest Object of type ManagedProxyRequest.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return managed Proxy along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ManagedProxyAssetInner> listManagedProxyDetailsWithResponse(String resourceUri, String endpointName,
        ManagedProxyRequest managedProxyRequest, Context context) {
        return listManagedProxyDetailsWithResponseAsync(resourceUri, endpointName, managedProxyRequest, context)
            .block();
    }

    /**
     * Fetches the managed proxy details.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param endpointName The endpoint name.
     * @param managedProxyRequest Object of type ManagedProxyRequest.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return managed Proxy.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ManagedProxyAssetInner listManagedProxyDetails(String resourceUri, String endpointName,
        ManagedProxyRequest managedProxyRequest) {
        return listManagedProxyDetailsWithResponse(resourceUri, endpointName, managedProxyRequest, Context.NONE)
            .getValue();
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of endpoints along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<HybridConnectivityEndpointInner>> listNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.listNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<HybridConnectivityEndpointInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of endpoints along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<HybridConnectivityEndpointInner>> listNextSinglePageAsync(String nextLink,
        Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }
}
