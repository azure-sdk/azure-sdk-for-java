// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridconnectivity.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.hybridconnectivity.models.ResourceProvisioningState;
import com.azure.resourcemanager.hybridconnectivity.models.SolutionConfigurationStatus;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Map;

/**
 * Solution Configuration.
 */
@Fluent
public final class SolutionConfigurationInner extends ProxyResource {
    /*
     * The resource-specific properties for this resource.
     */
    private SolutionConfigurationProperties innerProperties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of SolutionConfigurationInner class.
     */
    public SolutionConfigurationInner() {
    }

    /**
     * Get the innerProperties property: The resource-specific properties for this resource.
     * 
     * @return the innerProperties value.
     */
    private SolutionConfigurationProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the provisioningState property: The resource provisioning state.
     * 
     * @return the provisioningState value.
     */
    public ResourceProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the solutionType property: The type of the solution.
     * 
     * @return the solutionType value.
     */
    public String solutionType() {
        return this.innerProperties() == null ? null : this.innerProperties().solutionType();
    }

    /**
     * Set the solutionType property: The type of the solution.
     * 
     * @param solutionType the solutionType value to set.
     * @return the SolutionConfigurationInner object itself.
     */
    public SolutionConfigurationInner withSolutionType(String solutionType) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SolutionConfigurationProperties();
        }
        this.innerProperties().withSolutionType(solutionType);
        return this;
    }

    /**
     * Get the solutionSettings property: Solution settings.
     * 
     * @return the solutionSettings value.
     */
    public Map<String, String> solutionSettings() {
        return this.innerProperties() == null ? null : this.innerProperties().solutionSettings();
    }

    /**
     * Set the solutionSettings property: Solution settings.
     * 
     * @param solutionSettings the solutionSettings value to set.
     * @return the SolutionConfigurationInner object itself.
     */
    public SolutionConfigurationInner withSolutionSettings(Map<String, String> solutionSettings) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SolutionConfigurationProperties();
        }
        this.innerProperties().withSolutionSettings(solutionSettings);
        return this;
    }

    /**
     * Get the status property: The status of solution configurations.
     * 
     * @return the status value.
     */
    public SolutionConfigurationStatus status() {
        return this.innerProperties() == null ? null : this.innerProperties().status();
    }

    /**
     * Get the statusDetails property: The detailed message of status details.
     * 
     * @return the statusDetails value.
     */
    public String statusDetails() {
        return this.innerProperties() == null ? null : this.innerProperties().statusDetails();
    }

    /**
     * Get the lastSyncTime property: The last time resources were inventoried.
     * 
     * @return the lastSyncTime value.
     */
    public OffsetDateTime lastSyncTime() {
        return this.innerProperties() == null ? null : this.innerProperties().lastSyncTime();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SolutionConfigurationInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SolutionConfigurationInner if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SolutionConfigurationInner.
     */
    public static SolutionConfigurationInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SolutionConfigurationInner deserializedSolutionConfigurationInner = new SolutionConfigurationInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedSolutionConfigurationInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedSolutionConfigurationInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedSolutionConfigurationInner.type = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedSolutionConfigurationInner.innerProperties
                        = SolutionConfigurationProperties.fromJson(reader);
                } else if ("systemData".equals(fieldName)) {
                    deserializedSolutionConfigurationInner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSolutionConfigurationInner;
        });
    }
}
