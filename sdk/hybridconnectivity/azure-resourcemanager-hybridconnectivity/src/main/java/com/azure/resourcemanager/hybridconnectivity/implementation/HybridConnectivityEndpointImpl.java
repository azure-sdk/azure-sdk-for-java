// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.hybridconnectivity.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.hybridconnectivity.fluent.models.HybridConnectivityEndpointInner;
import com.azure.resourcemanager.hybridconnectivity.models.HybridConnectivityEndpoint;
import com.azure.resourcemanager.hybridconnectivity.models.HybridConnectivityEndpointProperties;
import com.azure.resourcemanager.hybridconnectivity.models.IngressGatewayAsset;
import com.azure.resourcemanager.hybridconnectivity.models.ListCredentialsRequest;
import com.azure.resourcemanager.hybridconnectivity.models.ManagedProxyAsset;
import com.azure.resourcemanager.hybridconnectivity.models.ManagedProxyRequest;
import com.azure.resourcemanager.hybridconnectivity.models.TargetResourceEndpointAccess;

public final class HybridConnectivityEndpointImpl
    implements HybridConnectivityEndpoint, HybridConnectivityEndpoint.Definition, HybridConnectivityEndpoint.Update {
    private HybridConnectivityEndpointInner innerObject;

    private final com.azure.resourcemanager.hybridconnectivity.HybridConnectivityManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public HybridConnectivityEndpointProperties properties() {
        return this.innerModel().properties();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public HybridConnectivityEndpointInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.hybridconnectivity.HybridConnectivityManager manager() {
        return this.serviceManager;
    }

    private String resourceUri;

    private String endpointName;

    public HybridConnectivityEndpointImpl withExistingResourceUri(String resourceUri) {
        this.resourceUri = resourceUri;
        return this;
    }

    public HybridConnectivityEndpoint create() {
        this.innerObject = serviceManager.serviceClient()
            .getEndpoints()
            .createOrUpdateWithResponse(resourceUri, endpointName, this.innerModel(), Context.NONE)
            .getValue();
        return this;
    }

    public HybridConnectivityEndpoint create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getEndpoints()
            .createOrUpdateWithResponse(resourceUri, endpointName, this.innerModel(), context)
            .getValue();
        return this;
    }

    HybridConnectivityEndpointImpl(String name,
        com.azure.resourcemanager.hybridconnectivity.HybridConnectivityManager serviceManager) {
        this.innerObject = new HybridConnectivityEndpointInner();
        this.serviceManager = serviceManager;
        this.endpointName = name;
    }

    public HybridConnectivityEndpointImpl update() {
        return this;
    }

    public HybridConnectivityEndpoint apply() {
        this.innerObject = serviceManager.serviceClient()
            .getEndpoints()
            .updateWithResponse(resourceUri, endpointName, this.innerModel(), Context.NONE)
            .getValue();
        return this;
    }

    public HybridConnectivityEndpoint apply(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getEndpoints()
            .updateWithResponse(resourceUri, endpointName, this.innerModel(), context)
            .getValue();
        return this;
    }

    HybridConnectivityEndpointImpl(HybridConnectivityEndpointInner innerObject,
        com.azure.resourcemanager.hybridconnectivity.HybridConnectivityManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceUri = ResourceManagerUtils.getValueFromIdByParameterName(innerObject.id(),
            "/{resourceUri}/providers/Microsoft.HybridConnectivity/endpoints/{endpointName}", "resourceUri");
        this.endpointName = ResourceManagerUtils.getValueFromIdByParameterName(innerObject.id(),
            "/{resourceUri}/providers/Microsoft.HybridConnectivity/endpoints/{endpointName}", "endpointName");
    }

    public HybridConnectivityEndpoint refresh() {
        this.innerObject = serviceManager.serviceClient()
            .getEndpoints()
            .getWithResponse(resourceUri, endpointName, Context.NONE)
            .getValue();
        return this;
    }

    public HybridConnectivityEndpoint refresh(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getEndpoints()
            .getWithResponse(resourceUri, endpointName, context)
            .getValue();
        return this;
    }

    public Response<TargetResourceEndpointAccess> listCredentialsWithResponse(Long expiresin,
        ListCredentialsRequest listCredentialsRequest, Context context) {
        return serviceManager.endpoints()
            .listCredentialsWithResponse(resourceUri, endpointName, expiresin, listCredentialsRequest, context);
    }

    public TargetResourceEndpointAccess listCredentials() {
        return serviceManager.endpoints().listCredentials(resourceUri, endpointName);
    }

    public Response<IngressGatewayAsset> listIngressGatewayCredentialsWithResponse(Long expiresin, Context context) {
        return serviceManager.endpoints()
            .listIngressGatewayCredentialsWithResponse(resourceUri, endpointName, expiresin, context);
    }

    public IngressGatewayAsset listIngressGatewayCredentials() {
        return serviceManager.endpoints().listIngressGatewayCredentials(resourceUri, endpointName);
    }

    public Response<ManagedProxyAsset> listManagedProxyDetailsWithResponse(ManagedProxyRequest managedProxyRequest,
        Context context) {
        return serviceManager.endpoints()
            .listManagedProxyDetailsWithResponse(resourceUri, endpointName, managedProxyRequest, context);
    }

    public ManagedProxyAsset listManagedProxyDetails(ManagedProxyRequest managedProxyRequest) {
        return serviceManager.endpoints().listManagedProxyDetails(resourceUri, endpointName, managedProxyRequest);
    }

    public HybridConnectivityEndpointImpl withProperties(HybridConnectivityEndpointProperties properties) {
        this.innerModel().withProperties(properties);
        return this;
    }
}
