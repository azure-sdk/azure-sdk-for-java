// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.hybridconnectivity.implementation;

import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.hybridconnectivity.fluent.models.HybridConnectivityServiceConfigurationInner;
import com.azure.resourcemanager.hybridconnectivity.models.HybridConnectivityProvisioningState;
import com.azure.resourcemanager.hybridconnectivity.models.HybridConnectivityServiceConfiguration;
import com.azure.resourcemanager.hybridconnectivity.models.HybridConnectivityServiceName;
import com.azure.resourcemanager.hybridconnectivity.models.ServiceConfigurationResourcePatch;

public final class HybridConnectivityServiceConfigurationImpl implements HybridConnectivityServiceConfiguration,
    HybridConnectivityServiceConfiguration.Definition, HybridConnectivityServiceConfiguration.Update {
    private HybridConnectivityServiceConfigurationInner innerObject;

    private final com.azure.resourcemanager.hybridconnectivity.HybridConnectivityManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public HybridConnectivityServiceName serviceName() {
        return this.innerModel().serviceName();
    }

    public String resourceId() {
        return this.innerModel().resourceId();
    }

    public Long port() {
        return this.innerModel().port();
    }

    public HybridConnectivityProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public HybridConnectivityServiceConfigurationInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.hybridconnectivity.HybridConnectivityManager manager() {
        return this.serviceManager;
    }

    private String resourceUri;

    private String endpointName;

    private String serviceConfigurationName;

    private ServiceConfigurationResourcePatch updateServiceConfigurationResource;

    public HybridConnectivityServiceConfigurationImpl withExistingEndpoint(String resourceUri, String endpointName) {
        this.resourceUri = resourceUri;
        this.endpointName = endpointName;
        return this;
    }

    public HybridConnectivityServiceConfiguration create() {
        this.innerObject = serviceManager.serviceClient()
            .getServiceConfigurations()
            .createOrupdateWithResponse(resourceUri, endpointName, serviceConfigurationName, this.innerModel(),
                Context.NONE)
            .getValue();
        return this;
    }

    public HybridConnectivityServiceConfiguration create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getServiceConfigurations()
            .createOrupdateWithResponse(resourceUri, endpointName, serviceConfigurationName, this.innerModel(), context)
            .getValue();
        return this;
    }

    HybridConnectivityServiceConfigurationImpl(String name,
        com.azure.resourcemanager.hybridconnectivity.HybridConnectivityManager serviceManager) {
        this.innerObject = new HybridConnectivityServiceConfigurationInner();
        this.serviceManager = serviceManager;
        this.serviceConfigurationName = name;
    }

    public HybridConnectivityServiceConfigurationImpl update() {
        this.updateServiceConfigurationResource = new ServiceConfigurationResourcePatch();
        return this;
    }

    public HybridConnectivityServiceConfiguration apply() {
        this.innerObject = serviceManager.serviceClient()
            .getServiceConfigurations()
            .updateWithResponse(resourceUri, endpointName, serviceConfigurationName, updateServiceConfigurationResource,
                Context.NONE)
            .getValue();
        return this;
    }

    public HybridConnectivityServiceConfiguration apply(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getServiceConfigurations()
            .updateWithResponse(resourceUri, endpointName, serviceConfigurationName, updateServiceConfigurationResource,
                context)
            .getValue();
        return this;
    }

    HybridConnectivityServiceConfigurationImpl(HybridConnectivityServiceConfigurationInner innerObject,
        com.azure.resourcemanager.hybridconnectivity.HybridConnectivityManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceUri = ResourceManagerUtils.getValueFromIdByParameterName(innerObject.id(),
            "/{resourceUri}/providers/Microsoft.HybridConnectivity/endpoints/{endpointName}/serviceConfigurations/{serviceConfigurationName}",
            "resourceUri");
        this.endpointName = ResourceManagerUtils.getValueFromIdByParameterName(innerObject.id(),
            "/{resourceUri}/providers/Microsoft.HybridConnectivity/endpoints/{endpointName}/serviceConfigurations/{serviceConfigurationName}",
            "endpointName");
        this.serviceConfigurationName = ResourceManagerUtils.getValueFromIdByParameterName(innerObject.id(),
            "/{resourceUri}/providers/Microsoft.HybridConnectivity/endpoints/{endpointName}/serviceConfigurations/{serviceConfigurationName}",
            "serviceConfigurationName");
    }

    public HybridConnectivityServiceConfiguration refresh() {
        this.innerObject = serviceManager.serviceClient()
            .getServiceConfigurations()
            .getWithResponse(resourceUri, endpointName, serviceConfigurationName, Context.NONE)
            .getValue();
        return this;
    }

    public HybridConnectivityServiceConfiguration refresh(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getServiceConfigurations()
            .getWithResponse(resourceUri, endpointName, serviceConfigurationName, context)
            .getValue();
        return this;
    }

    public HybridConnectivityServiceConfigurationImpl withServiceName(HybridConnectivityServiceName serviceName) {
        this.innerModel().withServiceName(serviceName);
        return this;
    }

    public HybridConnectivityServiceConfigurationImpl withResourceId(String resourceId) {
        this.innerModel().withResourceId(resourceId);
        return this;
    }

    public HybridConnectivityServiceConfigurationImpl withPort(Long port) {
        if (isInCreateMode()) {
            this.innerModel().withPort(port);
            return this;
        } else {
            this.updateServiceConfigurationResource.withPort(port);
            return this;
        }
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
