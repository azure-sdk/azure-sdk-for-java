// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridconnectivity.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Solution type permissions.
 */
@Fluent
public final class SolutionTypePermissions implements JsonSerializable<SolutionTypePermissions> {
    /*
     * The name of solution Type
     */
    private SolutionTypeEnum solutionType;

    /*
     * The status
     */
    private Status status;

    /*
     * The details of the status
     */
    private String statusDetails;

    /**
     * Creates an instance of SolutionTypePermissions class.
     */
    public SolutionTypePermissions() {
    }

    /**
     * Get the solutionType property: The name of solution Type.
     * 
     * @return the solutionType value.
     */
    public SolutionTypeEnum solutionType() {
        return this.solutionType;
    }

    /**
     * Set the solutionType property: The name of solution Type.
     * 
     * @param solutionType the solutionType value to set.
     * @return the SolutionTypePermissions object itself.
     */
    public SolutionTypePermissions withSolutionType(SolutionTypeEnum solutionType) {
        this.solutionType = solutionType;
        return this;
    }

    /**
     * Get the status property: The status.
     * 
     * @return the status value.
     */
    public Status status() {
        return this.status;
    }

    /**
     * Set the status property: The status.
     * 
     * @param status the status value to set.
     * @return the SolutionTypePermissions object itself.
     */
    public SolutionTypePermissions withStatus(Status status) {
        this.status = status;
        return this;
    }

    /**
     * Get the statusDetails property: The details of the status.
     * 
     * @return the statusDetails value.
     */
    public String statusDetails() {
        return this.statusDetails;
    }

    /**
     * Set the statusDetails property: The details of the status.
     * 
     * @param statusDetails the statusDetails value to set.
     * @return the SolutionTypePermissions object itself.
     */
    public SolutionTypePermissions withStatusDetails(String statusDetails) {
        this.statusDetails = statusDetails;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (solutionType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property solutionType in model SolutionTypePermissions"));
        }
        if (status() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property status in model SolutionTypePermissions"));
        }
        if (statusDetails() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property statusDetails in model SolutionTypePermissions"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(SolutionTypePermissions.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("solutionType", this.solutionType == null ? null : this.solutionType.toString());
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        jsonWriter.writeStringField("statusDetails", this.statusDetails);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SolutionTypePermissions from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SolutionTypePermissions if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SolutionTypePermissions.
     */
    public static SolutionTypePermissions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SolutionTypePermissions deserializedSolutionTypePermissions = new SolutionTypePermissions();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("solutionType".equals(fieldName)) {
                    deserializedSolutionTypePermissions.solutionType = SolutionTypeEnum.fromString(reader.getString());
                } else if ("status".equals(fieldName)) {
                    deserializedSolutionTypePermissions.status = Status.fromString(reader.getString());
                } else if ("statusDetails".equals(fieldName)) {
                    deserializedSolutionTypePermissions.statusDetails = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSolutionTypePermissions;
        });
    }
}
