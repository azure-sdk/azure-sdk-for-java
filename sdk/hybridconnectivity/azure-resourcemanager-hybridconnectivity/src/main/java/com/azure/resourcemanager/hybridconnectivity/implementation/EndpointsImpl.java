// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.hybridconnectivity.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.hybridconnectivity.fluent.EndpointsClient;
import com.azure.resourcemanager.hybridconnectivity.fluent.models.HybridConnectivityEndpointInner;
import com.azure.resourcemanager.hybridconnectivity.fluent.models.IngressGatewayAssetInner;
import com.azure.resourcemanager.hybridconnectivity.fluent.models.ManagedProxyAssetInner;
import com.azure.resourcemanager.hybridconnectivity.fluent.models.TargetResourceEndpointAccessInner;
import com.azure.resourcemanager.hybridconnectivity.models.Endpoints;
import com.azure.resourcemanager.hybridconnectivity.models.HybridConnectivityEndpoint;
import com.azure.resourcemanager.hybridconnectivity.models.IngressGatewayAsset;
import com.azure.resourcemanager.hybridconnectivity.models.ListCredentialsRequest;
import com.azure.resourcemanager.hybridconnectivity.models.ManagedProxyAsset;
import com.azure.resourcemanager.hybridconnectivity.models.ManagedProxyRequest;
import com.azure.resourcemanager.hybridconnectivity.models.TargetResourceEndpointAccess;

public final class EndpointsImpl implements Endpoints {
    private static final ClientLogger LOGGER = new ClientLogger(EndpointsImpl.class);

    private final EndpointsClient innerClient;

    private final com.azure.resourcemanager.hybridconnectivity.HybridConnectivityManager serviceManager;

    public EndpointsImpl(EndpointsClient innerClient,
        com.azure.resourcemanager.hybridconnectivity.HybridConnectivityManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<HybridConnectivityEndpoint> getWithResponse(String resourceUri, String endpointName,
        Context context) {
        Response<HybridConnectivityEndpointInner> inner
            = this.serviceClient().getWithResponse(resourceUri, endpointName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new HybridConnectivityEndpointImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public HybridConnectivityEndpoint get(String resourceUri, String endpointName) {
        HybridConnectivityEndpointInner inner = this.serviceClient().get(resourceUri, endpointName);
        if (inner != null) {
            return new HybridConnectivityEndpointImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteByResourceGroupWithResponse(String resourceUri, String endpointName, Context context) {
        return this.serviceClient().deleteWithResponse(resourceUri, endpointName, context);
    }

    public void deleteByResourceGroup(String resourceUri, String endpointName) {
        this.serviceClient().delete(resourceUri, endpointName);
    }

    public PagedIterable<HybridConnectivityEndpoint> list(String resourceUri) {
        PagedIterable<HybridConnectivityEndpointInner> inner = this.serviceClient().list(resourceUri);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new HybridConnectivityEndpointImpl(inner1, this.manager()));
    }

    public PagedIterable<HybridConnectivityEndpoint> list(String resourceUri, Context context) {
        PagedIterable<HybridConnectivityEndpointInner> inner = this.serviceClient().list(resourceUri, context);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new HybridConnectivityEndpointImpl(inner1, this.manager()));
    }

    public Response<TargetResourceEndpointAccess> listCredentialsWithResponse(String resourceUri, String endpointName,
        Long expiresin, ListCredentialsRequest listCredentialsRequest, Context context) {
        Response<TargetResourceEndpointAccessInner> inner = this.serviceClient()
            .listCredentialsWithResponse(resourceUri, endpointName, expiresin, listCredentialsRequest, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new TargetResourceEndpointAccessImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public TargetResourceEndpointAccess listCredentials(String resourceUri, String endpointName) {
        TargetResourceEndpointAccessInner inner = this.serviceClient().listCredentials(resourceUri, endpointName);
        if (inner != null) {
            return new TargetResourceEndpointAccessImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<IngressGatewayAsset> listIngressGatewayCredentialsWithResponse(String resourceUri,
        String endpointName, Long expiresin, Context context) {
        Response<IngressGatewayAssetInner> inner = this.serviceClient()
            .listIngressGatewayCredentialsWithResponse(resourceUri, endpointName, expiresin, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new IngressGatewayAssetImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public IngressGatewayAsset listIngressGatewayCredentials(String resourceUri, String endpointName) {
        IngressGatewayAssetInner inner = this.serviceClient().listIngressGatewayCredentials(resourceUri, endpointName);
        if (inner != null) {
            return new IngressGatewayAssetImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ManagedProxyAsset> listManagedProxyDetailsWithResponse(String resourceUri, String endpointName,
        ManagedProxyRequest managedProxyRequest, Context context) {
        Response<ManagedProxyAssetInner> inner = this.serviceClient()
            .listManagedProxyDetailsWithResponse(resourceUri, endpointName, managedProxyRequest, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new ManagedProxyAssetImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ManagedProxyAsset listManagedProxyDetails(String resourceUri, String endpointName,
        ManagedProxyRequest managedProxyRequest) {
        ManagedProxyAssetInner inner
            = this.serviceClient().listManagedProxyDetails(resourceUri, endpointName, managedProxyRequest);
        if (inner != null) {
            return new ManagedProxyAssetImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public HybridConnectivityEndpoint getById(String id) {
        String resourceUri = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{resourceUri}/providers/Microsoft.HybridConnectivity/endpoints/{endpointName}", "resourceUri");
        if (resourceUri == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceUri'.", id)));
        }
        String endpointName = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{resourceUri}/providers/Microsoft.HybridConnectivity/endpoints/{endpointName}", "endpointName");
        if (endpointName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'endpoints'.", id)));
        }
        return this.getWithResponse(resourceUri, endpointName, Context.NONE).getValue();
    }

    public Response<HybridConnectivityEndpoint> getByIdWithResponse(String id, Context context) {
        String resourceUri = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{resourceUri}/providers/Microsoft.HybridConnectivity/endpoints/{endpointName}", "resourceUri");
        if (resourceUri == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceUri'.", id)));
        }
        String endpointName = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{resourceUri}/providers/Microsoft.HybridConnectivity/endpoints/{endpointName}", "endpointName");
        if (endpointName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'endpoints'.", id)));
        }
        return this.getWithResponse(resourceUri, endpointName, context);
    }

    public void deleteById(String id) {
        String resourceUri = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{resourceUri}/providers/Microsoft.HybridConnectivity/endpoints/{endpointName}", "resourceUri");
        if (resourceUri == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceUri'.", id)));
        }
        String endpointName = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{resourceUri}/providers/Microsoft.HybridConnectivity/endpoints/{endpointName}", "endpointName");
        if (endpointName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'endpoints'.", id)));
        }
        this.deleteByResourceGroupWithResponse(resourceUri, endpointName, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceUri = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{resourceUri}/providers/Microsoft.HybridConnectivity/endpoints/{endpointName}", "resourceUri");
        if (resourceUri == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceUri'.", id)));
        }
        String endpointName = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{resourceUri}/providers/Microsoft.HybridConnectivity/endpoints/{endpointName}", "endpointName");
        if (endpointName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'endpoints'.", id)));
        }
        return this.deleteByResourceGroupWithResponse(resourceUri, endpointName, context);
    }

    private EndpointsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.hybridconnectivity.HybridConnectivityManager manager() {
        return this.serviceManager;
    }

    public HybridConnectivityEndpointImpl define(String name) {
        return new HybridConnectivityEndpointImpl(name, this.manager());
    }
}
