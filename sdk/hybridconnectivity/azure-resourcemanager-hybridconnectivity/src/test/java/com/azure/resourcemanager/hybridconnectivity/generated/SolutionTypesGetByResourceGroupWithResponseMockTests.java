// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.hybridconnectivity.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.hybridconnectivity.HybridConnectivityManager;
import com.azure.resourcemanager.hybridconnectivity.models.SolutionTypeResource;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SolutionTypesGetByResourceGroupWithResponseMockTests {
    @Test
    public void testGetByResourceGroupWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"solutionType\":\"hoftr\",\"description\":\"equi\",\"supportedAzureRegions\":[\"icslfaoq\",\"piyylhalnswhccsp\"],\"solutionSettings\":[{\"name\":\"ivwitqscywugg\",\"displayName\":\"oluhczbwemh\",\"type\":\"i\",\"description\":\"sbrgz\",\"allowedValues\":[\"msweypqwdxggicc\",\"n\",\"qhuexm\"],\"defaultValue\":\"ttlstvlzywemhz\"},{\"name\":\"ncsdtclusiyp\",\"displayName\":\"sfgytguslfead\",\"type\":\"ygqukyhejh\",\"description\":\"isxgfp\",\"allowedValues\":[\"olppvksrpqvujz\"],\"defaultValue\":\"aehtwd\"},{\"name\":\"r\",\"displayName\":\"tswiby\",\"type\":\"cdl\",\"description\":\"h\",\"allowedValues\":[\"fwpracstwi\",\"ykhevxccedcpnmdy\",\"dnwzxltjcvnhltiu\"],\"defaultValue\":\"cxnavv\"}]},\"id\":\"qiby\",\"name\":\"unyowxwl\",\"type\":\"djrkvfgbvfvpd\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        HybridConnectivityManager manager = HybridConnectivityManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        SolutionTypeResource response = manager.solutionTypes()
            .getByResourceGroupWithResponse("efozbhdms", "l", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("hoftr", response.properties().solutionType());
        Assertions.assertEquals("equi", response.properties().description());
        Assertions.assertEquals("icslfaoq", response.properties().supportedAzureRegions().get(0));
        Assertions.assertEquals("ivwitqscywugg", response.properties().solutionSettings().get(0).name());
        Assertions.assertEquals("oluhczbwemh", response.properties().solutionSettings().get(0).displayName());
        Assertions.assertEquals("i", response.properties().solutionSettings().get(0).type());
        Assertions.assertEquals("sbrgz", response.properties().solutionSettings().get(0).description());
        Assertions.assertEquals("msweypqwdxggicc",
            response.properties().solutionSettings().get(0).allowedValues().get(0));
        Assertions.assertEquals("ttlstvlzywemhz", response.properties().solutionSettings().get(0).defaultValue());
    }
}
