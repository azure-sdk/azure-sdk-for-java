// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.hybridconnectivity.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.hybridconnectivity.HybridConnectivityManager;
import com.azure.resourcemanager.hybridconnectivity.models.SolutionTypeResource;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SolutionTypesListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"solutionType\":\"fmmdnbbg\",\"description\":\"pswiydmcwyh\",\"supportedAzureRegions\":[\"ss\",\"dbzm\",\"vdfznudaodvxzb\"],\"solutionSettings\":[{\"name\":\"lylpstdb\",\"displayName\":\"hxsrzdzucersc\",\"type\":\"ntnev\",\"description\":\"iwjmygtdssls\",\"allowedValues\":[\"mweriofzpy\",\"semwabnet\",\"hhszh\"],\"defaultValue\":\"d\"},{\"name\":\"lvwiwubmwmbesl\",\"displayName\":\"nkww\",\"type\":\"pp\",\"description\":\"flcxoga\",\"allowedValues\":[\"onz\",\"nsikvmkqzeqqkdl\",\"fzxmhhvhgureodkw\"],\"defaultValue\":\"bdagxt\"},{\"name\":\"bqdxbx\",\"displayName\":\"akbogqxndlkzgxh\",\"type\":\"ripl\",\"description\":\"podxunkb\",\"allowedValues\":[\"xmubyyntwlrbq\",\"koievseo\",\"gqrlltmuwla\"],\"defaultValue\":\"wzizxbmpgcjefuzm\"}]},\"id\":\"pbttdum\",\"name\":\"rp\",\"type\":\"xe\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        HybridConnectivityManager manager = HybridConnectivityManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<SolutionTypeResource> response
            = manager.solutionTypes().listByResourceGroup("tgccymvaolpss", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("fmmdnbbg", response.iterator().next().properties().solutionType());
        Assertions.assertEquals("pswiydmcwyh", response.iterator().next().properties().description());
        Assertions.assertEquals("ss", response.iterator().next().properties().supportedAzureRegions().get(0));
        Assertions.assertEquals("lylpstdb", response.iterator().next().properties().solutionSettings().get(0).name());
        Assertions.assertEquals("hxsrzdzucersc",
            response.iterator().next().properties().solutionSettings().get(0).displayName());
        Assertions.assertEquals("ntnev", response.iterator().next().properties().solutionSettings().get(0).type());
        Assertions.assertEquals("iwjmygtdssls",
            response.iterator().next().properties().solutionSettings().get(0).description());
        Assertions.assertEquals("mweriofzpy",
            response.iterator().next().properties().solutionSettings().get(0).allowedValues().get(0));
        Assertions.assertEquals("d", response.iterator().next().properties().solutionSettings().get(0).defaultValue());
    }
}
