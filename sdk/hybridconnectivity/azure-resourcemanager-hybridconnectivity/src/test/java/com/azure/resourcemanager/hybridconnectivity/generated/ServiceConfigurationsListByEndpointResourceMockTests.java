// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.hybridconnectivity.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.hybridconnectivity.HybridConnectivityManager;
import com.azure.resourcemanager.hybridconnectivity.models.HybridConnectivityServiceConfiguration;
import com.azure.resourcemanager.hybridconnectivity.models.HybridConnectivityServiceName;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ServiceConfigurationsListByEndpointResourceMockTests {
    @Test
    public void testListByEndpointResource() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"serviceName\":\"WAC\",\"resourceId\":\"fmmdnbbg\",\"port\":3156235499243727087,\"provisioningState\":\"Updating\"},\"id\":\"d\",\"name\":\"cwyhzdxssa\",\"type\":\"bzmnvdfznud\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        HybridConnectivityManager manager = HybridConnectivityManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<HybridConnectivityServiceConfiguration> response = manager.serviceConfigurations()
            .listByEndpointResource("bgycduiertgccym", "aolps", com.azure.core.util.Context.NONE);

        Assertions.assertEquals(HybridConnectivityServiceName.WAC, response.iterator().next().serviceName());
        Assertions.assertEquals("fmmdnbbg", response.iterator().next().resourceId());
        Assertions.assertEquals(3156235499243727087L, response.iterator().next().port());
    }
}
