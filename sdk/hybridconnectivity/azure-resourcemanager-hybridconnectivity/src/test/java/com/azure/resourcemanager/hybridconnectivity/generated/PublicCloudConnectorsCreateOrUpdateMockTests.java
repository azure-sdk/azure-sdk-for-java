// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.hybridconnectivity.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.hybridconnectivity.HybridConnectivityManager;
import com.azure.resourcemanager.hybridconnectivity.models.AwsCloudProfile;
import com.azure.resourcemanager.hybridconnectivity.models.HostType;
import com.azure.resourcemanager.hybridconnectivity.models.PublicCloudConnector;
import com.azure.resourcemanager.hybridconnectivity.models.PublicCloudConnectorProperties;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PublicCloudConnectorsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"awsCloudProfile\":{\"accountId\":\"vcikhnvpamqgx\",\"excludedAccounts\":[\"ezikywggxkal\"],\"isOrganizationalAccount\":false},\"hostType\":\"AWS\",\"provisioningState\":\"Succeeded\",\"connectorPrimaryIdentifier\":\"uipiccjzk\"},\"location\":\"v\",\"tags\":{\"ayrhyrnx\":\"c\"},\"id\":\"mueedndrdvstk\",\"name\":\"qqtch\",\"type\":\"alm\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        HybridConnectivityManager manager = HybridConnectivityManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PublicCloudConnector response = manager.publicCloudConnectors()
            .define("n")
            .withRegion("ibzyhwitsmyp")
            .withExistingResourceGroup("kn")
            .withTags(mapOf("mwzn", "pcdpumnz", "rgjhxb", "abikns", "tncvokot", "dtlwwrlkd"))
            .withProperties(
                new PublicCloudConnectorProperties().withAwsCloudProfile(new AwsCloudProfile().withAccountId("ynl")
                    .withExcludedAccounts(Arrays.asList("uopxodlqiyntor", "ihleos", "swsrms", "yzrpzbchckqqzq"))
                    .withIsOrganizationalAccount(false)).withHostType(HostType.AWS))
            .create();

        Assertions.assertEquals("v", response.location());
        Assertions.assertEquals("c", response.tags().get("ayrhyrnx"));
        Assertions.assertEquals("vcikhnvpamqgx", response.properties().awsCloudProfile().accountId());
        Assertions.assertEquals("ezikywggxkal", response.properties().awsCloudProfile().excludedAccounts().get(0));
        Assertions.assertEquals(false, response.properties().awsCloudProfile().isOrganizationalAccount());
        Assertions.assertEquals(HostType.AWS, response.properties().hostType());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
