// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.hybridconnectivity.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hybridconnectivity.fluent.models.PublicCloudConnectorInner;
import com.azure.resourcemanager.hybridconnectivity.models.AwsCloudProfile;
import com.azure.resourcemanager.hybridconnectivity.models.HostType;
import com.azure.resourcemanager.hybridconnectivity.models.PublicCloudConnectorProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class PublicCloudConnectorInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PublicCloudConnectorInner model = BinaryData.fromString(
            "{\"properties\":{\"awsCloudProfile\":{\"accountId\":\"o\",\"excludedAccounts\":[\"kfo\"],\"isOrganizationalAccount\":false},\"hostType\":\"AWS\",\"provisioningState\":\"Succeeded\",\"connectorPrimaryIdentifier\":\"fjddeqs\"},\"location\":\"eupewnwreitjz\",\"tags\":{\"hs\":\"usarhmofc\",\"xukcdmpar\":\"yurkdtmlxhekuksj\"},\"id\":\"ryuanzwuxzdxtay\",\"name\":\"lhmwhfpmrqobm\",\"type\":\"u\"}")
            .toObject(PublicCloudConnectorInner.class);
        Assertions.assertEquals("eupewnwreitjz", model.location());
        Assertions.assertEquals("usarhmofc", model.tags().get("hs"));
        Assertions.assertEquals("o", model.properties().awsCloudProfile().accountId());
        Assertions.assertEquals("kfo", model.properties().awsCloudProfile().excludedAccounts().get(0));
        Assertions.assertEquals(false, model.properties().awsCloudProfile().isOrganizationalAccount());
        Assertions.assertEquals(HostType.AWS, model.properties().hostType());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PublicCloudConnectorInner model = new PublicCloudConnectorInner().withLocation("eupewnwreitjz")
            .withTags(mapOf("hs", "usarhmofc", "xukcdmpar", "yurkdtmlxhekuksj"))
            .withProperties(
                new PublicCloudConnectorProperties().withAwsCloudProfile(new AwsCloudProfile().withAccountId("o")
                    .withExcludedAccounts(Arrays.asList("kfo"))
                    .withIsOrganizationalAccount(false)).withHostType(HostType.AWS));
        model = BinaryData.fromObject(model).toObject(PublicCloudConnectorInner.class);
        Assertions.assertEquals("eupewnwreitjz", model.location());
        Assertions.assertEquals("usarhmofc", model.tags().get("hs"));
        Assertions.assertEquals("o", model.properties().awsCloudProfile().accountId());
        Assertions.assertEquals("kfo", model.properties().awsCloudProfile().excludedAccounts().get(0));
        Assertions.assertEquals(false, model.properties().awsCloudProfile().isOrganizationalAccount());
        Assertions.assertEquals(HostType.AWS, model.properties().hostType());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
