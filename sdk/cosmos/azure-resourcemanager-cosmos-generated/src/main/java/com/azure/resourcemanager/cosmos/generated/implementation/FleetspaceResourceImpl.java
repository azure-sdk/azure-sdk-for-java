// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.generated.implementation;

import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.cosmos.generated.fluent.models.FleetspaceResourceInner;
import com.azure.resourcemanager.cosmos.generated.models.FleetspacePropertiesFleetspaceApiKind;
import com.azure.resourcemanager.cosmos.generated.models.FleetspacePropertiesThroughputPoolConfiguration;
import com.azure.resourcemanager.cosmos.generated.models.FleetspaceResource;
import com.azure.resourcemanager.cosmos.generated.models.FleetspaceUpdate;
import com.azure.resourcemanager.cosmos.generated.models.Status;

public final class FleetspaceResourceImpl
    implements FleetspaceResource, FleetspaceResource.Definition, FleetspaceResource.Update {
    private FleetspaceResourceInner innerObject;

    private final com.azure.resourcemanager.cosmos.generated.CosmosDBManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public Status provisioningState() {
        return this.innerModel().provisioningState();
    }

    public FleetspacePropertiesFleetspaceApiKind fleetspaceApiKind() {
        return this.innerModel().fleetspaceApiKind();
    }

    public FleetspacePropertiesThroughputPoolConfiguration throughputPoolConfiguration() {
        return this.innerModel().throughputPoolConfiguration();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public FleetspaceResourceInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.cosmos.generated.CosmosDBManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String fleetName;

    private String fleetspaceName;

    private FleetspaceUpdate updateBody;

    public FleetspaceResourceImpl withExistingFleet(String resourceGroupName, String fleetName) {
        this.resourceGroupName = resourceGroupName;
        this.fleetName = fleetName;
        return this;
    }

    public FleetspaceResource create() {
        this.innerObject = serviceManager.serviceClient()
            .getFleetspaces()
            .create(resourceGroupName, fleetName, fleetspaceName, this.innerModel(), Context.NONE);
        return this;
    }

    public FleetspaceResource create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getFleetspaces()
            .create(resourceGroupName, fleetName, fleetspaceName, this.innerModel(), context);
        return this;
    }

    FleetspaceResourceImpl(String name, com.azure.resourcemanager.cosmos.generated.CosmosDBManager serviceManager) {
        this.innerObject = new FleetspaceResourceInner();
        this.serviceManager = serviceManager;
        this.fleetspaceName = name;
    }

    public FleetspaceResourceImpl update() {
        this.updateBody = new FleetspaceUpdate();
        return this;
    }

    public FleetspaceResource apply() {
        this.innerObject = serviceManager.serviceClient()
            .getFleetspaces()
            .update(resourceGroupName, fleetName, fleetspaceName, updateBody, Context.NONE);
        return this;
    }

    public FleetspaceResource apply(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getFleetspaces()
            .update(resourceGroupName, fleetName, fleetspaceName, updateBody, context);
        return this;
    }

    FleetspaceResourceImpl(FleetspaceResourceInner innerObject,
        com.azure.resourcemanager.cosmos.generated.CosmosDBManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.fleetName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "fleets");
        this.fleetspaceName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "fleetspaces");
    }

    public FleetspaceResource refresh() {
        this.innerObject = serviceManager.serviceClient()
            .getFleetspaces()
            .getWithResponse(resourceGroupName, fleetName, fleetspaceName, Context.NONE)
            .getValue();
        return this;
    }

    public FleetspaceResource refresh(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getFleetspaces()
            .getWithResponse(resourceGroupName, fleetName, fleetspaceName, context)
            .getValue();
        return this;
    }

    public FleetspaceResourceImpl withProvisioningState(Status provisioningState) {
        if (isInCreateMode()) {
            this.innerModel().withProvisioningState(provisioningState);
            return this;
        } else {
            this.updateBody.withProvisioningState(provisioningState);
            return this;
        }
    }

    public FleetspaceResourceImpl withFleetspaceApiKind(FleetspacePropertiesFleetspaceApiKind fleetspaceApiKind) {
        if (isInCreateMode()) {
            this.innerModel().withFleetspaceApiKind(fleetspaceApiKind);
            return this;
        } else {
            this.updateBody.withFleetspaceApiKind(fleetspaceApiKind);
            return this;
        }
    }

    public FleetspaceResourceImpl
        withThroughputPoolConfiguration(FleetspacePropertiesThroughputPoolConfiguration throughputPoolConfiguration) {
        if (isInCreateMode()) {
            this.innerModel().withThroughputPoolConfiguration(throughputPoolConfiguration);
            return this;
        } else {
            this.updateBody.withThroughputPoolConfiguration(throughputPoolConfiguration);
            return this;
        }
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
