// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.generated.models;

import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.cosmos.generated.fluent.models.FleetspaceResourceInner;

/**
 * An immutable client-side representation of FleetspaceResource.
 */
public interface FleetspaceResource {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     * 
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     * 
     * @return the type value.
     */
    String type();

    /**
     * Gets the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * Gets the provisioningState property: A provisioning state of the Fleetspace.
     * 
     * @return the provisioningState value.
     */
    Status provisioningState();

    /**
     * Gets the fleetspaceApiKind property: The kind of API this fleetspace belongs to. Acceptable values: 'NoSQL'.
     * 
     * @return the fleetspaceApiKind value.
     */
    FleetspacePropertiesFleetspaceApiKind fleetspaceApiKind();

    /**
     * Gets the throughputPoolConfiguration property: Configuration for throughput pool in the fleetspace.
     * 
     * @return the throughputPoolConfiguration value.
     */
    FleetspacePropertiesThroughputPoolConfiguration throughputPoolConfiguration();

    /**
     * Gets the name of the resource group.
     * 
     * @return the name of the resource group.
     */
    String resourceGroupName();

    /**
     * Gets the inner com.azure.resourcemanager.cosmos.generated.fluent.models.FleetspaceResourceInner object.
     * 
     * @return the inner object.
     */
    FleetspaceResourceInner innerModel();

    /**
     * The entirety of the FleetspaceResource definition.
     */
    interface Definition
        extends DefinitionStages.Blank, DefinitionStages.WithParentResource, DefinitionStages.WithCreate {
    }

    /**
     * The FleetspaceResource definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of the FleetspaceResource definition.
         */
        interface Blank extends WithParentResource {
        }

        /**
         * The stage of the FleetspaceResource definition allowing to specify parent resource.
         */
        interface WithParentResource {
            /**
             * Specifies resourceGroupName, fleetName.
             * 
             * @param resourceGroupName The name of the resource group. The name is case insensitive.
             * @param fleetName Cosmos DB fleet name. Needs to be unique under a subscription.
             * @return the next definition stage.
             */
            WithCreate withExistingFleet(String resourceGroupName, String fleetName);
        }

        /**
         * The stage of the FleetspaceResource definition which contains all the minimum required properties for the
         * resource to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate extends DefinitionStages.WithProvisioningState, DefinitionStages.WithFleetspaceApiKind,
            DefinitionStages.WithThroughputPoolConfiguration {
            /**
             * Executes the create request.
             * 
             * @return the created resource.
             */
            FleetspaceResource create();

            /**
             * Executes the create request.
             * 
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            FleetspaceResource create(Context context);
        }

        /**
         * The stage of the FleetspaceResource definition allowing to specify provisioningState.
         */
        interface WithProvisioningState {
            /**
             * Specifies the provisioningState property: A provisioning state of the Fleetspace..
             * 
             * @param provisioningState A provisioning state of the Fleetspace.
             * @return the next definition stage.
             */
            WithCreate withProvisioningState(Status provisioningState);
        }

        /**
         * The stage of the FleetspaceResource definition allowing to specify fleetspaceApiKind.
         */
        interface WithFleetspaceApiKind {
            /**
             * Specifies the fleetspaceApiKind property: The kind of API this fleetspace belongs to. Acceptable values:
             * 'NoSQL'.
             * 
             * @param fleetspaceApiKind The kind of API this fleetspace belongs to. Acceptable values: 'NoSQL'.
             * @return the next definition stage.
             */
            WithCreate withFleetspaceApiKind(FleetspacePropertiesFleetspaceApiKind fleetspaceApiKind);
        }

        /**
         * The stage of the FleetspaceResource definition allowing to specify throughputPoolConfiguration.
         */
        interface WithThroughputPoolConfiguration {
            /**
             * Specifies the throughputPoolConfiguration property: Configuration for throughput pool in the fleetspace..
             * 
             * @param throughputPoolConfiguration Configuration for throughput pool in the fleetspace.
             * @return the next definition stage.
             */
            WithCreate withThroughputPoolConfiguration(
                FleetspacePropertiesThroughputPoolConfiguration throughputPoolConfiguration);
        }
    }

    /**
     * Begins update for the FleetspaceResource resource.
     * 
     * @return the stage of resource update.
     */
    FleetspaceResource.Update update();

    /**
     * The template for FleetspaceResource update.
     */
    interface Update extends UpdateStages.WithProvisioningState, UpdateStages.WithFleetspaceApiKind,
        UpdateStages.WithThroughputPoolConfiguration {
        /**
         * Executes the update request.
         * 
         * @return the updated resource.
         */
        FleetspaceResource apply();

        /**
         * Executes the update request.
         * 
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        FleetspaceResource apply(Context context);
    }

    /**
     * The FleetspaceResource update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the FleetspaceResource update allowing to specify provisioningState.
         */
        interface WithProvisioningState {
            /**
             * Specifies the provisioningState property: A provisioning state of the Fleetspace..
             * 
             * @param provisioningState A provisioning state of the Fleetspace.
             * @return the next definition stage.
             */
            Update withProvisioningState(Status provisioningState);
        }

        /**
         * The stage of the FleetspaceResource update allowing to specify fleetspaceApiKind.
         */
        interface WithFleetspaceApiKind {
            /**
             * Specifies the fleetspaceApiKind property: The kind of API this fleetspace belongs to. Acceptable values:
             * 'NoSQL'.
             * 
             * @param fleetspaceApiKind The kind of API this fleetspace belongs to. Acceptable values: 'NoSQL'.
             * @return the next definition stage.
             */
            Update withFleetspaceApiKind(FleetspacePropertiesFleetspaceApiKind fleetspaceApiKind);
        }

        /**
         * The stage of the FleetspaceResource update allowing to specify throughputPoolConfiguration.
         */
        interface WithThroughputPoolConfiguration {
            /**
             * Specifies the throughputPoolConfiguration property: Configuration for throughput pool in the fleetspace..
             * 
             * @param throughputPoolConfiguration Configuration for throughput pool in the fleetspace.
             * @return the next definition stage.
             */
            Update withThroughputPoolConfiguration(
                FleetspacePropertiesThroughputPoolConfiguration throughputPoolConfiguration);
        }
    }

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @return the refreshed resource.
     */
    FleetspaceResource refresh();

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    FleetspaceResource refresh(Context context);
}
