// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * A CosmosDB data source/sink details.
 */
@Fluent
public final class CosmosDBSourceSinkDetails implements JsonSerializable<CosmosDBSourceSinkDetails> {
    /*
     * Name of remote account in case of cross-account data transfer.
     */
    private String remoteAccountName;

    /**
     * Creates an instance of CosmosDBSourceSinkDetails class.
     */
    public CosmosDBSourceSinkDetails() {
    }

    /**
     * Get the remoteAccountName property: Name of remote account in case of cross-account data transfer.
     * 
     * @return the remoteAccountName value.
     */
    public String remoteAccountName() {
        return this.remoteAccountName;
    }

    /**
     * Set the remoteAccountName property: Name of remote account in case of cross-account data transfer.
     * 
     * @param remoteAccountName the remoteAccountName value to set.
     * @return the CosmosDBSourceSinkDetails object itself.
     */
    public CosmosDBSourceSinkDetails withRemoteAccountName(String remoteAccountName) {
        this.remoteAccountName = remoteAccountName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("remoteAccountName", this.remoteAccountName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CosmosDBSourceSinkDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CosmosDBSourceSinkDetails if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the CosmosDBSourceSinkDetails.
     */
    public static CosmosDBSourceSinkDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CosmosDBSourceSinkDetails deserializedCosmosDBSourceSinkDetails = new CosmosDBSourceSinkDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("remoteAccountName".equals(fieldName)) {
                    deserializedCosmosDBSourceSinkDetails.remoteAccountName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCosmosDBSourceSinkDetails;
        });
    }
}
