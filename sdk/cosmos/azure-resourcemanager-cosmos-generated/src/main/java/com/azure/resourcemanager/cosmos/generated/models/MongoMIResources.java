// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.generated.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/**
 * Resource collection API of MongoMIResources.
 */
public interface MongoMIResources {
    /**
     * Retrieves the properties of an existing Azure Cosmos DB MongoMI Role Definition with the given Id.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param roleDefinitionId The GUID for the Role Definition.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return parameters to create and update an Azure Cosmos DB MongoMI Role Definition along with {@link Response}.
     */
    Response<MongoMIRoleDefinitionResource> getMongoMIRoleDefinitionWithResponse(String resourceGroupName,
        String accountName, String roleDefinitionId, Context context);

    /**
     * Retrieves the properties of an existing Azure Cosmos DB MongoMI Role Definition with the given Id.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param roleDefinitionId The GUID for the Role Definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return parameters to create and update an Azure Cosmos DB MongoMI Role Definition.
     */
    MongoMIRoleDefinitionResource getMongoMIRoleDefinition(String resourceGroupName, String accountName,
        String roleDefinitionId);

    /**
     * Deletes an existing Azure Cosmos DB MongoMI Role Definition.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param roleDefinitionId The GUID for the Role Definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteMongoMIRoleDefinition(String resourceGroupName, String accountName, String roleDefinitionId);

    /**
     * Deletes an existing Azure Cosmos DB MongoMI Role Definition.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param roleDefinitionId The GUID for the Role Definition.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteMongoMIRoleDefinition(String resourceGroupName, String accountName, String roleDefinitionId,
        Context context);

    /**
     * Retrieves the list of all Azure Cosmos DB MongoMI Role Definitions.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the relevant Role Definitions as paginated response with {@link PagedIterable}.
     */
    PagedIterable<MongoMIRoleDefinitionResource> listMongoMIRoleDefinitions(String resourceGroupName,
        String accountName);

    /**
     * Retrieves the list of all Azure Cosmos DB MongoMI Role Definitions.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the relevant Role Definitions as paginated response with {@link PagedIterable}.
     */
    PagedIterable<MongoMIRoleDefinitionResource> listMongoMIRoleDefinitions(String resourceGroupName,
        String accountName, Context context);

    /**
     * Retrieves the properties of an existing Azure Cosmos DB MongoMI Role Assignment with the given Id.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param roleAssignmentId The GUID for the Role Assignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return parameters to create and update an Azure Cosmos DB MongoMI Role Assignment along with {@link Response}.
     */
    Response<MongoMIRoleAssignmentResource> getMongoMIRoleAssignmentWithResponse(String resourceGroupName,
        String accountName, String roleAssignmentId, Context context);

    /**
     * Retrieves the properties of an existing Azure Cosmos DB MongoMI Role Assignment with the given Id.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param roleAssignmentId The GUID for the Role Assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return parameters to create and update an Azure Cosmos DB MongoMI Role Assignment.
     */
    MongoMIRoleAssignmentResource getMongoMIRoleAssignment(String resourceGroupName, String accountName,
        String roleAssignmentId);

    /**
     * Deletes an existing Azure Cosmos DB MongoMI Role Assignment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param roleAssignmentId The GUID for the Role Assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteMongoMIRoleAssignment(String resourceGroupName, String accountName, String roleAssignmentId);

    /**
     * Deletes an existing Azure Cosmos DB MongoMI Role Assignment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param roleAssignmentId The GUID for the Role Assignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteMongoMIRoleAssignment(String resourceGroupName, String accountName, String roleAssignmentId,
        Context context);

    /**
     * Retrieves the list of all Azure Cosmos DB MongoMI Role Assignments.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the relevant Role Assignments as paginated response with {@link PagedIterable}.
     */
    PagedIterable<MongoMIRoleAssignmentResource> listMongoMIRoleAssignments(String resourceGroupName,
        String accountName);

    /**
     * Retrieves the list of all Azure Cosmos DB MongoMI Role Assignments.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the relevant Role Assignments as paginated response with {@link PagedIterable}.
     */
    PagedIterable<MongoMIRoleAssignmentResource> listMongoMIRoleAssignments(String resourceGroupName,
        String accountName, Context context);

    /**
     * Retrieves the properties of an existing Azure Cosmos DB MongoMI Role Definition with the given Id.
     * 
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return parameters to create and update an Azure Cosmos DB MongoMI Role Definition along with {@link Response}.
     */
    MongoMIRoleDefinitionResource getMongoMIRoleDefinitionById(String id);

    /**
     * Retrieves the properties of an existing Azure Cosmos DB MongoMI Role Definition with the given Id.
     * 
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return parameters to create and update an Azure Cosmos DB MongoMI Role Definition along with {@link Response}.
     */
    Response<MongoMIRoleDefinitionResource> getMongoMIRoleDefinitionByIdWithResponse(String id, Context context);

    /**
     * Retrieves the properties of an existing Azure Cosmos DB MongoMI Role Assignment with the given Id.
     * 
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return parameters to create and update an Azure Cosmos DB MongoMI Role Assignment along with {@link Response}.
     */
    MongoMIRoleAssignmentResource getMongoMIRoleAssignmentById(String id);

    /**
     * Retrieves the properties of an existing Azure Cosmos DB MongoMI Role Assignment with the given Id.
     * 
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return parameters to create and update an Azure Cosmos DB MongoMI Role Assignment along with {@link Response}.
     */
    Response<MongoMIRoleAssignmentResource> getMongoMIRoleAssignmentByIdWithResponse(String id, Context context);

    /**
     * Deletes an existing Azure Cosmos DB MongoMI Role Definition.
     * 
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteMongoMIRoleDefinitionById(String id);

    /**
     * Deletes an existing Azure Cosmos DB MongoMI Role Definition.
     * 
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteMongoMIRoleDefinitionByIdWithResponse(String id, Context context);

    /**
     * Deletes an existing Azure Cosmos DB MongoMI Role Assignment.
     * 
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteMongoMIRoleAssignmentById(String id);

    /**
     * Deletes an existing Azure Cosmos DB MongoMI Role Assignment.
     * 
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteMongoMIRoleAssignmentByIdWithResponse(String id, Context context);

    /**
     * Begins definition for a new MongoMIRoleDefinitionResource resource.
     * 
     * @param name resource name.
     * @return the first stage of the new MongoMIRoleDefinitionResource definition.
     */
    MongoMIRoleDefinitionResource.DefinitionStages.Blank defineUpdateMongoMIRoleDefinition(String name);

    /**
     * Begins definition for a new MongoMIRoleAssignmentResource resource.
     * 
     * @param name resource name.
     * @return the first stage of the new MongoMIRoleAssignmentResource definition.
     */
    MongoMIRoleAssignmentResource.DefinitionStages.Blank defineUpdateMongoMIRoleAssignment(String name);
}
