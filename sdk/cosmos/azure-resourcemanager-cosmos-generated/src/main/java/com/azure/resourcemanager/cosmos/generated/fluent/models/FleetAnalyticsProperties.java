// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.cosmos.generated.models.FleetAnalyticsPropertiesStorageLocationType;
import com.azure.resourcemanager.cosmos.generated.models.Status;
import java.io.IOException;

/**
 * The FleetAnalyticsProperties model.
 */
@Fluent
public final class FleetAnalyticsProperties implements JsonSerializable<FleetAnalyticsProperties> {
    /*
     * A provisioning state of the FleetAnalytics.
     */
    private Status provisioningState;

    /*
     * The type of the fleet analytics resource.
     */
    private FleetAnalyticsPropertiesStorageLocationType storageLocationType;

    /*
     * The unique identifier of the fleet analytics resource.
     */
    private String storageLocationUri;

    /**
     * Creates an instance of FleetAnalyticsProperties class.
     */
    public FleetAnalyticsProperties() {
    }

    /**
     * Get the provisioningState property: A provisioning state of the FleetAnalytics.
     * 
     * @return the provisioningState value.
     */
    public Status provisioningState() {
        return this.provisioningState;
    }

    /**
     * Set the provisioningState property: A provisioning state of the FleetAnalytics.
     * 
     * @param provisioningState the provisioningState value to set.
     * @return the FleetAnalyticsProperties object itself.
     */
    public FleetAnalyticsProperties withProvisioningState(Status provisioningState) {
        this.provisioningState = provisioningState;
        return this;
    }

    /**
     * Get the storageLocationType property: The type of the fleet analytics resource.
     * 
     * @return the storageLocationType value.
     */
    public FleetAnalyticsPropertiesStorageLocationType storageLocationType() {
        return this.storageLocationType;
    }

    /**
     * Set the storageLocationType property: The type of the fleet analytics resource.
     * 
     * @param storageLocationType the storageLocationType value to set.
     * @return the FleetAnalyticsProperties object itself.
     */
    public FleetAnalyticsProperties
        withStorageLocationType(FleetAnalyticsPropertiesStorageLocationType storageLocationType) {
        this.storageLocationType = storageLocationType;
        return this;
    }

    /**
     * Get the storageLocationUri property: The unique identifier of the fleet analytics resource.
     * 
     * @return the storageLocationUri value.
     */
    public String storageLocationUri() {
        return this.storageLocationUri;
    }

    /**
     * Set the storageLocationUri property: The unique identifier of the fleet analytics resource.
     * 
     * @param storageLocationUri the storageLocationUri value to set.
     * @return the FleetAnalyticsProperties object itself.
     */
    public FleetAnalyticsProperties withStorageLocationUri(String storageLocationUri) {
        this.storageLocationUri = storageLocationUri;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("provisioningState",
            this.provisioningState == null ? null : this.provisioningState.toString());
        jsonWriter.writeStringField("storageLocationType",
            this.storageLocationType == null ? null : this.storageLocationType.toString());
        jsonWriter.writeStringField("storageLocationUri", this.storageLocationUri);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FleetAnalyticsProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FleetAnalyticsProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the FleetAnalyticsProperties.
     */
    public static FleetAnalyticsProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FleetAnalyticsProperties deserializedFleetAnalyticsProperties = new FleetAnalyticsProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedFleetAnalyticsProperties.provisioningState = Status.fromString(reader.getString());
                } else if ("storageLocationType".equals(fieldName)) {
                    deserializedFleetAnalyticsProperties.storageLocationType
                        = FleetAnalyticsPropertiesStorageLocationType.fromString(reader.getString());
                } else if ("storageLocationUri".equals(fieldName)) {
                    deserializedFleetAnalyticsProperties.storageLocationUri = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFleetAnalyticsProperties;
        });
    }
}
