// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.cosmos.generated.fluent.FleetsClient;
import com.azure.resourcemanager.cosmos.generated.fluent.models.FleetResourceInner;
import com.azure.resourcemanager.cosmos.generated.models.FleetResource;
import com.azure.resourcemanager.cosmos.generated.models.Fleets;

public final class FleetsImpl implements Fleets {
    private static final ClientLogger LOGGER = new ClientLogger(FleetsImpl.class);

    private final FleetsClient innerClient;

    private final com.azure.resourcemanager.cosmos.generated.CosmosDBManager serviceManager;

    public FleetsImpl(FleetsClient innerClient,
        com.azure.resourcemanager.cosmos.generated.CosmosDBManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<FleetResource> list() {
        PagedIterable<FleetResourceInner> inner = this.serviceClient().list();
        return ResourceManagerUtils.mapPage(inner, inner1 -> new FleetResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<FleetResource> list(Context context) {
        PagedIterable<FleetResourceInner> inner = this.serviceClient().list(context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new FleetResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<FleetResource> listByResourceGroup(String resourceGroupName) {
        PagedIterable<FleetResourceInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new FleetResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<FleetResource> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<FleetResourceInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new FleetResourceImpl(inner1, this.manager()));
    }

    public Response<FleetResource> getByResourceGroupWithResponse(String resourceGroupName, String fleetName,
        Context context) {
        Response<FleetResourceInner> inner
            = this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, fleetName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new FleetResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public FleetResource getByResourceGroup(String resourceGroupName, String fleetName) {
        FleetResourceInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, fleetName);
        if (inner != null) {
            return new FleetResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceGroupName, String fleetName) {
        this.serviceClient().delete(resourceGroupName, fleetName);
    }

    public void delete(String resourceGroupName, String fleetName, Context context) {
        this.serviceClient().delete(resourceGroupName, fleetName, context);
    }

    public FleetResource getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String fleetName = ResourceManagerUtils.getValueFromIdByName(id, "fleets");
        if (fleetName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'fleets'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, fleetName, Context.NONE).getValue();
    }

    public Response<FleetResource> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String fleetName = ResourceManagerUtils.getValueFromIdByName(id, "fleets");
        if (fleetName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'fleets'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, fleetName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String fleetName = ResourceManagerUtils.getValueFromIdByName(id, "fleets");
        if (fleetName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'fleets'.", id)));
        }
        this.delete(resourceGroupName, fleetName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String fleetName = ResourceManagerUtils.getValueFromIdByName(id, "fleets");
        if (fleetName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'fleets'.", id)));
        }
        this.delete(resourceGroupName, fleetName, context);
    }

    private FleetsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.cosmos.generated.CosmosDBManager manager() {
        return this.serviceManager;
    }

    public FleetResourceImpl define(String name) {
        return new FleetResourceImpl(name, this.manager());
    }
}
