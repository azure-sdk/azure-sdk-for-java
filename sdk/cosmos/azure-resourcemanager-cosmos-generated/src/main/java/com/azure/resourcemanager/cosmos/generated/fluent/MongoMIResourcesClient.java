// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.generated.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.cosmos.generated.fluent.models.MongoMIRoleAssignmentResourceInner;
import com.azure.resourcemanager.cosmos.generated.fluent.models.MongoMIRoleDefinitionResourceInner;

/**
 * An instance of this class provides access to all the operations defined in MongoMIResourcesClient.
 */
public interface MongoMIResourcesClient {
    /**
     * Retrieves the properties of an existing Azure Cosmos DB MongoMI Role Definition with the given Id.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param roleDefinitionId The GUID for the Role Definition.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return parameters to create and update an Azure Cosmos DB MongoMI Role Definition along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<MongoMIRoleDefinitionResourceInner> getMongoMIRoleDefinitionWithResponse(String resourceGroupName,
        String accountName, String roleDefinitionId, Context context);

    /**
     * Retrieves the properties of an existing Azure Cosmos DB MongoMI Role Definition with the given Id.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param roleDefinitionId The GUID for the Role Definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return parameters to create and update an Azure Cosmos DB MongoMI Role Definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    MongoMIRoleDefinitionResourceInner getMongoMIRoleDefinition(String resourceGroupName, String accountName,
        String roleDefinitionId);

    /**
     * Creates or updates an Azure Cosmos DB MongoMI Role Definition.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param roleDefinitionId The GUID for the Role Definition.
     * @param createUpdateMongoMIRoleDefinitionParameters The properties required to create or update a Role Definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of parameters to create and update an Azure Cosmos DB MongoMI Role
     * Definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<MongoMIRoleDefinitionResourceInner>, MongoMIRoleDefinitionResourceInner>
        beginCreateUpdateMongoMIRoleDefinition(String resourceGroupName, String accountName, String roleDefinitionId,
            MongoMIRoleDefinitionResourceInner createUpdateMongoMIRoleDefinitionParameters);

    /**
     * Creates or updates an Azure Cosmos DB MongoMI Role Definition.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param roleDefinitionId The GUID for the Role Definition.
     * @param createUpdateMongoMIRoleDefinitionParameters The properties required to create or update a Role Definition.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of parameters to create and update an Azure Cosmos DB MongoMI Role
     * Definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<MongoMIRoleDefinitionResourceInner>, MongoMIRoleDefinitionResourceInner>
        beginCreateUpdateMongoMIRoleDefinition(String resourceGroupName, String accountName, String roleDefinitionId,
            MongoMIRoleDefinitionResourceInner createUpdateMongoMIRoleDefinitionParameters, Context context);

    /**
     * Creates or updates an Azure Cosmos DB MongoMI Role Definition.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param roleDefinitionId The GUID for the Role Definition.
     * @param createUpdateMongoMIRoleDefinitionParameters The properties required to create or update a Role Definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return parameters to create and update an Azure Cosmos DB MongoMI Role Definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    MongoMIRoleDefinitionResourceInner createUpdateMongoMIRoleDefinition(String resourceGroupName, String accountName,
        String roleDefinitionId, MongoMIRoleDefinitionResourceInner createUpdateMongoMIRoleDefinitionParameters);

    /**
     * Creates or updates an Azure Cosmos DB MongoMI Role Definition.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param roleDefinitionId The GUID for the Role Definition.
     * @param createUpdateMongoMIRoleDefinitionParameters The properties required to create or update a Role Definition.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return parameters to create and update an Azure Cosmos DB MongoMI Role Definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    MongoMIRoleDefinitionResourceInner createUpdateMongoMIRoleDefinition(String resourceGroupName, String accountName,
        String roleDefinitionId, MongoMIRoleDefinitionResourceInner createUpdateMongoMIRoleDefinitionParameters,
        Context context);

    /**
     * Deletes an existing Azure Cosmos DB MongoMI Role Definition.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param roleDefinitionId The GUID for the Role Definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDeleteMongoMIRoleDefinition(String resourceGroupName, String accountName,
        String roleDefinitionId);

    /**
     * Deletes an existing Azure Cosmos DB MongoMI Role Definition.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param roleDefinitionId The GUID for the Role Definition.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDeleteMongoMIRoleDefinition(String resourceGroupName, String accountName,
        String roleDefinitionId, Context context);

    /**
     * Deletes an existing Azure Cosmos DB MongoMI Role Definition.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param roleDefinitionId The GUID for the Role Definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void deleteMongoMIRoleDefinition(String resourceGroupName, String accountName, String roleDefinitionId);

    /**
     * Deletes an existing Azure Cosmos DB MongoMI Role Definition.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param roleDefinitionId The GUID for the Role Definition.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void deleteMongoMIRoleDefinition(String resourceGroupName, String accountName, String roleDefinitionId,
        Context context);

    /**
     * Retrieves the list of all Azure Cosmos DB MongoMI Role Definitions.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the relevant Role Definitions as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<MongoMIRoleDefinitionResourceInner> listMongoMIRoleDefinitions(String resourceGroupName,
        String accountName);

    /**
     * Retrieves the list of all Azure Cosmos DB MongoMI Role Definitions.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the relevant Role Definitions as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<MongoMIRoleDefinitionResourceInner> listMongoMIRoleDefinitions(String resourceGroupName,
        String accountName, Context context);

    /**
     * Retrieves the properties of an existing Azure Cosmos DB MongoMI Role Assignment with the given Id.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param roleAssignmentId The GUID for the Role Assignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return parameters to create and update an Azure Cosmos DB MongoMI Role Assignment along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<MongoMIRoleAssignmentResourceInner> getMongoMIRoleAssignmentWithResponse(String resourceGroupName,
        String accountName, String roleAssignmentId, Context context);

    /**
     * Retrieves the properties of an existing Azure Cosmos DB MongoMI Role Assignment with the given Id.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param roleAssignmentId The GUID for the Role Assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return parameters to create and update an Azure Cosmos DB MongoMI Role Assignment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    MongoMIRoleAssignmentResourceInner getMongoMIRoleAssignment(String resourceGroupName, String accountName,
        String roleAssignmentId);

    /**
     * Creates or updates an Azure Cosmos DB MongoMI Role Assignment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param roleAssignmentId The GUID for the Role Assignment.
     * @param createUpdateMongoMIRoleAssignmentParameters The properties required to create or update a Role Assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of parameters to create and update an Azure Cosmos DB MongoMI Role
     * Assignment.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<MongoMIRoleAssignmentResourceInner>, MongoMIRoleAssignmentResourceInner>
        beginCreateUpdateMongoMIRoleAssignment(String resourceGroupName, String accountName, String roleAssignmentId,
            MongoMIRoleAssignmentResourceInner createUpdateMongoMIRoleAssignmentParameters);

    /**
     * Creates or updates an Azure Cosmos DB MongoMI Role Assignment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param roleAssignmentId The GUID for the Role Assignment.
     * @param createUpdateMongoMIRoleAssignmentParameters The properties required to create or update a Role Assignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of parameters to create and update an Azure Cosmos DB MongoMI Role
     * Assignment.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<MongoMIRoleAssignmentResourceInner>, MongoMIRoleAssignmentResourceInner>
        beginCreateUpdateMongoMIRoleAssignment(String resourceGroupName, String accountName, String roleAssignmentId,
            MongoMIRoleAssignmentResourceInner createUpdateMongoMIRoleAssignmentParameters, Context context);

    /**
     * Creates or updates an Azure Cosmos DB MongoMI Role Assignment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param roleAssignmentId The GUID for the Role Assignment.
     * @param createUpdateMongoMIRoleAssignmentParameters The properties required to create or update a Role Assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return parameters to create and update an Azure Cosmos DB MongoMI Role Assignment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    MongoMIRoleAssignmentResourceInner createUpdateMongoMIRoleAssignment(String resourceGroupName, String accountName,
        String roleAssignmentId, MongoMIRoleAssignmentResourceInner createUpdateMongoMIRoleAssignmentParameters);

    /**
     * Creates or updates an Azure Cosmos DB MongoMI Role Assignment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param roleAssignmentId The GUID for the Role Assignment.
     * @param createUpdateMongoMIRoleAssignmentParameters The properties required to create or update a Role Assignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return parameters to create and update an Azure Cosmos DB MongoMI Role Assignment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    MongoMIRoleAssignmentResourceInner createUpdateMongoMIRoleAssignment(String resourceGroupName, String accountName,
        String roleAssignmentId, MongoMIRoleAssignmentResourceInner createUpdateMongoMIRoleAssignmentParameters,
        Context context);

    /**
     * Deletes an existing Azure Cosmos DB MongoMI Role Assignment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param roleAssignmentId The GUID for the Role Assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDeleteMongoMIRoleAssignment(String resourceGroupName, String accountName,
        String roleAssignmentId);

    /**
     * Deletes an existing Azure Cosmos DB MongoMI Role Assignment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param roleAssignmentId The GUID for the Role Assignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDeleteMongoMIRoleAssignment(String resourceGroupName, String accountName,
        String roleAssignmentId, Context context);

    /**
     * Deletes an existing Azure Cosmos DB MongoMI Role Assignment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param roleAssignmentId The GUID for the Role Assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void deleteMongoMIRoleAssignment(String resourceGroupName, String accountName, String roleAssignmentId);

    /**
     * Deletes an existing Azure Cosmos DB MongoMI Role Assignment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param roleAssignmentId The GUID for the Role Assignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void deleteMongoMIRoleAssignment(String resourceGroupName, String accountName, String roleAssignmentId,
        Context context);

    /**
     * Retrieves the list of all Azure Cosmos DB MongoMI Role Assignments.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the relevant Role Assignments as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<MongoMIRoleAssignmentResourceInner> listMongoMIRoleAssignments(String resourceGroupName,
        String accountName);

    /**
     * Retrieves the list of all Azure Cosmos DB MongoMI Role Assignments.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the relevant Role Assignments as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<MongoMIRoleAssignmentResourceInner> listMongoMIRoleAssignments(String resourceGroupName,
        String accountName, Context context);
}
