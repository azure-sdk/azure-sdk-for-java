// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.generated.implementation;

import com.azure.resourcemanager.cosmos.generated.fluent.models.CassandraReaperRunStatusInner;
import com.azure.resourcemanager.cosmos.generated.models.CassandraReaperRunStatus;
import java.util.Collections;
import java.util.List;

public final class CassandraReaperRunStatusImpl implements CassandraReaperRunStatus {
    private CassandraReaperRunStatusInner innerObject;

    private final com.azure.resourcemanager.cosmos.generated.CosmosDBManager serviceManager;

    CassandraReaperRunStatusImpl(
        CassandraReaperRunStatusInner innerObject,
        com.azure.resourcemanager.cosmos.generated.CosmosDBManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
    }

    public String cause() {
        return this.innerModel().cause();
    }

    public String owner() {
        return this.innerModel().owner();
    }

    public String id() {
        return this.innerModel().id();
    }

    public String clusterName() {
        return this.innerModel().clusterName();
    }

    public List<String> columnFamilies() {
        List<String> inner = this.innerModel().columnFamilies();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public String keyspaceName() {
        return this.innerModel().keyspaceName();
    }

    public String repairState() {
        return this.innerModel().repairState();
    }

    public Double intensity() {
        return this.innerModel().intensity();
    }

    public Boolean incrementalRepair() {
        return this.innerModel().incrementalRepair();
    }

    public Integer totalSegments() {
        return this.innerModel().totalSegments();
    }

    public String repairParallelism() {
        return this.innerModel().repairParallelism();
    }

    public Integer segmentsRepaired() {
        return this.innerModel().segmentsRepaired();
    }

    public String lastEvent() {
        return this.innerModel().lastEvent();
    }

    public String duration() {
        return this.innerModel().duration();
    }

    public List<String> nodes() {
        List<String> inner = this.innerModel().nodes();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public List<String> datacenters() {
        List<String> inner = this.innerModel().datacenters();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public List<String> blacklistedTables() {
        List<String> inner = this.innerModel().blacklistedTables();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public Integer repairThreadCount() {
        return this.innerModel().repairThreadCount();
    }

    public String repairUnitId() {
        return this.innerModel().repairUnitId();
    }

    public String creationTime() {
        return this.innerModel().creationTime();
    }

    public String startTime() {
        return this.innerModel().startTime();
    }

    public String endTime() {
        return this.innerModel().endTime();
    }

    public String pauseTime() {
        return this.innerModel().pauseTime();
    }

    public String currentTime() {
        return this.innerModel().currentTime();
    }

    public String segmentTimeout() {
        return this.innerModel().segmentTimeout();
    }

    public String adaptiveSchedule() {
        return this.innerModel().adaptiveSchedule();
    }

    public CassandraReaperRunStatusInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.cosmos.generated.CosmosDBManager manager() {
        return this.serviceManager;
    }
}
