// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Source Cassandra to Destination Azure Blob Storage copy job properties.
 */
@Fluent
public final class CassandraRUToBlobCopyJobProperties extends BaseCopyJobProperties {
    /*
     * Copy Job Type
     */
    private CopyJobType jobType = CopyJobType.CASSANDRA_RUTO_AZURE_BLOB_STORAGE;

    /*
     * Source Cassandra DataStore details
     */
    private CosmosDBSourceSinkDetails sourceDetails;

    /*
     * Destination Cassandra DataStore details
     */
    private AzureBlobSourceSinkDetails destinationDetails;

    /*
     * Copy Job tasks.
     */
    private List<CassandraRUToBlobCopyJobTask> tasks;

    /**
     * Creates an instance of CassandraRUToBlobCopyJobProperties class.
     */
    public CassandraRUToBlobCopyJobProperties() {
    }

    /**
     * Get the jobType property: Copy Job Type.
     * 
     * @return the jobType value.
     */
    @Override
    public CopyJobType jobType() {
        return this.jobType;
    }

    /**
     * Get the sourceDetails property: Source Cassandra DataStore details.
     * 
     * @return the sourceDetails value.
     */
    public CosmosDBSourceSinkDetails sourceDetails() {
        return this.sourceDetails;
    }

    /**
     * Set the sourceDetails property: Source Cassandra DataStore details.
     * 
     * @param sourceDetails the sourceDetails value to set.
     * @return the CassandraRUToBlobCopyJobProperties object itself.
     */
    public CassandraRUToBlobCopyJobProperties withSourceDetails(CosmosDBSourceSinkDetails sourceDetails) {
        this.sourceDetails = sourceDetails;
        return this;
    }

    /**
     * Get the destinationDetails property: Destination Cassandra DataStore details.
     * 
     * @return the destinationDetails value.
     */
    public AzureBlobSourceSinkDetails destinationDetails() {
        return this.destinationDetails;
    }

    /**
     * Set the destinationDetails property: Destination Cassandra DataStore details.
     * 
     * @param destinationDetails the destinationDetails value to set.
     * @return the CassandraRUToBlobCopyJobProperties object itself.
     */
    public CassandraRUToBlobCopyJobProperties withDestinationDetails(AzureBlobSourceSinkDetails destinationDetails) {
        this.destinationDetails = destinationDetails;
        return this;
    }

    /**
     * Get the tasks property: Copy Job tasks.
     * 
     * @return the tasks value.
     */
    public List<CassandraRUToBlobCopyJobTask> tasks() {
        return this.tasks;
    }

    /**
     * Set the tasks property: Copy Job tasks.
     * 
     * @param tasks the tasks value to set.
     * @return the CassandraRUToBlobCopyJobProperties object itself.
     */
    public CassandraRUToBlobCopyJobProperties withTasks(List<CassandraRUToBlobCopyJobTask> tasks) {
        this.tasks = tasks;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (sourceDetails() != null) {
            sourceDetails().validate();
        }
        if (destinationDetails() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property destinationDetails in model CassandraRUToBlobCopyJobProperties"));
        } else {
            destinationDetails().validate();
        }
        if (tasks() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property tasks in model CassandraRUToBlobCopyJobProperties"));
        } else {
            tasks().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(CassandraRUToBlobCopyJobProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("destinationDetails", this.destinationDetails);
        jsonWriter.writeArrayField("tasks", this.tasks, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("jobType", this.jobType == null ? null : this.jobType.toString());
        jsonWriter.writeJsonField("sourceDetails", this.sourceDetails);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CassandraRUToBlobCopyJobProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CassandraRUToBlobCopyJobProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CassandraRUToBlobCopyJobProperties.
     */
    public static CassandraRUToBlobCopyJobProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CassandraRUToBlobCopyJobProperties deserializedCassandraRUToBlobCopyJobProperties
                = new CassandraRUToBlobCopyJobProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("destinationDetails".equals(fieldName)) {
                    deserializedCassandraRUToBlobCopyJobProperties.destinationDetails
                        = AzureBlobSourceSinkDetails.fromJson(reader);
                } else if ("tasks".equals(fieldName)) {
                    List<CassandraRUToBlobCopyJobTask> tasks
                        = reader.readArray(reader1 -> CassandraRUToBlobCopyJobTask.fromJson(reader1));
                    deserializedCassandraRUToBlobCopyJobProperties.tasks = tasks;
                } else if ("jobType".equals(fieldName)) {
                    deserializedCassandraRUToBlobCopyJobProperties.jobType = CopyJobType.fromString(reader.getString());
                } else if ("sourceDetails".equals(fieldName)) {
                    deserializedCassandraRUToBlobCopyJobProperties.sourceDetails
                        = CosmosDBSourceSinkDetails.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCassandraRUToBlobCopyJobProperties;
        });
    }
}
