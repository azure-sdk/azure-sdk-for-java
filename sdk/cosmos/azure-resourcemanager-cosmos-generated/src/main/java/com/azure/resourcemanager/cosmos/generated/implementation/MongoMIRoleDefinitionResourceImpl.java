// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.generated.implementation;

import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.cosmos.generated.fluent.models.MongoMIRoleDefinitionResourceInner;
import com.azure.resourcemanager.cosmos.generated.models.MongoMIRoleDefinitionResource;
import com.azure.resourcemanager.cosmos.generated.models.PermissionAutoGenerated3;
import com.azure.resourcemanager.cosmos.generated.models.RoleDefinitionType;
import java.util.Collections;
import java.util.List;

public final class MongoMIRoleDefinitionResourceImpl implements MongoMIRoleDefinitionResource,
    MongoMIRoleDefinitionResource.Definition, MongoMIRoleDefinitionResource.Update {
    private MongoMIRoleDefinitionResourceInner innerObject;

    private final com.azure.resourcemanager.cosmos.generated.CosmosDBManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public String idPropertiesId() {
        return this.innerModel().idPropertiesId();
    }

    public String roleName() {
        return this.innerModel().roleName();
    }

    public RoleDefinitionType typePropertiesType() {
        return this.innerModel().typePropertiesType();
    }

    public List<String> assignableScopes() {
        List<String> inner = this.innerModel().assignableScopes();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public List<PermissionAutoGenerated3> permissions() {
        List<PermissionAutoGenerated3> inner = this.innerModel().permissions();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public MongoMIRoleDefinitionResourceInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.cosmos.generated.CosmosDBManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String accountName;

    private String roleDefinitionId;

    public MongoMIRoleDefinitionResourceImpl withExistingDatabaseAccount(String resourceGroupName, String accountName) {
        this.resourceGroupName = resourceGroupName;
        this.accountName = accountName;
        return this;
    }

    public MongoMIRoleDefinitionResource create() {
        this.innerObject = serviceManager.serviceClient()
            .getMongoMIResources()
            .createUpdateMongoMIRoleDefinition(resourceGroupName, accountName, roleDefinitionId, this.innerModel(),
                Context.NONE);
        return this;
    }

    public MongoMIRoleDefinitionResource create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getMongoMIResources()
            .createUpdateMongoMIRoleDefinition(resourceGroupName, accountName, roleDefinitionId, this.innerModel(),
                context);
        return this;
    }

    MongoMIRoleDefinitionResourceImpl(String name,
        com.azure.resourcemanager.cosmos.generated.CosmosDBManager serviceManager) {
        this.innerObject = new MongoMIRoleDefinitionResourceInner();
        this.serviceManager = serviceManager;
        this.roleDefinitionId = name;
    }

    public MongoMIRoleDefinitionResourceImpl update() {
        return this;
    }

    public MongoMIRoleDefinitionResource apply() {
        this.innerObject = serviceManager.serviceClient()
            .getMongoMIResources()
            .createUpdateMongoMIRoleDefinition(resourceGroupName, accountName, roleDefinitionId, this.innerModel(),
                Context.NONE);
        return this;
    }

    public MongoMIRoleDefinitionResource apply(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getMongoMIResources()
            .createUpdateMongoMIRoleDefinition(resourceGroupName, accountName, roleDefinitionId, this.innerModel(),
                context);
        return this;
    }

    MongoMIRoleDefinitionResourceImpl(MongoMIRoleDefinitionResourceInner innerObject,
        com.azure.resourcemanager.cosmos.generated.CosmosDBManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.accountName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "databaseAccounts");
        this.roleDefinitionId = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "mongoMIRoleDefinitions");
    }

    public MongoMIRoleDefinitionResource refresh() {
        this.innerObject = serviceManager.serviceClient()
            .getMongoMIResources()
            .getMongoMIRoleDefinitionWithResponse(resourceGroupName, accountName, roleDefinitionId, Context.NONE)
            .getValue();
        return this;
    }

    public MongoMIRoleDefinitionResource refresh(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getMongoMIResources()
            .getMongoMIRoleDefinitionWithResponse(resourceGroupName, accountName, roleDefinitionId, context)
            .getValue();
        return this;
    }

    public MongoMIRoleDefinitionResourceImpl withIdPropertiesId(String idPropertiesId) {
        this.innerModel().withIdPropertiesId(idPropertiesId);
        return this;
    }

    public MongoMIRoleDefinitionResourceImpl withRoleName(String roleName) {
        this.innerModel().withRoleName(roleName);
        return this;
    }

    public MongoMIRoleDefinitionResourceImpl withTypePropertiesType(RoleDefinitionType typePropertiesType) {
        this.innerModel().withTypePropertiesType(typePropertiesType);
        return this;
    }

    public MongoMIRoleDefinitionResourceImpl withAssignableScopes(List<String> assignableScopes) {
        this.innerModel().withAssignableScopes(assignableScopes);
        return this;
    }

    public MongoMIRoleDefinitionResourceImpl withPermissions(List<PermissionAutoGenerated3> permissions) {
        this.innerModel().withPermissions(permissions);
        return this;
    }
}
