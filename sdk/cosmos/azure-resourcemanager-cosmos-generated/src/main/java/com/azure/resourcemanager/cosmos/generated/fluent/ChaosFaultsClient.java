// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.generated.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.cosmos.generated.fluent.models.ChaosFaultResourceInner;

/**
 * An instance of this class provides access to all the operations defined in ChaosFaultsClient.
 */
public interface ChaosFaultsClient {
    /**
     * List Chaos Faults for CosmosDB account.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return chaos Fault List Response as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ChaosFaultResourceInner> list(String resourceGroupName, String accountName);

    /**
     * List Chaos Faults for CosmosDB account.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return chaos Fault List Response as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ChaosFaultResourceInner> list(String resourceGroupName, String accountName, Context context);

    /**
     * Enable, disable Chaos Fault in a CosmosDB account.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param chaosFault The name of the ChaosFault.
     * @param chaosFaultRequest A request object to enable/disable the chaos fault.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a request object to enable/disable the chaos fault.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ChaosFaultResourceInner>, ChaosFaultResourceInner> beginEnableDisable(
        String resourceGroupName, String accountName, String chaosFault, ChaosFaultResourceInner chaosFaultRequest);

    /**
     * Enable, disable Chaos Fault in a CosmosDB account.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param chaosFault The name of the ChaosFault.
     * @param chaosFaultRequest A request object to enable/disable the chaos fault.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a request object to enable/disable the chaos fault.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ChaosFaultResourceInner>, ChaosFaultResourceInner> beginEnableDisable(
        String resourceGroupName, String accountName, String chaosFault, ChaosFaultResourceInner chaosFaultRequest,
        Context context);

    /**
     * Enable, disable Chaos Fault in a CosmosDB account.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param chaosFault The name of the ChaosFault.
     * @param chaosFaultRequest A request object to enable/disable the chaos fault.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a request object to enable/disable the chaos fault.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ChaosFaultResourceInner enableDisable(String resourceGroupName, String accountName, String chaosFault,
        ChaosFaultResourceInner chaosFaultRequest);

    /**
     * Enable, disable Chaos Fault in a CosmosDB account.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param chaosFault The name of the ChaosFault.
     * @param chaosFaultRequest A request object to enable/disable the chaos fault.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a request object to enable/disable the chaos fault.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ChaosFaultResourceInner enableDisable(String resourceGroupName, String accountName, String chaosFault,
        ChaosFaultResourceInner chaosFaultRequest, Context context);

    /**
     * Get Chaos Fault for a CosmosdB account for a particular Chaos Fault.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param chaosFault The name of the ChaosFault.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return chaos Fault for a CosmosdB account for a particular Chaos Fault along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<ChaosFaultResourceInner> getWithResponse(String resourceGroupName, String accountName, String chaosFault,
        Context context);

    /**
     * Get Chaos Fault for a CosmosdB account for a particular Chaos Fault.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param chaosFault The name of the ChaosFault.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return chaos Fault for a CosmosdB account for a particular Chaos Fault.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ChaosFaultResourceInner get(String resourceGroupName, String accountName, String chaosFault);
}
