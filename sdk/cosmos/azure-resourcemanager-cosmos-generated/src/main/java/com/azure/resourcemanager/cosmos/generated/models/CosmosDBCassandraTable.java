// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * A CosmosDB Cassandra table.
 */
@Fluent
public final class CosmosDBCassandraTable implements JsonSerializable<CosmosDBCassandraTable> {
    /*
     * Azure Cosmos DB for Apache Cassandra keyspace.
     */
    private String keyspaceName;

    /*
     * Azure Cosmos DB for Apache Cassandra table.
     */
    private String tableName;

    /**
     * Creates an instance of CosmosDBCassandraTable class.
     */
    public CosmosDBCassandraTable() {
    }

    /**
     * Get the keyspaceName property: Azure Cosmos DB for Apache Cassandra keyspace.
     * 
     * @return the keyspaceName value.
     */
    public String keyspaceName() {
        return this.keyspaceName;
    }

    /**
     * Set the keyspaceName property: Azure Cosmos DB for Apache Cassandra keyspace.
     * 
     * @param keyspaceName the keyspaceName value to set.
     * @return the CosmosDBCassandraTable object itself.
     */
    public CosmosDBCassandraTable withKeyspaceName(String keyspaceName) {
        this.keyspaceName = keyspaceName;
        return this;
    }

    /**
     * Get the tableName property: Azure Cosmos DB for Apache Cassandra table.
     * 
     * @return the tableName value.
     */
    public String tableName() {
        return this.tableName;
    }

    /**
     * Set the tableName property: Azure Cosmos DB for Apache Cassandra table.
     * 
     * @param tableName the tableName value to set.
     * @return the CosmosDBCassandraTable object itself.
     */
    public CosmosDBCassandraTable withTableName(String tableName) {
        this.tableName = tableName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (keyspaceName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property keyspaceName in model CosmosDBCassandraTable"));
        }
        if (tableName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property tableName in model CosmosDBCassandraTable"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(CosmosDBCassandraTable.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("keyspaceName", this.keyspaceName);
        jsonWriter.writeStringField("tableName", this.tableName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CosmosDBCassandraTable from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CosmosDBCassandraTable if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CosmosDBCassandraTable.
     */
    public static CosmosDBCassandraTable fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CosmosDBCassandraTable deserializedCosmosDBCassandraTable = new CosmosDBCassandraTable();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("keyspaceName".equals(fieldName)) {
                    deserializedCosmosDBCassandraTable.keyspaceName = reader.getString();
                } else if ("tableName".equals(fieldName)) {
                    deserializedCosmosDBCassandraTable.tableName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCosmosDBCassandraTable;
        });
    }
}
