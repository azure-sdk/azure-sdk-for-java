// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.cosmos.generated.fluent.CopyJobsClient;
import com.azure.resourcemanager.cosmos.generated.fluent.models.CopyJobGetResultsInner;
import com.azure.resourcemanager.cosmos.generated.models.CopyJobGetResults;
import com.azure.resourcemanager.cosmos.generated.models.CopyJobs;

public final class CopyJobsImpl implements CopyJobs {
    private static final ClientLogger LOGGER = new ClientLogger(CopyJobsImpl.class);

    private final CopyJobsClient innerClient;

    private final com.azure.resourcemanager.cosmos.generated.CosmosDBManager serviceManager;

    public CopyJobsImpl(CopyJobsClient innerClient,
        com.azure.resourcemanager.cosmos.generated.CosmosDBManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<CopyJobGetResults> getWithResponse(String resourceGroupName, String accountName, String jobName,
        Context context) {
        Response<CopyJobGetResultsInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, accountName, jobName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new CopyJobGetResultsImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public CopyJobGetResults get(String resourceGroupName, String accountName, String jobName) {
        CopyJobGetResultsInner inner = this.serviceClient().get(resourceGroupName, accountName, jobName);
        if (inner != null) {
            return new CopyJobGetResultsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<CopyJobGetResults> pauseWithResponse(String resourceGroupName, String accountName, String jobName,
        Context context) {
        Response<CopyJobGetResultsInner> inner
            = this.serviceClient().pauseWithResponse(resourceGroupName, accountName, jobName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new CopyJobGetResultsImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public CopyJobGetResults pause(String resourceGroupName, String accountName, String jobName) {
        CopyJobGetResultsInner inner = this.serviceClient().pause(resourceGroupName, accountName, jobName);
        if (inner != null) {
            return new CopyJobGetResultsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<CopyJobGetResults> resumeWithResponse(String resourceGroupName, String accountName, String jobName,
        Context context) {
        Response<CopyJobGetResultsInner> inner
            = this.serviceClient().resumeWithResponse(resourceGroupName, accountName, jobName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new CopyJobGetResultsImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public CopyJobGetResults resume(String resourceGroupName, String accountName, String jobName) {
        CopyJobGetResultsInner inner = this.serviceClient().resume(resourceGroupName, accountName, jobName);
        if (inner != null) {
            return new CopyJobGetResultsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<CopyJobGetResults> cancelWithResponse(String resourceGroupName, String accountName, String jobName,
        Context context) {
        Response<CopyJobGetResultsInner> inner
            = this.serviceClient().cancelWithResponse(resourceGroupName, accountName, jobName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new CopyJobGetResultsImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public CopyJobGetResults cancel(String resourceGroupName, String accountName, String jobName) {
        CopyJobGetResultsInner inner = this.serviceClient().cancel(resourceGroupName, accountName, jobName);
        if (inner != null) {
            return new CopyJobGetResultsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<CopyJobGetResults> completeWithResponse(String resourceGroupName, String accountName,
        String jobName, Context context) {
        Response<CopyJobGetResultsInner> inner
            = this.serviceClient().completeWithResponse(resourceGroupName, accountName, jobName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new CopyJobGetResultsImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public CopyJobGetResults complete(String resourceGroupName, String accountName, String jobName) {
        CopyJobGetResultsInner inner = this.serviceClient().complete(resourceGroupName, accountName, jobName);
        if (inner != null) {
            return new CopyJobGetResultsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<CopyJobGetResults> listByDatabaseAccount(String resourceGroupName, String accountName) {
        PagedIterable<CopyJobGetResultsInner> inner
            = this.serviceClient().listByDatabaseAccount(resourceGroupName, accountName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new CopyJobGetResultsImpl(inner1, this.manager()));
    }

    public PagedIterable<CopyJobGetResults> listByDatabaseAccount(String resourceGroupName, String accountName,
        Context context) {
        PagedIterable<CopyJobGetResultsInner> inner
            = this.serviceClient().listByDatabaseAccount(resourceGroupName, accountName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new CopyJobGetResultsImpl(inner1, this.manager()));
    }

    public CopyJobGetResults getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = ResourceManagerUtils.getValueFromIdByName(id, "databaseAccounts");
        if (accountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'databaseAccounts'.", id)));
        }
        String jobName = ResourceManagerUtils.getValueFromIdByName(id, "copyJobs");
        if (jobName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'copyJobs'.", id)));
        }
        return this.getWithResponse(resourceGroupName, accountName, jobName, Context.NONE).getValue();
    }

    public Response<CopyJobGetResults> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = ResourceManagerUtils.getValueFromIdByName(id, "databaseAccounts");
        if (accountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'databaseAccounts'.", id)));
        }
        String jobName = ResourceManagerUtils.getValueFromIdByName(id, "copyJobs");
        if (jobName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'copyJobs'.", id)));
        }
        return this.getWithResponse(resourceGroupName, accountName, jobName, context);
    }

    private CopyJobsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.cosmos.generated.CosmosDBManager manager() {
        return this.serviceManager;
    }

    public CopyJobGetResultsImpl define(String name) {
        return new CopyJobGetResultsImpl(name, this.manager());
    }
}
