// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.generated.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/** The CassandraReaperGossipInfo model. */
@Fluent
public final class CassandraReaperGossipInfo {
    /*
     * The sourceNode property.
     */
    @JsonProperty(value = "sourceNode")
    private String sourceNode;

    /*
     * Dictionary of <components·1vevrom·schemas·cassandrareapergossipinfo·properties·endpoints·additionalproperties>
     */
    @JsonProperty(value = "endpoints")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, Map<String, List<CassandraReaperEndpointState>>> endpoints;

    /*
     * The totalLoad property.
     */
    @JsonProperty(value = "totalLoad")
    private Double totalLoad;

    /*
     * The endpointNames property.
     */
    @JsonProperty(value = "endpointNames")
    private List<String> endpointNames;

    /** Creates an instance of CassandraReaperGossipInfo class. */
    public CassandraReaperGossipInfo() {
    }

    /**
     * Get the sourceNode property: The sourceNode property.
     *
     * @return the sourceNode value.
     */
    public String sourceNode() {
        return this.sourceNode;
    }

    /**
     * Set the sourceNode property: The sourceNode property.
     *
     * @param sourceNode the sourceNode value to set.
     * @return the CassandraReaperGossipInfo object itself.
     */
    public CassandraReaperGossipInfo withSourceNode(String sourceNode) {
        this.sourceNode = sourceNode;
        return this;
    }

    /**
     * Get the endpoints property: Dictionary of
     * &lt;components·1vevrom·schemas·cassandrareapergossipinfo·properties·endpoints·additionalproperties&gt;.
     *
     * @return the endpoints value.
     */
    public Map<String, Map<String, List<CassandraReaperEndpointState>>> endpoints() {
        return this.endpoints;
    }

    /**
     * Set the endpoints property: Dictionary of
     * &lt;components·1vevrom·schemas·cassandrareapergossipinfo·properties·endpoints·additionalproperties&gt;.
     *
     * @param endpoints the endpoints value to set.
     * @return the CassandraReaperGossipInfo object itself.
     */
    public CassandraReaperGossipInfo withEndpoints(
        Map<String, Map<String, List<CassandraReaperEndpointState>>> endpoints) {
        this.endpoints = endpoints;
        return this;
    }

    /**
     * Get the totalLoad property: The totalLoad property.
     *
     * @return the totalLoad value.
     */
    public Double totalLoad() {
        return this.totalLoad;
    }

    /**
     * Set the totalLoad property: The totalLoad property.
     *
     * @param totalLoad the totalLoad value to set.
     * @return the CassandraReaperGossipInfo object itself.
     */
    public CassandraReaperGossipInfo withTotalLoad(Double totalLoad) {
        this.totalLoad = totalLoad;
        return this;
    }

    /**
     * Get the endpointNames property: The endpointNames property.
     *
     * @return the endpointNames value.
     */
    public List<String> endpointNames() {
        return this.endpointNames;
    }

    /**
     * Set the endpointNames property: The endpointNames property.
     *
     * @param endpointNames the endpointNames value to set.
     * @return the CassandraReaperGossipInfo object itself.
     */
    public CassandraReaperGossipInfo withEndpointNames(List<String> endpointNames) {
        this.endpointNames = endpointNames;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (endpoints() != null) {
            endpoints()
                .values()
                .forEach(
                    e -> {
                        if (e != null) {
                            e
                                .values()
                                .forEach(
                                    e1 -> {
                                        if (e1 != null) {
                                            e1.forEach(e2 -> e2.validate());
                                        }
                                    });
                        }
                    });
        }
    }
}
