// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.cosmos.generated.fluent.MongoMIResourcesClient;
import com.azure.resourcemanager.cosmos.generated.fluent.models.MongoMIRoleAssignmentResourceInner;
import com.azure.resourcemanager.cosmos.generated.fluent.models.MongoMIRoleDefinitionResourceInner;
import com.azure.resourcemanager.cosmos.generated.models.MongoMIResources;
import com.azure.resourcemanager.cosmos.generated.models.MongoMIRoleAssignmentResource;
import com.azure.resourcemanager.cosmos.generated.models.MongoMIRoleDefinitionResource;

public final class MongoMIResourcesImpl implements MongoMIResources {
    private static final ClientLogger LOGGER = new ClientLogger(MongoMIResourcesImpl.class);

    private final MongoMIResourcesClient innerClient;

    private final com.azure.resourcemanager.cosmos.generated.CosmosDBManager serviceManager;

    public MongoMIResourcesImpl(MongoMIResourcesClient innerClient,
        com.azure.resourcemanager.cosmos.generated.CosmosDBManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<MongoMIRoleDefinitionResource> getMongoMIRoleDefinitionWithResponse(String resourceGroupName,
        String accountName, String roleDefinitionId, Context context) {
        Response<MongoMIRoleDefinitionResourceInner> inner = this.serviceClient()
            .getMongoMIRoleDefinitionWithResponse(resourceGroupName, accountName, roleDefinitionId, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new MongoMIRoleDefinitionResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public MongoMIRoleDefinitionResource getMongoMIRoleDefinition(String resourceGroupName, String accountName,
        String roleDefinitionId) {
        MongoMIRoleDefinitionResourceInner inner
            = this.serviceClient().getMongoMIRoleDefinition(resourceGroupName, accountName, roleDefinitionId);
        if (inner != null) {
            return new MongoMIRoleDefinitionResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteMongoMIRoleDefinition(String resourceGroupName, String accountName, String roleDefinitionId) {
        this.serviceClient().deleteMongoMIRoleDefinition(resourceGroupName, accountName, roleDefinitionId);
    }

    public void deleteMongoMIRoleDefinition(String resourceGroupName, String accountName, String roleDefinitionId,
        Context context) {
        this.serviceClient().deleteMongoMIRoleDefinition(resourceGroupName, accountName, roleDefinitionId, context);
    }

    public PagedIterable<MongoMIRoleDefinitionResource> listMongoMIRoleDefinitions(String resourceGroupName,
        String accountName) {
        PagedIterable<MongoMIRoleDefinitionResourceInner> inner
            = this.serviceClient().listMongoMIRoleDefinitions(resourceGroupName, accountName);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new MongoMIRoleDefinitionResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<MongoMIRoleDefinitionResource> listMongoMIRoleDefinitions(String resourceGroupName,
        String accountName, Context context) {
        PagedIterable<MongoMIRoleDefinitionResourceInner> inner
            = this.serviceClient().listMongoMIRoleDefinitions(resourceGroupName, accountName, context);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new MongoMIRoleDefinitionResourceImpl(inner1, this.manager()));
    }

    public Response<MongoMIRoleAssignmentResource> getMongoMIRoleAssignmentWithResponse(String resourceGroupName,
        String accountName, String roleAssignmentId, Context context) {
        Response<MongoMIRoleAssignmentResourceInner> inner = this.serviceClient()
            .getMongoMIRoleAssignmentWithResponse(resourceGroupName, accountName, roleAssignmentId, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new MongoMIRoleAssignmentResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public MongoMIRoleAssignmentResource getMongoMIRoleAssignment(String resourceGroupName, String accountName,
        String roleAssignmentId) {
        MongoMIRoleAssignmentResourceInner inner
            = this.serviceClient().getMongoMIRoleAssignment(resourceGroupName, accountName, roleAssignmentId);
        if (inner != null) {
            return new MongoMIRoleAssignmentResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteMongoMIRoleAssignment(String resourceGroupName, String accountName, String roleAssignmentId) {
        this.serviceClient().deleteMongoMIRoleAssignment(resourceGroupName, accountName, roleAssignmentId);
    }

    public void deleteMongoMIRoleAssignment(String resourceGroupName, String accountName, String roleAssignmentId,
        Context context) {
        this.serviceClient().deleteMongoMIRoleAssignment(resourceGroupName, accountName, roleAssignmentId, context);
    }

    public PagedIterable<MongoMIRoleAssignmentResource> listMongoMIRoleAssignments(String resourceGroupName,
        String accountName) {
        PagedIterable<MongoMIRoleAssignmentResourceInner> inner
            = this.serviceClient().listMongoMIRoleAssignments(resourceGroupName, accountName);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new MongoMIRoleAssignmentResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<MongoMIRoleAssignmentResource> listMongoMIRoleAssignments(String resourceGroupName,
        String accountName, Context context) {
        PagedIterable<MongoMIRoleAssignmentResourceInner> inner
            = this.serviceClient().listMongoMIRoleAssignments(resourceGroupName, accountName, context);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new MongoMIRoleAssignmentResourceImpl(inner1, this.manager()));
    }

    public MongoMIRoleDefinitionResource getMongoMIRoleDefinitionById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = ResourceManagerUtils.getValueFromIdByName(id, "databaseAccounts");
        if (accountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'databaseAccounts'.", id)));
        }
        String roleDefinitionId = ResourceManagerUtils.getValueFromIdByName(id, "mongoMIRoleDefinitions");
        if (roleDefinitionId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'mongoMIRoleDefinitions'.", id)));
        }
        return this.getMongoMIRoleDefinitionWithResponse(resourceGroupName, accountName, roleDefinitionId, Context.NONE)
            .getValue();
    }

    public Response<MongoMIRoleDefinitionResource> getMongoMIRoleDefinitionByIdWithResponse(String id,
        Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = ResourceManagerUtils.getValueFromIdByName(id, "databaseAccounts");
        if (accountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'databaseAccounts'.", id)));
        }
        String roleDefinitionId = ResourceManagerUtils.getValueFromIdByName(id, "mongoMIRoleDefinitions");
        if (roleDefinitionId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'mongoMIRoleDefinitions'.", id)));
        }
        return this.getMongoMIRoleDefinitionWithResponse(resourceGroupName, accountName, roleDefinitionId, context);
    }

    public MongoMIRoleAssignmentResource getMongoMIRoleAssignmentById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = ResourceManagerUtils.getValueFromIdByName(id, "databaseAccounts");
        if (accountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'databaseAccounts'.", id)));
        }
        String roleAssignmentId = ResourceManagerUtils.getValueFromIdByName(id, "mongoMIRoleAssignments");
        if (roleAssignmentId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'mongoMIRoleAssignments'.", id)));
        }
        return this.getMongoMIRoleAssignmentWithResponse(resourceGroupName, accountName, roleAssignmentId, Context.NONE)
            .getValue();
    }

    public Response<MongoMIRoleAssignmentResource> getMongoMIRoleAssignmentByIdWithResponse(String id,
        Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = ResourceManagerUtils.getValueFromIdByName(id, "databaseAccounts");
        if (accountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'databaseAccounts'.", id)));
        }
        String roleAssignmentId = ResourceManagerUtils.getValueFromIdByName(id, "mongoMIRoleAssignments");
        if (roleAssignmentId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'mongoMIRoleAssignments'.", id)));
        }
        return this.getMongoMIRoleAssignmentWithResponse(resourceGroupName, accountName, roleAssignmentId, context);
    }

    public void deleteMongoMIRoleDefinitionById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = ResourceManagerUtils.getValueFromIdByName(id, "databaseAccounts");
        if (accountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'databaseAccounts'.", id)));
        }
        String roleDefinitionId = ResourceManagerUtils.getValueFromIdByName(id, "mongoMIRoleDefinitions");
        if (roleDefinitionId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'mongoMIRoleDefinitions'.", id)));
        }
        this.deleteMongoMIRoleDefinition(resourceGroupName, accountName, roleDefinitionId, Context.NONE);
    }

    public void deleteMongoMIRoleDefinitionByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = ResourceManagerUtils.getValueFromIdByName(id, "databaseAccounts");
        if (accountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'databaseAccounts'.", id)));
        }
        String roleDefinitionId = ResourceManagerUtils.getValueFromIdByName(id, "mongoMIRoleDefinitions");
        if (roleDefinitionId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'mongoMIRoleDefinitions'.", id)));
        }
        this.deleteMongoMIRoleDefinition(resourceGroupName, accountName, roleDefinitionId, context);
    }

    public void deleteMongoMIRoleAssignmentById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = ResourceManagerUtils.getValueFromIdByName(id, "databaseAccounts");
        if (accountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'databaseAccounts'.", id)));
        }
        String roleAssignmentId = ResourceManagerUtils.getValueFromIdByName(id, "mongoMIRoleAssignments");
        if (roleAssignmentId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'mongoMIRoleAssignments'.", id)));
        }
        this.deleteMongoMIRoleAssignment(resourceGroupName, accountName, roleAssignmentId, Context.NONE);
    }

    public void deleteMongoMIRoleAssignmentByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = ResourceManagerUtils.getValueFromIdByName(id, "databaseAccounts");
        if (accountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'databaseAccounts'.", id)));
        }
        String roleAssignmentId = ResourceManagerUtils.getValueFromIdByName(id, "mongoMIRoleAssignments");
        if (roleAssignmentId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'mongoMIRoleAssignments'.", id)));
        }
        this.deleteMongoMIRoleAssignment(resourceGroupName, accountName, roleAssignmentId, context);
    }

    private MongoMIResourcesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.cosmos.generated.CosmosDBManager manager() {
        return this.serviceManager;
    }

    public MongoMIRoleDefinitionResourceImpl defineUpdateMongoMIRoleDefinition(String name) {
        return new MongoMIRoleDefinitionResourceImpl(name, this.manager());
    }

    public MongoMIRoleAssignmentResourceImpl defineUpdateMongoMIRoleAssignment(String name) {
        return new MongoMIRoleAssignmentResourceImpl(name, this.manager());
    }
}
