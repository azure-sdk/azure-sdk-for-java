// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Specification for a node group.
 */
@Fluent
public final class NodeGroupSpec extends NodeGroupProperties {
    /*
     * The node type deployed in the node group.
     */
    private NodeKind kind;

    /*
     * The number of nodes in the node group.
     */
    private Integer nodeCount;

    /**
     * Creates an instance of NodeGroupSpec class.
     */
    public NodeGroupSpec() {
    }

    /**
     * Get the kind property: The node type deployed in the node group.
     * 
     * @return the kind value.
     */
    public NodeKind kind() {
        return this.kind;
    }

    /**
     * Set the kind property: The node type deployed in the node group.
     * 
     * @param kind the kind value to set.
     * @return the NodeGroupSpec object itself.
     */
    public NodeGroupSpec withKind(NodeKind kind) {
        this.kind = kind;
        return this;
    }

    /**
     * Get the nodeCount property: The number of nodes in the node group.
     * 
     * @return the nodeCount value.
     */
    public Integer nodeCount() {
        return this.nodeCount;
    }

    /**
     * Set the nodeCount property: The number of nodes in the node group.
     * 
     * @param nodeCount the nodeCount value to set.
     * @return the NodeGroupSpec object itself.
     */
    public NodeGroupSpec withNodeCount(Integer nodeCount) {
        this.nodeCount = nodeCount;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public NodeGroupSpec withSku(String sku) {
        super.withSku(sku);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public NodeGroupSpec withDiskSizeGB(Long diskSizeGB) {
        super.withDiskSizeGB(diskSizeGB);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public NodeGroupSpec withEnableHa(Boolean enableHa) {
        super.withEnableHa(enableHa);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("sku", sku());
        jsonWriter.writeNumberField("diskSizeGB", diskSizeGB());
        jsonWriter.writeBooleanField("enableHa", enableHa());
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        jsonWriter.writeNumberField("nodeCount", this.nodeCount);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NodeGroupSpec from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NodeGroupSpec if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the NodeGroupSpec.
     */
    public static NodeGroupSpec fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NodeGroupSpec deserializedNodeGroupSpec = new NodeGroupSpec();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sku".equals(fieldName)) {
                    deserializedNodeGroupSpec.withSku(reader.getString());
                } else if ("diskSizeGB".equals(fieldName)) {
                    deserializedNodeGroupSpec.withDiskSizeGB(reader.getNullable(JsonReader::getLong));
                } else if ("enableHa".equals(fieldName)) {
                    deserializedNodeGroupSpec.withEnableHa(reader.getNullable(JsonReader::getBoolean));
                } else if ("kind".equals(fieldName)) {
                    deserializedNodeGroupSpec.kind = NodeKind.fromString(reader.getString());
                } else if ("nodeCount".equals(fieldName)) {
                    deserializedNodeGroupSpec.nodeCount = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNodeGroupSpec;
        });
    }
}
