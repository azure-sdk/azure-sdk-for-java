// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.core.management.SystemData;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.cosmos.generated.models.CreateMode;
import com.azure.resourcemanager.cosmos.generated.models.MongoClusterRestoreParameters;
import com.azure.resourcemanager.cosmos.generated.models.MongoClusterStatus;
import com.azure.resourcemanager.cosmos.generated.models.NodeGroupSpec;
import com.azure.resourcemanager.cosmos.generated.models.ProvisioningState;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * Represents a mongo cluster resource.
 */
@Fluent
public final class MongoClusterInner extends Resource {
    /*
     * Properties of the mongo cluster.
     */
    private MongoClusterProperties innerProperties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * The type of the resource.
     */
    private String type;

    /**
     * Creates an instance of MongoClusterInner class.
     */
    public MongoClusterInner() {
    }

    /**
     * Get the innerProperties property: Properties of the mongo cluster.
     * 
     * @return the innerProperties value.
     */
    private MongoClusterProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MongoClusterInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MongoClusterInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the createMode property: The mode to create a mongo cluster.
     * 
     * @return the createMode value.
     */
    public CreateMode createMode() {
        return this.innerProperties() == null ? null : this.innerProperties().createMode();
    }

    /**
     * Set the createMode property: The mode to create a mongo cluster.
     * 
     * @param createMode the createMode value to set.
     * @return the MongoClusterInner object itself.
     */
    public MongoClusterInner withCreateMode(CreateMode createMode) {
        if (this.innerProperties() == null) {
            this.innerProperties = new MongoClusterProperties();
        }
        this.innerProperties().withCreateMode(createMode);
        return this;
    }

    /**
     * Get the restoreParameters property: Parameters used for restore operations.
     * 
     * @return the restoreParameters value.
     */
    public MongoClusterRestoreParameters restoreParameters() {
        return this.innerProperties() == null ? null : this.innerProperties().restoreParameters();
    }

    /**
     * Set the restoreParameters property: Parameters used for restore operations.
     * 
     * @param restoreParameters the restoreParameters value to set.
     * @return the MongoClusterInner object itself.
     */
    public MongoClusterInner withRestoreParameters(MongoClusterRestoreParameters restoreParameters) {
        if (this.innerProperties() == null) {
            this.innerProperties = new MongoClusterProperties();
        }
        this.innerProperties().withRestoreParameters(restoreParameters);
        return this;
    }

    /**
     * Get the administratorLogin property: The administrator's login for the mongo cluster.
     * 
     * @return the administratorLogin value.
     */
    public String administratorLogin() {
        return this.innerProperties() == null ? null : this.innerProperties().administratorLogin();
    }

    /**
     * Set the administratorLogin property: The administrator's login for the mongo cluster.
     * 
     * @param administratorLogin the administratorLogin value to set.
     * @return the MongoClusterInner object itself.
     */
    public MongoClusterInner withAdministratorLogin(String administratorLogin) {
        if (this.innerProperties() == null) {
            this.innerProperties = new MongoClusterProperties();
        }
        this.innerProperties().withAdministratorLogin(administratorLogin);
        return this;
    }

    /**
     * Get the administratorLoginPassword property: The password of the administrator login.
     * 
     * @return the administratorLoginPassword value.
     */
    public String administratorLoginPassword() {
        return this.innerProperties() == null ? null : this.innerProperties().administratorLoginPassword();
    }

    /**
     * Set the administratorLoginPassword property: The password of the administrator login.
     * 
     * @param administratorLoginPassword the administratorLoginPassword value to set.
     * @return the MongoClusterInner object itself.
     */
    public MongoClusterInner withAdministratorLoginPassword(String administratorLoginPassword) {
        if (this.innerProperties() == null) {
            this.innerProperties = new MongoClusterProperties();
        }
        this.innerProperties().withAdministratorLoginPassword(administratorLoginPassword);
        return this;
    }

    /**
     * Get the serverVersion property: The Mongo DB server version. Defaults to the latest available version if not
     * specified.
     * 
     * @return the serverVersion value.
     */
    public String serverVersion() {
        return this.innerProperties() == null ? null : this.innerProperties().serverVersion();
    }

    /**
     * Set the serverVersion property: The Mongo DB server version. Defaults to the latest available version if not
     * specified.
     * 
     * @param serverVersion the serverVersion value to set.
     * @return the MongoClusterInner object itself.
     */
    public MongoClusterInner withServerVersion(String serverVersion) {
        if (this.innerProperties() == null) {
            this.innerProperties = new MongoClusterProperties();
        }
        this.innerProperties().withServerVersion(serverVersion);
        return this;
    }

    /**
     * Get the connectionString property: The default mongo connection string for the cluster.
     * 
     * @return the connectionString value.
     */
    public String connectionString() {
        return this.innerProperties() == null ? null : this.innerProperties().connectionString();
    }

    /**
     * Get the earliestRestoreTime property: Earliest restore timestamp in UTC ISO8601 format.
     * 
     * @return the earliestRestoreTime value.
     */
    public String earliestRestoreTime() {
        return this.innerProperties() == null ? null : this.innerProperties().earliestRestoreTime();
    }

    /**
     * Get the provisioningState property: A provisioning state of the mongo cluster.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the clusterStatus property: A status of the mongo cluster.
     * 
     * @return the clusterStatus value.
     */
    public MongoClusterStatus clusterStatus() {
        return this.innerProperties() == null ? null : this.innerProperties().clusterStatus();
    }

    /**
     * Get the nodeGroupSpecs property: The list of node group specs in the cluster.
     * 
     * @return the nodeGroupSpecs value.
     */
    public List<NodeGroupSpec> nodeGroupSpecs() {
        return this.innerProperties() == null ? null : this.innerProperties().nodeGroupSpecs();
    }

    /**
     * Set the nodeGroupSpecs property: The list of node group specs in the cluster.
     * 
     * @param nodeGroupSpecs the nodeGroupSpecs value to set.
     * @return the MongoClusterInner object itself.
     */
    public MongoClusterInner withNodeGroupSpecs(List<NodeGroupSpec> nodeGroupSpecs) {
        if (this.innerProperties() == null) {
            this.innerProperties = new MongoClusterProperties();
        }
        this.innerProperties().withNodeGroupSpecs(nodeGroupSpecs);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("location", location());
        jsonWriter.writeMapField("tags", tags(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MongoClusterInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MongoClusterInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MongoClusterInner.
     */
    public static MongoClusterInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MongoClusterInner deserializedMongoClusterInner = new MongoClusterInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedMongoClusterInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedMongoClusterInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedMongoClusterInner.type = reader.getString();
                } else if ("location".equals(fieldName)) {
                    deserializedMongoClusterInner.withLocation(reader.getString());
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedMongoClusterInner.withTags(tags);
                } else if ("properties".equals(fieldName)) {
                    deserializedMongoClusterInner.innerProperties = MongoClusterProperties.fromJson(reader);
                } else if ("systemData".equals(fieldName)) {
                    deserializedMongoClusterInner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMongoClusterInner;
        });
    }
}
