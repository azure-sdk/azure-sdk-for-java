// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * A CosmosDB Cassandra container entity.
 */
@Fluent
public final class CosmosCassandraContainerEntity extends ContainerEntity {
    /*
     * The component property.
     */
    private DataTransferComponent component = DataTransferComponent.COSMOS_DBCASSANDRA;

    /*
     * The keySpaceName property.
     */
    private String keySpaceName;

    /*
     * The tableName property.
     */
    private String tableName;

    /**
     * Creates an instance of CosmosCassandraContainerEntity class.
     */
    public CosmosCassandraContainerEntity() {
    }

    /**
     * Get the component property: The component property.
     * 
     * @return the component value.
     */
    @Override
    public DataTransferComponent component() {
        return this.component;
    }

    /**
     * Get the keySpaceName property: The keySpaceName property.
     * 
     * @return the keySpaceName value.
     */
    public String keySpaceName() {
        return this.keySpaceName;
    }

    /**
     * Set the keySpaceName property: The keySpaceName property.
     * 
     * @param keySpaceName the keySpaceName value to set.
     * @return the CosmosCassandraContainerEntity object itself.
     */
    public CosmosCassandraContainerEntity withKeySpaceName(String keySpaceName) {
        this.keySpaceName = keySpaceName;
        return this;
    }

    /**
     * Get the tableName property: The tableName property.
     * 
     * @return the tableName value.
     */
    public String tableName() {
        return this.tableName;
    }

    /**
     * Set the tableName property: The tableName property.
     * 
     * @param tableName the tableName value to set.
     * @return the CosmosCassandraContainerEntity object itself.
     */
    public CosmosCassandraContainerEntity withTableName(String tableName) {
        this.tableName = tableName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (keySpaceName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property keySpaceName in model CosmosCassandraContainerEntity"));
        }
        if (tableName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property tableName in model CosmosCassandraContainerEntity"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(CosmosCassandraContainerEntity.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("keySpaceName", this.keySpaceName);
        jsonWriter.writeStringField("tableName", this.tableName);
        jsonWriter.writeStringField("component", this.component == null ? null : this.component.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CosmosCassandraContainerEntity from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CosmosCassandraContainerEntity if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CosmosCassandraContainerEntity.
     */
    public static CosmosCassandraContainerEntity fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CosmosCassandraContainerEntity deserializedCosmosCassandraContainerEntity
                = new CosmosCassandraContainerEntity();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("keySpaceName".equals(fieldName)) {
                    deserializedCosmosCassandraContainerEntity.keySpaceName = reader.getString();
                } else if ("tableName".equals(fieldName)) {
                    deserializedCosmosCassandraContainerEntity.tableName = reader.getString();
                } else if ("component".equals(fieldName)) {
                    deserializedCosmosCassandraContainerEntity.component
                        = DataTransferComponent.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCosmosCassandraContainerEntity;
        });
    }
}
