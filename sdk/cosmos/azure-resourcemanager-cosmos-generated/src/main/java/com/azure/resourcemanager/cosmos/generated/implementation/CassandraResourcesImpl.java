// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.cosmos.generated.fluent.CassandraResourcesClient;
import com.azure.resourcemanager.cosmos.generated.fluent.models.CassandraKeyspaceGetResultsInner;
import com.azure.resourcemanager.cosmos.generated.fluent.models.CassandraRoleAssignmentResourceInner;
import com.azure.resourcemanager.cosmos.generated.fluent.models.CassandraRoleDefinitionResourceInner;
import com.azure.resourcemanager.cosmos.generated.fluent.models.CassandraTableGetResultsInner;
import com.azure.resourcemanager.cosmos.generated.fluent.models.CassandraViewGetResultsInner;
import com.azure.resourcemanager.cosmos.generated.fluent.models.ThroughputSettingsGetResultsInner;
import com.azure.resourcemanager.cosmos.generated.models.CassandraKeyspaceGetResults;
import com.azure.resourcemanager.cosmos.generated.models.CassandraResources;
import com.azure.resourcemanager.cosmos.generated.models.CassandraRoleAssignmentResource;
import com.azure.resourcemanager.cosmos.generated.models.CassandraRoleDefinitionResource;
import com.azure.resourcemanager.cosmos.generated.models.CassandraTableGetResults;
import com.azure.resourcemanager.cosmos.generated.models.CassandraViewGetResults;
import com.azure.resourcemanager.cosmos.generated.models.ThroughputSettingsGetResults;
import com.azure.resourcemanager.cosmos.generated.models.ThroughputSettingsUpdateParameters;

public final class CassandraResourcesImpl implements CassandraResources {
    private static final ClientLogger LOGGER = new ClientLogger(CassandraResourcesImpl.class);

    private final CassandraResourcesClient innerClient;

    private final com.azure.resourcemanager.cosmos.generated.CosmosDBManager serviceManager;

    public CassandraResourcesImpl(CassandraResourcesClient innerClient,
        com.azure.resourcemanager.cosmos.generated.CosmosDBManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<CassandraKeyspaceGetResults> listCassandraKeyspaces(String resourceGroupName,
        String accountName) {
        PagedIterable<CassandraKeyspaceGetResultsInner> inner
            = this.serviceClient().listCassandraKeyspaces(resourceGroupName, accountName);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new CassandraKeyspaceGetResultsImpl(inner1, this.manager()));
    }

    public PagedIterable<CassandraKeyspaceGetResults> listCassandraKeyspaces(String resourceGroupName,
        String accountName, Context context) {
        PagedIterable<CassandraKeyspaceGetResultsInner> inner
            = this.serviceClient().listCassandraKeyspaces(resourceGroupName, accountName, context);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new CassandraKeyspaceGetResultsImpl(inner1, this.manager()));
    }

    public Response<CassandraKeyspaceGetResults> getCassandraKeyspaceWithResponse(String resourceGroupName,
        String accountName, String keyspaceName, Context context) {
        Response<CassandraKeyspaceGetResultsInner> inner = this.serviceClient()
            .getCassandraKeyspaceWithResponse(resourceGroupName, accountName, keyspaceName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new CassandraKeyspaceGetResultsImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public CassandraKeyspaceGetResults getCassandraKeyspace(String resourceGroupName, String accountName,
        String keyspaceName) {
        CassandraKeyspaceGetResultsInner inner
            = this.serviceClient().getCassandraKeyspace(resourceGroupName, accountName, keyspaceName);
        if (inner != null) {
            return new CassandraKeyspaceGetResultsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteCassandraKeyspace(String resourceGroupName, String accountName, String keyspaceName) {
        this.serviceClient().deleteCassandraKeyspace(resourceGroupName, accountName, keyspaceName);
    }

    public void deleteCassandraKeyspace(String resourceGroupName, String accountName, String keyspaceName,
        Context context) {
        this.serviceClient().deleteCassandraKeyspace(resourceGroupName, accountName, keyspaceName, context);
    }

    public Response<ThroughputSettingsGetResults> getCassandraKeyspaceThroughputWithResponse(String resourceGroupName,
        String accountName, String keyspaceName, Context context) {
        Response<ThroughputSettingsGetResultsInner> inner = this.serviceClient()
            .getCassandraKeyspaceThroughputWithResponse(resourceGroupName, accountName, keyspaceName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new ThroughputSettingsGetResultsImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ThroughputSettingsGetResults getCassandraKeyspaceThroughput(String resourceGroupName, String accountName,
        String keyspaceName) {
        ThroughputSettingsGetResultsInner inner
            = this.serviceClient().getCassandraKeyspaceThroughput(resourceGroupName, accountName, keyspaceName);
        if (inner != null) {
            return new ThroughputSettingsGetResultsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ThroughputSettingsGetResults updateCassandraKeyspaceThroughput(String resourceGroupName, String accountName,
        String keyspaceName, ThroughputSettingsUpdateParameters updateThroughputParameters) {
        ThroughputSettingsGetResultsInner inner = this.serviceClient()
            .updateCassandraKeyspaceThroughput(resourceGroupName, accountName, keyspaceName,
                updateThroughputParameters);
        if (inner != null) {
            return new ThroughputSettingsGetResultsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ThroughputSettingsGetResults updateCassandraKeyspaceThroughput(String resourceGroupName, String accountName,
        String keyspaceName, ThroughputSettingsUpdateParameters updateThroughputParameters, Context context) {
        ThroughputSettingsGetResultsInner inner = this.serviceClient()
            .updateCassandraKeyspaceThroughput(resourceGroupName, accountName, keyspaceName, updateThroughputParameters,
                context);
        if (inner != null) {
            return new ThroughputSettingsGetResultsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ThroughputSettingsGetResults migrateCassandraKeyspaceToAutoscale(String resourceGroupName,
        String accountName, String keyspaceName) {
        ThroughputSettingsGetResultsInner inner
            = this.serviceClient().migrateCassandraKeyspaceToAutoscale(resourceGroupName, accountName, keyspaceName);
        if (inner != null) {
            return new ThroughputSettingsGetResultsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ThroughputSettingsGetResults migrateCassandraKeyspaceToAutoscale(String resourceGroupName,
        String accountName, String keyspaceName, Context context) {
        ThroughputSettingsGetResultsInner inner = this.serviceClient()
            .migrateCassandraKeyspaceToAutoscale(resourceGroupName, accountName, keyspaceName, context);
        if (inner != null) {
            return new ThroughputSettingsGetResultsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ThroughputSettingsGetResults migrateCassandraKeyspaceToManualThroughput(String resourceGroupName,
        String accountName, String keyspaceName) {
        ThroughputSettingsGetResultsInner inner = this.serviceClient()
            .migrateCassandraKeyspaceToManualThroughput(resourceGroupName, accountName, keyspaceName);
        if (inner != null) {
            return new ThroughputSettingsGetResultsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ThroughputSettingsGetResults migrateCassandraKeyspaceToManualThroughput(String resourceGroupName,
        String accountName, String keyspaceName, Context context) {
        ThroughputSettingsGetResultsInner inner = this.serviceClient()
            .migrateCassandraKeyspaceToManualThroughput(resourceGroupName, accountName, keyspaceName, context);
        if (inner != null) {
            return new ThroughputSettingsGetResultsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<CassandraTableGetResults> listCassandraTables(String resourceGroupName, String accountName,
        String keyspaceName) {
        PagedIterable<CassandraTableGetResultsInner> inner
            = this.serviceClient().listCassandraTables(resourceGroupName, accountName, keyspaceName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new CassandraTableGetResultsImpl(inner1, this.manager()));
    }

    public PagedIterable<CassandraTableGetResults> listCassandraTables(String resourceGroupName, String accountName,
        String keyspaceName, Context context) {
        PagedIterable<CassandraTableGetResultsInner> inner
            = this.serviceClient().listCassandraTables(resourceGroupName, accountName, keyspaceName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new CassandraTableGetResultsImpl(inner1, this.manager()));
    }

    public Response<CassandraTableGetResults> getCassandraTableWithResponse(String resourceGroupName,
        String accountName, String keyspaceName, String tableName, Context context) {
        Response<CassandraTableGetResultsInner> inner = this.serviceClient()
            .getCassandraTableWithResponse(resourceGroupName, accountName, keyspaceName, tableName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new CassandraTableGetResultsImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public CassandraTableGetResults getCassandraTable(String resourceGroupName, String accountName, String keyspaceName,
        String tableName) {
        CassandraTableGetResultsInner inner
            = this.serviceClient().getCassandraTable(resourceGroupName, accountName, keyspaceName, tableName);
        if (inner != null) {
            return new CassandraTableGetResultsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteCassandraTable(String resourceGroupName, String accountName, String keyspaceName,
        String tableName) {
        this.serviceClient().deleteCassandraTable(resourceGroupName, accountName, keyspaceName, tableName);
    }

    public void deleteCassandraTable(String resourceGroupName, String accountName, String keyspaceName,
        String tableName, Context context) {
        this.serviceClient().deleteCassandraTable(resourceGroupName, accountName, keyspaceName, tableName, context);
    }

    public Response<ThroughputSettingsGetResults> getCassandraTableThroughputWithResponse(String resourceGroupName,
        String accountName, String keyspaceName, String tableName, Context context) {
        Response<ThroughputSettingsGetResultsInner> inner = this.serviceClient()
            .getCassandraTableThroughputWithResponse(resourceGroupName, accountName, keyspaceName, tableName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new ThroughputSettingsGetResultsImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ThroughputSettingsGetResults getCassandraTableThroughput(String resourceGroupName, String accountName,
        String keyspaceName, String tableName) {
        ThroughputSettingsGetResultsInner inner
            = this.serviceClient().getCassandraTableThroughput(resourceGroupName, accountName, keyspaceName, tableName);
        if (inner != null) {
            return new ThroughputSettingsGetResultsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ThroughputSettingsGetResults updateCassandraTableThroughput(String resourceGroupName, String accountName,
        String keyspaceName, String tableName, ThroughputSettingsUpdateParameters updateThroughputParameters) {
        ThroughputSettingsGetResultsInner inner = this.serviceClient()
            .updateCassandraTableThroughput(resourceGroupName, accountName, keyspaceName, tableName,
                updateThroughputParameters);
        if (inner != null) {
            return new ThroughputSettingsGetResultsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ThroughputSettingsGetResults updateCassandraTableThroughput(String resourceGroupName, String accountName,
        String keyspaceName, String tableName, ThroughputSettingsUpdateParameters updateThroughputParameters,
        Context context) {
        ThroughputSettingsGetResultsInner inner = this.serviceClient()
            .updateCassandraTableThroughput(resourceGroupName, accountName, keyspaceName, tableName,
                updateThroughputParameters, context);
        if (inner != null) {
            return new ThroughputSettingsGetResultsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ThroughputSettingsGetResults migrateCassandraTableToAutoscale(String resourceGroupName, String accountName,
        String keyspaceName, String tableName) {
        ThroughputSettingsGetResultsInner inner = this.serviceClient()
            .migrateCassandraTableToAutoscale(resourceGroupName, accountName, keyspaceName, tableName);
        if (inner != null) {
            return new ThroughputSettingsGetResultsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ThroughputSettingsGetResults migrateCassandraTableToAutoscale(String resourceGroupName, String accountName,
        String keyspaceName, String tableName, Context context) {
        ThroughputSettingsGetResultsInner inner = this.serviceClient()
            .migrateCassandraTableToAutoscale(resourceGroupName, accountName, keyspaceName, tableName, context);
        if (inner != null) {
            return new ThroughputSettingsGetResultsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ThroughputSettingsGetResults migrateCassandraTableToManualThroughput(String resourceGroupName,
        String accountName, String keyspaceName, String tableName) {
        ThroughputSettingsGetResultsInner inner = this.serviceClient()
            .migrateCassandraTableToManualThroughput(resourceGroupName, accountName, keyspaceName, tableName);
        if (inner != null) {
            return new ThroughputSettingsGetResultsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ThroughputSettingsGetResults migrateCassandraTableToManualThroughput(String resourceGroupName,
        String accountName, String keyspaceName, String tableName, Context context) {
        ThroughputSettingsGetResultsInner inner = this.serviceClient()
            .migrateCassandraTableToManualThroughput(resourceGroupName, accountName, keyspaceName, tableName, context);
        if (inner != null) {
            return new ThroughputSettingsGetResultsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<CassandraViewGetResults> listCassandraViews(String resourceGroupName, String accountName,
        String keyspaceName) {
        PagedIterable<CassandraViewGetResultsInner> inner
            = this.serviceClient().listCassandraViews(resourceGroupName, accountName, keyspaceName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new CassandraViewGetResultsImpl(inner1, this.manager()));
    }

    public PagedIterable<CassandraViewGetResults> listCassandraViews(String resourceGroupName, String accountName,
        String keyspaceName, Context context) {
        PagedIterable<CassandraViewGetResultsInner> inner
            = this.serviceClient().listCassandraViews(resourceGroupName, accountName, keyspaceName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new CassandraViewGetResultsImpl(inner1, this.manager()));
    }

    public Response<CassandraViewGetResults> getCassandraViewWithResponse(String resourceGroupName, String accountName,
        String keyspaceName, String viewName, Context context) {
        Response<CassandraViewGetResultsInner> inner = this.serviceClient()
            .getCassandraViewWithResponse(resourceGroupName, accountName, keyspaceName, viewName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new CassandraViewGetResultsImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public CassandraViewGetResults getCassandraView(String resourceGroupName, String accountName, String keyspaceName,
        String viewName) {
        CassandraViewGetResultsInner inner
            = this.serviceClient().getCassandraView(resourceGroupName, accountName, keyspaceName, viewName);
        if (inner != null) {
            return new CassandraViewGetResultsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteCassandraView(String resourceGroupName, String accountName, String keyspaceName,
        String viewName) {
        this.serviceClient().deleteCassandraView(resourceGroupName, accountName, keyspaceName, viewName);
    }

    public void deleteCassandraView(String resourceGroupName, String accountName, String keyspaceName, String viewName,
        Context context) {
        this.serviceClient().deleteCassandraView(resourceGroupName, accountName, keyspaceName, viewName, context);
    }

    public Response<ThroughputSettingsGetResults> getCassandraViewThroughputWithResponse(String resourceGroupName,
        String accountName, String keyspaceName, String viewName, Context context) {
        Response<ThroughputSettingsGetResultsInner> inner = this.serviceClient()
            .getCassandraViewThroughputWithResponse(resourceGroupName, accountName, keyspaceName, viewName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new ThroughputSettingsGetResultsImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ThroughputSettingsGetResults getCassandraViewThroughput(String resourceGroupName, String accountName,
        String keyspaceName, String viewName) {
        ThroughputSettingsGetResultsInner inner
            = this.serviceClient().getCassandraViewThroughput(resourceGroupName, accountName, keyspaceName, viewName);
        if (inner != null) {
            return new ThroughputSettingsGetResultsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ThroughputSettingsGetResults updateCassandraViewThroughput(String resourceGroupName, String accountName,
        String keyspaceName, String viewName, ThroughputSettingsUpdateParameters updateThroughputParameters) {
        ThroughputSettingsGetResultsInner inner = this.serviceClient()
            .updateCassandraViewThroughput(resourceGroupName, accountName, keyspaceName, viewName,
                updateThroughputParameters);
        if (inner != null) {
            return new ThroughputSettingsGetResultsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ThroughputSettingsGetResults updateCassandraViewThroughput(String resourceGroupName, String accountName,
        String keyspaceName, String viewName, ThroughputSettingsUpdateParameters updateThroughputParameters,
        Context context) {
        ThroughputSettingsGetResultsInner inner = this.serviceClient()
            .updateCassandraViewThroughput(resourceGroupName, accountName, keyspaceName, viewName,
                updateThroughputParameters, context);
        if (inner != null) {
            return new ThroughputSettingsGetResultsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ThroughputSettingsGetResults migrateCassandraViewToAutoscale(String resourceGroupName, String accountName,
        String keyspaceName, String viewName) {
        ThroughputSettingsGetResultsInner inner = this.serviceClient()
            .migrateCassandraViewToAutoscale(resourceGroupName, accountName, keyspaceName, viewName);
        if (inner != null) {
            return new ThroughputSettingsGetResultsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ThroughputSettingsGetResults migrateCassandraViewToAutoscale(String resourceGroupName, String accountName,
        String keyspaceName, String viewName, Context context) {
        ThroughputSettingsGetResultsInner inner = this.serviceClient()
            .migrateCassandraViewToAutoscale(resourceGroupName, accountName, keyspaceName, viewName, context);
        if (inner != null) {
            return new ThroughputSettingsGetResultsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ThroughputSettingsGetResults migrateCassandraViewToManualThroughput(String resourceGroupName,
        String accountName, String keyspaceName, String viewName) {
        ThroughputSettingsGetResultsInner inner = this.serviceClient()
            .migrateCassandraViewToManualThroughput(resourceGroupName, accountName, keyspaceName, viewName);
        if (inner != null) {
            return new ThroughputSettingsGetResultsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ThroughputSettingsGetResults migrateCassandraViewToManualThroughput(String resourceGroupName,
        String accountName, String keyspaceName, String viewName, Context context) {
        ThroughputSettingsGetResultsInner inner = this.serviceClient()
            .migrateCassandraViewToManualThroughput(resourceGroupName, accountName, keyspaceName, viewName, context);
        if (inner != null) {
            return new ThroughputSettingsGetResultsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<CassandraRoleDefinitionResource> getCassandraRoleDefinitionWithResponse(String resourceGroupName,
        String accountName, String roleDefinitionId, Context context) {
        Response<CassandraRoleDefinitionResourceInner> inner = this.serviceClient()
            .getCassandraRoleDefinitionWithResponse(resourceGroupName, accountName, roleDefinitionId, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new CassandraRoleDefinitionResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public CassandraRoleDefinitionResource getCassandraRoleDefinition(String resourceGroupName, String accountName,
        String roleDefinitionId) {
        CassandraRoleDefinitionResourceInner inner
            = this.serviceClient().getCassandraRoleDefinition(resourceGroupName, accountName, roleDefinitionId);
        if (inner != null) {
            return new CassandraRoleDefinitionResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteCassandraRoleDefinition(String resourceGroupName, String accountName, String roleDefinitionId) {
        this.serviceClient().deleteCassandraRoleDefinition(resourceGroupName, accountName, roleDefinitionId);
    }

    public void deleteCassandraRoleDefinition(String resourceGroupName, String accountName, String roleDefinitionId,
        Context context) {
        this.serviceClient().deleteCassandraRoleDefinition(resourceGroupName, accountName, roleDefinitionId, context);
    }

    public PagedIterable<CassandraRoleDefinitionResource> listCassandraRoleDefinitions(String resourceGroupName,
        String accountName) {
        PagedIterable<CassandraRoleDefinitionResourceInner> inner
            = this.serviceClient().listCassandraRoleDefinitions(resourceGroupName, accountName);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new CassandraRoleDefinitionResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<CassandraRoleDefinitionResource> listCassandraRoleDefinitions(String resourceGroupName,
        String accountName, Context context) {
        PagedIterable<CassandraRoleDefinitionResourceInner> inner
            = this.serviceClient().listCassandraRoleDefinitions(resourceGroupName, accountName, context);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new CassandraRoleDefinitionResourceImpl(inner1, this.manager()));
    }

    public Response<CassandraRoleAssignmentResource> getCassandraRoleAssignmentWithResponse(String resourceGroupName,
        String accountName, String roleAssignmentId, Context context) {
        Response<CassandraRoleAssignmentResourceInner> inner = this.serviceClient()
            .getCassandraRoleAssignmentWithResponse(resourceGroupName, accountName, roleAssignmentId, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new CassandraRoleAssignmentResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public CassandraRoleAssignmentResource getCassandraRoleAssignment(String resourceGroupName, String accountName,
        String roleAssignmentId) {
        CassandraRoleAssignmentResourceInner inner
            = this.serviceClient().getCassandraRoleAssignment(resourceGroupName, accountName, roleAssignmentId);
        if (inner != null) {
            return new CassandraRoleAssignmentResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteCassandraRoleAssignment(String resourceGroupName, String accountName, String roleAssignmentId) {
        this.serviceClient().deleteCassandraRoleAssignment(resourceGroupName, accountName, roleAssignmentId);
    }

    public void deleteCassandraRoleAssignment(String resourceGroupName, String accountName, String roleAssignmentId,
        Context context) {
        this.serviceClient().deleteCassandraRoleAssignment(resourceGroupName, accountName, roleAssignmentId, context);
    }

    public PagedIterable<CassandraRoleAssignmentResource> listCassandraRoleAssignments(String resourceGroupName,
        String accountName) {
        PagedIterable<CassandraRoleAssignmentResourceInner> inner
            = this.serviceClient().listCassandraRoleAssignments(resourceGroupName, accountName);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new CassandraRoleAssignmentResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<CassandraRoleAssignmentResource> listCassandraRoleAssignments(String resourceGroupName,
        String accountName, Context context) {
        PagedIterable<CassandraRoleAssignmentResourceInner> inner
            = this.serviceClient().listCassandraRoleAssignments(resourceGroupName, accountName, context);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new CassandraRoleAssignmentResourceImpl(inner1, this.manager()));
    }

    public CassandraKeyspaceGetResults getCassandraKeyspaceById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = ResourceManagerUtils.getValueFromIdByName(id, "databaseAccounts");
        if (accountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'databaseAccounts'.", id)));
        }
        String keyspaceName = ResourceManagerUtils.getValueFromIdByName(id, "cassandraKeyspaces");
        if (keyspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'cassandraKeyspaces'.", id)));
        }
        return this.getCassandraKeyspaceWithResponse(resourceGroupName, accountName, keyspaceName, Context.NONE)
            .getValue();
    }

    public Response<CassandraKeyspaceGetResults> getCassandraKeyspaceByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = ResourceManagerUtils.getValueFromIdByName(id, "databaseAccounts");
        if (accountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'databaseAccounts'.", id)));
        }
        String keyspaceName = ResourceManagerUtils.getValueFromIdByName(id, "cassandraKeyspaces");
        if (keyspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'cassandraKeyspaces'.", id)));
        }
        return this.getCassandraKeyspaceWithResponse(resourceGroupName, accountName, keyspaceName, context);
    }

    public CassandraTableGetResults getCassandraTableById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = ResourceManagerUtils.getValueFromIdByName(id, "databaseAccounts");
        if (accountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'databaseAccounts'.", id)));
        }
        String keyspaceName = ResourceManagerUtils.getValueFromIdByName(id, "cassandraKeyspaces");
        if (keyspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'cassandraKeyspaces'.", id)));
        }
        String tableName = ResourceManagerUtils.getValueFromIdByName(id, "tables");
        if (tableName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'tables'.", id)));
        }
        return this.getCassandraTableWithResponse(resourceGroupName, accountName, keyspaceName, tableName, Context.NONE)
            .getValue();
    }

    public Response<CassandraTableGetResults> getCassandraTableByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = ResourceManagerUtils.getValueFromIdByName(id, "databaseAccounts");
        if (accountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'databaseAccounts'.", id)));
        }
        String keyspaceName = ResourceManagerUtils.getValueFromIdByName(id, "cassandraKeyspaces");
        if (keyspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'cassandraKeyspaces'.", id)));
        }
        String tableName = ResourceManagerUtils.getValueFromIdByName(id, "tables");
        if (tableName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'tables'.", id)));
        }
        return this.getCassandraTableWithResponse(resourceGroupName, accountName, keyspaceName, tableName, context);
    }

    public CassandraViewGetResults getCassandraViewById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = ResourceManagerUtils.getValueFromIdByName(id, "databaseAccounts");
        if (accountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'databaseAccounts'.", id)));
        }
        String keyspaceName = ResourceManagerUtils.getValueFromIdByName(id, "cassandraKeyspaces");
        if (keyspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'cassandraKeyspaces'.", id)));
        }
        String viewName = ResourceManagerUtils.getValueFromIdByName(id, "views");
        if (viewName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'views'.", id)));
        }
        return this.getCassandraViewWithResponse(resourceGroupName, accountName, keyspaceName, viewName, Context.NONE)
            .getValue();
    }

    public Response<CassandraViewGetResults> getCassandraViewByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = ResourceManagerUtils.getValueFromIdByName(id, "databaseAccounts");
        if (accountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'databaseAccounts'.", id)));
        }
        String keyspaceName = ResourceManagerUtils.getValueFromIdByName(id, "cassandraKeyspaces");
        if (keyspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'cassandraKeyspaces'.", id)));
        }
        String viewName = ResourceManagerUtils.getValueFromIdByName(id, "views");
        if (viewName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'views'.", id)));
        }
        return this.getCassandraViewWithResponse(resourceGroupName, accountName, keyspaceName, viewName, context);
    }

    public CassandraRoleDefinitionResource getCassandraRoleDefinitionById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = ResourceManagerUtils.getValueFromIdByName(id, "databaseAccounts");
        if (accountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'databaseAccounts'.", id)));
        }
        String roleDefinitionId = ResourceManagerUtils.getValueFromIdByName(id, "cassandraRoleDefinitions");
        if (roleDefinitionId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'cassandraRoleDefinitions'.", id)));
        }
        return this
            .getCassandraRoleDefinitionWithResponse(resourceGroupName, accountName, roleDefinitionId, Context.NONE)
            .getValue();
    }

    public Response<CassandraRoleDefinitionResource> getCassandraRoleDefinitionByIdWithResponse(String id,
        Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = ResourceManagerUtils.getValueFromIdByName(id, "databaseAccounts");
        if (accountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'databaseAccounts'.", id)));
        }
        String roleDefinitionId = ResourceManagerUtils.getValueFromIdByName(id, "cassandraRoleDefinitions");
        if (roleDefinitionId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'cassandraRoleDefinitions'.", id)));
        }
        return this.getCassandraRoleDefinitionWithResponse(resourceGroupName, accountName, roleDefinitionId, context);
    }

    public CassandraRoleAssignmentResource getCassandraRoleAssignmentById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = ResourceManagerUtils.getValueFromIdByName(id, "databaseAccounts");
        if (accountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'databaseAccounts'.", id)));
        }
        String roleAssignmentId = ResourceManagerUtils.getValueFromIdByName(id, "cassandraRoleAssignments");
        if (roleAssignmentId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'cassandraRoleAssignments'.", id)));
        }
        return this
            .getCassandraRoleAssignmentWithResponse(resourceGroupName, accountName, roleAssignmentId, Context.NONE)
            .getValue();
    }

    public Response<CassandraRoleAssignmentResource> getCassandraRoleAssignmentByIdWithResponse(String id,
        Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = ResourceManagerUtils.getValueFromIdByName(id, "databaseAccounts");
        if (accountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'databaseAccounts'.", id)));
        }
        String roleAssignmentId = ResourceManagerUtils.getValueFromIdByName(id, "cassandraRoleAssignments");
        if (roleAssignmentId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'cassandraRoleAssignments'.", id)));
        }
        return this.getCassandraRoleAssignmentWithResponse(resourceGroupName, accountName, roleAssignmentId, context);
    }

    public void deleteCassandraKeyspaceById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = ResourceManagerUtils.getValueFromIdByName(id, "databaseAccounts");
        if (accountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'databaseAccounts'.", id)));
        }
        String keyspaceName = ResourceManagerUtils.getValueFromIdByName(id, "cassandraKeyspaces");
        if (keyspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'cassandraKeyspaces'.", id)));
        }
        this.deleteCassandraKeyspace(resourceGroupName, accountName, keyspaceName, Context.NONE);
    }

    public void deleteCassandraKeyspaceByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = ResourceManagerUtils.getValueFromIdByName(id, "databaseAccounts");
        if (accountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'databaseAccounts'.", id)));
        }
        String keyspaceName = ResourceManagerUtils.getValueFromIdByName(id, "cassandraKeyspaces");
        if (keyspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'cassandraKeyspaces'.", id)));
        }
        this.deleteCassandraKeyspace(resourceGroupName, accountName, keyspaceName, context);
    }

    public void deleteCassandraTableById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = ResourceManagerUtils.getValueFromIdByName(id, "databaseAccounts");
        if (accountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'databaseAccounts'.", id)));
        }
        String keyspaceName = ResourceManagerUtils.getValueFromIdByName(id, "cassandraKeyspaces");
        if (keyspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'cassandraKeyspaces'.", id)));
        }
        String tableName = ResourceManagerUtils.getValueFromIdByName(id, "tables");
        if (tableName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'tables'.", id)));
        }
        this.deleteCassandraTable(resourceGroupName, accountName, keyspaceName, tableName, Context.NONE);
    }

    public void deleteCassandraTableByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = ResourceManagerUtils.getValueFromIdByName(id, "databaseAccounts");
        if (accountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'databaseAccounts'.", id)));
        }
        String keyspaceName = ResourceManagerUtils.getValueFromIdByName(id, "cassandraKeyspaces");
        if (keyspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'cassandraKeyspaces'.", id)));
        }
        String tableName = ResourceManagerUtils.getValueFromIdByName(id, "tables");
        if (tableName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'tables'.", id)));
        }
        this.deleteCassandraTable(resourceGroupName, accountName, keyspaceName, tableName, context);
    }

    public void deleteCassandraViewById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = ResourceManagerUtils.getValueFromIdByName(id, "databaseAccounts");
        if (accountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'databaseAccounts'.", id)));
        }
        String keyspaceName = ResourceManagerUtils.getValueFromIdByName(id, "cassandraKeyspaces");
        if (keyspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'cassandraKeyspaces'.", id)));
        }
        String viewName = ResourceManagerUtils.getValueFromIdByName(id, "views");
        if (viewName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'views'.", id)));
        }
        this.deleteCassandraView(resourceGroupName, accountName, keyspaceName, viewName, Context.NONE);
    }

    public void deleteCassandraViewByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = ResourceManagerUtils.getValueFromIdByName(id, "databaseAccounts");
        if (accountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'databaseAccounts'.", id)));
        }
        String keyspaceName = ResourceManagerUtils.getValueFromIdByName(id, "cassandraKeyspaces");
        if (keyspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'cassandraKeyspaces'.", id)));
        }
        String viewName = ResourceManagerUtils.getValueFromIdByName(id, "views");
        if (viewName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'views'.", id)));
        }
        this.deleteCassandraView(resourceGroupName, accountName, keyspaceName, viewName, context);
    }

    public void deleteCassandraRoleDefinitionById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = ResourceManagerUtils.getValueFromIdByName(id, "databaseAccounts");
        if (accountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'databaseAccounts'.", id)));
        }
        String roleDefinitionId = ResourceManagerUtils.getValueFromIdByName(id, "cassandraRoleDefinitions");
        if (roleDefinitionId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'cassandraRoleDefinitions'.", id)));
        }
        this.deleteCassandraRoleDefinition(resourceGroupName, accountName, roleDefinitionId, Context.NONE);
    }

    public void deleteCassandraRoleDefinitionByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = ResourceManagerUtils.getValueFromIdByName(id, "databaseAccounts");
        if (accountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'databaseAccounts'.", id)));
        }
        String roleDefinitionId = ResourceManagerUtils.getValueFromIdByName(id, "cassandraRoleDefinitions");
        if (roleDefinitionId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'cassandraRoleDefinitions'.", id)));
        }
        this.deleteCassandraRoleDefinition(resourceGroupName, accountName, roleDefinitionId, context);
    }

    public void deleteCassandraRoleAssignmentById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = ResourceManagerUtils.getValueFromIdByName(id, "databaseAccounts");
        if (accountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'databaseAccounts'.", id)));
        }
        String roleAssignmentId = ResourceManagerUtils.getValueFromIdByName(id, "cassandraRoleAssignments");
        if (roleAssignmentId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'cassandraRoleAssignments'.", id)));
        }
        this.deleteCassandraRoleAssignment(resourceGroupName, accountName, roleAssignmentId, Context.NONE);
    }

    public void deleteCassandraRoleAssignmentByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = ResourceManagerUtils.getValueFromIdByName(id, "databaseAccounts");
        if (accountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'databaseAccounts'.", id)));
        }
        String roleAssignmentId = ResourceManagerUtils.getValueFromIdByName(id, "cassandraRoleAssignments");
        if (roleAssignmentId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'cassandraRoleAssignments'.", id)));
        }
        this.deleteCassandraRoleAssignment(resourceGroupName, accountName, roleAssignmentId, context);
    }

    private CassandraResourcesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.cosmos.generated.CosmosDBManager manager() {
        return this.serviceManager;
    }

    public CassandraKeyspaceGetResultsImpl defineUpdateCassandraKeyspace(String name) {
        return new CassandraKeyspaceGetResultsImpl(name, this.manager());
    }

    public CassandraTableGetResultsImpl defineUpdateCassandraTable(String name) {
        return new CassandraTableGetResultsImpl(name, this.manager());
    }

    public CassandraViewGetResultsImpl defineUpdateCassandraView(String name) {
        return new CassandraViewGetResultsImpl(name, this.manager());
    }

    public CassandraRoleDefinitionResourceImpl defineUpdateCassandraRoleDefinition(String name) {
        return new CassandraRoleDefinitionResourceImpl(name, this.manager());
    }

    public CassandraRoleAssignmentResourceImpl defineUpdateCassandraRoleAssignment(String name) {
        return new CassandraRoleAssignmentResourceImpl(name, this.manager());
    }
}
