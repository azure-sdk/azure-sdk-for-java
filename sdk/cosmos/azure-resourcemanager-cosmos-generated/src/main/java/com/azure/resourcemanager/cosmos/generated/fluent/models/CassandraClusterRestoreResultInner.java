// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.cosmos.generated.models.CassandraClusterNodeRestoreResult;
import java.io.IOException;
import java.util.List;

/**
 * The CassandraClusterRestoreResult model.
 */
@Fluent
public final class CassandraClusterRestoreResultInner implements JsonSerializable<CassandraClusterRestoreResultInner> {
    /*
     * The id of the restore job.
     */
    private String restoreId;

    /*
     * The status of the command.
     */
    private String state;

    /*
     * Backup Id to restore.
     */
    private String backupId;

    /*
     * Info on each node's restore.
     */
    private List<CassandraClusterNodeRestoreResult> nodes;

    /**
     * Creates an instance of CassandraClusterRestoreResultInner class.
     */
    public CassandraClusterRestoreResultInner() {
    }

    /**
     * Get the restoreId property: The id of the restore job.
     * 
     * @return the restoreId value.
     */
    public String restoreId() {
        return this.restoreId;
    }

    /**
     * Set the restoreId property: The id of the restore job.
     * 
     * @param restoreId the restoreId value to set.
     * @return the CassandraClusterRestoreResultInner object itself.
     */
    public CassandraClusterRestoreResultInner withRestoreId(String restoreId) {
        this.restoreId = restoreId;
        return this;
    }

    /**
     * Get the state property: The status of the command.
     * 
     * @return the state value.
     */
    public String state() {
        return this.state;
    }

    /**
     * Set the state property: The status of the command.
     * 
     * @param state the state value to set.
     * @return the CassandraClusterRestoreResultInner object itself.
     */
    public CassandraClusterRestoreResultInner withState(String state) {
        this.state = state;
        return this;
    }

    /**
     * Get the backupId property: Backup Id to restore.
     * 
     * @return the backupId value.
     */
    public String backupId() {
        return this.backupId;
    }

    /**
     * Set the backupId property: Backup Id to restore.
     * 
     * @param backupId the backupId value to set.
     * @return the CassandraClusterRestoreResultInner object itself.
     */
    public CassandraClusterRestoreResultInner withBackupId(String backupId) {
        this.backupId = backupId;
        return this;
    }

    /**
     * Get the nodes property: Info on each node's restore.
     * 
     * @return the nodes value.
     */
    public List<CassandraClusterNodeRestoreResult> nodes() {
        return this.nodes;
    }

    /**
     * Set the nodes property: Info on each node's restore.
     * 
     * @param nodes the nodes value to set.
     * @return the CassandraClusterRestoreResultInner object itself.
     */
    public CassandraClusterRestoreResultInner withNodes(List<CassandraClusterNodeRestoreResult> nodes) {
        this.nodes = nodes;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (nodes() != null) {
            nodes().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("restoreId", this.restoreId);
        jsonWriter.writeStringField("state", this.state);
        jsonWriter.writeStringField("backupId", this.backupId);
        jsonWriter.writeArrayField("nodes", this.nodes, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CassandraClusterRestoreResultInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CassandraClusterRestoreResultInner if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the CassandraClusterRestoreResultInner.
     */
    public static CassandraClusterRestoreResultInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CassandraClusterRestoreResultInner deserializedCassandraClusterRestoreResultInner
                = new CassandraClusterRestoreResultInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("restoreId".equals(fieldName)) {
                    deserializedCassandraClusterRestoreResultInner.restoreId = reader.getString();
                } else if ("state".equals(fieldName)) {
                    deserializedCassandraClusterRestoreResultInner.state = reader.getString();
                } else if ("backupId".equals(fieldName)) {
                    deserializedCassandraClusterRestoreResultInner.backupId = reader.getString();
                } else if ("nodes".equals(fieldName)) {
                    List<CassandraClusterNodeRestoreResult> nodes
                        = reader.readArray(reader1 -> CassandraClusterNodeRestoreResult.fromJson(reader1));
                    deserializedCassandraClusterRestoreResultInner.nodes = nodes;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCassandraClusterRestoreResultInner;
        });
    }
}
