// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.exception.ManagementError;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * The properties of a Copy Job.
 */
@Fluent
public final class CopyJobProperties implements JsonSerializable<CopyJobProperties> {
    /*
     * Job Properties
     */
    private BaseCopyJobProperties jobProperties;

    /*
     * Job Status
     */
    private CopyJobStatus status;

    /*
     * Processed Count
     */
    private Long processedCount;

    /*
     * Total Count
     */
    private Long totalCount;

    /*
     * Last Updated Time (ISO-8601 format)
     */
    private OffsetDateTime lastUpdatedUtcTime;

    /*
     * Worker count
     */
    private Integer workerCount;

    /*
     * Error response for Faulted job
     */
    private ManagementError error;

    /*
     * Total Duration of Job
     */
    private String duration;

    /*
     * Mode of job execution
     */
    private CopyJobMode mode;

    /**
     * Creates an instance of CopyJobProperties class.
     */
    public CopyJobProperties() {
    }

    /**
     * Get the jobProperties property: Job Properties.
     * 
     * @return the jobProperties value.
     */
    public BaseCopyJobProperties jobProperties() {
        return this.jobProperties;
    }

    /**
     * Set the jobProperties property: Job Properties.
     * 
     * @param jobProperties the jobProperties value to set.
     * @return the CopyJobProperties object itself.
     */
    public CopyJobProperties withJobProperties(BaseCopyJobProperties jobProperties) {
        this.jobProperties = jobProperties;
        return this;
    }

    /**
     * Get the status property: Job Status.
     * 
     * @return the status value.
     */
    public CopyJobStatus status() {
        return this.status;
    }

    /**
     * Get the processedCount property: Processed Count.
     * 
     * @return the processedCount value.
     */
    public Long processedCount() {
        return this.processedCount;
    }

    /**
     * Get the totalCount property: Total Count.
     * 
     * @return the totalCount value.
     */
    public Long totalCount() {
        return this.totalCount;
    }

    /**
     * Get the lastUpdatedUtcTime property: Last Updated Time (ISO-8601 format).
     * 
     * @return the lastUpdatedUtcTime value.
     */
    public OffsetDateTime lastUpdatedUtcTime() {
        return this.lastUpdatedUtcTime;
    }

    /**
     * Get the workerCount property: Worker count.
     * 
     * @return the workerCount value.
     */
    public Integer workerCount() {
        return this.workerCount;
    }

    /**
     * Set the workerCount property: Worker count.
     * 
     * @param workerCount the workerCount value to set.
     * @return the CopyJobProperties object itself.
     */
    public CopyJobProperties withWorkerCount(Integer workerCount) {
        this.workerCount = workerCount;
        return this;
    }

    /**
     * Get the error property: Error response for Faulted job.
     * 
     * @return the error value.
     */
    public ManagementError error() {
        return this.error;
    }

    /**
     * Get the duration property: Total Duration of Job.
     * 
     * @return the duration value.
     */
    public String duration() {
        return this.duration;
    }

    /**
     * Get the mode property: Mode of job execution.
     * 
     * @return the mode value.
     */
    public CopyJobMode mode() {
        return this.mode;
    }

    /**
     * Set the mode property: Mode of job execution.
     * 
     * @param mode the mode value to set.
     * @return the CopyJobProperties object itself.
     */
    public CopyJobProperties withMode(CopyJobMode mode) {
        this.mode = mode;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (jobProperties() == null) {
            throw LOGGER.atError()
                .log(
                    new IllegalArgumentException("Missing required property jobProperties in model CopyJobProperties"));
        } else {
            jobProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(CopyJobProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("jobProperties", this.jobProperties);
        jsonWriter.writeNumberField("workerCount", this.workerCount);
        jsonWriter.writeStringField("mode", this.mode == null ? null : this.mode.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CopyJobProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CopyJobProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CopyJobProperties.
     */
    public static CopyJobProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CopyJobProperties deserializedCopyJobProperties = new CopyJobProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("jobProperties".equals(fieldName)) {
                    deserializedCopyJobProperties.jobProperties = BaseCopyJobProperties.fromJson(reader);
                } else if ("status".equals(fieldName)) {
                    deserializedCopyJobProperties.status = CopyJobStatus.fromString(reader.getString());
                } else if ("processedCount".equals(fieldName)) {
                    deserializedCopyJobProperties.processedCount = reader.getNullable(JsonReader::getLong);
                } else if ("totalCount".equals(fieldName)) {
                    deserializedCopyJobProperties.totalCount = reader.getNullable(JsonReader::getLong);
                } else if ("lastUpdatedUtcTime".equals(fieldName)) {
                    deserializedCopyJobProperties.lastUpdatedUtcTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("workerCount".equals(fieldName)) {
                    deserializedCopyJobProperties.workerCount = reader.getNullable(JsonReader::getInt);
                } else if ("error".equals(fieldName)) {
                    deserializedCopyJobProperties.error = ManagementError.fromJson(reader);
                } else if ("duration".equals(fieldName)) {
                    deserializedCopyJobProperties.duration = reader.getString();
                } else if ("mode".equals(fieldName)) {
                    deserializedCopyJobProperties.mode = CopyJobMode.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCopyJobProperties;
        });
    }
}
