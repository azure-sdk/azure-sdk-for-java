// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.generated.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.cosmos.generated.fluent.MongoMIResourcesClient;
import com.azure.resourcemanager.cosmos.generated.fluent.models.MongoMIRoleAssignmentResourceInner;
import com.azure.resourcemanager.cosmos.generated.fluent.models.MongoMIRoleDefinitionResourceInner;
import com.azure.resourcemanager.cosmos.generated.models.MongoMIRoleAssignmentListResult;
import com.azure.resourcemanager.cosmos.generated.models.MongoMIRoleDefinitionListResult;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in MongoMIResourcesClient.
 */
public final class MongoMIResourcesClientImpl implements MongoMIResourcesClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final MongoMIResourcesService service;

    /**
     * The service client containing this operation class.
     */
    private final CosmosDBManagementClientImpl client;

    /**
     * Initializes an instance of MongoMIResourcesClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    MongoMIResourcesClientImpl(CosmosDBManagementClientImpl client) {
        this.service
            = RestProxy.create(MongoMIResourcesService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for CosmosDBManagementClientMongoMIResources to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "CosmosDBManagementCl")
    public interface MongoMIResourcesService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongoMIRoleDefinitions/{roleDefinitionId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<MongoMIRoleDefinitionResourceInner>> getMongoMIRoleDefinition(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("accountName") String accountName,
            @PathParam("roleDefinitionId") String roleDefinitionId, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongoMIRoleDefinitions/{roleDefinitionId}")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createUpdateMongoMIRoleDefinition(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("accountName") String accountName,
            @PathParam("roleDefinitionId") String roleDefinitionId, @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") MongoMIRoleDefinitionResourceInner createUpdateMongoMIRoleDefinitionParameters,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongoMIRoleDefinitions/{roleDefinitionId}")
        @ExpectedResponses({ 200, 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> deleteMongoMIRoleDefinition(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("accountName") String accountName,
            @PathParam("roleDefinitionId") String roleDefinitionId, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongoMIRoleDefinitions")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<MongoMIRoleDefinitionListResult>> listMongoMIRoleDefinitions(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("accountName") String accountName,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongoMIRoleAssignments/{roleAssignmentId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<MongoMIRoleAssignmentResourceInner>> getMongoMIRoleAssignment(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("accountName") String accountName,
            @PathParam("roleAssignmentId") String roleAssignmentId, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongoMIRoleAssignments/{roleAssignmentId}")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createUpdateMongoMIRoleAssignment(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("accountName") String accountName,
            @PathParam("roleAssignmentId") String roleAssignmentId, @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") MongoMIRoleAssignmentResourceInner createUpdateMongoMIRoleAssignmentParameters,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongoMIRoleAssignments/{roleAssignmentId}")
        @ExpectedResponses({ 200, 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> deleteMongoMIRoleAssignment(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("accountName") String accountName,
            @PathParam("roleAssignmentId") String roleAssignmentId, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongoMIRoleAssignments")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<MongoMIRoleAssignmentListResult>> listMongoMIRoleAssignments(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("accountName") String accountName,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Retrieves the properties of an existing Azure Cosmos DB MongoMI Role Definition with the given Id.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param roleDefinitionId The GUID for the Role Definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return parameters to create and update an Azure Cosmos DB MongoMI Role Definition along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<MongoMIRoleDefinitionResourceInner>> getMongoMIRoleDefinitionWithResponseAsync(
        String resourceGroupName, String accountName, String roleDefinitionId) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (accountName == null) {
            return Mono.error(new IllegalArgumentException("Parameter accountName is required and cannot be null."));
        }
        if (roleDefinitionId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter roleDefinitionId is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.getMongoMIRoleDefinition(this.client.getEndpoint(), this.client.getSubscriptionId(),
                    resourceGroupName, accountName, roleDefinitionId, this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Retrieves the properties of an existing Azure Cosmos DB MongoMI Role Definition with the given Id.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param roleDefinitionId The GUID for the Role Definition.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return parameters to create and update an Azure Cosmos DB MongoMI Role Definition along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<MongoMIRoleDefinitionResourceInner>> getMongoMIRoleDefinitionWithResponseAsync(
        String resourceGroupName, String accountName, String roleDefinitionId, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (accountName == null) {
            return Mono.error(new IllegalArgumentException("Parameter accountName is required and cannot be null."));
        }
        if (roleDefinitionId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter roleDefinitionId is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.getMongoMIRoleDefinition(this.client.getEndpoint(), this.client.getSubscriptionId(),
            resourceGroupName, accountName, roleDefinitionId, this.client.getApiVersion(), accept, context);
    }

    /**
     * Retrieves the properties of an existing Azure Cosmos DB MongoMI Role Definition with the given Id.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param roleDefinitionId The GUID for the Role Definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return parameters to create and update an Azure Cosmos DB MongoMI Role Definition on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<MongoMIRoleDefinitionResourceInner> getMongoMIRoleDefinitionAsync(String resourceGroupName,
        String accountName, String roleDefinitionId) {
        return getMongoMIRoleDefinitionWithResponseAsync(resourceGroupName, accountName, roleDefinitionId)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Retrieves the properties of an existing Azure Cosmos DB MongoMI Role Definition with the given Id.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param roleDefinitionId The GUID for the Role Definition.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return parameters to create and update an Azure Cosmos DB MongoMI Role Definition along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<MongoMIRoleDefinitionResourceInner> getMongoMIRoleDefinitionWithResponse(String resourceGroupName,
        String accountName, String roleDefinitionId, Context context) {
        return getMongoMIRoleDefinitionWithResponseAsync(resourceGroupName, accountName, roleDefinitionId, context)
            .block();
    }

    /**
     * Retrieves the properties of an existing Azure Cosmos DB MongoMI Role Definition with the given Id.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param roleDefinitionId The GUID for the Role Definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return parameters to create and update an Azure Cosmos DB MongoMI Role Definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MongoMIRoleDefinitionResourceInner getMongoMIRoleDefinition(String resourceGroupName, String accountName,
        String roleDefinitionId) {
        return getMongoMIRoleDefinitionWithResponse(resourceGroupName, accountName, roleDefinitionId, Context.NONE)
            .getValue();
    }

    /**
     * Creates or updates an Azure Cosmos DB MongoMI Role Definition.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param roleDefinitionId The GUID for the Role Definition.
     * @param createUpdateMongoMIRoleDefinitionParameters The properties required to create or update a Role Definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return parameters to create and update an Azure Cosmos DB MongoMI Role Definition along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createUpdateMongoMIRoleDefinitionWithResponseAsync(
        String resourceGroupName, String accountName, String roleDefinitionId,
        MongoMIRoleDefinitionResourceInner createUpdateMongoMIRoleDefinitionParameters) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (accountName == null) {
            return Mono.error(new IllegalArgumentException("Parameter accountName is required and cannot be null."));
        }
        if (roleDefinitionId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter roleDefinitionId is required and cannot be null."));
        }
        if (createUpdateMongoMIRoleDefinitionParameters == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter createUpdateMongoMIRoleDefinitionParameters is required and cannot be null."));
        } else {
            createUpdateMongoMIRoleDefinitionParameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.createUpdateMongoMIRoleDefinition(this.client.getEndpoint(),
                this.client.getSubscriptionId(), resourceGroupName, accountName, roleDefinitionId,
                this.client.getApiVersion(), createUpdateMongoMIRoleDefinitionParameters, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Creates or updates an Azure Cosmos DB MongoMI Role Definition.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param roleDefinitionId The GUID for the Role Definition.
     * @param createUpdateMongoMIRoleDefinitionParameters The properties required to create or update a Role Definition.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return parameters to create and update an Azure Cosmos DB MongoMI Role Definition along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createUpdateMongoMIRoleDefinitionWithResponseAsync(
        String resourceGroupName, String accountName, String roleDefinitionId,
        MongoMIRoleDefinitionResourceInner createUpdateMongoMIRoleDefinitionParameters, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (accountName == null) {
            return Mono.error(new IllegalArgumentException("Parameter accountName is required and cannot be null."));
        }
        if (roleDefinitionId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter roleDefinitionId is required and cannot be null."));
        }
        if (createUpdateMongoMIRoleDefinitionParameters == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter createUpdateMongoMIRoleDefinitionParameters is required and cannot be null."));
        } else {
            createUpdateMongoMIRoleDefinitionParameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.createUpdateMongoMIRoleDefinition(this.client.getEndpoint(), this.client.getSubscriptionId(),
            resourceGroupName, accountName, roleDefinitionId, this.client.getApiVersion(),
            createUpdateMongoMIRoleDefinitionParameters, accept, context);
    }

    /**
     * Creates or updates an Azure Cosmos DB MongoMI Role Definition.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param roleDefinitionId The GUID for the Role Definition.
     * @param createUpdateMongoMIRoleDefinitionParameters The properties required to create or update a Role Definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of parameters to create and update an Azure Cosmos DB MongoMI Role
     * Definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<MongoMIRoleDefinitionResourceInner>, MongoMIRoleDefinitionResourceInner>
        beginCreateUpdateMongoMIRoleDefinitionAsync(String resourceGroupName, String accountName,
            String roleDefinitionId, MongoMIRoleDefinitionResourceInner createUpdateMongoMIRoleDefinitionParameters) {
        Mono<Response<Flux<ByteBuffer>>> mono = createUpdateMongoMIRoleDefinitionWithResponseAsync(resourceGroupName,
            accountName, roleDefinitionId, createUpdateMongoMIRoleDefinitionParameters);
        return this.client.<MongoMIRoleDefinitionResourceInner, MongoMIRoleDefinitionResourceInner>getLroResult(mono,
            this.client.getHttpPipeline(), MongoMIRoleDefinitionResourceInner.class,
            MongoMIRoleDefinitionResourceInner.class, this.client.getContext());
    }

    /**
     * Creates or updates an Azure Cosmos DB MongoMI Role Definition.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param roleDefinitionId The GUID for the Role Definition.
     * @param createUpdateMongoMIRoleDefinitionParameters The properties required to create or update a Role Definition.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of parameters to create and update an Azure Cosmos DB MongoMI Role
     * Definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<MongoMIRoleDefinitionResourceInner>, MongoMIRoleDefinitionResourceInner>
        beginCreateUpdateMongoMIRoleDefinitionAsync(String resourceGroupName, String accountName,
            String roleDefinitionId, MongoMIRoleDefinitionResourceInner createUpdateMongoMIRoleDefinitionParameters,
            Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = createUpdateMongoMIRoleDefinitionWithResponseAsync(resourceGroupName,
            accountName, roleDefinitionId, createUpdateMongoMIRoleDefinitionParameters, context);
        return this.client.<MongoMIRoleDefinitionResourceInner, MongoMIRoleDefinitionResourceInner>getLroResult(mono,
            this.client.getHttpPipeline(), MongoMIRoleDefinitionResourceInner.class,
            MongoMIRoleDefinitionResourceInner.class, context);
    }

    /**
     * Creates or updates an Azure Cosmos DB MongoMI Role Definition.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param roleDefinitionId The GUID for the Role Definition.
     * @param createUpdateMongoMIRoleDefinitionParameters The properties required to create or update a Role Definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of parameters to create and update an Azure Cosmos DB MongoMI Role
     * Definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<MongoMIRoleDefinitionResourceInner>, MongoMIRoleDefinitionResourceInner>
        beginCreateUpdateMongoMIRoleDefinition(String resourceGroupName, String accountName, String roleDefinitionId,
            MongoMIRoleDefinitionResourceInner createUpdateMongoMIRoleDefinitionParameters) {
        return this
            .beginCreateUpdateMongoMIRoleDefinitionAsync(resourceGroupName, accountName, roleDefinitionId,
                createUpdateMongoMIRoleDefinitionParameters)
            .getSyncPoller();
    }

    /**
     * Creates or updates an Azure Cosmos DB MongoMI Role Definition.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param roleDefinitionId The GUID for the Role Definition.
     * @param createUpdateMongoMIRoleDefinitionParameters The properties required to create or update a Role Definition.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of parameters to create and update an Azure Cosmos DB MongoMI Role
     * Definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<MongoMIRoleDefinitionResourceInner>, MongoMIRoleDefinitionResourceInner>
        beginCreateUpdateMongoMIRoleDefinition(String resourceGroupName, String accountName, String roleDefinitionId,
            MongoMIRoleDefinitionResourceInner createUpdateMongoMIRoleDefinitionParameters, Context context) {
        return this
            .beginCreateUpdateMongoMIRoleDefinitionAsync(resourceGroupName, accountName, roleDefinitionId,
                createUpdateMongoMIRoleDefinitionParameters, context)
            .getSyncPoller();
    }

    /**
     * Creates or updates an Azure Cosmos DB MongoMI Role Definition.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param roleDefinitionId The GUID for the Role Definition.
     * @param createUpdateMongoMIRoleDefinitionParameters The properties required to create or update a Role Definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return parameters to create and update an Azure Cosmos DB MongoMI Role Definition on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<MongoMIRoleDefinitionResourceInner> createUpdateMongoMIRoleDefinitionAsync(String resourceGroupName,
        String accountName, String roleDefinitionId,
        MongoMIRoleDefinitionResourceInner createUpdateMongoMIRoleDefinitionParameters) {
        return beginCreateUpdateMongoMIRoleDefinitionAsync(resourceGroupName, accountName, roleDefinitionId,
            createUpdateMongoMIRoleDefinitionParameters).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates or updates an Azure Cosmos DB MongoMI Role Definition.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param roleDefinitionId The GUID for the Role Definition.
     * @param createUpdateMongoMIRoleDefinitionParameters The properties required to create or update a Role Definition.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return parameters to create and update an Azure Cosmos DB MongoMI Role Definition on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<MongoMIRoleDefinitionResourceInner> createUpdateMongoMIRoleDefinitionAsync(String resourceGroupName,
        String accountName, String roleDefinitionId,
        MongoMIRoleDefinitionResourceInner createUpdateMongoMIRoleDefinitionParameters, Context context) {
        return beginCreateUpdateMongoMIRoleDefinitionAsync(resourceGroupName, accountName, roleDefinitionId,
            createUpdateMongoMIRoleDefinitionParameters, context).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates or updates an Azure Cosmos DB MongoMI Role Definition.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param roleDefinitionId The GUID for the Role Definition.
     * @param createUpdateMongoMIRoleDefinitionParameters The properties required to create or update a Role Definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return parameters to create and update an Azure Cosmos DB MongoMI Role Definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MongoMIRoleDefinitionResourceInner createUpdateMongoMIRoleDefinition(String resourceGroupName,
        String accountName, String roleDefinitionId,
        MongoMIRoleDefinitionResourceInner createUpdateMongoMIRoleDefinitionParameters) {
        return createUpdateMongoMIRoleDefinitionAsync(resourceGroupName, accountName, roleDefinitionId,
            createUpdateMongoMIRoleDefinitionParameters).block();
    }

    /**
     * Creates or updates an Azure Cosmos DB MongoMI Role Definition.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param roleDefinitionId The GUID for the Role Definition.
     * @param createUpdateMongoMIRoleDefinitionParameters The properties required to create or update a Role Definition.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return parameters to create and update an Azure Cosmos DB MongoMI Role Definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MongoMIRoleDefinitionResourceInner createUpdateMongoMIRoleDefinition(String resourceGroupName,
        String accountName, String roleDefinitionId,
        MongoMIRoleDefinitionResourceInner createUpdateMongoMIRoleDefinitionParameters, Context context) {
        return createUpdateMongoMIRoleDefinitionAsync(resourceGroupName, accountName, roleDefinitionId,
            createUpdateMongoMIRoleDefinitionParameters, context).block();
    }

    /**
     * Deletes an existing Azure Cosmos DB MongoMI Role Definition.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param roleDefinitionId The GUID for the Role Definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteMongoMIRoleDefinitionWithResponseAsync(String resourceGroupName,
        String accountName, String roleDefinitionId) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (accountName == null) {
            return Mono.error(new IllegalArgumentException("Parameter accountName is required and cannot be null."));
        }
        if (roleDefinitionId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter roleDefinitionId is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.deleteMongoMIRoleDefinition(this.client.getEndpoint(),
                this.client.getSubscriptionId(), resourceGroupName, accountName, roleDefinitionId,
                this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Deletes an existing Azure Cosmos DB MongoMI Role Definition.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param roleDefinitionId The GUID for the Role Definition.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteMongoMIRoleDefinitionWithResponseAsync(String resourceGroupName,
        String accountName, String roleDefinitionId, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (accountName == null) {
            return Mono.error(new IllegalArgumentException("Parameter accountName is required and cannot be null."));
        }
        if (roleDefinitionId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter roleDefinitionId is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.deleteMongoMIRoleDefinition(this.client.getEndpoint(), this.client.getSubscriptionId(),
            resourceGroupName, accountName, roleDefinitionId, this.client.getApiVersion(), accept, context);
    }

    /**
     * Deletes an existing Azure Cosmos DB MongoMI Role Definition.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param roleDefinitionId The GUID for the Role Definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteMongoMIRoleDefinitionAsync(String resourceGroupName,
        String accountName, String roleDefinitionId) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = deleteMongoMIRoleDefinitionWithResponseAsync(resourceGroupName, accountName, roleDefinitionId);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            this.client.getContext());
    }

    /**
     * Deletes an existing Azure Cosmos DB MongoMI Role Definition.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param roleDefinitionId The GUID for the Role Definition.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteMongoMIRoleDefinitionAsync(String resourceGroupName,
        String accountName, String roleDefinitionId, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono
            = deleteMongoMIRoleDefinitionWithResponseAsync(resourceGroupName, accountName, roleDefinitionId, context);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            context);
    }

    /**
     * Deletes an existing Azure Cosmos DB MongoMI Role Definition.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param roleDefinitionId The GUID for the Role Definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDeleteMongoMIRoleDefinition(String resourceGroupName,
        String accountName, String roleDefinitionId) {
        return this.beginDeleteMongoMIRoleDefinitionAsync(resourceGroupName, accountName, roleDefinitionId)
            .getSyncPoller();
    }

    /**
     * Deletes an existing Azure Cosmos DB MongoMI Role Definition.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param roleDefinitionId The GUID for the Role Definition.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDeleteMongoMIRoleDefinition(String resourceGroupName,
        String accountName, String roleDefinitionId, Context context) {
        return this.beginDeleteMongoMIRoleDefinitionAsync(resourceGroupName, accountName, roleDefinitionId, context)
            .getSyncPoller();
    }

    /**
     * Deletes an existing Azure Cosmos DB MongoMI Role Definition.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param roleDefinitionId The GUID for the Role Definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteMongoMIRoleDefinitionAsync(String resourceGroupName, String accountName,
        String roleDefinitionId) {
        return beginDeleteMongoMIRoleDefinitionAsync(resourceGroupName, accountName, roleDefinitionId).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes an existing Azure Cosmos DB MongoMI Role Definition.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param roleDefinitionId The GUID for the Role Definition.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteMongoMIRoleDefinitionAsync(String resourceGroupName, String accountName,
        String roleDefinitionId, Context context) {
        return beginDeleteMongoMIRoleDefinitionAsync(resourceGroupName, accountName, roleDefinitionId, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes an existing Azure Cosmos DB MongoMI Role Definition.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param roleDefinitionId The GUID for the Role Definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteMongoMIRoleDefinition(String resourceGroupName, String accountName, String roleDefinitionId) {
        deleteMongoMIRoleDefinitionAsync(resourceGroupName, accountName, roleDefinitionId).block();
    }

    /**
     * Deletes an existing Azure Cosmos DB MongoMI Role Definition.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param roleDefinitionId The GUID for the Role Definition.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteMongoMIRoleDefinition(String resourceGroupName, String accountName, String roleDefinitionId,
        Context context) {
        deleteMongoMIRoleDefinitionAsync(resourceGroupName, accountName, roleDefinitionId, context).block();
    }

    /**
     * Retrieves the list of all Azure Cosmos DB MongoMI Role Definitions.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the relevant Role Definitions along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<MongoMIRoleDefinitionResourceInner>>
        listMongoMIRoleDefinitionsSinglePageAsync(String resourceGroupName, String accountName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (accountName == null) {
            return Mono.error(new IllegalArgumentException("Parameter accountName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listMongoMIRoleDefinitions(this.client.getEndpoint(),
                this.client.getSubscriptionId(), resourceGroupName, accountName, this.client.getApiVersion(), accept,
                context))
            .<PagedResponse<MongoMIRoleDefinitionResourceInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), null, null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Retrieves the list of all Azure Cosmos DB MongoMI Role Definitions.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the relevant Role Definitions along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<MongoMIRoleDefinitionResourceInner>>
        listMongoMIRoleDefinitionsSinglePageAsync(String resourceGroupName, String accountName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (accountName == null) {
            return Mono.error(new IllegalArgumentException("Parameter accountName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listMongoMIRoleDefinitions(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
                accountName, this.client.getApiVersion(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), null, null));
    }

    /**
     * Retrieves the list of all Azure Cosmos DB MongoMI Role Definitions.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the relevant Role Definitions as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<MongoMIRoleDefinitionResourceInner> listMongoMIRoleDefinitionsAsync(String resourceGroupName,
        String accountName) {
        return new PagedFlux<>(() -> listMongoMIRoleDefinitionsSinglePageAsync(resourceGroupName, accountName));
    }

    /**
     * Retrieves the list of all Azure Cosmos DB MongoMI Role Definitions.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the relevant Role Definitions as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<MongoMIRoleDefinitionResourceInner> listMongoMIRoleDefinitionsAsync(String resourceGroupName,
        String accountName, Context context) {
        return new PagedFlux<>(
            () -> listMongoMIRoleDefinitionsSinglePageAsync(resourceGroupName, accountName, context));
    }

    /**
     * Retrieves the list of all Azure Cosmos DB MongoMI Role Definitions.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the relevant Role Definitions as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<MongoMIRoleDefinitionResourceInner> listMongoMIRoleDefinitions(String resourceGroupName,
        String accountName) {
        return new PagedIterable<>(listMongoMIRoleDefinitionsAsync(resourceGroupName, accountName));
    }

    /**
     * Retrieves the list of all Azure Cosmos DB MongoMI Role Definitions.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the relevant Role Definitions as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<MongoMIRoleDefinitionResourceInner> listMongoMIRoleDefinitions(String resourceGroupName,
        String accountName, Context context) {
        return new PagedIterable<>(listMongoMIRoleDefinitionsAsync(resourceGroupName, accountName, context));
    }

    /**
     * Retrieves the properties of an existing Azure Cosmos DB MongoMI Role Assignment with the given Id.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param roleAssignmentId The GUID for the Role Assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return parameters to create and update an Azure Cosmos DB MongoMI Role Assignment along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<MongoMIRoleAssignmentResourceInner>> getMongoMIRoleAssignmentWithResponseAsync(
        String resourceGroupName, String accountName, String roleAssignmentId) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (accountName == null) {
            return Mono.error(new IllegalArgumentException("Parameter accountName is required and cannot be null."));
        }
        if (roleAssignmentId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter roleAssignmentId is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.getMongoMIRoleAssignment(this.client.getEndpoint(), this.client.getSubscriptionId(),
                    resourceGroupName, accountName, roleAssignmentId, this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Retrieves the properties of an existing Azure Cosmos DB MongoMI Role Assignment with the given Id.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param roleAssignmentId The GUID for the Role Assignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return parameters to create and update an Azure Cosmos DB MongoMI Role Assignment along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<MongoMIRoleAssignmentResourceInner>> getMongoMIRoleAssignmentWithResponseAsync(
        String resourceGroupName, String accountName, String roleAssignmentId, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (accountName == null) {
            return Mono.error(new IllegalArgumentException("Parameter accountName is required and cannot be null."));
        }
        if (roleAssignmentId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter roleAssignmentId is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.getMongoMIRoleAssignment(this.client.getEndpoint(), this.client.getSubscriptionId(),
            resourceGroupName, accountName, roleAssignmentId, this.client.getApiVersion(), accept, context);
    }

    /**
     * Retrieves the properties of an existing Azure Cosmos DB MongoMI Role Assignment with the given Id.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param roleAssignmentId The GUID for the Role Assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return parameters to create and update an Azure Cosmos DB MongoMI Role Assignment on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<MongoMIRoleAssignmentResourceInner> getMongoMIRoleAssignmentAsync(String resourceGroupName,
        String accountName, String roleAssignmentId) {
        return getMongoMIRoleAssignmentWithResponseAsync(resourceGroupName, accountName, roleAssignmentId)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Retrieves the properties of an existing Azure Cosmos DB MongoMI Role Assignment with the given Id.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param roleAssignmentId The GUID for the Role Assignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return parameters to create and update an Azure Cosmos DB MongoMI Role Assignment along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<MongoMIRoleAssignmentResourceInner> getMongoMIRoleAssignmentWithResponse(String resourceGroupName,
        String accountName, String roleAssignmentId, Context context) {
        return getMongoMIRoleAssignmentWithResponseAsync(resourceGroupName, accountName, roleAssignmentId, context)
            .block();
    }

    /**
     * Retrieves the properties of an existing Azure Cosmos DB MongoMI Role Assignment with the given Id.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param roleAssignmentId The GUID for the Role Assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return parameters to create and update an Azure Cosmos DB MongoMI Role Assignment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MongoMIRoleAssignmentResourceInner getMongoMIRoleAssignment(String resourceGroupName, String accountName,
        String roleAssignmentId) {
        return getMongoMIRoleAssignmentWithResponse(resourceGroupName, accountName, roleAssignmentId, Context.NONE)
            .getValue();
    }

    /**
     * Creates or updates an Azure Cosmos DB MongoMI Role Assignment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param roleAssignmentId The GUID for the Role Assignment.
     * @param createUpdateMongoMIRoleAssignmentParameters The properties required to create or update a Role Assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return parameters to create and update an Azure Cosmos DB MongoMI Role Assignment along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createUpdateMongoMIRoleAssignmentWithResponseAsync(
        String resourceGroupName, String accountName, String roleAssignmentId,
        MongoMIRoleAssignmentResourceInner createUpdateMongoMIRoleAssignmentParameters) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (accountName == null) {
            return Mono.error(new IllegalArgumentException("Parameter accountName is required and cannot be null."));
        }
        if (roleAssignmentId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter roleAssignmentId is required and cannot be null."));
        }
        if (createUpdateMongoMIRoleAssignmentParameters == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter createUpdateMongoMIRoleAssignmentParameters is required and cannot be null."));
        } else {
            createUpdateMongoMIRoleAssignmentParameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.createUpdateMongoMIRoleAssignment(this.client.getEndpoint(),
                this.client.getSubscriptionId(), resourceGroupName, accountName, roleAssignmentId,
                this.client.getApiVersion(), createUpdateMongoMIRoleAssignmentParameters, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Creates or updates an Azure Cosmos DB MongoMI Role Assignment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param roleAssignmentId The GUID for the Role Assignment.
     * @param createUpdateMongoMIRoleAssignmentParameters The properties required to create or update a Role Assignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return parameters to create and update an Azure Cosmos DB MongoMI Role Assignment along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createUpdateMongoMIRoleAssignmentWithResponseAsync(
        String resourceGroupName, String accountName, String roleAssignmentId,
        MongoMIRoleAssignmentResourceInner createUpdateMongoMIRoleAssignmentParameters, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (accountName == null) {
            return Mono.error(new IllegalArgumentException("Parameter accountName is required and cannot be null."));
        }
        if (roleAssignmentId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter roleAssignmentId is required and cannot be null."));
        }
        if (createUpdateMongoMIRoleAssignmentParameters == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter createUpdateMongoMIRoleAssignmentParameters is required and cannot be null."));
        } else {
            createUpdateMongoMIRoleAssignmentParameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.createUpdateMongoMIRoleAssignment(this.client.getEndpoint(), this.client.getSubscriptionId(),
            resourceGroupName, accountName, roleAssignmentId, this.client.getApiVersion(),
            createUpdateMongoMIRoleAssignmentParameters, accept, context);
    }

    /**
     * Creates or updates an Azure Cosmos DB MongoMI Role Assignment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param roleAssignmentId The GUID for the Role Assignment.
     * @param createUpdateMongoMIRoleAssignmentParameters The properties required to create or update a Role Assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of parameters to create and update an Azure Cosmos DB MongoMI Role
     * Assignment.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<MongoMIRoleAssignmentResourceInner>, MongoMIRoleAssignmentResourceInner>
        beginCreateUpdateMongoMIRoleAssignmentAsync(String resourceGroupName, String accountName,
            String roleAssignmentId, MongoMIRoleAssignmentResourceInner createUpdateMongoMIRoleAssignmentParameters) {
        Mono<Response<Flux<ByteBuffer>>> mono = createUpdateMongoMIRoleAssignmentWithResponseAsync(resourceGroupName,
            accountName, roleAssignmentId, createUpdateMongoMIRoleAssignmentParameters);
        return this.client.<MongoMIRoleAssignmentResourceInner, MongoMIRoleAssignmentResourceInner>getLroResult(mono,
            this.client.getHttpPipeline(), MongoMIRoleAssignmentResourceInner.class,
            MongoMIRoleAssignmentResourceInner.class, this.client.getContext());
    }

    /**
     * Creates or updates an Azure Cosmos DB MongoMI Role Assignment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param roleAssignmentId The GUID for the Role Assignment.
     * @param createUpdateMongoMIRoleAssignmentParameters The properties required to create or update a Role Assignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of parameters to create and update an Azure Cosmos DB MongoMI Role
     * Assignment.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<MongoMIRoleAssignmentResourceInner>, MongoMIRoleAssignmentResourceInner>
        beginCreateUpdateMongoMIRoleAssignmentAsync(String resourceGroupName, String accountName,
            String roleAssignmentId, MongoMIRoleAssignmentResourceInner createUpdateMongoMIRoleAssignmentParameters,
            Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = createUpdateMongoMIRoleAssignmentWithResponseAsync(resourceGroupName,
            accountName, roleAssignmentId, createUpdateMongoMIRoleAssignmentParameters, context);
        return this.client.<MongoMIRoleAssignmentResourceInner, MongoMIRoleAssignmentResourceInner>getLroResult(mono,
            this.client.getHttpPipeline(), MongoMIRoleAssignmentResourceInner.class,
            MongoMIRoleAssignmentResourceInner.class, context);
    }

    /**
     * Creates or updates an Azure Cosmos DB MongoMI Role Assignment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param roleAssignmentId The GUID for the Role Assignment.
     * @param createUpdateMongoMIRoleAssignmentParameters The properties required to create or update a Role Assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of parameters to create and update an Azure Cosmos DB MongoMI Role
     * Assignment.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<MongoMIRoleAssignmentResourceInner>, MongoMIRoleAssignmentResourceInner>
        beginCreateUpdateMongoMIRoleAssignment(String resourceGroupName, String accountName, String roleAssignmentId,
            MongoMIRoleAssignmentResourceInner createUpdateMongoMIRoleAssignmentParameters) {
        return this
            .beginCreateUpdateMongoMIRoleAssignmentAsync(resourceGroupName, accountName, roleAssignmentId,
                createUpdateMongoMIRoleAssignmentParameters)
            .getSyncPoller();
    }

    /**
     * Creates or updates an Azure Cosmos DB MongoMI Role Assignment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param roleAssignmentId The GUID for the Role Assignment.
     * @param createUpdateMongoMIRoleAssignmentParameters The properties required to create or update a Role Assignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of parameters to create and update an Azure Cosmos DB MongoMI Role
     * Assignment.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<MongoMIRoleAssignmentResourceInner>, MongoMIRoleAssignmentResourceInner>
        beginCreateUpdateMongoMIRoleAssignment(String resourceGroupName, String accountName, String roleAssignmentId,
            MongoMIRoleAssignmentResourceInner createUpdateMongoMIRoleAssignmentParameters, Context context) {
        return this
            .beginCreateUpdateMongoMIRoleAssignmentAsync(resourceGroupName, accountName, roleAssignmentId,
                createUpdateMongoMIRoleAssignmentParameters, context)
            .getSyncPoller();
    }

    /**
     * Creates or updates an Azure Cosmos DB MongoMI Role Assignment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param roleAssignmentId The GUID for the Role Assignment.
     * @param createUpdateMongoMIRoleAssignmentParameters The properties required to create or update a Role Assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return parameters to create and update an Azure Cosmos DB MongoMI Role Assignment on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<MongoMIRoleAssignmentResourceInner> createUpdateMongoMIRoleAssignmentAsync(String resourceGroupName,
        String accountName, String roleAssignmentId,
        MongoMIRoleAssignmentResourceInner createUpdateMongoMIRoleAssignmentParameters) {
        return beginCreateUpdateMongoMIRoleAssignmentAsync(resourceGroupName, accountName, roleAssignmentId,
            createUpdateMongoMIRoleAssignmentParameters).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates or updates an Azure Cosmos DB MongoMI Role Assignment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param roleAssignmentId The GUID for the Role Assignment.
     * @param createUpdateMongoMIRoleAssignmentParameters The properties required to create or update a Role Assignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return parameters to create and update an Azure Cosmos DB MongoMI Role Assignment on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<MongoMIRoleAssignmentResourceInner> createUpdateMongoMIRoleAssignmentAsync(String resourceGroupName,
        String accountName, String roleAssignmentId,
        MongoMIRoleAssignmentResourceInner createUpdateMongoMIRoleAssignmentParameters, Context context) {
        return beginCreateUpdateMongoMIRoleAssignmentAsync(resourceGroupName, accountName, roleAssignmentId,
            createUpdateMongoMIRoleAssignmentParameters, context).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates or updates an Azure Cosmos DB MongoMI Role Assignment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param roleAssignmentId The GUID for the Role Assignment.
     * @param createUpdateMongoMIRoleAssignmentParameters The properties required to create or update a Role Assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return parameters to create and update an Azure Cosmos DB MongoMI Role Assignment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MongoMIRoleAssignmentResourceInner createUpdateMongoMIRoleAssignment(String resourceGroupName,
        String accountName, String roleAssignmentId,
        MongoMIRoleAssignmentResourceInner createUpdateMongoMIRoleAssignmentParameters) {
        return createUpdateMongoMIRoleAssignmentAsync(resourceGroupName, accountName, roleAssignmentId,
            createUpdateMongoMIRoleAssignmentParameters).block();
    }

    /**
     * Creates or updates an Azure Cosmos DB MongoMI Role Assignment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param roleAssignmentId The GUID for the Role Assignment.
     * @param createUpdateMongoMIRoleAssignmentParameters The properties required to create or update a Role Assignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return parameters to create and update an Azure Cosmos DB MongoMI Role Assignment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MongoMIRoleAssignmentResourceInner createUpdateMongoMIRoleAssignment(String resourceGroupName,
        String accountName, String roleAssignmentId,
        MongoMIRoleAssignmentResourceInner createUpdateMongoMIRoleAssignmentParameters, Context context) {
        return createUpdateMongoMIRoleAssignmentAsync(resourceGroupName, accountName, roleAssignmentId,
            createUpdateMongoMIRoleAssignmentParameters, context).block();
    }

    /**
     * Deletes an existing Azure Cosmos DB MongoMI Role Assignment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param roleAssignmentId The GUID for the Role Assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteMongoMIRoleAssignmentWithResponseAsync(String resourceGroupName,
        String accountName, String roleAssignmentId) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (accountName == null) {
            return Mono.error(new IllegalArgumentException("Parameter accountName is required and cannot be null."));
        }
        if (roleAssignmentId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter roleAssignmentId is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.deleteMongoMIRoleAssignment(this.client.getEndpoint(),
                this.client.getSubscriptionId(), resourceGroupName, accountName, roleAssignmentId,
                this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Deletes an existing Azure Cosmos DB MongoMI Role Assignment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param roleAssignmentId The GUID for the Role Assignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteMongoMIRoleAssignmentWithResponseAsync(String resourceGroupName,
        String accountName, String roleAssignmentId, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (accountName == null) {
            return Mono.error(new IllegalArgumentException("Parameter accountName is required and cannot be null."));
        }
        if (roleAssignmentId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter roleAssignmentId is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.deleteMongoMIRoleAssignment(this.client.getEndpoint(), this.client.getSubscriptionId(),
            resourceGroupName, accountName, roleAssignmentId, this.client.getApiVersion(), accept, context);
    }

    /**
     * Deletes an existing Azure Cosmos DB MongoMI Role Assignment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param roleAssignmentId The GUID for the Role Assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteMongoMIRoleAssignmentAsync(String resourceGroupName,
        String accountName, String roleAssignmentId) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = deleteMongoMIRoleAssignmentWithResponseAsync(resourceGroupName, accountName, roleAssignmentId);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            this.client.getContext());
    }

    /**
     * Deletes an existing Azure Cosmos DB MongoMI Role Assignment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param roleAssignmentId The GUID for the Role Assignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteMongoMIRoleAssignmentAsync(String resourceGroupName,
        String accountName, String roleAssignmentId, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono
            = deleteMongoMIRoleAssignmentWithResponseAsync(resourceGroupName, accountName, roleAssignmentId, context);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            context);
    }

    /**
     * Deletes an existing Azure Cosmos DB MongoMI Role Assignment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param roleAssignmentId The GUID for the Role Assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDeleteMongoMIRoleAssignment(String resourceGroupName,
        String accountName, String roleAssignmentId) {
        return this.beginDeleteMongoMIRoleAssignmentAsync(resourceGroupName, accountName, roleAssignmentId)
            .getSyncPoller();
    }

    /**
     * Deletes an existing Azure Cosmos DB MongoMI Role Assignment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param roleAssignmentId The GUID for the Role Assignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDeleteMongoMIRoleAssignment(String resourceGroupName,
        String accountName, String roleAssignmentId, Context context) {
        return this.beginDeleteMongoMIRoleAssignmentAsync(resourceGroupName, accountName, roleAssignmentId, context)
            .getSyncPoller();
    }

    /**
     * Deletes an existing Azure Cosmos DB MongoMI Role Assignment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param roleAssignmentId The GUID for the Role Assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteMongoMIRoleAssignmentAsync(String resourceGroupName, String accountName,
        String roleAssignmentId) {
        return beginDeleteMongoMIRoleAssignmentAsync(resourceGroupName, accountName, roleAssignmentId).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes an existing Azure Cosmos DB MongoMI Role Assignment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param roleAssignmentId The GUID for the Role Assignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteMongoMIRoleAssignmentAsync(String resourceGroupName, String accountName,
        String roleAssignmentId, Context context) {
        return beginDeleteMongoMIRoleAssignmentAsync(resourceGroupName, accountName, roleAssignmentId, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes an existing Azure Cosmos DB MongoMI Role Assignment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param roleAssignmentId The GUID for the Role Assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteMongoMIRoleAssignment(String resourceGroupName, String accountName, String roleAssignmentId) {
        deleteMongoMIRoleAssignmentAsync(resourceGroupName, accountName, roleAssignmentId).block();
    }

    /**
     * Deletes an existing Azure Cosmos DB MongoMI Role Assignment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param roleAssignmentId The GUID for the Role Assignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteMongoMIRoleAssignment(String resourceGroupName, String accountName, String roleAssignmentId,
        Context context) {
        deleteMongoMIRoleAssignmentAsync(resourceGroupName, accountName, roleAssignmentId, context).block();
    }

    /**
     * Retrieves the list of all Azure Cosmos DB MongoMI Role Assignments.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the relevant Role Assignments along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<MongoMIRoleAssignmentResourceInner>>
        listMongoMIRoleAssignmentsSinglePageAsync(String resourceGroupName, String accountName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (accountName == null) {
            return Mono.error(new IllegalArgumentException("Parameter accountName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listMongoMIRoleAssignments(this.client.getEndpoint(),
                this.client.getSubscriptionId(), resourceGroupName, accountName, this.client.getApiVersion(), accept,
                context))
            .<PagedResponse<MongoMIRoleAssignmentResourceInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), null, null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Retrieves the list of all Azure Cosmos DB MongoMI Role Assignments.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the relevant Role Assignments along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<MongoMIRoleAssignmentResourceInner>>
        listMongoMIRoleAssignmentsSinglePageAsync(String resourceGroupName, String accountName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (accountName == null) {
            return Mono.error(new IllegalArgumentException("Parameter accountName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listMongoMIRoleAssignments(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
                accountName, this.client.getApiVersion(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), null, null));
    }

    /**
     * Retrieves the list of all Azure Cosmos DB MongoMI Role Assignments.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the relevant Role Assignments as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<MongoMIRoleAssignmentResourceInner> listMongoMIRoleAssignmentsAsync(String resourceGroupName,
        String accountName) {
        return new PagedFlux<>(() -> listMongoMIRoleAssignmentsSinglePageAsync(resourceGroupName, accountName));
    }

    /**
     * Retrieves the list of all Azure Cosmos DB MongoMI Role Assignments.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the relevant Role Assignments as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<MongoMIRoleAssignmentResourceInner> listMongoMIRoleAssignmentsAsync(String resourceGroupName,
        String accountName, Context context) {
        return new PagedFlux<>(
            () -> listMongoMIRoleAssignmentsSinglePageAsync(resourceGroupName, accountName, context));
    }

    /**
     * Retrieves the list of all Azure Cosmos DB MongoMI Role Assignments.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the relevant Role Assignments as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<MongoMIRoleAssignmentResourceInner> listMongoMIRoleAssignments(String resourceGroupName,
        String accountName) {
        return new PagedIterable<>(listMongoMIRoleAssignmentsAsync(resourceGroupName, accountName));
    }

    /**
     * Retrieves the list of all Azure Cosmos DB MongoMI Role Assignments.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the relevant Role Assignments as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<MongoMIRoleAssignmentResourceInner> listMongoMIRoleAssignments(String resourceGroupName,
        String accountName, Context context) {
        return new PagedIterable<>(listMongoMIRoleAssignmentsAsync(resourceGroupName, accountName, context));
    }
}
