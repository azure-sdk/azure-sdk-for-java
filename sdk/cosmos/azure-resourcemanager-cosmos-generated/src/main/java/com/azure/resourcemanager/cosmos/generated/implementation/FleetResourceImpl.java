// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.generated.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.cosmos.generated.fluent.models.FleetResourceInner;
import com.azure.resourcemanager.cosmos.generated.models.FleetResource;
import com.azure.resourcemanager.cosmos.generated.models.FleetResourceUpdate;
import com.azure.resourcemanager.cosmos.generated.models.Status;
import java.util.Collections;
import java.util.Map;

public final class FleetResourceImpl implements FleetResource, FleetResource.Definition, FleetResource.Update {
    private FleetResourceInner innerObject;

    private final com.azure.resourcemanager.cosmos.generated.CosmosDBManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public Status provisioningState() {
        return this.innerModel().provisioningState();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public FleetResourceInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.cosmos.generated.CosmosDBManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String fleetName;

    private FleetResourceUpdate updateBody;

    public FleetResourceImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public FleetResource create() {
        this.innerObject = serviceManager.serviceClient()
            .getFleets()
            .createWithResponse(resourceGroupName, fleetName, this.innerModel(), Context.NONE)
            .getValue();
        return this;
    }

    public FleetResource create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getFleets()
            .createWithResponse(resourceGroupName, fleetName, this.innerModel(), context)
            .getValue();
        return this;
    }

    FleetResourceImpl(String name, com.azure.resourcemanager.cosmos.generated.CosmosDBManager serviceManager) {
        this.innerObject = new FleetResourceInner();
        this.serviceManager = serviceManager;
        this.fleetName = name;
    }

    public FleetResourceImpl update() {
        this.updateBody = new FleetResourceUpdate();
        return this;
    }

    public FleetResource apply() {
        this.innerObject = serviceManager.serviceClient()
            .getFleets()
            .updateWithResponse(resourceGroupName, fleetName, updateBody, Context.NONE)
            .getValue();
        return this;
    }

    public FleetResource apply(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getFleets()
            .updateWithResponse(resourceGroupName, fleetName, updateBody, context)
            .getValue();
        return this;
    }

    FleetResourceImpl(FleetResourceInner innerObject,
        com.azure.resourcemanager.cosmos.generated.CosmosDBManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.fleetName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "fleets");
    }

    public FleetResource refresh() {
        this.innerObject = serviceManager.serviceClient()
            .getFleets()
            .getByResourceGroupWithResponse(resourceGroupName, fleetName, Context.NONE)
            .getValue();
        return this;
    }

    public FleetResource refresh(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getFleets()
            .getByResourceGroupWithResponse(resourceGroupName, fleetName, context)
            .getValue();
        return this;
    }

    public FleetResourceImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public FleetResourceImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public FleetResourceImpl withTags(Map<String, String> tags) {
        this.innerModel().withTags(tags);
        return this;
    }

    public FleetResourceImpl withProvisioningState(Status provisioningState) {
        if (isInCreateMode()) {
            this.innerModel().withProvisioningState(provisioningState);
            return this;
        } else {
            this.updateBody.withProvisioningState(provisioningState);
            return this;
        }
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
