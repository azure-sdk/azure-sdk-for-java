// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * A CosmosDB Mongo vCore API data source/sink.
 */
@Fluent
public final class MongoVCoreDataTransferDataSourceSinkDetails
    implements JsonSerializable<MongoVCoreDataTransferDataSourceSinkDetails> {
    /*
     * The hostName property.
     */
    private String hostname;

    /*
     * The connectionStringKeyVaultUri property.
     */
    private String connectionStringKeyVaultUri;

    /**
     * Creates an instance of MongoVCoreDataTransferDataSourceSinkDetails class.
     */
    public MongoVCoreDataTransferDataSourceSinkDetails() {
    }

    /**
     * Get the hostname property: The hostName property.
     * 
     * @return the hostname value.
     */
    public String hostname() {
        return this.hostname;
    }

    /**
     * Set the hostname property: The hostName property.
     * 
     * @param hostname the hostname value to set.
     * @return the MongoVCoreDataTransferDataSourceSinkDetails object itself.
     */
    public MongoVCoreDataTransferDataSourceSinkDetails withHostname(String hostname) {
        this.hostname = hostname;
        return this;
    }

    /**
     * Get the connectionStringKeyVaultUri property: The connectionStringKeyVaultUri property.
     * 
     * @return the connectionStringKeyVaultUri value.
     */
    public String connectionStringKeyVaultUri() {
        return this.connectionStringKeyVaultUri;
    }

    /**
     * Set the connectionStringKeyVaultUri property: The connectionStringKeyVaultUri property.
     * 
     * @param connectionStringKeyVaultUri the connectionStringKeyVaultUri value to set.
     * @return the MongoVCoreDataTransferDataSourceSinkDetails object itself.
     */
    public MongoVCoreDataTransferDataSourceSinkDetails
        withConnectionStringKeyVaultUri(String connectionStringKeyVaultUri) {
        this.connectionStringKeyVaultUri = connectionStringKeyVaultUri;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("hostName", this.hostname);
        jsonWriter.writeStringField("connectionStringKeyVaultUri", this.connectionStringKeyVaultUri);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MongoVCoreDataTransferDataSourceSinkDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MongoVCoreDataTransferDataSourceSinkDetails if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the MongoVCoreDataTransferDataSourceSinkDetails.
     */
    public static MongoVCoreDataTransferDataSourceSinkDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MongoVCoreDataTransferDataSourceSinkDetails deserializedMongoVCoreDataTransferDataSourceSinkDetails
                = new MongoVCoreDataTransferDataSourceSinkDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("hostName".equals(fieldName)) {
                    deserializedMongoVCoreDataTransferDataSourceSinkDetails.hostname = reader.getString();
                } else if ("connectionStringKeyVaultUri".equals(fieldName)) {
                    deserializedMongoVCoreDataTransferDataSourceSinkDetails.connectionStringKeyVaultUri
                        = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMongoVCoreDataTransferDataSourceSinkDetails;
        });
    }
}
