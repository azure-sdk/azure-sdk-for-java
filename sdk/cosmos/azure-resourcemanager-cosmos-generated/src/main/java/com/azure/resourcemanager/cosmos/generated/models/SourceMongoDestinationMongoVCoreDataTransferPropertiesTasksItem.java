// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The SourceMongoDestinationMongoVCoreDataTransferPropertiesTasksItem model.
 */
@Fluent
public final class SourceMongoDestinationMongoVCoreDataTransferPropertiesTasksItem extends BaseDataTransferTask {
    /*
     * Source Mongo container entity
     */
    private CosmosMongoContainerEntity source;

    /*
     * Destination Mongo vCore container entity
     */
    private CosmosMongoVCoreContainerEntity destination;

    /*
     * Task level Processed Count.
     */
    private Long processedCount;

    /*
     * Task level Total Count.
     */
    private Long totalCount;

    /**
     * Creates an instance of SourceMongoDestinationMongoVCoreDataTransferPropertiesTasksItem class.
     */
    public SourceMongoDestinationMongoVCoreDataTransferPropertiesTasksItem() {
    }

    /**
     * Get the source property: Source Mongo container entity.
     * 
     * @return the source value.
     */
    public CosmosMongoContainerEntity source() {
        return this.source;
    }

    /**
     * Set the source property: Source Mongo container entity.
     * 
     * @param source the source value to set.
     * @return the SourceMongoDestinationMongoVCoreDataTransferPropertiesTasksItem object itself.
     */
    public SourceMongoDestinationMongoVCoreDataTransferPropertiesTasksItem
        withSource(CosmosMongoContainerEntity source) {
        this.source = source;
        return this;
    }

    /**
     * Get the destination property: Destination Mongo vCore container entity.
     * 
     * @return the destination value.
     */
    public CosmosMongoVCoreContainerEntity destination() {
        return this.destination;
    }

    /**
     * Set the destination property: Destination Mongo vCore container entity.
     * 
     * @param destination the destination value to set.
     * @return the SourceMongoDestinationMongoVCoreDataTransferPropertiesTasksItem object itself.
     */
    public SourceMongoDestinationMongoVCoreDataTransferPropertiesTasksItem
        withDestination(CosmosMongoVCoreContainerEntity destination) {
        this.destination = destination;
        return this;
    }

    /**
     * Get the processedCount property: Task level Processed Count.
     * 
     * @return the processedCount value.
     */
    @Override
    public Long processedCount() {
        return this.processedCount;
    }

    /**
     * Get the totalCount property: Task level Total Count.
     * 
     * @return the totalCount value.
     */
    @Override
    public Long totalCount() {
        return this.totalCount;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (source() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property source in model SourceMongoDestinationMongoVCoreDataTransferPropertiesTasksItem"));
        } else {
            source().validate();
        }
        if (destination() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property destination in model SourceMongoDestinationMongoVCoreDataTransferPropertiesTasksItem"));
        } else {
            destination().validate();
        }
    }

    private static final ClientLogger LOGGER
        = new ClientLogger(SourceMongoDestinationMongoVCoreDataTransferPropertiesTasksItem.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("source", this.source);
        jsonWriter.writeJsonField("destination", this.destination);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SourceMongoDestinationMongoVCoreDataTransferPropertiesTasksItem from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SourceMongoDestinationMongoVCoreDataTransferPropertiesTasksItem if the JsonReader was
     * pointing to an instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the
     * SourceMongoDestinationMongoVCoreDataTransferPropertiesTasksItem.
     */
    public static SourceMongoDestinationMongoVCoreDataTransferPropertiesTasksItem fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            SourceMongoDestinationMongoVCoreDataTransferPropertiesTasksItem deserializedSourceMongoDestinationMongoVCoreDataTransferPropertiesTasksItem
                = new SourceMongoDestinationMongoVCoreDataTransferPropertiesTasksItem();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("totalCount".equals(fieldName)) {
                    deserializedSourceMongoDestinationMongoVCoreDataTransferPropertiesTasksItem.totalCount
                        = reader.getNullable(JsonReader::getLong);
                } else if ("processedCount".equals(fieldName)) {
                    deserializedSourceMongoDestinationMongoVCoreDataTransferPropertiesTasksItem.processedCount
                        = reader.getNullable(JsonReader::getLong);
                } else if ("source".equals(fieldName)) {
                    deserializedSourceMongoDestinationMongoVCoreDataTransferPropertiesTasksItem.source
                        = CosmosMongoContainerEntity.fromJson(reader);
                } else if ("destination".equals(fieldName)) {
                    deserializedSourceMongoDestinationMongoVCoreDataTransferPropertiesTasksItem.destination
                        = CosmosMongoVCoreContainerEntity.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSourceMongoDestinationMongoVCoreDataTransferPropertiesTasksItem;
        });
    }
}
