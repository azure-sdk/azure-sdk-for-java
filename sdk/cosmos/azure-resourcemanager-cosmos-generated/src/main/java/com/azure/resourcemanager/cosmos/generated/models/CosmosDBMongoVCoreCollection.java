// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * A CosmosDB Mongo vCore collection.
 */
@Fluent
public final class CosmosDBMongoVCoreCollection implements JsonSerializable<CosmosDBMongoVCoreCollection> {
    /*
     * Azure Cosmos DB for MongoDB (vCore) database.
     */
    private String databaseName;

    /*
     * Azure Cosmos DB for MongoDB (vCore) collection.
     */
    private String collectionName;

    /**
     * Creates an instance of CosmosDBMongoVCoreCollection class.
     */
    public CosmosDBMongoVCoreCollection() {
    }

    /**
     * Get the databaseName property: Azure Cosmos DB for MongoDB (vCore) database.
     * 
     * @return the databaseName value.
     */
    public String databaseName() {
        return this.databaseName;
    }

    /**
     * Set the databaseName property: Azure Cosmos DB for MongoDB (vCore) database.
     * 
     * @param databaseName the databaseName value to set.
     * @return the CosmosDBMongoVCoreCollection object itself.
     */
    public CosmosDBMongoVCoreCollection withDatabaseName(String databaseName) {
        this.databaseName = databaseName;
        return this;
    }

    /**
     * Get the collectionName property: Azure Cosmos DB for MongoDB (vCore) collection.
     * 
     * @return the collectionName value.
     */
    public String collectionName() {
        return this.collectionName;
    }

    /**
     * Set the collectionName property: Azure Cosmos DB for MongoDB (vCore) collection.
     * 
     * @param collectionName the collectionName value to set.
     * @return the CosmosDBMongoVCoreCollection object itself.
     */
    public CosmosDBMongoVCoreCollection withCollectionName(String collectionName) {
        this.collectionName = collectionName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (databaseName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property databaseName in model CosmosDBMongoVCoreCollection"));
        }
        if (collectionName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property collectionName in model CosmosDBMongoVCoreCollection"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(CosmosDBMongoVCoreCollection.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("databaseName", this.databaseName);
        jsonWriter.writeStringField("collectionName", this.collectionName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CosmosDBMongoVCoreCollection from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CosmosDBMongoVCoreCollection if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CosmosDBMongoVCoreCollection.
     */
    public static CosmosDBMongoVCoreCollection fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CosmosDBMongoVCoreCollection deserializedCosmosDBMongoVCoreCollection = new CosmosDBMongoVCoreCollection();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("databaseName".equals(fieldName)) {
                    deserializedCosmosDBMongoVCoreCollection.databaseName = reader.getString();
                } else if ("collectionName".equals(fieldName)) {
                    deserializedCosmosDBMongoVCoreCollection.collectionName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCosmosDBMongoVCoreCollection;
        });
    }
}
