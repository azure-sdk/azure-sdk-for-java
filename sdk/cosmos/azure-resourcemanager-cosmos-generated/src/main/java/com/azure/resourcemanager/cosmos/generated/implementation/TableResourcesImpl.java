// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.cosmos.generated.fluent.TableResourcesClient;
import com.azure.resourcemanager.cosmos.generated.fluent.models.BackupInformationInner;
import com.azure.resourcemanager.cosmos.generated.fluent.models.TableGetResultsInner;
import com.azure.resourcemanager.cosmos.generated.fluent.models.TableRoleAssignmentResourceInner;
import com.azure.resourcemanager.cosmos.generated.fluent.models.TableRoleDefinitionResourceInner;
import com.azure.resourcemanager.cosmos.generated.fluent.models.ThroughputSettingsGetResultsInner;
import com.azure.resourcemanager.cosmos.generated.models.BackupInformation;
import com.azure.resourcemanager.cosmos.generated.models.ContinuousBackupRestoreLocation;
import com.azure.resourcemanager.cosmos.generated.models.TableGetResults;
import com.azure.resourcemanager.cosmos.generated.models.TableResources;
import com.azure.resourcemanager.cosmos.generated.models.TableRoleAssignmentResource;
import com.azure.resourcemanager.cosmos.generated.models.TableRoleDefinitionResource;
import com.azure.resourcemanager.cosmos.generated.models.ThroughputSettingsGetResults;
import com.azure.resourcemanager.cosmos.generated.models.ThroughputSettingsUpdateParameters;

public final class TableResourcesImpl implements TableResources {
    private static final ClientLogger LOGGER = new ClientLogger(TableResourcesImpl.class);

    private final TableResourcesClient innerClient;

    private final com.azure.resourcemanager.cosmos.generated.CosmosDBManager serviceManager;

    public TableResourcesImpl(TableResourcesClient innerClient,
        com.azure.resourcemanager.cosmos.generated.CosmosDBManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<TableGetResults> listTables(String resourceGroupName, String accountName) {
        PagedIterable<TableGetResultsInner> inner = this.serviceClient().listTables(resourceGroupName, accountName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new TableGetResultsImpl(inner1, this.manager()));
    }

    public PagedIterable<TableGetResults> listTables(String resourceGroupName, String accountName, Context context) {
        PagedIterable<TableGetResultsInner> inner
            = this.serviceClient().listTables(resourceGroupName, accountName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new TableGetResultsImpl(inner1, this.manager()));
    }

    public Response<TableGetResults> getTableWithResponse(String resourceGroupName, String accountName,
        String tableName, Context context) {
        Response<TableGetResultsInner> inner
            = this.serviceClient().getTableWithResponse(resourceGroupName, accountName, tableName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new TableGetResultsImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public TableGetResults getTable(String resourceGroupName, String accountName, String tableName) {
        TableGetResultsInner inner = this.serviceClient().getTable(resourceGroupName, accountName, tableName);
        if (inner != null) {
            return new TableGetResultsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteTable(String resourceGroupName, String accountName, String tableName) {
        this.serviceClient().deleteTable(resourceGroupName, accountName, tableName);
    }

    public void deleteTable(String resourceGroupName, String accountName, String tableName, Context context) {
        this.serviceClient().deleteTable(resourceGroupName, accountName, tableName, context);
    }

    public Response<ThroughputSettingsGetResults> getTableThroughputWithResponse(String resourceGroupName,
        String accountName, String tableName, Context context) {
        Response<ThroughputSettingsGetResultsInner> inner
            = this.serviceClient().getTableThroughputWithResponse(resourceGroupName, accountName, tableName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new ThroughputSettingsGetResultsImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ThroughputSettingsGetResults getTableThroughput(String resourceGroupName, String accountName,
        String tableName) {
        ThroughputSettingsGetResultsInner inner
            = this.serviceClient().getTableThroughput(resourceGroupName, accountName, tableName);
        if (inner != null) {
            return new ThroughputSettingsGetResultsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ThroughputSettingsGetResults updateTableThroughput(String resourceGroupName, String accountName,
        String tableName, ThroughputSettingsUpdateParameters updateThroughputParameters) {
        ThroughputSettingsGetResultsInner inner = this.serviceClient()
            .updateTableThroughput(resourceGroupName, accountName, tableName, updateThroughputParameters);
        if (inner != null) {
            return new ThroughputSettingsGetResultsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ThroughputSettingsGetResults updateTableThroughput(String resourceGroupName, String accountName,
        String tableName, ThroughputSettingsUpdateParameters updateThroughputParameters, Context context) {
        ThroughputSettingsGetResultsInner inner = this.serviceClient()
            .updateTableThroughput(resourceGroupName, accountName, tableName, updateThroughputParameters, context);
        if (inner != null) {
            return new ThroughputSettingsGetResultsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ThroughputSettingsGetResults migrateTableToAutoscale(String resourceGroupName, String accountName,
        String tableName) {
        ThroughputSettingsGetResultsInner inner
            = this.serviceClient().migrateTableToAutoscale(resourceGroupName, accountName, tableName);
        if (inner != null) {
            return new ThroughputSettingsGetResultsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ThroughputSettingsGetResults migrateTableToAutoscale(String resourceGroupName, String accountName,
        String tableName, Context context) {
        ThroughputSettingsGetResultsInner inner
            = this.serviceClient().migrateTableToAutoscale(resourceGroupName, accountName, tableName, context);
        if (inner != null) {
            return new ThroughputSettingsGetResultsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ThroughputSettingsGetResults migrateTableToManualThroughput(String resourceGroupName, String accountName,
        String tableName) {
        ThroughputSettingsGetResultsInner inner
            = this.serviceClient().migrateTableToManualThroughput(resourceGroupName, accountName, tableName);
        if (inner != null) {
            return new ThroughputSettingsGetResultsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ThroughputSettingsGetResults migrateTableToManualThroughput(String resourceGroupName, String accountName,
        String tableName, Context context) {
        ThroughputSettingsGetResultsInner inner
            = this.serviceClient().migrateTableToManualThroughput(resourceGroupName, accountName, tableName, context);
        if (inner != null) {
            return new ThroughputSettingsGetResultsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public BackupInformation retrieveContinuousBackupInformation(String resourceGroupName, String accountName,
        String tableName, ContinuousBackupRestoreLocation location) {
        BackupInformationInner inner = this.serviceClient()
            .retrieveContinuousBackupInformation(resourceGroupName, accountName, tableName, location);
        if (inner != null) {
            return new BackupInformationImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public BackupInformation retrieveContinuousBackupInformation(String resourceGroupName, String accountName,
        String tableName, ContinuousBackupRestoreLocation location, Context context) {
        BackupInformationInner inner = this.serviceClient()
            .retrieveContinuousBackupInformation(resourceGroupName, accountName, tableName, location, context);
        if (inner != null) {
            return new BackupInformationImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<TableRoleDefinitionResource> getTableRoleDefinitionWithResponse(String resourceGroupName,
        String accountName, String roleDefinitionId, Context context) {
        Response<TableRoleDefinitionResourceInner> inner = this.serviceClient()
            .getTableRoleDefinitionWithResponse(resourceGroupName, accountName, roleDefinitionId, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new TableRoleDefinitionResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public TableRoleDefinitionResource getTableRoleDefinition(String resourceGroupName, String accountName,
        String roleDefinitionId) {
        TableRoleDefinitionResourceInner inner
            = this.serviceClient().getTableRoleDefinition(resourceGroupName, accountName, roleDefinitionId);
        if (inner != null) {
            return new TableRoleDefinitionResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteTableRoleDefinition(String resourceGroupName, String accountName, String roleDefinitionId) {
        this.serviceClient().deleteTableRoleDefinition(resourceGroupName, accountName, roleDefinitionId);
    }

    public void deleteTableRoleDefinition(String resourceGroupName, String accountName, String roleDefinitionId,
        Context context) {
        this.serviceClient().deleteTableRoleDefinition(resourceGroupName, accountName, roleDefinitionId, context);
    }

    public PagedIterable<TableRoleDefinitionResource> listTableRoleDefinitions(String resourceGroupName,
        String accountName) {
        PagedIterable<TableRoleDefinitionResourceInner> inner
            = this.serviceClient().listTableRoleDefinitions(resourceGroupName, accountName);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new TableRoleDefinitionResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<TableRoleDefinitionResource> listTableRoleDefinitions(String resourceGroupName,
        String accountName, Context context) {
        PagedIterable<TableRoleDefinitionResourceInner> inner
            = this.serviceClient().listTableRoleDefinitions(resourceGroupName, accountName, context);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new TableRoleDefinitionResourceImpl(inner1, this.manager()));
    }

    public Response<TableRoleAssignmentResource> getTableRoleAssignmentWithResponse(String resourceGroupName,
        String accountName, String roleAssignmentId, Context context) {
        Response<TableRoleAssignmentResourceInner> inner = this.serviceClient()
            .getTableRoleAssignmentWithResponse(resourceGroupName, accountName, roleAssignmentId, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new TableRoleAssignmentResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public TableRoleAssignmentResource getTableRoleAssignment(String resourceGroupName, String accountName,
        String roleAssignmentId) {
        TableRoleAssignmentResourceInner inner
            = this.serviceClient().getTableRoleAssignment(resourceGroupName, accountName, roleAssignmentId);
        if (inner != null) {
            return new TableRoleAssignmentResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteTableRoleAssignment(String resourceGroupName, String accountName, String roleAssignmentId) {
        this.serviceClient().deleteTableRoleAssignment(resourceGroupName, accountName, roleAssignmentId);
    }

    public void deleteTableRoleAssignment(String resourceGroupName, String accountName, String roleAssignmentId,
        Context context) {
        this.serviceClient().deleteTableRoleAssignment(resourceGroupName, accountName, roleAssignmentId, context);
    }

    public PagedIterable<TableRoleAssignmentResource> listTableRoleAssignments(String resourceGroupName,
        String accountName) {
        PagedIterable<TableRoleAssignmentResourceInner> inner
            = this.serviceClient().listTableRoleAssignments(resourceGroupName, accountName);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new TableRoleAssignmentResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<TableRoleAssignmentResource> listTableRoleAssignments(String resourceGroupName,
        String accountName, Context context) {
        PagedIterable<TableRoleAssignmentResourceInner> inner
            = this.serviceClient().listTableRoleAssignments(resourceGroupName, accountName, context);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new TableRoleAssignmentResourceImpl(inner1, this.manager()));
    }

    public TableGetResults getTableById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = ResourceManagerUtils.getValueFromIdByName(id, "databaseAccounts");
        if (accountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'databaseAccounts'.", id)));
        }
        String tableName = ResourceManagerUtils.getValueFromIdByName(id, "tables");
        if (tableName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'tables'.", id)));
        }
        return this.getTableWithResponse(resourceGroupName, accountName, tableName, Context.NONE).getValue();
    }

    public Response<TableGetResults> getTableByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = ResourceManagerUtils.getValueFromIdByName(id, "databaseAccounts");
        if (accountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'databaseAccounts'.", id)));
        }
        String tableName = ResourceManagerUtils.getValueFromIdByName(id, "tables");
        if (tableName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'tables'.", id)));
        }
        return this.getTableWithResponse(resourceGroupName, accountName, tableName, context);
    }

    public TableRoleDefinitionResource getTableRoleDefinitionById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = ResourceManagerUtils.getValueFromIdByName(id, "databaseAccounts");
        if (accountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'databaseAccounts'.", id)));
        }
        String roleDefinitionId = ResourceManagerUtils.getValueFromIdByName(id, "tableRoleDefinitions");
        if (roleDefinitionId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'tableRoleDefinitions'.", id)));
        }
        return this.getTableRoleDefinitionWithResponse(resourceGroupName, accountName, roleDefinitionId, Context.NONE)
            .getValue();
    }

    public Response<TableRoleDefinitionResource> getTableRoleDefinitionByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = ResourceManagerUtils.getValueFromIdByName(id, "databaseAccounts");
        if (accountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'databaseAccounts'.", id)));
        }
        String roleDefinitionId = ResourceManagerUtils.getValueFromIdByName(id, "tableRoleDefinitions");
        if (roleDefinitionId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'tableRoleDefinitions'.", id)));
        }
        return this.getTableRoleDefinitionWithResponse(resourceGroupName, accountName, roleDefinitionId, context);
    }

    public TableRoleAssignmentResource getTableRoleAssignmentById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = ResourceManagerUtils.getValueFromIdByName(id, "databaseAccounts");
        if (accountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'databaseAccounts'.", id)));
        }
        String roleAssignmentId = ResourceManagerUtils.getValueFromIdByName(id, "tableRoleAssignments");
        if (roleAssignmentId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'tableRoleAssignments'.", id)));
        }
        return this.getTableRoleAssignmentWithResponse(resourceGroupName, accountName, roleAssignmentId, Context.NONE)
            .getValue();
    }

    public Response<TableRoleAssignmentResource> getTableRoleAssignmentByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = ResourceManagerUtils.getValueFromIdByName(id, "databaseAccounts");
        if (accountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'databaseAccounts'.", id)));
        }
        String roleAssignmentId = ResourceManagerUtils.getValueFromIdByName(id, "tableRoleAssignments");
        if (roleAssignmentId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'tableRoleAssignments'.", id)));
        }
        return this.getTableRoleAssignmentWithResponse(resourceGroupName, accountName, roleAssignmentId, context);
    }

    public void deleteTableById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = ResourceManagerUtils.getValueFromIdByName(id, "databaseAccounts");
        if (accountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'databaseAccounts'.", id)));
        }
        String tableName = ResourceManagerUtils.getValueFromIdByName(id, "tables");
        if (tableName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'tables'.", id)));
        }
        this.deleteTable(resourceGroupName, accountName, tableName, Context.NONE);
    }

    public void deleteTableByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = ResourceManagerUtils.getValueFromIdByName(id, "databaseAccounts");
        if (accountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'databaseAccounts'.", id)));
        }
        String tableName = ResourceManagerUtils.getValueFromIdByName(id, "tables");
        if (tableName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'tables'.", id)));
        }
        this.deleteTable(resourceGroupName, accountName, tableName, context);
    }

    public void deleteTableRoleDefinitionById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = ResourceManagerUtils.getValueFromIdByName(id, "databaseAccounts");
        if (accountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'databaseAccounts'.", id)));
        }
        String roleDefinitionId = ResourceManagerUtils.getValueFromIdByName(id, "tableRoleDefinitions");
        if (roleDefinitionId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'tableRoleDefinitions'.", id)));
        }
        this.deleteTableRoleDefinition(resourceGroupName, accountName, roleDefinitionId, Context.NONE);
    }

    public void deleteTableRoleDefinitionByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = ResourceManagerUtils.getValueFromIdByName(id, "databaseAccounts");
        if (accountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'databaseAccounts'.", id)));
        }
        String roleDefinitionId = ResourceManagerUtils.getValueFromIdByName(id, "tableRoleDefinitions");
        if (roleDefinitionId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'tableRoleDefinitions'.", id)));
        }
        this.deleteTableRoleDefinition(resourceGroupName, accountName, roleDefinitionId, context);
    }

    public void deleteTableRoleAssignmentById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = ResourceManagerUtils.getValueFromIdByName(id, "databaseAccounts");
        if (accountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'databaseAccounts'.", id)));
        }
        String roleAssignmentId = ResourceManagerUtils.getValueFromIdByName(id, "tableRoleAssignments");
        if (roleAssignmentId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'tableRoleAssignments'.", id)));
        }
        this.deleteTableRoleAssignment(resourceGroupName, accountName, roleAssignmentId, Context.NONE);
    }

    public void deleteTableRoleAssignmentByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = ResourceManagerUtils.getValueFromIdByName(id, "databaseAccounts");
        if (accountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'databaseAccounts'.", id)));
        }
        String roleAssignmentId = ResourceManagerUtils.getValueFromIdByName(id, "tableRoleAssignments");
        if (roleAssignmentId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'tableRoleAssignments'.", id)));
        }
        this.deleteTableRoleAssignment(resourceGroupName, accountName, roleAssignmentId, context);
    }

    private TableResourcesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.cosmos.generated.CosmosDBManager manager() {
        return this.serviceManager;
    }

    public TableGetResultsImpl defineUpdateTable(String name) {
        return new TableGetResultsImpl(name, this.manager());
    }

    public TableRoleDefinitionResourceImpl defineUpdateTableRoleDefinition(String name) {
        return new TableRoleDefinitionResourceImpl(name, this.manager());
    }

    public TableRoleAssignmentResourceImpl defineUpdateTableRoleAssignment(String name) {
        return new TableRoleAssignmentResourceImpl(name, this.manager());
    }
}
