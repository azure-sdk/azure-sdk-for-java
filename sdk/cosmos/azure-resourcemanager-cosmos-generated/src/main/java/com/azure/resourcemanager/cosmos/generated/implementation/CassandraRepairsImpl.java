// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.generated.implementation;

import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.cosmos.generated.fluent.CassandraRepairsClient;
import com.azure.resourcemanager.cosmos.generated.fluent.models.CassandraReaperClusterStatusInner;
import com.azure.resourcemanager.cosmos.generated.fluent.models.CassandraReaperRunStatusFeedResponseInner;
import com.azure.resourcemanager.cosmos.generated.fluent.models.CassandraReaperRunStatusInner;
import com.azure.resourcemanager.cosmos.generated.fluent.models.CassandraRepairSegmentResourceFeedResponseInner;
import com.azure.resourcemanager.cosmos.generated.models.CassandraClusterRepairListFilter;
import com.azure.resourcemanager.cosmos.generated.models.CassandraClusterRepairPublicProperties;
import com.azure.resourcemanager.cosmos.generated.models.CassandraReaperClusterStatus;
import com.azure.resourcemanager.cosmos.generated.models.CassandraReaperRunStatus;
import com.azure.resourcemanager.cosmos.generated.models.CassandraReaperRunStatusFeedResponse;
import com.azure.resourcemanager.cosmos.generated.models.CassandraRepairSegmentResourceFeedResponse;
import com.azure.resourcemanager.cosmos.generated.models.CassandraRepairs;

public final class CassandraRepairsImpl implements CassandraRepairs {
    private static final ClientLogger LOGGER = new ClientLogger(CassandraRepairsImpl.class);

    private final CassandraRepairsClient innerClient;

    private final com.azure.resourcemanager.cosmos.generated.CosmosDBManager serviceManager;

    public CassandraRepairsImpl(
        CassandraRepairsClient innerClient, com.azure.resourcemanager.cosmos.generated.CosmosDBManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public CassandraReaperClusterStatus getClusterStatus(String resourceGroupName, String clusterName) {
        CassandraReaperClusterStatusInner inner = this.serviceClient().getClusterStatus(resourceGroupName, clusterName);
        if (inner != null) {
            return new CassandraReaperClusterStatusImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public CassandraReaperClusterStatus getClusterStatus(
        String resourceGroupName, String clusterName, Context context) {
        CassandraReaperClusterStatusInner inner =
            this.serviceClient().getClusterStatus(resourceGroupName, clusterName, context);
        if (inner != null) {
            return new CassandraReaperClusterStatusImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public String getTableStatus(String resourceGroupName, String clusterName) {
        return this.serviceClient().getTableStatus(resourceGroupName, clusterName);
    }

    public String getTableStatus(String resourceGroupName, String clusterName, Context context) {
        return this.serviceClient().getTableStatus(resourceGroupName, clusterName, context);
    }

    public CassandraReaperRunStatus create(
        String resourceGroupName, String clusterName, CassandraClusterRepairPublicProperties body) {
        CassandraReaperRunStatusInner inner = this.serviceClient().create(resourceGroupName, clusterName, body);
        if (inner != null) {
            return new CassandraReaperRunStatusImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public CassandraReaperRunStatus create(
        String resourceGroupName, String clusterName, CassandraClusterRepairPublicProperties body, Context context) {
        CassandraReaperRunStatusInner inner =
            this.serviceClient().create(resourceGroupName, clusterName, body, context);
        if (inner != null) {
            return new CassandraReaperRunStatusImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String clusterName, String repairRunId, String ownerName) {
        this.serviceClient().delete(resourceGroupName, clusterName, repairRunId, ownerName);
    }

    public void delete(
        String resourceGroupName, String clusterName, String repairRunId, String ownerName, Context context) {
        this.serviceClient().delete(resourceGroupName, clusterName, repairRunId, ownerName, context);
    }

    public CassandraReaperRunStatusFeedResponse list(String resourceGroupName, String clusterName) {
        CassandraReaperRunStatusFeedResponseInner inner = this.serviceClient().list(resourceGroupName, clusterName);
        if (inner != null) {
            return new CassandraReaperRunStatusFeedResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public CassandraReaperRunStatusFeedResponse list(
        String resourceGroupName, String clusterName, CassandraClusterRepairListFilter body, Context context) {
        CassandraReaperRunStatusFeedResponseInner inner =
            this.serviceClient().list(resourceGroupName, clusterName, body, context);
        if (inner != null) {
            return new CassandraReaperRunStatusFeedResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void pause(String resourceGroupName, String clusterName, String repairRunId) {
        this.serviceClient().pause(resourceGroupName, clusterName, repairRunId);
    }

    public void pause(String resourceGroupName, String clusterName, String repairRunId, Context context) {
        this.serviceClient().pause(resourceGroupName, clusterName, repairRunId, context);
    }

    public void resume(String resourceGroupName, String clusterName, String repairRunId) {
        this.serviceClient().resume(resourceGroupName, clusterName, repairRunId);
    }

    public void resume(String resourceGroupName, String clusterName, String repairRunId, Context context) {
        this.serviceClient().resume(resourceGroupName, clusterName, repairRunId, context);
    }

    public CassandraRepairSegmentResourceFeedResponse listSegments(
        String resourceGroupName, String clusterName, String repairRunId) {
        CassandraRepairSegmentResourceFeedResponseInner inner =
            this.serviceClient().listSegments(resourceGroupName, clusterName, repairRunId);
        if (inner != null) {
            return new CassandraRepairSegmentResourceFeedResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public CassandraRepairSegmentResourceFeedResponse listSegments(
        String resourceGroupName, String clusterName, String repairRunId, Context context) {
        CassandraRepairSegmentResourceFeedResponseInner inner =
            this.serviceClient().listSegments(resourceGroupName, clusterName, repairRunId, context);
        if (inner != null) {
            return new CassandraRepairSegmentResourceFeedResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public CassandraReaperRunStatus show(String resourceGroupName, String clusterName, String repairRunId) {
        CassandraReaperRunStatusInner inner = this.serviceClient().show(resourceGroupName, clusterName, repairRunId);
        if (inner != null) {
            return new CassandraReaperRunStatusImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public CassandraReaperRunStatus show(
        String resourceGroupName, String clusterName, String repairRunId, Context context) {
        CassandraReaperRunStatusInner inner =
            this.serviceClient().show(resourceGroupName, clusterName, repairRunId, context);
        if (inner != null) {
            return new CassandraReaperRunStatusImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void abortSegment(String resourceGroupName, String clusterName, String repairRunId, String segmentId) {
        this.serviceClient().abortSegment(resourceGroupName, clusterName, repairRunId, segmentId);
    }

    public void abortSegment(
        String resourceGroupName, String clusterName, String repairRunId, String segmentId, Context context) {
        this.serviceClient().abortSegment(resourceGroupName, clusterName, repairRunId, segmentId, context);
    }

    public void update(String resourceGroupName, String clusterName, String repairRunId, String intensityValue) {
        this.serviceClient().update(resourceGroupName, clusterName, repairRunId, intensityValue);
    }

    public void update(
        String resourceGroupName, String clusterName, String repairRunId, String intensityValue, Context context) {
        this.serviceClient().update(resourceGroupName, clusterName, repairRunId, intensityValue, context);
    }

    private CassandraRepairsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.cosmos.generated.CosmosDBManager manager() {
        return this.serviceManager;
    }
}
