// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.cosmos.generated.fluent.ChaosFaultsClient;
import com.azure.resourcemanager.cosmos.generated.fluent.models.ChaosFaultResourceInner;
import com.azure.resourcemanager.cosmos.generated.models.ChaosFaultResource;
import com.azure.resourcemanager.cosmos.generated.models.ChaosFaults;

public final class ChaosFaultsImpl implements ChaosFaults {
    private static final ClientLogger LOGGER = new ClientLogger(ChaosFaultsImpl.class);

    private final ChaosFaultsClient innerClient;

    private final com.azure.resourcemanager.cosmos.generated.CosmosDBManager serviceManager;

    public ChaosFaultsImpl(ChaosFaultsClient innerClient,
        com.azure.resourcemanager.cosmos.generated.CosmosDBManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<ChaosFaultResource> list(String resourceGroupName, String accountName) {
        PagedIterable<ChaosFaultResourceInner> inner = this.serviceClient().list(resourceGroupName, accountName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new ChaosFaultResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<ChaosFaultResource> list(String resourceGroupName, String accountName, Context context) {
        PagedIterable<ChaosFaultResourceInner> inner
            = this.serviceClient().list(resourceGroupName, accountName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new ChaosFaultResourceImpl(inner1, this.manager()));
    }

    public Response<ChaosFaultResource> getWithResponse(String resourceGroupName, String accountName, String chaosFault,
        Context context) {
        Response<ChaosFaultResourceInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, accountName, chaosFault, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new ChaosFaultResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ChaosFaultResource get(String resourceGroupName, String accountName, String chaosFault) {
        ChaosFaultResourceInner inner = this.serviceClient().get(resourceGroupName, accountName, chaosFault);
        if (inner != null) {
            return new ChaosFaultResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ChaosFaultResource getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = ResourceManagerUtils.getValueFromIdByName(id, "databaseAccounts");
        if (accountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'databaseAccounts'.", id)));
        }
        String chaosFault = ResourceManagerUtils.getValueFromIdByName(id, "chaosFaults");
        if (chaosFault == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'chaosFaults'.", id)));
        }
        return this.getWithResponse(resourceGroupName, accountName, chaosFault, Context.NONE).getValue();
    }

    public Response<ChaosFaultResource> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = ResourceManagerUtils.getValueFromIdByName(id, "databaseAccounts");
        if (accountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'databaseAccounts'.", id)));
        }
        String chaosFault = ResourceManagerUtils.getValueFromIdByName(id, "chaosFaults");
        if (chaosFault == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'chaosFaults'.", id)));
        }
        return this.getWithResponse(resourceGroupName, accountName, chaosFault, context);
    }

    private ChaosFaultsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.cosmos.generated.CosmosDBManager manager() {
        return this.serviceManager;
    }

    public ChaosFaultResourceImpl define(String name) {
        return new ChaosFaultResourceImpl(name, this.manager());
    }
}
