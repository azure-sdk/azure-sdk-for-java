// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * An Azure Blob Storage data source/sink.
 */
@Fluent
public final class AzureBlobDataTransferDataSourceSinkDetails
    implements JsonSerializable<AzureBlobDataTransferDataSourceSinkDetails> {
    /*
     * The endpointUrl property.
     */
    private String endpointUrl;

    /**
     * Creates an instance of AzureBlobDataTransferDataSourceSinkDetails class.
     */
    public AzureBlobDataTransferDataSourceSinkDetails() {
    }

    /**
     * Get the endpointUrl property: The endpointUrl property.
     * 
     * @return the endpointUrl value.
     */
    public String endpointUrl() {
        return this.endpointUrl;
    }

    /**
     * Set the endpointUrl property: The endpointUrl property.
     * 
     * @param endpointUrl the endpointUrl value to set.
     * @return the AzureBlobDataTransferDataSourceSinkDetails object itself.
     */
    public AzureBlobDataTransferDataSourceSinkDetails withEndpointUrl(String endpointUrl) {
        this.endpointUrl = endpointUrl;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("endpointUrl", this.endpointUrl);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AzureBlobDataTransferDataSourceSinkDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AzureBlobDataTransferDataSourceSinkDetails if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AzureBlobDataTransferDataSourceSinkDetails.
     */
    public static AzureBlobDataTransferDataSourceSinkDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AzureBlobDataTransferDataSourceSinkDetails deserializedAzureBlobDataTransferDataSourceSinkDetails
                = new AzureBlobDataTransferDataSourceSinkDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("endpointUrl".equals(fieldName)) {
                    deserializedAzureBlobDataTransferDataSourceSinkDetails.endpointUrl = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAzureBlobDataTransferDataSourceSinkDetails;
        });
    }
}
