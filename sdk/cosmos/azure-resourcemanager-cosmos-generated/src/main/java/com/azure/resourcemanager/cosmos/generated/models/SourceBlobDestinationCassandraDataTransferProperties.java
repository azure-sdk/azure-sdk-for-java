// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.exception.ManagementError;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The properties of DataTransfer Job with Azure Blob Storage as source and CosmosDB Cassandra as destination.
 */
@Fluent
public final class SourceBlobDestinationCassandraDataTransferProperties extends DataTransferJobProperties {
    /*
     * Date Transfer Type
     */
    private DataTransferJobPropertiesDataTransferType dataTransferType
        = DataTransferJobPropertiesDataTransferType.AZURE_BLOB_STORAGE_TO_COSMOS_DBCASSANDRA;

    /*
     * Azure Storage container DataStore details
     */
    private AzureBlobDataTransferDataSourceSinkDetails sourceDetails;

    /*
     * Destination Cassandra DataStore details
     */
    private CosmosDataTransferDataSourceSinkDetails destinationDetails;

    /*
     * The tasks property.
     */
    private List<SourceBlobDestinationCassandraDataTransferPropertiesTasksItem> tasks;

    /**
     * Creates an instance of SourceBlobDestinationCassandraDataTransferProperties class.
     */
    public SourceBlobDestinationCassandraDataTransferProperties() {
    }

    /**
     * Get the dataTransferType property: Date Transfer Type.
     * 
     * @return the dataTransferType value.
     */
    @Override
    public DataTransferJobPropertiesDataTransferType dataTransferType() {
        return this.dataTransferType;
    }

    /**
     * Get the sourceDetails property: Azure Storage container DataStore details.
     * 
     * @return the sourceDetails value.
     */
    public AzureBlobDataTransferDataSourceSinkDetails sourceDetails() {
        return this.sourceDetails;
    }

    /**
     * Set the sourceDetails property: Azure Storage container DataStore details.
     * 
     * @param sourceDetails the sourceDetails value to set.
     * @return the SourceBlobDestinationCassandraDataTransferProperties object itself.
     */
    public SourceBlobDestinationCassandraDataTransferProperties
        withSourceDetails(AzureBlobDataTransferDataSourceSinkDetails sourceDetails) {
        this.sourceDetails = sourceDetails;
        return this;
    }

    /**
     * Get the destinationDetails property: Destination Cassandra DataStore details.
     * 
     * @return the destinationDetails value.
     */
    public CosmosDataTransferDataSourceSinkDetails destinationDetails() {
        return this.destinationDetails;
    }

    /**
     * Set the destinationDetails property: Destination Cassandra DataStore details.
     * 
     * @param destinationDetails the destinationDetails value to set.
     * @return the SourceBlobDestinationCassandraDataTransferProperties object itself.
     */
    public SourceBlobDestinationCassandraDataTransferProperties
        withDestinationDetails(CosmosDataTransferDataSourceSinkDetails destinationDetails) {
        this.destinationDetails = destinationDetails;
        return this;
    }

    /**
     * Get the tasks property: The tasks property.
     * 
     * @return the tasks value.
     */
    public List<SourceBlobDestinationCassandraDataTransferPropertiesTasksItem> tasks() {
        return this.tasks;
    }

    /**
     * Set the tasks property: The tasks property.
     * 
     * @param tasks the tasks value to set.
     * @return the SourceBlobDestinationCassandraDataTransferProperties object itself.
     */
    public SourceBlobDestinationCassandraDataTransferProperties
        withTasks(List<SourceBlobDestinationCassandraDataTransferPropertiesTasksItem> tasks) {
        this.tasks = tasks;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SourceBlobDestinationCassandraDataTransferProperties withWorkerCount(Integer workerCount) {
        super.withWorkerCount(workerCount);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SourceBlobDestinationCassandraDataTransferProperties withMode(DataTransferJobMode mode) {
        super.withMode(mode);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (sourceDetails() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property sourceDetails in model SourceBlobDestinationCassandraDataTransferProperties"));
        } else {
            sourceDetails().validate();
        }
        if (destinationDetails() != null) {
            destinationDetails().validate();
        }
        if (tasks() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property tasks in model SourceBlobDestinationCassandraDataTransferProperties"));
        } else {
            tasks().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER
        = new ClientLogger(SourceBlobDestinationCassandraDataTransferProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("workerCount", workerCount());
        jsonWriter.writeStringField("mode", mode() == null ? null : mode().toString());
        jsonWriter.writeJsonField("sourceDetails", this.sourceDetails);
        jsonWriter.writeArrayField("tasks", this.tasks, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("dataTransferType",
            this.dataTransferType == null ? null : this.dataTransferType.toString());
        jsonWriter.writeJsonField("destinationDetails", this.destinationDetails);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SourceBlobDestinationCassandraDataTransferProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SourceBlobDestinationCassandraDataTransferProperties if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SourceBlobDestinationCassandraDataTransferProperties.
     */
    public static SourceBlobDestinationCassandraDataTransferProperties fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            SourceBlobDestinationCassandraDataTransferProperties deserializedSourceBlobDestinationCassandraDataTransferProperties
                = new SourceBlobDestinationCassandraDataTransferProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("jobName".equals(fieldName)) {
                    deserializedSourceBlobDestinationCassandraDataTransferProperties.withJobName(reader.getString());
                } else if ("status".equals(fieldName)) {
                    deserializedSourceBlobDestinationCassandraDataTransferProperties.withStatus(reader.getString());
                } else if ("processedCount".equals(fieldName)) {
                    deserializedSourceBlobDestinationCassandraDataTransferProperties
                        .withProcessedCount(reader.getNullable(JsonReader::getLong));
                } else if ("totalCount".equals(fieldName)) {
                    deserializedSourceBlobDestinationCassandraDataTransferProperties
                        .withTotalCount(reader.getNullable(JsonReader::getLong));
                } else if ("lastUpdatedUtcTime".equals(fieldName)) {
                    deserializedSourceBlobDestinationCassandraDataTransferProperties.withLastUpdatedUtcTime(reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString())));
                } else if ("workerCount".equals(fieldName)) {
                    deserializedSourceBlobDestinationCassandraDataTransferProperties
                        .withWorkerCount(reader.getNullable(JsonReader::getInt));
                } else if ("error".equals(fieldName)) {
                    deserializedSourceBlobDestinationCassandraDataTransferProperties
                        .withError(ManagementError.fromJson(reader));
                } else if ("duration".equals(fieldName)) {
                    deserializedSourceBlobDestinationCassandraDataTransferProperties.withDuration(reader.getString());
                } else if ("mode".equals(fieldName)) {
                    deserializedSourceBlobDestinationCassandraDataTransferProperties
                        .withMode(DataTransferJobMode.fromString(reader.getString()));
                } else if ("sourceDetails".equals(fieldName)) {
                    deserializedSourceBlobDestinationCassandraDataTransferProperties.sourceDetails
                        = AzureBlobDataTransferDataSourceSinkDetails.fromJson(reader);
                } else if ("tasks".equals(fieldName)) {
                    List<SourceBlobDestinationCassandraDataTransferPropertiesTasksItem> tasks = reader.readArray(
                        reader1 -> SourceBlobDestinationCassandraDataTransferPropertiesTasksItem.fromJson(reader1));
                    deserializedSourceBlobDestinationCassandraDataTransferProperties.tasks = tasks;
                } else if ("dataTransferType".equals(fieldName)) {
                    deserializedSourceBlobDestinationCassandraDataTransferProperties.dataTransferType
                        = DataTransferJobPropertiesDataTransferType.fromString(reader.getString());
                } else if ("destinationDetails".equals(fieldName)) {
                    deserializedSourceBlobDestinationCassandraDataTransferProperties.destinationDetails
                        = CosmosDataTransferDataSourceSinkDetails.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSourceBlobDestinationCassandraDataTransferProperties;
        });
    }
}
