// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Configuration for throughput pool in the fleetspace.
 */
@Fluent
public final class FleetspacePropertiesThroughputPoolConfiguration
    implements JsonSerializable<FleetspacePropertiesThroughputPoolConfiguration> {
    /*
     * Minimum throughput for the pool.
     */
    private Integer minThroughput;

    /*
     * Maximum throughput for the pool.
     */
    private Integer maxThroughput;

    /*
     * Service Tier for the fleetspace. GeneralPurpose types refers to single write region accounts that can be added to
     * this fleetspace, whereas BusinessCritical refers to multi write region.
     */
    private FleetspacePropertiesThroughputPoolConfigurationServiceTier serviceTier;

    /*
     * List of data regions assigned to the fleetspace. Eg [westus2]
     */
    private List<String> dataRegions;

    /**
     * Creates an instance of FleetspacePropertiesThroughputPoolConfiguration class.
     */
    public FleetspacePropertiesThroughputPoolConfiguration() {
    }

    /**
     * Get the minThroughput property: Minimum throughput for the pool.
     * 
     * @return the minThroughput value.
     */
    public Integer minThroughput() {
        return this.minThroughput;
    }

    /**
     * Set the minThroughput property: Minimum throughput for the pool.
     * 
     * @param minThroughput the minThroughput value to set.
     * @return the FleetspacePropertiesThroughputPoolConfiguration object itself.
     */
    public FleetspacePropertiesThroughputPoolConfiguration withMinThroughput(Integer minThroughput) {
        this.minThroughput = minThroughput;
        return this;
    }

    /**
     * Get the maxThroughput property: Maximum throughput for the pool.
     * 
     * @return the maxThroughput value.
     */
    public Integer maxThroughput() {
        return this.maxThroughput;
    }

    /**
     * Set the maxThroughput property: Maximum throughput for the pool.
     * 
     * @param maxThroughput the maxThroughput value to set.
     * @return the FleetspacePropertiesThroughputPoolConfiguration object itself.
     */
    public FleetspacePropertiesThroughputPoolConfiguration withMaxThroughput(Integer maxThroughput) {
        this.maxThroughput = maxThroughput;
        return this;
    }

    /**
     * Get the serviceTier property: Service Tier for the fleetspace. GeneralPurpose types refers to single write region
     * accounts that can be added to this fleetspace, whereas BusinessCritical refers to multi write region.
     * 
     * @return the serviceTier value.
     */
    public FleetspacePropertiesThroughputPoolConfigurationServiceTier serviceTier() {
        return this.serviceTier;
    }

    /**
     * Set the serviceTier property: Service Tier for the fleetspace. GeneralPurpose types refers to single write region
     * accounts that can be added to this fleetspace, whereas BusinessCritical refers to multi write region.
     * 
     * @param serviceTier the serviceTier value to set.
     * @return the FleetspacePropertiesThroughputPoolConfiguration object itself.
     */
    public FleetspacePropertiesThroughputPoolConfiguration
        withServiceTier(FleetspacePropertiesThroughputPoolConfigurationServiceTier serviceTier) {
        this.serviceTier = serviceTier;
        return this;
    }

    /**
     * Get the dataRegions property: List of data regions assigned to the fleetspace. Eg [westus2].
     * 
     * @return the dataRegions value.
     */
    public List<String> dataRegions() {
        return this.dataRegions;
    }

    /**
     * Set the dataRegions property: List of data regions assigned to the fleetspace. Eg [westus2].
     * 
     * @param dataRegions the dataRegions value to set.
     * @return the FleetspacePropertiesThroughputPoolConfiguration object itself.
     */
    public FleetspacePropertiesThroughputPoolConfiguration withDataRegions(List<String> dataRegions) {
        this.dataRegions = dataRegions;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("minThroughput", this.minThroughput);
        jsonWriter.writeNumberField("maxThroughput", this.maxThroughput);
        jsonWriter.writeStringField("serviceTier", this.serviceTier == null ? null : this.serviceTier.toString());
        jsonWriter.writeArrayField("dataRegions", this.dataRegions, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FleetspacePropertiesThroughputPoolConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FleetspacePropertiesThroughputPoolConfiguration if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the FleetspacePropertiesThroughputPoolConfiguration.
     */
    public static FleetspacePropertiesThroughputPoolConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FleetspacePropertiesThroughputPoolConfiguration deserializedFleetspacePropertiesThroughputPoolConfiguration
                = new FleetspacePropertiesThroughputPoolConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("minThroughput".equals(fieldName)) {
                    deserializedFleetspacePropertiesThroughputPoolConfiguration.minThroughput
                        = reader.getNullable(JsonReader::getInt);
                } else if ("maxThroughput".equals(fieldName)) {
                    deserializedFleetspacePropertiesThroughputPoolConfiguration.maxThroughput
                        = reader.getNullable(JsonReader::getInt);
                } else if ("serviceTier".equals(fieldName)) {
                    deserializedFleetspacePropertiesThroughputPoolConfiguration.serviceTier
                        = FleetspacePropertiesThroughputPoolConfigurationServiceTier.fromString(reader.getString());
                } else if ("dataRegions".equals(fieldName)) {
                    List<String> dataRegions = reader.readArray(reader1 -> reader1.getString());
                    deserializedFleetspacePropertiesThroughputPoolConfiguration.dataRegions = dataRegions;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFleetspacePropertiesThroughputPoolConfiguration;
        });
    }
}
