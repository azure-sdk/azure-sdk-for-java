// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Azure Cosmos DB Cassandra Role Assignment resource object.
 */
@Fluent
public final class CassandraRoleAssignmentResourceProperties
    implements JsonSerializable<CassandraRoleAssignmentResourceProperties> {
    /*
     * The unique identifier for the associated Role Definition.
     */
    private String roleDefinitionId;

    /*
     * The data plane resource path for which access is being granted through this Cassandra Role Assignment.
     */
    private String scope;

    /*
     * The unique identifier for the associated AAD principal in the AAD graph to which access is being granted through
     * this Cassandra Role Assignment. Tenant ID for the principal is inferred using the tenant associated with the
     * subscription.
     */
    private String principalId;

    /*
     * Provisioning state of the resource.
     */
    private String provisioningState;

    /**
     * Creates an instance of CassandraRoleAssignmentResourceProperties class.
     */
    public CassandraRoleAssignmentResourceProperties() {
    }

    /**
     * Get the roleDefinitionId property: The unique identifier for the associated Role Definition.
     * 
     * @return the roleDefinitionId value.
     */
    public String roleDefinitionId() {
        return this.roleDefinitionId;
    }

    /**
     * Set the roleDefinitionId property: The unique identifier for the associated Role Definition.
     * 
     * @param roleDefinitionId the roleDefinitionId value to set.
     * @return the CassandraRoleAssignmentResourceProperties object itself.
     */
    public CassandraRoleAssignmentResourceProperties withRoleDefinitionId(String roleDefinitionId) {
        this.roleDefinitionId = roleDefinitionId;
        return this;
    }

    /**
     * Get the scope property: The data plane resource path for which access is being granted through this Cassandra
     * Role Assignment.
     * 
     * @return the scope value.
     */
    public String scope() {
        return this.scope;
    }

    /**
     * Set the scope property: The data plane resource path for which access is being granted through this Cassandra
     * Role Assignment.
     * 
     * @param scope the scope value to set.
     * @return the CassandraRoleAssignmentResourceProperties object itself.
     */
    public CassandraRoleAssignmentResourceProperties withScope(String scope) {
        this.scope = scope;
        return this;
    }

    /**
     * Get the principalId property: The unique identifier for the associated AAD principal in the AAD graph to which
     * access is being granted through this Cassandra Role Assignment. Tenant ID for the principal is inferred using the
     * tenant associated with the subscription.
     * 
     * @return the principalId value.
     */
    public String principalId() {
        return this.principalId;
    }

    /**
     * Set the principalId property: The unique identifier for the associated AAD principal in the AAD graph to which
     * access is being granted through this Cassandra Role Assignment. Tenant ID for the principal is inferred using the
     * tenant associated with the subscription.
     * 
     * @param principalId the principalId value to set.
     * @return the CassandraRoleAssignmentResourceProperties object itself.
     */
    public CassandraRoleAssignmentResourceProperties withPrincipalId(String principalId) {
        this.principalId = principalId;
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state of the resource.
     * 
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("roleDefinitionId", this.roleDefinitionId);
        jsonWriter.writeStringField("scope", this.scope);
        jsonWriter.writeStringField("principalId", this.principalId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CassandraRoleAssignmentResourceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CassandraRoleAssignmentResourceProperties if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the CassandraRoleAssignmentResourceProperties.
     */
    public static CassandraRoleAssignmentResourceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CassandraRoleAssignmentResourceProperties deserializedCassandraRoleAssignmentResourceProperties
                = new CassandraRoleAssignmentResourceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("roleDefinitionId".equals(fieldName)) {
                    deserializedCassandraRoleAssignmentResourceProperties.roleDefinitionId = reader.getString();
                } else if ("scope".equals(fieldName)) {
                    deserializedCassandraRoleAssignmentResourceProperties.scope = reader.getString();
                } else if ("principalId".equals(fieldName)) {
                    deserializedCassandraRoleAssignmentResourceProperties.principalId = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedCassandraRoleAssignmentResourceProperties.provisioningState = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCassandraRoleAssignmentResourceProperties;
        });
    }
}
