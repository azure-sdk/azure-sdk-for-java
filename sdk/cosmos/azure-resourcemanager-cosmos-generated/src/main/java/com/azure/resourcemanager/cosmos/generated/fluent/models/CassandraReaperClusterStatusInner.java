// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.cosmos.generated.models.CassandraReaperNodeStatus;
import com.azure.resourcemanager.cosmos.generated.models.CassandraReaperScheduleStatus;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** The CassandraReaperClusterStatus model. */
@Fluent
public final class CassandraReaperClusterStatusInner {
    /*
     * The name property.
     */
    @JsonProperty(value = "name")
    private String name;

    /*
     * The jmx_username property.
     */
    @JsonProperty(value = "jmx_username")
    private String jmxUsername;

    /*
     * The jmx_password_is_set property.
     */
    @JsonProperty(value = "jmx_password_is_set")
    private Boolean jmxPasswordIsSet;

    /*
     * The seed_hosts property.
     */
    @JsonProperty(value = "seed_hosts")
    private List<String> seedHosts;

    /*
     * The repair_runs property.
     */
    @JsonProperty(value = "repair_runs")
    private List<CassandraReaperRunStatusInner> repairRuns;

    /*
     * The repair_schedules property.
     */
    @JsonProperty(value = "repair_schedules")
    private List<CassandraReaperScheduleStatus> repairSchedules;

    /*
     * The nodes_status property.
     */
    @JsonProperty(value = "nodes_status")
    private CassandraReaperNodeStatus nodesStatus;

    /** Creates an instance of CassandraReaperClusterStatusInner class. */
    public CassandraReaperClusterStatusInner() {
    }

    /**
     * Get the name property: The name property.
     *
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The name property.
     *
     * @param name the name value to set.
     * @return the CassandraReaperClusterStatusInner object itself.
     */
    public CassandraReaperClusterStatusInner withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the jmxUsername property: The jmx_username property.
     *
     * @return the jmxUsername value.
     */
    public String jmxUsername() {
        return this.jmxUsername;
    }

    /**
     * Set the jmxUsername property: The jmx_username property.
     *
     * @param jmxUsername the jmxUsername value to set.
     * @return the CassandraReaperClusterStatusInner object itself.
     */
    public CassandraReaperClusterStatusInner withJmxUsername(String jmxUsername) {
        this.jmxUsername = jmxUsername;
        return this;
    }

    /**
     * Get the jmxPasswordIsSet property: The jmx_password_is_set property.
     *
     * @return the jmxPasswordIsSet value.
     */
    public Boolean jmxPasswordIsSet() {
        return this.jmxPasswordIsSet;
    }

    /**
     * Set the jmxPasswordIsSet property: The jmx_password_is_set property.
     *
     * @param jmxPasswordIsSet the jmxPasswordIsSet value to set.
     * @return the CassandraReaperClusterStatusInner object itself.
     */
    public CassandraReaperClusterStatusInner withJmxPasswordIsSet(Boolean jmxPasswordIsSet) {
        this.jmxPasswordIsSet = jmxPasswordIsSet;
        return this;
    }

    /**
     * Get the seedHosts property: The seed_hosts property.
     *
     * @return the seedHosts value.
     */
    public List<String> seedHosts() {
        return this.seedHosts;
    }

    /**
     * Set the seedHosts property: The seed_hosts property.
     *
     * @param seedHosts the seedHosts value to set.
     * @return the CassandraReaperClusterStatusInner object itself.
     */
    public CassandraReaperClusterStatusInner withSeedHosts(List<String> seedHosts) {
        this.seedHosts = seedHosts;
        return this;
    }

    /**
     * Get the repairRuns property: The repair_runs property.
     *
     * @return the repairRuns value.
     */
    public List<CassandraReaperRunStatusInner> repairRuns() {
        return this.repairRuns;
    }

    /**
     * Set the repairRuns property: The repair_runs property.
     *
     * @param repairRuns the repairRuns value to set.
     * @return the CassandraReaperClusterStatusInner object itself.
     */
    public CassandraReaperClusterStatusInner withRepairRuns(List<CassandraReaperRunStatusInner> repairRuns) {
        this.repairRuns = repairRuns;
        return this;
    }

    /**
     * Get the repairSchedules property: The repair_schedules property.
     *
     * @return the repairSchedules value.
     */
    public List<CassandraReaperScheduleStatus> repairSchedules() {
        return this.repairSchedules;
    }

    /**
     * Set the repairSchedules property: The repair_schedules property.
     *
     * @param repairSchedules the repairSchedules value to set.
     * @return the CassandraReaperClusterStatusInner object itself.
     */
    public CassandraReaperClusterStatusInner withRepairSchedules(List<CassandraReaperScheduleStatus> repairSchedules) {
        this.repairSchedules = repairSchedules;
        return this;
    }

    /**
     * Get the nodesStatus property: The nodes_status property.
     *
     * @return the nodesStatus value.
     */
    public CassandraReaperNodeStatus nodesStatus() {
        return this.nodesStatus;
    }

    /**
     * Set the nodesStatus property: The nodes_status property.
     *
     * @param nodesStatus the nodesStatus value to set.
     * @return the CassandraReaperClusterStatusInner object itself.
     */
    public CassandraReaperClusterStatusInner withNodesStatus(CassandraReaperNodeStatus nodesStatus) {
        this.nodesStatus = nodesStatus;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (repairRuns() != null) {
            repairRuns().forEach(e -> e.validate());
        }
        if (repairSchedules() != null) {
            repairSchedules().forEach(e -> e.validate());
        }
        if (nodesStatus() != null) {
            nodesStatus().validate();
        }
    }
}
