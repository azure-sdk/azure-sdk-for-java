// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.exception.ManagementError;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * The properties of a DataTransfer Job.
 */
@Fluent
public class DataTransferJobProperties implements JsonSerializable<DataTransferJobProperties> {
    /*
     * Date Transfer Type
     */
    private DataTransferJobPropertiesDataTransferType dataTransferType
        = DataTransferJobPropertiesDataTransferType.fromString("DataTransferJobProperties");

    /*
     * Job Name
     */
    private String jobName;

    /*
     * Job Status
     */
    private String status;

    /*
     * Processed Count.
     */
    private Long processedCount;

    /*
     * Total Count.
     */
    private Long totalCount;

    /*
     * Last Updated Time (ISO-8601 format).
     */
    private OffsetDateTime lastUpdatedUtcTime;

    /*
     * Worker count
     */
    private Integer workerCount;

    /*
     * Error response for Faulted job
     */
    private ManagementError error;

    /*
     * Total Duration of Job
     */
    private String duration;

    /*
     * Mode of job execution
     */
    private DataTransferJobMode mode;

    /**
     * Creates an instance of DataTransferJobProperties class.
     */
    public DataTransferJobProperties() {
    }

    /**
     * Get the dataTransferType property: Date Transfer Type.
     * 
     * @return the dataTransferType value.
     */
    public DataTransferJobPropertiesDataTransferType dataTransferType() {
        return this.dataTransferType;
    }

    /**
     * Get the jobName property: Job Name.
     * 
     * @return the jobName value.
     */
    public String jobName() {
        return this.jobName;
    }

    /**
     * Set the jobName property: Job Name.
     * 
     * @param jobName the jobName value to set.
     * @return the DataTransferJobProperties object itself.
     */
    DataTransferJobProperties withJobName(String jobName) {
        this.jobName = jobName;
        return this;
    }

    /**
     * Get the status property: Job Status.
     * 
     * @return the status value.
     */
    public String status() {
        return this.status;
    }

    /**
     * Set the status property: Job Status.
     * 
     * @param status the status value to set.
     * @return the DataTransferJobProperties object itself.
     */
    DataTransferJobProperties withStatus(String status) {
        this.status = status;
        return this;
    }

    /**
     * Get the processedCount property: Processed Count.
     * 
     * @return the processedCount value.
     */
    public Long processedCount() {
        return this.processedCount;
    }

    /**
     * Set the processedCount property: Processed Count.
     * 
     * @param processedCount the processedCount value to set.
     * @return the DataTransferJobProperties object itself.
     */
    DataTransferJobProperties withProcessedCount(Long processedCount) {
        this.processedCount = processedCount;
        return this;
    }

    /**
     * Get the totalCount property: Total Count.
     * 
     * @return the totalCount value.
     */
    public Long totalCount() {
        return this.totalCount;
    }

    /**
     * Set the totalCount property: Total Count.
     * 
     * @param totalCount the totalCount value to set.
     * @return the DataTransferJobProperties object itself.
     */
    DataTransferJobProperties withTotalCount(Long totalCount) {
        this.totalCount = totalCount;
        return this;
    }

    /**
     * Get the lastUpdatedUtcTime property: Last Updated Time (ISO-8601 format).
     * 
     * @return the lastUpdatedUtcTime value.
     */
    public OffsetDateTime lastUpdatedUtcTime() {
        return this.lastUpdatedUtcTime;
    }

    /**
     * Set the lastUpdatedUtcTime property: Last Updated Time (ISO-8601 format).
     * 
     * @param lastUpdatedUtcTime the lastUpdatedUtcTime value to set.
     * @return the DataTransferJobProperties object itself.
     */
    DataTransferJobProperties withLastUpdatedUtcTime(OffsetDateTime lastUpdatedUtcTime) {
        this.lastUpdatedUtcTime = lastUpdatedUtcTime;
        return this;
    }

    /**
     * Get the workerCount property: Worker count.
     * 
     * @return the workerCount value.
     */
    public Integer workerCount() {
        return this.workerCount;
    }

    /**
     * Set the workerCount property: Worker count.
     * 
     * @param workerCount the workerCount value to set.
     * @return the DataTransferJobProperties object itself.
     */
    public DataTransferJobProperties withWorkerCount(Integer workerCount) {
        this.workerCount = workerCount;
        return this;
    }

    /**
     * Get the error property: Error response for Faulted job.
     * 
     * @return the error value.
     */
    public ManagementError error() {
        return this.error;
    }

    /**
     * Set the error property: Error response for Faulted job.
     * 
     * @param error the error value to set.
     * @return the DataTransferJobProperties object itself.
     */
    DataTransferJobProperties withError(ManagementError error) {
        this.error = error;
        return this;
    }

    /**
     * Get the duration property: Total Duration of Job.
     * 
     * @return the duration value.
     */
    public String duration() {
        return this.duration;
    }

    /**
     * Set the duration property: Total Duration of Job.
     * 
     * @param duration the duration value to set.
     * @return the DataTransferJobProperties object itself.
     */
    DataTransferJobProperties withDuration(String duration) {
        this.duration = duration;
        return this;
    }

    /**
     * Get the mode property: Mode of job execution.
     * 
     * @return the mode value.
     */
    public DataTransferJobMode mode() {
        return this.mode;
    }

    /**
     * Set the mode property: Mode of job execution.
     * 
     * @param mode the mode value to set.
     * @return the DataTransferJobProperties object itself.
     */
    public DataTransferJobProperties withMode(DataTransferJobMode mode) {
        this.mode = mode;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("dataTransferType",
            this.dataTransferType == null ? null : this.dataTransferType.toString());
        jsonWriter.writeNumberField("workerCount", this.workerCount);
        jsonWriter.writeStringField("mode", this.mode == null ? null : this.mode.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DataTransferJobProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DataTransferJobProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DataTransferJobProperties.
     */
    public static DataTransferJobProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("dataTransferType".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("AzureBlobStorageToCosmosDBCassandra".equals(discriminatorValue)) {
                    return SourceBlobDestinationCassandraDataTransferProperties.fromJson(readerToUse.reset());
                } else if ("CosmosDBCassandraToCosmosDBCassandra".equals(discriminatorValue)) {
                    return SourceCassandraDestinationCassandraDataTransferProperties.fromJson(readerToUse.reset());
                } else if ("CosmosDBCassandraToAzureBlobStorage".equals(discriminatorValue)) {
                    return SourceCassandraDestinationBlobDataTransferProperties.fromJson(readerToUse.reset());
                } else if ("CosmosDBMongoToCosmosDBMongo".equals(discriminatorValue)) {
                    return SourceMongoDestinationMongoDataTransferProperties.fromJson(readerToUse.reset());
                } else if ("CosmosDBMongoToCosmosDBMongoVCore".equals(discriminatorValue)) {
                    return SourceMongoDestinationMongoVCoreDataTransferProperties.fromJson(readerToUse.reset());
                } else if ("CosmosDBSqlToCosmosDBSql".equals(discriminatorValue)) {
                    return SourceSqlDestinationSqlDataTransferProperties.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    static DataTransferJobProperties fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DataTransferJobProperties deserializedDataTransferJobProperties = new DataTransferJobProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("dataTransferType".equals(fieldName)) {
                    deserializedDataTransferJobProperties.dataTransferType
                        = DataTransferJobPropertiesDataTransferType.fromString(reader.getString());
                } else if ("jobName".equals(fieldName)) {
                    deserializedDataTransferJobProperties.jobName = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedDataTransferJobProperties.status = reader.getString();
                } else if ("processedCount".equals(fieldName)) {
                    deserializedDataTransferJobProperties.processedCount = reader.getNullable(JsonReader::getLong);
                } else if ("totalCount".equals(fieldName)) {
                    deserializedDataTransferJobProperties.totalCount = reader.getNullable(JsonReader::getLong);
                } else if ("lastUpdatedUtcTime".equals(fieldName)) {
                    deserializedDataTransferJobProperties.lastUpdatedUtcTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("workerCount".equals(fieldName)) {
                    deserializedDataTransferJobProperties.workerCount = reader.getNullable(JsonReader::getInt);
                } else if ("error".equals(fieldName)) {
                    deserializedDataTransferJobProperties.error = ManagementError.fromJson(reader);
                } else if ("duration".equals(fieldName)) {
                    deserializedDataTransferJobProperties.duration = reader.getString();
                } else if ("mode".equals(fieldName)) {
                    deserializedDataTransferJobProperties.mode = DataTransferJobMode.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDataTransferJobProperties;
        });
    }
}
