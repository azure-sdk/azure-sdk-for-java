// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.cosmos.generated.fluent.FleetspaceAccountsClient;
import com.azure.resourcemanager.cosmos.generated.fluent.models.FleetspaceAccountResourceInner;
import com.azure.resourcemanager.cosmos.generated.models.FleetspaceAccountResource;
import com.azure.resourcemanager.cosmos.generated.models.FleetspaceAccounts;

public final class FleetspaceAccountsImpl implements FleetspaceAccounts {
    private static final ClientLogger LOGGER = new ClientLogger(FleetspaceAccountsImpl.class);

    private final FleetspaceAccountsClient innerClient;

    private final com.azure.resourcemanager.cosmos.generated.CosmosDBManager serviceManager;

    public FleetspaceAccountsImpl(FleetspaceAccountsClient innerClient,
        com.azure.resourcemanager.cosmos.generated.CosmosDBManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<FleetspaceAccountResource> list(String resourceGroupName, String fleetName,
        String fleetspaceName) {
        PagedIterable<FleetspaceAccountResourceInner> inner
            = this.serviceClient().list(resourceGroupName, fleetName, fleetspaceName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new FleetspaceAccountResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<FleetspaceAccountResource> list(String resourceGroupName, String fleetName,
        String fleetspaceName, Context context) {
        PagedIterable<FleetspaceAccountResourceInner> inner
            = this.serviceClient().list(resourceGroupName, fleetName, fleetspaceName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new FleetspaceAccountResourceImpl(inner1, this.manager()));
    }

    public Response<FleetspaceAccountResource> getWithResponse(String resourceGroupName, String fleetName,
        String fleetspaceName, String fleetspaceAccountName, Context context) {
        Response<FleetspaceAccountResourceInner> inner = this.serviceClient()
            .getWithResponse(resourceGroupName, fleetName, fleetspaceName, fleetspaceAccountName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new FleetspaceAccountResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public FleetspaceAccountResource get(String resourceGroupName, String fleetName, String fleetspaceName,
        String fleetspaceAccountName) {
        FleetspaceAccountResourceInner inner
            = this.serviceClient().get(resourceGroupName, fleetName, fleetspaceName, fleetspaceAccountName);
        if (inner != null) {
            return new FleetspaceAccountResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String fleetName, String fleetspaceName,
        String fleetspaceAccountName) {
        this.serviceClient().delete(resourceGroupName, fleetName, fleetspaceName, fleetspaceAccountName);
    }

    public void delete(String resourceGroupName, String fleetName, String fleetspaceName, String fleetspaceAccountName,
        Context context) {
        this.serviceClient().delete(resourceGroupName, fleetName, fleetspaceName, fleetspaceAccountName, context);
    }

    public FleetspaceAccountResource getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String fleetName = ResourceManagerUtils.getValueFromIdByName(id, "fleets");
        if (fleetName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'fleets'.", id)));
        }
        String fleetspaceName = ResourceManagerUtils.getValueFromIdByName(id, "fleetspaces");
        if (fleetspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'fleetspaces'.", id)));
        }
        String fleetspaceAccountName = ResourceManagerUtils.getValueFromIdByName(id, "fleetspaceAccounts");
        if (fleetspaceAccountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'fleetspaceAccounts'.", id)));
        }
        return this.getWithResponse(resourceGroupName, fleetName, fleetspaceName, fleetspaceAccountName, Context.NONE)
            .getValue();
    }

    public Response<FleetspaceAccountResource> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String fleetName = ResourceManagerUtils.getValueFromIdByName(id, "fleets");
        if (fleetName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'fleets'.", id)));
        }
        String fleetspaceName = ResourceManagerUtils.getValueFromIdByName(id, "fleetspaces");
        if (fleetspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'fleetspaces'.", id)));
        }
        String fleetspaceAccountName = ResourceManagerUtils.getValueFromIdByName(id, "fleetspaceAccounts");
        if (fleetspaceAccountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'fleetspaceAccounts'.", id)));
        }
        return this.getWithResponse(resourceGroupName, fleetName, fleetspaceName, fleetspaceAccountName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String fleetName = ResourceManagerUtils.getValueFromIdByName(id, "fleets");
        if (fleetName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'fleets'.", id)));
        }
        String fleetspaceName = ResourceManagerUtils.getValueFromIdByName(id, "fleetspaces");
        if (fleetspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'fleetspaces'.", id)));
        }
        String fleetspaceAccountName = ResourceManagerUtils.getValueFromIdByName(id, "fleetspaceAccounts");
        if (fleetspaceAccountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'fleetspaceAccounts'.", id)));
        }
        this.delete(resourceGroupName, fleetName, fleetspaceName, fleetspaceAccountName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String fleetName = ResourceManagerUtils.getValueFromIdByName(id, "fleets");
        if (fleetName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'fleets'.", id)));
        }
        String fleetspaceName = ResourceManagerUtils.getValueFromIdByName(id, "fleetspaces");
        if (fleetspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'fleetspaces'.", id)));
        }
        String fleetspaceAccountName = ResourceManagerUtils.getValueFromIdByName(id, "fleetspaceAccounts");
        if (fleetspaceAccountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'fleetspaceAccounts'.", id)));
        }
        this.delete(resourceGroupName, fleetName, fleetspaceName, fleetspaceAccountName, context);
    }

    private FleetspaceAccountsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.cosmos.generated.CosmosDBManager manager() {
        return this.serviceManager;
    }

    public FleetspaceAccountResourceImpl define(String name) {
        return new FleetspaceAccountResourceImpl(name, this.manager());
    }
}
