// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The CassandraClusterNodeRestoreResult model.
 */
@Fluent
public final class CassandraClusterNodeRestoreResult implements JsonSerializable<CassandraClusterNodeRestoreResult> {
    /*
     * Address of the node.
     */
    private String address;

    /*
     * The status of the command.
     */
    private String state;

    /*
     * Time restore started on node.
     */
    private String startTimestamp;

    /*
     * Time restore ended on node.
     */
    private String endTimestamp;

    /**
     * Creates an instance of CassandraClusterNodeRestoreResult class.
     */
    public CassandraClusterNodeRestoreResult() {
    }

    /**
     * Get the address property: Address of the node.
     * 
     * @return the address value.
     */
    public String address() {
        return this.address;
    }

    /**
     * Set the address property: Address of the node.
     * 
     * @param address the address value to set.
     * @return the CassandraClusterNodeRestoreResult object itself.
     */
    public CassandraClusterNodeRestoreResult withAddress(String address) {
        this.address = address;
        return this;
    }

    /**
     * Get the state property: The status of the command.
     * 
     * @return the state value.
     */
    public String state() {
        return this.state;
    }

    /**
     * Set the state property: The status of the command.
     * 
     * @param state the state value to set.
     * @return the CassandraClusterNodeRestoreResult object itself.
     */
    public CassandraClusterNodeRestoreResult withState(String state) {
        this.state = state;
        return this;
    }

    /**
     * Get the startTimestamp property: Time restore started on node.
     * 
     * @return the startTimestamp value.
     */
    public String startTimestamp() {
        return this.startTimestamp;
    }

    /**
     * Set the startTimestamp property: Time restore started on node.
     * 
     * @param startTimestamp the startTimestamp value to set.
     * @return the CassandraClusterNodeRestoreResult object itself.
     */
    public CassandraClusterNodeRestoreResult withStartTimestamp(String startTimestamp) {
        this.startTimestamp = startTimestamp;
        return this;
    }

    /**
     * Get the endTimestamp property: Time restore ended on node.
     * 
     * @return the endTimestamp value.
     */
    public String endTimestamp() {
        return this.endTimestamp;
    }

    /**
     * Set the endTimestamp property: Time restore ended on node.
     * 
     * @param endTimestamp the endTimestamp value to set.
     * @return the CassandraClusterNodeRestoreResult object itself.
     */
    public CassandraClusterNodeRestoreResult withEndTimestamp(String endTimestamp) {
        this.endTimestamp = endTimestamp;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("address", this.address);
        jsonWriter.writeStringField("state", this.state);
        jsonWriter.writeStringField("startTimestamp", this.startTimestamp);
        jsonWriter.writeStringField("endTimestamp", this.endTimestamp);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CassandraClusterNodeRestoreResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CassandraClusterNodeRestoreResult if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the CassandraClusterNodeRestoreResult.
     */
    public static CassandraClusterNodeRestoreResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CassandraClusterNodeRestoreResult deserializedCassandraClusterNodeRestoreResult
                = new CassandraClusterNodeRestoreResult();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("address".equals(fieldName)) {
                    deserializedCassandraClusterNodeRestoreResult.address = reader.getString();
                } else if ("state".equals(fieldName)) {
                    deserializedCassandraClusterNodeRestoreResult.state = reader.getString();
                } else if ("startTimestamp".equals(fieldName)) {
                    deserializedCassandraClusterNodeRestoreResult.startTimestamp = reader.getString();
                } else if ("endTimestamp".equals(fieldName)) {
                    deserializedCassandraClusterNodeRestoreResult.endTimestamp = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCassandraClusterNodeRestoreResult;
        });
    }
}
