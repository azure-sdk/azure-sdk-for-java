// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.generated.models;

import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.cosmos.generated.fluent.models.TableRoleDefinitionResourceInner;
import java.util.List;

/**
 * An immutable client-side representation of TableRoleDefinitionResource.
 */
public interface TableRoleDefinitionResource {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     * 
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     * 
     * @return the type value.
     */
    String type();

    /**
     * Gets the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * Gets the idPropertiesId property: The path id for the Role Definition.
     * 
     * @return the idPropertiesId value.
     */
    String idPropertiesId();

    /**
     * Gets the roleName property: A user-friendly name for the Role Definition. Must be unique for the database
     * account.
     * 
     * @return the roleName value.
     */
    String roleName();

    /**
     * Gets the typePropertiesType property: Indicates whether the Role Definition was built-in or user created.
     * 
     * @return the typePropertiesType value.
     */
    RoleDefinitionType typePropertiesType();

    /**
     * Gets the assignableScopes property: A set of fully qualified Scopes at or below which Table Role Assignments may
     * be created using this Role Definition. This will allow application of this Role Definition on the entire database
     * account or any underlying Database / Collection. Must have at least one element. Scopes higher than Database
     * account are not enforceable as assignable Scopes. Note that resources referenced in assignable Scopes need not
     * exist.
     * 
     * @return the assignableScopes value.
     */
    List<String> assignableScopes();

    /**
     * Gets the permissions property: The set of operations allowed through this Role Definition.
     * 
     * @return the permissions value.
     */
    List<PermissionAutoGenerated> permissions();

    /**
     * Gets the name of the resource group.
     * 
     * @return the name of the resource group.
     */
    String resourceGroupName();

    /**
     * Gets the inner com.azure.resourcemanager.cosmos.generated.fluent.models.TableRoleDefinitionResourceInner object.
     * 
     * @return the inner object.
     */
    TableRoleDefinitionResourceInner innerModel();

    /**
     * The entirety of the TableRoleDefinitionResource definition.
     */
    interface Definition
        extends DefinitionStages.Blank, DefinitionStages.WithParentResource, DefinitionStages.WithCreate {
    }

    /**
     * The TableRoleDefinitionResource definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of the TableRoleDefinitionResource definition.
         */
        interface Blank extends WithParentResource {
        }

        /**
         * The stage of the TableRoleDefinitionResource definition allowing to specify parent resource.
         */
        interface WithParentResource {
            /**
             * Specifies resourceGroupName, accountName.
             * 
             * @param resourceGroupName The name of the resource group. The name is case insensitive.
             * @param accountName Cosmos DB database account name.
             * @return the next definition stage.
             */
            WithCreate withExistingDatabaseAccount(String resourceGroupName, String accountName);
        }

        /**
         * The stage of the TableRoleDefinitionResource definition which contains all the minimum required properties
         * for the resource to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate extends DefinitionStages.WithIdPropertiesId, DefinitionStages.WithRoleName,
            DefinitionStages.WithTypePropertiesType, DefinitionStages.WithAssignableScopes,
            DefinitionStages.WithPermissions {
            /**
             * Executes the create request.
             * 
             * @return the created resource.
             */
            TableRoleDefinitionResource create();

            /**
             * Executes the create request.
             * 
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            TableRoleDefinitionResource create(Context context);
        }

        /**
         * The stage of the TableRoleDefinitionResource definition allowing to specify idPropertiesId.
         */
        interface WithIdPropertiesId {
            /**
             * Specifies the idPropertiesId property: The path id for the Role Definition..
             * 
             * @param idPropertiesId The path id for the Role Definition.
             * @return the next definition stage.
             */
            WithCreate withIdPropertiesId(String idPropertiesId);
        }

        /**
         * The stage of the TableRoleDefinitionResource definition allowing to specify roleName.
         */
        interface WithRoleName {
            /**
             * Specifies the roleName property: A user-friendly name for the Role Definition. Must be unique for the
             * database account..
             * 
             * @param roleName A user-friendly name for the Role Definition. Must be unique for the database account.
             * @return the next definition stage.
             */
            WithCreate withRoleName(String roleName);
        }

        /**
         * The stage of the TableRoleDefinitionResource definition allowing to specify typePropertiesType.
         */
        interface WithTypePropertiesType {
            /**
             * Specifies the typePropertiesType property: Indicates whether the Role Definition was built-in or user
             * created..
             * 
             * @param typePropertiesType Indicates whether the Role Definition was built-in or user created.
             * @return the next definition stage.
             */
            WithCreate withTypePropertiesType(RoleDefinitionType typePropertiesType);
        }

        /**
         * The stage of the TableRoleDefinitionResource definition allowing to specify assignableScopes.
         */
        interface WithAssignableScopes {
            /**
             * Specifies the assignableScopes property: A set of fully qualified Scopes at or below which Table Role
             * Assignments may be created using this Role Definition. This will allow application of this Role
             * Definition on the entire database account or any underlying Database / Collection. Must have at least one
             * element. Scopes higher than Database account are not enforceable as assignable Scopes. Note that
             * resources referenced in assignable Scopes need not exist..
             * 
             * @param assignableScopes A set of fully qualified Scopes at or below which Table Role Assignments may be
             * created using this Role Definition. This will allow application of this Role Definition on the entire
             * database account or any underlying Database / Collection. Must have at least one element. Scopes higher
             * than Database account are not enforceable as assignable Scopes. Note that resources referenced in
             * assignable Scopes need not exist.
             * @return the next definition stage.
             */
            WithCreate withAssignableScopes(List<String> assignableScopes);
        }

        /**
         * The stage of the TableRoleDefinitionResource definition allowing to specify permissions.
         */
        interface WithPermissions {
            /**
             * Specifies the permissions property: The set of operations allowed through this Role Definition..
             * 
             * @param permissions The set of operations allowed through this Role Definition.
             * @return the next definition stage.
             */
            WithCreate withPermissions(List<PermissionAutoGenerated> permissions);
        }
    }

    /**
     * Begins update for the TableRoleDefinitionResource resource.
     * 
     * @return the stage of resource update.
     */
    TableRoleDefinitionResource.Update update();

    /**
     * The template for TableRoleDefinitionResource update.
     */
    interface Update extends UpdateStages.WithIdPropertiesId, UpdateStages.WithRoleName,
        UpdateStages.WithTypePropertiesType, UpdateStages.WithAssignableScopes, UpdateStages.WithPermissions {
        /**
         * Executes the update request.
         * 
         * @return the updated resource.
         */
        TableRoleDefinitionResource apply();

        /**
         * Executes the update request.
         * 
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        TableRoleDefinitionResource apply(Context context);
    }

    /**
     * The TableRoleDefinitionResource update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the TableRoleDefinitionResource update allowing to specify idPropertiesId.
         */
        interface WithIdPropertiesId {
            /**
             * Specifies the idPropertiesId property: The path id for the Role Definition..
             * 
             * @param idPropertiesId The path id for the Role Definition.
             * @return the next definition stage.
             */
            Update withIdPropertiesId(String idPropertiesId);
        }

        /**
         * The stage of the TableRoleDefinitionResource update allowing to specify roleName.
         */
        interface WithRoleName {
            /**
             * Specifies the roleName property: A user-friendly name for the Role Definition. Must be unique for the
             * database account..
             * 
             * @param roleName A user-friendly name for the Role Definition. Must be unique for the database account.
             * @return the next definition stage.
             */
            Update withRoleName(String roleName);
        }

        /**
         * The stage of the TableRoleDefinitionResource update allowing to specify typePropertiesType.
         */
        interface WithTypePropertiesType {
            /**
             * Specifies the typePropertiesType property: Indicates whether the Role Definition was built-in or user
             * created..
             * 
             * @param typePropertiesType Indicates whether the Role Definition was built-in or user created.
             * @return the next definition stage.
             */
            Update withTypePropertiesType(RoleDefinitionType typePropertiesType);
        }

        /**
         * The stage of the TableRoleDefinitionResource update allowing to specify assignableScopes.
         */
        interface WithAssignableScopes {
            /**
             * Specifies the assignableScopes property: A set of fully qualified Scopes at or below which Table Role
             * Assignments may be created using this Role Definition. This will allow application of this Role
             * Definition on the entire database account or any underlying Database / Collection. Must have at least one
             * element. Scopes higher than Database account are not enforceable as assignable Scopes. Note that
             * resources referenced in assignable Scopes need not exist..
             * 
             * @param assignableScopes A set of fully qualified Scopes at or below which Table Role Assignments may be
             * created using this Role Definition. This will allow application of this Role Definition on the entire
             * database account or any underlying Database / Collection. Must have at least one element. Scopes higher
             * than Database account are not enforceable as assignable Scopes. Note that resources referenced in
             * assignable Scopes need not exist.
             * @return the next definition stage.
             */
            Update withAssignableScopes(List<String> assignableScopes);
        }

        /**
         * The stage of the TableRoleDefinitionResource update allowing to specify permissions.
         */
        interface WithPermissions {
            /**
             * Specifies the permissions property: The set of operations allowed through this Role Definition..
             * 
             * @param permissions The set of operations allowed through this Role Definition.
             * @return the next definition stage.
             */
            Update withPermissions(List<PermissionAutoGenerated> permissions);
        }
    }

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @return the refreshed resource.
     */
    TableRoleDefinitionResource refresh();

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    TableRoleDefinitionResource refresh(Context context);
}
