// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The properties of the node group on a cluster.
 */
@Fluent
public class NodeGroupProperties implements JsonSerializable<NodeGroupProperties> {
    /*
     * The resource sku for the node group. This defines the size of CPU and memory that is provisioned for each node.
     * Example values: 'M30', 'M40'.
     */
    private String sku;

    /*
     * The disk storage size for the node group in GB. Example values: 128, 256, 512, 1024.
     */
    private Long diskSizeGB;

    /*
     * Whether high availability is enabled on the node group.
     */
    private Boolean enableHa;

    /**
     * Creates an instance of NodeGroupProperties class.
     */
    public NodeGroupProperties() {
    }

    /**
     * Get the sku property: The resource sku for the node group. This defines the size of CPU and memory that is
     * provisioned for each node. Example values: 'M30', 'M40'.
     * 
     * @return the sku value.
     */
    public String sku() {
        return this.sku;
    }

    /**
     * Set the sku property: The resource sku for the node group. This defines the size of CPU and memory that is
     * provisioned for each node. Example values: 'M30', 'M40'.
     * 
     * @param sku the sku value to set.
     * @return the NodeGroupProperties object itself.
     */
    public NodeGroupProperties withSku(String sku) {
        this.sku = sku;
        return this;
    }

    /**
     * Get the diskSizeGB property: The disk storage size for the node group in GB. Example values: 128, 256, 512, 1024.
     * 
     * @return the diskSizeGB value.
     */
    public Long diskSizeGB() {
        return this.diskSizeGB;
    }

    /**
     * Set the diskSizeGB property: The disk storage size for the node group in GB. Example values: 128, 256, 512, 1024.
     * 
     * @param diskSizeGB the diskSizeGB value to set.
     * @return the NodeGroupProperties object itself.
     */
    public NodeGroupProperties withDiskSizeGB(Long diskSizeGB) {
        this.diskSizeGB = diskSizeGB;
        return this;
    }

    /**
     * Get the enableHa property: Whether high availability is enabled on the node group.
     * 
     * @return the enableHa value.
     */
    public Boolean enableHa() {
        return this.enableHa;
    }

    /**
     * Set the enableHa property: Whether high availability is enabled on the node group.
     * 
     * @param enableHa the enableHa value to set.
     * @return the NodeGroupProperties object itself.
     */
    public NodeGroupProperties withEnableHa(Boolean enableHa) {
        this.enableHa = enableHa;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("sku", this.sku);
        jsonWriter.writeNumberField("diskSizeGB", this.diskSizeGB);
        jsonWriter.writeBooleanField("enableHa", this.enableHa);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NodeGroupProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NodeGroupProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the NodeGroupProperties.
     */
    public static NodeGroupProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NodeGroupProperties deserializedNodeGroupProperties = new NodeGroupProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sku".equals(fieldName)) {
                    deserializedNodeGroupProperties.sku = reader.getString();
                } else if ("diskSizeGB".equals(fieldName)) {
                    deserializedNodeGroupProperties.diskSizeGB = reader.getNullable(JsonReader::getLong);
                } else if ("enableHa".equals(fieldName)) {
                    deserializedNodeGroupProperties.enableHa = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNodeGroupProperties;
        });
    }
}
