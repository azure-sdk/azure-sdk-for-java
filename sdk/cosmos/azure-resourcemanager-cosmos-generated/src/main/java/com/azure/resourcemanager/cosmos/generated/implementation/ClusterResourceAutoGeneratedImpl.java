// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.generated.implementation;

import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.cosmos.generated.fluent.models.ClusterResourceAutoGeneratedInner;
import com.azure.resourcemanager.cosmos.generated.fluent.models.ClusterResourceInner;
import com.azure.resourcemanager.cosmos.generated.models.ClusterResourceAutoGenerated;
import com.azure.resourcemanager.cosmos.generated.models.ClusterResourcePropertiesAutoGenerated;
import com.azure.resourcemanager.cosmos.generated.models.CommandOutput;
import com.azure.resourcemanager.cosmos.generated.models.CommandPostBody;
import com.azure.resourcemanager.cosmos.generated.models.ManagedCassandraManagedServiceIdentity;
import java.util.Collections;
import java.util.Map;

public final class ClusterResourceAutoGeneratedImpl
    implements ClusterResourceAutoGenerated,
        ClusterResourceAutoGenerated.Definition,
        ClusterResourceAutoGenerated.Update {
    private ClusterResourceAutoGeneratedInner innerObject;

    private final com.azure.resourcemanager.cosmos.generated.CosmosDBManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public ManagedCassandraManagedServiceIdentity identity() {
        return this.innerModel().identity();
    }

    public ClusterResourcePropertiesAutoGenerated properties() {
        return this.innerModel().properties();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public ClusterResourceAutoGeneratedInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.cosmos.generated.CosmosDBManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String clusterName;

    private ClusterResourceInner createBody;

    private ClusterResourceInner updateBody;

    public ClusterResourceAutoGeneratedImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public ClusterResourceAutoGenerated create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getCassandraClusters()
                .createUpdate(resourceGroupName, clusterName, createBody, Context.NONE);
        return this;
    }

    public ClusterResourceAutoGenerated create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getCassandraClusters()
                .createUpdate(resourceGroupName, clusterName, createBody, context);
        return this;
    }

    ClusterResourceAutoGeneratedImpl(
        String name, com.azure.resourcemanager.cosmos.generated.CosmosDBManager serviceManager) {
        this.innerObject = new ClusterResourceAutoGeneratedInner();
        this.serviceManager = serviceManager;
        this.clusterName = name;
        this.createBody = new ClusterResourceInner();
    }

    public ClusterResourceAutoGeneratedImpl update() {
        this.updateBody = new ClusterResourceInner();
        return this;
    }

    public ClusterResourceAutoGenerated apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getCassandraClusters()
                .update(resourceGroupName, clusterName, updateBody, Context.NONE);
        return this;
    }

    public ClusterResourceAutoGenerated apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getCassandraClusters()
                .update(resourceGroupName, clusterName, updateBody, context);
        return this;
    }

    ClusterResourceAutoGeneratedImpl(
        ClusterResourceAutoGeneratedInner innerObject,
        com.azure.resourcemanager.cosmos.generated.CosmosDBManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.clusterName = Utils.getValueFromIdByName(innerObject.id(), "cassandraClusters");
    }

    public ClusterResourceAutoGenerated refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getCassandraClusters()
                .getWithResponse(resourceGroupName, clusterName, Context.NONE)
                .getValue();
        return this;
    }

    public ClusterResourceAutoGenerated refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getCassandraClusters()
                .getWithResponse(resourceGroupName, clusterName, context)
                .getValue();
        return this;
    }

    public CommandOutput invokeCommand(CommandPostBody body) {
        return serviceManager.cassandraClusters().invokeCommand(resourceGroupName, clusterName, body);
    }

    public CommandOutput invokeCommand(CommandPostBody body, Context context) {
        return serviceManager.cassandraClusters().invokeCommand(resourceGroupName, clusterName, body, context);
    }

    public void deallocate() {
        serviceManager.cassandraClusters().deallocate(resourceGroupName, clusterName);
    }

    public void deallocate(Boolean xMsForceDeallocate, Context context) {
        serviceManager.cassandraClusters().deallocate(resourceGroupName, clusterName, xMsForceDeallocate, context);
    }

    public void start() {
        serviceManager.cassandraClusters().start(resourceGroupName, clusterName);
    }

    public void start(Context context) {
        serviceManager.cassandraClusters().start(resourceGroupName, clusterName, context);
    }

    public CommandOutput invokeCommand(CommandPostBody body) {
        return serviceManager.cassandraClusters().invokeCommand(resourceGroupName, clusterName, body);
    }

    public CommandOutput invokeCommand(CommandPostBody body, Context context) {
        return serviceManager.cassandraClusters().invokeCommand(resourceGroupName, clusterName, body, context);
    }

    public void deallocate() {
        serviceManager.cassandraClusters().deallocate(resourceGroupName, clusterName);
    }

    public void deallocate(Context context) {
        serviceManager.cassandraClusters().deallocate(resourceGroupName, clusterName, context);
    }

    public void start() {
        serviceManager.cassandraClusters().start(resourceGroupName, clusterName);
    }

    public void start(Context context) {
        serviceManager.cassandraClusters().start(resourceGroupName, clusterName, context);
    }

    public ClusterResourceAutoGeneratedImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public ClusterResourceAutoGeneratedImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public ClusterResourceAutoGeneratedImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.innerModel().withTags(tags);
            return this;
        }
    }

    public ClusterResourceAutoGeneratedImpl withIdentity(ManagedCassandraManagedServiceIdentity identity) {
        if (isInCreateMode()) {
            this.innerModel().withIdentity(identity);
            return this;
        } else {
            this.innerModel().withIdentity(identity);
            return this;
        }
    }

    public ClusterResourceAutoGeneratedImpl withProperties(ClusterResourcePropertiesAutoGenerated properties) {
        if (isInCreateMode()) {
            this.innerModel().withProperties(properties);
            return this;
        } else {
            this.innerModel().withProperties(properties);
            return this;
        }
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
