// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.roles;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.HttpHeaderName;
import com.azure.core.http.RequestConditions;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.DateTimeRfc1123;
import com.roles.implementation.RolesImpl;
import com.roles.models.Role;
import java.time.OffsetDateTime;

/**
 * Initializes a new instance of the synchronous IdentityClient type.
 */
@ServiceClient(builder = IdentityClientBuilder.class)
public final class IdentityClient {
    @Generated
    private final RolesImpl serviceClient;

    /**
     * Initializes an instance of IdentityClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    IdentityClient(RolesImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Get a role.
     * <p>
     * <strong>Header Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>If-Match</td>
     * <td>String</td>
     * <td>No</td>
     * <td>The request should only proceed if an entity matches this string.</td>
     * </tr>
     * <tr>
     * <td>If-None-Match</td>
     * <td>String</td>
     * <td>No</td>
     * <td>The request should only proceed if no entity matches this string.</td>
     * </tr>
     * <tr>
     * <td>If-Unmodified-Since</td>
     * <td>OffsetDateTime</td>
     * <td>No</td>
     * <td>The request should only proceed if the entity was not modified after this time.</td>
     * </tr>
     * <tr>
     * <td>If-Modified-Since</td>
     * <td>OffsetDateTime</td>
     * <td>No</td>
     * <td>The request should only proceed if the entity was modified after this time.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     isEnabled: boolean (Required)
     *     createdAt: OffsetDateTime (Required)
     *     updatedAt: OffsetDateTime (Required)
     *     permissions (Required): {
     *         chat (Required): {
     *             addParticipants: boolean (Required)
     *             removeSelf: boolean (Required)
     *             leaveChatThread: boolean (Required)
     *             removeParticipants: boolean (Required)
     *             listParticipants: boolean (Required)
     *             getOwnData: boolean (Required)
     *             getOthersData: boolean (Required)
     *             updateOwnData: boolean (Required)
     *             updateOthersData: boolean (Required)
     *             shareHistory: boolean (Required)
     *             getChatThreadProperties: boolean (Required)
     *             updateChatThreadProperties: boolean (Required)
     *             deleteChatThread: boolean (Required)
     *             sendMessage: boolean (Required)
     *             getMessages: boolean (Required)
     *             readMessages: boolean (Required)
     *             editOwnMessage: boolean (Required)
     *             editOthersMessage: boolean (Required)
     *             editAnyMessage: boolean (Required)
     *             annotateOwnMessage: boolean (Required)
     *             replyOwnMessage: boolean (Required)
     *             annotateOthersMessage: boolean (Required)
     *             replyOthersMessage: boolean (Required)
     *             deleteOwnMessage: boolean (Required)
     *             deleteOthersMessage: boolean (Required)
     *             deleteAnyMessage: boolean (Required)
     *             recoverOwnMessage: boolean (Required)
     *             recoverOthersMessage: boolean (Required)
     *             recoverAnyMessage: boolean (Required)
     *             getReadReceipts: boolean (Required)
     *             sendReadReceipt: boolean (Required)
     *             sendTypingNotification: boolean (Required)
     *         }
     *         calling (Required): {
     *             addParticipants: boolean (Required)
     *             addPstnParticipants: boolean (Required)
     *             removeSelf: boolean (Required)
     *             leaveCall: boolean (Required)
     *             removeParticipants: boolean (Required)
     *             removePstnParticipant: boolean (Required)
     *             listParticipants: boolean (Required)
     *             getOwnData: boolean (Required)
     *             getOthersData: boolean (Required)
     *             updateOwnData: boolean (Required)
     *             updateOthersData: boolean (Required)
     *             getCallProperties: boolean (Required)
     *             updateCallProperties: boolean (Required)
     *             admitLobbyParticipants: boolean (Required)
     *             denyLobbyParticipants: boolean (Required)
     *             bypassLobby: boolean (Required)
     *             deleteCall: boolean (Required)
     *             joinMeeting: boolean (Required)
     *             turnOnVideo: boolean (Required)
     *             shareVideo: boolean (Required)
     *             sendVideo: boolean (Required)
     *             restrictOthersVideo: boolean (Required)
     *             unrestrictOthersVideo: boolean (Required)
     *             turnOnAudio: boolean (Required)
     *             shareAudio: boolean (Required)
     *             sendAudio: boolean (Required)
     *             restrictOthersAudio: boolean (Required)
     *             unrestrictOthersAudio: boolean (Required)
     *             shareScreen: boolean (Required)
     *             shareContent: boolean (Required)
     *             muteSelf: boolean (Required)
     *             unmuteSelf: boolean (Required)
     *             muteOthers: boolean (Required)
     *             spotlightParticipants: boolean (Required)
     *             removeSpotlights: boolean (Required)
     *             removeParticipantsSpotlight: boolean (Required)
     *             startRecording: boolean (Required)
     *             stopRecording: boolean (Required)
     *             startLiveCaptions: boolean (Required)
     *             stopLiveCaptions: boolean (Required)
     *             raiseHand: boolean (Required)
     *             sendReaction: boolean (Required)
     *             hangUpForEveryOne: boolean (Required)
     *             endCallForAll: boolean (Required)
     *         }
     *     }
     * }
     * }</pre>
     * 
     * @param id The Role id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a role along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getRoleWithResponse(String id, RequestOptions requestOptions) {
        return this.serviceClient.getRoleWithResponse(id, requestOptions);
    }

    /**
     * Create or update a role.
     * <p>
     * <strong>Header Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>If-Match</td>
     * <td>String</td>
     * <td>No</td>
     * <td>The request should only proceed if an entity matches this string.</td>
     * </tr>
     * <tr>
     * <td>If-None-Match</td>
     * <td>String</td>
     * <td>No</td>
     * <td>The request should only proceed if no entity matches this string.</td>
     * </tr>
     * <tr>
     * <td>If-Unmodified-Since</td>
     * <td>OffsetDateTime</td>
     * <td>No</td>
     * <td>The request should only proceed if the entity was not modified after this time.</td>
     * </tr>
     * <tr>
     * <td>If-Modified-Since</td>
     * <td>OffsetDateTime</td>
     * <td>No</td>
     * <td>The request should only proceed if the entity was modified after this time.</td>
     * </tr>
     * <tr>
     * <td>repeatability-request-id</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Repeatability request ID header</td>
     * </tr>
     * <tr>
     * <td>repeatability-first-sent</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Repeatability first sent header as HTTP-date</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     isEnabled: boolean (Required)
     *     createdAt: OffsetDateTime (Required)
     *     updatedAt: OffsetDateTime (Required)
     *     permissions (Required): {
     *         chat (Required): {
     *             addParticipants: boolean (Required)
     *             removeSelf: boolean (Required)
     *             leaveChatThread: boolean (Required)
     *             removeParticipants: boolean (Required)
     *             listParticipants: boolean (Required)
     *             getOwnData: boolean (Required)
     *             getOthersData: boolean (Required)
     *             updateOwnData: boolean (Required)
     *             updateOthersData: boolean (Required)
     *             shareHistory: boolean (Required)
     *             getChatThreadProperties: boolean (Required)
     *             updateChatThreadProperties: boolean (Required)
     *             deleteChatThread: boolean (Required)
     *             sendMessage: boolean (Required)
     *             getMessages: boolean (Required)
     *             readMessages: boolean (Required)
     *             editOwnMessage: boolean (Required)
     *             editOthersMessage: boolean (Required)
     *             editAnyMessage: boolean (Required)
     *             annotateOwnMessage: boolean (Required)
     *             replyOwnMessage: boolean (Required)
     *             annotateOthersMessage: boolean (Required)
     *             replyOthersMessage: boolean (Required)
     *             deleteOwnMessage: boolean (Required)
     *             deleteOthersMessage: boolean (Required)
     *             deleteAnyMessage: boolean (Required)
     *             recoverOwnMessage: boolean (Required)
     *             recoverOthersMessage: boolean (Required)
     *             recoverAnyMessage: boolean (Required)
     *             getReadReceipts: boolean (Required)
     *             sendReadReceipt: boolean (Required)
     *             sendTypingNotification: boolean (Required)
     *         }
     *         calling (Required): {
     *             addParticipants: boolean (Required)
     *             addPstnParticipants: boolean (Required)
     *             removeSelf: boolean (Required)
     *             leaveCall: boolean (Required)
     *             removeParticipants: boolean (Required)
     *             removePstnParticipant: boolean (Required)
     *             listParticipants: boolean (Required)
     *             getOwnData: boolean (Required)
     *             getOthersData: boolean (Required)
     *             updateOwnData: boolean (Required)
     *             updateOthersData: boolean (Required)
     *             getCallProperties: boolean (Required)
     *             updateCallProperties: boolean (Required)
     *             admitLobbyParticipants: boolean (Required)
     *             denyLobbyParticipants: boolean (Required)
     *             bypassLobby: boolean (Required)
     *             deleteCall: boolean (Required)
     *             joinMeeting: boolean (Required)
     *             turnOnVideo: boolean (Required)
     *             shareVideo: boolean (Required)
     *             sendVideo: boolean (Required)
     *             restrictOthersVideo: boolean (Required)
     *             unrestrictOthersVideo: boolean (Required)
     *             turnOnAudio: boolean (Required)
     *             shareAudio: boolean (Required)
     *             sendAudio: boolean (Required)
     *             restrictOthersAudio: boolean (Required)
     *             unrestrictOthersAudio: boolean (Required)
     *             shareScreen: boolean (Required)
     *             shareContent: boolean (Required)
     *             muteSelf: boolean (Required)
     *             unmuteSelf: boolean (Required)
     *             muteOthers: boolean (Required)
     *             spotlightParticipants: boolean (Required)
     *             removeSpotlights: boolean (Required)
     *             removeParticipantsSpotlight: boolean (Required)
     *             startRecording: boolean (Required)
     *             stopRecording: boolean (Required)
     *             startLiveCaptions: boolean (Required)
     *             stopLiveCaptions: boolean (Required)
     *             raiseHand: boolean (Required)
     *             sendReaction: boolean (Required)
     *             hangUpForEveryOne: boolean (Required)
     *             endCallForAll: boolean (Required)
     *         }
     *     }
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     isEnabled: boolean (Required)
     *     createdAt: OffsetDateTime (Required)
     *     updatedAt: OffsetDateTime (Required)
     *     permissions (Required): {
     *         chat (Required): {
     *             addParticipants: boolean (Required)
     *             removeSelf: boolean (Required)
     *             leaveChatThread: boolean (Required)
     *             removeParticipants: boolean (Required)
     *             listParticipants: boolean (Required)
     *             getOwnData: boolean (Required)
     *             getOthersData: boolean (Required)
     *             updateOwnData: boolean (Required)
     *             updateOthersData: boolean (Required)
     *             shareHistory: boolean (Required)
     *             getChatThreadProperties: boolean (Required)
     *             updateChatThreadProperties: boolean (Required)
     *             deleteChatThread: boolean (Required)
     *             sendMessage: boolean (Required)
     *             getMessages: boolean (Required)
     *             readMessages: boolean (Required)
     *             editOwnMessage: boolean (Required)
     *             editOthersMessage: boolean (Required)
     *             editAnyMessage: boolean (Required)
     *             annotateOwnMessage: boolean (Required)
     *             replyOwnMessage: boolean (Required)
     *             annotateOthersMessage: boolean (Required)
     *             replyOthersMessage: boolean (Required)
     *             deleteOwnMessage: boolean (Required)
     *             deleteOthersMessage: boolean (Required)
     *             deleteAnyMessage: boolean (Required)
     *             recoverOwnMessage: boolean (Required)
     *             recoverOthersMessage: boolean (Required)
     *             recoverAnyMessage: boolean (Required)
     *             getReadReceipts: boolean (Required)
     *             sendReadReceipt: boolean (Required)
     *             sendTypingNotification: boolean (Required)
     *         }
     *         calling (Required): {
     *             addParticipants: boolean (Required)
     *             addPstnParticipants: boolean (Required)
     *             removeSelf: boolean (Required)
     *             leaveCall: boolean (Required)
     *             removeParticipants: boolean (Required)
     *             removePstnParticipant: boolean (Required)
     *             listParticipants: boolean (Required)
     *             getOwnData: boolean (Required)
     *             getOthersData: boolean (Required)
     *             updateOwnData: boolean (Required)
     *             updateOthersData: boolean (Required)
     *             getCallProperties: boolean (Required)
     *             updateCallProperties: boolean (Required)
     *             admitLobbyParticipants: boolean (Required)
     *             denyLobbyParticipants: boolean (Required)
     *             bypassLobby: boolean (Required)
     *             deleteCall: boolean (Required)
     *             joinMeeting: boolean (Required)
     *             turnOnVideo: boolean (Required)
     *             shareVideo: boolean (Required)
     *             sendVideo: boolean (Required)
     *             restrictOthersVideo: boolean (Required)
     *             unrestrictOthersVideo: boolean (Required)
     *             turnOnAudio: boolean (Required)
     *             shareAudio: boolean (Required)
     *             sendAudio: boolean (Required)
     *             restrictOthersAudio: boolean (Required)
     *             unrestrictOthersAudio: boolean (Required)
     *             shareScreen: boolean (Required)
     *             shareContent: boolean (Required)
     *             muteSelf: boolean (Required)
     *             unmuteSelf: boolean (Required)
     *             muteOthers: boolean (Required)
     *             spotlightParticipants: boolean (Required)
     *             removeSpotlights: boolean (Required)
     *             removeParticipantsSpotlight: boolean (Required)
     *             startRecording: boolean (Required)
     *             stopRecording: boolean (Required)
     *             startLiveCaptions: boolean (Required)
     *             stopLiveCaptions: boolean (Required)
     *             raiseHand: boolean (Required)
     *             sendReaction: boolean (Required)
     *             hangUpForEveryOne: boolean (Required)
     *             endCallForAll: boolean (Required)
     *         }
     *     }
     * }
     * }</pre>
     * 
     * @param id The Role id.
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a role along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createOrUpdateRoleWithResponse(String id, BinaryData resource,
        RequestOptions requestOptions) {
        // Convenience API is not generated, as operation 'createOrUpdateRole' is 'application/merge-patch+json' and
        // stream-style-serialization is not enabled
        return this.serviceClient.createOrUpdateRoleWithResponse(id, resource, requestOptions);
    }

    /**
     * Delete a role.
     * <p>
     * <strong>Header Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>If-Match</td>
     * <td>String</td>
     * <td>No</td>
     * <td>The request should only proceed if an entity matches this string.</td>
     * </tr>
     * <tr>
     * <td>If-None-Match</td>
     * <td>String</td>
     * <td>No</td>
     * <td>The request should only proceed if no entity matches this string.</td>
     * </tr>
     * <tr>
     * <td>If-Unmodified-Since</td>
     * <td>OffsetDateTime</td>
     * <td>No</td>
     * <td>The request should only proceed if the entity was not modified after this time.</td>
     * </tr>
     * <tr>
     * <td>If-Modified-Since</td>
     * <td>OffsetDateTime</td>
     * <td>No</td>
     * <td>The request should only proceed if the entity was modified after this time.</td>
     * </tr>
     * <tr>
     * <td>repeatability-request-id</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Repeatability request ID header</td>
     * </tr>
     * <tr>
     * <td>repeatability-first-sent</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Repeatability first sent header as HTTP-date</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param id The Role id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteRoleWithResponse(String id, RequestOptions requestOptions) {
        return this.serviceClient.deleteRoleWithResponse(id, requestOptions);
    }

    /**
     * List roles.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     isEnabled: boolean (Required)
     *     createdAt: OffsetDateTime (Required)
     *     updatedAt: OffsetDateTime (Required)
     *     permissions (Required): {
     *         chat (Required): {
     *             addParticipants: boolean (Required)
     *             removeSelf: boolean (Required)
     *             leaveChatThread: boolean (Required)
     *             removeParticipants: boolean (Required)
     *             listParticipants: boolean (Required)
     *             getOwnData: boolean (Required)
     *             getOthersData: boolean (Required)
     *             updateOwnData: boolean (Required)
     *             updateOthersData: boolean (Required)
     *             shareHistory: boolean (Required)
     *             getChatThreadProperties: boolean (Required)
     *             updateChatThreadProperties: boolean (Required)
     *             deleteChatThread: boolean (Required)
     *             sendMessage: boolean (Required)
     *             getMessages: boolean (Required)
     *             readMessages: boolean (Required)
     *             editOwnMessage: boolean (Required)
     *             editOthersMessage: boolean (Required)
     *             editAnyMessage: boolean (Required)
     *             annotateOwnMessage: boolean (Required)
     *             replyOwnMessage: boolean (Required)
     *             annotateOthersMessage: boolean (Required)
     *             replyOthersMessage: boolean (Required)
     *             deleteOwnMessage: boolean (Required)
     *             deleteOthersMessage: boolean (Required)
     *             deleteAnyMessage: boolean (Required)
     *             recoverOwnMessage: boolean (Required)
     *             recoverOthersMessage: boolean (Required)
     *             recoverAnyMessage: boolean (Required)
     *             getReadReceipts: boolean (Required)
     *             sendReadReceipt: boolean (Required)
     *             sendTypingNotification: boolean (Required)
     *         }
     *         calling (Required): {
     *             addParticipants: boolean (Required)
     *             addPstnParticipants: boolean (Required)
     *             removeSelf: boolean (Required)
     *             leaveCall: boolean (Required)
     *             removeParticipants: boolean (Required)
     *             removePstnParticipant: boolean (Required)
     *             listParticipants: boolean (Required)
     *             getOwnData: boolean (Required)
     *             getOthersData: boolean (Required)
     *             updateOwnData: boolean (Required)
     *             updateOthersData: boolean (Required)
     *             getCallProperties: boolean (Required)
     *             updateCallProperties: boolean (Required)
     *             admitLobbyParticipants: boolean (Required)
     *             denyLobbyParticipants: boolean (Required)
     *             bypassLobby: boolean (Required)
     *             deleteCall: boolean (Required)
     *             joinMeeting: boolean (Required)
     *             turnOnVideo: boolean (Required)
     *             shareVideo: boolean (Required)
     *             sendVideo: boolean (Required)
     *             restrictOthersVideo: boolean (Required)
     *             unrestrictOthersVideo: boolean (Required)
     *             turnOnAudio: boolean (Required)
     *             shareAudio: boolean (Required)
     *             sendAudio: boolean (Required)
     *             restrictOthersAudio: boolean (Required)
     *             unrestrictOthersAudio: boolean (Required)
     *             shareScreen: boolean (Required)
     *             shareContent: boolean (Required)
     *             muteSelf: boolean (Required)
     *             unmuteSelf: boolean (Required)
     *             muteOthers: boolean (Required)
     *             spotlightParticipants: boolean (Required)
     *             removeSpotlights: boolean (Required)
     *             removeParticipantsSpotlight: boolean (Required)
     *             startRecording: boolean (Required)
     *             stopRecording: boolean (Required)
     *             startLiveCaptions: boolean (Required)
     *             stopLiveCaptions: boolean (Required)
     *             raiseHand: boolean (Required)
     *             sendReaction: boolean (Required)
     *             hangUpForEveryOne: boolean (Required)
     *             endCallForAll: boolean (Required)
     *         }
     *     }
     * }
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of Role items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listRoles(RequestOptions requestOptions) {
        return this.serviceClient.listRoles(requestOptions);
    }

    /**
     * Create a role.
     * <p>
     * <strong>Header Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>If-Match</td>
     * <td>String</td>
     * <td>No</td>
     * <td>The request should only proceed if an entity matches this string.</td>
     * </tr>
     * <tr>
     * <td>If-None-Match</td>
     * <td>String</td>
     * <td>No</td>
     * <td>The request should only proceed if no entity matches this string.</td>
     * </tr>
     * <tr>
     * <td>If-Unmodified-Since</td>
     * <td>OffsetDateTime</td>
     * <td>No</td>
     * <td>The request should only proceed if the entity was not modified after this time.</td>
     * </tr>
     * <tr>
     * <td>If-Modified-Since</td>
     * <td>OffsetDateTime</td>
     * <td>No</td>
     * <td>The request should only proceed if the entity was modified after this time.</td>
     * </tr>
     * <tr>
     * <td>repeatability-request-id</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Repeatability request ID header</td>
     * </tr>
     * <tr>
     * <td>repeatability-first-sent</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Repeatability first sent header as HTTP-date</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     isEnabled: boolean (Required)
     *     createdAt: OffsetDateTime (Required)
     *     updatedAt: OffsetDateTime (Required)
     *     permissions (Required): {
     *         chat (Required): {
     *             addParticipants: boolean (Required)
     *             removeSelf: boolean (Required)
     *             leaveChatThread: boolean (Required)
     *             removeParticipants: boolean (Required)
     *             listParticipants: boolean (Required)
     *             getOwnData: boolean (Required)
     *             getOthersData: boolean (Required)
     *             updateOwnData: boolean (Required)
     *             updateOthersData: boolean (Required)
     *             shareHistory: boolean (Required)
     *             getChatThreadProperties: boolean (Required)
     *             updateChatThreadProperties: boolean (Required)
     *             deleteChatThread: boolean (Required)
     *             sendMessage: boolean (Required)
     *             getMessages: boolean (Required)
     *             readMessages: boolean (Required)
     *             editOwnMessage: boolean (Required)
     *             editOthersMessage: boolean (Required)
     *             editAnyMessage: boolean (Required)
     *             annotateOwnMessage: boolean (Required)
     *             replyOwnMessage: boolean (Required)
     *             annotateOthersMessage: boolean (Required)
     *             replyOthersMessage: boolean (Required)
     *             deleteOwnMessage: boolean (Required)
     *             deleteOthersMessage: boolean (Required)
     *             deleteAnyMessage: boolean (Required)
     *             recoverOwnMessage: boolean (Required)
     *             recoverOthersMessage: boolean (Required)
     *             recoverAnyMessage: boolean (Required)
     *             getReadReceipts: boolean (Required)
     *             sendReadReceipt: boolean (Required)
     *             sendTypingNotification: boolean (Required)
     *         }
     *         calling (Required): {
     *             addParticipants: boolean (Required)
     *             addPstnParticipants: boolean (Required)
     *             removeSelf: boolean (Required)
     *             leaveCall: boolean (Required)
     *             removeParticipants: boolean (Required)
     *             removePstnParticipant: boolean (Required)
     *             listParticipants: boolean (Required)
     *             getOwnData: boolean (Required)
     *             getOthersData: boolean (Required)
     *             updateOwnData: boolean (Required)
     *             updateOthersData: boolean (Required)
     *             getCallProperties: boolean (Required)
     *             updateCallProperties: boolean (Required)
     *             admitLobbyParticipants: boolean (Required)
     *             denyLobbyParticipants: boolean (Required)
     *             bypassLobby: boolean (Required)
     *             deleteCall: boolean (Required)
     *             joinMeeting: boolean (Required)
     *             turnOnVideo: boolean (Required)
     *             shareVideo: boolean (Required)
     *             sendVideo: boolean (Required)
     *             restrictOthersVideo: boolean (Required)
     *             unrestrictOthersVideo: boolean (Required)
     *             turnOnAudio: boolean (Required)
     *             shareAudio: boolean (Required)
     *             sendAudio: boolean (Required)
     *             restrictOthersAudio: boolean (Required)
     *             unrestrictOthersAudio: boolean (Required)
     *             shareScreen: boolean (Required)
     *             shareContent: boolean (Required)
     *             muteSelf: boolean (Required)
     *             unmuteSelf: boolean (Required)
     *             muteOthers: boolean (Required)
     *             spotlightParticipants: boolean (Required)
     *             removeSpotlights: boolean (Required)
     *             removeParticipantsSpotlight: boolean (Required)
     *             startRecording: boolean (Required)
     *             stopRecording: boolean (Required)
     *             startLiveCaptions: boolean (Required)
     *             stopLiveCaptions: boolean (Required)
     *             raiseHand: boolean (Required)
     *             sendReaction: boolean (Required)
     *             hangUpForEveryOne: boolean (Required)
     *             endCallForAll: boolean (Required)
     *         }
     *     }
     * }
     * }</pre>
     * 
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> createRoleWithResponse(BinaryData resource, RequestOptions requestOptions) {
        return this.serviceClient.createRoleWithResponse(resource, requestOptions);
    }

    /**
     * Get a role.
     * 
     * @param id The Role id.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a role.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Role getRole(String id, RequestConditions requestConditions) {
        // Generated convenience method for getRoleWithResponse
        RequestOptions requestOptions = new RequestOptions();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_UNMODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        return getRoleWithResponse(id, requestOptions).getValue().toObject(Role.class);
    }

    /**
     * Get a role.
     * 
     * @param id The Role id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a role.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Role getRole(String id) {
        // Generated convenience method for getRoleWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getRoleWithResponse(id, requestOptions).getValue().toObject(Role.class);
    }

    /**
     * Delete a role.
     * 
     * @param id The Role id.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteRole(String id, RequestConditions requestConditions) {
        // Generated convenience method for deleteRoleWithResponse
        RequestOptions requestOptions = new RequestOptions();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_UNMODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        deleteRoleWithResponse(id, requestOptions).getValue();
    }

    /**
     * Delete a role.
     * 
     * @param id The Role id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteRole(String id) {
        // Generated convenience method for deleteRoleWithResponse
        RequestOptions requestOptions = new RequestOptions();
        deleteRoleWithResponse(id, requestOptions).getValue();
    }

    /**
     * List roles.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of Role items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<Role> listRoles() {
        // Generated convenience method for listRoles
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.listRoles(requestOptions).mapPage(bodyItemValue -> bodyItemValue.toObject(Role.class));
    }

    /**
     * Create a role.
     * 
     * @param resource The resource instance.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void createRole(Role resource, RequestConditions requestConditions) {
        // Generated convenience method for createRoleWithResponse
        RequestOptions requestOptions = new RequestOptions();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_UNMODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        createRoleWithResponse(BinaryData.fromObject(resource), requestOptions).getValue();
    }

    /**
     * Create a role.
     * 
     * @param resource The resource instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void createRole(Role resource) {
        // Generated convenience method for createRoleWithResponse
        RequestOptions requestOptions = new RequestOptions();
        createRoleWithResponse(BinaryData.fromObject(resource), requestOptions).getValue();
    }
}
