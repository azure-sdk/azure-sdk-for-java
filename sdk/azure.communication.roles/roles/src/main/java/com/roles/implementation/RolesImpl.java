// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.roles.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.HttpHeaderName;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.DateTimeRfc1123;
import com.azure.core.util.FluxUtil;
import com.roles.IdentityServiceVersion;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import java.util.stream.Collectors;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in Roles.
 */
public final class RolesImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final RolesService service;

    /**
     * The service client containing this operation class.
     */
    private final IdentityClientImpl client;

    /**
     * Initializes an instance of RolesImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    RolesImpl(IdentityClientImpl client) {
        this.service = RestProxy.create(RolesService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * Gets Service version.
     * 
     * @return the serviceVersion value.
     */
    public IdentityServiceVersion getServiceVersion() {
        return client.getServiceVersion();
    }

    /**
     * The interface defining all the services for IdentityClientRoles to be used by the proxy service to perform REST
     * calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "IdentityClientRoles")
    public interface RolesService {
        @Get("/roles/{id}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getRole(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("id") String id,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/roles/{id}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getRoleSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("id") String id,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Patch("/roles/{id}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> createOrUpdateRole(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("id") String id,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("accept") String accept,
            @BodyParam("application/merge-patch+json") BinaryData resource, RequestOptions requestOptions,
            Context context);

        @Patch("/roles/{id}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> createOrUpdateRoleSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("id") String id,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("accept") String accept,
            @BodyParam("application/merge-patch+json") BinaryData resource, RequestOptions requestOptions,
            Context context);

        @Delete("/roles/{id}")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> deleteRole(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("id") String id,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Delete("/roles/{id}")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> deleteRoleSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("id") String id,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/roles")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listRoles(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/roles")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listRolesSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("accept") String accept,
            RequestOptions requestOptions, Context context);

        @Post("/roles")
        @ExpectedResponses({ 201 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> createRole(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData resource, RequestOptions requestOptions, Context context);

        @Post("/roles")
        @ExpectedResponses({ 201 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> createRoleSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData resource, RequestOptions requestOptions, Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listRolesNext(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("endpoint") String endpoint, @HeaderParam("accept") String accept, RequestOptions requestOptions,
            Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listRolesNextSync(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("endpoint") String endpoint, @HeaderParam("accept") String accept, RequestOptions requestOptions,
            Context context);
    }

    /**
     * Get a role.
     * <p>
     * <strong>Header Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>If-Match</td>
     * <td>String</td>
     * <td>No</td>
     * <td>The request should only proceed if an entity matches this string.</td>
     * </tr>
     * <tr>
     * <td>If-None-Match</td>
     * <td>String</td>
     * <td>No</td>
     * <td>The request should only proceed if no entity matches this string.</td>
     * </tr>
     * <tr>
     * <td>If-Unmodified-Since</td>
     * <td>OffsetDateTime</td>
     * <td>No</td>
     * <td>The request should only proceed if the entity was not modified after this time.</td>
     * </tr>
     * <tr>
     * <td>If-Modified-Since</td>
     * <td>OffsetDateTime</td>
     * <td>No</td>
     * <td>The request should only proceed if the entity was modified after this time.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     isEnabled: boolean (Required)
     *     createdAt: OffsetDateTime (Required)
     *     updatedAt: OffsetDateTime (Required)
     *     permissions (Required): {
     *         chat (Required): {
     *             addParticipants: boolean (Required)
     *             removeSelf: boolean (Required)
     *             leaveChatThread: boolean (Required)
     *             removeParticipants: boolean (Required)
     *             listParticipants: boolean (Required)
     *             getOwnData: boolean (Required)
     *             getOthersData: boolean (Required)
     *             updateOwnData: boolean (Required)
     *             updateOthersData: boolean (Required)
     *             shareHistory: boolean (Required)
     *             getChatThreadProperties: boolean (Required)
     *             updateChatThreadProperties: boolean (Required)
     *             deleteChatThread: boolean (Required)
     *             sendMessage: boolean (Required)
     *             getMessages: boolean (Required)
     *             readMessages: boolean (Required)
     *             editOwnMessage: boolean (Required)
     *             editOthersMessage: boolean (Required)
     *             editAnyMessage: boolean (Required)
     *             annotateOwnMessage: boolean (Required)
     *             replyOwnMessage: boolean (Required)
     *             annotateOthersMessage: boolean (Required)
     *             replyOthersMessage: boolean (Required)
     *             deleteOwnMessage: boolean (Required)
     *             deleteOthersMessage: boolean (Required)
     *             deleteAnyMessage: boolean (Required)
     *             recoverOwnMessage: boolean (Required)
     *             recoverOthersMessage: boolean (Required)
     *             recoverAnyMessage: boolean (Required)
     *             getReadReceipts: boolean (Required)
     *             sendReadReceipt: boolean (Required)
     *             sendTypingNotification: boolean (Required)
     *         }
     *         calling (Required): {
     *             addParticipants: boolean (Required)
     *             addPstnParticipants: boolean (Required)
     *             removeSelf: boolean (Required)
     *             leaveCall: boolean (Required)
     *             removeParticipants: boolean (Required)
     *             removePstnParticipant: boolean (Required)
     *             listParticipants: boolean (Required)
     *             getOwnData: boolean (Required)
     *             getOthersData: boolean (Required)
     *             updateOwnData: boolean (Required)
     *             updateOthersData: boolean (Required)
     *             getCallProperties: boolean (Required)
     *             updateCallProperties: boolean (Required)
     *             admitLobbyParticipants: boolean (Required)
     *             denyLobbyParticipants: boolean (Required)
     *             bypassLobby: boolean (Required)
     *             deleteCall: boolean (Required)
     *             joinMeeting: boolean (Required)
     *             turnOnVideo: boolean (Required)
     *             shareVideo: boolean (Required)
     *             sendVideo: boolean (Required)
     *             restrictOthersVideo: boolean (Required)
     *             unrestrictOthersVideo: boolean (Required)
     *             turnOnAudio: boolean (Required)
     *             shareAudio: boolean (Required)
     *             sendAudio: boolean (Required)
     *             restrictOthersAudio: boolean (Required)
     *             unrestrictOthersAudio: boolean (Required)
     *             shareScreen: boolean (Required)
     *             shareContent: boolean (Required)
     *             muteSelf: boolean (Required)
     *             unmuteSelf: boolean (Required)
     *             muteOthers: boolean (Required)
     *             spotlightParticipants: boolean (Required)
     *             removeSpotlights: boolean (Required)
     *             removeParticipantsSpotlight: boolean (Required)
     *             startRecording: boolean (Required)
     *             stopRecording: boolean (Required)
     *             startLiveCaptions: boolean (Required)
     *             stopLiveCaptions: boolean (Required)
     *             raiseHand: boolean (Required)
     *             sendReaction: boolean (Required)
     *             hangUpForEveryOne: boolean (Required)
     *             endCallForAll: boolean (Required)
     *         }
     *     }
     * }
     * }</pre>
     * 
     * @param id The Role id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a role along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getRoleWithResponseAsync(String id, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getRole(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), id, accept, requestOptions, context));
    }

    /**
     * Get a role.
     * <p>
     * <strong>Header Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>If-Match</td>
     * <td>String</td>
     * <td>No</td>
     * <td>The request should only proceed if an entity matches this string.</td>
     * </tr>
     * <tr>
     * <td>If-None-Match</td>
     * <td>String</td>
     * <td>No</td>
     * <td>The request should only proceed if no entity matches this string.</td>
     * </tr>
     * <tr>
     * <td>If-Unmodified-Since</td>
     * <td>OffsetDateTime</td>
     * <td>No</td>
     * <td>The request should only proceed if the entity was not modified after this time.</td>
     * </tr>
     * <tr>
     * <td>If-Modified-Since</td>
     * <td>OffsetDateTime</td>
     * <td>No</td>
     * <td>The request should only proceed if the entity was modified after this time.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     isEnabled: boolean (Required)
     *     createdAt: OffsetDateTime (Required)
     *     updatedAt: OffsetDateTime (Required)
     *     permissions (Required): {
     *         chat (Required): {
     *             addParticipants: boolean (Required)
     *             removeSelf: boolean (Required)
     *             leaveChatThread: boolean (Required)
     *             removeParticipants: boolean (Required)
     *             listParticipants: boolean (Required)
     *             getOwnData: boolean (Required)
     *             getOthersData: boolean (Required)
     *             updateOwnData: boolean (Required)
     *             updateOthersData: boolean (Required)
     *             shareHistory: boolean (Required)
     *             getChatThreadProperties: boolean (Required)
     *             updateChatThreadProperties: boolean (Required)
     *             deleteChatThread: boolean (Required)
     *             sendMessage: boolean (Required)
     *             getMessages: boolean (Required)
     *             readMessages: boolean (Required)
     *             editOwnMessage: boolean (Required)
     *             editOthersMessage: boolean (Required)
     *             editAnyMessage: boolean (Required)
     *             annotateOwnMessage: boolean (Required)
     *             replyOwnMessage: boolean (Required)
     *             annotateOthersMessage: boolean (Required)
     *             replyOthersMessage: boolean (Required)
     *             deleteOwnMessage: boolean (Required)
     *             deleteOthersMessage: boolean (Required)
     *             deleteAnyMessage: boolean (Required)
     *             recoverOwnMessage: boolean (Required)
     *             recoverOthersMessage: boolean (Required)
     *             recoverAnyMessage: boolean (Required)
     *             getReadReceipts: boolean (Required)
     *             sendReadReceipt: boolean (Required)
     *             sendTypingNotification: boolean (Required)
     *         }
     *         calling (Required): {
     *             addParticipants: boolean (Required)
     *             addPstnParticipants: boolean (Required)
     *             removeSelf: boolean (Required)
     *             leaveCall: boolean (Required)
     *             removeParticipants: boolean (Required)
     *             removePstnParticipant: boolean (Required)
     *             listParticipants: boolean (Required)
     *             getOwnData: boolean (Required)
     *             getOthersData: boolean (Required)
     *             updateOwnData: boolean (Required)
     *             updateOthersData: boolean (Required)
     *             getCallProperties: boolean (Required)
     *             updateCallProperties: boolean (Required)
     *             admitLobbyParticipants: boolean (Required)
     *             denyLobbyParticipants: boolean (Required)
     *             bypassLobby: boolean (Required)
     *             deleteCall: boolean (Required)
     *             joinMeeting: boolean (Required)
     *             turnOnVideo: boolean (Required)
     *             shareVideo: boolean (Required)
     *             sendVideo: boolean (Required)
     *             restrictOthersVideo: boolean (Required)
     *             unrestrictOthersVideo: boolean (Required)
     *             turnOnAudio: boolean (Required)
     *             shareAudio: boolean (Required)
     *             sendAudio: boolean (Required)
     *             restrictOthersAudio: boolean (Required)
     *             unrestrictOthersAudio: boolean (Required)
     *             shareScreen: boolean (Required)
     *             shareContent: boolean (Required)
     *             muteSelf: boolean (Required)
     *             unmuteSelf: boolean (Required)
     *             muteOthers: boolean (Required)
     *             spotlightParticipants: boolean (Required)
     *             removeSpotlights: boolean (Required)
     *             removeParticipantsSpotlight: boolean (Required)
     *             startRecording: boolean (Required)
     *             stopRecording: boolean (Required)
     *             startLiveCaptions: boolean (Required)
     *             stopLiveCaptions: boolean (Required)
     *             raiseHand: boolean (Required)
     *             sendReaction: boolean (Required)
     *             hangUpForEveryOne: boolean (Required)
     *             endCallForAll: boolean (Required)
     *         }
     *     }
     * }
     * }</pre>
     * 
     * @param id The Role id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a role along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getRoleWithResponse(String id, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getRoleSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(), id, accept,
            requestOptions, Context.NONE);
    }

    /**
     * Create or update a role.
     * <p>
     * <strong>Header Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>If-Match</td>
     * <td>String</td>
     * <td>No</td>
     * <td>The request should only proceed if an entity matches this string.</td>
     * </tr>
     * <tr>
     * <td>If-None-Match</td>
     * <td>String</td>
     * <td>No</td>
     * <td>The request should only proceed if no entity matches this string.</td>
     * </tr>
     * <tr>
     * <td>If-Unmodified-Since</td>
     * <td>OffsetDateTime</td>
     * <td>No</td>
     * <td>The request should only proceed if the entity was not modified after this time.</td>
     * </tr>
     * <tr>
     * <td>If-Modified-Since</td>
     * <td>OffsetDateTime</td>
     * <td>No</td>
     * <td>The request should only proceed if the entity was modified after this time.</td>
     * </tr>
     * <tr>
     * <td>repeatability-request-id</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Repeatability request ID header</td>
     * </tr>
     * <tr>
     * <td>repeatability-first-sent</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Repeatability first sent header as HTTP-date</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     isEnabled: boolean (Required)
     *     createdAt: OffsetDateTime (Required)
     *     updatedAt: OffsetDateTime (Required)
     *     permissions (Required): {
     *         chat (Required): {
     *             addParticipants: boolean (Required)
     *             removeSelf: boolean (Required)
     *             leaveChatThread: boolean (Required)
     *             removeParticipants: boolean (Required)
     *             listParticipants: boolean (Required)
     *             getOwnData: boolean (Required)
     *             getOthersData: boolean (Required)
     *             updateOwnData: boolean (Required)
     *             updateOthersData: boolean (Required)
     *             shareHistory: boolean (Required)
     *             getChatThreadProperties: boolean (Required)
     *             updateChatThreadProperties: boolean (Required)
     *             deleteChatThread: boolean (Required)
     *             sendMessage: boolean (Required)
     *             getMessages: boolean (Required)
     *             readMessages: boolean (Required)
     *             editOwnMessage: boolean (Required)
     *             editOthersMessage: boolean (Required)
     *             editAnyMessage: boolean (Required)
     *             annotateOwnMessage: boolean (Required)
     *             replyOwnMessage: boolean (Required)
     *             annotateOthersMessage: boolean (Required)
     *             replyOthersMessage: boolean (Required)
     *             deleteOwnMessage: boolean (Required)
     *             deleteOthersMessage: boolean (Required)
     *             deleteAnyMessage: boolean (Required)
     *             recoverOwnMessage: boolean (Required)
     *             recoverOthersMessage: boolean (Required)
     *             recoverAnyMessage: boolean (Required)
     *             getReadReceipts: boolean (Required)
     *             sendReadReceipt: boolean (Required)
     *             sendTypingNotification: boolean (Required)
     *         }
     *         calling (Required): {
     *             addParticipants: boolean (Required)
     *             addPstnParticipants: boolean (Required)
     *             removeSelf: boolean (Required)
     *             leaveCall: boolean (Required)
     *             removeParticipants: boolean (Required)
     *             removePstnParticipant: boolean (Required)
     *             listParticipants: boolean (Required)
     *             getOwnData: boolean (Required)
     *             getOthersData: boolean (Required)
     *             updateOwnData: boolean (Required)
     *             updateOthersData: boolean (Required)
     *             getCallProperties: boolean (Required)
     *             updateCallProperties: boolean (Required)
     *             admitLobbyParticipants: boolean (Required)
     *             denyLobbyParticipants: boolean (Required)
     *             bypassLobby: boolean (Required)
     *             deleteCall: boolean (Required)
     *             joinMeeting: boolean (Required)
     *             turnOnVideo: boolean (Required)
     *             shareVideo: boolean (Required)
     *             sendVideo: boolean (Required)
     *             restrictOthersVideo: boolean (Required)
     *             unrestrictOthersVideo: boolean (Required)
     *             turnOnAudio: boolean (Required)
     *             shareAudio: boolean (Required)
     *             sendAudio: boolean (Required)
     *             restrictOthersAudio: boolean (Required)
     *             unrestrictOthersAudio: boolean (Required)
     *             shareScreen: boolean (Required)
     *             shareContent: boolean (Required)
     *             muteSelf: boolean (Required)
     *             unmuteSelf: boolean (Required)
     *             muteOthers: boolean (Required)
     *             spotlightParticipants: boolean (Required)
     *             removeSpotlights: boolean (Required)
     *             removeParticipantsSpotlight: boolean (Required)
     *             startRecording: boolean (Required)
     *             stopRecording: boolean (Required)
     *             startLiveCaptions: boolean (Required)
     *             stopLiveCaptions: boolean (Required)
     *             raiseHand: boolean (Required)
     *             sendReaction: boolean (Required)
     *             hangUpForEveryOne: boolean (Required)
     *             endCallForAll: boolean (Required)
     *         }
     *     }
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     isEnabled: boolean (Required)
     *     createdAt: OffsetDateTime (Required)
     *     updatedAt: OffsetDateTime (Required)
     *     permissions (Required): {
     *         chat (Required): {
     *             addParticipants: boolean (Required)
     *             removeSelf: boolean (Required)
     *             leaveChatThread: boolean (Required)
     *             removeParticipants: boolean (Required)
     *             listParticipants: boolean (Required)
     *             getOwnData: boolean (Required)
     *             getOthersData: boolean (Required)
     *             updateOwnData: boolean (Required)
     *             updateOthersData: boolean (Required)
     *             shareHistory: boolean (Required)
     *             getChatThreadProperties: boolean (Required)
     *             updateChatThreadProperties: boolean (Required)
     *             deleteChatThread: boolean (Required)
     *             sendMessage: boolean (Required)
     *             getMessages: boolean (Required)
     *             readMessages: boolean (Required)
     *             editOwnMessage: boolean (Required)
     *             editOthersMessage: boolean (Required)
     *             editAnyMessage: boolean (Required)
     *             annotateOwnMessage: boolean (Required)
     *             replyOwnMessage: boolean (Required)
     *             annotateOthersMessage: boolean (Required)
     *             replyOthersMessage: boolean (Required)
     *             deleteOwnMessage: boolean (Required)
     *             deleteOthersMessage: boolean (Required)
     *             deleteAnyMessage: boolean (Required)
     *             recoverOwnMessage: boolean (Required)
     *             recoverOthersMessage: boolean (Required)
     *             recoverAnyMessage: boolean (Required)
     *             getReadReceipts: boolean (Required)
     *             sendReadReceipt: boolean (Required)
     *             sendTypingNotification: boolean (Required)
     *         }
     *         calling (Required): {
     *             addParticipants: boolean (Required)
     *             addPstnParticipants: boolean (Required)
     *             removeSelf: boolean (Required)
     *             leaveCall: boolean (Required)
     *             removeParticipants: boolean (Required)
     *             removePstnParticipant: boolean (Required)
     *             listParticipants: boolean (Required)
     *             getOwnData: boolean (Required)
     *             getOthersData: boolean (Required)
     *             updateOwnData: boolean (Required)
     *             updateOthersData: boolean (Required)
     *             getCallProperties: boolean (Required)
     *             updateCallProperties: boolean (Required)
     *             admitLobbyParticipants: boolean (Required)
     *             denyLobbyParticipants: boolean (Required)
     *             bypassLobby: boolean (Required)
     *             deleteCall: boolean (Required)
     *             joinMeeting: boolean (Required)
     *             turnOnVideo: boolean (Required)
     *             shareVideo: boolean (Required)
     *             sendVideo: boolean (Required)
     *             restrictOthersVideo: boolean (Required)
     *             unrestrictOthersVideo: boolean (Required)
     *             turnOnAudio: boolean (Required)
     *             shareAudio: boolean (Required)
     *             sendAudio: boolean (Required)
     *             restrictOthersAudio: boolean (Required)
     *             unrestrictOthersAudio: boolean (Required)
     *             shareScreen: boolean (Required)
     *             shareContent: boolean (Required)
     *             muteSelf: boolean (Required)
     *             unmuteSelf: boolean (Required)
     *             muteOthers: boolean (Required)
     *             spotlightParticipants: boolean (Required)
     *             removeSpotlights: boolean (Required)
     *             removeParticipantsSpotlight: boolean (Required)
     *             startRecording: boolean (Required)
     *             stopRecording: boolean (Required)
     *             startLiveCaptions: boolean (Required)
     *             stopLiveCaptions: boolean (Required)
     *             raiseHand: boolean (Required)
     *             sendReaction: boolean (Required)
     *             hangUpForEveryOne: boolean (Required)
     *             endCallForAll: boolean (Required)
     *         }
     *     }
     * }
     * }</pre>
     * 
     * @param id The Role id.
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a role along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createOrUpdateRoleWithResponseAsync(String id, BinaryData resource,
        RequestOptions requestOptions) {
        final String contentType = "application/merge-patch+json";
        final String accept = "application/json";
        RequestOptions requestOptionsLocal = requestOptions == null ? new RequestOptions() : requestOptions;
        String repeatabilityRequestId = UUID.randomUUID().toString();
        String repeatabilityFirstSent = DateTimeRfc1123.toRfc1123String(OffsetDateTime.now());
        requestOptionsLocal.addRequestCallback(requestLocal -> {
            if (requestLocal.getHeaders().get(HttpHeaderName.fromString("repeatability-request-id")) == null) {
                requestLocal.getHeaders().set(HttpHeaderName.fromString("repeatability-request-id"),
                    repeatabilityRequestId);
            }
        });
        requestOptionsLocal.addRequestCallback(requestLocal -> {
            if (requestLocal.getHeaders().get(HttpHeaderName.fromString("repeatability-first-sent")) == null) {
                requestLocal.getHeaders().set(HttpHeaderName.fromString("repeatability-first-sent"),
                    repeatabilityFirstSent);
            }
        });
        return FluxUtil.withContext(context -> service.createOrUpdateRole(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), id, contentType, accept, resource, requestOptionsLocal,
            context));
    }

    /**
     * Create or update a role.
     * <p>
     * <strong>Header Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>If-Match</td>
     * <td>String</td>
     * <td>No</td>
     * <td>The request should only proceed if an entity matches this string.</td>
     * </tr>
     * <tr>
     * <td>If-None-Match</td>
     * <td>String</td>
     * <td>No</td>
     * <td>The request should only proceed if no entity matches this string.</td>
     * </tr>
     * <tr>
     * <td>If-Unmodified-Since</td>
     * <td>OffsetDateTime</td>
     * <td>No</td>
     * <td>The request should only proceed if the entity was not modified after this time.</td>
     * </tr>
     * <tr>
     * <td>If-Modified-Since</td>
     * <td>OffsetDateTime</td>
     * <td>No</td>
     * <td>The request should only proceed if the entity was modified after this time.</td>
     * </tr>
     * <tr>
     * <td>repeatability-request-id</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Repeatability request ID header</td>
     * </tr>
     * <tr>
     * <td>repeatability-first-sent</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Repeatability first sent header as HTTP-date</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     isEnabled: boolean (Required)
     *     createdAt: OffsetDateTime (Required)
     *     updatedAt: OffsetDateTime (Required)
     *     permissions (Required): {
     *         chat (Required): {
     *             addParticipants: boolean (Required)
     *             removeSelf: boolean (Required)
     *             leaveChatThread: boolean (Required)
     *             removeParticipants: boolean (Required)
     *             listParticipants: boolean (Required)
     *             getOwnData: boolean (Required)
     *             getOthersData: boolean (Required)
     *             updateOwnData: boolean (Required)
     *             updateOthersData: boolean (Required)
     *             shareHistory: boolean (Required)
     *             getChatThreadProperties: boolean (Required)
     *             updateChatThreadProperties: boolean (Required)
     *             deleteChatThread: boolean (Required)
     *             sendMessage: boolean (Required)
     *             getMessages: boolean (Required)
     *             readMessages: boolean (Required)
     *             editOwnMessage: boolean (Required)
     *             editOthersMessage: boolean (Required)
     *             editAnyMessage: boolean (Required)
     *             annotateOwnMessage: boolean (Required)
     *             replyOwnMessage: boolean (Required)
     *             annotateOthersMessage: boolean (Required)
     *             replyOthersMessage: boolean (Required)
     *             deleteOwnMessage: boolean (Required)
     *             deleteOthersMessage: boolean (Required)
     *             deleteAnyMessage: boolean (Required)
     *             recoverOwnMessage: boolean (Required)
     *             recoverOthersMessage: boolean (Required)
     *             recoverAnyMessage: boolean (Required)
     *             getReadReceipts: boolean (Required)
     *             sendReadReceipt: boolean (Required)
     *             sendTypingNotification: boolean (Required)
     *         }
     *         calling (Required): {
     *             addParticipants: boolean (Required)
     *             addPstnParticipants: boolean (Required)
     *             removeSelf: boolean (Required)
     *             leaveCall: boolean (Required)
     *             removeParticipants: boolean (Required)
     *             removePstnParticipant: boolean (Required)
     *             listParticipants: boolean (Required)
     *             getOwnData: boolean (Required)
     *             getOthersData: boolean (Required)
     *             updateOwnData: boolean (Required)
     *             updateOthersData: boolean (Required)
     *             getCallProperties: boolean (Required)
     *             updateCallProperties: boolean (Required)
     *             admitLobbyParticipants: boolean (Required)
     *             denyLobbyParticipants: boolean (Required)
     *             bypassLobby: boolean (Required)
     *             deleteCall: boolean (Required)
     *             joinMeeting: boolean (Required)
     *             turnOnVideo: boolean (Required)
     *             shareVideo: boolean (Required)
     *             sendVideo: boolean (Required)
     *             restrictOthersVideo: boolean (Required)
     *             unrestrictOthersVideo: boolean (Required)
     *             turnOnAudio: boolean (Required)
     *             shareAudio: boolean (Required)
     *             sendAudio: boolean (Required)
     *             restrictOthersAudio: boolean (Required)
     *             unrestrictOthersAudio: boolean (Required)
     *             shareScreen: boolean (Required)
     *             shareContent: boolean (Required)
     *             muteSelf: boolean (Required)
     *             unmuteSelf: boolean (Required)
     *             muteOthers: boolean (Required)
     *             spotlightParticipants: boolean (Required)
     *             removeSpotlights: boolean (Required)
     *             removeParticipantsSpotlight: boolean (Required)
     *             startRecording: boolean (Required)
     *             stopRecording: boolean (Required)
     *             startLiveCaptions: boolean (Required)
     *             stopLiveCaptions: boolean (Required)
     *             raiseHand: boolean (Required)
     *             sendReaction: boolean (Required)
     *             hangUpForEveryOne: boolean (Required)
     *             endCallForAll: boolean (Required)
     *         }
     *     }
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     isEnabled: boolean (Required)
     *     createdAt: OffsetDateTime (Required)
     *     updatedAt: OffsetDateTime (Required)
     *     permissions (Required): {
     *         chat (Required): {
     *             addParticipants: boolean (Required)
     *             removeSelf: boolean (Required)
     *             leaveChatThread: boolean (Required)
     *             removeParticipants: boolean (Required)
     *             listParticipants: boolean (Required)
     *             getOwnData: boolean (Required)
     *             getOthersData: boolean (Required)
     *             updateOwnData: boolean (Required)
     *             updateOthersData: boolean (Required)
     *             shareHistory: boolean (Required)
     *             getChatThreadProperties: boolean (Required)
     *             updateChatThreadProperties: boolean (Required)
     *             deleteChatThread: boolean (Required)
     *             sendMessage: boolean (Required)
     *             getMessages: boolean (Required)
     *             readMessages: boolean (Required)
     *             editOwnMessage: boolean (Required)
     *             editOthersMessage: boolean (Required)
     *             editAnyMessage: boolean (Required)
     *             annotateOwnMessage: boolean (Required)
     *             replyOwnMessage: boolean (Required)
     *             annotateOthersMessage: boolean (Required)
     *             replyOthersMessage: boolean (Required)
     *             deleteOwnMessage: boolean (Required)
     *             deleteOthersMessage: boolean (Required)
     *             deleteAnyMessage: boolean (Required)
     *             recoverOwnMessage: boolean (Required)
     *             recoverOthersMessage: boolean (Required)
     *             recoverAnyMessage: boolean (Required)
     *             getReadReceipts: boolean (Required)
     *             sendReadReceipt: boolean (Required)
     *             sendTypingNotification: boolean (Required)
     *         }
     *         calling (Required): {
     *             addParticipants: boolean (Required)
     *             addPstnParticipants: boolean (Required)
     *             removeSelf: boolean (Required)
     *             leaveCall: boolean (Required)
     *             removeParticipants: boolean (Required)
     *             removePstnParticipant: boolean (Required)
     *             listParticipants: boolean (Required)
     *             getOwnData: boolean (Required)
     *             getOthersData: boolean (Required)
     *             updateOwnData: boolean (Required)
     *             updateOthersData: boolean (Required)
     *             getCallProperties: boolean (Required)
     *             updateCallProperties: boolean (Required)
     *             admitLobbyParticipants: boolean (Required)
     *             denyLobbyParticipants: boolean (Required)
     *             bypassLobby: boolean (Required)
     *             deleteCall: boolean (Required)
     *             joinMeeting: boolean (Required)
     *             turnOnVideo: boolean (Required)
     *             shareVideo: boolean (Required)
     *             sendVideo: boolean (Required)
     *             restrictOthersVideo: boolean (Required)
     *             unrestrictOthersVideo: boolean (Required)
     *             turnOnAudio: boolean (Required)
     *             shareAudio: boolean (Required)
     *             sendAudio: boolean (Required)
     *             restrictOthersAudio: boolean (Required)
     *             unrestrictOthersAudio: boolean (Required)
     *             shareScreen: boolean (Required)
     *             shareContent: boolean (Required)
     *             muteSelf: boolean (Required)
     *             unmuteSelf: boolean (Required)
     *             muteOthers: boolean (Required)
     *             spotlightParticipants: boolean (Required)
     *             removeSpotlights: boolean (Required)
     *             removeParticipantsSpotlight: boolean (Required)
     *             startRecording: boolean (Required)
     *             stopRecording: boolean (Required)
     *             startLiveCaptions: boolean (Required)
     *             stopLiveCaptions: boolean (Required)
     *             raiseHand: boolean (Required)
     *             sendReaction: boolean (Required)
     *             hangUpForEveryOne: boolean (Required)
     *             endCallForAll: boolean (Required)
     *         }
     *     }
     * }
     * }</pre>
     * 
     * @param id The Role id.
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a role along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createOrUpdateRoleWithResponse(String id, BinaryData resource,
        RequestOptions requestOptions) {
        final String contentType = "application/merge-patch+json";
        final String accept = "application/json";
        RequestOptions requestOptionsLocal = requestOptions == null ? new RequestOptions() : requestOptions;
        String repeatabilityRequestId = UUID.randomUUID().toString();
        String repeatabilityFirstSent = DateTimeRfc1123.toRfc1123String(OffsetDateTime.now());
        requestOptionsLocal.addRequestCallback(requestLocal -> {
            if (requestLocal.getHeaders().get(HttpHeaderName.fromString("repeatability-request-id")) == null) {
                requestLocal.getHeaders().set(HttpHeaderName.fromString("repeatability-request-id"),
                    repeatabilityRequestId);
            }
        });
        requestOptionsLocal.addRequestCallback(requestLocal -> {
            if (requestLocal.getHeaders().get(HttpHeaderName.fromString("repeatability-first-sent")) == null) {
                requestLocal.getHeaders().set(HttpHeaderName.fromString("repeatability-first-sent"),
                    repeatabilityFirstSent);
            }
        });
        return service.createOrUpdateRoleSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            id, contentType, accept, resource, requestOptionsLocal, Context.NONE);
    }

    /**
     * Delete a role.
     * <p>
     * <strong>Header Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>If-Match</td>
     * <td>String</td>
     * <td>No</td>
     * <td>The request should only proceed if an entity matches this string.</td>
     * </tr>
     * <tr>
     * <td>If-None-Match</td>
     * <td>String</td>
     * <td>No</td>
     * <td>The request should only proceed if no entity matches this string.</td>
     * </tr>
     * <tr>
     * <td>If-Unmodified-Since</td>
     * <td>OffsetDateTime</td>
     * <td>No</td>
     * <td>The request should only proceed if the entity was not modified after this time.</td>
     * </tr>
     * <tr>
     * <td>If-Modified-Since</td>
     * <td>OffsetDateTime</td>
     * <td>No</td>
     * <td>The request should only proceed if the entity was modified after this time.</td>
     * </tr>
     * <tr>
     * <td>repeatability-request-id</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Repeatability request ID header</td>
     * </tr>
     * <tr>
     * <td>repeatability-first-sent</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Repeatability first sent header as HTTP-date</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param id The Role id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteRoleWithResponseAsync(String id, RequestOptions requestOptions) {
        final String accept = "application/json";
        RequestOptions requestOptionsLocal = requestOptions == null ? new RequestOptions() : requestOptions;
        String repeatabilityRequestId = UUID.randomUUID().toString();
        String repeatabilityFirstSent = DateTimeRfc1123.toRfc1123String(OffsetDateTime.now());
        requestOptionsLocal.addRequestCallback(requestLocal -> {
            if (requestLocal.getHeaders().get(HttpHeaderName.fromString("repeatability-request-id")) == null) {
                requestLocal.getHeaders().set(HttpHeaderName.fromString("repeatability-request-id"),
                    repeatabilityRequestId);
            }
        });
        requestOptionsLocal.addRequestCallback(requestLocal -> {
            if (requestLocal.getHeaders().get(HttpHeaderName.fromString("repeatability-first-sent")) == null) {
                requestLocal.getHeaders().set(HttpHeaderName.fromString("repeatability-first-sent"),
                    repeatabilityFirstSent);
            }
        });
        return FluxUtil.withContext(context -> service.deleteRole(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), id, accept, requestOptionsLocal, context));
    }

    /**
     * Delete a role.
     * <p>
     * <strong>Header Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>If-Match</td>
     * <td>String</td>
     * <td>No</td>
     * <td>The request should only proceed if an entity matches this string.</td>
     * </tr>
     * <tr>
     * <td>If-None-Match</td>
     * <td>String</td>
     * <td>No</td>
     * <td>The request should only proceed if no entity matches this string.</td>
     * </tr>
     * <tr>
     * <td>If-Unmodified-Since</td>
     * <td>OffsetDateTime</td>
     * <td>No</td>
     * <td>The request should only proceed if the entity was not modified after this time.</td>
     * </tr>
     * <tr>
     * <td>If-Modified-Since</td>
     * <td>OffsetDateTime</td>
     * <td>No</td>
     * <td>The request should only proceed if the entity was modified after this time.</td>
     * </tr>
     * <tr>
     * <td>repeatability-request-id</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Repeatability request ID header</td>
     * </tr>
     * <tr>
     * <td>repeatability-first-sent</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Repeatability first sent header as HTTP-date</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param id The Role id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteRoleWithResponse(String id, RequestOptions requestOptions) {
        final String accept = "application/json";
        RequestOptions requestOptionsLocal = requestOptions == null ? new RequestOptions() : requestOptions;
        String repeatabilityRequestId = UUID.randomUUID().toString();
        String repeatabilityFirstSent = DateTimeRfc1123.toRfc1123String(OffsetDateTime.now());
        requestOptionsLocal.addRequestCallback(requestLocal -> {
            if (requestLocal.getHeaders().get(HttpHeaderName.fromString("repeatability-request-id")) == null) {
                requestLocal.getHeaders().set(HttpHeaderName.fromString("repeatability-request-id"),
                    repeatabilityRequestId);
            }
        });
        requestOptionsLocal.addRequestCallback(requestLocal -> {
            if (requestLocal.getHeaders().get(HttpHeaderName.fromString("repeatability-first-sent")) == null) {
                requestLocal.getHeaders().set(HttpHeaderName.fromString("repeatability-first-sent"),
                    repeatabilityFirstSent);
            }
        });
        return service.deleteRoleSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(), id,
            accept, requestOptionsLocal, Context.NONE);
    }

    /**
     * List roles.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     isEnabled: boolean (Required)
     *     createdAt: OffsetDateTime (Required)
     *     updatedAt: OffsetDateTime (Required)
     *     permissions (Required): {
     *         chat (Required): {
     *             addParticipants: boolean (Required)
     *             removeSelf: boolean (Required)
     *             leaveChatThread: boolean (Required)
     *             removeParticipants: boolean (Required)
     *             listParticipants: boolean (Required)
     *             getOwnData: boolean (Required)
     *             getOthersData: boolean (Required)
     *             updateOwnData: boolean (Required)
     *             updateOthersData: boolean (Required)
     *             shareHistory: boolean (Required)
     *             getChatThreadProperties: boolean (Required)
     *             updateChatThreadProperties: boolean (Required)
     *             deleteChatThread: boolean (Required)
     *             sendMessage: boolean (Required)
     *             getMessages: boolean (Required)
     *             readMessages: boolean (Required)
     *             editOwnMessage: boolean (Required)
     *             editOthersMessage: boolean (Required)
     *             editAnyMessage: boolean (Required)
     *             annotateOwnMessage: boolean (Required)
     *             replyOwnMessage: boolean (Required)
     *             annotateOthersMessage: boolean (Required)
     *             replyOthersMessage: boolean (Required)
     *             deleteOwnMessage: boolean (Required)
     *             deleteOthersMessage: boolean (Required)
     *             deleteAnyMessage: boolean (Required)
     *             recoverOwnMessage: boolean (Required)
     *             recoverOthersMessage: boolean (Required)
     *             recoverAnyMessage: boolean (Required)
     *             getReadReceipts: boolean (Required)
     *             sendReadReceipt: boolean (Required)
     *             sendTypingNotification: boolean (Required)
     *         }
     *         calling (Required): {
     *             addParticipants: boolean (Required)
     *             addPstnParticipants: boolean (Required)
     *             removeSelf: boolean (Required)
     *             leaveCall: boolean (Required)
     *             removeParticipants: boolean (Required)
     *             removePstnParticipant: boolean (Required)
     *             listParticipants: boolean (Required)
     *             getOwnData: boolean (Required)
     *             getOthersData: boolean (Required)
     *             updateOwnData: boolean (Required)
     *             updateOthersData: boolean (Required)
     *             getCallProperties: boolean (Required)
     *             updateCallProperties: boolean (Required)
     *             admitLobbyParticipants: boolean (Required)
     *             denyLobbyParticipants: boolean (Required)
     *             bypassLobby: boolean (Required)
     *             deleteCall: boolean (Required)
     *             joinMeeting: boolean (Required)
     *             turnOnVideo: boolean (Required)
     *             shareVideo: boolean (Required)
     *             sendVideo: boolean (Required)
     *             restrictOthersVideo: boolean (Required)
     *             unrestrictOthersVideo: boolean (Required)
     *             turnOnAudio: boolean (Required)
     *             shareAudio: boolean (Required)
     *             sendAudio: boolean (Required)
     *             restrictOthersAudio: boolean (Required)
     *             unrestrictOthersAudio: boolean (Required)
     *             shareScreen: boolean (Required)
     *             shareContent: boolean (Required)
     *             muteSelf: boolean (Required)
     *             unmuteSelf: boolean (Required)
     *             muteOthers: boolean (Required)
     *             spotlightParticipants: boolean (Required)
     *             removeSpotlights: boolean (Required)
     *             removeParticipantsSpotlight: boolean (Required)
     *             startRecording: boolean (Required)
     *             stopRecording: boolean (Required)
     *             startLiveCaptions: boolean (Required)
     *             stopLiveCaptions: boolean (Required)
     *             raiseHand: boolean (Required)
     *             sendReaction: boolean (Required)
     *             hangUpForEveryOne: boolean (Required)
     *             endCallForAll: boolean (Required)
     *         }
     *     }
     * }
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of Role items along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listRolesSinglePageAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listRoles(this.client.getEndpoint(),
                this.client.getServiceVersion().getVersion(), accept, requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null));
    }

    /**
     * List roles.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     isEnabled: boolean (Required)
     *     createdAt: OffsetDateTime (Required)
     *     updatedAt: OffsetDateTime (Required)
     *     permissions (Required): {
     *         chat (Required): {
     *             addParticipants: boolean (Required)
     *             removeSelf: boolean (Required)
     *             leaveChatThread: boolean (Required)
     *             removeParticipants: boolean (Required)
     *             listParticipants: boolean (Required)
     *             getOwnData: boolean (Required)
     *             getOthersData: boolean (Required)
     *             updateOwnData: boolean (Required)
     *             updateOthersData: boolean (Required)
     *             shareHistory: boolean (Required)
     *             getChatThreadProperties: boolean (Required)
     *             updateChatThreadProperties: boolean (Required)
     *             deleteChatThread: boolean (Required)
     *             sendMessage: boolean (Required)
     *             getMessages: boolean (Required)
     *             readMessages: boolean (Required)
     *             editOwnMessage: boolean (Required)
     *             editOthersMessage: boolean (Required)
     *             editAnyMessage: boolean (Required)
     *             annotateOwnMessage: boolean (Required)
     *             replyOwnMessage: boolean (Required)
     *             annotateOthersMessage: boolean (Required)
     *             replyOthersMessage: boolean (Required)
     *             deleteOwnMessage: boolean (Required)
     *             deleteOthersMessage: boolean (Required)
     *             deleteAnyMessage: boolean (Required)
     *             recoverOwnMessage: boolean (Required)
     *             recoverOthersMessage: boolean (Required)
     *             recoverAnyMessage: boolean (Required)
     *             getReadReceipts: boolean (Required)
     *             sendReadReceipt: boolean (Required)
     *             sendTypingNotification: boolean (Required)
     *         }
     *         calling (Required): {
     *             addParticipants: boolean (Required)
     *             addPstnParticipants: boolean (Required)
     *             removeSelf: boolean (Required)
     *             leaveCall: boolean (Required)
     *             removeParticipants: boolean (Required)
     *             removePstnParticipant: boolean (Required)
     *             listParticipants: boolean (Required)
     *             getOwnData: boolean (Required)
     *             getOthersData: boolean (Required)
     *             updateOwnData: boolean (Required)
     *             updateOthersData: boolean (Required)
     *             getCallProperties: boolean (Required)
     *             updateCallProperties: boolean (Required)
     *             admitLobbyParticipants: boolean (Required)
     *             denyLobbyParticipants: boolean (Required)
     *             bypassLobby: boolean (Required)
     *             deleteCall: boolean (Required)
     *             joinMeeting: boolean (Required)
     *             turnOnVideo: boolean (Required)
     *             shareVideo: boolean (Required)
     *             sendVideo: boolean (Required)
     *             restrictOthersVideo: boolean (Required)
     *             unrestrictOthersVideo: boolean (Required)
     *             turnOnAudio: boolean (Required)
     *             shareAudio: boolean (Required)
     *             sendAudio: boolean (Required)
     *             restrictOthersAudio: boolean (Required)
     *             unrestrictOthersAudio: boolean (Required)
     *             shareScreen: boolean (Required)
     *             shareContent: boolean (Required)
     *             muteSelf: boolean (Required)
     *             unmuteSelf: boolean (Required)
     *             muteOthers: boolean (Required)
     *             spotlightParticipants: boolean (Required)
     *             removeSpotlights: boolean (Required)
     *             removeParticipantsSpotlight: boolean (Required)
     *             startRecording: boolean (Required)
     *             stopRecording: boolean (Required)
     *             startLiveCaptions: boolean (Required)
     *             stopLiveCaptions: boolean (Required)
     *             raiseHand: boolean (Required)
     *             sendReaction: boolean (Required)
     *             hangUpForEveryOne: boolean (Required)
     *             endCallForAll: boolean (Required)
     *         }
     *     }
     * }
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of Role items as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listRolesAsync(RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedFlux<>(() -> listRolesSinglePageAsync(requestOptions),
            nextLink -> listRolesNextSinglePageAsync(nextLink, requestOptionsForNextPage));
    }

    /**
     * List roles.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     isEnabled: boolean (Required)
     *     createdAt: OffsetDateTime (Required)
     *     updatedAt: OffsetDateTime (Required)
     *     permissions (Required): {
     *         chat (Required): {
     *             addParticipants: boolean (Required)
     *             removeSelf: boolean (Required)
     *             leaveChatThread: boolean (Required)
     *             removeParticipants: boolean (Required)
     *             listParticipants: boolean (Required)
     *             getOwnData: boolean (Required)
     *             getOthersData: boolean (Required)
     *             updateOwnData: boolean (Required)
     *             updateOthersData: boolean (Required)
     *             shareHistory: boolean (Required)
     *             getChatThreadProperties: boolean (Required)
     *             updateChatThreadProperties: boolean (Required)
     *             deleteChatThread: boolean (Required)
     *             sendMessage: boolean (Required)
     *             getMessages: boolean (Required)
     *             readMessages: boolean (Required)
     *             editOwnMessage: boolean (Required)
     *             editOthersMessage: boolean (Required)
     *             editAnyMessage: boolean (Required)
     *             annotateOwnMessage: boolean (Required)
     *             replyOwnMessage: boolean (Required)
     *             annotateOthersMessage: boolean (Required)
     *             replyOthersMessage: boolean (Required)
     *             deleteOwnMessage: boolean (Required)
     *             deleteOthersMessage: boolean (Required)
     *             deleteAnyMessage: boolean (Required)
     *             recoverOwnMessage: boolean (Required)
     *             recoverOthersMessage: boolean (Required)
     *             recoverAnyMessage: boolean (Required)
     *             getReadReceipts: boolean (Required)
     *             sendReadReceipt: boolean (Required)
     *             sendTypingNotification: boolean (Required)
     *         }
     *         calling (Required): {
     *             addParticipants: boolean (Required)
     *             addPstnParticipants: boolean (Required)
     *             removeSelf: boolean (Required)
     *             leaveCall: boolean (Required)
     *             removeParticipants: boolean (Required)
     *             removePstnParticipant: boolean (Required)
     *             listParticipants: boolean (Required)
     *             getOwnData: boolean (Required)
     *             getOthersData: boolean (Required)
     *             updateOwnData: boolean (Required)
     *             updateOthersData: boolean (Required)
     *             getCallProperties: boolean (Required)
     *             updateCallProperties: boolean (Required)
     *             admitLobbyParticipants: boolean (Required)
     *             denyLobbyParticipants: boolean (Required)
     *             bypassLobby: boolean (Required)
     *             deleteCall: boolean (Required)
     *             joinMeeting: boolean (Required)
     *             turnOnVideo: boolean (Required)
     *             shareVideo: boolean (Required)
     *             sendVideo: boolean (Required)
     *             restrictOthersVideo: boolean (Required)
     *             unrestrictOthersVideo: boolean (Required)
     *             turnOnAudio: boolean (Required)
     *             shareAudio: boolean (Required)
     *             sendAudio: boolean (Required)
     *             restrictOthersAudio: boolean (Required)
     *             unrestrictOthersAudio: boolean (Required)
     *             shareScreen: boolean (Required)
     *             shareContent: boolean (Required)
     *             muteSelf: boolean (Required)
     *             unmuteSelf: boolean (Required)
     *             muteOthers: boolean (Required)
     *             spotlightParticipants: boolean (Required)
     *             removeSpotlights: boolean (Required)
     *             removeParticipantsSpotlight: boolean (Required)
     *             startRecording: boolean (Required)
     *             stopRecording: boolean (Required)
     *             startLiveCaptions: boolean (Required)
     *             stopLiveCaptions: boolean (Required)
     *             raiseHand: boolean (Required)
     *             sendReaction: boolean (Required)
     *             hangUpForEveryOne: boolean (Required)
     *             endCallForAll: boolean (Required)
     *         }
     *     }
     * }
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of Role items along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listRolesSinglePage(RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res = service.listRolesSync(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), accept, requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null);
    }

    /**
     * List roles.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     isEnabled: boolean (Required)
     *     createdAt: OffsetDateTime (Required)
     *     updatedAt: OffsetDateTime (Required)
     *     permissions (Required): {
     *         chat (Required): {
     *             addParticipants: boolean (Required)
     *             removeSelf: boolean (Required)
     *             leaveChatThread: boolean (Required)
     *             removeParticipants: boolean (Required)
     *             listParticipants: boolean (Required)
     *             getOwnData: boolean (Required)
     *             getOthersData: boolean (Required)
     *             updateOwnData: boolean (Required)
     *             updateOthersData: boolean (Required)
     *             shareHistory: boolean (Required)
     *             getChatThreadProperties: boolean (Required)
     *             updateChatThreadProperties: boolean (Required)
     *             deleteChatThread: boolean (Required)
     *             sendMessage: boolean (Required)
     *             getMessages: boolean (Required)
     *             readMessages: boolean (Required)
     *             editOwnMessage: boolean (Required)
     *             editOthersMessage: boolean (Required)
     *             editAnyMessage: boolean (Required)
     *             annotateOwnMessage: boolean (Required)
     *             replyOwnMessage: boolean (Required)
     *             annotateOthersMessage: boolean (Required)
     *             replyOthersMessage: boolean (Required)
     *             deleteOwnMessage: boolean (Required)
     *             deleteOthersMessage: boolean (Required)
     *             deleteAnyMessage: boolean (Required)
     *             recoverOwnMessage: boolean (Required)
     *             recoverOthersMessage: boolean (Required)
     *             recoverAnyMessage: boolean (Required)
     *             getReadReceipts: boolean (Required)
     *             sendReadReceipt: boolean (Required)
     *             sendTypingNotification: boolean (Required)
     *         }
     *         calling (Required): {
     *             addParticipants: boolean (Required)
     *             addPstnParticipants: boolean (Required)
     *             removeSelf: boolean (Required)
     *             leaveCall: boolean (Required)
     *             removeParticipants: boolean (Required)
     *             removePstnParticipant: boolean (Required)
     *             listParticipants: boolean (Required)
     *             getOwnData: boolean (Required)
     *             getOthersData: boolean (Required)
     *             updateOwnData: boolean (Required)
     *             updateOthersData: boolean (Required)
     *             getCallProperties: boolean (Required)
     *             updateCallProperties: boolean (Required)
     *             admitLobbyParticipants: boolean (Required)
     *             denyLobbyParticipants: boolean (Required)
     *             bypassLobby: boolean (Required)
     *             deleteCall: boolean (Required)
     *             joinMeeting: boolean (Required)
     *             turnOnVideo: boolean (Required)
     *             shareVideo: boolean (Required)
     *             sendVideo: boolean (Required)
     *             restrictOthersVideo: boolean (Required)
     *             unrestrictOthersVideo: boolean (Required)
     *             turnOnAudio: boolean (Required)
     *             shareAudio: boolean (Required)
     *             sendAudio: boolean (Required)
     *             restrictOthersAudio: boolean (Required)
     *             unrestrictOthersAudio: boolean (Required)
     *             shareScreen: boolean (Required)
     *             shareContent: boolean (Required)
     *             muteSelf: boolean (Required)
     *             unmuteSelf: boolean (Required)
     *             muteOthers: boolean (Required)
     *             spotlightParticipants: boolean (Required)
     *             removeSpotlights: boolean (Required)
     *             removeParticipantsSpotlight: boolean (Required)
     *             startRecording: boolean (Required)
     *             stopRecording: boolean (Required)
     *             startLiveCaptions: boolean (Required)
     *             stopLiveCaptions: boolean (Required)
     *             raiseHand: boolean (Required)
     *             sendReaction: boolean (Required)
     *             hangUpForEveryOne: boolean (Required)
     *             endCallForAll: boolean (Required)
     *         }
     *     }
     * }
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of Role items as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listRoles(RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedIterable<>(() -> listRolesSinglePage(requestOptions),
            nextLink -> listRolesNextSinglePage(nextLink, requestOptionsForNextPage));
    }

    /**
     * Create a role.
     * <p>
     * <strong>Header Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>If-Match</td>
     * <td>String</td>
     * <td>No</td>
     * <td>The request should only proceed if an entity matches this string.</td>
     * </tr>
     * <tr>
     * <td>If-None-Match</td>
     * <td>String</td>
     * <td>No</td>
     * <td>The request should only proceed if no entity matches this string.</td>
     * </tr>
     * <tr>
     * <td>If-Unmodified-Since</td>
     * <td>OffsetDateTime</td>
     * <td>No</td>
     * <td>The request should only proceed if the entity was not modified after this time.</td>
     * </tr>
     * <tr>
     * <td>If-Modified-Since</td>
     * <td>OffsetDateTime</td>
     * <td>No</td>
     * <td>The request should only proceed if the entity was modified after this time.</td>
     * </tr>
     * <tr>
     * <td>repeatability-request-id</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Repeatability request ID header</td>
     * </tr>
     * <tr>
     * <td>repeatability-first-sent</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Repeatability first sent header as HTTP-date</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     isEnabled: boolean (Required)
     *     createdAt: OffsetDateTime (Required)
     *     updatedAt: OffsetDateTime (Required)
     *     permissions (Required): {
     *         chat (Required): {
     *             addParticipants: boolean (Required)
     *             removeSelf: boolean (Required)
     *             leaveChatThread: boolean (Required)
     *             removeParticipants: boolean (Required)
     *             listParticipants: boolean (Required)
     *             getOwnData: boolean (Required)
     *             getOthersData: boolean (Required)
     *             updateOwnData: boolean (Required)
     *             updateOthersData: boolean (Required)
     *             shareHistory: boolean (Required)
     *             getChatThreadProperties: boolean (Required)
     *             updateChatThreadProperties: boolean (Required)
     *             deleteChatThread: boolean (Required)
     *             sendMessage: boolean (Required)
     *             getMessages: boolean (Required)
     *             readMessages: boolean (Required)
     *             editOwnMessage: boolean (Required)
     *             editOthersMessage: boolean (Required)
     *             editAnyMessage: boolean (Required)
     *             annotateOwnMessage: boolean (Required)
     *             replyOwnMessage: boolean (Required)
     *             annotateOthersMessage: boolean (Required)
     *             replyOthersMessage: boolean (Required)
     *             deleteOwnMessage: boolean (Required)
     *             deleteOthersMessage: boolean (Required)
     *             deleteAnyMessage: boolean (Required)
     *             recoverOwnMessage: boolean (Required)
     *             recoverOthersMessage: boolean (Required)
     *             recoverAnyMessage: boolean (Required)
     *             getReadReceipts: boolean (Required)
     *             sendReadReceipt: boolean (Required)
     *             sendTypingNotification: boolean (Required)
     *         }
     *         calling (Required): {
     *             addParticipants: boolean (Required)
     *             addPstnParticipants: boolean (Required)
     *             removeSelf: boolean (Required)
     *             leaveCall: boolean (Required)
     *             removeParticipants: boolean (Required)
     *             removePstnParticipant: boolean (Required)
     *             listParticipants: boolean (Required)
     *             getOwnData: boolean (Required)
     *             getOthersData: boolean (Required)
     *             updateOwnData: boolean (Required)
     *             updateOthersData: boolean (Required)
     *             getCallProperties: boolean (Required)
     *             updateCallProperties: boolean (Required)
     *             admitLobbyParticipants: boolean (Required)
     *             denyLobbyParticipants: boolean (Required)
     *             bypassLobby: boolean (Required)
     *             deleteCall: boolean (Required)
     *             joinMeeting: boolean (Required)
     *             turnOnVideo: boolean (Required)
     *             shareVideo: boolean (Required)
     *             sendVideo: boolean (Required)
     *             restrictOthersVideo: boolean (Required)
     *             unrestrictOthersVideo: boolean (Required)
     *             turnOnAudio: boolean (Required)
     *             shareAudio: boolean (Required)
     *             sendAudio: boolean (Required)
     *             restrictOthersAudio: boolean (Required)
     *             unrestrictOthersAudio: boolean (Required)
     *             shareScreen: boolean (Required)
     *             shareContent: boolean (Required)
     *             muteSelf: boolean (Required)
     *             unmuteSelf: boolean (Required)
     *             muteOthers: boolean (Required)
     *             spotlightParticipants: boolean (Required)
     *             removeSpotlights: boolean (Required)
     *             removeParticipantsSpotlight: boolean (Required)
     *             startRecording: boolean (Required)
     *             stopRecording: boolean (Required)
     *             startLiveCaptions: boolean (Required)
     *             stopLiveCaptions: boolean (Required)
     *             raiseHand: boolean (Required)
     *             sendReaction: boolean (Required)
     *             hangUpForEveryOne: boolean (Required)
     *             endCallForAll: boolean (Required)
     *         }
     *     }
     * }
     * }</pre>
     * 
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> createRoleWithResponseAsync(BinaryData resource, RequestOptions requestOptions) {
        final String accept = "application/json";
        RequestOptions requestOptionsLocal = requestOptions == null ? new RequestOptions() : requestOptions;
        String repeatabilityRequestId = UUID.randomUUID().toString();
        String repeatabilityFirstSent = DateTimeRfc1123.toRfc1123String(OffsetDateTime.now());
        requestOptionsLocal.addRequestCallback(requestLocal -> {
            if (requestLocal.getHeaders().get(HttpHeaderName.fromString("repeatability-request-id")) == null) {
                requestLocal.getHeaders().set(HttpHeaderName.fromString("repeatability-request-id"),
                    repeatabilityRequestId);
            }
        });
        requestOptionsLocal.addRequestCallback(requestLocal -> {
            if (requestLocal.getHeaders().get(HttpHeaderName.fromString("repeatability-first-sent")) == null) {
                requestLocal.getHeaders().set(HttpHeaderName.fromString("repeatability-first-sent"),
                    repeatabilityFirstSent);
            }
        });
        return FluxUtil.withContext(context -> service.createRole(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), accept, resource, requestOptionsLocal, context));
    }

    /**
     * Create a role.
     * <p>
     * <strong>Header Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>If-Match</td>
     * <td>String</td>
     * <td>No</td>
     * <td>The request should only proceed if an entity matches this string.</td>
     * </tr>
     * <tr>
     * <td>If-None-Match</td>
     * <td>String</td>
     * <td>No</td>
     * <td>The request should only proceed if no entity matches this string.</td>
     * </tr>
     * <tr>
     * <td>If-Unmodified-Since</td>
     * <td>OffsetDateTime</td>
     * <td>No</td>
     * <td>The request should only proceed if the entity was not modified after this time.</td>
     * </tr>
     * <tr>
     * <td>If-Modified-Since</td>
     * <td>OffsetDateTime</td>
     * <td>No</td>
     * <td>The request should only proceed if the entity was modified after this time.</td>
     * </tr>
     * <tr>
     * <td>repeatability-request-id</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Repeatability request ID header</td>
     * </tr>
     * <tr>
     * <td>repeatability-first-sent</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Repeatability first sent header as HTTP-date</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     isEnabled: boolean (Required)
     *     createdAt: OffsetDateTime (Required)
     *     updatedAt: OffsetDateTime (Required)
     *     permissions (Required): {
     *         chat (Required): {
     *             addParticipants: boolean (Required)
     *             removeSelf: boolean (Required)
     *             leaveChatThread: boolean (Required)
     *             removeParticipants: boolean (Required)
     *             listParticipants: boolean (Required)
     *             getOwnData: boolean (Required)
     *             getOthersData: boolean (Required)
     *             updateOwnData: boolean (Required)
     *             updateOthersData: boolean (Required)
     *             shareHistory: boolean (Required)
     *             getChatThreadProperties: boolean (Required)
     *             updateChatThreadProperties: boolean (Required)
     *             deleteChatThread: boolean (Required)
     *             sendMessage: boolean (Required)
     *             getMessages: boolean (Required)
     *             readMessages: boolean (Required)
     *             editOwnMessage: boolean (Required)
     *             editOthersMessage: boolean (Required)
     *             editAnyMessage: boolean (Required)
     *             annotateOwnMessage: boolean (Required)
     *             replyOwnMessage: boolean (Required)
     *             annotateOthersMessage: boolean (Required)
     *             replyOthersMessage: boolean (Required)
     *             deleteOwnMessage: boolean (Required)
     *             deleteOthersMessage: boolean (Required)
     *             deleteAnyMessage: boolean (Required)
     *             recoverOwnMessage: boolean (Required)
     *             recoverOthersMessage: boolean (Required)
     *             recoverAnyMessage: boolean (Required)
     *             getReadReceipts: boolean (Required)
     *             sendReadReceipt: boolean (Required)
     *             sendTypingNotification: boolean (Required)
     *         }
     *         calling (Required): {
     *             addParticipants: boolean (Required)
     *             addPstnParticipants: boolean (Required)
     *             removeSelf: boolean (Required)
     *             leaveCall: boolean (Required)
     *             removeParticipants: boolean (Required)
     *             removePstnParticipant: boolean (Required)
     *             listParticipants: boolean (Required)
     *             getOwnData: boolean (Required)
     *             getOthersData: boolean (Required)
     *             updateOwnData: boolean (Required)
     *             updateOthersData: boolean (Required)
     *             getCallProperties: boolean (Required)
     *             updateCallProperties: boolean (Required)
     *             admitLobbyParticipants: boolean (Required)
     *             denyLobbyParticipants: boolean (Required)
     *             bypassLobby: boolean (Required)
     *             deleteCall: boolean (Required)
     *             joinMeeting: boolean (Required)
     *             turnOnVideo: boolean (Required)
     *             shareVideo: boolean (Required)
     *             sendVideo: boolean (Required)
     *             restrictOthersVideo: boolean (Required)
     *             unrestrictOthersVideo: boolean (Required)
     *             turnOnAudio: boolean (Required)
     *             shareAudio: boolean (Required)
     *             sendAudio: boolean (Required)
     *             restrictOthersAudio: boolean (Required)
     *             unrestrictOthersAudio: boolean (Required)
     *             shareScreen: boolean (Required)
     *             shareContent: boolean (Required)
     *             muteSelf: boolean (Required)
     *             unmuteSelf: boolean (Required)
     *             muteOthers: boolean (Required)
     *             spotlightParticipants: boolean (Required)
     *             removeSpotlights: boolean (Required)
     *             removeParticipantsSpotlight: boolean (Required)
     *             startRecording: boolean (Required)
     *             stopRecording: boolean (Required)
     *             startLiveCaptions: boolean (Required)
     *             stopLiveCaptions: boolean (Required)
     *             raiseHand: boolean (Required)
     *             sendReaction: boolean (Required)
     *             hangUpForEveryOne: boolean (Required)
     *             endCallForAll: boolean (Required)
     *         }
     *     }
     * }
     * }</pre>
     * 
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> createRoleWithResponse(BinaryData resource, RequestOptions requestOptions) {
        final String accept = "application/json";
        RequestOptions requestOptionsLocal = requestOptions == null ? new RequestOptions() : requestOptions;
        String repeatabilityRequestId = UUID.randomUUID().toString();
        String repeatabilityFirstSent = DateTimeRfc1123.toRfc1123String(OffsetDateTime.now());
        requestOptionsLocal.addRequestCallback(requestLocal -> {
            if (requestLocal.getHeaders().get(HttpHeaderName.fromString("repeatability-request-id")) == null) {
                requestLocal.getHeaders().set(HttpHeaderName.fromString("repeatability-request-id"),
                    repeatabilityRequestId);
            }
        });
        requestOptionsLocal.addRequestCallback(requestLocal -> {
            if (requestLocal.getHeaders().get(HttpHeaderName.fromString("repeatability-first-sent")) == null) {
                requestLocal.getHeaders().set(HttpHeaderName.fromString("repeatability-first-sent"),
                    repeatabilityFirstSent);
            }
        });
        return service.createRoleSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(), accept,
            resource, requestOptionsLocal, Context.NONE);
    }

    /**
     * Get the next page of items.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     isEnabled: boolean (Required)
     *     createdAt: OffsetDateTime (Required)
     *     updatedAt: OffsetDateTime (Required)
     *     permissions (Required): {
     *         chat (Required): {
     *             addParticipants: boolean (Required)
     *             removeSelf: boolean (Required)
     *             leaveChatThread: boolean (Required)
     *             removeParticipants: boolean (Required)
     *             listParticipants: boolean (Required)
     *             getOwnData: boolean (Required)
     *             getOthersData: boolean (Required)
     *             updateOwnData: boolean (Required)
     *             updateOthersData: boolean (Required)
     *             shareHistory: boolean (Required)
     *             getChatThreadProperties: boolean (Required)
     *             updateChatThreadProperties: boolean (Required)
     *             deleteChatThread: boolean (Required)
     *             sendMessage: boolean (Required)
     *             getMessages: boolean (Required)
     *             readMessages: boolean (Required)
     *             editOwnMessage: boolean (Required)
     *             editOthersMessage: boolean (Required)
     *             editAnyMessage: boolean (Required)
     *             annotateOwnMessage: boolean (Required)
     *             replyOwnMessage: boolean (Required)
     *             annotateOthersMessage: boolean (Required)
     *             replyOthersMessage: boolean (Required)
     *             deleteOwnMessage: boolean (Required)
     *             deleteOthersMessage: boolean (Required)
     *             deleteAnyMessage: boolean (Required)
     *             recoverOwnMessage: boolean (Required)
     *             recoverOthersMessage: boolean (Required)
     *             recoverAnyMessage: boolean (Required)
     *             getReadReceipts: boolean (Required)
     *             sendReadReceipt: boolean (Required)
     *             sendTypingNotification: boolean (Required)
     *         }
     *         calling (Required): {
     *             addParticipants: boolean (Required)
     *             addPstnParticipants: boolean (Required)
     *             removeSelf: boolean (Required)
     *             leaveCall: boolean (Required)
     *             removeParticipants: boolean (Required)
     *             removePstnParticipant: boolean (Required)
     *             listParticipants: boolean (Required)
     *             getOwnData: boolean (Required)
     *             getOthersData: boolean (Required)
     *             updateOwnData: boolean (Required)
     *             updateOthersData: boolean (Required)
     *             getCallProperties: boolean (Required)
     *             updateCallProperties: boolean (Required)
     *             admitLobbyParticipants: boolean (Required)
     *             denyLobbyParticipants: boolean (Required)
     *             bypassLobby: boolean (Required)
     *             deleteCall: boolean (Required)
     *             joinMeeting: boolean (Required)
     *             turnOnVideo: boolean (Required)
     *             shareVideo: boolean (Required)
     *             sendVideo: boolean (Required)
     *             restrictOthersVideo: boolean (Required)
     *             unrestrictOthersVideo: boolean (Required)
     *             turnOnAudio: boolean (Required)
     *             shareAudio: boolean (Required)
     *             sendAudio: boolean (Required)
     *             restrictOthersAudio: boolean (Required)
     *             unrestrictOthersAudio: boolean (Required)
     *             shareScreen: boolean (Required)
     *             shareContent: boolean (Required)
     *             muteSelf: boolean (Required)
     *             unmuteSelf: boolean (Required)
     *             muteOthers: boolean (Required)
     *             spotlightParticipants: boolean (Required)
     *             removeSpotlights: boolean (Required)
     *             removeParticipantsSpotlight: boolean (Required)
     *             startRecording: boolean (Required)
     *             stopRecording: boolean (Required)
     *             startLiveCaptions: boolean (Required)
     *             stopLiveCaptions: boolean (Required)
     *             raiseHand: boolean (Required)
     *             sendReaction: boolean (Required)
     *             hangUpForEveryOne: boolean (Required)
     *             endCallForAll: boolean (Required)
     *         }
     *     }
     * }
     * }</pre>
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of Role items along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listRolesNextSinglePageAsync(String nextLink,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listRolesNext(nextLink, this.client.getEndpoint(), accept, requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null));
    }

    /**
     * Get the next page of items.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     isEnabled: boolean (Required)
     *     createdAt: OffsetDateTime (Required)
     *     updatedAt: OffsetDateTime (Required)
     *     permissions (Required): {
     *         chat (Required): {
     *             addParticipants: boolean (Required)
     *             removeSelf: boolean (Required)
     *             leaveChatThread: boolean (Required)
     *             removeParticipants: boolean (Required)
     *             listParticipants: boolean (Required)
     *             getOwnData: boolean (Required)
     *             getOthersData: boolean (Required)
     *             updateOwnData: boolean (Required)
     *             updateOthersData: boolean (Required)
     *             shareHistory: boolean (Required)
     *             getChatThreadProperties: boolean (Required)
     *             updateChatThreadProperties: boolean (Required)
     *             deleteChatThread: boolean (Required)
     *             sendMessage: boolean (Required)
     *             getMessages: boolean (Required)
     *             readMessages: boolean (Required)
     *             editOwnMessage: boolean (Required)
     *             editOthersMessage: boolean (Required)
     *             editAnyMessage: boolean (Required)
     *             annotateOwnMessage: boolean (Required)
     *             replyOwnMessage: boolean (Required)
     *             annotateOthersMessage: boolean (Required)
     *             replyOthersMessage: boolean (Required)
     *             deleteOwnMessage: boolean (Required)
     *             deleteOthersMessage: boolean (Required)
     *             deleteAnyMessage: boolean (Required)
     *             recoverOwnMessage: boolean (Required)
     *             recoverOthersMessage: boolean (Required)
     *             recoverAnyMessage: boolean (Required)
     *             getReadReceipts: boolean (Required)
     *             sendReadReceipt: boolean (Required)
     *             sendTypingNotification: boolean (Required)
     *         }
     *         calling (Required): {
     *             addParticipants: boolean (Required)
     *             addPstnParticipants: boolean (Required)
     *             removeSelf: boolean (Required)
     *             leaveCall: boolean (Required)
     *             removeParticipants: boolean (Required)
     *             removePstnParticipant: boolean (Required)
     *             listParticipants: boolean (Required)
     *             getOwnData: boolean (Required)
     *             getOthersData: boolean (Required)
     *             updateOwnData: boolean (Required)
     *             updateOthersData: boolean (Required)
     *             getCallProperties: boolean (Required)
     *             updateCallProperties: boolean (Required)
     *             admitLobbyParticipants: boolean (Required)
     *             denyLobbyParticipants: boolean (Required)
     *             bypassLobby: boolean (Required)
     *             deleteCall: boolean (Required)
     *             joinMeeting: boolean (Required)
     *             turnOnVideo: boolean (Required)
     *             shareVideo: boolean (Required)
     *             sendVideo: boolean (Required)
     *             restrictOthersVideo: boolean (Required)
     *             unrestrictOthersVideo: boolean (Required)
     *             turnOnAudio: boolean (Required)
     *             shareAudio: boolean (Required)
     *             sendAudio: boolean (Required)
     *             restrictOthersAudio: boolean (Required)
     *             unrestrictOthersAudio: boolean (Required)
     *             shareScreen: boolean (Required)
     *             shareContent: boolean (Required)
     *             muteSelf: boolean (Required)
     *             unmuteSelf: boolean (Required)
     *             muteOthers: boolean (Required)
     *             spotlightParticipants: boolean (Required)
     *             removeSpotlights: boolean (Required)
     *             removeParticipantsSpotlight: boolean (Required)
     *             startRecording: boolean (Required)
     *             stopRecording: boolean (Required)
     *             startLiveCaptions: boolean (Required)
     *             stopLiveCaptions: boolean (Required)
     *             raiseHand: boolean (Required)
     *             sendReaction: boolean (Required)
     *             hangUpForEveryOne: boolean (Required)
     *             endCallForAll: boolean (Required)
     *         }
     *     }
     * }
     * }</pre>
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of Role items along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listRolesNextSinglePage(String nextLink, RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res
            = service.listRolesNextSync(nextLink, this.client.getEndpoint(), accept, requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null);
    }

    private List<BinaryData> getValues(BinaryData binaryData, String path) {
        try {
            Map<?, ?> obj = binaryData.toObject(Map.class);
            List<?> values = (List<?>) obj.get(path);
            return values.stream().map(BinaryData::fromObject).collect(Collectors.toList());
        } catch (RuntimeException e) {
            return null;
        }
    }

    private String getNextLink(BinaryData binaryData, String path) {
        try {
            Map<?, ?> obj = binaryData.toObject(Map.class);
            return (String) obj.get(path);
        } catch (RuntimeException e) {
            return null;
        }
    }
}
