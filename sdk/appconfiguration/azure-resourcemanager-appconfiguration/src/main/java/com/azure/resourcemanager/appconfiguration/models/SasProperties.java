// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appconfiguration.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The SAS authentication settings of the configuration store.
 */
@Fluent
public final class SasProperties implements JsonSerializable<SasProperties> {
    /*
     * The status of the SAS token authentication. This property manages if SAS token authentication is enabled or
     * disabled.
     */
    private SasStatus status;

    /*
     * Information about different kinds of SAS token.
     */
    private List<SasKindInfo> kinds;

    /**
     * Creates an instance of SasProperties class.
     */
    public SasProperties() {
    }

    /**
     * Get the status property: The status of the SAS token authentication. This property manages if SAS token
     * authentication is enabled or disabled.
     * 
     * @return the status value.
     */
    public SasStatus status() {
        return this.status;
    }

    /**
     * Set the status property: The status of the SAS token authentication. This property manages if SAS token
     * authentication is enabled or disabled.
     * 
     * @param status the status value to set.
     * @return the SasProperties object itself.
     */
    public SasProperties withStatus(SasStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Get the kinds property: Information about different kinds of SAS token.
     * 
     * @return the kinds value.
     */
    public List<SasKindInfo> kinds() {
        return this.kinds;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (kinds() != null) {
            kinds().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SasProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SasProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the SasProperties.
     */
    public static SasProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SasProperties deserializedSasProperties = new SasProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("status".equals(fieldName)) {
                    deserializedSasProperties.status = SasStatus.fromString(reader.getString());
                } else if ("kinds".equals(fieldName)) {
                    List<SasKindInfo> kinds = reader.readArray(reader1 -> SasKindInfo.fromJson(reader1));
                    deserializedSasProperties.kinds = kinds;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSasProperties;
        });
    }
}
