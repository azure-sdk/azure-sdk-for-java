// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appconfiguration.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.appconfiguration.models.DataPlaneProxyProperties;
import com.azure.resourcemanager.appconfiguration.models.EncryptionProperties;
import com.azure.resourcemanager.appconfiguration.models.ExperimentationProperties;
import com.azure.resourcemanager.appconfiguration.models.PublicNetworkAccess;
import com.azure.resourcemanager.appconfiguration.models.TelemetryProperties;
import java.io.IOException;

/**
 * The properties for updating a configuration store.
 */
@Fluent
public final class ConfigurationStorePropertiesUpdateParameters
    implements JsonSerializable<ConfigurationStorePropertiesUpdateParameters> {
    /*
     * The encryption settings of the configuration store.
     */
    private EncryptionProperties encryption;

    /*
     * Disables all authentication methods other than AAD authentication.
     */
    private Boolean disableLocalAuth;

    /*
     * Allow, disallow, or let network security perimeter configuration control public network access to the data plane.
     */
    private PublicNetworkAccess publicNetworkAccess;

    /*
     * Property specifying whether protection against purge is enabled for this configuration store.
     */
    private Boolean enablePurgeProtection;

    /*
     * Property specifying the configuration of data plane proxy for Azure Resource Manager (ARM).
     */
    private DataPlaneProxyProperties dataPlaneProxy;

    /*
     * Property specifying the configuration of telemetry to update for this configuration store
     */
    private TelemetryProperties telemetry;

    /*
     * Property specifying the configuration of experimentation to update for this configuration store
     */
    private ExperimentationProperties experimentation;

    /*
     * The amount of time in seconds to retain new key value revisions. Defaults to 604800 (7 days) for Free SKU stores
     * and 2592000 (30 days) for Standard SKU stores.
     */
    private Long revisionRetentionPeriodInSeconds;

    /**
     * Creates an instance of ConfigurationStorePropertiesUpdateParameters class.
     */
    public ConfigurationStorePropertiesUpdateParameters() {
    }

    /**
     * Get the encryption property: The encryption settings of the configuration store.
     * 
     * @return the encryption value.
     */
    public EncryptionProperties encryption() {
        return this.encryption;
    }

    /**
     * Set the encryption property: The encryption settings of the configuration store.
     * 
     * @param encryption the encryption value to set.
     * @return the ConfigurationStorePropertiesUpdateParameters object itself.
     */
    public ConfigurationStorePropertiesUpdateParameters withEncryption(EncryptionProperties encryption) {
        this.encryption = encryption;
        return this;
    }

    /**
     * Get the disableLocalAuth property: Disables all authentication methods other than AAD authentication.
     * 
     * @return the disableLocalAuth value.
     */
    public Boolean disableLocalAuth() {
        return this.disableLocalAuth;
    }

    /**
     * Set the disableLocalAuth property: Disables all authentication methods other than AAD authentication.
     * 
     * @param disableLocalAuth the disableLocalAuth value to set.
     * @return the ConfigurationStorePropertiesUpdateParameters object itself.
     */
    public ConfigurationStorePropertiesUpdateParameters withDisableLocalAuth(Boolean disableLocalAuth) {
        this.disableLocalAuth = disableLocalAuth;
        return this;
    }

    /**
     * Get the publicNetworkAccess property: Allow, disallow, or let network security perimeter configuration control
     * public network access to the data plane.
     * 
     * @return the publicNetworkAccess value.
     */
    public PublicNetworkAccess publicNetworkAccess() {
        return this.publicNetworkAccess;
    }

    /**
     * Set the publicNetworkAccess property: Allow, disallow, or let network security perimeter configuration control
     * public network access to the data plane.
     * 
     * @param publicNetworkAccess the publicNetworkAccess value to set.
     * @return the ConfigurationStorePropertiesUpdateParameters object itself.
     */
    public ConfigurationStorePropertiesUpdateParameters
        withPublicNetworkAccess(PublicNetworkAccess publicNetworkAccess) {
        this.publicNetworkAccess = publicNetworkAccess;
        return this;
    }

    /**
     * Get the enablePurgeProtection property: Property specifying whether protection against purge is enabled for this
     * configuration store.
     * 
     * @return the enablePurgeProtection value.
     */
    public Boolean enablePurgeProtection() {
        return this.enablePurgeProtection;
    }

    /**
     * Set the enablePurgeProtection property: Property specifying whether protection against purge is enabled for this
     * configuration store.
     * 
     * @param enablePurgeProtection the enablePurgeProtection value to set.
     * @return the ConfigurationStorePropertiesUpdateParameters object itself.
     */
    public ConfigurationStorePropertiesUpdateParameters withEnablePurgeProtection(Boolean enablePurgeProtection) {
        this.enablePurgeProtection = enablePurgeProtection;
        return this;
    }

    /**
     * Get the dataPlaneProxy property: Property specifying the configuration of data plane proxy for Azure Resource
     * Manager (ARM).
     * 
     * @return the dataPlaneProxy value.
     */
    public DataPlaneProxyProperties dataPlaneProxy() {
        return this.dataPlaneProxy;
    }

    /**
     * Set the dataPlaneProxy property: Property specifying the configuration of data plane proxy for Azure Resource
     * Manager (ARM).
     * 
     * @param dataPlaneProxy the dataPlaneProxy value to set.
     * @return the ConfigurationStorePropertiesUpdateParameters object itself.
     */
    public ConfigurationStorePropertiesUpdateParameters withDataPlaneProxy(DataPlaneProxyProperties dataPlaneProxy) {
        this.dataPlaneProxy = dataPlaneProxy;
        return this;
    }

    /**
     * Get the telemetry property: Property specifying the configuration of telemetry to update for this configuration
     * store.
     * 
     * @return the telemetry value.
     */
    public TelemetryProperties telemetry() {
        return this.telemetry;
    }

    /**
     * Set the telemetry property: Property specifying the configuration of telemetry to update for this configuration
     * store.
     * 
     * @param telemetry the telemetry value to set.
     * @return the ConfigurationStorePropertiesUpdateParameters object itself.
     */
    public ConfigurationStorePropertiesUpdateParameters withTelemetry(TelemetryProperties telemetry) {
        this.telemetry = telemetry;
        return this;
    }

    /**
     * Get the experimentation property: Property specifying the configuration of experimentation to update for this
     * configuration store.
     * 
     * @return the experimentation value.
     */
    public ExperimentationProperties experimentation() {
        return this.experimentation;
    }

    /**
     * Set the experimentation property: Property specifying the configuration of experimentation to update for this
     * configuration store.
     * 
     * @param experimentation the experimentation value to set.
     * @return the ConfigurationStorePropertiesUpdateParameters object itself.
     */
    public ConfigurationStorePropertiesUpdateParameters withExperimentation(ExperimentationProperties experimentation) {
        this.experimentation = experimentation;
        return this;
    }

    /**
     * Get the revisionRetentionPeriodInSeconds property: The amount of time in seconds to retain new key value
     * revisions. Defaults to 604800 (7 days) for Free SKU stores and 2592000 (30 days) for Standard SKU stores.
     * 
     * @return the revisionRetentionPeriodInSeconds value.
     */
    public Long revisionRetentionPeriodInSeconds() {
        return this.revisionRetentionPeriodInSeconds;
    }

    /**
     * Set the revisionRetentionPeriodInSeconds property: The amount of time in seconds to retain new key value
     * revisions. Defaults to 604800 (7 days) for Free SKU stores and 2592000 (30 days) for Standard SKU stores.
     * 
     * @param revisionRetentionPeriodInSeconds the revisionRetentionPeriodInSeconds value to set.
     * @return the ConfigurationStorePropertiesUpdateParameters object itself.
     */
    public ConfigurationStorePropertiesUpdateParameters
        withRevisionRetentionPeriodInSeconds(Long revisionRetentionPeriodInSeconds) {
        this.revisionRetentionPeriodInSeconds = revisionRetentionPeriodInSeconds;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (encryption() != null) {
            encryption().validate();
        }
        if (dataPlaneProxy() != null) {
            dataPlaneProxy().validate();
        }
        if (telemetry() != null) {
            telemetry().validate();
        }
        if (experimentation() != null) {
            experimentation().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("encryption", this.encryption);
        jsonWriter.writeBooleanField("disableLocalAuth", this.disableLocalAuth);
        jsonWriter.writeStringField("publicNetworkAccess",
            this.publicNetworkAccess == null ? null : this.publicNetworkAccess.toString());
        jsonWriter.writeBooleanField("enablePurgeProtection", this.enablePurgeProtection);
        jsonWriter.writeJsonField("dataPlaneProxy", this.dataPlaneProxy);
        jsonWriter.writeJsonField("telemetry", this.telemetry);
        jsonWriter.writeJsonField("experimentation", this.experimentation);
        jsonWriter.writeNumberField("revisionRetentionPeriodInSeconds", this.revisionRetentionPeriodInSeconds);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ConfigurationStorePropertiesUpdateParameters from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ConfigurationStorePropertiesUpdateParameters if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ConfigurationStorePropertiesUpdateParameters.
     */
    public static ConfigurationStorePropertiesUpdateParameters fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ConfigurationStorePropertiesUpdateParameters deserializedConfigurationStorePropertiesUpdateParameters
                = new ConfigurationStorePropertiesUpdateParameters();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("encryption".equals(fieldName)) {
                    deserializedConfigurationStorePropertiesUpdateParameters.encryption
                        = EncryptionProperties.fromJson(reader);
                } else if ("disableLocalAuth".equals(fieldName)) {
                    deserializedConfigurationStorePropertiesUpdateParameters.disableLocalAuth
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("publicNetworkAccess".equals(fieldName)) {
                    deserializedConfigurationStorePropertiesUpdateParameters.publicNetworkAccess
                        = PublicNetworkAccess.fromString(reader.getString());
                } else if ("enablePurgeProtection".equals(fieldName)) {
                    deserializedConfigurationStorePropertiesUpdateParameters.enablePurgeProtection
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("dataPlaneProxy".equals(fieldName)) {
                    deserializedConfigurationStorePropertiesUpdateParameters.dataPlaneProxy
                        = DataPlaneProxyProperties.fromJson(reader);
                } else if ("telemetry".equals(fieldName)) {
                    deserializedConfigurationStorePropertiesUpdateParameters.telemetry
                        = TelemetryProperties.fromJson(reader);
                } else if ("experimentation".equals(fieldName)) {
                    deserializedConfigurationStorePropertiesUpdateParameters.experimentation
                        = ExperimentationProperties.fromJson(reader);
                } else if ("revisionRetentionPeriodInSeconds".equals(fieldName)) {
                    deserializedConfigurationStorePropertiesUpdateParameters.revisionRetentionPeriodInSeconds
                        = reader.getNullable(JsonReader::getLong);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedConfigurationStorePropertiesUpdateParameters;
        });
    }
}
