// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appconfiguration.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.appconfiguration.models.NetworkSecurityPerimeter;
import com.azure.resourcemanager.appconfiguration.models.NetworkSecurityPerimeterProfile;
import com.azure.resourcemanager.appconfiguration.models.NetworkSecurityPerimeterProvisioningIssue;
import com.azure.resourcemanager.appconfiguration.models.NetworkSecurityPerimeterResourceAssociation;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Network security perimeter configuration for a configuration store. */
@Fluent
public final class NetworkSecurityPerimeterConfigurationInner {
    /*
     * The resource ID.
     */
    @JsonProperty(value = "id")
    private String id;

    /*
     * The name of the network security perimeter configuration.
     */
    @JsonProperty(value = "name")
    private String name;

    /*
     * The type of the resource.
     */
    @JsonProperty(value = "type")
    private String type;

    /*
     * Resource properties.
     */
    @JsonProperty(value = "properties")
    private NetworkSecurityPerimeterConfigurationProperties innerProperties;

    /** Creates an instance of NetworkSecurityPerimeterConfigurationInner class. */
    public NetworkSecurityPerimeterConfigurationInner() {
    }

    /**
     * Get the id property: The resource ID.
     *
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: The resource ID.
     *
     * @param id the id value to set.
     * @return the NetworkSecurityPerimeterConfigurationInner object itself.
     */
    public NetworkSecurityPerimeterConfigurationInner withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the name property: The name of the network security perimeter configuration.
     *
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The name of the network security perimeter configuration.
     *
     * @param name the name value to set.
     * @return the NetworkSecurityPerimeterConfigurationInner object itself.
     */
    public NetworkSecurityPerimeterConfigurationInner withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the type property: The type of the resource.
     *
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Set the type property: The type of the resource.
     *
     * @param type the type value to set.
     * @return the NetworkSecurityPerimeterConfigurationInner object itself.
     */
    public NetworkSecurityPerimeterConfigurationInner withType(String type) {
        this.type = type;
        return this;
    }

    /**
     * Get the innerProperties property: Resource properties.
     *
     * @return the innerProperties value.
     */
    private NetworkSecurityPerimeterConfigurationProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the provisioningState property: Provisioning state of network security perimeter configuration.
     *
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Set the provisioningState property: Provisioning state of network security perimeter configuration.
     *
     * @param provisioningState the provisioningState value to set.
     * @return the NetworkSecurityPerimeterConfigurationInner object itself.
     */
    public NetworkSecurityPerimeterConfigurationInner withProvisioningState(String provisioningState) {
        if (this.innerProperties() == null) {
            this.innerProperties = new NetworkSecurityPerimeterConfigurationProperties();
        }
        this.innerProperties().withProvisioningState(provisioningState);
        return this;
    }

    /**
     * Get the provisioningIssues property: Provisioning issues of network security perimeter configuration.
     *
     * @return the provisioningIssues value.
     */
    public List<NetworkSecurityPerimeterProvisioningIssue> provisioningIssues() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningIssues();
    }

    /**
     * Set the provisioningIssues property: Provisioning issues of network security perimeter configuration.
     *
     * @param provisioningIssues the provisioningIssues value to set.
     * @return the NetworkSecurityPerimeterConfigurationInner object itself.
     */
    public NetworkSecurityPerimeterConfigurationInner withProvisioningIssues(
        List<NetworkSecurityPerimeterProvisioningIssue> provisioningIssues) {
        if (this.innerProperties() == null) {
            this.innerProperties = new NetworkSecurityPerimeterConfigurationProperties();
        }
        this.innerProperties().withProvisioningIssues(provisioningIssues);
        return this;
    }

    /**
     * Get the networkSecurityPerimeter property: The networkSecurityPerimeter property.
     *
     * @return the networkSecurityPerimeter value.
     */
    public NetworkSecurityPerimeter networkSecurityPerimeter() {
        return this.innerProperties() == null ? null : this.innerProperties().networkSecurityPerimeter();
    }

    /**
     * Set the networkSecurityPerimeter property: The networkSecurityPerimeter property.
     *
     * @param networkSecurityPerimeter the networkSecurityPerimeter value to set.
     * @return the NetworkSecurityPerimeterConfigurationInner object itself.
     */
    public NetworkSecurityPerimeterConfigurationInner withNetworkSecurityPerimeter(
        NetworkSecurityPerimeter networkSecurityPerimeter) {
        if (this.innerProperties() == null) {
            this.innerProperties = new NetworkSecurityPerimeterConfigurationProperties();
        }
        this.innerProperties().withNetworkSecurityPerimeter(networkSecurityPerimeter);
        return this;
    }

    /**
     * Get the resourceAssociation property: The resourceAssociation property.
     *
     * @return the resourceAssociation value.
     */
    public NetworkSecurityPerimeterResourceAssociation resourceAssociation() {
        return this.innerProperties() == null ? null : this.innerProperties().resourceAssociation();
    }

    /**
     * Set the resourceAssociation property: The resourceAssociation property.
     *
     * @param resourceAssociation the resourceAssociation value to set.
     * @return the NetworkSecurityPerimeterConfigurationInner object itself.
     */
    public NetworkSecurityPerimeterConfigurationInner withResourceAssociation(
        NetworkSecurityPerimeterResourceAssociation resourceAssociation) {
        if (this.innerProperties() == null) {
            this.innerProperties = new NetworkSecurityPerimeterConfigurationProperties();
        }
        this.innerProperties().withResourceAssociation(resourceAssociation);
        return this;
    }

    /**
     * Get the profile property: The profile property.
     *
     * @return the profile value.
     */
    public NetworkSecurityPerimeterProfile profile() {
        return this.innerProperties() == null ? null : this.innerProperties().profile();
    }

    /**
     * Set the profile property: The profile property.
     *
     * @param profile the profile value to set.
     * @return the NetworkSecurityPerimeterConfigurationInner object itself.
     */
    public NetworkSecurityPerimeterConfigurationInner withProfile(NetworkSecurityPerimeterProfile profile) {
        if (this.innerProperties() == null) {
            this.innerProperties = new NetworkSecurityPerimeterConfigurationProperties();
        }
        this.innerProperties().withProfile(profile);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
