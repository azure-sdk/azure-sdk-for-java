// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appconfiguration.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.appconfiguration.fluent.ExperimentationsClient;
import com.azure.resourcemanager.appconfiguration.fluent.models.ExperimentationInner;
import com.azure.resourcemanager.appconfiguration.models.Experimentation;
import com.azure.resourcemanager.appconfiguration.models.Experimentations;

public final class ExperimentationsImpl implements Experimentations {
    private static final ClientLogger LOGGER = new ClientLogger(ExperimentationsImpl.class);

    private final ExperimentationsClient innerClient;

    private final com.azure.resourcemanager.appconfiguration.AppConfigurationManager serviceManager;

    public ExperimentationsImpl(ExperimentationsClient innerClient,
        com.azure.resourcemanager.appconfiguration.AppConfigurationManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<Experimentation> list(String resourceGroupName, String configStoreName) {
        PagedIterable<ExperimentationInner> inner = this.serviceClient().list(resourceGroupName, configStoreName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new ExperimentationImpl(inner1, this.manager()));
    }

    public PagedIterable<Experimentation> list(String resourceGroupName, String configStoreName, Context context) {
        PagedIterable<ExperimentationInner> inner
            = this.serviceClient().list(resourceGroupName, configStoreName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new ExperimentationImpl(inner1, this.manager()));
    }

    public Response<Experimentation> getWithResponse(String resourceGroupName, String configStoreName,
        String experimentationName, Context context) {
        Response<ExperimentationInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, configStoreName, experimentationName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new ExperimentationImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Experimentation get(String resourceGroupName, String configStoreName, String experimentationName) {
        ExperimentationInner inner = this.serviceClient().get(resourceGroupName, configStoreName, experimentationName);
        if (inner != null) {
            return new ExperimentationImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String configStoreName, String experimentationName) {
        this.serviceClient().delete(resourceGroupName, configStoreName, experimentationName);
    }

    public void delete(String resourceGroupName, String configStoreName, String experimentationName, Context context) {
        this.serviceClient().delete(resourceGroupName, configStoreName, experimentationName, context);
    }

    public Experimentation getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String configStoreName = ResourceManagerUtils.getValueFromIdByName(id, "configurationStores");
        if (configStoreName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'configurationStores'.", id)));
        }
        String experimentationName = ResourceManagerUtils.getValueFromIdByName(id, "experimentation");
        if (experimentationName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'experimentation'.", id)));
        }
        return this.getWithResponse(resourceGroupName, configStoreName, experimentationName, Context.NONE).getValue();
    }

    public Response<Experimentation> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String configStoreName = ResourceManagerUtils.getValueFromIdByName(id, "configurationStores");
        if (configStoreName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'configurationStores'.", id)));
        }
        String experimentationName = ResourceManagerUtils.getValueFromIdByName(id, "experimentation");
        if (experimentationName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'experimentation'.", id)));
        }
        return this.getWithResponse(resourceGroupName, configStoreName, experimentationName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String configStoreName = ResourceManagerUtils.getValueFromIdByName(id, "configurationStores");
        if (configStoreName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'configurationStores'.", id)));
        }
        String experimentationName = ResourceManagerUtils.getValueFromIdByName(id, "experimentation");
        if (experimentationName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'experimentation'.", id)));
        }
        this.delete(resourceGroupName, configStoreName, experimentationName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String configStoreName = ResourceManagerUtils.getValueFromIdByName(id, "configurationStores");
        if (configStoreName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'configurationStores'.", id)));
        }
        String experimentationName = ResourceManagerUtils.getValueFromIdByName(id, "experimentation");
        if (experimentationName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'experimentation'.", id)));
        }
        this.delete(resourceGroupName, configStoreName, experimentationName, context);
    }

    private ExperimentationsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.appconfiguration.AppConfigurationManager manager() {
        return this.serviceManager;
    }

    public ExperimentationImpl define(String name) {
        return new ExperimentationImpl(name, this.manager());
    }
}
