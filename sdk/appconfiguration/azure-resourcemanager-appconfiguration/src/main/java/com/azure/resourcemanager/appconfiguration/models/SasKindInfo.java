// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appconfiguration.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Information about a specific kind of SAS token.
 */
@Immutable
public final class SasKindInfo implements JsonSerializable<SasKindInfo> {
    /*
     * The kind of the SAS token.
     */
    private SasKind name;

    /*
     * The last reset time of all tokens of the specified SAS kind.
     */
    private OffsetDateTime lastModifiedAt;

    /**
     * Creates an instance of SasKindInfo class.
     */
    public SasKindInfo() {
    }

    /**
     * Get the name property: The kind of the SAS token.
     * 
     * @return the name value.
     */
    public SasKind name() {
        return this.name;
    }

    /**
     * Get the lastModifiedAt property: The last reset time of all tokens of the specified SAS kind.
     * 
     * @return the lastModifiedAt value.
     */
    public OffsetDateTime lastModifiedAt() {
        return this.lastModifiedAt;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SasKindInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SasKindInfo if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the SasKindInfo.
     */
    public static SasKindInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SasKindInfo deserializedSasKindInfo = new SasKindInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedSasKindInfo.name = SasKind.fromString(reader.getString());
                } else if ("lastModifiedAt".equals(fieldName)) {
                    deserializedSasKindInfo.lastModifiedAt = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSasKindInfo;
        });
    }
}
