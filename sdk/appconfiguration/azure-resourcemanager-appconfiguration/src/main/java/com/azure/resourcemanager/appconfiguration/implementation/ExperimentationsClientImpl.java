// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appconfiguration.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.appconfiguration.fluent.ExperimentationsClient;
import com.azure.resourcemanager.appconfiguration.fluent.models.ExperimentationInner;
import com.azure.resourcemanager.appconfiguration.models.ExperimentationListResult;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in ExperimentationsClient.
 */
public final class ExperimentationsClientImpl implements ExperimentationsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final ExperimentationsService service;

    /**
     * The service client containing this operation class.
     */
    private final AppConfigurationManagementClientImpl client;

    /**
     * Initializes an instance of ExperimentationsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    ExperimentationsClientImpl(AppConfigurationManagementClientImpl client) {
        this.service
            = RestProxy.create(ExperimentationsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AppConfigurationManagementClientExperimentations to be used by the
     * proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "AppConfigurationMana")
    public interface ExperimentationsService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppConfiguration/configurationStores/{configStoreName}/experimentation")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ExperimentationListResult>> list(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("configStoreName") String configStoreName, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppConfiguration/configurationStores/{configStoreName}/experimentation/{experimentationName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ExperimentationInner>> get(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("configStoreName") String configStoreName,
            @PathParam("experimentationName") String experimentationName, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppConfiguration/configurationStores/{configStoreName}/experimentation/{experimentationName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> create(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("configStoreName") String configStoreName,
            @PathParam("experimentationName") String experimentationName, @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") ExperimentationInner experimentationCreationParameters,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppConfiguration/configurationStores/{configStoreName}/experimentation/{experimentationName}")
        @ExpectedResponses({ 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("configStoreName") String configStoreName,
            @PathParam("experimentationName") String experimentationName, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ExperimentationListResult>> listNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Lists experimentation for a given configuration store.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param configStoreName The name of the configuration store.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of a request to list experimentation along with {@link PagedResponse} on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ExperimentationInner>> listSinglePageAsync(String resourceGroupName,
        String configStoreName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (configStoreName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter configStoreName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.list(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, configStoreName, this.client.getApiVersion(), accept, context))
            .<PagedResponse<ExperimentationInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Lists experimentation for a given configuration store.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param configStoreName The name of the configuration store.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of a request to list experimentation along with {@link PagedResponse} on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ExperimentationInner>> listSinglePageAsync(String resourceGroupName,
        String configStoreName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (configStoreName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter configStoreName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .list(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName, configStoreName,
                this.client.getApiVersion(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * Lists experimentation for a given configuration store.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param configStoreName The name of the configuration store.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of a request to list experimentation as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ExperimentationInner> listAsync(String resourceGroupName, String configStoreName) {
        return new PagedFlux<>(() -> listSinglePageAsync(resourceGroupName, configStoreName),
            nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Lists experimentation for a given configuration store.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param configStoreName The name of the configuration store.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of a request to list experimentation as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ExperimentationInner> listAsync(String resourceGroupName, String configStoreName,
        Context context) {
        return new PagedFlux<>(() -> listSinglePageAsync(resourceGroupName, configStoreName, context),
            nextLink -> listNextSinglePageAsync(nextLink, context));
    }

    /**
     * Lists experimentation for a given configuration store.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param configStoreName The name of the configuration store.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of a request to list experimentation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ExperimentationInner> list(String resourceGroupName, String configStoreName) {
        return new PagedIterable<>(listAsync(resourceGroupName, configStoreName));
    }

    /**
     * Lists experimentation for a given configuration store.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param configStoreName The name of the configuration store.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of a request to list experimentation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ExperimentationInner> list(String resourceGroupName, String configStoreName, Context context) {
        return new PagedIterable<>(listAsync(resourceGroupName, configStoreName, context));
    }

    /**
     * Gets the properties of the experimentation.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param configStoreName The name of the configuration store.
     * @param experimentationName The name of the experimentation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the properties of the experimentation along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ExperimentationInner>> getWithResponseAsync(String resourceGroupName, String configStoreName,
        String experimentationName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (configStoreName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter configStoreName is required and cannot be null."));
        }
        if (experimentationName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter experimentationName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, configStoreName, experimentationName, this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets the properties of the experimentation.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param configStoreName The name of the configuration store.
     * @param experimentationName The name of the experimentation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the properties of the experimentation along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ExperimentationInner>> getWithResponseAsync(String resourceGroupName, String configStoreName,
        String experimentationName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (configStoreName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter configStoreName is required and cannot be null."));
        }
        if (experimentationName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter experimentationName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            configStoreName, experimentationName, this.client.getApiVersion(), accept, context);
    }

    /**
     * Gets the properties of the experimentation.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param configStoreName The name of the configuration store.
     * @param experimentationName The name of the experimentation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the properties of the experimentation on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ExperimentationInner> getAsync(String resourceGroupName, String configStoreName,
        String experimentationName) {
        return getWithResponseAsync(resourceGroupName, configStoreName, experimentationName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets the properties of the experimentation.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param configStoreName The name of the configuration store.
     * @param experimentationName The name of the experimentation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the properties of the experimentation along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ExperimentationInner> getWithResponse(String resourceGroupName, String configStoreName,
        String experimentationName, Context context) {
        return getWithResponseAsync(resourceGroupName, configStoreName, experimentationName, context).block();
    }

    /**
     * Gets the properties of the experimentation.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param configStoreName The name of the configuration store.
     * @param experimentationName The name of the experimentation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the properties of the experimentation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ExperimentationInner get(String resourceGroupName, String configStoreName, String experimentationName) {
        return getWithResponse(resourceGroupName, configStoreName, experimentationName, Context.NONE).getValue();
    }

    /**
     * Creates the experimentation.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param configStoreName The name of the configuration store.
     * @param experimentationName The name of the experimentation.
     * @param experimentationCreationParameters The parameters for creating the experimentation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the experimentation resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createWithResponseAsync(String resourceGroupName, String configStoreName,
        String experimentationName, ExperimentationInner experimentationCreationParameters) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (configStoreName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter configStoreName is required and cannot be null."));
        }
        if (experimentationName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter experimentationName is required and cannot be null."));
        }
        if (experimentationCreationParameters != null) {
            experimentationCreationParameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.create(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, configStoreName, experimentationName, this.client.getApiVersion(),
                experimentationCreationParameters, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Creates the experimentation.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param configStoreName The name of the configuration store.
     * @param experimentationName The name of the experimentation.
     * @param experimentationCreationParameters The parameters for creating the experimentation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the experimentation resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createWithResponseAsync(String resourceGroupName, String configStoreName,
        String experimentationName, ExperimentationInner experimentationCreationParameters, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (configStoreName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter configStoreName is required and cannot be null."));
        }
        if (experimentationName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter experimentationName is required and cannot be null."));
        }
        if (experimentationCreationParameters != null) {
            experimentationCreationParameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.create(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            configStoreName, experimentationName, this.client.getApiVersion(), experimentationCreationParameters,
            accept, context);
    }

    /**
     * Creates the experimentation.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param configStoreName The name of the configuration store.
     * @param experimentationName The name of the experimentation.
     * @param experimentationCreationParameters The parameters for creating the experimentation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the experimentation resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ExperimentationInner>, ExperimentationInner> beginCreateAsync(
        String resourceGroupName, String configStoreName, String experimentationName,
        ExperimentationInner experimentationCreationParameters) {
        Mono<Response<Flux<ByteBuffer>>> mono = createWithResponseAsync(resourceGroupName, configStoreName,
            experimentationName, experimentationCreationParameters);
        return this.client.<ExperimentationInner, ExperimentationInner>getLroResult(mono, this.client.getHttpPipeline(),
            ExperimentationInner.class, ExperimentationInner.class, this.client.getContext());
    }

    /**
     * Creates the experimentation.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param configStoreName The name of the configuration store.
     * @param experimentationName The name of the experimentation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the experimentation resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ExperimentationInner>, ExperimentationInner>
        beginCreateAsync(String resourceGroupName, String configStoreName, String experimentationName) {
        final ExperimentationInner experimentationCreationParameters = null;
        Mono<Response<Flux<ByteBuffer>>> mono = createWithResponseAsync(resourceGroupName, configStoreName,
            experimentationName, experimentationCreationParameters);
        return this.client.<ExperimentationInner, ExperimentationInner>getLroResult(mono, this.client.getHttpPipeline(),
            ExperimentationInner.class, ExperimentationInner.class, this.client.getContext());
    }

    /**
     * Creates the experimentation.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param configStoreName The name of the configuration store.
     * @param experimentationName The name of the experimentation.
     * @param experimentationCreationParameters The parameters for creating the experimentation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the experimentation resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ExperimentationInner>, ExperimentationInner> beginCreateAsync(
        String resourceGroupName, String configStoreName, String experimentationName,
        ExperimentationInner experimentationCreationParameters, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = createWithResponseAsync(resourceGroupName, configStoreName,
            experimentationName, experimentationCreationParameters, context);
        return this.client.<ExperimentationInner, ExperimentationInner>getLroResult(mono, this.client.getHttpPipeline(),
            ExperimentationInner.class, ExperimentationInner.class, context);
    }

    /**
     * Creates the experimentation.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param configStoreName The name of the configuration store.
     * @param experimentationName The name of the experimentation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the experimentation resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ExperimentationInner>, ExperimentationInner> beginCreate(String resourceGroupName,
        String configStoreName, String experimentationName) {
        final ExperimentationInner experimentationCreationParameters = null;
        return this
            .beginCreateAsync(resourceGroupName, configStoreName, experimentationName,
                experimentationCreationParameters)
            .getSyncPoller();
    }

    /**
     * Creates the experimentation.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param configStoreName The name of the configuration store.
     * @param experimentationName The name of the experimentation.
     * @param experimentationCreationParameters The parameters for creating the experimentation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the experimentation resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ExperimentationInner>, ExperimentationInner> beginCreate(String resourceGroupName,
        String configStoreName, String experimentationName, ExperimentationInner experimentationCreationParameters,
        Context context) {
        return this
            .beginCreateAsync(resourceGroupName, configStoreName, experimentationName,
                experimentationCreationParameters, context)
            .getSyncPoller();
    }

    /**
     * Creates the experimentation.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param configStoreName The name of the configuration store.
     * @param experimentationName The name of the experimentation.
     * @param experimentationCreationParameters The parameters for creating the experimentation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the experimentation resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ExperimentationInner> createAsync(String resourceGroupName, String configStoreName,
        String experimentationName, ExperimentationInner experimentationCreationParameters) {
        return beginCreateAsync(resourceGroupName, configStoreName, experimentationName,
            experimentationCreationParameters).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates the experimentation.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param configStoreName The name of the configuration store.
     * @param experimentationName The name of the experimentation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the experimentation resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ExperimentationInner> createAsync(String resourceGroupName, String configStoreName,
        String experimentationName) {
        final ExperimentationInner experimentationCreationParameters = null;
        return beginCreateAsync(resourceGroupName, configStoreName, experimentationName,
            experimentationCreationParameters).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates the experimentation.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param configStoreName The name of the configuration store.
     * @param experimentationName The name of the experimentation.
     * @param experimentationCreationParameters The parameters for creating the experimentation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the experimentation resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ExperimentationInner> createAsync(String resourceGroupName, String configStoreName,
        String experimentationName, ExperimentationInner experimentationCreationParameters, Context context) {
        return beginCreateAsync(resourceGroupName, configStoreName, experimentationName,
            experimentationCreationParameters, context).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates the experimentation.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param configStoreName The name of the configuration store.
     * @param experimentationName The name of the experimentation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the experimentation resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ExperimentationInner create(String resourceGroupName, String configStoreName, String experimentationName) {
        final ExperimentationInner experimentationCreationParameters = null;
        return createAsync(resourceGroupName, configStoreName, experimentationName, experimentationCreationParameters)
            .block();
    }

    /**
     * Creates the experimentation.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param configStoreName The name of the configuration store.
     * @param experimentationName The name of the experimentation.
     * @param experimentationCreationParameters The parameters for creating the experimentation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the experimentation resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ExperimentationInner create(String resourceGroupName, String configStoreName, String experimentationName,
        ExperimentationInner experimentationCreationParameters, Context context) {
        return createAsync(resourceGroupName, configStoreName, experimentationName, experimentationCreationParameters,
            context).block();
    }

    /**
     * Deletes the experimentation.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param configStoreName The name of the configuration store.
     * @param experimentationName The name of the experimentation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName, String configStoreName,
        String experimentationName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (configStoreName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter configStoreName is required and cannot be null."));
        }
        if (experimentationName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter experimentationName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.delete(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, configStoreName, experimentationName, this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Deletes the experimentation.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param configStoreName The name of the configuration store.
     * @param experimentationName The name of the experimentation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName, String configStoreName,
        String experimentationName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (configStoreName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter configStoreName is required and cannot be null."));
        }
        if (experimentationName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter experimentationName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.delete(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            configStoreName, experimentationName, this.client.getApiVersion(), accept, context);
    }

    /**
     * Deletes the experimentation.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param configStoreName The name of the configuration store.
     * @param experimentationName The name of the experimentation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceGroupName, String configStoreName,
        String experimentationName) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = deleteWithResponseAsync(resourceGroupName, configStoreName, experimentationName);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            this.client.getContext());
    }

    /**
     * Deletes the experimentation.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param configStoreName The name of the configuration store.
     * @param experimentationName The name of the experimentation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceGroupName, String configStoreName,
        String experimentationName, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono
            = deleteWithResponseAsync(resourceGroupName, configStoreName, experimentationName, context);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            context);
    }

    /**
     * Deletes the experimentation.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param configStoreName The name of the configuration store.
     * @param experimentationName The name of the experimentation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String configStoreName,
        String experimentationName) {
        return this.beginDeleteAsync(resourceGroupName, configStoreName, experimentationName).getSyncPoller();
    }

    /**
     * Deletes the experimentation.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param configStoreName The name of the configuration store.
     * @param experimentationName The name of the experimentation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String configStoreName,
        String experimentationName, Context context) {
        return this.beginDeleteAsync(resourceGroupName, configStoreName, experimentationName, context).getSyncPoller();
    }

    /**
     * Deletes the experimentation.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param configStoreName The name of the configuration store.
     * @param experimentationName The name of the experimentation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String configStoreName, String experimentationName) {
        return beginDeleteAsync(resourceGroupName, configStoreName, experimentationName).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes the experimentation.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param configStoreName The name of the configuration store.
     * @param experimentationName The name of the experimentation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String configStoreName, String experimentationName,
        Context context) {
        return beginDeleteAsync(resourceGroupName, configStoreName, experimentationName, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes the experimentation.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param configStoreName The name of the configuration store.
     * @param experimentationName The name of the experimentation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String configStoreName, String experimentationName) {
        deleteAsync(resourceGroupName, configStoreName, experimentationName).block();
    }

    /**
     * Deletes the experimentation.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param configStoreName The name of the configuration store.
     * @param experimentationName The name of the experimentation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String configStoreName, String experimentationName, Context context) {
        deleteAsync(resourceGroupName, configStoreName, experimentationName, context).block();
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of a request to list experimentation along with {@link PagedResponse} on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ExperimentationInner>> listNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.listNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<ExperimentationInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of a request to list experimentation along with {@link PagedResponse} on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ExperimentationInner>> listNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }
}
