// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appconfiguration.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The snapshot resource scope that the SAS token is authorized to access.
 */
@Fluent
public final class SnapshotSasTokenScope extends SasTokenScope {
    /*
     * The resourceType property.
     */
    private ResourceType resourceType = ResourceType.SNAPSHOT;

    /*
     * The name of the snapshot.
     */
    private String name;

    /**
     * Creates an instance of SnapshotSasTokenScope class.
     */
    public SnapshotSasTokenScope() {
    }

    /**
     * Get the resourceType property: The resourceType property.
     * 
     * @return the resourceType value.
     */
    @Override
    public ResourceType resourceType() {
        return this.resourceType;
    }

    /**
     * Get the name property: The name of the snapshot.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The name of the snapshot.
     * 
     * @param name the name value to set.
     * @return the SnapshotSasTokenScope object itself.
     */
    public SnapshotSasTokenScope withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (name() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property name in model SnapshotSasTokenScope"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(SnapshotSasTokenScope.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("resourceType", this.resourceType == null ? null : this.resourceType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SnapshotSasTokenScope from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SnapshotSasTokenScope if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SnapshotSasTokenScope.
     */
    public static SnapshotSasTokenScope fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SnapshotSasTokenScope deserializedSnapshotSasTokenScope = new SnapshotSasTokenScope();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedSnapshotSasTokenScope.name = reader.getString();
                } else if ("resourceType".equals(fieldName)) {
                    deserializedSnapshotSasTokenScope.resourceType = ResourceType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSnapshotSasTokenScope;
        });
    }
}
