// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appconfiguration.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Managed-On-Behalf-Of configuration properties. This configuration exists for the resources where a resource provider
 * manages those resources on behalf of the resource owner.
 */
@Fluent
public final class ManagedOnBehalfOfConfiguration implements JsonSerializable<ManagedOnBehalfOfConfiguration> {
    /*
     * Managed-On-Behalf-Of broker resources
     */
    private List<MoboBrokerResource> moboBrokerResources;

    /**
     * Creates an instance of ManagedOnBehalfOfConfiguration class.
     */
    public ManagedOnBehalfOfConfiguration() {
    }

    /**
     * Get the moboBrokerResources property: Managed-On-Behalf-Of broker resources.
     * 
     * @return the moboBrokerResources value.
     */
    public List<MoboBrokerResource> moboBrokerResources() {
        return this.moboBrokerResources;
    }

    /**
     * Set the moboBrokerResources property: Managed-On-Behalf-Of broker resources.
     * 
     * @param moboBrokerResources the moboBrokerResources value to set.
     * @return the ManagedOnBehalfOfConfiguration object itself.
     */
    public ManagedOnBehalfOfConfiguration withMoboBrokerResources(List<MoboBrokerResource> moboBrokerResources) {
        this.moboBrokerResources = moboBrokerResources;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (moboBrokerResources() != null) {
            moboBrokerResources().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("moboBrokerResources", this.moboBrokerResources,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ManagedOnBehalfOfConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ManagedOnBehalfOfConfiguration if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ManagedOnBehalfOfConfiguration.
     */
    public static ManagedOnBehalfOfConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ManagedOnBehalfOfConfiguration deserializedManagedOnBehalfOfConfiguration
                = new ManagedOnBehalfOfConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("moboBrokerResources".equals(fieldName)) {
                    List<MoboBrokerResource> moboBrokerResources
                        = reader.readArray(reader1 -> MoboBrokerResource.fromJson(reader1));
                    deserializedManagedOnBehalfOfConfiguration.moboBrokerResources = moboBrokerResources;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedManagedOnBehalfOfConfiguration;
        });
    }
}
