// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managementgroups.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The ResourceProviderCheckNameAvailabilityRequestBody model.
 */
@Fluent
public final class ResourceProviderCheckNameAvailabilityRequestBody
    implements JsonSerializable<ResourceProviderCheckNameAvailabilityRequestBody> {
    /*
     * Management group name availability check parameters.
     */
    private CheckNameAvailabilityRequest checkNameAvailabilityRequest;

    /**
     * Creates an instance of ResourceProviderCheckNameAvailabilityRequestBody class.
     */
    public ResourceProviderCheckNameAvailabilityRequestBody() {
    }

    /**
     * Get the checkNameAvailabilityRequest property: Management group name availability check parameters.
     * 
     * @return the checkNameAvailabilityRequest value.
     */
    public CheckNameAvailabilityRequest checkNameAvailabilityRequest() {
        return this.checkNameAvailabilityRequest;
    }

    /**
     * Set the checkNameAvailabilityRequest property: Management group name availability check parameters.
     * 
     * @param checkNameAvailabilityRequest the checkNameAvailabilityRequest value to set.
     * @return the ResourceProviderCheckNameAvailabilityRequestBody object itself.
     */
    public ResourceProviderCheckNameAvailabilityRequestBody
        withCheckNameAvailabilityRequest(CheckNameAvailabilityRequest checkNameAvailabilityRequest) {
        this.checkNameAvailabilityRequest = checkNameAvailabilityRequest;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (checkNameAvailabilityRequest() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property checkNameAvailabilityRequest in model ResourceProviderCheckNameAvailabilityRequestBody"));
        } else {
            checkNameAvailabilityRequest().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ResourceProviderCheckNameAvailabilityRequestBody.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("CheckNameAvailabilityRequest", this.checkNameAvailabilityRequest);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResourceProviderCheckNameAvailabilityRequestBody from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResourceProviderCheckNameAvailabilityRequestBody if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ResourceProviderCheckNameAvailabilityRequestBody.
     */
    public static ResourceProviderCheckNameAvailabilityRequestBody fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ResourceProviderCheckNameAvailabilityRequestBody deserializedResourceProviderCheckNameAvailabilityRequestBody
                = new ResourceProviderCheckNameAvailabilityRequestBody();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("CheckNameAvailabilityRequest".equals(fieldName)) {
                    deserializedResourceProviderCheckNameAvailabilityRequestBody.checkNameAvailabilityRequest
                        = CheckNameAvailabilityRequest.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedResourceProviderCheckNameAvailabilityRequestBody;
        });
    }
}
