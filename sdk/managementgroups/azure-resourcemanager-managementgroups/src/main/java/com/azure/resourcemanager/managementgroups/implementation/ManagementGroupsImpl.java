// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managementgroups.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.managementgroups.fluent.ManagementGroupsClient;
import com.azure.resourcemanager.managementgroups.fluent.models.DescendantInfoInner;
import com.azure.resourcemanager.managementgroups.fluent.models.HierarchySettingsInner;
import com.azure.resourcemanager.managementgroups.fluent.models.ManagementGroupInner;
import com.azure.resourcemanager.managementgroups.fluent.models.ManagementGroupOperationAcceptanceInner;
import com.azure.resourcemanager.managementgroups.models.DescendantInfo;
import com.azure.resourcemanager.managementgroups.models.HierarchySettings;
import com.azure.resourcemanager.managementgroups.models.ManagementGroup;
import com.azure.resourcemanager.managementgroups.models.ManagementGroupExpandType;
import com.azure.resourcemanager.managementgroups.models.ManagementGroupOperationAcceptance;
import com.azure.resourcemanager.managementgroups.models.ManagementGroups;
import com.azure.resourcemanager.managementgroups.models.PatchManagementGroupRequest;

public final class ManagementGroupsImpl implements ManagementGroups {
    private static final ClientLogger LOGGER = new ClientLogger(ManagementGroupsImpl.class);

    private final ManagementGroupsClient innerClient;

    private final com.azure.resourcemanager.managementgroups.ManagementGroupsManager serviceManager;

    public ManagementGroupsImpl(ManagementGroupsClient innerClient,
        com.azure.resourcemanager.managementgroups.ManagementGroupsManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<ManagementGroup> getWithResponse(String groupId, ManagementGroupExpandType expand, Boolean recurse,
        String filter, String cacheControl, Context context) {
        Response<ManagementGroupInner> inner
            = this.serviceClient().getWithResponse(groupId, expand, recurse, filter, cacheControl, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new ManagementGroupImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ManagementGroup get(String groupId) {
        ManagementGroupInner inner = this.serviceClient().get(groupId);
        if (inner != null) {
            return new ManagementGroupImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ManagementGroup createOrUpdate(String groupId, ManagementGroupInner resource) {
        ManagementGroupInner inner = this.serviceClient().createOrUpdate(groupId, resource);
        if (inner != null) {
            return new ManagementGroupImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ManagementGroup createOrUpdate(String groupId, ManagementGroupInner resource, String cacheControl,
        Context context) {
        ManagementGroupInner inner = this.serviceClient().createOrUpdate(groupId, resource, cacheControl, context);
        if (inner != null) {
            return new ManagementGroupImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ManagementGroup> updateWithResponse(String groupId, PatchManagementGroupRequest properties,
        String cacheControl, Context context) {
        Response<ManagementGroupInner> inner
            = this.serviceClient().updateWithResponse(groupId, properties, cacheControl, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new ManagementGroupImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ManagementGroup update(String groupId, PatchManagementGroupRequest properties) {
        ManagementGroupInner inner = this.serviceClient().update(groupId, properties);
        if (inner != null) {
            return new ManagementGroupImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ManagementGroupOperationAcceptance deleteByResourceGroup(String groupId) {
        ManagementGroupOperationAcceptanceInner inner = this.serviceClient().delete(groupId);
        if (inner != null) {
            return new ManagementGroupOperationAcceptanceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ManagementGroupOperationAcceptance delete(String groupId, String cacheControl, Context context) {
        ManagementGroupOperationAcceptanceInner inner = this.serviceClient().delete(groupId, cacheControl, context);
        if (inner != null) {
            return new ManagementGroupOperationAcceptanceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<DescendantInfo> getDescendants(String groupId) {
        PagedIterable<DescendantInfoInner> inner = this.serviceClient().getDescendants(groupId);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new DescendantInfoImpl(inner1, this.manager()));
    }

    public PagedIterable<DescendantInfo> getDescendants(String groupId, String skiptoken, Integer top,
        Context context) {
        PagedIterable<DescendantInfoInner> inner
            = this.serviceClient().getDescendants(groupId, skiptoken, top, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new DescendantInfoImpl(inner1, this.manager()));
    }

    public PagedIterable<HierarchySettings> listSettings(String groupId) {
        PagedIterable<HierarchySettingsInner> inner = this.serviceClient().listSettings(groupId);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new HierarchySettingsImpl(inner1, this.manager()));
    }

    public PagedIterable<HierarchySettings> listSettings(String groupId, Context context) {
        PagedIterable<HierarchySettingsInner> inner = this.serviceClient().listSettings(groupId, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new HierarchySettingsImpl(inner1, this.manager()));
    }

    private ManagementGroupsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.managementgroups.ManagementGroupsManager manager() {
        return this.serviceManager;
    }
}
