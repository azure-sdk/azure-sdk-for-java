// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.network.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Map;

/**
 * VpnLink connection shared key Resource.
 */
@Fluent
public final class SharedKeyInner extends Resource {
    /*
     * Properties of the VpnLink connection shared key.
     */
    @JsonProperty(value = "properties")
    private SharedKeyProperties innerProperties;

    /*
     * A unique read-only string that changes whenever the resource is updated.
     */
    @JsonProperty(value = "etag", access = JsonProperty.Access.WRITE_ONLY)
    private String etag;

    /*
     * Resource ID.
     */
    @JsonProperty(value = "id")
    private String id;

    /**
     * Creates an instance of SharedKeyInner class.
     */
    public SharedKeyInner() {
    }

    /**
     * Get the innerProperties property: Properties of the VpnLink connection shared key.
     * 
     * @return the innerProperties value.
     */
    private SharedKeyProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the etag property: A unique read-only string that changes whenever the resource is updated.
     * 
     * @return the etag value.
     */
    public String etag() {
        return this.etag;
    }

    /**
     * Get the id property: Resource ID.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: Resource ID.
     * 
     * @param id the id value to set.
     * @return the SharedKeyInner object itself.
     */
    public SharedKeyInner withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SharedKeyInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SharedKeyInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the keyValue property: The VpnLink connection shared key value.
     * 
     * @return the keyValue value.
     */
    public String keyValue() {
        return this.innerProperties() == null ? null : this.innerProperties().keyValue();
    }

    /**
     * Set the keyValue property: The VpnLink connection shared key value.
     * 
     * @param keyValue the keyValue value to set.
     * @return the SharedKeyInner object itself.
     */
    public SharedKeyInner withKeyValue(String keyValue) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SharedKeyProperties();
        }
        this.innerProperties().withKeyValue(keyValue);
        return this;
    }

    /**
     * Get the keyLength property: The VpnLink connection reset shared key length, should between 1 and 128.
     * 
     * @return the keyLength value.
     */
    public Integer keyLength() {
        return this.innerProperties() == null ? null : this.innerProperties().keyLength();
    }

    /**
     * Set the keyLength property: The VpnLink connection reset shared key length, should between 1 and 128.
     * 
     * @param keyLength the keyLength value to set.
     * @return the SharedKeyInner object itself.
     */
    public SharedKeyInner withKeyLength(Integer keyLength) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SharedKeyProperties();
        }
        this.innerProperties().withKeyLength(keyLength);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
