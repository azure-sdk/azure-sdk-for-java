// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.network.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.network.generated.fluent.AnalysisIntentsClient;
import com.azure.resourcemanager.network.generated.fluent.models.AnalysisIntentInner;
import com.azure.resourcemanager.network.generated.models.AnalysisIntent;
import com.azure.resourcemanager.network.generated.models.AnalysisIntents;

public final class AnalysisIntentsImpl implements AnalysisIntents {
    private static final ClientLogger LOGGER = new ClientLogger(AnalysisIntentsImpl.class);

    private final AnalysisIntentsClient innerClient;

    private final com.azure.resourcemanager.network.generated.NetworkManager serviceManager;

    public AnalysisIntentsImpl(
        AnalysisIntentsClient innerClient, com.azure.resourcemanager.network.generated.NetworkManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<AnalysisIntent> list(String resourceGroupName, String networkVerifierName) {
        PagedIterable<AnalysisIntentInner> inner = this.serviceClient().list(resourceGroupName, networkVerifierName);
        return Utils.mapPage(inner, inner1 -> new AnalysisIntentImpl(inner1, this.manager()));
    }

    public PagedIterable<AnalysisIntent> list(String resourceGroupName, String networkVerifierName, Context context) {
        PagedIterable<AnalysisIntentInner> inner =
            this.serviceClient().list(resourceGroupName, networkVerifierName, context);
        return Utils.mapPage(inner, inner1 -> new AnalysisIntentImpl(inner1, this.manager()));
    }

    public Response<AnalysisIntent> getWithResponse(
        String resourceGroupName, String networkVerifierName, String analysisIntentName, Context context) {
        Response<AnalysisIntentInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, networkVerifierName, analysisIntentName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new AnalysisIntentImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public AnalysisIntent get(String resourceGroupName, String networkVerifierName, String analysisIntentName) {
        AnalysisIntentInner inner =
            this.serviceClient().get(resourceGroupName, networkVerifierName, analysisIntentName);
        if (inner != null) {
            return new AnalysisIntentImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String networkVerifierName, String analysisIntentName) {
        this.serviceClient().delete(resourceGroupName, networkVerifierName, analysisIntentName);
    }

    public void delete(
        String resourceGroupName, String networkVerifierName, String analysisIntentName, Context context) {
        this.serviceClient().delete(resourceGroupName, networkVerifierName, analysisIntentName, context);
    }

    public AnalysisIntent getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String networkVerifierName = Utils.getValueFromIdByName(id, "networkVerifiers");
        if (networkVerifierName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'networkVerifiers'.", id)));
        }
        String analysisIntentName = Utils.getValueFromIdByName(id, "analysisIntents");
        if (analysisIntentName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'analysisIntents'.", id)));
        }
        return this
            .getWithResponse(resourceGroupName, networkVerifierName, analysisIntentName, Context.NONE)
            .getValue();
    }

    public Response<AnalysisIntent> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String networkVerifierName = Utils.getValueFromIdByName(id, "networkVerifiers");
        if (networkVerifierName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'networkVerifiers'.", id)));
        }
        String analysisIntentName = Utils.getValueFromIdByName(id, "analysisIntents");
        if (analysisIntentName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'analysisIntents'.", id)));
        }
        return this.getWithResponse(resourceGroupName, networkVerifierName, analysisIntentName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String networkVerifierName = Utils.getValueFromIdByName(id, "networkVerifiers");
        if (networkVerifierName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'networkVerifiers'.", id)));
        }
        String analysisIntentName = Utils.getValueFromIdByName(id, "analysisIntents");
        if (analysisIntentName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'analysisIntents'.", id)));
        }
        this.delete(resourceGroupName, networkVerifierName, analysisIntentName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String networkVerifierName = Utils.getValueFromIdByName(id, "networkVerifiers");
        if (networkVerifierName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'networkVerifiers'.", id)));
        }
        String analysisIntentName = Utils.getValueFromIdByName(id, "analysisIntents");
        if (analysisIntentName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'analysisIntents'.", id)));
        }
        this.delete(resourceGroupName, networkVerifierName, analysisIntentName, context);
    }

    private AnalysisIntentsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.network.generated.NetworkManager manager() {
        return this.serviceManager;
    }

    public AnalysisIntentImpl define(String name) {
        return new AnalysisIntentImpl(name, this.manager());
    }
}
