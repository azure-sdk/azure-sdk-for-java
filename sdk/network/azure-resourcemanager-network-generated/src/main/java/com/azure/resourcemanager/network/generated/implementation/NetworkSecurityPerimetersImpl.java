// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.network.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.network.generated.fluent.NetworkSecurityPerimetersClient;
import com.azure.resourcemanager.network.generated.fluent.models.NetworkSecurityPerimeterInner;
import com.azure.resourcemanager.network.generated.models.NetworkSecurityPerimeter;
import com.azure.resourcemanager.network.generated.models.NetworkSecurityPerimeters;

public final class NetworkSecurityPerimetersImpl implements NetworkSecurityPerimeters {
    private static final ClientLogger LOGGER = new ClientLogger(NetworkSecurityPerimetersImpl.class);

    private final NetworkSecurityPerimetersClient innerClient;

    private final com.azure.resourcemanager.network.generated.NetworkManager serviceManager;

    public NetworkSecurityPerimetersImpl(NetworkSecurityPerimetersClient innerClient,
        com.azure.resourcemanager.network.generated.NetworkManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<NetworkSecurityPerimeter> getByResourceGroupWithResponse(String resourceGroupName,
        String networkSecurityPerimeterName, Context context) {
        Response<NetworkSecurityPerimeterInner> inner = this.serviceClient()
            .getByResourceGroupWithResponse(resourceGroupName, networkSecurityPerimeterName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new NetworkSecurityPerimeterImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public NetworkSecurityPerimeter getByResourceGroup(String resourceGroupName, String networkSecurityPerimeterName) {
        NetworkSecurityPerimeterInner inner
            = this.serviceClient().getByResourceGroup(resourceGroupName, networkSecurityPerimeterName);
        if (inner != null) {
            return new NetworkSecurityPerimeterImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceGroupName, String networkSecurityPerimeterName) {
        this.serviceClient().delete(resourceGroupName, networkSecurityPerimeterName);
    }

    public void delete(String resourceGroupName, String networkSecurityPerimeterName, Context context) {
        this.serviceClient().delete(resourceGroupName, networkSecurityPerimeterName, context);
    }

    public PagedIterable<NetworkSecurityPerimeter> list() {
        PagedIterable<NetworkSecurityPerimeterInner> inner = this.serviceClient().list();
        return ResourceManagerUtils.mapPage(inner, inner1 -> new NetworkSecurityPerimeterImpl(inner1, this.manager()));
    }

    public PagedIterable<NetworkSecurityPerimeter> list(Integer top, String skipToken, Context context) {
        PagedIterable<NetworkSecurityPerimeterInner> inner = this.serviceClient().list(top, skipToken, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new NetworkSecurityPerimeterImpl(inner1, this.manager()));
    }

    public PagedIterable<NetworkSecurityPerimeter> listByResourceGroup(String resourceGroupName) {
        PagedIterable<NetworkSecurityPerimeterInner> inner
            = this.serviceClient().listByResourceGroup(resourceGroupName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new NetworkSecurityPerimeterImpl(inner1, this.manager()));
    }

    public PagedIterable<NetworkSecurityPerimeter> listByResourceGroup(String resourceGroupName, Integer top,
        String skipToken, Context context) {
        PagedIterable<NetworkSecurityPerimeterInner> inner
            = this.serviceClient().listByResourceGroup(resourceGroupName, top, skipToken, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new NetworkSecurityPerimeterImpl(inner1, this.manager()));
    }

    public NetworkSecurityPerimeter getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String networkSecurityPerimeterName
            = ResourceManagerUtils.getValueFromIdByName(id, "networkSecurityPerimeters");
        if (networkSecurityPerimeterName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'networkSecurityPerimeters'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, networkSecurityPerimeterName, Context.NONE)
            .getValue();
    }

    public Response<NetworkSecurityPerimeter> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String networkSecurityPerimeterName
            = ResourceManagerUtils.getValueFromIdByName(id, "networkSecurityPerimeters");
        if (networkSecurityPerimeterName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'networkSecurityPerimeters'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, networkSecurityPerimeterName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String networkSecurityPerimeterName
            = ResourceManagerUtils.getValueFromIdByName(id, "networkSecurityPerimeters");
        if (networkSecurityPerimeterName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'networkSecurityPerimeters'.", id)));
        }
        this.delete(resourceGroupName, networkSecurityPerimeterName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String networkSecurityPerimeterName
            = ResourceManagerUtils.getValueFromIdByName(id, "networkSecurityPerimeters");
        if (networkSecurityPerimeterName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'networkSecurityPerimeters'.", id)));
        }
        this.delete(resourceGroupName, networkSecurityPerimeterName, context);
    }

    private NetworkSecurityPerimetersClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.network.generated.NetworkManager manager() {
        return this.serviceManager;
    }

    public NetworkSecurityPerimeterImpl define(String name) {
        return new NetworkSecurityPerimeterImpl(name, this.manager());
    }
}
