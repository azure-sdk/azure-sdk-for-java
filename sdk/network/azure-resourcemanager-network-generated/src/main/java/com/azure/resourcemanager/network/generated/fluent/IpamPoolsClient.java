// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.network.generated.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.network.generated.fluent.models.IpamPoolInner;
import com.azure.resourcemanager.network.generated.fluent.models.PoolAssociationInner;
import com.azure.resourcemanager.network.generated.fluent.models.PoolUsageInner;
import com.azure.resourcemanager.network.generated.models.AllocationRequest;
import com.azure.resourcemanager.network.generated.models.AssociationRequest;
import com.azure.resourcemanager.network.generated.models.IpamPoolUpdate;
import com.azure.resourcemanager.network.generated.models.NonAzureAllocationRequest;

/** An instance of this class provides access to all the operations defined in IpamPoolsClient. */
public interface IpamPoolsClient {
    /**
     * Creates/Updates the Pool resource.
     *
     * @param resourceGroupName Resource group name.
     * @param networkManagerName Network Manager resource name.
     * @param poolName IP Address Manager Pool resource name.
     * @param body Pool resource object to create/update.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return instance of Pool resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<IpamPoolInner> createWithResponse(
        String resourceGroupName, String networkManagerName, String poolName, IpamPoolInner body, Context context);

    /**
     * Creates/Updates the Pool resource.
     *
     * @param resourceGroupName Resource group name.
     * @param networkManagerName Network Manager resource name.
     * @param poolName IP Address Manager Pool resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return instance of Pool resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    IpamPoolInner create(String resourceGroupName, String networkManagerName, String poolName);

    /**
     * Updates the specific Pool resource.
     *
     * @param resourceGroupName Resource group name.
     * @param networkManagerName Network Manager resource name.
     * @param poolName IP Address Manager Pool resource name.
     * @param body Pool resource object to update partially.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return instance of Pool resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<IpamPoolInner> updateWithResponse(
        String resourceGroupName, String networkManagerName, String poolName, IpamPoolUpdate body, Context context);

    /**
     * Updates the specific Pool resource.
     *
     * @param resourceGroupName Resource group name.
     * @param networkManagerName Network Manager resource name.
     * @param poolName IP Address Manager Pool resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return instance of Pool resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    IpamPoolInner update(String resourceGroupName, String networkManagerName, String poolName);

    /**
     * Gets the specific Pool resource.
     *
     * @param resourceGroupName Resource group name.
     * @param networkManagerName Network Manager resource name.
     * @param poolName Pool resource name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specific Pool resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<IpamPoolInner> getWithResponse(
        String resourceGroupName, String networkManagerName, String poolName, Context context);

    /**
     * Gets the specific Pool resource.
     *
     * @param resourceGroupName Resource group name.
     * @param networkManagerName Network Manager resource name.
     * @param poolName Pool resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specific Pool resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    IpamPoolInner get(String resourceGroupName, String networkManagerName, String poolName);

    /**
     * Delete the Pool resource.
     *
     * @param resourceGroupName Resource group name.
     * @param networkManagerName Network Manager resource name.
     * @param poolName Pool resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(
        String resourceGroupName, String networkManagerName, String poolName);

    /**
     * Delete the Pool resource.
     *
     * @param resourceGroupName Resource group name.
     * @param networkManagerName Network Manager resource name.
     * @param poolName Pool resource name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(
        String resourceGroupName, String networkManagerName, String poolName, Context context);

    /**
     * Delete the Pool resource.
     *
     * @param resourceGroupName Resource group name.
     * @param networkManagerName Network Manager resource name.
     * @param poolName Pool resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String networkManagerName, String poolName);

    /**
     * Delete the Pool resource.
     *
     * @param resourceGroupName Resource group name.
     * @param networkManagerName Network Manager resource name.
     * @param poolName Pool resource name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String networkManagerName, String poolName, Context context);

    /**
     * Gets list of Pool resources at Network Manager level.
     *
     * @param resourceGroupName Resource group name.
     * @param networkManagerName Network Manager resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Pool resources at Network Manager level as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<IpamPoolInner> list(String resourceGroupName, String networkManagerName);

    /**
     * Gets list of Pool resources at Network Manager level.
     *
     * @param resourceGroupName Resource group name.
     * @param networkManagerName Network Manager resource name.
     * @param skipToken Optional skip token.
     * @param skip Optional num entries to skip.
     * @param top Optional num entries to show.
     * @param sortKey Optional key by which to sort.
     * @param sortValue Optional sort value for pagination.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Pool resources at Network Manager level as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<IpamPoolInner> list(
        String resourceGroupName,
        String networkManagerName,
        String skipToken,
        Integer skip,
        Integer top,
        String sortKey,
        String sortValue,
        Context context);

    /**
     * Associate a Resource to the Pool.
     *
     * @param resourceGroupName Resource group name.
     * @param networkManagerName Network Manager resource name.
     * @param poolName Pool resource name.
     * @param body List of strings that represent resource ids to associate.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<PoolAssociationInner> associateResourcesWithResponse(
        String resourceGroupName, String networkManagerName, String poolName, AssociationRequest body, Context context);

    /**
     * Associate a Resource to the Pool.
     *
     * @param resourceGroupName Resource group name.
     * @param networkManagerName Network Manager resource name.
     * @param poolName Pool resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    PoolAssociationInner associateResources(String resourceGroupName, String networkManagerName, String poolName);

    /**
     * Disassociate a Resource from the Pool.
     *
     * @param resourceGroupName Resource group name.
     * @param networkManagerName Network Manager resource name.
     * @param poolName Pool resource name.
     * @param body List of strings that represents resource ids to disassociate.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> disassociateResourcesWithResponse(
        String resourceGroupName, String networkManagerName, String poolName, AssociationRequest body, Context context);

    /**
     * Disassociate a Resource from the Pool.
     *
     * @param resourceGroupName Resource group name.
     * @param networkManagerName Network Manager resource name.
     * @param poolName Pool resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void disassociateResources(String resourceGroupName, String networkManagerName, String poolName);

    /**
     * Allocate Azure Resource.
     *
     * @param resourceGroupName Resource group name.
     * @param networkManagerName Network Manager resource name.
     * @param poolName Pool resource name.
     * @param body Allocation request object.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<PoolAssociationInner> allocateAzureResourceWithResponse(
        String resourceGroupName, String networkManagerName, String poolName, AllocationRequest body, Context context);

    /**
     * Allocate Azure Resource.
     *
     * @param resourceGroupName Resource group name.
     * @param networkManagerName Network Manager resource name.
     * @param poolName Pool resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    PoolAssociationInner allocateAzureResource(String resourceGroupName, String networkManagerName, String poolName);

    /**
     * Allocate Non-Azure Resource.
     *
     * @param resourceGroupName Resource group name.
     * @param networkManagerName Network Manager resource name.
     * @param poolName Pool resource name.
     * @param body Allocation request object.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<PoolAssociationInner> allocateNonAzureResourceWithResponse(
        String resourceGroupName,
        String networkManagerName,
        String poolName,
        NonAzureAllocationRequest body,
        Context context);

    /**
     * Allocate Non-Azure Resource.
     *
     * @param resourceGroupName Resource group name.
     * @param networkManagerName Network Manager resource name.
     * @param poolName Pool resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    PoolAssociationInner allocateNonAzureResource(String resourceGroupName, String networkManagerName, String poolName);

    /**
     * Get the Pool Usage.
     *
     * @param resourceGroupName Resource group name.
     * @param networkManagerName Network Manager resource name.
     * @param poolName Pool resource name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Pool Usage along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<PoolUsageInner> usageWithResponse(
        String resourceGroupName, String networkManagerName, String poolName, Context context);

    /**
     * Get the Pool Usage.
     *
     * @param resourceGroupName Resource group name.
     * @param networkManagerName Network Manager resource name.
     * @param poolName Pool resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Pool Usage.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    PoolUsageInner usage(String resourceGroupName, String networkManagerName, String poolName);

    /**
     * List Associated Resource in the Pool.
     *
     * @param resourceGroupName Resource group name.
     * @param networkManagerName Network Manager resource name.
     * @param poolName Pool resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<PoolAssociationInner> listAssociation(
        String resourceGroupName, String networkManagerName, String poolName);

    /**
     * List Associated Resource in the Pool.
     *
     * @param resourceGroupName Resource group name.
     * @param networkManagerName Network Manager resource name.
     * @param poolName Pool resource name.
     * @param skipToken Optional skip token.
     * @param skip Optional num entries to skip.
     * @param top Optional num entries to show.
     * @param sortKey Optional key by which to sort.
     * @param sortValue Optional sort value for pagination.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<PoolAssociationInner> listAssociation(
        String resourceGroupName,
        String networkManagerName,
        String poolName,
        String skipToken,
        Integer skip,
        Integer top,
        String sortKey,
        String sortValue,
        Context context);
}
