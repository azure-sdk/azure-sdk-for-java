// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.network.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.network.generated.fluent.IpamPoolsClient;
import com.azure.resourcemanager.network.generated.fluent.models.IpamPoolInner;
import com.azure.resourcemanager.network.generated.fluent.models.PoolAssociationInner;
import com.azure.resourcemanager.network.generated.fluent.models.PoolUsageInner;
import com.azure.resourcemanager.network.generated.models.IpamPool;
import com.azure.resourcemanager.network.generated.models.IpamPools;
import com.azure.resourcemanager.network.generated.models.PoolAssociation;
import com.azure.resourcemanager.network.generated.models.PoolUsage;

public final class IpamPoolsImpl implements IpamPools {
    private static final ClientLogger LOGGER = new ClientLogger(IpamPoolsImpl.class);

    private final IpamPoolsClient innerClient;

    private final com.azure.resourcemanager.network.generated.NetworkManager serviceManager;

    public IpamPoolsImpl(IpamPoolsClient innerClient,
        com.azure.resourcemanager.network.generated.NetworkManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<IpamPool> list(String resourceGroupName, String networkManagerName) {
        PagedIterable<IpamPoolInner> inner = this.serviceClient().list(resourceGroupName, networkManagerName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new IpamPoolImpl(inner1, this.manager()));
    }

    public PagedIterable<IpamPool> list(String resourceGroupName, String networkManagerName, String skipToken,
        Integer skip, Integer top, String sortKey, String sortValue, Context context) {
        PagedIterable<IpamPoolInner> inner = this.serviceClient()
            .list(resourceGroupName, networkManagerName, skipToken, skip, top, sortKey, sortValue, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new IpamPoolImpl(inner1, this.manager()));
    }

    public Response<IpamPool> getWithResponse(String resourceGroupName, String networkManagerName, String poolName,
        Context context) {
        Response<IpamPoolInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, networkManagerName, poolName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new IpamPoolImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public IpamPool get(String resourceGroupName, String networkManagerName, String poolName) {
        IpamPoolInner inner = this.serviceClient().get(resourceGroupName, networkManagerName, poolName);
        if (inner != null) {
            return new IpamPoolImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String networkManagerName, String poolName) {
        this.serviceClient().delete(resourceGroupName, networkManagerName, poolName);
    }

    public void delete(String resourceGroupName, String networkManagerName, String poolName, String ifMatch,
        Context context) {
        this.serviceClient().delete(resourceGroupName, networkManagerName, poolName, ifMatch, context);
    }

    public Response<PoolUsage> getPoolUsageWithResponse(String resourceGroupName, String networkManagerName,
        String poolName, Context context) {
        Response<PoolUsageInner> inner
            = this.serviceClient().getPoolUsageWithResponse(resourceGroupName, networkManagerName, poolName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new PoolUsageImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PoolUsage getPoolUsage(String resourceGroupName, String networkManagerName, String poolName) {
        PoolUsageInner inner = this.serviceClient().getPoolUsage(resourceGroupName, networkManagerName, poolName);
        if (inner != null) {
            return new PoolUsageImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<PoolAssociation> listAssociatedResources(String resourceGroupName, String networkManagerName,
        String poolName) {
        PagedIterable<PoolAssociationInner> inner
            = this.serviceClient().listAssociatedResources(resourceGroupName, networkManagerName, poolName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new PoolAssociationImpl(inner1, this.manager()));
    }

    public PagedIterable<PoolAssociation> listAssociatedResources(String resourceGroupName, String networkManagerName,
        String poolName, Context context) {
        PagedIterable<PoolAssociationInner> inner
            = this.serviceClient().listAssociatedResources(resourceGroupName, networkManagerName, poolName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new PoolAssociationImpl(inner1, this.manager()));
    }

    public IpamPool getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String networkManagerName = ResourceManagerUtils.getValueFromIdByName(id, "networkManagers");
        if (networkManagerName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'networkManagers'.", id)));
        }
        String poolName = ResourceManagerUtils.getValueFromIdByName(id, "ipamPools");
        if (poolName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'ipamPools'.", id)));
        }
        return this.getWithResponse(resourceGroupName, networkManagerName, poolName, Context.NONE).getValue();
    }

    public Response<IpamPool> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String networkManagerName = ResourceManagerUtils.getValueFromIdByName(id, "networkManagers");
        if (networkManagerName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'networkManagers'.", id)));
        }
        String poolName = ResourceManagerUtils.getValueFromIdByName(id, "ipamPools");
        if (poolName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'ipamPools'.", id)));
        }
        return this.getWithResponse(resourceGroupName, networkManagerName, poolName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String networkManagerName = ResourceManagerUtils.getValueFromIdByName(id, "networkManagers");
        if (networkManagerName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'networkManagers'.", id)));
        }
        String poolName = ResourceManagerUtils.getValueFromIdByName(id, "ipamPools");
        if (poolName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'ipamPools'.", id)));
        }
        String localIfMatch = null;
        this.delete(resourceGroupName, networkManagerName, poolName, localIfMatch, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, String ifMatch, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String networkManagerName = ResourceManagerUtils.getValueFromIdByName(id, "networkManagers");
        if (networkManagerName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'networkManagers'.", id)));
        }
        String poolName = ResourceManagerUtils.getValueFromIdByName(id, "ipamPools");
        if (poolName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'ipamPools'.", id)));
        }
        this.delete(resourceGroupName, networkManagerName, poolName, ifMatch, context);
    }

    private IpamPoolsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.network.generated.NetworkManager manager() {
        return this.serviceManager;
    }

    public IpamPoolImpl define(String name) {
        return new IpamPoolImpl(name, this.manager());
    }
}
