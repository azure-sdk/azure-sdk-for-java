// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.network.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.network.generated.fluent.VpnLinkConnectionsClient;
import com.azure.resourcemanager.network.generated.fluent.models.SharedKeyInner;
import com.azure.resourcemanager.network.generated.fluent.models.VpnSiteLinkConnectionInner;
import com.azure.resourcemanager.network.generated.models.SharedKey;
import com.azure.resourcemanager.network.generated.models.VpnLinkConnections;
import com.azure.resourcemanager.network.generated.models.VpnSiteLinkConnection;

public final class VpnLinkConnectionsImpl implements VpnLinkConnections {
    private static final ClientLogger LOGGER = new ClientLogger(VpnLinkConnectionsImpl.class);

    private final VpnLinkConnectionsClient innerClient;

    private final com.azure.resourcemanager.network.generated.NetworkManager serviceManager;

    public VpnLinkConnectionsImpl(VpnLinkConnectionsClient innerClient,
        com.azure.resourcemanager.network.generated.NetworkManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public void resetConnection(String resourceGroupName, String gatewayName, String connectionName,
        String linkConnectionName) {
        this.serviceClient().resetConnection(resourceGroupName, gatewayName, connectionName, linkConnectionName);
    }

    public void resetConnection(String resourceGroupName, String gatewayName, String connectionName,
        String linkConnectionName, Context context) {
        this.serviceClient().resetConnection(resourceGroupName, gatewayName, connectionName, linkConnectionName,
            context);
    }

    public Response<SharedKey> sharedKeyGetWithResponse(String resourceGroupName, String gatewayName,
        String connectionName, String linkConnectionName, String sharedKeyName, Context context) {
        Response<SharedKeyInner> inner = this.serviceClient().sharedKeyGetWithResponse(resourceGroupName, gatewayName,
            connectionName, linkConnectionName, sharedKeyName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new SharedKeyImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SharedKey sharedKeyGet(String resourceGroupName, String gatewayName, String connectionName,
        String linkConnectionName, String sharedKeyName) {
        SharedKeyInner inner = this.serviceClient().sharedKeyGet(resourceGroupName, gatewayName, connectionName,
            linkConnectionName, sharedKeyName);
        if (inner != null) {
            return new SharedKeyImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public String getIkeSas(String resourceGroupName, String gatewayName, String connectionName,
        String linkConnectionName) {
        return this.serviceClient().getIkeSas(resourceGroupName, gatewayName, connectionName, linkConnectionName);
    }

    public String getIkeSas(String resourceGroupName, String gatewayName, String connectionName,
        String linkConnectionName, Context context) {
        return this.serviceClient().getIkeSas(resourceGroupName, gatewayName, connectionName, linkConnectionName,
            context);
    }

    public PagedIterable<VpnSiteLinkConnection> listByVpnConnection(String resourceGroupName, String gatewayName,
        String connectionName) {
        PagedIterable<VpnSiteLinkConnectionInner> inner
            = this.serviceClient().listByVpnConnection(resourceGroupName, gatewayName, connectionName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new VpnSiteLinkConnectionImpl(inner1, this.manager()));
    }

    public PagedIterable<VpnSiteLinkConnection> listByVpnConnection(String resourceGroupName, String gatewayName,
        String connectionName, Context context) {
        PagedIterable<VpnSiteLinkConnectionInner> inner
            = this.serviceClient().listByVpnConnection(resourceGroupName, gatewayName, connectionName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new VpnSiteLinkConnectionImpl(inner1, this.manager()));
    }

    public SharedKey sharedKeyGetById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String gatewayName = ResourceManagerUtils.getValueFromIdByName(id, "vpnGateways");
        if (gatewayName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'vpnGateways'.", id)));
        }
        String connectionName = ResourceManagerUtils.getValueFromIdByName(id, "vpnConnections");
        if (connectionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'vpnConnections'.", id)));
        }
        String linkConnectionName = ResourceManagerUtils.getValueFromIdByName(id, "vpnLinkConnections");
        if (linkConnectionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'vpnLinkConnections'.", id)));
        }
        String sharedKeyName = ResourceManagerUtils.getValueFromIdByName(id, "sharedKey");
        if (sharedKeyName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'sharedKey'.", id)));
        }
        return this.sharedKeyGetWithResponse(resourceGroupName, gatewayName, connectionName, linkConnectionName,
            sharedKeyName, Context.NONE).getValue();
    }

    public Response<SharedKey> sharedKeyGetByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String gatewayName = ResourceManagerUtils.getValueFromIdByName(id, "vpnGateways");
        if (gatewayName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'vpnGateways'.", id)));
        }
        String connectionName = ResourceManagerUtils.getValueFromIdByName(id, "vpnConnections");
        if (connectionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'vpnConnections'.", id)));
        }
        String linkConnectionName = ResourceManagerUtils.getValueFromIdByName(id, "vpnLinkConnections");
        if (linkConnectionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'vpnLinkConnections'.", id)));
        }
        String sharedKeyName = ResourceManagerUtils.getValueFromIdByName(id, "sharedKey");
        if (sharedKeyName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'sharedKey'.", id)));
        }
        return this.sharedKeyGetWithResponse(resourceGroupName, gatewayName, connectionName, linkConnectionName,
            sharedKeyName, context);
    }

    private VpnLinkConnectionsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.network.generated.NetworkManager manager() {
        return this.serviceManager;
    }

    public SharedKeyImpl define(String name) {
        return new SharedKeyImpl(name, this.manager());
    }
}
