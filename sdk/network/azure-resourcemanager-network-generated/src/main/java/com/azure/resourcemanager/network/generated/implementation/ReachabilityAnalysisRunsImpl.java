// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.network.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.network.generated.fluent.ReachabilityAnalysisRunsClient;
import com.azure.resourcemanager.network.generated.fluent.models.ReachabilityAnalysisRunInner;
import com.azure.resourcemanager.network.generated.models.ReachabilityAnalysisRun;
import com.azure.resourcemanager.network.generated.models.ReachabilityAnalysisRuns;

public final class ReachabilityAnalysisRunsImpl implements ReachabilityAnalysisRuns {
    private static final ClientLogger LOGGER = new ClientLogger(ReachabilityAnalysisRunsImpl.class);

    private final ReachabilityAnalysisRunsClient innerClient;

    private final com.azure.resourcemanager.network.generated.NetworkManager serviceManager;

    public ReachabilityAnalysisRunsImpl(ReachabilityAnalysisRunsClient innerClient,
        com.azure.resourcemanager.network.generated.NetworkManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<ReachabilityAnalysisRun> list(String resourceGroupName, String networkManagerName,
        String workspaceName) {
        PagedIterable<ReachabilityAnalysisRunInner> inner
            = this.serviceClient().list(resourceGroupName, networkManagerName, workspaceName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new ReachabilityAnalysisRunImpl(inner1, this.manager()));
    }

    public PagedIterable<ReachabilityAnalysisRun> list(String resourceGroupName, String networkManagerName,
        String workspaceName, String skipToken, Integer skip, Integer top, String sortKey, String sortValue,
        Context context) {
        PagedIterable<ReachabilityAnalysisRunInner> inner = this.serviceClient()
            .list(resourceGroupName, networkManagerName, workspaceName, skipToken, skip, top, sortKey, sortValue,
                context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new ReachabilityAnalysisRunImpl(inner1, this.manager()));
    }

    public Response<ReachabilityAnalysisRun> getWithResponse(String resourceGroupName, String networkManagerName,
        String workspaceName, String reachabilityAnalysisRunName, Context context) {
        Response<ReachabilityAnalysisRunInner> inner = this.serviceClient()
            .getWithResponse(resourceGroupName, networkManagerName, workspaceName, reachabilityAnalysisRunName,
                context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new ReachabilityAnalysisRunImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ReachabilityAnalysisRun get(String resourceGroupName, String networkManagerName, String workspaceName,
        String reachabilityAnalysisRunName) {
        ReachabilityAnalysisRunInner inner = this.serviceClient()
            .get(resourceGroupName, networkManagerName, workspaceName, reachabilityAnalysisRunName);
        if (inner != null) {
            return new ReachabilityAnalysisRunImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String networkManagerName, String workspaceName,
        String reachabilityAnalysisRunName) {
        this.serviceClient().delete(resourceGroupName, networkManagerName, workspaceName, reachabilityAnalysisRunName);
    }

    public void delete(String resourceGroupName, String networkManagerName, String workspaceName,
        String reachabilityAnalysisRunName, Context context) {
        this.serviceClient()
            .delete(resourceGroupName, networkManagerName, workspaceName, reachabilityAnalysisRunName, context);
    }

    public ReachabilityAnalysisRun getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String networkManagerName = ResourceManagerUtils.getValueFromIdByName(id, "networkManagers");
        if (networkManagerName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'networkManagers'.", id)));
        }
        String workspaceName = ResourceManagerUtils.getValueFromIdByName(id, "verifierWorkspaces");
        if (workspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'verifierWorkspaces'.", id)));
        }
        String reachabilityAnalysisRunName = ResourceManagerUtils.getValueFromIdByName(id, "reachabilityAnalysisRuns");
        if (reachabilityAnalysisRunName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'reachabilityAnalysisRuns'.", id)));
        }
        return this
            .getWithResponse(resourceGroupName, networkManagerName, workspaceName, reachabilityAnalysisRunName,
                Context.NONE)
            .getValue();
    }

    public Response<ReachabilityAnalysisRun> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String networkManagerName = ResourceManagerUtils.getValueFromIdByName(id, "networkManagers");
        if (networkManagerName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'networkManagers'.", id)));
        }
        String workspaceName = ResourceManagerUtils.getValueFromIdByName(id, "verifierWorkspaces");
        if (workspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'verifierWorkspaces'.", id)));
        }
        String reachabilityAnalysisRunName = ResourceManagerUtils.getValueFromIdByName(id, "reachabilityAnalysisRuns");
        if (reachabilityAnalysisRunName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'reachabilityAnalysisRuns'.", id)));
        }
        return this.getWithResponse(resourceGroupName, networkManagerName, workspaceName, reachabilityAnalysisRunName,
            context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String networkManagerName = ResourceManagerUtils.getValueFromIdByName(id, "networkManagers");
        if (networkManagerName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'networkManagers'.", id)));
        }
        String workspaceName = ResourceManagerUtils.getValueFromIdByName(id, "verifierWorkspaces");
        if (workspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'verifierWorkspaces'.", id)));
        }
        String reachabilityAnalysisRunName = ResourceManagerUtils.getValueFromIdByName(id, "reachabilityAnalysisRuns");
        if (reachabilityAnalysisRunName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'reachabilityAnalysisRuns'.", id)));
        }
        this.delete(resourceGroupName, networkManagerName, workspaceName, reachabilityAnalysisRunName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String networkManagerName = ResourceManagerUtils.getValueFromIdByName(id, "networkManagers");
        if (networkManagerName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'networkManagers'.", id)));
        }
        String workspaceName = ResourceManagerUtils.getValueFromIdByName(id, "verifierWorkspaces");
        if (workspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'verifierWorkspaces'.", id)));
        }
        String reachabilityAnalysisRunName = ResourceManagerUtils.getValueFromIdByName(id, "reachabilityAnalysisRuns");
        if (reachabilityAnalysisRunName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'reachabilityAnalysisRuns'.", id)));
        }
        this.delete(resourceGroupName, networkManagerName, workspaceName, reachabilityAnalysisRunName, context);
    }

    private ReachabilityAnalysisRunsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.network.generated.NetworkManager manager() {
        return this.serviceManager;
    }

    public ReachabilityAnalysisRunImpl define(String name) {
        return new ReachabilityAnalysisRunImpl(name, this.manager());
    }
}
