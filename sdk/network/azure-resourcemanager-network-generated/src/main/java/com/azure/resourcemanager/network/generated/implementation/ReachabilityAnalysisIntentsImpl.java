// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.network.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.network.generated.fluent.ReachabilityAnalysisIntentsClient;
import com.azure.resourcemanager.network.generated.fluent.models.ReachabilityAnalysisIntentInner;
import com.azure.resourcemanager.network.generated.models.ReachabilityAnalysisIntent;
import com.azure.resourcemanager.network.generated.models.ReachabilityAnalysisIntents;

public final class ReachabilityAnalysisIntentsImpl implements ReachabilityAnalysisIntents {
    private static final ClientLogger LOGGER = new ClientLogger(ReachabilityAnalysisIntentsImpl.class);

    private final ReachabilityAnalysisIntentsClient innerClient;

    private final com.azure.resourcemanager.network.generated.NetworkManager serviceManager;

    public ReachabilityAnalysisIntentsImpl(ReachabilityAnalysisIntentsClient innerClient,
        com.azure.resourcemanager.network.generated.NetworkManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<ReachabilityAnalysisIntent> list(String resourceGroupName, String networkManagerName,
        String workspaceName) {
        PagedIterable<ReachabilityAnalysisIntentInner> inner
            = this.serviceClient().list(resourceGroupName, networkManagerName, workspaceName);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new ReachabilityAnalysisIntentImpl(inner1, this.manager()));
    }

    public PagedIterable<ReachabilityAnalysisIntent> list(String resourceGroupName, String networkManagerName,
        String workspaceName, String skipToken, Integer skip, Integer top, String sortKey, String sortValue,
        Context context) {
        PagedIterable<ReachabilityAnalysisIntentInner> inner = this.serviceClient()
            .list(resourceGroupName, networkManagerName, workspaceName, skipToken, skip, top, sortKey, sortValue,
                context);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new ReachabilityAnalysisIntentImpl(inner1, this.manager()));
    }

    public Response<ReachabilityAnalysisIntent> getWithResponse(String resourceGroupName, String networkManagerName,
        String workspaceName, String reachabilityAnalysisIntentName, Context context) {
        Response<ReachabilityAnalysisIntentInner> inner = this.serviceClient()
            .getWithResponse(resourceGroupName, networkManagerName, workspaceName, reachabilityAnalysisIntentName,
                context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new ReachabilityAnalysisIntentImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ReachabilityAnalysisIntent get(String resourceGroupName, String networkManagerName, String workspaceName,
        String reachabilityAnalysisIntentName) {
        ReachabilityAnalysisIntentInner inner = this.serviceClient()
            .get(resourceGroupName, networkManagerName, workspaceName, reachabilityAnalysisIntentName);
        if (inner != null) {
            return new ReachabilityAnalysisIntentImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteWithResponse(String resourceGroupName, String networkManagerName, String workspaceName,
        String reachabilityAnalysisIntentName, Context context) {
        return this.serviceClient()
            .deleteWithResponse(resourceGroupName, networkManagerName, workspaceName, reachabilityAnalysisIntentName,
                context);
    }

    public void delete(String resourceGroupName, String networkManagerName, String workspaceName,
        String reachabilityAnalysisIntentName) {
        this.serviceClient()
            .delete(resourceGroupName, networkManagerName, workspaceName, reachabilityAnalysisIntentName);
    }

    public ReachabilityAnalysisIntent getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String networkManagerName = ResourceManagerUtils.getValueFromIdByName(id, "networkManagers");
        if (networkManagerName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'networkManagers'.", id)));
        }
        String workspaceName = ResourceManagerUtils.getValueFromIdByName(id, "verifierWorkspaces");
        if (workspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'verifierWorkspaces'.", id)));
        }
        String reachabilityAnalysisIntentName
            = ResourceManagerUtils.getValueFromIdByName(id, "reachabilityAnalysisIntents");
        if (reachabilityAnalysisIntentName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'reachabilityAnalysisIntents'.", id)));
        }
        return this
            .getWithResponse(resourceGroupName, networkManagerName, workspaceName, reachabilityAnalysisIntentName,
                Context.NONE)
            .getValue();
    }

    public Response<ReachabilityAnalysisIntent> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String networkManagerName = ResourceManagerUtils.getValueFromIdByName(id, "networkManagers");
        if (networkManagerName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'networkManagers'.", id)));
        }
        String workspaceName = ResourceManagerUtils.getValueFromIdByName(id, "verifierWorkspaces");
        if (workspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'verifierWorkspaces'.", id)));
        }
        String reachabilityAnalysisIntentName
            = ResourceManagerUtils.getValueFromIdByName(id, "reachabilityAnalysisIntents");
        if (reachabilityAnalysisIntentName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'reachabilityAnalysisIntents'.", id)));
        }
        return this.getWithResponse(resourceGroupName, networkManagerName, workspaceName,
            reachabilityAnalysisIntentName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String networkManagerName = ResourceManagerUtils.getValueFromIdByName(id, "networkManagers");
        if (networkManagerName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'networkManagers'.", id)));
        }
        String workspaceName = ResourceManagerUtils.getValueFromIdByName(id, "verifierWorkspaces");
        if (workspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'verifierWorkspaces'.", id)));
        }
        String reachabilityAnalysisIntentName
            = ResourceManagerUtils.getValueFromIdByName(id, "reachabilityAnalysisIntents");
        if (reachabilityAnalysisIntentName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'reachabilityAnalysisIntents'.", id)));
        }
        this.deleteWithResponse(resourceGroupName, networkManagerName, workspaceName, reachabilityAnalysisIntentName,
            Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String networkManagerName = ResourceManagerUtils.getValueFromIdByName(id, "networkManagers");
        if (networkManagerName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'networkManagers'.", id)));
        }
        String workspaceName = ResourceManagerUtils.getValueFromIdByName(id, "verifierWorkspaces");
        if (workspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'verifierWorkspaces'.", id)));
        }
        String reachabilityAnalysisIntentName
            = ResourceManagerUtils.getValueFromIdByName(id, "reachabilityAnalysisIntents");
        if (reachabilityAnalysisIntentName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'reachabilityAnalysisIntents'.", id)));
        }
        return this.deleteWithResponse(resourceGroupName, networkManagerName, workspaceName,
            reachabilityAnalysisIntentName, context);
    }

    private ReachabilityAnalysisIntentsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.network.generated.NetworkManager manager() {
        return this.serviceManager;
    }

    public ReachabilityAnalysisIntentImpl define(String name) {
        return new ReachabilityAnalysisIntentImpl(name, this.manager());
    }
}
