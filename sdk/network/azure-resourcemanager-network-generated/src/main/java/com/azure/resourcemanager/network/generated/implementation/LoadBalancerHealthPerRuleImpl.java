// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.network.generated.implementation;

import com.azure.resourcemanager.network.generated.fluent.models.LoadBalancerHealthPerRuleInner;
import com.azure.resourcemanager.network.generated.fluent.models.LoadBalancerHealthPerRulePerBackendAddressInner;
import com.azure.resourcemanager.network.generated.models.LoadBalancerHealthPerRule;
import com.azure.resourcemanager.network.generated.models.LoadBalancerHealthPerRulePerBackendAddress;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

public final class LoadBalancerHealthPerRuleImpl implements LoadBalancerHealthPerRule {
    private LoadBalancerHealthPerRuleInner innerObject;

    private final com.azure.resourcemanager.network.generated.NetworkManager serviceManager;

    LoadBalancerHealthPerRuleImpl(LoadBalancerHealthPerRuleInner innerObject,
        com.azure.resourcemanager.network.generated.NetworkManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
    }

    public Integer up() {
        return this.innerModel().up();
    }

    public Integer down() {
        return this.innerModel().down();
    }

    public List<LoadBalancerHealthPerRulePerBackendAddress> loadBalancerBackendAddresses() {
        List<LoadBalancerHealthPerRulePerBackendAddressInner> inner = this.innerModel().loadBalancerBackendAddresses();
        if (inner != null) {
            return Collections.unmodifiableList(inner.stream()
                .map(inner1 -> new LoadBalancerHealthPerRulePerBackendAddressImpl(inner1, this.manager()))
                .collect(Collectors.toList()));
        } else {
            return Collections.emptyList();
        }
    }

    public LoadBalancerHealthPerRuleInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.network.generated.NetworkManager manager() {
        return this.serviceManager;
    }
}
