// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.network.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.network.generated.fluent.RoutingRulesClient;
import com.azure.resourcemanager.network.generated.fluent.models.RoutingRuleInner;
import com.azure.resourcemanager.network.generated.models.RoutingRule;
import com.azure.resourcemanager.network.generated.models.RoutingRules;

public final class RoutingRulesImpl implements RoutingRules {
    private static final ClientLogger LOGGER = new ClientLogger(RoutingRulesImpl.class);

    private final RoutingRulesClient innerClient;

    private final com.azure.resourcemanager.network.generated.NetworkManager serviceManager;

    public RoutingRulesImpl(RoutingRulesClient innerClient,
        com.azure.resourcemanager.network.generated.NetworkManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<RoutingRule> list(String resourceGroupName, String networkManagerName,
        String configurationName, String ruleCollectionName) {
        PagedIterable<RoutingRuleInner> inner
            = this.serviceClient().list(resourceGroupName, networkManagerName, configurationName, ruleCollectionName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new RoutingRuleImpl(inner1, this.manager()));
    }

    public PagedIterable<RoutingRule> list(String resourceGroupName, String networkManagerName,
        String configurationName, String ruleCollectionName, Integer top, String skipToken, Context context) {
        PagedIterable<RoutingRuleInner> inner = this.serviceClient()
            .list(resourceGroupName, networkManagerName, configurationName, ruleCollectionName, top, skipToken,
                context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new RoutingRuleImpl(inner1, this.manager()));
    }

    public Response<RoutingRule> getWithResponse(String resourceGroupName, String networkManagerName,
        String configurationName, String ruleCollectionName, String ruleName, Context context) {
        Response<RoutingRuleInner> inner = this.serviceClient()
            .getWithResponse(resourceGroupName, networkManagerName, configurationName, ruleCollectionName, ruleName,
                context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new RoutingRuleImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public RoutingRule get(String resourceGroupName, String networkManagerName, String configurationName,
        String ruleCollectionName, String ruleName) {
        RoutingRuleInner inner = this.serviceClient()
            .get(resourceGroupName, networkManagerName, configurationName, ruleCollectionName, ruleName);
        if (inner != null) {
            return new RoutingRuleImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String networkManagerName, String configurationName,
        String ruleCollectionName, String ruleName) {
        this.serviceClient()
            .delete(resourceGroupName, networkManagerName, configurationName, ruleCollectionName, ruleName);
    }

    public void delete(String resourceGroupName, String networkManagerName, String configurationName,
        String ruleCollectionName, String ruleName, Boolean force, Context context) {
        this.serviceClient()
            .delete(resourceGroupName, networkManagerName, configurationName, ruleCollectionName, ruleName, force,
                context);
    }

    public RoutingRule getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String networkManagerName = ResourceManagerUtils.getValueFromIdByName(id, "networkManagers");
        if (networkManagerName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'networkManagers'.", id)));
        }
        String configurationName = ResourceManagerUtils.getValueFromIdByName(id, "routingConfigurations");
        if (configurationName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'routingConfigurations'.", id)));
        }
        String ruleCollectionName = ResourceManagerUtils.getValueFromIdByName(id, "ruleCollections");
        if (ruleCollectionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'ruleCollections'.", id)));
        }
        String ruleName = ResourceManagerUtils.getValueFromIdByName(id, "rules");
        if (ruleName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'rules'.", id)));
        }
        return this
            .getWithResponse(resourceGroupName, networkManagerName, configurationName, ruleCollectionName, ruleName,
                Context.NONE)
            .getValue();
    }

    public Response<RoutingRule> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String networkManagerName = ResourceManagerUtils.getValueFromIdByName(id, "networkManagers");
        if (networkManagerName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'networkManagers'.", id)));
        }
        String configurationName = ResourceManagerUtils.getValueFromIdByName(id, "routingConfigurations");
        if (configurationName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'routingConfigurations'.", id)));
        }
        String ruleCollectionName = ResourceManagerUtils.getValueFromIdByName(id, "ruleCollections");
        if (ruleCollectionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'ruleCollections'.", id)));
        }
        String ruleName = ResourceManagerUtils.getValueFromIdByName(id, "rules");
        if (ruleName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'rules'.", id)));
        }
        return this.getWithResponse(resourceGroupName, networkManagerName, configurationName, ruleCollectionName,
            ruleName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String networkManagerName = ResourceManagerUtils.getValueFromIdByName(id, "networkManagers");
        if (networkManagerName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'networkManagers'.", id)));
        }
        String configurationName = ResourceManagerUtils.getValueFromIdByName(id, "routingConfigurations");
        if (configurationName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'routingConfigurations'.", id)));
        }
        String ruleCollectionName = ResourceManagerUtils.getValueFromIdByName(id, "ruleCollections");
        if (ruleCollectionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'ruleCollections'.", id)));
        }
        String ruleName = ResourceManagerUtils.getValueFromIdByName(id, "rules");
        if (ruleName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'rules'.", id)));
        }
        Boolean localForce = null;
        this.delete(resourceGroupName, networkManagerName, configurationName, ruleCollectionName, ruleName, localForce,
            Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Boolean force, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String networkManagerName = ResourceManagerUtils.getValueFromIdByName(id, "networkManagers");
        if (networkManagerName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'networkManagers'.", id)));
        }
        String configurationName = ResourceManagerUtils.getValueFromIdByName(id, "routingConfigurations");
        if (configurationName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'routingConfigurations'.", id)));
        }
        String ruleCollectionName = ResourceManagerUtils.getValueFromIdByName(id, "ruleCollections");
        if (ruleCollectionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'ruleCollections'.", id)));
        }
        String ruleName = ResourceManagerUtils.getValueFromIdByName(id, "rules");
        if (ruleName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'rules'.", id)));
        }
        this.delete(resourceGroupName, networkManagerName, configurationName, ruleCollectionName, ruleName, force,
            context);
    }

    private RoutingRulesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.network.generated.NetworkManager manager() {
        return this.serviceManager;
    }

    public RoutingRuleImpl define(String name) {
        return new RoutingRuleImpl(name, this.manager());
    }
}
