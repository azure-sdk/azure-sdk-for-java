// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.network.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.network.generated.fluent.NspLinksClient;
import com.azure.resourcemanager.network.generated.fluent.models.NspLinkInner;
import com.azure.resourcemanager.network.generated.models.NspLink;
import com.azure.resourcemanager.network.generated.models.NspLinks;

public final class NspLinksImpl implements NspLinks {
    private static final ClientLogger LOGGER = new ClientLogger(NspLinksImpl.class);

    private final NspLinksClient innerClient;

    private final com.azure.resourcemanager.network.generated.NetworkManager serviceManager;

    public NspLinksImpl(NspLinksClient innerClient,
        com.azure.resourcemanager.network.generated.NetworkManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<NspLink> getWithResponse(String resourceGroupName, String networkSecurityPerimeterName,
        String linkName, Context context) {
        Response<NspLinkInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, networkSecurityPerimeterName, linkName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new NspLinkImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public NspLink get(String resourceGroupName, String networkSecurityPerimeterName, String linkName) {
        NspLinkInner inner = this.serviceClient().get(resourceGroupName, networkSecurityPerimeterName, linkName);
        if (inner != null) {
            return new NspLinkImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String networkSecurityPerimeterName, String linkName) {
        this.serviceClient().delete(resourceGroupName, networkSecurityPerimeterName, linkName);
    }

    public void delete(String resourceGroupName, String networkSecurityPerimeterName, String linkName,
        Context context) {
        this.serviceClient().delete(resourceGroupName, networkSecurityPerimeterName, linkName, context);
    }

    public PagedIterable<NspLink> list(String resourceGroupName, String networkSecurityPerimeterName) {
        PagedIterable<NspLinkInner> inner = this.serviceClient().list(resourceGroupName, networkSecurityPerimeterName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new NspLinkImpl(inner1, this.manager()));
    }

    public PagedIterable<NspLink> list(String resourceGroupName, String networkSecurityPerimeterName, Integer top,
        String skipToken, Context context) {
        PagedIterable<NspLinkInner> inner
            = this.serviceClient().list(resourceGroupName, networkSecurityPerimeterName, top, skipToken, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new NspLinkImpl(inner1, this.manager()));
    }

    public NspLink getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String networkSecurityPerimeterName
            = ResourceManagerUtils.getValueFromIdByName(id, "networkSecurityPerimeters");
        if (networkSecurityPerimeterName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'networkSecurityPerimeters'.", id)));
        }
        String linkName = ResourceManagerUtils.getValueFromIdByName(id, "links");
        if (linkName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'links'.", id)));
        }
        return this.getWithResponse(resourceGroupName, networkSecurityPerimeterName, linkName, Context.NONE).getValue();
    }

    public Response<NspLink> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String networkSecurityPerimeterName
            = ResourceManagerUtils.getValueFromIdByName(id, "networkSecurityPerimeters");
        if (networkSecurityPerimeterName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'networkSecurityPerimeters'.", id)));
        }
        String linkName = ResourceManagerUtils.getValueFromIdByName(id, "links");
        if (linkName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'links'.", id)));
        }
        return this.getWithResponse(resourceGroupName, networkSecurityPerimeterName, linkName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String networkSecurityPerimeterName
            = ResourceManagerUtils.getValueFromIdByName(id, "networkSecurityPerimeters");
        if (networkSecurityPerimeterName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'networkSecurityPerimeters'.", id)));
        }
        String linkName = ResourceManagerUtils.getValueFromIdByName(id, "links");
        if (linkName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'links'.", id)));
        }
        this.delete(resourceGroupName, networkSecurityPerimeterName, linkName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String networkSecurityPerimeterName
            = ResourceManagerUtils.getValueFromIdByName(id, "networkSecurityPerimeters");
        if (networkSecurityPerimeterName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'networkSecurityPerimeters'.", id)));
        }
        String linkName = ResourceManagerUtils.getValueFromIdByName(id, "links");
        if (linkName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'links'.", id)));
        }
        this.delete(resourceGroupName, networkSecurityPerimeterName, linkName, context);
    }

    private NspLinksClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.network.generated.NetworkManager manager() {
        return this.serviceManager;
    }

    public NspLinkImpl define(String name) {
        return new NspLinkImpl(name, this.manager());
    }
}
