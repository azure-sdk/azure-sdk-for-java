// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.network.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.network.generated.models.NspOperationStatusProperties;
import com.azure.resourcemanager.network.generated.models.OperationError;
import com.azure.resourcemanager.network.generated.models.OperationStatus;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Operation status of the async operation.
 */
@Fluent
public final class NspOperationStatusInner implements JsonSerializable<NspOperationStatusInner> {
    /*
     * The operation ARM id.
     */
    private String id;

    /*
     * The operation GUID.
     */
    private String name;

    /*
     * Enum representing the status of an operation.
     */
    private OperationStatus status;

    /*
     * The start time of the operation.
     */
    private OffsetDateTime startTime;

    /*
     * The end time of the operation.
     */
    private OffsetDateTime endTime;

    /*
     * The properties property.
     */
    private NspOperationStatusProperties properties;

    /*
     * The error property.
     */
    private OperationError error;

    /**
     * Creates an instance of NspOperationStatusInner class.
     */
    public NspOperationStatusInner() {
    }

    /**
     * Get the id property: The operation ARM id.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: The operation ARM id.
     * 
     * @param id the id value to set.
     * @return the NspOperationStatusInner object itself.
     */
    public NspOperationStatusInner withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the name property: The operation GUID.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The operation GUID.
     * 
     * @param name the name value to set.
     * @return the NspOperationStatusInner object itself.
     */
    public NspOperationStatusInner withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the status property: Enum representing the status of an operation.
     * 
     * @return the status value.
     */
    public OperationStatus status() {
        return this.status;
    }

    /**
     * Set the status property: Enum representing the status of an operation.
     * 
     * @param status the status value to set.
     * @return the NspOperationStatusInner object itself.
     */
    public NspOperationStatusInner withStatus(OperationStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Get the startTime property: The start time of the operation.
     * 
     * @return the startTime value.
     */
    public OffsetDateTime startTime() {
        return this.startTime;
    }

    /**
     * Set the startTime property: The start time of the operation.
     * 
     * @param startTime the startTime value to set.
     * @return the NspOperationStatusInner object itself.
     */
    public NspOperationStatusInner withStartTime(OffsetDateTime startTime) {
        this.startTime = startTime;
        return this;
    }

    /**
     * Get the endTime property: The end time of the operation.
     * 
     * @return the endTime value.
     */
    public OffsetDateTime endTime() {
        return this.endTime;
    }

    /**
     * Set the endTime property: The end time of the operation.
     * 
     * @param endTime the endTime value to set.
     * @return the NspOperationStatusInner object itself.
     */
    public NspOperationStatusInner withEndTime(OffsetDateTime endTime) {
        this.endTime = endTime;
        return this;
    }

    /**
     * Get the properties property: The properties property.
     * 
     * @return the properties value.
     */
    public NspOperationStatusProperties properties() {
        return this.properties;
    }

    /**
     * Set the properties property: The properties property.
     * 
     * @param properties the properties value to set.
     * @return the NspOperationStatusInner object itself.
     */
    public NspOperationStatusInner withProperties(NspOperationStatusProperties properties) {
        this.properties = properties;
        return this;
    }

    /**
     * Get the error property: The error property.
     * 
     * @return the error value.
     */
    public OperationError error() {
        return this.error;
    }

    /**
     * Set the error property: The error property.
     * 
     * @param error the error value to set.
     * @return the NspOperationStatusInner object itself.
     */
    public NspOperationStatusInner withError(OperationError error) {
        this.error = error;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (properties() != null) {
            properties().validate();
        }
        if (error() != null) {
            error().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        jsonWriter.writeStringField("startTime",
            this.startTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.startTime));
        jsonWriter.writeStringField("endTime",
            this.endTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.endTime));
        jsonWriter.writeJsonField("properties", this.properties);
        jsonWriter.writeJsonField("error", this.error);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NspOperationStatusInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NspOperationStatusInner if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the NspOperationStatusInner.
     */
    public static NspOperationStatusInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NspOperationStatusInner deserializedNspOperationStatusInner = new NspOperationStatusInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedNspOperationStatusInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedNspOperationStatusInner.name = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedNspOperationStatusInner.status = OperationStatus.fromString(reader.getString());
                } else if ("startTime".equals(fieldName)) {
                    deserializedNspOperationStatusInner.startTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("endTime".equals(fieldName)) {
                    deserializedNspOperationStatusInner.endTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("properties".equals(fieldName)) {
                    deserializedNspOperationStatusInner.properties = NspOperationStatusProperties.fromJson(reader);
                } else if ("error".equals(fieldName)) {
                    deserializedNspOperationStatusInner.error = OperationError.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNspOperationStatusInner;
        });
    }
}
