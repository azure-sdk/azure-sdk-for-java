// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.network.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.network.generated.fluent.ConfigurationSnapshotsClient;
import com.azure.resourcemanager.network.generated.fluent.models.ConfigurationSnapshotInner;
import com.azure.resourcemanager.network.generated.models.ConfigurationSnapshot;
import com.azure.resourcemanager.network.generated.models.ConfigurationSnapshots;

public final class ConfigurationSnapshotsImpl implements ConfigurationSnapshots {
    private static final ClientLogger LOGGER = new ClientLogger(ConfigurationSnapshotsImpl.class);

    private final ConfigurationSnapshotsClient innerClient;

    private final com.azure.resourcemanager.network.generated.NetworkManager serviceManager;

    public ConfigurationSnapshotsImpl(
        ConfigurationSnapshotsClient innerClient,
        com.azure.resourcemanager.network.generated.NetworkManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<ConfigurationSnapshot> list(String resourceGroupName, String networkVerifierName) {
        PagedIterable<ConfigurationSnapshotInner> inner =
            this.serviceClient().list(resourceGroupName, networkVerifierName);
        return Utils.mapPage(inner, inner1 -> new ConfigurationSnapshotImpl(inner1, this.manager()));
    }

    public PagedIterable<ConfigurationSnapshot> list(
        String resourceGroupName, String networkVerifierName, Context context) {
        PagedIterable<ConfigurationSnapshotInner> inner =
            this.serviceClient().list(resourceGroupName, networkVerifierName, context);
        return Utils.mapPage(inner, inner1 -> new ConfigurationSnapshotImpl(inner1, this.manager()));
    }

    public Response<ConfigurationSnapshot> getWithResponse(
        String resourceGroupName, String networkVerifierName, String configurationSnapshotName, Context context) {
        Response<ConfigurationSnapshotInner> inner =
            this
                .serviceClient()
                .getWithResponse(resourceGroupName, networkVerifierName, configurationSnapshotName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ConfigurationSnapshotImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ConfigurationSnapshot get(
        String resourceGroupName, String networkVerifierName, String configurationSnapshotName) {
        ConfigurationSnapshotInner inner =
            this.serviceClient().get(resourceGroupName, networkVerifierName, configurationSnapshotName);
        if (inner != null) {
            return new ConfigurationSnapshotImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String networkVerifierName, String configurationSnapshotName) {
        this.serviceClient().delete(resourceGroupName, networkVerifierName, configurationSnapshotName);
    }

    public void delete(
        String resourceGroupName, String networkVerifierName, String configurationSnapshotName, Context context) {
        this.serviceClient().delete(resourceGroupName, networkVerifierName, configurationSnapshotName, context);
    }

    public ConfigurationSnapshot getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String networkVerifierName = Utils.getValueFromIdByName(id, "networkVerifiers");
        if (networkVerifierName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'networkVerifiers'.", id)));
        }
        String configurationSnapshotName = Utils.getValueFromIdByName(id, "configurationSnapshots");
        if (configurationSnapshotName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'configurationSnapshots'.",
                                id)));
        }
        return this
            .getWithResponse(resourceGroupName, networkVerifierName, configurationSnapshotName, Context.NONE)
            .getValue();
    }

    public Response<ConfigurationSnapshot> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String networkVerifierName = Utils.getValueFromIdByName(id, "networkVerifiers");
        if (networkVerifierName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'networkVerifiers'.", id)));
        }
        String configurationSnapshotName = Utils.getValueFromIdByName(id, "configurationSnapshots");
        if (configurationSnapshotName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'configurationSnapshots'.",
                                id)));
        }
        return this.getWithResponse(resourceGroupName, networkVerifierName, configurationSnapshotName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String networkVerifierName = Utils.getValueFromIdByName(id, "networkVerifiers");
        if (networkVerifierName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'networkVerifiers'.", id)));
        }
        String configurationSnapshotName = Utils.getValueFromIdByName(id, "configurationSnapshots");
        if (configurationSnapshotName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'configurationSnapshots'.",
                                id)));
        }
        this.delete(resourceGroupName, networkVerifierName, configurationSnapshotName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String networkVerifierName = Utils.getValueFromIdByName(id, "networkVerifiers");
        if (networkVerifierName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'networkVerifiers'.", id)));
        }
        String configurationSnapshotName = Utils.getValueFromIdByName(id, "configurationSnapshots");
        if (configurationSnapshotName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'configurationSnapshots'.",
                                id)));
        }
        this.delete(resourceGroupName, networkVerifierName, configurationSnapshotName, context);
    }

    private ConfigurationSnapshotsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.network.generated.NetworkManager manager() {
        return this.serviceManager;
    }

    public ConfigurationSnapshotImpl define(String name) {
        return new ConfigurationSnapshotImpl(name, this.manager());
    }
}
