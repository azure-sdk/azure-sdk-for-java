// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.network.generated.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.network.generated.fluent.models.IpamPoolInner;
import java.util.Map;

/**
 * An immutable client-side representation of IpamPool.
 */
public interface IpamPool {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     * 
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     * 
     * @return the type value.
     */
    String type();

    /**
     * Gets the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * Gets the tags property: Resource tags.
     * 
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the location property: The geo-location where the resource lives.
     * 
     * @return the location value.
     */
    String location();

    /**
     * Gets the properties property: Properties of IpamPool resource properties which are specific to the Pool resource.
     * 
     * @return the properties value.
     */
    IpamPoolProperties properties();

    /**
     * Gets the etag property: String representing unique etag for the resource document.
     * 
     * @return the etag value.
     */
    String etag();

    /**
     * Gets the region of the resource.
     * 
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     * 
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the name of the resource group.
     * 
     * @return the name of the resource group.
     */
    String resourceGroupName();

    /**
     * Gets the inner com.azure.resourcemanager.network.generated.fluent.models.IpamPoolInner object.
     * 
     * @return the inner object.
     */
    IpamPoolInner innerModel();

    /**
     * The entirety of the IpamPool definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithLocation,
        DefinitionStages.WithParentResource, DefinitionStages.WithProperties, DefinitionStages.WithCreate {
    }

    /**
     * The IpamPool definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of the IpamPool definition.
         */
        interface Blank extends WithLocation {
        }

        /**
         * The stage of the IpamPool definition allowing to specify location.
         */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             * 
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithParentResource withRegion(Region location);

            /**
             * Specifies the region for the resource.
             * 
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithParentResource withRegion(String location);
        }

        /**
         * The stage of the IpamPool definition allowing to specify parent resource.
         */
        interface WithParentResource {
            /**
             * Specifies resourceGroupName, networkManagerName.
             * 
             * @param resourceGroupName The name of the resource group.
             * @param networkManagerName The name of the network manager.
             * @return the next definition stage.
             */
            WithProperties withExistingNetworkManager(String resourceGroupName, String networkManagerName);
        }

        /**
         * The stage of the IpamPool definition allowing to specify properties.
         */
        interface WithProperties {
            /**
             * Specifies the properties property: Properties of IpamPool resource properties which are specific to the
             * Pool resource..
             * 
             * @param properties Properties of IpamPool resource properties which are specific to the Pool resource.
             * @return the next definition stage.
             */
            WithCreate withProperties(IpamPoolProperties properties);
        }

        /**
         * The stage of the IpamPool definition which contains all the minimum required properties for the resource to
         * be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate extends DefinitionStages.WithTags, DefinitionStages.WithIfMatch {
            /**
             * Executes the create request.
             * 
             * @return the created resource.
             */
            IpamPool create();

            /**
             * Executes the create request.
             * 
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            IpamPool create(Context context);
        }

        /**
         * The stage of the IpamPool definition allowing to specify tags.
         */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             * 
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }

        /**
         * The stage of the IpamPool definition allowing to specify ifMatch.
         */
        interface WithIfMatch {
            /**
             * Specifies the ifMatch property: The entity state (ETag) version of the pool to update. This value can be
             * omitted or set to "*" to apply the operation unconditionally..
             * 
             * @param ifMatch The entity state (ETag) version of the pool to update. This value can be omitted or set to
             * "*" to apply the operation unconditionally.
             * @return the next definition stage.
             */
            WithCreate withIfMatch(String ifMatch);
        }
    }

    /**
     * Begins update for the IpamPool resource.
     * 
     * @return the stage of resource update.
     */
    IpamPool.Update update();

    /**
     * The template for IpamPool update.
     */
    interface Update extends UpdateStages.WithTags, UpdateStages.WithProperties, UpdateStages.WithIfMatch {
        /**
         * Executes the update request.
         * 
         * @return the updated resource.
         */
        IpamPool apply();

        /**
         * Executes the update request.
         * 
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        IpamPool apply(Context context);
    }

    /**
     * The IpamPool update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the IpamPool update allowing to specify tags.
         */
        interface WithTags {
            /**
             * Specifies the tags property: Dictionary of &lt;string&gt;.
             * 
             * @param tags Dictionary of &lt;string&gt;.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }

        /**
         * The stage of the IpamPool update allowing to specify properties.
         */
        interface WithProperties {
            /**
             * Specifies the properties property: Represents the IpamPool update properties..
             * 
             * @param properties Represents the IpamPool update properties.
             * @return the next definition stage.
             */
            Update withProperties(IpamPoolUpdateProperties properties);
        }

        /**
         * The stage of the IpamPool update allowing to specify ifMatch.
         */
        interface WithIfMatch {
            /**
             * Specifies the ifMatch property: The entity state (ETag) version of the pool to update. This value can be
             * omitted or set to "*" to apply the operation unconditionally..
             * 
             * @param ifMatch The entity state (ETag) version of the pool to update. This value can be omitted or set to
             * "*" to apply the operation unconditionally.
             * @return the next definition stage.
             */
            Update withIfMatch(String ifMatch);
        }
    }

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @return the refreshed resource.
     */
    IpamPool refresh();

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    IpamPool refresh(Context context);

    /**
     * Get the Pool Usage.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Pool Usage along with {@link Response}.
     */
    Response<PoolUsage> getPoolUsageWithResponse(Context context);

    /**
     * Get the Pool Usage.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Pool Usage.
     */
    PoolUsage getPoolUsage();

    /**
     * List Associated Resource in the Pool.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of PoolAssociation as paginated response with {@link PagedIterable}.
     */
    PagedIterable<PoolAssociation> listAssociatedResources();

    /**
     * List Associated Resource in the Pool.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of PoolAssociation as paginated response with {@link PagedIterable}.
     */
    PagedIterable<PoolAssociation> listAssociatedResources(Context context);
}
