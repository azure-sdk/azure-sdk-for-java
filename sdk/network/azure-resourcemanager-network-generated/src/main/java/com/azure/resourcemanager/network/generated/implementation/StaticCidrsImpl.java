// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.network.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.network.generated.fluent.StaticCidrsClient;
import com.azure.resourcemanager.network.generated.fluent.models.StaticCidrInner;
import com.azure.resourcemanager.network.generated.models.StaticCidr;
import com.azure.resourcemanager.network.generated.models.StaticCidrs;

public final class StaticCidrsImpl implements StaticCidrs {
    private static final ClientLogger LOGGER = new ClientLogger(StaticCidrsImpl.class);

    private final StaticCidrsClient innerClient;

    private final com.azure.resourcemanager.network.generated.NetworkManager serviceManager;

    public StaticCidrsImpl(StaticCidrsClient innerClient,
        com.azure.resourcemanager.network.generated.NetworkManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<StaticCidr> list(String resourceGroupName, String networkManagerName, String poolName) {
        PagedIterable<StaticCidrInner> inner
            = this.serviceClient().list(resourceGroupName, networkManagerName, poolName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new StaticCidrImpl(inner1, this.manager()));
    }

    public PagedIterable<StaticCidr> list(String resourceGroupName, String networkManagerName, String poolName,
        String skipToken, Integer skip, Integer top, String sortKey, String sortValue, Context context) {
        PagedIterable<StaticCidrInner> inner = this.serviceClient()
            .list(resourceGroupName, networkManagerName, poolName, skipToken, skip, top, sortKey, sortValue, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new StaticCidrImpl(inner1, this.manager()));
    }

    public Response<StaticCidr> getWithResponse(String resourceGroupName, String networkManagerName, String poolName,
        String staticCidrName, Context context) {
        Response<StaticCidrInner> inner = this.serviceClient()
            .getWithResponse(resourceGroupName, networkManagerName, poolName, staticCidrName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new StaticCidrImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public StaticCidr get(String resourceGroupName, String networkManagerName, String poolName, String staticCidrName) {
        StaticCidrInner inner
            = this.serviceClient().get(resourceGroupName, networkManagerName, poolName, staticCidrName);
        if (inner != null) {
            return new StaticCidrImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String networkManagerName, String poolName, String staticCidrName) {
        this.serviceClient().delete(resourceGroupName, networkManagerName, poolName, staticCidrName);
    }

    public void delete(String resourceGroupName, String networkManagerName, String poolName, String staticCidrName,
        Context context) {
        this.serviceClient().delete(resourceGroupName, networkManagerName, poolName, staticCidrName, context);
    }

    public StaticCidr getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String networkManagerName = ResourceManagerUtils.getValueFromIdByName(id, "networkManagers");
        if (networkManagerName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'networkManagers'.", id)));
        }
        String poolName = ResourceManagerUtils.getValueFromIdByName(id, "ipamPools");
        if (poolName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'ipamPools'.", id)));
        }
        String staticCidrName = ResourceManagerUtils.getValueFromIdByName(id, "staticCidrs");
        if (staticCidrName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'staticCidrs'.", id)));
        }
        return this.getWithResponse(resourceGroupName, networkManagerName, poolName, staticCidrName, Context.NONE)
            .getValue();
    }

    public Response<StaticCidr> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String networkManagerName = ResourceManagerUtils.getValueFromIdByName(id, "networkManagers");
        if (networkManagerName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'networkManagers'.", id)));
        }
        String poolName = ResourceManagerUtils.getValueFromIdByName(id, "ipamPools");
        if (poolName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'ipamPools'.", id)));
        }
        String staticCidrName = ResourceManagerUtils.getValueFromIdByName(id, "staticCidrs");
        if (staticCidrName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'staticCidrs'.", id)));
        }
        return this.getWithResponse(resourceGroupName, networkManagerName, poolName, staticCidrName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String networkManagerName = ResourceManagerUtils.getValueFromIdByName(id, "networkManagers");
        if (networkManagerName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'networkManagers'.", id)));
        }
        String poolName = ResourceManagerUtils.getValueFromIdByName(id, "ipamPools");
        if (poolName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'ipamPools'.", id)));
        }
        String staticCidrName = ResourceManagerUtils.getValueFromIdByName(id, "staticCidrs");
        if (staticCidrName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'staticCidrs'.", id)));
        }
        this.delete(resourceGroupName, networkManagerName, poolName, staticCidrName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String networkManagerName = ResourceManagerUtils.getValueFromIdByName(id, "networkManagers");
        if (networkManagerName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'networkManagers'.", id)));
        }
        String poolName = ResourceManagerUtils.getValueFromIdByName(id, "ipamPools");
        if (poolName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'ipamPools'.", id)));
        }
        String staticCidrName = ResourceManagerUtils.getValueFromIdByName(id, "staticCidrs");
        if (staticCidrName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'staticCidrs'.", id)));
        }
        this.delete(resourceGroupName, networkManagerName, poolName, staticCidrName, context);
    }

    private StaticCidrsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.network.generated.NetworkManager manager() {
        return this.serviceManager;
    }

    public StaticCidrImpl define(String name) {
        return new StaticCidrImpl(name, this.manager());
    }
}
