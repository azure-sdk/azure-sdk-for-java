// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.network.generated.implementation;

import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.network.generated.fluent.models.SharedKeyInner;
import com.azure.resourcemanager.network.generated.fluent.models.SharedKeyProperties;
import com.azure.resourcemanager.network.generated.models.SharedKey;
import java.util.Collections;
import java.util.Map;

public final class SharedKeyImpl implements SharedKey, SharedKey.Definition, SharedKey.Update {
    private SharedKeyInner innerObject;

    private final com.azure.resourcemanager.network.generated.NetworkManager serviceManager;

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public String etag() {
        return this.innerModel().etag();
    }

    public String id() {
        return this.innerModel().id();
    }

    public String keyValue() {
        return this.innerModel().keyValue();
    }

    public Integer keyLength() {
        return this.innerModel().keyLength();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public SharedKeyInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.network.generated.NetworkManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String gatewayName;

    private String connectionName;

    private String linkConnectionName;

    private String sharedKeyName;

    private SharedKeyProperties createParameters;

    private SharedKeyProperties updateParameters;

    public SharedKeyImpl withExistingVpnLinkConnection(String resourceGroupName, String gatewayName,
        String connectionName, String linkConnectionName) {
        this.resourceGroupName = resourceGroupName;
        this.gatewayName = gatewayName;
        this.connectionName = connectionName;
        this.linkConnectionName = linkConnectionName;
        return this;
    }

    public SharedKey create() {
        this.innerObject = serviceManager.serviceClient().getVpnLinkConnections().putSharedKey(resourceGroupName,
            gatewayName, connectionName, linkConnectionName, sharedKeyName, createParameters, Context.NONE);
        return this;
    }

    public SharedKey create(Context context) {
        this.innerObject = serviceManager.serviceClient().getVpnLinkConnections().putSharedKey(resourceGroupName,
            gatewayName, connectionName, linkConnectionName, sharedKeyName, createParameters, context);
        return this;
    }

    SharedKeyImpl(String name, com.azure.resourcemanager.network.generated.NetworkManager serviceManager) {
        this.innerObject = new SharedKeyInner();
        this.serviceManager = serviceManager;
        this.sharedKeyName = name;
        this.createParameters = new SharedKeyProperties();
    }

    public SharedKeyImpl update() {
        this.updateParameters = new SharedKeyProperties();
        return this;
    }

    public SharedKey apply() {
        this.innerObject = serviceManager.serviceClient().getVpnLinkConnections().putSharedKey(resourceGroupName,
            gatewayName, connectionName, linkConnectionName, sharedKeyName, updateParameters, Context.NONE);
        return this;
    }

    public SharedKey apply(Context context) {
        this.innerObject = serviceManager.serviceClient().getVpnLinkConnections().putSharedKey(resourceGroupName,
            gatewayName, connectionName, linkConnectionName, sharedKeyName, updateParameters, context);
        return this;
    }

    SharedKeyImpl(SharedKeyInner innerObject,
        com.azure.resourcemanager.network.generated.NetworkManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.gatewayName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "vpnGateways");
        this.connectionName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "vpnConnections");
        this.linkConnectionName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "vpnLinkConnections");
        this.sharedKeyName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "sharedKey");
    }

    public SharedKey refresh() {
        this.innerObject
            = serviceManager.serviceClient().getVpnLinkConnections().sharedKeyGetWithResponse(resourceGroupName,
                gatewayName, connectionName, linkConnectionName, sharedKeyName, Context.NONE).getValue();
        return this;
    }

    public SharedKey refresh(Context context) {
        this.innerObject
            = serviceManager.serviceClient().getVpnLinkConnections().sharedKeyGetWithResponse(resourceGroupName,
                gatewayName, connectionName, linkConnectionName, sharedKeyName, context).getValue();
        return this;
    }

    public SharedKeyImpl withKeyValue(String keyValue) {
        if (isInCreateMode()) {
            this.createParameters.withKeyValue(keyValue);
            return this;
        } else {
            this.updateParameters.withKeyValue(keyValue);
            return this;
        }
    }

    public SharedKeyImpl withKeyLength(Integer keyLength) {
        if (isInCreateMode()) {
            this.createParameters.withKeyLength(keyLength);
            return this;
        } else {
            this.updateParameters.withKeyLength(keyLength);
            return this;
        }
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
