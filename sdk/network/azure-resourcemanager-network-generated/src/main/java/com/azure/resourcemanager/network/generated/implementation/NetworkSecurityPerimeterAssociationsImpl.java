// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.network.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.network.generated.fluent.NetworkSecurityPerimeterAssociationsClient;
import com.azure.resourcemanager.network.generated.fluent.models.NspAssociationInner;
import com.azure.resourcemanager.network.generated.models.NetworkSecurityPerimeterAssociations;
import com.azure.resourcemanager.network.generated.models.NspAssociation;

public final class NetworkSecurityPerimeterAssociationsImpl implements NetworkSecurityPerimeterAssociations {
    private static final ClientLogger LOGGER = new ClientLogger(NetworkSecurityPerimeterAssociationsImpl.class);

    private final NetworkSecurityPerimeterAssociationsClient innerClient;

    private final com.azure.resourcemanager.network.generated.NetworkManager serviceManager;

    public NetworkSecurityPerimeterAssociationsImpl(NetworkSecurityPerimeterAssociationsClient innerClient,
        com.azure.resourcemanager.network.generated.NetworkManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<NspAssociation> getWithResponse(String resourceGroupName, String networkSecurityPerimeterName,
        String associationName, Context context) {
        Response<NspAssociationInner> inner = this.serviceClient()
            .getWithResponse(resourceGroupName, networkSecurityPerimeterName, associationName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new NspAssociationImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public NspAssociation get(String resourceGroupName, String networkSecurityPerimeterName, String associationName) {
        NspAssociationInner inner
            = this.serviceClient().get(resourceGroupName, networkSecurityPerimeterName, associationName);
        if (inner != null) {
            return new NspAssociationImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String networkSecurityPerimeterName, String associationName) {
        this.serviceClient().delete(resourceGroupName, networkSecurityPerimeterName, associationName);
    }

    public void delete(String resourceGroupName, String networkSecurityPerimeterName, String associationName,
        Context context) {
        this.serviceClient().delete(resourceGroupName, networkSecurityPerimeterName, associationName, context);
    }

    public PagedIterable<NspAssociation> list(String resourceGroupName, String networkSecurityPerimeterName) {
        PagedIterable<NspAssociationInner> inner
            = this.serviceClient().list(resourceGroupName, networkSecurityPerimeterName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new NspAssociationImpl(inner1, this.manager()));
    }

    public PagedIterable<NspAssociation> list(String resourceGroupName, String networkSecurityPerimeterName,
        Integer top, String skipToken, Context context) {
        PagedIterable<NspAssociationInner> inner
            = this.serviceClient().list(resourceGroupName, networkSecurityPerimeterName, top, skipToken, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new NspAssociationImpl(inner1, this.manager()));
    }

    public Response<Object> postWithResponse(String resourceGroupName, String networkSecurityPerimeterName,
        String associationName, Object parameters, Context context) {
        return this.serviceClient()
            .postWithResponse(resourceGroupName, networkSecurityPerimeterName, associationName, parameters, context);
    }

    public Object post(String resourceGroupName, String networkSecurityPerimeterName, String associationName,
        Object parameters) {
        return this.serviceClient().post(resourceGroupName, networkSecurityPerimeterName, associationName, parameters);
    }

    public NspAssociation getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String networkSecurityPerimeterName
            = ResourceManagerUtils.getValueFromIdByName(id, "networkSecurityPerimeters");
        if (networkSecurityPerimeterName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'networkSecurityPerimeters'.", id)));
        }
        String associationName = ResourceManagerUtils.getValueFromIdByName(id, "resourceAssociations");
        if (associationName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceAssociations'.", id)));
        }
        return this.getWithResponse(resourceGroupName, networkSecurityPerimeterName, associationName, Context.NONE)
            .getValue();
    }

    public Response<NspAssociation> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String networkSecurityPerimeterName
            = ResourceManagerUtils.getValueFromIdByName(id, "networkSecurityPerimeters");
        if (networkSecurityPerimeterName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'networkSecurityPerimeters'.", id)));
        }
        String associationName = ResourceManagerUtils.getValueFromIdByName(id, "resourceAssociations");
        if (associationName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceAssociations'.", id)));
        }
        return this.getWithResponse(resourceGroupName, networkSecurityPerimeterName, associationName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String networkSecurityPerimeterName
            = ResourceManagerUtils.getValueFromIdByName(id, "networkSecurityPerimeters");
        if (networkSecurityPerimeterName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'networkSecurityPerimeters'.", id)));
        }
        String associationName = ResourceManagerUtils.getValueFromIdByName(id, "resourceAssociations");
        if (associationName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceAssociations'.", id)));
        }
        this.delete(resourceGroupName, networkSecurityPerimeterName, associationName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String networkSecurityPerimeterName
            = ResourceManagerUtils.getValueFromIdByName(id, "networkSecurityPerimeters");
        if (networkSecurityPerimeterName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'networkSecurityPerimeters'.", id)));
        }
        String associationName = ResourceManagerUtils.getValueFromIdByName(id, "resourceAssociations");
        if (associationName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceAssociations'.", id)));
        }
        this.delete(resourceGroupName, networkSecurityPerimeterName, associationName, context);
    }

    private NetworkSecurityPerimeterAssociationsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.network.generated.NetworkManager manager() {
        return this.serviceManager;
    }

    public NspAssociationImpl define(String name) {
        return new NspAssociationImpl(name, this.manager());
    }
}
