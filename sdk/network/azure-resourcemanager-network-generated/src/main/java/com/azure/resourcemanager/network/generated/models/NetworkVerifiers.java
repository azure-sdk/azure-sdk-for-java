// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.network.generated.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/** Resource collection API of NetworkVerifiers. */
public interface NetworkVerifiers {
    /**
     * Gets list of Network Verifier resources at subscription level.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Network Verifier resources at subscription level as paginated response with {@link
     *     PagedIterable}.
     */
    PagedIterable<NetworkVerifier> list();

    /**
     * Gets list of Network Verifier resources at subscription level.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Network Verifier resources at subscription level as paginated response with {@link
     *     PagedIterable}.
     */
    PagedIterable<NetworkVerifier> list(Context context);

    /**
     * Gets list of Network Verifier resources at resource group level.
     *
     * @param resourceGroupName The name of the resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Network Verifier resources at resource group level as paginated response with {@link
     *     PagedIterable}.
     */
    PagedIterable<NetworkVerifier> listByResourceGroup(String resourceGroupName);

    /**
     * Gets list of Network Verifier resources at resource group level.
     *
     * @param resourceGroupName The name of the resource group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Network Verifier resources at resource group level as paginated response with {@link
     *     PagedIterable}.
     */
    PagedIterable<NetworkVerifier> listByResourceGroup(String resourceGroupName, Context context);

    /**
     * Gets the specific Network Verifier resource.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkVerifierName The name of the Network Verifier resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specific Network Verifier resource along with {@link Response}.
     */
    Response<NetworkVerifier> getByResourceGroupWithResponse(
        String resourceGroupName, String networkVerifierName, Context context);

    /**
     * Gets the specific Network Verifier resource.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkVerifierName The name of the Network Verifier resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specific Network Verifier resource.
     */
    NetworkVerifier getByResourceGroup(String resourceGroupName, String networkVerifierName);

    /**
     * Deletes the specific Network Verifier resource asynchronously.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkVerifierName The name of the Network Verifier resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteByResourceGroup(String resourceGroupName, String networkVerifierName);

    /**
     * Deletes the specific Network Verifier resource asynchronously.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkVerifierName The name of the Network Verifier resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(String resourceGroupName, String networkVerifierName, Context context);

    /**
     * Gets the specific Network Verifier resource.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specific Network Verifier resource along with {@link Response}.
     */
    NetworkVerifier getById(String id);

    /**
     * Gets the specific Network Verifier resource.
     *
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specific Network Verifier resource along with {@link Response}.
     */
    Response<NetworkVerifier> getByIdWithResponse(String id, Context context);

    /**
     * Deletes the specific Network Verifier resource asynchronously.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteById(String id);

    /**
     * Deletes the specific Network Verifier resource asynchronously.
     *
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteByIdWithResponse(String id, Context context);

    /**
     * Begins definition for a new NetworkVerifier resource.
     *
     * @param name resource name.
     * @return the first stage of the new NetworkVerifier definition.
     */
    NetworkVerifier.DefinitionStages.Blank define(String name);
}
