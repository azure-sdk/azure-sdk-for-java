// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.network.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.network.generated.fluent.AnalysisRunsClient;
import com.azure.resourcemanager.network.generated.fluent.models.AnalysisRunInner;
import com.azure.resourcemanager.network.generated.models.AnalysisRun;
import com.azure.resourcemanager.network.generated.models.AnalysisRuns;

public final class AnalysisRunsImpl implements AnalysisRuns {
    private static final ClientLogger LOGGER = new ClientLogger(AnalysisRunsImpl.class);

    private final AnalysisRunsClient innerClient;

    private final com.azure.resourcemanager.network.generated.NetworkManager serviceManager;

    public AnalysisRunsImpl(
        AnalysisRunsClient innerClient, com.azure.resourcemanager.network.generated.NetworkManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<AnalysisRun> list(
        String resourceGroupName, String networkVerifierName, String analysisIntentName) {
        PagedIterable<AnalysisRunInner> inner =
            this.serviceClient().list(resourceGroupName, networkVerifierName, analysisIntentName);
        return Utils.mapPage(inner, inner1 -> new AnalysisRunImpl(inner1, this.manager()));
    }

    public PagedIterable<AnalysisRun> list(
        String resourceGroupName, String networkVerifierName, String analysisIntentName, Context context) {
        PagedIterable<AnalysisRunInner> inner =
            this.serviceClient().list(resourceGroupName, networkVerifierName, analysisIntentName, context);
        return Utils.mapPage(inner, inner1 -> new AnalysisRunImpl(inner1, this.manager()));
    }

    public Response<AnalysisRun> getWithResponse(
        String resourceGroupName,
        String networkVerifierName,
        String analysisIntentName,
        String analysisRunName,
        Context context) {
        Response<AnalysisRunInner> inner =
            this
                .serviceClient()
                .getWithResponse(resourceGroupName, networkVerifierName, analysisIntentName, analysisRunName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new AnalysisRunImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public AnalysisRun get(
        String resourceGroupName, String networkVerifierName, String analysisIntentName, String analysisRunName) {
        AnalysisRunInner inner =
            this.serviceClient().get(resourceGroupName, networkVerifierName, analysisIntentName, analysisRunName);
        if (inner != null) {
            return new AnalysisRunImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(
        String resourceGroupName, String networkVerifierName, String analysisIntentName, String analysisRunName) {
        this.serviceClient().delete(resourceGroupName, networkVerifierName, analysisIntentName, analysisRunName);
    }

    public void delete(
        String resourceGroupName,
        String networkVerifierName,
        String analysisIntentName,
        String analysisRunName,
        Context context) {
        this
            .serviceClient()
            .delete(resourceGroupName, networkVerifierName, analysisIntentName, analysisRunName, context);
    }

    public AnalysisRun getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String networkVerifierName = Utils.getValueFromIdByName(id, "networkVerifiers");
        if (networkVerifierName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'networkVerifiers'.", id)));
        }
        String analysisIntentName = Utils.getValueFromIdByName(id, "analysisIntents");
        if (analysisIntentName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'analysisIntents'.", id)));
        }
        String analysisRunName = Utils.getValueFromIdByName(id, "analysisRuns");
        if (analysisRunName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'analysisRuns'.", id)));
        }
        return this
            .getWithResponse(resourceGroupName, networkVerifierName, analysisIntentName, analysisRunName, Context.NONE)
            .getValue();
    }

    public Response<AnalysisRun> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String networkVerifierName = Utils.getValueFromIdByName(id, "networkVerifiers");
        if (networkVerifierName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'networkVerifiers'.", id)));
        }
        String analysisIntentName = Utils.getValueFromIdByName(id, "analysisIntents");
        if (analysisIntentName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'analysisIntents'.", id)));
        }
        String analysisRunName = Utils.getValueFromIdByName(id, "analysisRuns");
        if (analysisRunName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'analysisRuns'.", id)));
        }
        return this
            .getWithResponse(resourceGroupName, networkVerifierName, analysisIntentName, analysisRunName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String networkVerifierName = Utils.getValueFromIdByName(id, "networkVerifiers");
        if (networkVerifierName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'networkVerifiers'.", id)));
        }
        String analysisIntentName = Utils.getValueFromIdByName(id, "analysisIntents");
        if (analysisIntentName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'analysisIntents'.", id)));
        }
        String analysisRunName = Utils.getValueFromIdByName(id, "analysisRuns");
        if (analysisRunName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'analysisRuns'.", id)));
        }
        this.delete(resourceGroupName, networkVerifierName, analysisIntentName, analysisRunName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String networkVerifierName = Utils.getValueFromIdByName(id, "networkVerifiers");
        if (networkVerifierName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'networkVerifiers'.", id)));
        }
        String analysisIntentName = Utils.getValueFromIdByName(id, "analysisIntents");
        if (analysisIntentName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'analysisIntents'.", id)));
        }
        String analysisRunName = Utils.getValueFromIdByName(id, "analysisRuns");
        if (analysisRunName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'analysisRuns'.", id)));
        }
        this.delete(resourceGroupName, networkVerifierName, analysisIntentName, analysisRunName, context);
    }

    private AnalysisRunsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.network.generated.NetworkManager manager() {
        return this.serviceManager;
    }

    public AnalysisRunImpl define(String name) {
        return new AnalysisRunImpl(name, this.manager());
    }
}
