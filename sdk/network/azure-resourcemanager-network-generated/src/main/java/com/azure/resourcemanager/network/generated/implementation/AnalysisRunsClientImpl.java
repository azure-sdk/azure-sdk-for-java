// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.network.generated.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.network.generated.fluent.AnalysisRunsClient;
import com.azure.resourcemanager.network.generated.fluent.models.AnalysisRunInner;
import com.azure.resourcemanager.network.generated.models.AnalysisRunList;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in AnalysisRunsClient. */
public final class AnalysisRunsClientImpl implements AnalysisRunsClient {
    /** The proxy service used to perform REST calls. */
    private final AnalysisRunsService service;

    /** The service client containing this operation class. */
    private final NetworkManagementClientImpl client;

    /**
     * Initializes an instance of AnalysisRunsClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    AnalysisRunsClientImpl(NetworkManagementClientImpl client) {
        this.service =
            RestProxy.create(AnalysisRunsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for NetworkManagementClientAnalysisRuns to be used by the proxy service
     * to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "NetworkManagementCli")
    public interface AnalysisRunsService {
        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network"
                + "/networkVerifiers/{networkVerifierName}/analysisIntents/{analysisIntentName}/analysisRuns")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<AnalysisRunList>> list(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("networkVerifierName") String networkVerifierName,
            @PathParam("analysisIntentName") String analysisIntentName,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network"
                + "/networkVerifiers/{networkVerifierName}/analysisIntents/{analysisIntentName}/analysisRuns"
                + "/{analysisRunName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<AnalysisRunInner>> get(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("networkVerifierName") String networkVerifierName,
            @PathParam("analysisIntentName") String analysisIntentName,
            @PathParam("analysisRunName") String analysisRunName,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network"
                + "/networkVerifiers/{networkVerifierName}/analysisIntents/{analysisIntentName}/analysisRuns"
                + "/{analysisRunName}")
        @ExpectedResponses({201})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> create(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("networkVerifierName") String networkVerifierName,
            @PathParam("analysisIntentName") String analysisIntentName,
            @PathParam("analysisRunName") String analysisRunName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") AnalysisRunInner body,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network"
                + "/networkVerifiers/{networkVerifierName}/analysisIntents/{analysisIntentName}/analysisRuns"
                + "/{analysisRunName}")
        @ExpectedResponses({202, 204})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("networkVerifierName") String networkVerifierName,
            @PathParam("analysisIntentName") String analysisIntentName,
            @PathParam("analysisRunName") String analysisRunName,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<AnalysisRunList>> listNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Gets the list of Analysis Run resources.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkVerifierName The name of the Network Verifier resource.
     * @param analysisIntentName The name of the Analysis Intent resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of Analysis Run resources along with {@link PagedResponse} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<AnalysisRunInner>> listSinglePageAsync(
        String resourceGroupName, String networkVerifierName, String analysisIntentName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (networkVerifierName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter networkVerifierName is required and cannot be null."));
        }
        if (analysisIntentName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter analysisIntentName is required and cannot be null."));
        }
        final String apiVersion = "2022-12-01-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .list(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            networkVerifierName,
                            analysisIntentName,
                            apiVersion,
                            accept,
                            context))
            .<PagedResponse<AnalysisRunInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets the list of Analysis Run resources.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkVerifierName The name of the Network Verifier resource.
     * @param analysisIntentName The name of the Analysis Intent resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of Analysis Run resources along with {@link PagedResponse} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<AnalysisRunInner>> listSinglePageAsync(
        String resourceGroupName, String networkVerifierName, String analysisIntentName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (networkVerifierName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter networkVerifierName is required and cannot be null."));
        }
        if (analysisIntentName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter analysisIntentName is required and cannot be null."));
        }
        final String apiVersion = "2022-12-01-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .list(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                networkVerifierName,
                analysisIntentName,
                apiVersion,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Gets the list of Analysis Run resources.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkVerifierName The name of the Network Verifier resource.
     * @param analysisIntentName The name of the Analysis Intent resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of Analysis Run resources as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<AnalysisRunInner> listAsync(
        String resourceGroupName, String networkVerifierName, String analysisIntentName) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(resourceGroupName, networkVerifierName, analysisIntentName),
            nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Gets the list of Analysis Run resources.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkVerifierName The name of the Network Verifier resource.
     * @param analysisIntentName The name of the Analysis Intent resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of Analysis Run resources as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<AnalysisRunInner> listAsync(
        String resourceGroupName, String networkVerifierName, String analysisIntentName, Context context) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(resourceGroupName, networkVerifierName, analysisIntentName, context),
            nextLink -> listNextSinglePageAsync(nextLink, context));
    }

    /**
     * Gets the list of Analysis Run resources.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkVerifierName The name of the Network Verifier resource.
     * @param analysisIntentName The name of the Analysis Intent resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of Analysis Run resources as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<AnalysisRunInner> list(
        String resourceGroupName, String networkVerifierName, String analysisIntentName) {
        return new PagedIterable<>(listAsync(resourceGroupName, networkVerifierName, analysisIntentName));
    }

    /**
     * Gets the list of Analysis Run resources.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkVerifierName The name of the Network Verifier resource.
     * @param analysisIntentName The name of the Analysis Intent resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of Analysis Run resources as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<AnalysisRunInner> list(
        String resourceGroupName, String networkVerifierName, String analysisIntentName, Context context) {
        return new PagedIterable<>(listAsync(resourceGroupName, networkVerifierName, analysisIntentName, context));
    }

    /**
     * Gets the specific Analysis Run resource.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkVerifierName The name of the Network Verifier resource.
     * @param analysisIntentName The name of the Analysis Intent resource.
     * @param analysisRunName The name of the Analysis Run resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specific Analysis Run resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<AnalysisRunInner>> getWithResponseAsync(
        String resourceGroupName, String networkVerifierName, String analysisIntentName, String analysisRunName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (networkVerifierName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter networkVerifierName is required and cannot be null."));
        }
        if (analysisIntentName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter analysisIntentName is required and cannot be null."));
        }
        if (analysisRunName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter analysisRunName is required and cannot be null."));
        }
        final String apiVersion = "2022-12-01-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .get(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            networkVerifierName,
                            analysisIntentName,
                            analysisRunName,
                            apiVersion,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets the specific Analysis Run resource.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkVerifierName The name of the Network Verifier resource.
     * @param analysisIntentName The name of the Analysis Intent resource.
     * @param analysisRunName The name of the Analysis Run resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specific Analysis Run resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<AnalysisRunInner>> getWithResponseAsync(
        String resourceGroupName,
        String networkVerifierName,
        String analysisIntentName,
        String analysisRunName,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (networkVerifierName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter networkVerifierName is required and cannot be null."));
        }
        if (analysisIntentName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter analysisIntentName is required and cannot be null."));
        }
        if (analysisRunName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter analysisRunName is required and cannot be null."));
        }
        final String apiVersion = "2022-12-01-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .get(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                networkVerifierName,
                analysisIntentName,
                analysisRunName,
                apiVersion,
                accept,
                context);
    }

    /**
     * Gets the specific Analysis Run resource.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkVerifierName The name of the Network Verifier resource.
     * @param analysisIntentName The name of the Analysis Intent resource.
     * @param analysisRunName The name of the Analysis Run resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specific Analysis Run resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<AnalysisRunInner> getAsync(
        String resourceGroupName, String networkVerifierName, String analysisIntentName, String analysisRunName) {
        return getWithResponseAsync(resourceGroupName, networkVerifierName, analysisIntentName, analysisRunName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets the specific Analysis Run resource.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkVerifierName The name of the Network Verifier resource.
     * @param analysisIntentName The name of the Analysis Intent resource.
     * @param analysisRunName The name of the Analysis Run resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specific Analysis Run resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<AnalysisRunInner> getWithResponse(
        String resourceGroupName,
        String networkVerifierName,
        String analysisIntentName,
        String analysisRunName,
        Context context) {
        return getWithResponseAsync(
                resourceGroupName, networkVerifierName, analysisIntentName, analysisRunName, context)
            .block();
    }

    /**
     * Gets the specific Analysis Run resource.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkVerifierName The name of the Network Verifier resource.
     * @param analysisIntentName The name of the Analysis Intent resource.
     * @param analysisRunName The name of the Analysis Run resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specific Analysis Run resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AnalysisRunInner get(
        String resourceGroupName, String networkVerifierName, String analysisIntentName, String analysisRunName) {
        return getWithResponse(
                resourceGroupName, networkVerifierName, analysisIntentName, analysisRunName, Context.NONE)
            .getValue();
    }

    /**
     * Creates the specific Analysis Run resource asynchronously.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkVerifierName The name of the Network Verifier resource.
     * @param analysisIntentName The name of the Analysis Intent resource.
     * @param analysisRunName The name of the Analysis Run resource.
     * @param body The Analysis Run resource object to create/update.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return instance of analysis result performed given a analysis intent and configuration snapshot along with
     *     {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createWithResponseAsync(
        String resourceGroupName,
        String networkVerifierName,
        String analysisIntentName,
        String analysisRunName,
        AnalysisRunInner body) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (networkVerifierName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter networkVerifierName is required and cannot be null."));
        }
        if (analysisIntentName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter analysisIntentName is required and cannot be null."));
        }
        if (analysisRunName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter analysisRunName is required and cannot be null."));
        }
        if (body != null) {
            body.validate();
        }
        final String apiVersion = "2022-12-01-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .create(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            networkVerifierName,
                            analysisIntentName,
                            analysisRunName,
                            apiVersion,
                            body,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Creates the specific Analysis Run resource asynchronously.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkVerifierName The name of the Network Verifier resource.
     * @param analysisIntentName The name of the Analysis Intent resource.
     * @param analysisRunName The name of the Analysis Run resource.
     * @param body The Analysis Run resource object to create/update.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return instance of analysis result performed given a analysis intent and configuration snapshot along with
     *     {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createWithResponseAsync(
        String resourceGroupName,
        String networkVerifierName,
        String analysisIntentName,
        String analysisRunName,
        AnalysisRunInner body,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (networkVerifierName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter networkVerifierName is required and cannot be null."));
        }
        if (analysisIntentName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter analysisIntentName is required and cannot be null."));
        }
        if (analysisRunName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter analysisRunName is required and cannot be null."));
        }
        if (body != null) {
            body.validate();
        }
        final String apiVersion = "2022-12-01-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .create(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                networkVerifierName,
                analysisIntentName,
                analysisRunName,
                apiVersion,
                body,
                accept,
                context);
    }

    /**
     * Creates the specific Analysis Run resource asynchronously.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkVerifierName The name of the Network Verifier resource.
     * @param analysisIntentName The name of the Analysis Intent resource.
     * @param analysisRunName The name of the Analysis Run resource.
     * @param body The Analysis Run resource object to create/update.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of instance of analysis result performed given a analysis intent and
     *     configuration snapshot.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<AnalysisRunInner>, AnalysisRunInner> beginCreateAsync(
        String resourceGroupName,
        String networkVerifierName,
        String analysisIntentName,
        String analysisRunName,
        AnalysisRunInner body) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            createWithResponseAsync(resourceGroupName, networkVerifierName, analysisIntentName, analysisRunName, body);
        return this
            .client
            .<AnalysisRunInner, AnalysisRunInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                AnalysisRunInner.class,
                AnalysisRunInner.class,
                this.client.getContext());
    }

    /**
     * Creates the specific Analysis Run resource asynchronously.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkVerifierName The name of the Network Verifier resource.
     * @param analysisIntentName The name of the Analysis Intent resource.
     * @param analysisRunName The name of the Analysis Run resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of instance of analysis result performed given a analysis intent and
     *     configuration snapshot.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<AnalysisRunInner>, AnalysisRunInner> beginCreateAsync(
        String resourceGroupName, String networkVerifierName, String analysisIntentName, String analysisRunName) {
        final AnalysisRunInner body = null;
        Mono<Response<Flux<ByteBuffer>>> mono =
            createWithResponseAsync(resourceGroupName, networkVerifierName, analysisIntentName, analysisRunName, body);
        return this
            .client
            .<AnalysisRunInner, AnalysisRunInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                AnalysisRunInner.class,
                AnalysisRunInner.class,
                this.client.getContext());
    }

    /**
     * Creates the specific Analysis Run resource asynchronously.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkVerifierName The name of the Network Verifier resource.
     * @param analysisIntentName The name of the Analysis Intent resource.
     * @param analysisRunName The name of the Analysis Run resource.
     * @param body The Analysis Run resource object to create/update.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of instance of analysis result performed given a analysis intent and
     *     configuration snapshot.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<AnalysisRunInner>, AnalysisRunInner> beginCreateAsync(
        String resourceGroupName,
        String networkVerifierName,
        String analysisIntentName,
        String analysisRunName,
        AnalysisRunInner body,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            createWithResponseAsync(
                resourceGroupName, networkVerifierName, analysisIntentName, analysisRunName, body, context);
        return this
            .client
            .<AnalysisRunInner, AnalysisRunInner>getLroResult(
                mono, this.client.getHttpPipeline(), AnalysisRunInner.class, AnalysisRunInner.class, context);
    }

    /**
     * Creates the specific Analysis Run resource asynchronously.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkVerifierName The name of the Network Verifier resource.
     * @param analysisIntentName The name of the Analysis Intent resource.
     * @param analysisRunName The name of the Analysis Run resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of instance of analysis result performed given a analysis intent and
     *     configuration snapshot.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<AnalysisRunInner>, AnalysisRunInner> beginCreate(
        String resourceGroupName, String networkVerifierName, String analysisIntentName, String analysisRunName) {
        final AnalysisRunInner body = null;
        return beginCreateAsync(resourceGroupName, networkVerifierName, analysisIntentName, analysisRunName, body)
            .getSyncPoller();
    }

    /**
     * Creates the specific Analysis Run resource asynchronously.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkVerifierName The name of the Network Verifier resource.
     * @param analysisIntentName The name of the Analysis Intent resource.
     * @param analysisRunName The name of the Analysis Run resource.
     * @param body The Analysis Run resource object to create/update.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of instance of analysis result performed given a analysis intent and
     *     configuration snapshot.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<AnalysisRunInner>, AnalysisRunInner> beginCreate(
        String resourceGroupName,
        String networkVerifierName,
        String analysisIntentName,
        String analysisRunName,
        AnalysisRunInner body,
        Context context) {
        return beginCreateAsync(
                resourceGroupName, networkVerifierName, analysisIntentName, analysisRunName, body, context)
            .getSyncPoller();
    }

    /**
     * Creates the specific Analysis Run resource asynchronously.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkVerifierName The name of the Network Verifier resource.
     * @param analysisIntentName The name of the Analysis Intent resource.
     * @param analysisRunName The name of the Analysis Run resource.
     * @param body The Analysis Run resource object to create/update.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return instance of analysis result performed given a analysis intent and configuration snapshot on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<AnalysisRunInner> createAsync(
        String resourceGroupName,
        String networkVerifierName,
        String analysisIntentName,
        String analysisRunName,
        AnalysisRunInner body) {
        return beginCreateAsync(resourceGroupName, networkVerifierName, analysisIntentName, analysisRunName, body)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates the specific Analysis Run resource asynchronously.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkVerifierName The name of the Network Verifier resource.
     * @param analysisIntentName The name of the Analysis Intent resource.
     * @param analysisRunName The name of the Analysis Run resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return instance of analysis result performed given a analysis intent and configuration snapshot on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<AnalysisRunInner> createAsync(
        String resourceGroupName, String networkVerifierName, String analysisIntentName, String analysisRunName) {
        final AnalysisRunInner body = null;
        return beginCreateAsync(resourceGroupName, networkVerifierName, analysisIntentName, analysisRunName, body)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates the specific Analysis Run resource asynchronously.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkVerifierName The name of the Network Verifier resource.
     * @param analysisIntentName The name of the Analysis Intent resource.
     * @param analysisRunName The name of the Analysis Run resource.
     * @param body The Analysis Run resource object to create/update.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return instance of analysis result performed given a analysis intent and configuration snapshot on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<AnalysisRunInner> createAsync(
        String resourceGroupName,
        String networkVerifierName,
        String analysisIntentName,
        String analysisRunName,
        AnalysisRunInner body,
        Context context) {
        return beginCreateAsync(
                resourceGroupName, networkVerifierName, analysisIntentName, analysisRunName, body, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates the specific Analysis Run resource asynchronously.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkVerifierName The name of the Network Verifier resource.
     * @param analysisIntentName The name of the Analysis Intent resource.
     * @param analysisRunName The name of the Analysis Run resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return instance of analysis result performed given a analysis intent and configuration snapshot.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AnalysisRunInner create(
        String resourceGroupName, String networkVerifierName, String analysisIntentName, String analysisRunName) {
        final AnalysisRunInner body = null;
        return createAsync(resourceGroupName, networkVerifierName, analysisIntentName, analysisRunName, body).block();
    }

    /**
     * Creates the specific Analysis Run resource asynchronously.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkVerifierName The name of the Network Verifier resource.
     * @param analysisIntentName The name of the Analysis Intent resource.
     * @param analysisRunName The name of the Analysis Run resource.
     * @param body The Analysis Run resource object to create/update.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return instance of analysis result performed given a analysis intent and configuration snapshot.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AnalysisRunInner create(
        String resourceGroupName,
        String networkVerifierName,
        String analysisIntentName,
        String analysisRunName,
        AnalysisRunInner body,
        Context context) {
        return createAsync(resourceGroupName, networkVerifierName, analysisIntentName, analysisRunName, body, context)
            .block();
    }

    /**
     * Deletes the specific Analysis Run resource asynchronously.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkVerifierName The name of the Network Verifier resource.
     * @param analysisIntentName The name of the Analysis Intent resource.
     * @param analysisRunName The name of the Analysis Run resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(
        String resourceGroupName, String networkVerifierName, String analysisIntentName, String analysisRunName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (networkVerifierName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter networkVerifierName is required and cannot be null."));
        }
        if (analysisIntentName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter analysisIntentName is required and cannot be null."));
        }
        if (analysisRunName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter analysisRunName is required and cannot be null."));
        }
        final String apiVersion = "2022-12-01-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .delete(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            networkVerifierName,
                            analysisIntentName,
                            analysisRunName,
                            apiVersion,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Deletes the specific Analysis Run resource asynchronously.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkVerifierName The name of the Network Verifier resource.
     * @param analysisIntentName The name of the Analysis Intent resource.
     * @param analysisRunName The name of the Analysis Run resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(
        String resourceGroupName,
        String networkVerifierName,
        String analysisIntentName,
        String analysisRunName,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (networkVerifierName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter networkVerifierName is required and cannot be null."));
        }
        if (analysisIntentName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter analysisIntentName is required and cannot be null."));
        }
        if (analysisRunName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter analysisRunName is required and cannot be null."));
        }
        final String apiVersion = "2022-12-01-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .delete(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                networkVerifierName,
                analysisIntentName,
                analysisRunName,
                apiVersion,
                accept,
                context);
    }

    /**
     * Deletes the specific Analysis Run resource asynchronously.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkVerifierName The name of the Network Verifier resource.
     * @param analysisIntentName The name of the Analysis Intent resource.
     * @param analysisRunName The name of the Analysis Run resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(
        String resourceGroupName, String networkVerifierName, String analysisIntentName, String analysisRunName) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            deleteWithResponseAsync(resourceGroupName, networkVerifierName, analysisIntentName, analysisRunName);
        return this
            .client
            .<Void, Void>getLroResult(
                mono, this.client.getHttpPipeline(), Void.class, Void.class, this.client.getContext());
    }

    /**
     * Deletes the specific Analysis Run resource asynchronously.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkVerifierName The name of the Network Verifier resource.
     * @param analysisIntentName The name of the Analysis Intent resource.
     * @param analysisRunName The name of the Analysis Run resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(
        String resourceGroupName,
        String networkVerifierName,
        String analysisIntentName,
        String analysisRunName,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            deleteWithResponseAsync(
                resourceGroupName, networkVerifierName, analysisIntentName, analysisRunName, context);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, context);
    }

    /**
     * Deletes the specific Analysis Run resource asynchronously.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkVerifierName The name of the Network Verifier resource.
     * @param analysisIntentName The name of the Analysis Intent resource.
     * @param analysisRunName The name of the Analysis Run resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(
        String resourceGroupName, String networkVerifierName, String analysisIntentName, String analysisRunName) {
        return beginDeleteAsync(resourceGroupName, networkVerifierName, analysisIntentName, analysisRunName)
            .getSyncPoller();
    }

    /**
     * Deletes the specific Analysis Run resource asynchronously.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkVerifierName The name of the Network Verifier resource.
     * @param analysisIntentName The name of the Analysis Intent resource.
     * @param analysisRunName The name of the Analysis Run resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(
        String resourceGroupName,
        String networkVerifierName,
        String analysisIntentName,
        String analysisRunName,
        Context context) {
        return beginDeleteAsync(resourceGroupName, networkVerifierName, analysisIntentName, analysisRunName, context)
            .getSyncPoller();
    }

    /**
     * Deletes the specific Analysis Run resource asynchronously.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkVerifierName The name of the Network Verifier resource.
     * @param analysisIntentName The name of the Analysis Intent resource.
     * @param analysisRunName The name of the Analysis Run resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(
        String resourceGroupName, String networkVerifierName, String analysisIntentName, String analysisRunName) {
        return beginDeleteAsync(resourceGroupName, networkVerifierName, analysisIntentName, analysisRunName)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes the specific Analysis Run resource asynchronously.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkVerifierName The name of the Network Verifier resource.
     * @param analysisIntentName The name of the Analysis Intent resource.
     * @param analysisRunName The name of the Analysis Run resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(
        String resourceGroupName,
        String networkVerifierName,
        String analysisIntentName,
        String analysisRunName,
        Context context) {
        return beginDeleteAsync(resourceGroupName, networkVerifierName, analysisIntentName, analysisRunName, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes the specific Analysis Run resource asynchronously.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkVerifierName The name of the Network Verifier resource.
     * @param analysisIntentName The name of the Analysis Intent resource.
     * @param analysisRunName The name of the Analysis Run resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(
        String resourceGroupName, String networkVerifierName, String analysisIntentName, String analysisRunName) {
        deleteAsync(resourceGroupName, networkVerifierName, analysisIntentName, analysisRunName).block();
    }

    /**
     * Deletes the specific Analysis Run resource asynchronously.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkVerifierName The name of the Network Verifier resource.
     * @param analysisIntentName The name of the Analysis Intent resource.
     * @param analysisRunName The name of the Analysis Run resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(
        String resourceGroupName,
        String networkVerifierName,
        String analysisIntentName,
        String analysisRunName,
        Context context) {
        deleteAsync(resourceGroupName, networkVerifierName, analysisIntentName, analysisRunName, context).block();
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<AnalysisRunInner>> listNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<AnalysisRunInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<AnalysisRunInner>> listNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }
}
