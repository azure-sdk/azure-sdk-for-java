// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.network.generated.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.network.generated.fluent.models.FirewallPolicyDraftInner;

/** An instance of this class provides access to all the operations defined in FirewallPoliciesDraftsClient. */
public interface FirewallPoliciesDraftsClient {
    /**
     * Deploy the specified Firewall Policy draft to Azure Firewall Policy.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param firewallPolicyName The name of the Firewall Policy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of firewallPolicy Draft Object.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<FirewallPolicyDraftInner>, FirewallPolicyDraftInner> beginDeploy(
        String resourceGroupName, String firewallPolicyName);

    /**
     * Deploy the specified Firewall Policy draft to Azure Firewall Policy.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param firewallPolicyName The name of the Firewall Policy.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of firewallPolicy Draft Object.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<FirewallPolicyDraftInner>, FirewallPolicyDraftInner> beginDeploy(
        String resourceGroupName, String firewallPolicyName, Context context);

    /**
     * Deploy the specified Firewall Policy draft to Azure Firewall Policy.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param firewallPolicyName The name of the Firewall Policy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return firewallPolicy Draft Object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    FirewallPolicyDraftInner deploy(String resourceGroupName, String firewallPolicyName);

    /**
     * Deploy the specified Firewall Policy draft to Azure Firewall Policy.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param firewallPolicyName The name of the Firewall Policy.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return firewallPolicy Draft Object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    FirewallPolicyDraftInner deploy(String resourceGroupName, String firewallPolicyName, Context context);
}
