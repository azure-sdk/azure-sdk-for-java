// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.network.generated.models;

import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/**
 * Resource collection API of NspLoggingConfigurations.
 */
public interface NspLoggingConfigurations {
    /**
     * Gets the NSP logging configuration.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param networkSecurityPerimeterName The name of the network security perimeter.
     * @param loggingConfigurationName The name of the NSP logging configuration. Accepts 'instance' as name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the NSP logging configuration along with {@link Response}.
     */
    Response<NspLoggingConfiguration> getWithResponse(String resourceGroupName, String networkSecurityPerimeterName,
        String loggingConfigurationName, Context context);

    /**
     * Gets the NSP logging configuration.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param networkSecurityPerimeterName The name of the network security perimeter.
     * @param loggingConfigurationName The name of the NSP logging configuration. Accepts 'instance' as name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the NSP logging configuration.
     */
    NspLoggingConfiguration get(String resourceGroupName, String networkSecurityPerimeterName,
        String loggingConfigurationName);

    /**
     * Deletes an NSP Logging configuration.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param networkSecurityPerimeterName The name of the network security perimeter.
     * @param loggingConfigurationName The name of the NSP logging configuration. Accepts 'instance' as name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    Response<Void> deleteWithResponse(String resourceGroupName, String networkSecurityPerimeterName,
        String loggingConfigurationName, Context context);

    /**
     * Deletes an NSP Logging configuration.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param networkSecurityPerimeterName The name of the network security perimeter.
     * @param loggingConfigurationName The name of the NSP logging configuration. Accepts 'instance' as name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(String resourceGroupName, String networkSecurityPerimeterName, String loggingConfigurationName);

    /**
     * Gets the NSP logging configuration.
     * 
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the NSP logging configuration along with {@link Response}.
     */
    NspLoggingConfiguration getById(String id);

    /**
     * Gets the NSP logging configuration.
     * 
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the NSP logging configuration along with {@link Response}.
     */
    Response<NspLoggingConfiguration> getByIdWithResponse(String id, Context context);

    /**
     * Deletes an NSP Logging configuration.
     * 
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteById(String id);

    /**
     * Deletes an NSP Logging configuration.
     * 
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    Response<Void> deleteByIdWithResponse(String id, Context context);

    /**
     * Begins definition for a new NspLoggingConfiguration resource.
     * 
     * @param name resource name.
     * @return the first stage of the new NspLoggingConfiguration definition.
     */
    NspLoggingConfiguration.DefinitionStages.Blank define(String name);
}
