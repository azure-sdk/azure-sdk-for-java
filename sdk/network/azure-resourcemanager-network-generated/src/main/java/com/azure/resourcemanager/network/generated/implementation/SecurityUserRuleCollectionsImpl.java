// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.network.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.network.generated.fluent.SecurityUserRuleCollectionsClient;
import com.azure.resourcemanager.network.generated.fluent.models.SecurityUserRuleCollectionInner;
import com.azure.resourcemanager.network.generated.models.SecurityUserRuleCollection;
import com.azure.resourcemanager.network.generated.models.SecurityUserRuleCollections;

public final class SecurityUserRuleCollectionsImpl implements SecurityUserRuleCollections {
    private static final ClientLogger LOGGER = new ClientLogger(SecurityUserRuleCollectionsImpl.class);

    private final SecurityUserRuleCollectionsClient innerClient;

    private final com.azure.resourcemanager.network.generated.NetworkManager serviceManager;

    public SecurityUserRuleCollectionsImpl(SecurityUserRuleCollectionsClient innerClient,
        com.azure.resourcemanager.network.generated.NetworkManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<SecurityUserRuleCollection> list(String resourceGroupName, String networkManagerName,
        String configurationName) {
        PagedIterable<SecurityUserRuleCollectionInner> inner
            = this.serviceClient().list(resourceGroupName, networkManagerName, configurationName);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new SecurityUserRuleCollectionImpl(inner1, this.manager()));
    }

    public PagedIterable<SecurityUserRuleCollection> list(String resourceGroupName, String networkManagerName,
        String configurationName, Integer top, String skipToken, Context context) {
        PagedIterable<SecurityUserRuleCollectionInner> inner = this.serviceClient()
            .list(resourceGroupName, networkManagerName, configurationName, top, skipToken, context);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new SecurityUserRuleCollectionImpl(inner1, this.manager()));
    }

    public Response<SecurityUserRuleCollection> getWithResponse(String resourceGroupName, String networkManagerName,
        String configurationName, String ruleCollectionName, Context context) {
        Response<SecurityUserRuleCollectionInner> inner = this.serviceClient()
            .getWithResponse(resourceGroupName, networkManagerName, configurationName, ruleCollectionName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new SecurityUserRuleCollectionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SecurityUserRuleCollection get(String resourceGroupName, String networkManagerName, String configurationName,
        String ruleCollectionName) {
        SecurityUserRuleCollectionInner inner
            = this.serviceClient().get(resourceGroupName, networkManagerName, configurationName, ruleCollectionName);
        if (inner != null) {
            return new SecurityUserRuleCollectionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String networkManagerName, String configurationName,
        String ruleCollectionName) {
        this.serviceClient().delete(resourceGroupName, networkManagerName, configurationName, ruleCollectionName);
    }

    public void delete(String resourceGroupName, String networkManagerName, String configurationName,
        String ruleCollectionName, Boolean force, Context context) {
        this.serviceClient()
            .delete(resourceGroupName, networkManagerName, configurationName, ruleCollectionName, force, context);
    }

    public SecurityUserRuleCollection getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String networkManagerName = ResourceManagerUtils.getValueFromIdByName(id, "networkManagers");
        if (networkManagerName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'networkManagers'.", id)));
        }
        String configurationName = ResourceManagerUtils.getValueFromIdByName(id, "securityUserConfigurations");
        if (configurationName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'securityUserConfigurations'.", id)));
        }
        String ruleCollectionName = ResourceManagerUtils.getValueFromIdByName(id, "ruleCollections");
        if (ruleCollectionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'ruleCollections'.", id)));
        }
        return this
            .getWithResponse(resourceGroupName, networkManagerName, configurationName, ruleCollectionName, Context.NONE)
            .getValue();
    }

    public Response<SecurityUserRuleCollection> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String networkManagerName = ResourceManagerUtils.getValueFromIdByName(id, "networkManagers");
        if (networkManagerName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'networkManagers'.", id)));
        }
        String configurationName = ResourceManagerUtils.getValueFromIdByName(id, "securityUserConfigurations");
        if (configurationName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'securityUserConfigurations'.", id)));
        }
        String ruleCollectionName = ResourceManagerUtils.getValueFromIdByName(id, "ruleCollections");
        if (ruleCollectionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'ruleCollections'.", id)));
        }
        return this.getWithResponse(resourceGroupName, networkManagerName, configurationName, ruleCollectionName,
            context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String networkManagerName = ResourceManagerUtils.getValueFromIdByName(id, "networkManagers");
        if (networkManagerName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'networkManagers'.", id)));
        }
        String configurationName = ResourceManagerUtils.getValueFromIdByName(id, "securityUserConfigurations");
        if (configurationName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'securityUserConfigurations'.", id)));
        }
        String ruleCollectionName = ResourceManagerUtils.getValueFromIdByName(id, "ruleCollections");
        if (ruleCollectionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'ruleCollections'.", id)));
        }
        Boolean localForce = null;
        this.delete(resourceGroupName, networkManagerName, configurationName, ruleCollectionName, localForce,
            Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Boolean force, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String networkManagerName = ResourceManagerUtils.getValueFromIdByName(id, "networkManagers");
        if (networkManagerName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'networkManagers'.", id)));
        }
        String configurationName = ResourceManagerUtils.getValueFromIdByName(id, "securityUserConfigurations");
        if (configurationName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'securityUserConfigurations'.", id)));
        }
        String ruleCollectionName = ResourceManagerUtils.getValueFromIdByName(id, "ruleCollections");
        if (ruleCollectionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'ruleCollections'.", id)));
        }
        this.delete(resourceGroupName, networkManagerName, configurationName, ruleCollectionName, force, context);
    }

    private SecurityUserRuleCollectionsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.network.generated.NetworkManager manager() {
        return this.serviceManager;
    }

    public SecurityUserRuleCollectionImpl define(String name) {
        return new SecurityUserRuleCollectionImpl(name, this.manager());
    }
}
