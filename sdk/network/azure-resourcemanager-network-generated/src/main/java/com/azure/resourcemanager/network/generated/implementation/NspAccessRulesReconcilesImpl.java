// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.network.generated.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.network.generated.fluent.NspAccessRulesReconcilesClient;
import com.azure.resourcemanager.network.generated.models.NspAccessRulesReconciles;

public final class NspAccessRulesReconcilesImpl implements NspAccessRulesReconciles {
    private static final ClientLogger LOGGER = new ClientLogger(NspAccessRulesReconcilesImpl.class);

    private final NspAccessRulesReconcilesClient innerClient;

    private final com.azure.resourcemanager.network.generated.NetworkManager serviceManager;

    public NspAccessRulesReconcilesImpl(NspAccessRulesReconcilesClient innerClient,
        com.azure.resourcemanager.network.generated.NetworkManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<Object> postWithResponse(String resourceGroupName, String networkSecurityPerimeterName,
        String profileName, String accessRuleName, Object parameters, Context context) {
        return this.serviceClient()
            .postWithResponse(resourceGroupName, networkSecurityPerimeterName, profileName, accessRuleName, parameters,
                context);
    }

    public Object post(String resourceGroupName, String networkSecurityPerimeterName, String profileName,
        String accessRuleName, Object parameters) {
        return this.serviceClient()
            .post(resourceGroupName, networkSecurityPerimeterName, profileName, accessRuleName, parameters);
    }

    private NspAccessRulesReconcilesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.network.generated.NetworkManager manager() {
        return this.serviceManager;
    }
}
