// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.network.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.network.generated.fluent.NetworkSecurityPerimeterAccessRulesClient;
import com.azure.resourcemanager.network.generated.fluent.models.NspAccessRuleInner;
import com.azure.resourcemanager.network.generated.models.NetworkSecurityPerimeterAccessRules;
import com.azure.resourcemanager.network.generated.models.NspAccessRule;

public final class NetworkSecurityPerimeterAccessRulesImpl implements NetworkSecurityPerimeterAccessRules {
    private static final ClientLogger LOGGER = new ClientLogger(NetworkSecurityPerimeterAccessRulesImpl.class);

    private final NetworkSecurityPerimeterAccessRulesClient innerClient;

    private final com.azure.resourcemanager.network.generated.NetworkManager serviceManager;

    public NetworkSecurityPerimeterAccessRulesImpl(NetworkSecurityPerimeterAccessRulesClient innerClient,
        com.azure.resourcemanager.network.generated.NetworkManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<NspAccessRule> getWithResponse(String resourceGroupName, String networkSecurityPerimeterName,
        String profileName, String accessRuleName, Context context) {
        Response<NspAccessRuleInner> inner = this.serviceClient()
            .getWithResponse(resourceGroupName, networkSecurityPerimeterName, profileName, accessRuleName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new NspAccessRuleImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public NspAccessRule get(String resourceGroupName, String networkSecurityPerimeterName, String profileName,
        String accessRuleName) {
        NspAccessRuleInner inner
            = this.serviceClient().get(resourceGroupName, networkSecurityPerimeterName, profileName, accessRuleName);
        if (inner != null) {
            return new NspAccessRuleImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteWithResponse(String resourceGroupName, String networkSecurityPerimeterName,
        String profileName, String accessRuleName, Context context) {
        return this.serviceClient()
            .deleteWithResponse(resourceGroupName, networkSecurityPerimeterName, profileName, accessRuleName, context);
    }

    public void delete(String resourceGroupName, String networkSecurityPerimeterName, String profileName,
        String accessRuleName) {
        this.serviceClient().delete(resourceGroupName, networkSecurityPerimeterName, profileName, accessRuleName);
    }

    public PagedIterable<NspAccessRule> list(String resourceGroupName, String networkSecurityPerimeterName,
        String profileName) {
        PagedIterable<NspAccessRuleInner> inner
            = this.serviceClient().list(resourceGroupName, networkSecurityPerimeterName, profileName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new NspAccessRuleImpl(inner1, this.manager()));
    }

    public PagedIterable<NspAccessRule> list(String resourceGroupName, String networkSecurityPerimeterName,
        String profileName, Integer top, String skipToken, Context context) {
        PagedIterable<NspAccessRuleInner> inner = this.serviceClient()
            .list(resourceGroupName, networkSecurityPerimeterName, profileName, top, skipToken, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new NspAccessRuleImpl(inner1, this.manager()));
    }

    public Response<Object> reconcileWithResponse(String resourceGroupName, String networkSecurityPerimeterName,
        String profileName, String accessRuleName, Object parameters, Context context) {
        return this.serviceClient()
            .reconcileWithResponse(resourceGroupName, networkSecurityPerimeterName, profileName, accessRuleName,
                parameters, context);
    }

    public Object reconcile(String resourceGroupName, String networkSecurityPerimeterName, String profileName,
        String accessRuleName, Object parameters) {
        return this.serviceClient()
            .reconcile(resourceGroupName, networkSecurityPerimeterName, profileName, accessRuleName, parameters);
    }

    public NspAccessRule getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String networkSecurityPerimeterName
            = ResourceManagerUtils.getValueFromIdByName(id, "networkSecurityPerimeters");
        if (networkSecurityPerimeterName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'networkSecurityPerimeters'.", id)));
        }
        String profileName = ResourceManagerUtils.getValueFromIdByName(id, "profiles");
        if (profileName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'profiles'.", id)));
        }
        String accessRuleName = ResourceManagerUtils.getValueFromIdByName(id, "accessRules");
        if (accessRuleName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'accessRules'.", id)));
        }
        return this
            .getWithResponse(resourceGroupName, networkSecurityPerimeterName, profileName, accessRuleName, Context.NONE)
            .getValue();
    }

    public Response<NspAccessRule> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String networkSecurityPerimeterName
            = ResourceManagerUtils.getValueFromIdByName(id, "networkSecurityPerimeters");
        if (networkSecurityPerimeterName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'networkSecurityPerimeters'.", id)));
        }
        String profileName = ResourceManagerUtils.getValueFromIdByName(id, "profiles");
        if (profileName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'profiles'.", id)));
        }
        String accessRuleName = ResourceManagerUtils.getValueFromIdByName(id, "accessRules");
        if (accessRuleName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'accessRules'.", id)));
        }
        return this.getWithResponse(resourceGroupName, networkSecurityPerimeterName, profileName, accessRuleName,
            context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String networkSecurityPerimeterName
            = ResourceManagerUtils.getValueFromIdByName(id, "networkSecurityPerimeters");
        if (networkSecurityPerimeterName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'networkSecurityPerimeters'.", id)));
        }
        String profileName = ResourceManagerUtils.getValueFromIdByName(id, "profiles");
        if (profileName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'profiles'.", id)));
        }
        String accessRuleName = ResourceManagerUtils.getValueFromIdByName(id, "accessRules");
        if (accessRuleName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'accessRules'.", id)));
        }
        this.deleteWithResponse(resourceGroupName, networkSecurityPerimeterName, profileName, accessRuleName,
            Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String networkSecurityPerimeterName
            = ResourceManagerUtils.getValueFromIdByName(id, "networkSecurityPerimeters");
        if (networkSecurityPerimeterName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'networkSecurityPerimeters'.", id)));
        }
        String profileName = ResourceManagerUtils.getValueFromIdByName(id, "profiles");
        if (profileName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'profiles'.", id)));
        }
        String accessRuleName = ResourceManagerUtils.getValueFromIdByName(id, "accessRules");
        if (accessRuleName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'accessRules'.", id)));
        }
        return this.deleteWithResponse(resourceGroupName, networkSecurityPerimeterName, profileName, accessRuleName,
            context);
    }

    private NetworkSecurityPerimeterAccessRulesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.network.generated.NetworkManager manager() {
        return this.serviceManager;
    }

    public NspAccessRuleImpl define(String name) {
        return new NspAccessRuleImpl(name, this.manager());
    }
}
