// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.network.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.network.generated.models.ConnectionStatus;
import com.azure.resourcemanager.network.generated.models.ConnectivityHop;
import com.azure.resourcemanager.network.generated.models.DestinationPortStatus;
import com.azure.resourcemanager.network.generated.models.SourcePortStatus;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Information on the connectivity status. */
@Fluent
public final class ConnectivityInformationInner {
    /*
     * List of hops between the source and the destination.
     */
    @JsonProperty(value = "hops", access = JsonProperty.Access.WRITE_ONLY)
    private List<ConnectivityHop> hops;

    /*
     * The connection status.
     */
    @JsonProperty(value = "connectionStatus", access = JsonProperty.Access.WRITE_ONLY)
    private ConnectionStatus connectionStatus;

    /*
     * Average latency in milliseconds.
     */
    @JsonProperty(value = "avgLatencyInMs", access = JsonProperty.Access.WRITE_ONLY)
    private Integer avgLatencyInMs;

    /*
     * Minimum latency in milliseconds.
     */
    @JsonProperty(value = "minLatencyInMs", access = JsonProperty.Access.WRITE_ONLY)
    private Integer minLatencyInMs;

    /*
     * Maximum latency in milliseconds.
     */
    @JsonProperty(value = "maxLatencyInMs", access = JsonProperty.Access.WRITE_ONLY)
    private Integer maxLatencyInMs;

    /*
     * Total number of probes sent.
     */
    @JsonProperty(value = "probesSent", access = JsonProperty.Access.WRITE_ONLY)
    private Integer probesSent;

    /*
     * Number of failed probes.
     */
    @JsonProperty(value = "probesFailed", access = JsonProperty.Access.WRITE_ONLY)
    private Integer probesFailed;

    /*
     * The NextHop Details from the source.
     */
    @JsonProperty(value = "nextHopAnalysis")
    private NextHopResultInner nextHopAnalysis;

    /*
     * SecurityAnalysis results at the source endpoint.
     */
    @JsonProperty(value = "sourceSecurityRuleAnalysis")
    private NetworkConfigurationDiagnosticResponseInner sourceSecurityRuleAnalysis;

    /*
     * SecurityAnalysis results at the destination endpoint.
     */
    @JsonProperty(value = "destinationSecurityRuleAnalysis")
    private NetworkConfigurationDiagnosticResponseInner destinationSecurityRuleAnalysis;

    /*
     * Port Status at the Source.
     */
    @JsonProperty(value = "sourcePortStatus")
    private SourcePortStatus sourcePortStatus;

    /*
     * Port Status at the Destination.
     */
    @JsonProperty(value = "destinationPortStatus")
    private DestinationPortStatus destinationPortStatus;

    /** Creates an instance of ConnectivityInformationInner class. */
    public ConnectivityInformationInner() {
    }

    /**
     * Get the hops property: List of hops between the source and the destination.
     *
     * @return the hops value.
     */
    public List<ConnectivityHop> hops() {
        return this.hops;
    }

    /**
     * Get the connectionStatus property: The connection status.
     *
     * @return the connectionStatus value.
     */
    public ConnectionStatus connectionStatus() {
        return this.connectionStatus;
    }

    /**
     * Get the avgLatencyInMs property: Average latency in milliseconds.
     *
     * @return the avgLatencyInMs value.
     */
    public Integer avgLatencyInMs() {
        return this.avgLatencyInMs;
    }

    /**
     * Get the minLatencyInMs property: Minimum latency in milliseconds.
     *
     * @return the minLatencyInMs value.
     */
    public Integer minLatencyInMs() {
        return this.minLatencyInMs;
    }

    /**
     * Get the maxLatencyInMs property: Maximum latency in milliseconds.
     *
     * @return the maxLatencyInMs value.
     */
    public Integer maxLatencyInMs() {
        return this.maxLatencyInMs;
    }

    /**
     * Get the probesSent property: Total number of probes sent.
     *
     * @return the probesSent value.
     */
    public Integer probesSent() {
        return this.probesSent;
    }

    /**
     * Get the probesFailed property: Number of failed probes.
     *
     * @return the probesFailed value.
     */
    public Integer probesFailed() {
        return this.probesFailed;
    }

    /**
     * Get the nextHopAnalysis property: The NextHop Details from the source.
     *
     * @return the nextHopAnalysis value.
     */
    public NextHopResultInner nextHopAnalysis() {
        return this.nextHopAnalysis;
    }

    /**
     * Set the nextHopAnalysis property: The NextHop Details from the source.
     *
     * @param nextHopAnalysis the nextHopAnalysis value to set.
     * @return the ConnectivityInformationInner object itself.
     */
    public ConnectivityInformationInner withNextHopAnalysis(NextHopResultInner nextHopAnalysis) {
        this.nextHopAnalysis = nextHopAnalysis;
        return this;
    }

    /**
     * Get the sourceSecurityRuleAnalysis property: SecurityAnalysis results at the source endpoint.
     *
     * @return the sourceSecurityRuleAnalysis value.
     */
    public NetworkConfigurationDiagnosticResponseInner sourceSecurityRuleAnalysis() {
        return this.sourceSecurityRuleAnalysis;
    }

    /**
     * Set the sourceSecurityRuleAnalysis property: SecurityAnalysis results at the source endpoint.
     *
     * @param sourceSecurityRuleAnalysis the sourceSecurityRuleAnalysis value to set.
     * @return the ConnectivityInformationInner object itself.
     */
    public ConnectivityInformationInner withSourceSecurityRuleAnalysis(
        NetworkConfigurationDiagnosticResponseInner sourceSecurityRuleAnalysis) {
        this.sourceSecurityRuleAnalysis = sourceSecurityRuleAnalysis;
        return this;
    }

    /**
     * Get the destinationSecurityRuleAnalysis property: SecurityAnalysis results at the destination endpoint.
     *
     * @return the destinationSecurityRuleAnalysis value.
     */
    public NetworkConfigurationDiagnosticResponseInner destinationSecurityRuleAnalysis() {
        return this.destinationSecurityRuleAnalysis;
    }

    /**
     * Set the destinationSecurityRuleAnalysis property: SecurityAnalysis results at the destination endpoint.
     *
     * @param destinationSecurityRuleAnalysis the destinationSecurityRuleAnalysis value to set.
     * @return the ConnectivityInformationInner object itself.
     */
    public ConnectivityInformationInner withDestinationSecurityRuleAnalysis(
        NetworkConfigurationDiagnosticResponseInner destinationSecurityRuleAnalysis) {
        this.destinationSecurityRuleAnalysis = destinationSecurityRuleAnalysis;
        return this;
    }

    /**
     * Get the sourcePortStatus property: Port Status at the Source.
     *
     * @return the sourcePortStatus value.
     */
    public SourcePortStatus sourcePortStatus() {
        return this.sourcePortStatus;
    }

    /**
     * Set the sourcePortStatus property: Port Status at the Source.
     *
     * @param sourcePortStatus the sourcePortStatus value to set.
     * @return the ConnectivityInformationInner object itself.
     */
    public ConnectivityInformationInner withSourcePortStatus(SourcePortStatus sourcePortStatus) {
        this.sourcePortStatus = sourcePortStatus;
        return this;
    }

    /**
     * Get the destinationPortStatus property: Port Status at the Destination.
     *
     * @return the destinationPortStatus value.
     */
    public DestinationPortStatus destinationPortStatus() {
        return this.destinationPortStatus;
    }

    /**
     * Set the destinationPortStatus property: Port Status at the Destination.
     *
     * @param destinationPortStatus the destinationPortStatus value to set.
     * @return the ConnectivityInformationInner object itself.
     */
    public ConnectivityInformationInner withDestinationPortStatus(DestinationPortStatus destinationPortStatus) {
        this.destinationPortStatus = destinationPortStatus;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (hops() != null) {
            hops().forEach(e -> e.validate());
        }
        if (nextHopAnalysis() != null) {
            nextHopAnalysis().validate();
        }
        if (sourceSecurityRuleAnalysis() != null) {
            sourceSecurityRuleAnalysis().validate();
        }
        if (destinationSecurityRuleAnalysis() != null) {
            destinationSecurityRuleAnalysis().validate();
        }
    }
}
