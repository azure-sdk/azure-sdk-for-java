// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.network.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Response for get VpnLink connection shared key value service call.
 */
@Fluent
public final class SharedKeyProperties {
    /*
     * The VpnLink connection shared key value.
     */
    @JsonProperty(value = "KeyValue")
    private String keyValue;

    /*
     * The VpnLink connection reset shared key length, should between 1 and 128.
     */
    @JsonProperty(value = "keyLength")
    private Integer keyLength;

    /**
     * Creates an instance of SharedKeyProperties class.
     */
    public SharedKeyProperties() {
    }

    /**
     * Get the keyValue property: The VpnLink connection shared key value.
     * 
     * @return the keyValue value.
     */
    public String keyValue() {
        return this.keyValue;
    }

    /**
     * Set the keyValue property: The VpnLink connection shared key value.
     * 
     * @param keyValue the keyValue value to set.
     * @return the SharedKeyProperties object itself.
     */
    public SharedKeyProperties withKeyValue(String keyValue) {
        this.keyValue = keyValue;
        return this;
    }

    /**
     * Get the keyLength property: The VpnLink connection reset shared key length, should between 1 and 128.
     * 
     * @return the keyLength value.
     */
    public Integer keyLength() {
        return this.keyLength;
    }

    /**
     * Set the keyLength property: The VpnLink connection reset shared key length, should between 1 and 128.
     * 
     * @param keyLength the keyLength value to set.
     * @return the SharedKeyProperties object itself.
     */
    public SharedKeyProperties withKeyLength(Integer keyLength) {
        this.keyLength = keyLength;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
