// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.network.generated.generated;

import com.azure.resourcemanager.network.generated.models.FlowLogFormatParameters;
import com.azure.resourcemanager.network.generated.models.FlowLogFormatType;
import com.azure.resourcemanager.network.generated.models.ManagedServiceIdentity;
import com.azure.resourcemanager.network.generated.models.ManagedServiceIdentityUserAssignedIdentities;
import com.azure.resourcemanager.network.generated.models.ResourceIdentityType;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for FlowLogs CreateOrUpdate.
 */
public final class FlowLogsCreateOrUpdateSamples {
    /*
     * x-ms-original-file: specification/network/resource-manager/Microsoft.Network/stable/2023-11-01/examples/NetworkWatcherFlowLogCreate.json
     */
    /**
     * Sample code: Create or update flow log.
     * 
     * @param manager Entry point to NetworkManager.
     */
    public static void createOrUpdateFlowLog(com.azure.resourcemanager.network.generated.NetworkManager manager) {
        manager.flowLogs()
            .define("fl")
            .withRegion("centraluseuap")
            .withExistingNetworkWatcher("rg1", "nw1")
            .withIdentity(new ManagedServiceIdentity().withType(ResourceIdentityType.USER_ASSIGNED)
                .withUserAssignedIdentities(mapOf(
                    "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/id1",
                    new ManagedServiceIdentityUserAssignedIdentities())))
            .withTargetResourceId(
                "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/desmondcentral-nsg")
            .withStorageId(
                "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Storage/storageAccounts/nwtest1mgvbfmqsigdxe")
            .withEnabled(true)
            .withFormat(new FlowLogFormatParameters().withType(FlowLogFormatType.JSON).withVersion(1))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
