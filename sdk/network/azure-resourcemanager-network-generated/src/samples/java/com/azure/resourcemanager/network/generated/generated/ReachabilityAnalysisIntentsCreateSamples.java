// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.network.generated.generated;

import com.azure.resourcemanager.network.generated.models.IpTraffic;
import com.azure.resourcemanager.network.generated.models.NetworkProtocol;
import com.azure.resourcemanager.network.generated.models.ReachabilityAnalysisIntentProperties;
import java.util.Arrays;

/**
 * Samples for ReachabilityAnalysisIntents Create.
 */
public final class ReachabilityAnalysisIntentsCreateSamples {
    /*
     * x-ms-original-file:
     * specification/network/resource-manager/Microsoft.Network/stable/2024-07-01/examples/ReachabilityAnalysisIntentPut
     * .json
     */
    /**
     * Sample code: ReachabilityAnalysisIntentCreate.
     * 
     * @param manager Entry point to NetworkManager.
     */
    public static void
        reachabilityAnalysisIntentCreate(com.azure.resourcemanager.network.generated.NetworkManager manager) {
        manager.reachabilityAnalysisIntents()
            .define("testAnalysisIntentName")
            .withExistingVerifierWorkspace("rg1", "testNetworkManager", "testWorkspace")
            .withProperties(new ReachabilityAnalysisIntentProperties()
                .withDescription("A sample reachability analysis intent")
                .withSourceResourceId(
                    "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Compute/virtualMachines/testVmSrc")
                .withDestinationResourceId(
                    "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Compute/virtualMachines/testVmDest")
                .withIpTraffic(new IpTraffic().withSourceIps(Arrays.asList("10.4.0.0"))
                    .withDestinationIps(Arrays.asList("10.4.0.1"))
                    .withSourcePorts(Arrays.asList("0"))
                    .withDestinationPorts(Arrays.asList("0"))
                    .withProtocols(Arrays.asList(NetworkProtocol.ANY))))
            .create();
    }
}
