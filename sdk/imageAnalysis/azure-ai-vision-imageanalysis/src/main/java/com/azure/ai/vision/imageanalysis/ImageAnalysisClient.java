// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.ai.vision.imageanalysis;

import com.azure.ai.vision.imageanalysis.implementation.ImageAnalysisClientImpl;
import com.azure.ai.vision.imageanalysis.models.ImageAnalysisResult;
import com.azure.ai.vision.imageanalysis.models.ImageUrl;
import com.azure.ai.vision.imageanalysis.models.VisualFeatures;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.serializer.CollectionFormat;
import com.azure.core.util.serializer.JacksonAdapter;
import java.util.List;

/** Initializes a new instance of the synchronous ImageAnalysisClient type. */
@ServiceClient(builder = ImageAnalysisClientBuilder.class)
public final class ImageAnalysisClient {
    @Generated private final ImageAnalysisClientImpl serviceClient;

    /**
     * Initializes an instance of ImageAnalysisClient class.
     *
     * @param serviceClient the service client implementation.
     */
    @Generated
    ImageAnalysisClient(ImageAnalysisClientImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Performs a single Image Analysis operation.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>features</td><td>List&lt;String&gt;</td><td>No</td><td>A string indicating what visual feature types to return. Multiple values should be comma-separated. Valid visual feature types include: Tags, Caption, DenseCaptions, Objects, Read, SmartCrops, People. If VisualFeatures is not specified, then Categories, Tags, and Description are included in the response by default. In the form of "," separated string.</td></tr>
     *     <tr><td>model-name</td><td>String</td><td>No</td><td>The name of the custom trained model. This parameter needs to be specified if the parameter "features" is not specified.</td></tr>
     *     <tr><td>language</td><td>String</td><td>No</td><td>The desired language for output generation. If this parameter is not specified, the default value is "en". See https://aka.ms/cv-languages for a list of supported languages.</td></tr>
     *     <tr><td>smartcrops-aspect-ratios</td><td>List&lt;Double&gt;</td><td>No</td><td>A list of aspect ratios to use for smartCrops feature. Aspect ratios are calculated by dividing the target crop width by the height. Supported values are between 0.75 and 1.8 (inclusive). Multiple values should be comma-separated. If this parameter is not specified, the service will return one crop suggestion with an aspect ratio it sees fit between 0.5 and 2.0 (inclusive). In the form of "," separated string.</td></tr>
     *     <tr><td>gender-neutral-caption</td><td>Boolean</td><td>No</td><td>Boolean flag for enabling gender-neutral captioning for caption and denseCaptions features. If this parameter is not specified, the default value is "false".</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * BinaryData
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     captionResult (Optional): {
     *         confidence: double (Required)
     *         text: String (Required)
     *     }
     *     customModelResult (Optional): {
     *         objectsResult (Required): {
     *             values (Required): [
     *                  (Required){
     *                     boundingBox (Required): {
     *                         x: long (Required)
     *                         y: long (Required)
     *                         w: long (Required)
     *                         h: long (Required)
     *                     }
     *                     tags (Required): [
     *                          (Required){
     *                             confidence: double (Required)
     *                             name: String (Required)
     *                         }
     *                     ]
     *                 }
     *             ]
     *         }
     *         tagsResult (Required): {
     *             values (Required): [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *     }
     *     denseCaptionsResult (Optional): {
     *         values (Required): [
     *              (Required){
     *                 confidence: double (Required)
     *                 text: String (Required)
     *                 boundingBox (Required): (recursive schema, see boundingBox above)
     *             }
     *         ]
     *     }
     *     metadata (Required): {
     *         height: long (Required)
     *         width: long (Required)
     *     }
     *     modelVersion: String (Required)
     *     objectsResult (Optional): (recursive schema, see objectsResult above)
     *     peopleResult (Optional): {
     *         values (Required): [
     *              (Required){
     *                 boundingBox (Required): (recursive schema, see boundingBox above)
     *                 confidence: double (Required)
     *             }
     *         ]
     *     }
     *     readResult (Optional): {
     *         content: String (Required)
     *         pages (Required): [
     *              (Required){
     *                 angle: double (Required)
     *                 height: double (Required)
     *                 lines (Required): [
     *                      (Required){
     *                         boundingBox (Required): [
     *                             double (Required)
     *                         ]
     *                         content: String (Required)
     *                         spans (Required): [
     *                              (Required){
     *                                 length: long (Required)
     *                                 offset: long (Required)
     *                             }
     *                         ]
     *                     }
     *                 ]
     *                 pageNumber: long (Required)
     *                 spans (Required): [
     *                     (recursive schema, see above)
     *                 ]
     *                 width: double (Required)
     *                 words (Required): [
     *                      (Required){
     *                         boundingBox (Required): [
     *                             double (Required)
     *                         ]
     *                         confidence: double (Required)
     *                         content: String (Required)
     *                         span (Required): (recursive schema, see span above)
     *                     }
     *                 ]
     *             }
     *         ]
     *         stringIndexType: String (Required)
     *         styles (Required): [
     *              (Required){
     *                 confidence: double (Required)
     *                 isHandwritten: boolean (Required)
     *                 spans (Required): [
     *                     (recursive schema, see above)
     *                 ]
     *             }
     *         ]
     *     }
     *     smartCropsResult (Optional): {
     *         values (Required): [
     *              (Required){
     *                 aspectRatio: double (Required)
     *                 boundingBox (Required): (recursive schema, see boundingBox above)
     *             }
     *         ]
     *     }
     *     tagsResult (Optional): (recursive schema, see tagsResult above)
     * }
     * }</pre>
     *
     * @param imageContents The image to be analyzed.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return describe the combined results of different types of image analysis along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> analyzeStreamWithResponse(BinaryData imageContents, RequestOptions requestOptions) {
        return this.serviceClient.analyzeStreamWithResponse(imageContents, requestOptions);
    }

    /**
     * Performs a single Image Analysis operation.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>features</td><td>List&lt;String&gt;</td><td>No</td><td>A string indicating what visual feature types to return. Multiple values should be comma-separated. Valid visual feature types include: Categories, Tags, Description, Faces, ImageType, Color, Adult, Brands, Objects, and Celebrities. If VisualFeatures is not specified, then Categories, Tags, and Description are included in the response by default. In the form of "," separated string.</td></tr>
     *     <tr><td>model-name</td><td>String</td><td>No</td><td>The name of the custom trained model. This parameter needs to be specified if the parameter "features" is not specified.</td></tr>
     *     <tr><td>language</td><td>String</td><td>No</td><td>The desired language for output generation. If this parameter is not specified, the default value is "en". See https://aka.ms/cv-languages for a list of supported languages.</td></tr>
     *     <tr><td>smartcrops-aspect-ratios</td><td>List&lt;Double&gt;</td><td>No</td><td>A list of aspect ratios to use for smartCrops feature. Aspect ratios are calculated by dividing the target crop width by the height. Supported values are between 0.75 and 1.8 (inclusive). Multiple values should be comma-separated. If this parameter is not specified, the service will return one crop suggestion with an aspect ratio it sees fit between 0.5 and 2.0 (inclusive). In the form of "," separated string.</td></tr>
     *     <tr><td>gender-neutral-caption</td><td>Boolean</td><td>No</td><td>Boolean flag for enabling gender-neutral captioning for caption and denseCaptions features. If this parameter is not specified, the default value is "false".</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     url: String (Required)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     captionResult (Optional): {
     *         confidence: double (Required)
     *         text: String (Required)
     *     }
     *     customModelResult (Optional): {
     *         objectsResult (Required): {
     *             values (Required): [
     *                  (Required){
     *                     boundingBox (Required): {
     *                         x: long (Required)
     *                         y: long (Required)
     *                         w: long (Required)
     *                         h: long (Required)
     *                     }
     *                     tags (Required): [
     *                          (Required){
     *                             confidence: double (Required)
     *                             name: String (Required)
     *                         }
     *                     ]
     *                 }
     *             ]
     *         }
     *         tagsResult (Required): {
     *             values (Required): [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *     }
     *     denseCaptionsResult (Optional): {
     *         values (Required): [
     *              (Required){
     *                 confidence: double (Required)
     *                 text: String (Required)
     *                 boundingBox (Required): (recursive schema, see boundingBox above)
     *             }
     *         ]
     *     }
     *     metadata (Required): {
     *         height: long (Required)
     *         width: long (Required)
     *     }
     *     modelVersion: String (Required)
     *     objectsResult (Optional): (recursive schema, see objectsResult above)
     *     peopleResult (Optional): {
     *         values (Required): [
     *              (Required){
     *                 boundingBox (Required): (recursive schema, see boundingBox above)
     *                 confidence: double (Required)
     *             }
     *         ]
     *     }
     *     readResult (Optional): {
     *         content: String (Required)
     *         pages (Required): [
     *              (Required){
     *                 angle: double (Required)
     *                 height: double (Required)
     *                 lines (Required): [
     *                      (Required){
     *                         boundingBox (Required): [
     *                             double (Required)
     *                         ]
     *                         content: String (Required)
     *                         spans (Required): [
     *                              (Required){
     *                                 length: long (Required)
     *                                 offset: long (Required)
     *                             }
     *                         ]
     *                     }
     *                 ]
     *                 pageNumber: long (Required)
     *                 spans (Required): [
     *                     (recursive schema, see above)
     *                 ]
     *                 width: double (Required)
     *                 words (Required): [
     *                      (Required){
     *                         boundingBox (Required): [
     *                             double (Required)
     *                         ]
     *                         confidence: double (Required)
     *                         content: String (Required)
     *                         span (Required): (recursive schema, see span above)
     *                     }
     *                 ]
     *             }
     *         ]
     *         stringIndexType: String (Required)
     *         styles (Required): [
     *              (Required){
     *                 confidence: double (Required)
     *                 isHandwritten: boolean (Required)
     *                 spans (Required): [
     *                     (recursive schema, see above)
     *                 ]
     *             }
     *         ]
     *     }
     *     smartCropsResult (Optional): {
     *         values (Required): [
     *              (Required){
     *                 aspectRatio: double (Required)
     *                 boundingBox (Required): (recursive schema, see boundingBox above)
     *             }
     *         ]
     *     }
     *     tagsResult (Optional): (recursive schema, see tagsResult above)
     * }
     * }</pre>
     *
     * @param imageContents The image to be analyzed.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return describe the combined results of different types of image analysis along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> analyzeUrlWithResponse(BinaryData imageContents, RequestOptions requestOptions) {
        return this.serviceClient.analyzeUrlWithResponse(imageContents, requestOptions);
    }

    /**
     * Performs a single Image Analysis operation.
     *
     * @param imageContents The image to be analyzed.
     * @param visualFeatures A string indicating what visual feature types to return. Multiple values should be
     *     comma-separated. Valid visual feature types include: Tags, Caption, DenseCaptions, Objects, Read, SmartCrops,
     *     People. If VisualFeatures is not specified, then Categories, Tags, and Description are included in the
     *     response by default.
     * @param modelName The name of the custom trained model. This parameter needs to be specified if the parameter
     *     "features" is not specified.
     * @param language The desired language for output generation. If this parameter is not specified, the default value
     *     is "en". See https://aka.ms/cv-languages for a list of supported languages.
     * @param smartCropsAspectRatios A list of aspect ratios to use for smartCrops feature. Aspect ratios are calculated
     *     by dividing the target crop width by the height. Supported values are between 0.75 and 1.8 (inclusive).
     *     Multiple values should be comma-separated. If this parameter is not specified, the service will return one
     *     crop suggestion with an aspect ratio it sees fit between 0.5 and 2.0 (inclusive).
     * @param genderNeutralCaption Boolean flag for enabling gender-neutral captioning for caption and denseCaptions
     *     features. If this parameter is not specified, the default value is "false".
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describe the combined results of different types of image analysis.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ImageAnalysisResult analyzeStream(
            BinaryData imageContents,
            List<VisualFeatures> visualFeatures,
            String modelName,
            String language,
            List<Double> smartCropsAspectRatios,
            Boolean genderNeutralCaption) {
        // Generated convenience method for analyzeStreamWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (visualFeatures != null) {
            requestOptions.addQueryParam(
                    "features",
                    JacksonAdapter.createDefaultSerializerAdapter()
                            .serializeIterable(visualFeatures, CollectionFormat.CSV),
                    false);
        }
        if (modelName != null) {
            requestOptions.addQueryParam("model-name", modelName, false);
        }
        if (language != null) {
            requestOptions.addQueryParam("language", language, false);
        }
        if (smartCropsAspectRatios != null) {
            requestOptions.addQueryParam(
                    "smartcrops-aspect-ratios",
                    JacksonAdapter.createDefaultSerializerAdapter()
                            .serializeIterable(smartCropsAspectRatios, CollectionFormat.CSV),
                    false);
        }
        if (genderNeutralCaption != null) {
            requestOptions.addQueryParam("gender-neutral-caption", String.valueOf(genderNeutralCaption), false);
        }
        return analyzeStreamWithResponse(imageContents, requestOptions).getValue().toObject(ImageAnalysisResult.class);
    }

    /**
     * Performs a single Image Analysis operation.
     *
     * @param imageContents The image to be analyzed.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describe the combined results of different types of image analysis.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ImageAnalysisResult analyzeStream(BinaryData imageContents) {
        // Generated convenience method for analyzeStreamWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return analyzeStreamWithResponse(imageContents, requestOptions).getValue().toObject(ImageAnalysisResult.class);
    }

    /**
     * Performs a single Image Analysis operation.
     *
     * @param imageContents The image to be analyzed.
     * @param visualFeatures A string indicating what visual feature types to return. Multiple values should be
     *     comma-separated. Valid visual feature types include: Categories, Tags, Description, Faces, ImageType, Color,
     *     Adult, Brands, Objects, and Celebrities. If VisualFeatures is not specified, then Categories, Tags, and
     *     Description are included in the response by default.
     * @param modelName The name of the custom trained model. This parameter needs to be specified if the parameter
     *     "features" is not specified.
     * @param language The desired language for output generation. If this parameter is not specified, the default value
     *     is "en". See https://aka.ms/cv-languages for a list of supported languages.
     * @param smartCropsAspectRatios A list of aspect ratios to use for smartCrops feature. Aspect ratios are calculated
     *     by dividing the target crop width by the height. Supported values are between 0.75 and 1.8 (inclusive).
     *     Multiple values should be comma-separated. If this parameter is not specified, the service will return one
     *     crop suggestion with an aspect ratio it sees fit between 0.5 and 2.0 (inclusive).
     * @param genderNeutralCaption Boolean flag for enabling gender-neutral captioning for caption and denseCaptions
     *     features. If this parameter is not specified, the default value is "false".
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describe the combined results of different types of image analysis.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ImageAnalysisResult analyzeUrl(
            ImageUrl imageContents,
            List<VisualFeatures> visualFeatures,
            String modelName,
            String language,
            List<Double> smartCropsAspectRatios,
            Boolean genderNeutralCaption) {
        // Generated convenience method for analyzeUrlWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (visualFeatures != null) {
            requestOptions.addQueryParam(
                    "features",
                    JacksonAdapter.createDefaultSerializerAdapter()
                            .serializeIterable(visualFeatures, CollectionFormat.CSV),
                    false);
        }
        if (modelName != null) {
            requestOptions.addQueryParam("model-name", modelName, false);
        }
        if (language != null) {
            requestOptions.addQueryParam("language", language, false);
        }
        if (smartCropsAspectRatios != null) {
            requestOptions.addQueryParam(
                    "smartcrops-aspect-ratios",
                    JacksonAdapter.createDefaultSerializerAdapter()
                            .serializeIterable(smartCropsAspectRatios, CollectionFormat.CSV),
                    false);
        }
        if (genderNeutralCaption != null) {
            requestOptions.addQueryParam("gender-neutral-caption", String.valueOf(genderNeutralCaption), false);
        }
        return analyzeUrlWithResponse(BinaryData.fromObject(imageContents), requestOptions)
                .getValue()
                .toObject(ImageAnalysisResult.class);
    }

    /**
     * Performs a single Image Analysis operation.
     *
     * @param imageContents The image to be analyzed.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describe the combined results of different types of image analysis.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ImageAnalysisResult analyzeUrl(ImageUrl imageContents) {
        // Generated convenience method for analyzeUrlWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return analyzeUrlWithResponse(BinaryData.fromObject(imageContents), requestOptions)
                .getValue()
                .toObject(ImageAnalysisResult.class);
    }
}
