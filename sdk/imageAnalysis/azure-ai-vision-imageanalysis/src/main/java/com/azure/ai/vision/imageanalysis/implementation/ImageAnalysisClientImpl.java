// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.ai.vision.imageanalysis.implementation;

import com.azure.ai.vision.imageanalysis.ImageAnalysisServiceVersion;
import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.serializer.JacksonAdapter;
import com.azure.core.util.serializer.SerializerAdapter;
import reactor.core.publisher.Mono;

/** Initializes a new instance of the ImageAnalysisClient type. */
public final class ImageAnalysisClientImpl {
    /** The proxy service used to perform REST calls. */
    private final ImageAnalysisClientService service;

    /**
     * Supported Cognitive Services endpoints (protocol and hostname, for example:
     * https://&lt;resource-name&gt;.cognitiveservices.azure.com).
     */
    private final String endpoint;

    /**
     * Gets Supported Cognitive Services endpoints (protocol and hostname, for example:
     * https://&lt;resource-name&gt;.cognitiveservices.azure.com).
     *
     * @return the endpoint value.
     */
    public String getEndpoint() {
        return this.endpoint;
    }

    /** Service version. */
    private final ImageAnalysisServiceVersion serviceVersion;

    /**
     * Gets Service version.
     *
     * @return the serviceVersion value.
     */
    public ImageAnalysisServiceVersion getServiceVersion() {
        return this.serviceVersion;
    }

    /** The HTTP pipeline to send requests through. */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     *
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /** The serializer to serialize an object into a string. */
    private final SerializerAdapter serializerAdapter;

    /**
     * Gets The serializer to serialize an object into a string.
     *
     * @return the serializerAdapter value.
     */
    public SerializerAdapter getSerializerAdapter() {
        return this.serializerAdapter;
    }

    /**
     * Initializes an instance of ImageAnalysisClient client.
     *
     * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
     *     https://&lt;resource-name&gt;.cognitiveservices.azure.com).
     * @param serviceVersion Service version.
     */
    public ImageAnalysisClientImpl(String endpoint, ImageAnalysisServiceVersion serviceVersion) {
        this(
                new HttpPipelineBuilder().policies(new UserAgentPolicy(), new RetryPolicy()).build(),
                JacksonAdapter.createDefaultSerializerAdapter(),
                endpoint,
                serviceVersion);
    }

    /**
     * Initializes an instance of ImageAnalysisClient client.
     *
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
     *     https://&lt;resource-name&gt;.cognitiveservices.azure.com).
     * @param serviceVersion Service version.
     */
    public ImageAnalysisClientImpl(
            HttpPipeline httpPipeline, String endpoint, ImageAnalysisServiceVersion serviceVersion) {
        this(httpPipeline, JacksonAdapter.createDefaultSerializerAdapter(), endpoint, serviceVersion);
    }

    /**
     * Initializes an instance of ImageAnalysisClient client.
     *
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param serializerAdapter The serializer to serialize an object into a string.
     * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
     *     https://&lt;resource-name&gt;.cognitiveservices.azure.com).
     * @param serviceVersion Service version.
     */
    public ImageAnalysisClientImpl(
            HttpPipeline httpPipeline,
            SerializerAdapter serializerAdapter,
            String endpoint,
            ImageAnalysisServiceVersion serviceVersion) {
        this.httpPipeline = httpPipeline;
        this.serializerAdapter = serializerAdapter;
        this.endpoint = endpoint;
        this.serviceVersion = serviceVersion;
        this.service =
                RestProxy.create(ImageAnalysisClientService.class, this.httpPipeline, this.getSerializerAdapter());
    }

    /**
     * The interface defining all the services for ImageAnalysisClient to be used by the proxy service to perform REST
     * calls.
     */
    @Host("{endpoint}/computervision")
    @ServiceInterface(name = "ImageAnalysisClient")
    public interface ImageAnalysisClientService {
        @Post("/imageanalysis:analyze")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> analyzeStream(
                @HostParam("endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("overload") String overload,
                @HeaderParam("Content-Type") String contentType,
                @HeaderParam("accept") String accept,
                @BodyParam("application/octet-stream") BinaryData imageContents,
                RequestOptions requestOptions,
                Context context);

        @Post("/imageanalysis:analyze")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> analyzeStreamSync(
                @HostParam("endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("overload") String overload,
                @HeaderParam("Content-Type") String contentType,
                @HeaderParam("accept") String accept,
                @BodyParam("application/octet-stream") BinaryData imageContents,
                RequestOptions requestOptions,
                Context context);

        @Post("/imageanalysis:analyze")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> analyzeUrl(
                @HostParam("endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Content-Type") String contentType,
                @HeaderParam("accept") String accept,
                @BodyParam("application/json") BinaryData imageContents,
                RequestOptions requestOptions,
                Context context);

        @Post("/imageanalysis:analyze")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> analyzeUrlSync(
                @HostParam("endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Content-Type") String contentType,
                @HeaderParam("accept") String accept,
                @BodyParam("application/json") BinaryData imageContents,
                RequestOptions requestOptions,
                Context context);
    }

    /**
     * Performs a single Image Analysis operation.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>features</td><td>List&lt;String&gt;</td><td>No</td><td>A string indicating what visual feature types to return. Multiple values should be comma-separated. Valid visual feature types include: Categories, Tags, Description, Faces, ImageType, Color, Adult, Brands, Objects, and Celebrities. If VisualFeatures is not specified, then Categories, Tags, and Description are included in the response by default. In the form of "," separated string.</td></tr>
     *     <tr><td>model-name</td><td>String</td><td>No</td><td>The name of the custom trained model. This parameter needs to be specified if the parameter "features" is not specified.</td></tr>
     *     <tr><td>langauge</td><td>String</td><td>No</td><td>The desired language for output generation. If this parameter is not specified, the default value is "en". See https://aka.ms/cv-languages for a list of supported languages.</td></tr>
     *     <tr><td>smartcrops-aspect-ratios</td><td>String</td><td>No</td><td>A list of aspect ratios to use for smartCrops feature. Aspect ratios are calculated by dividing the target crop width by the height. Supported values are between 0.75 and 1.8 (inclusive). Multiple values should be comma-separated. If this parameter is not specified, the service will return one crop suggestion with an aspect ratio it sees fit between 0.5 and 2.0 (inclusive).</td></tr>
     *     <tr><td>gender-neutral-caption</td><td>Boolean</td><td>No</td><td>Boolean flag for enabling gender-neutral captioning for caption and denseCaptions features. If this parameter is not specified, the default value is "false".</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * BinaryData
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     adultResult (Optional): {
     *         adult (Required): {
     *             confidence: double (Required)
     *             isMatch: boolean (Required)
     *         }
     *         gore (Required): (recursive schema, see gore above)
     *         racy (Required): (recursive schema, see racy above)
     *     }
     *     captionResult (Optional): {
     *         confidence: double (Required)
     *         text: String (Required)
     *     }
     *     customModelResult (Optional): {
     *         objectsResult (Required): {
     *             values (Required): [
     *                  (Required){
     *                     boundingBox (Required): {
     *                         x: long (Required)
     *                         y: long (Required)
     *                         w: long (Required)
     *                         h: long (Required)
     *                     }
     *                     id: String (Required)
     *                     tags (Required): [
     *                          (Required){
     *                             confidence: double (Required)
     *                             name: String (Required)
     *                         }
     *                     ]
     *                 }
     *             ]
     *         }
     *         tagsResult (Required): {
     *             values (Required): [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *     }
     *     denseCaptionsResult (Optional): {
     *         values (Required): [
     *              (Required){
     *                 confidence: double (Required)
     *                 text: String (Required)
     *                 boundingBox (Required): (recursive schema, see boundingBox above)
     *             }
     *         ]
     *     }
     *     metadata (Required): {
     *         height: long (Required)
     *         width: long (Required)
     *     }
     *     modelVersion: String (Required)
     *     objectsResult (Optional): (recursive schema, see objectsResult above)
     *     peopleResult (Optional): {
     *         values (Required): [
     *              (Required){
     *                 boundingBox (Required): (recursive schema, see boundingBox above)
     *                 confidence: double (Required)
     *             }
     *         ]
     *     }
     *     readResult (Optional): {
     *         content: String (Required)
     *         pages (Required): [
     *              (Required){
     *                 angle: double (Required)
     *                 height: double (Required)
     *                 lines (Required): [
     *                      (Required){
     *                         boundingBox (Required): [
     *                             double (Required)
     *                         ]
     *                         content: String (Required)
     *                         spans (Required): [
     *                              (Required){
     *                                 length: long (Required)
     *                                 offset: long (Required)
     *                             }
     *                         ]
     *                     }
     *                 ]
     *                 pageNumber: long (Required)
     *                 spans (Required): [
     *                     (recursive schema, see above)
     *                 ]
     *                 width: double (Required)
     *                 words (Required): [
     *                      (Required){
     *                         boundingBox (Required): [
     *                             double (Required)
     *                         ]
     *                         confidence: double (Required)
     *                         content: String (Required)
     *                         span (Required): (recursive schema, see span above)
     *                     }
     *                 ]
     *             }
     *         ]
     *         stringIndexType: String (Required)
     *         styles (Required): [
     *              (Required){
     *                 confidence: double (Required)
     *                 isHandwritten: boolean (Required)
     *                 spans (Required): [
     *                     (recursive schema, see above)
     *                 ]
     *             }
     *         ]
     *     }
     *     smartCropsResult (Optional): {
     *         values (Required): [
     *              (Required){
     *                 aspectRatio: double (Required)
     *                 boundingBox (Required): (recursive schema, see boundingBox above)
     *             }
     *         ]
     *     }
     *     tagsResult (Optional): (recursive schema, see tagsResult above)
     * }
     * }</pre>
     *
     * @param imageContents The image to be analyzed.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return describe the combined results of different types of image analysis along with {@link Response} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> analyzeStreamWithResponseAsync(
            BinaryData imageContents, RequestOptions requestOptions) {
        final String overload = "stream";
        final String contentType = "application/octet-stream";
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.analyzeStream(
                                this.getEndpoint(),
                                this.getServiceVersion().getVersion(),
                                overload,
                                contentType,
                                accept,
                                imageContents,
                                requestOptions,
                                context));
    }

    /**
     * Performs a single Image Analysis operation.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>features</td><td>List&lt;String&gt;</td><td>No</td><td>A string indicating what visual feature types to return. Multiple values should be comma-separated. Valid visual feature types include: Categories, Tags, Description, Faces, ImageType, Color, Adult, Brands, Objects, and Celebrities. If VisualFeatures is not specified, then Categories, Tags, and Description are included in the response by default. In the form of "," separated string.</td></tr>
     *     <tr><td>model-name</td><td>String</td><td>No</td><td>The name of the custom trained model. This parameter needs to be specified if the parameter "features" is not specified.</td></tr>
     *     <tr><td>langauge</td><td>String</td><td>No</td><td>The desired language for output generation. If this parameter is not specified, the default value is "en". See https://aka.ms/cv-languages for a list of supported languages.</td></tr>
     *     <tr><td>smartcrops-aspect-ratios</td><td>String</td><td>No</td><td>A list of aspect ratios to use for smartCrops feature. Aspect ratios are calculated by dividing the target crop width by the height. Supported values are between 0.75 and 1.8 (inclusive). Multiple values should be comma-separated. If this parameter is not specified, the service will return one crop suggestion with an aspect ratio it sees fit between 0.5 and 2.0 (inclusive).</td></tr>
     *     <tr><td>gender-neutral-caption</td><td>Boolean</td><td>No</td><td>Boolean flag for enabling gender-neutral captioning for caption and denseCaptions features. If this parameter is not specified, the default value is "false".</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * BinaryData
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     adultResult (Optional): {
     *         adult (Required): {
     *             confidence: double (Required)
     *             isMatch: boolean (Required)
     *         }
     *         gore (Required): (recursive schema, see gore above)
     *         racy (Required): (recursive schema, see racy above)
     *     }
     *     captionResult (Optional): {
     *         confidence: double (Required)
     *         text: String (Required)
     *     }
     *     customModelResult (Optional): {
     *         objectsResult (Required): {
     *             values (Required): [
     *                  (Required){
     *                     boundingBox (Required): {
     *                         x: long (Required)
     *                         y: long (Required)
     *                         w: long (Required)
     *                         h: long (Required)
     *                     }
     *                     id: String (Required)
     *                     tags (Required): [
     *                          (Required){
     *                             confidence: double (Required)
     *                             name: String (Required)
     *                         }
     *                     ]
     *                 }
     *             ]
     *         }
     *         tagsResult (Required): {
     *             values (Required): [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *     }
     *     denseCaptionsResult (Optional): {
     *         values (Required): [
     *              (Required){
     *                 confidence: double (Required)
     *                 text: String (Required)
     *                 boundingBox (Required): (recursive schema, see boundingBox above)
     *             }
     *         ]
     *     }
     *     metadata (Required): {
     *         height: long (Required)
     *         width: long (Required)
     *     }
     *     modelVersion: String (Required)
     *     objectsResult (Optional): (recursive schema, see objectsResult above)
     *     peopleResult (Optional): {
     *         values (Required): [
     *              (Required){
     *                 boundingBox (Required): (recursive schema, see boundingBox above)
     *                 confidence: double (Required)
     *             }
     *         ]
     *     }
     *     readResult (Optional): {
     *         content: String (Required)
     *         pages (Required): [
     *              (Required){
     *                 angle: double (Required)
     *                 height: double (Required)
     *                 lines (Required): [
     *                      (Required){
     *                         boundingBox (Required): [
     *                             double (Required)
     *                         ]
     *                         content: String (Required)
     *                         spans (Required): [
     *                              (Required){
     *                                 length: long (Required)
     *                                 offset: long (Required)
     *                             }
     *                         ]
     *                     }
     *                 ]
     *                 pageNumber: long (Required)
     *                 spans (Required): [
     *                     (recursive schema, see above)
     *                 ]
     *                 width: double (Required)
     *                 words (Required): [
     *                      (Required){
     *                         boundingBox (Required): [
     *                             double (Required)
     *                         ]
     *                         confidence: double (Required)
     *                         content: String (Required)
     *                         span (Required): (recursive schema, see span above)
     *                     }
     *                 ]
     *             }
     *         ]
     *         stringIndexType: String (Required)
     *         styles (Required): [
     *              (Required){
     *                 confidence: double (Required)
     *                 isHandwritten: boolean (Required)
     *                 spans (Required): [
     *                     (recursive schema, see above)
     *                 ]
     *             }
     *         ]
     *     }
     *     smartCropsResult (Optional): {
     *         values (Required): [
     *              (Required){
     *                 aspectRatio: double (Required)
     *                 boundingBox (Required): (recursive schema, see boundingBox above)
     *             }
     *         ]
     *     }
     *     tagsResult (Optional): (recursive schema, see tagsResult above)
     * }
     * }</pre>
     *
     * @param imageContents The image to be analyzed.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return describe the combined results of different types of image analysis along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> analyzeStreamWithResponse(BinaryData imageContents, RequestOptions requestOptions) {
        final String overload = "stream";
        final String contentType = "application/octet-stream";
        final String accept = "application/json";
        return service.analyzeStreamSync(
                this.getEndpoint(),
                this.getServiceVersion().getVersion(),
                overload,
                contentType,
                accept,
                imageContents,
                requestOptions,
                Context.NONE);
    }

    /**
     * Performs a single Image Analysis operation.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>features</td><td>List&lt;String&gt;</td><td>No</td><td>A string indicating what visual feature types to return. Multiple values should be comma-separated. Valid visual feature types include: Categories, Tags, Description, Faces, ImageType, Color, Adult, Brands, Objects, and Celebrities. If VisualFeatures is not specified, then Categories, Tags, and Description are included in the response by default. In the form of "," separated string.</td></tr>
     *     <tr><td>model-name</td><td>String</td><td>No</td><td>The name of the custom trained model. This parameter needs to be specified if the parameter "features" is not specified.</td></tr>
     *     <tr><td>langauge</td><td>String</td><td>No</td><td>The desired language for output generation. If this parameter is not specified, the default value is "en". See https://aka.ms/cv-languages for a list of supported languages.</td></tr>
     *     <tr><td>smartcrops-aspect-ratios</td><td>String</td><td>No</td><td>A list of aspect ratios to use for smartCrops feature. Aspect ratios are calculated by dividing the target crop width by the height. Supported values are between 0.75 and 1.8 (inclusive). Multiple values should be comma-separated. If this parameter is not specified, the service will return one crop suggestion with an aspect ratio it sees fit between 0.5 and 2.0 (inclusive).</td></tr>
     *     <tr><td>gender-neutral-caption</td><td>Boolean</td><td>No</td><td>Boolean flag for enabling gender-neutral captioning for caption and denseCaptions features. If this parameter is not specified, the default value is "false".</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     url: String (Required)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     adultResult (Optional): {
     *         adult (Required): {
     *             confidence: double (Required)
     *             isMatch: boolean (Required)
     *         }
     *         gore (Required): (recursive schema, see gore above)
     *         racy (Required): (recursive schema, see racy above)
     *     }
     *     captionResult (Optional): {
     *         confidence: double (Required)
     *         text: String (Required)
     *     }
     *     customModelResult (Optional): {
     *         objectsResult (Required): {
     *             values (Required): [
     *                  (Required){
     *                     boundingBox (Required): {
     *                         x: long (Required)
     *                         y: long (Required)
     *                         w: long (Required)
     *                         h: long (Required)
     *                     }
     *                     id: String (Required)
     *                     tags (Required): [
     *                          (Required){
     *                             confidence: double (Required)
     *                             name: String (Required)
     *                         }
     *                     ]
     *                 }
     *             ]
     *         }
     *         tagsResult (Required): {
     *             values (Required): [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *     }
     *     denseCaptionsResult (Optional): {
     *         values (Required): [
     *              (Required){
     *                 confidence: double (Required)
     *                 text: String (Required)
     *                 boundingBox (Required): (recursive schema, see boundingBox above)
     *             }
     *         ]
     *     }
     *     metadata (Required): {
     *         height: long (Required)
     *         width: long (Required)
     *     }
     *     modelVersion: String (Required)
     *     objectsResult (Optional): (recursive schema, see objectsResult above)
     *     peopleResult (Optional): {
     *         values (Required): [
     *              (Required){
     *                 boundingBox (Required): (recursive schema, see boundingBox above)
     *                 confidence: double (Required)
     *             }
     *         ]
     *     }
     *     readResult (Optional): {
     *         content: String (Required)
     *         pages (Required): [
     *              (Required){
     *                 angle: double (Required)
     *                 height: double (Required)
     *                 lines (Required): [
     *                      (Required){
     *                         boundingBox (Required): [
     *                             double (Required)
     *                         ]
     *                         content: String (Required)
     *                         spans (Required): [
     *                              (Required){
     *                                 length: long (Required)
     *                                 offset: long (Required)
     *                             }
     *                         ]
     *                     }
     *                 ]
     *                 pageNumber: long (Required)
     *                 spans (Required): [
     *                     (recursive schema, see above)
     *                 ]
     *                 width: double (Required)
     *                 words (Required): [
     *                      (Required){
     *                         boundingBox (Required): [
     *                             double (Required)
     *                         ]
     *                         confidence: double (Required)
     *                         content: String (Required)
     *                         span (Required): (recursive schema, see span above)
     *                     }
     *                 ]
     *             }
     *         ]
     *         stringIndexType: String (Required)
     *         styles (Required): [
     *              (Required){
     *                 confidence: double (Required)
     *                 isHandwritten: boolean (Required)
     *                 spans (Required): [
     *                     (recursive schema, see above)
     *                 ]
     *             }
     *         ]
     *     }
     *     smartCropsResult (Optional): {
     *         values (Required): [
     *              (Required){
     *                 aspectRatio: double (Required)
     *                 boundingBox (Required): (recursive schema, see boundingBox above)
     *             }
     *         ]
     *     }
     *     tagsResult (Optional): (recursive schema, see tagsResult above)
     * }
     * }</pre>
     *
     * @param imageContents The image to be analyzed.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return describe the combined results of different types of image analysis along with {@link Response} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> analyzeUrlWithResponseAsync(
            BinaryData imageContents, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.analyzeUrl(
                                this.getEndpoint(),
                                this.getServiceVersion().getVersion(),
                                contentType,
                                accept,
                                imageContents,
                                requestOptions,
                                context));
    }

    /**
     * Performs a single Image Analysis operation.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>features</td><td>List&lt;String&gt;</td><td>No</td><td>A string indicating what visual feature types to return. Multiple values should be comma-separated. Valid visual feature types include: Categories, Tags, Description, Faces, ImageType, Color, Adult, Brands, Objects, and Celebrities. If VisualFeatures is not specified, then Categories, Tags, and Description are included in the response by default. In the form of "," separated string.</td></tr>
     *     <tr><td>model-name</td><td>String</td><td>No</td><td>The name of the custom trained model. This parameter needs to be specified if the parameter "features" is not specified.</td></tr>
     *     <tr><td>langauge</td><td>String</td><td>No</td><td>The desired language for output generation. If this parameter is not specified, the default value is "en". See https://aka.ms/cv-languages for a list of supported languages.</td></tr>
     *     <tr><td>smartcrops-aspect-ratios</td><td>String</td><td>No</td><td>A list of aspect ratios to use for smartCrops feature. Aspect ratios are calculated by dividing the target crop width by the height. Supported values are between 0.75 and 1.8 (inclusive). Multiple values should be comma-separated. If this parameter is not specified, the service will return one crop suggestion with an aspect ratio it sees fit between 0.5 and 2.0 (inclusive).</td></tr>
     *     <tr><td>gender-neutral-caption</td><td>Boolean</td><td>No</td><td>Boolean flag for enabling gender-neutral captioning for caption and denseCaptions features. If this parameter is not specified, the default value is "false".</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     url: String (Required)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     adultResult (Optional): {
     *         adult (Required): {
     *             confidence: double (Required)
     *             isMatch: boolean (Required)
     *         }
     *         gore (Required): (recursive schema, see gore above)
     *         racy (Required): (recursive schema, see racy above)
     *     }
     *     captionResult (Optional): {
     *         confidence: double (Required)
     *         text: String (Required)
     *     }
     *     customModelResult (Optional): {
     *         objectsResult (Required): {
     *             values (Required): [
     *                  (Required){
     *                     boundingBox (Required): {
     *                         x: long (Required)
     *                         y: long (Required)
     *                         w: long (Required)
     *                         h: long (Required)
     *                     }
     *                     id: String (Required)
     *                     tags (Required): [
     *                          (Required){
     *                             confidence: double (Required)
     *                             name: String (Required)
     *                         }
     *                     ]
     *                 }
     *             ]
     *         }
     *         tagsResult (Required): {
     *             values (Required): [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *     }
     *     denseCaptionsResult (Optional): {
     *         values (Required): [
     *              (Required){
     *                 confidence: double (Required)
     *                 text: String (Required)
     *                 boundingBox (Required): (recursive schema, see boundingBox above)
     *             }
     *         ]
     *     }
     *     metadata (Required): {
     *         height: long (Required)
     *         width: long (Required)
     *     }
     *     modelVersion: String (Required)
     *     objectsResult (Optional): (recursive schema, see objectsResult above)
     *     peopleResult (Optional): {
     *         values (Required): [
     *              (Required){
     *                 boundingBox (Required): (recursive schema, see boundingBox above)
     *                 confidence: double (Required)
     *             }
     *         ]
     *     }
     *     readResult (Optional): {
     *         content: String (Required)
     *         pages (Required): [
     *              (Required){
     *                 angle: double (Required)
     *                 height: double (Required)
     *                 lines (Required): [
     *                      (Required){
     *                         boundingBox (Required): [
     *                             double (Required)
     *                         ]
     *                         content: String (Required)
     *                         spans (Required): [
     *                              (Required){
     *                                 length: long (Required)
     *                                 offset: long (Required)
     *                             }
     *                         ]
     *                     }
     *                 ]
     *                 pageNumber: long (Required)
     *                 spans (Required): [
     *                     (recursive schema, see above)
     *                 ]
     *                 width: double (Required)
     *                 words (Required): [
     *                      (Required){
     *                         boundingBox (Required): [
     *                             double (Required)
     *                         ]
     *                         confidence: double (Required)
     *                         content: String (Required)
     *                         span (Required): (recursive schema, see span above)
     *                     }
     *                 ]
     *             }
     *         ]
     *         stringIndexType: String (Required)
     *         styles (Required): [
     *              (Required){
     *                 confidence: double (Required)
     *                 isHandwritten: boolean (Required)
     *                 spans (Required): [
     *                     (recursive schema, see above)
     *                 ]
     *             }
     *         ]
     *     }
     *     smartCropsResult (Optional): {
     *         values (Required): [
     *              (Required){
     *                 aspectRatio: double (Required)
     *                 boundingBox (Required): (recursive schema, see boundingBox above)
     *             }
     *         ]
     *     }
     *     tagsResult (Optional): (recursive schema, see tagsResult above)
     * }
     * }</pre>
     *
     * @param imageContents The image to be analyzed.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return describe the combined results of different types of image analysis along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> analyzeUrlWithResponse(BinaryData imageContents, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.analyzeUrlSync(
                this.getEndpoint(),
                this.getServiceVersion().getVersion(),
                contentType,
                accept,
                imageContents,
                requestOptions,
                Context.NONE);
    }
}
