// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.ai.vision.imageanalysis.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** The content and layout elements extracted from a page from the input. */
@Immutable
public final class DocumentPage {
    /*
     * The general orientation of the content in clockwise direction, measured in degrees between (-180, 180].
     */
    @Generated
    @JsonProperty(value = "angle")
    private double angle;

    /*
     * The height of the image/PDF in pixels/inches, respectively.
     */
    @Generated
    @JsonProperty(value = "height")
    private double height;

    /*
     * Extracted lines from the page, potentially containing both textual and visual elements.
     */
    @Generated
    @JsonProperty(value = "lines")
    private List<DocumentLine> lines;

    /*
     * 1-based page number in the input document.
     */
    @Generated
    @JsonProperty(value = "pageNumber")
    private long pageNumber;

    /*
     * Location of the page in the reading order concatenated content.
     */
    @Generated
    @JsonProperty(value = "spans")
    private List<DocumentSpan> spans;

    /*
     * The width of the image/PDF in pixels/inches, respectively.
     */
    @Generated
    @JsonProperty(value = "width")
    private double width;

    /*
     * Extracted words from the page.
     */
    @Generated
    @JsonProperty(value = "words")
    private List<DocumentWord> words;

    /**
     * Creates an instance of DocumentPage class.
     *
     * @param angle the angle value to set.
     * @param height the height value to set.
     * @param lines the lines value to set.
     * @param pageNumber the pageNumber value to set.
     * @param spans the spans value to set.
     * @param width the width value to set.
     * @param words the words value to set.
     */
    @Generated
    @JsonCreator
    private DocumentPage(
            @JsonProperty(value = "angle") double angle,
            @JsonProperty(value = "height") double height,
            @JsonProperty(value = "lines") List<DocumentLine> lines,
            @JsonProperty(value = "pageNumber") long pageNumber,
            @JsonProperty(value = "spans") List<DocumentSpan> spans,
            @JsonProperty(value = "width") double width,
            @JsonProperty(value = "words") List<DocumentWord> words) {
        this.angle = angle;
        this.height = height;
        this.lines = lines;
        this.pageNumber = pageNumber;
        this.spans = spans;
        this.width = width;
        this.words = words;
    }

    /**
     * Get the angle property: The general orientation of the content in clockwise direction, measured in degrees
     * between (-180, 180].
     *
     * @return the angle value.
     */
    @Generated
    public double getAngle() {
        return this.angle;
    }

    /**
     * Get the height property: The height of the image/PDF in pixels/inches, respectively.
     *
     * @return the height value.
     */
    @Generated
    public double getHeight() {
        return this.height;
    }

    /**
     * Get the lines property: Extracted lines from the page, potentially containing both textual and visual elements.
     *
     * @return the lines value.
     */
    @Generated
    public List<DocumentLine> getLines() {
        return this.lines;
    }

    /**
     * Get the pageNumber property: 1-based page number in the input document.
     *
     * @return the pageNumber value.
     */
    @Generated
    public long getPageNumber() {
        return this.pageNumber;
    }

    /**
     * Get the spans property: Location of the page in the reading order concatenated content.
     *
     * @return the spans value.
     */
    @Generated
    public List<DocumentSpan> getSpans() {
        return this.spans;
    }

    /**
     * Get the width property: The width of the image/PDF in pixels/inches, respectively.
     *
     * @return the width value.
     */
    @Generated
    public double getWidth() {
        return this.width;
    }

    /**
     * Get the words property: Extracted words from the page.
     *
     * @return the words value.
     */
    @Generated
    public List<DocumentWord> getWords() {
        return this.words;
    }
}
