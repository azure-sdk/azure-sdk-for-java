// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.data.schemaregistry;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.data.schemaregistry.implementation.SchemaRegistryClientImpl;

/**
 * Initializes a new instance of the synchronous SchemaRegistryClient type.
 */
@ServiceClient(builder = SchemaRegistryClientBuilder.class)
public final class SchemaRegistryClient {
    @Generated
    private final SchemaRegistryClientImpl serviceClient;

    /**
     * Initializes an instance of SchemaRegistryClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    SchemaRegistryClient(SchemaRegistryClientImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Get list of schema groups.
     * 
     * Gets the list of schema groups user is authorized to access.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * String
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return list of schema groups.
     * 
     * Gets the list of schema groups user is authorized to access as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<BinaryData> listSchemaGroups(RequestOptions requestOptions) {
        return this.serviceClient.listSchemaGroups(requestOptions);
    }

    /**
     * List schema versions.
     * 
     * Gets the list of all versions of one schema.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * int
     * }</pre>
     * 
     * @param groupName Name of schema group.
     * @param schemaName Name of schema.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of schema versions with server paging support as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<BinaryData> listSchemaVersions(String groupName, String schemaName, RequestOptions requestOptions) {
        return this.serviceClient.listSchemaVersions(groupName, schemaName, requestOptions);
    }

    /**
     * Get a registered schema by its unique ID reference.
     * 
     * Gets a registered schema by its unique ID. Azure Schema Registry guarantees that ID is unique within a namespace.
     * Operation response type is based on serialization of schema requested.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * BinaryData
     * }</pre>
     * 
     * @param id Schema ID that uniquely identifies a schema in the registry namespace.
     * @param accept The accept parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a registered schema by its unique ID reference.
     * 
     * Gets a registered schema by its unique ID along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<BinaryData> getSchemaByIdWithResponse(String id, String accept, RequestOptions requestOptions) {
        return this.serviceClient.getSchemaByIdWithResponse(id, accept, requestOptions);
    }

    /**
     * Get specific schema versions.
     * 
     * Gets one specific version of one schema.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * BinaryData
     * }</pre>
     * 
     * @param groupName Name of schema group.
     * @param schemaName Name of schema.
     * @param schemaVersion Version number of specific schema.
     * @param accept The accept parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return specific schema versions.
     * 
     * Gets one specific version of one schema along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<BinaryData> getSchemaByVersionWithResponse(String groupName, String schemaName, int schemaVersion,
        String accept, RequestOptions requestOptions) {
        return this.serviceClient.getSchemaByVersionWithResponse(groupName, schemaName, schemaVersion, accept,
            requestOptions);
    }

    /**
     * Get properties for existing schema.
     * 
     * Gets the properties referencing an existing schema within the specified schema group, as matched by schema
     * content comparison.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * BinaryData
     * }</pre>
     * 
     * @param groupName Name of schema group.
     * @param schemaName Name of schema.
     * @param contentType The content type for given schema. Allowed values: "application/json; serialization=Avro",
     * "application/json; serialization=Json", "text/plain; charset=utf-8", "text/vnd.ms.protobuf".
     * @param schemaContent String representation (UTF-8) of the schema.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return properties for existing schema.
     * 
     * Gets the properties referencing an existing schema within the specified schema group, as matched by schema
     * content comparison along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> getSchemaPropertiesByContentWithResponse(String groupName, String schemaName, String contentType,
        BinaryData schemaContent, RequestOptions requestOptions) {
        // Convenience API is not generated, as operation 'getSchemaPropertiesByContent' is multiple content-type
        return this.serviceClient.getSchemaPropertiesByContentWithResponse(groupName, schemaName, contentType,
            schemaContent, requestOptions);
    }

    /**
     * Register new schema
     * 
     * Register new schema. If schema of specified name does not exist in specified group, schema is created at version
     * 1. If schema of specified name exists already in specified group, schema is created at latest version + 1.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * BinaryData
     * }</pre>
     * 
     * @param groupName Name of schema group.
     * @param schemaName Name of schema.
     * @param contentType The content type for given schema. Allowed values: "application/json; serialization=Avro",
     * "application/json; serialization=Json", "text/plain; charset=utf-8", "text/vnd.ms.protobuf".
     * @param schemaContent String representation (UTF-8) of the schema.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> registerSchemaWithResponse(String groupName, String schemaName, String contentType,
        BinaryData schemaContent, RequestOptions requestOptions) {
        // Convenience API is not generated, as operation 'registerSchema' is multiple content-type
        return this.serviceClient.registerSchemaWithResponse(groupName, schemaName, contentType, schemaContent,
            requestOptions);
    }

    /**
     * Get list of schema groups.
     * 
     * Gets the list of schema groups user is authorized to access.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of schema groups.
     * 
     * Gets the list of schema groups user is authorized to access as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<String> listSchemaGroups() {
        // Generated convenience method for listSchemaGroups
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.listSchemaGroups(requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(String.class));
    }

    /**
     * List schema versions.
     * 
     * Gets the list of all versions of one schema.
     * 
     * @param groupName Name of schema group.
     * @param schemaName Name of schema.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of schema versions with server paging support as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<Integer> listSchemaVersions(String groupName, String schemaName) {
        // Generated convenience method for listSchemaVersions
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.listSchemaVersions(groupName, schemaName, requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(Integer.class));
    }

    /**
     * Get a registered schema by its unique ID reference.
     * 
     * Gets a registered schema by its unique ID. Azure Schema Registry guarantees that ID is unique within a namespace.
     * Operation response type is based on serialization of schema requested.
     * 
     * @param id Schema ID that uniquely identifies a schema in the registry namespace.
     * @param accept The accept parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a registered schema by its unique ID reference.
     * 
     * Gets a registered schema by its unique ID.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    BinaryData getSchemaById(String id, String accept) {
        // Generated convenience method for getSchemaByIdWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getSchemaByIdWithResponse(id, accept, requestOptions).getValue();
    }

    /**
     * Get specific schema versions.
     * 
     * Gets one specific version of one schema.
     * 
     * @param groupName Name of schema group.
     * @param schemaName Name of schema.
     * @param schemaVersion Version number of specific schema.
     * @param accept The accept parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specific schema versions.
     * 
     * Gets one specific version of one schema.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    BinaryData getSchemaByVersion(String groupName, String schemaName, int schemaVersion, String accept) {
        // Generated convenience method for getSchemaByVersionWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getSchemaByVersionWithResponse(groupName, schemaName, schemaVersion, accept, requestOptions).getValue();
    }
}
