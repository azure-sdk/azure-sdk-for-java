// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.data.schemaregistry;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.ResponseBase;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.data.schemaregistry.implementation.AzureSchemaRegistryImpl;
import com.azure.data.schemaregistry.implementation.SchemaRegistryClientImpl;
import com.azure.data.schemaregistry.implementation.SchemaRegistryHelper;
import com.azure.data.schemaregistry.implementation.models.ErrorException;
import com.azure.data.schemaregistry.implementation.models.SchemasGetByIdHeaders;
import com.azure.data.schemaregistry.implementation.models.SchemasGetSchemaVersionHeaders;
import com.azure.data.schemaregistry.implementation.models.SchemasQueryIdByContentHeaders;
import com.azure.data.schemaregistry.implementation.models.SchemasRegisterHeaders;
import com.azure.data.schemaregistry.models.SchemaFormat;
import com.azure.data.schemaregistry.models.SchemaProperties;
import com.azure.data.schemaregistry.models.SchemaRegistrySchema;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.UncheckedIOException;
import java.nio.charset.StandardCharsets;
import java.util.Objects;

/**
 * Initializes a new instance of the synchronous SchemaRegistryClient type.
 */
@ServiceClient(builder = SchemaRegistryClientBuilder.class)
public final class SchemaRegistryClient {

    private static final String HTTP_REST_PROXY_SYNC_PROXY_ENABLE = "com.azure.core.http.restproxy.syncproxy.enable";

    private final ClientLogger logger = new ClientLogger(SchemaRegistryClient.class);

    private final AzureSchemaRegistryImpl restService;

    SchemaRegistryClient(AzureSchemaRegistryImpl restService) {
        this.restService = restService;
        // So the accessor is initialised because there were NullPointerExceptions before.
        new SchemaProperties("", SchemaFormat.AVRO);
    }

    /**
     * Gets the fully qualified namespace of the Schema Registry instance.
     *
     * @return The fully qualified namespace of the Schema Registry instance.
     */
    public String getFullyQualifiedNamespace() {
        return this.restService.getEndpoint();
    }

    /**
     * Registers a new schema in the specified schema group with the given schema name. If a schema:
     *
     * <ul>
     * <li><b>does not exist</b> with the same {@code groupName}, {@code name}, {@code format}, and
     * {@code schemaDefinition}, it is added to the Schema Registry Instance and assigned a new schema id.</li>
     *
     * <li>exists with the same {@code groupName}, {@code name}, {@code format}, and {@code schemaDefinition},
     * the id of that existing schema is returned.</li>
     *
     * <li>exists with the same {@code groupName}, {@code name}, and {@code format} but the <u>{@code schemaDefinition}
     * is different</u>, it is considered a new version. A new schema id is assigned to the schema and its schema id is
     * returned.</li>
     * </ul>
     *
     * @param groupName The schema group.
     * @param name The schema name.
     * @param schemaDefinition The string representation of the schema.
     * @param format The serialization type of this schema.
     *
     * @return The schema properties on successful registration of the schema.
     *
     * @throws NullPointerException if {@code groupName}, {@code name}, {@code format}, or
     * {@code schemaDefinition} are null.
     * @throws HttpResponseException if an issue was encountered while registering the schema.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SchemaProperties registerSchema(String groupName, String name, String schemaDefinition,
        SchemaFormat format) {
        return registerSchemaWithResponse(groupName, name, schemaDefinition, format, Context.NONE).getValue();
    }

    /**
     * Registers a new schema in the specified schema group with the given schema name. If a schema:
     *
     * <ul>
     * <li><b>does not exist</b> with the same {@code groupName}, {@code name}, {@code format}, and
     * {@code schemaDefinition}, it is added to the Schema Registry Instance and assigned a new schema id.</li>
     *
     * <li>exists with the same {@code groupName}, {@code name}, {@code format}, and {@code schemaDefinition},
     * the id of that existing schema is returned.</li>
     *
     * <li>exists with the same {@code groupName}, {@code name}, and {@code format} but the <u>{@code schemaDefinition}
     * is different</u>, it is considered a new version. A new schema id is assigned to the schema and its schema id is
     * returned.</li>
     * </ul>
     *
     * @param groupName The schema group.
     * @param name The schema name.
     * @param schemaDefinition The string representation of the schema.
     * @param format The serialization type of this schema.
     * @param context The context to pass to the HTTP pipeline.
     *
     * @return The schema properties on successful registration of the schema.
     *
     * @throws NullPointerException if {@code groupName}, {@code name}, {@code format}, or
     * {@code schemaDefinition} are null.
     * @throws HttpResponseException if an issue was encountered while registering the schema.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SchemaProperties> registerSchemaWithResponse(String groupName, String name, String schemaDefinition,
        SchemaFormat format, Context context) {
        if (Objects.isNull(groupName)) {
            throw logger.logExceptionAsError(new NullPointerException("'groupName' should not be null."));
        } else if (Objects.isNull(name)) {
            throw logger.logExceptionAsError(new NullPointerException("'name' should not be null."));
        } else if (Objects.isNull(schemaDefinition)) {
            throw logger.logExceptionAsError(new NullPointerException("'schemaDefinition' should not be null."));
        } else if (Objects.isNull(format)) {
            throw logger.logExceptionAsError(new NullPointerException("'format' should not be null."));
        }
        logger.verbose("Registering schema. Group: '{}', name: '{}', serialization type: '{}', payload: '{}'",
            groupName, name, format, schemaDefinition);
        final BinaryData binaryData = BinaryData.fromString(schemaDefinition);
        final com.azure.data.schemaregistry.implementation.models.SchemaFormat contentType
            = SchemaRegistryHelper.getContentType(format);
        ResponseBase<SchemasRegisterHeaders, Void> response = restService.getSchemas().registerWithResponse(groupName,
            name, contentType.toString(), binaryData, binaryData.getLength(), context);
        final SchemaProperties registered = SchemaRegistryHelper.getSchemaProperties(response.getDeserializedHeaders(),
            response.getHeaders(), format);
        return new SimpleResponse<>(response, registered);
    }

    /**
     * Gets the schema properties of the schema associated with the unique schema id.
     *
     * @param schemaId The unique identifier of the schema.
     *
     * @return The {@link SchemaRegistrySchema} associated with the given {@code schemaId}.
     *
     * @throws NullPointerException if {@code schemaId} is null.
     * @throws ResourceNotFoundException if a schema with the matching {@code schemaId} could not be found.
     * @throws HttpResponseException if an issue was encountered while fetching the schema.
     * @throws UncheckedIOException if an error occurred while deserializing response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SchemaRegistrySchema getSchema(String schemaId) {
        return getSchemaWithResponse(schemaId, Context.NONE).getValue();
    }

    /**
     * Gets the schema properties of the schema associated with the group name, schema name, and schema version.
     *
     * @param groupName Group name for the schema
     * @param schemaName Name of the schema
     * @param schemaVersion Version of schema
     *
     * @return The {@link SchemaRegistrySchema} matching the parameters.
     *
     * @throws NullPointerException if {@code groupName} or {@code schemaName} is null.
     * @throws ResourceNotFoundException if a schema with the matching {@code groupName} or {@code schemaName} could
     * not be found.
     * @throws HttpResponseException if an issue was encountered while fetching the schema.
     * @throws UncheckedIOException if an error occurred while deserializing response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SchemaRegistrySchema getSchema(String groupName, String schemaName, int schemaVersion) {
        return getSchemaWithResponse(groupName, schemaName, schemaVersion, Context.NONE).getValue();
    }

    /**
     * Gets the schema properties of the schema associated with the unique schema id.
     *
     * @param schemaId The unique identifier of the schema.
     * @param context The context to pass to the Http pipeline.
     *
     * @return The {@link SchemaRegistrySchema} associated with the given {@code schemaId} and its HTTP response.
     *
     * @throws NullPointerException if {@code schemaId} is null.
     * @throws ResourceNotFoundException if a schema with the matching {@code schemaId} could not be found.
     * @throws HttpResponseException if an issue was encountered while fetching the schema.
     * @throws UncheckedIOException if an error occurred while deserializing response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SchemaRegistrySchema> getSchemaWithResponse(String schemaId, Context context) {
        if (Objects.isNull(schemaId)) {
            throw logger.logExceptionAsError(new NullPointerException("'schemaId' should not be null."));
        }
        try {
            ResponseBase<SchemasGetByIdHeaders, BinaryData> response
                = this.restService.getSchemas().getByIdWithResponse(schemaId, context);
            SchemaProperties schemaObject
                = SchemaRegistryHelper.getSchemaProperties(response.getDeserializedHeaders(), response.getHeaders());
            return new SimpleResponse<>(response,
                new SchemaRegistrySchema(schemaObject, convertToString(response.getValue().toStream())));
        } catch (ErrorException ex) {
            throw logger.logExceptionAsError(SchemaRegistryAsyncClient.remapError(ex));
        }
    }

    /**
     * Gets the schema properties of the schema associated with the group name, schema name, and schema version.
     *
     * @param groupName Group name for the schema
     * @param schemaName Name of the schema
     * @param schemaVersion Version of schema
     * @param context The context to pass to the Http pipeline.
     *
     * @return The {@link SchemaRegistrySchema} matching the parameters.
     *
     * @throws NullPointerException if {@code groupName} or {@code schemaName} is null.
     * @throws ResourceNotFoundException if a schema with the matching {@code groupName} or {@code schemaName} could
     * not be found.
     * @throws HttpResponseException if an issue was encountered while fetching the schema.
     * @throws UncheckedIOException if an error occurred while deserializing response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SchemaRegistrySchema> getSchemaWithResponse(String groupName, String schemaName, int schemaVersion,
        Context context) {
        if (Objects.isNull(groupName)) {
            throw logger.logExceptionAsError(new NullPointerException("'groupName' should not be null."));
        }
        ResponseBase<SchemasGetSchemaVersionHeaders, BinaryData> response
            = this.restService.getSchemas().getSchemaVersionWithResponse(groupName, schemaName, schemaVersion, context);
        InputStream schemaInputStream = response.getValue().toStream();
        SchemaProperties schemaObject
            = SchemaRegistryHelper.getSchemaProperties(response.getDeserializedHeaders(), response.getHeaders());
        if (schemaInputStream == null) {
            throw logger.logExceptionAsError(new IllegalArgumentException(
                String.format("Schema definition should not be null. Group Name: %s. Schema Name: %s. Version: %d",
                    groupName, schemaName, schemaVersion)));
        }
        return new SimpleResponse<>(response,
            new SchemaRegistrySchema(schemaObject, convertToString(schemaInputStream)));
    }

    /**
     * Gets schema properties for a schema with matching {@code groupName}, {@code name}, {@code schemaDefinition}, and
     * {@code format}.
     *
     * @param groupName The schema group.
     * @param name The schema name.
     * @param schemaDefinition The string representation of the schema.
     * @param format The serialization type of this schema.
     *
     * @return The properties for a matching schema.
     *
     * @throws NullPointerException if {@code groupName}, {@code name}, {@code schemaDefinition}, or {@code format} is
     * null.
     * @throws ResourceNotFoundException if a schema with matching parameters could not be located.
     * @throws HttpResponseException if an issue was encountered while finding a matching schema.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SchemaProperties getSchemaProperties(String groupName, String name, String schemaDefinition,
        SchemaFormat format) {
        return getSchemaPropertiesWithResponse(groupName, name, schemaDefinition, format, Context.NONE).getValue();
    }

    /**
     * Gets schema properties for a schema with matching {@code groupName}, {@code name}, {@code schemaDefinition}, and
     * {@code format} along with its HTTP response.
     *
     * @param groupName The schema group.
     * @param name The schema name.
     * @param schemaDefinition The string representation of the schema.
     * @param format The serialization type of this schema.
     * @param context The context to pass to the Http pipeline.
     *
     * @return A mono that completes with the properties for a matching schema.
     *
     * @throws NullPointerException if {@code groupName}, {@code name}, {@code schemaDefinition}, or {@code format} is
     * null.
     * @throws ResourceNotFoundException if a schema with matching parameters could not be located.
     * @throws HttpResponseException if an issue was encountered while finding a matching schema.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SchemaProperties> getSchemaPropertiesWithResponse(String groupName, String name,
        String schemaDefinition, SchemaFormat format, Context context) {
        if (Objects.isNull(groupName)) {
            throw logger.logExceptionAsError(new NullPointerException("'groupName' cannot be null."));
        } else if (Objects.isNull(name)) {
            throw logger.logExceptionAsError(new NullPointerException("'name' cannot be null."));
        } else if (Objects.isNull(schemaDefinition)) {
            throw logger.logExceptionAsError(new NullPointerException("'schemaDefinition' cannot be null."));
        } else if (Objects.isNull(format)) {
            throw logger.logExceptionAsError(new NullPointerException("'format' cannot be null."));
        }
        if (context == null) {
            context = Context.NONE;
        }
        final BinaryData binaryData = BinaryData.fromString(schemaDefinition);
        final com.azure.data.schemaregistry.implementation.models.SchemaFormat contentType
            = SchemaRegistryHelper.getContentType(format);
        try {
            ResponseBase<SchemasQueryIdByContentHeaders, Void> response
                = restService.getSchemas().queryIdByContentWithResponse(groupName, name, contentType, binaryData,
                    binaryData.getLength(), context);
            final SchemaProperties properties = SchemaRegistryHelper
                .getSchemaProperties(response.getDeserializedHeaders(), response.getHeaders(), format);
            return new SimpleResponse<>(response, properties);
        } catch (ErrorException ex) {
            throw logger.logExceptionAsError(SchemaRegistryAsyncClient.remapError(ex));
        }
    }

    /**
     * Converts an input stream into its string representation.
     *
     * @param inputStream Input stream.
     *
     * @return A string representation.
     *
     * @throws UncheckedIOException if an {@link IOException} is thrown when creating the readers.
     */
    static String convertToString(InputStream inputStream) {
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        byte[] buffer = new byte[4096];
        int read;
        try {
            while ((read = inputStream.read(buffer, 0, buffer.length)) != -1) {
                outputStream.write(buffer, 0, read);
            }
            return outputStream.toString(StandardCharsets.UTF_8.name());
        } catch (IOException exception) {
            throw new UncheckedIOException("Error occurred while deserializing schemaContent.", exception);
        }
    }

    @Generated
    private final SchemaRegistryClientImpl serviceClient;

    /**
     * Get list of schema groups.
     *
     * Gets the list of schema groups user is authorized to access.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * String
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of schema groups user is authorized to access as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<BinaryData> listSchemaGroups(RequestOptions requestOptions) {
        return this.serviceClient.listSchemaGroups(requestOptions);
    }

    /**
     * List schema versions.
     *
     * Gets the list of all versions of one schema.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * int
     * }</pre>
     *
     * @param groupName Name of schema group.
     * @param schemaName Name of schema.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of all versions of one schema as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<BinaryData> listSchemaVersions(String groupName, String schemaName, RequestOptions requestOptions) {
        return this.serviceClient.listSchemaVersions(groupName, schemaName, requestOptions);
    }

    /**
     * Get a registered schema by its unique ID reference.
     *
     * Gets a registered schema by its unique ID. Azure Schema Registry guarantees that ID is unique within a namespace.
     * Operation response type is based on serialization of schema requested.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * BinaryData
     * }</pre>
     *
     * @param id Schema ID that uniquely identifies a schema in the registry namespace.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a registered schema by its unique ID along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<BinaryData> getSchemaByIdWithResponse(String id, RequestOptions requestOptions) {
        return this.serviceClient.getSchemaByIdWithResponse(id, requestOptions);
    }

    /**
     * Get specific schema versions.
     *
     * Gets one specific version of one schema.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * BinaryData
     * }</pre>
     *
     * @param groupName Name of schema group.
     * @param schemaName Name of schema.
     * @param schemaVersion Version number of specific schema.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return one specific version of one schema along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<BinaryData> getSchemaByVersionWithResponse(String groupName, String schemaName, int schemaVersion,
        RequestOptions requestOptions) {
        return this.serviceClient.getSchemaByVersionWithResponse(groupName, schemaName, schemaVersion, requestOptions);
    }

    /**
     * Get properties for existing schema.
     *
     * Gets the properties referencing an existing schema within the specified schema group, as matched by schema
     * content comparison.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * BinaryData
     * }</pre>
     *
     * @param groupName Name of schema group.
     * @param schemaName Name of schema.
     * @param contentType The content type for given schema. Allowed values: "application/json; serialization=Avro",
     * "application/json; serialization=Json", "text/plain; charset=utf-8", "text/vnd.ms.protobuf".
     * @param schemaContent String representation (UTF-8) of the schema.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the properties referencing an existing schema within the specified schema group, as matched by schema
     * content comparison along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> getSchemaPropertiesByContentWithResponse(String groupName, String schemaName, String contentType,
        BinaryData schemaContent, RequestOptions requestOptions) {
        // Convenience API is not generated, as operation 'getSchemaPropertiesByContent' is multiple content-type
        return this.serviceClient.getSchemaPropertiesByContentWithResponse(groupName, schemaName, contentType,
            schemaContent, requestOptions);
    }

    /**
     * Get list of schema groups.
     *
     * Gets the list of schema groups user is authorized to access.
     *
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of schema groups user is authorized to access as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<String> listSchemaGroups() {
        // Generated convenience method for listSchemaGroups
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.listSchemaGroups(requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(String.class));
    }

    /**
     * List schema versions.
     *
     * Gets the list of all versions of one schema.
     *
     * @param groupName Name of schema group.
     * @param schemaName Name of schema.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of all versions of one schema as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<Integer> listSchemaVersions(String groupName, String schemaName) {
        // Generated convenience method for listSchemaVersions
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.listSchemaVersions(groupName, schemaName, requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(Integer.class));
    }

    /**
     * Get a registered schema by its unique ID reference.
     *
     * Gets a registered schema by its unique ID. Azure Schema Registry guarantees that ID is unique within a namespace.
     * Operation response type is based on serialization of schema requested.
     *
     * @param id Schema ID that uniquely identifies a schema in the registry namespace.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a registered schema by its unique ID.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    BinaryData getSchemaById(String id) {
        // Generated convenience method for getSchemaByIdWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getSchemaByIdWithResponse(id, requestOptions).getValue();
    }

    /**
     * Get specific schema versions.
     *
     * Gets one specific version of one schema.
     *
     * @param groupName Name of schema group.
     * @param schemaName Name of schema.
     * @param schemaVersion Version number of specific schema.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return one specific version of one schema.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    BinaryData getSchemaByVersion(String groupName, String schemaName, int schemaVersion) {
        // Generated convenience method for getSchemaByVersionWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getSchemaByVersionWithResponse(groupName, schemaName, schemaVersion, requestOptions).getValue();
    }
}
