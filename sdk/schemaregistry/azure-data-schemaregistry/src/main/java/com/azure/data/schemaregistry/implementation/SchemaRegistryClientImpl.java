// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.data.schemaregistry.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.serializer.JacksonAdapter;
import com.azure.core.util.serializer.SerializerAdapter;
import com.azure.data.schemaregistry.SchemaRegistryServiceVersion;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the SchemaRegistryClient type.
 */
public final class SchemaRegistryClientImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final SchemaRegistryClientService service;

    /**
     * The Schema Registry service endpoint, for example 'my-namespace.servicebus.windows.net'.
     */
    private final String fullyQualifiedNamespace;

    /**
     * Gets The Schema Registry service endpoint, for example 'my-namespace.servicebus.windows.net'.
     * 
     * @return the fullyQualifiedNamespace value.
     */
    public String getFullyQualifiedNamespace() {
        return this.fullyQualifiedNamespace;
    }

    /**
     * Service version.
     */
    private final SchemaRegistryServiceVersion serviceVersion;

    /**
     * Gets Service version.
     * 
     * @return the serviceVersion value.
     */
    public SchemaRegistryServiceVersion getServiceVersion() {
        return this.serviceVersion;
    }

    /**
     * The HTTP pipeline to send requests through.
     */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     * 
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /**
     * The serializer to serialize an object into a string.
     */
    private final SerializerAdapter serializerAdapter;

    /**
     * Gets The serializer to serialize an object into a string.
     * 
     * @return the serializerAdapter value.
     */
    public SerializerAdapter getSerializerAdapter() {
        return this.serializerAdapter;
    }

    /**
     * Initializes an instance of SchemaRegistryClient client.
     * 
     * @param fullyQualifiedNamespace The Schema Registry service endpoint, for example
     * 'my-namespace.servicebus.windows.net'.
     * @param serviceVersion Service version.
     */
    public SchemaRegistryClientImpl(String fullyQualifiedNamespace, SchemaRegistryServiceVersion serviceVersion) {
        this(new HttpPipelineBuilder().policies(new UserAgentPolicy(), new RetryPolicy()).build(),
            JacksonAdapter.createDefaultSerializerAdapter(), fullyQualifiedNamespace, serviceVersion);
    }

    /**
     * Initializes an instance of SchemaRegistryClient client.
     * 
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param fullyQualifiedNamespace The Schema Registry service endpoint, for example
     * 'my-namespace.servicebus.windows.net'.
     * @param serviceVersion Service version.
     */
    public SchemaRegistryClientImpl(HttpPipeline httpPipeline, String fullyQualifiedNamespace,
        SchemaRegistryServiceVersion serviceVersion) {
        this(httpPipeline, JacksonAdapter.createDefaultSerializerAdapter(), fullyQualifiedNamespace, serviceVersion);
    }

    /**
     * Initializes an instance of SchemaRegistryClient client.
     * 
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param serializerAdapter The serializer to serialize an object into a string.
     * @param fullyQualifiedNamespace The Schema Registry service endpoint, for example
     * 'my-namespace.servicebus.windows.net'.
     * @param serviceVersion Service version.
     */
    public SchemaRegistryClientImpl(HttpPipeline httpPipeline, SerializerAdapter serializerAdapter,
        String fullyQualifiedNamespace, SchemaRegistryServiceVersion serviceVersion) {
        this.httpPipeline = httpPipeline;
        this.serializerAdapter = serializerAdapter;
        this.fullyQualifiedNamespace = fullyQualifiedNamespace;
        this.serviceVersion = serviceVersion;
        this.service
            = RestProxy.create(SchemaRegistryClientService.class, this.httpPipeline, this.getSerializerAdapter());
    }

    /**
     * The interface defining all the services for SchemaRegistryClient to be used by the proxy service to perform REST
     * calls.
     */
    @Host("https://{fullyQualifiedNamespace}")
    @ServiceInterface(name = "SchemaRegistryClient")
    public interface SchemaRegistryClientService {
        @Get("/$schemaGroups")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listSchemaGroups(
            @HostParam("fullyQualifiedNamespace") String fullyQualifiedNamespace,
            @QueryParam("api-version") String apiVersion, @HeaderParam("accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/$schemaGroups")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listSchemaGroupsSync(@HostParam("fullyQualifiedNamespace") String fullyQualifiedNamespace,
            @QueryParam("api-version") String apiVersion, @HeaderParam("accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/$schemaGroups/{groupName}/schemas/{schemaName}/versions")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listSchemaVersions(
            @HostParam("fullyQualifiedNamespace") String fullyQualifiedNamespace,
            @QueryParam("api-version") String apiVersion, @PathParam("groupName") String groupName,
            @PathParam("schemaName") String schemaName, @HeaderParam("accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/$schemaGroups/{groupName}/schemas/{schemaName}/versions")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listSchemaVersionsSync(
            @HostParam("fullyQualifiedNamespace") String fullyQualifiedNamespace,
            @QueryParam("api-version") String apiVersion, @PathParam("groupName") String groupName,
            @PathParam("schemaName") String schemaName, @HeaderParam("accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/$schemaGroups/$schemas/{id}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getSchemaById(@HostParam("fullyQualifiedNamespace") String fullyQualifiedNamespace,
            @QueryParam("api-version") String apiVersion, @PathParam("id") String id,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/$schemaGroups/$schemas/{id}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getSchemaByIdSync(@HostParam("fullyQualifiedNamespace") String fullyQualifiedNamespace,
            @QueryParam("api-version") String apiVersion, @PathParam("id") String id,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/$schemaGroups/{groupName}/schemas/{schemaName}/versions/{schemaVersion}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getSchemaByVersion(
            @HostParam("fullyQualifiedNamespace") String fullyQualifiedNamespace,
            @QueryParam("api-version") String apiVersion, @PathParam("groupName") String groupName,
            @PathParam("schemaName") String schemaName, @PathParam("schemaVersion") int schemaVersion,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/$schemaGroups/{groupName}/schemas/{schemaName}/versions/{schemaVersion}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getSchemaByVersionSync(
            @HostParam("fullyQualifiedNamespace") String fullyQualifiedNamespace,
            @QueryParam("api-version") String apiVersion, @PathParam("groupName") String groupName,
            @PathParam("schemaName") String schemaName, @PathParam("schemaVersion") int schemaVersion,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Post("/$schemaGroups/{groupName}/schemas/{schemaName}:get-id")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> getSchemaPropertiesByContent(
            @HostParam("fullyQualifiedNamespace") String fullyQualifiedNamespace,
            @QueryParam("api-version") String apiVersion, @PathParam("groupName") String groupName,
            @PathParam("schemaName") String schemaName, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("accept") String accept, @BodyParam("application/json") BinaryData schemaContent,
            RequestOptions requestOptions, Context context);

        @Post("/$schemaGroups/{groupName}/schemas/{schemaName}:get-id")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> getSchemaPropertiesByContentSync(
            @HostParam("fullyQualifiedNamespace") String fullyQualifiedNamespace,
            @QueryParam("api-version") String apiVersion, @PathParam("groupName") String groupName,
            @PathParam("schemaName") String schemaName, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("accept") String accept, @BodyParam("application/json") BinaryData schemaContent,
            RequestOptions requestOptions, Context context);

        @Put("/$schemaGroups/{groupName}/schemas/{schemaName}")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> registerSchema(@HostParam("fullyQualifiedNamespace") String fullyQualifiedNamespace,
            @QueryParam("api-version") String apiVersion, @PathParam("groupName") String groupName,
            @PathParam("schemaName") String schemaName, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("accept") String accept, @BodyParam("application/json") BinaryData schemaContent,
            RequestOptions requestOptions, Context context);

        @Put("/$schemaGroups/{groupName}/schemas/{schemaName}")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> registerSchemaSync(@HostParam("fullyQualifiedNamespace") String fullyQualifiedNamespace,
            @QueryParam("api-version") String apiVersion, @PathParam("groupName") String groupName,
            @PathParam("schemaName") String schemaName, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("accept") String accept, @BodyParam("application/json") BinaryData schemaContent,
            RequestOptions requestOptions, Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listSchemaGroupsNext(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("fullyQualifiedNamespace") String fullyQualifiedNamespace, @HeaderParam("accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listSchemaGroupsNextSync(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("fullyQualifiedNamespace") String fullyQualifiedNamespace, @HeaderParam("accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listSchemaVersionsNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("fullyQualifiedNamespace") String fullyQualifiedNamespace, @HeaderParam("accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listSchemaVersionsNextSync(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("fullyQualifiedNamespace") String fullyQualifiedNamespace, @HeaderParam("accept") String accept,
            RequestOptions requestOptions, Context context);
    }

    /**
     * Get list of schema groups.
     * 
     * Gets the list of schema groups user is authorized to access.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * String
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of schema groups user is authorized to access along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listSchemaGroupsSinglePageAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listSchemaGroups(this.getFullyQualifiedNamespace(),
                this.getServiceVersion().getVersion(), accept, requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "Value"), getNextLink(res.getValue(), "NextLink"), null));
    }

    /**
     * Get list of schema groups.
     * 
     * Gets the list of schema groups user is authorized to access.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * String
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of schema groups user is authorized to access as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listSchemaGroupsAsync(RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedFlux<>(() -> listSchemaGroupsSinglePageAsync(requestOptions),
            nextLink -> listSchemaGroupsNextSinglePageAsync(nextLink, requestOptionsForNextPage));
    }

    /**
     * Get list of schema groups.
     * 
     * Gets the list of schema groups user is authorized to access.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * String
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of schema groups user is authorized to access along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listSchemaGroupsSinglePage(RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res = service.listSchemaGroupsSync(this.getFullyQualifiedNamespace(),
            this.getServiceVersion().getVersion(), accept, requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "Value"), getNextLink(res.getValue(), "NextLink"), null);
    }

    /**
     * Get list of schema groups.
     * 
     * Gets the list of schema groups user is authorized to access.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * String
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of schema groups user is authorized to access as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listSchemaGroups(RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedIterable<>(() -> listSchemaGroupsSinglePage(requestOptions),
            nextLink -> listSchemaGroupsNextSinglePage(nextLink, requestOptionsForNextPage));
    }

    /**
     * List schema versions.
     * 
     * Gets the list of all versions of one schema.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * int
     * }</pre>
     * 
     * @param groupName Name of schema group.
     * @param schemaName Name of schema.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of all versions of one schema along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listSchemaVersionsSinglePageAsync(String groupName, String schemaName,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listSchemaVersions(this.getFullyQualifiedNamespace(),
                this.getServiceVersion().getVersion(), groupName, schemaName, accept, requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "Value"), getNextLink(res.getValue(), "NextLink"), null));
    }

    /**
     * List schema versions.
     * 
     * Gets the list of all versions of one schema.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * int
     * }</pre>
     * 
     * @param groupName Name of schema group.
     * @param schemaName Name of schema.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of all versions of one schema as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listSchemaVersionsAsync(String groupName, String schemaName,
        RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedFlux<>(() -> listSchemaVersionsSinglePageAsync(groupName, schemaName, requestOptions),
            nextLink -> listSchemaVersionsNextSinglePageAsync(nextLink, requestOptionsForNextPage));
    }

    /**
     * List schema versions.
     * 
     * Gets the list of all versions of one schema.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * int
     * }</pre>
     * 
     * @param groupName Name of schema group.
     * @param schemaName Name of schema.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of all versions of one schema along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listSchemaVersionsSinglePage(String groupName, String schemaName,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res = service.listSchemaVersionsSync(this.getFullyQualifiedNamespace(),
            this.getServiceVersion().getVersion(), groupName, schemaName, accept, requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "Value"), getNextLink(res.getValue(), "NextLink"), null);
    }

    /**
     * List schema versions.
     * 
     * Gets the list of all versions of one schema.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * int
     * }</pre>
     * 
     * @param groupName Name of schema group.
     * @param schemaName Name of schema.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of all versions of one schema as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listSchemaVersions(String groupName, String schemaName,
        RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedIterable<>(() -> listSchemaVersionsSinglePage(groupName, schemaName, requestOptions),
            nextLink -> listSchemaVersionsNextSinglePage(nextLink, requestOptionsForNextPage));
    }

    /**
     * Get a registered schema by its unique ID reference.
     * 
     * Gets a registered schema by its unique ID. Azure Schema Registry guarantees that ID is unique within a namespace.
     * Operation response type is based on serialization of schema requested.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * BinaryData
     * }</pre>
     * 
     * @param id Schema ID that uniquely identifies a schema in the registry namespace.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a registered schema by its unique ID along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getSchemaByIdWithResponseAsync(String id, RequestOptions requestOptions) {
        final String accept
            = "application/json; serialization=Avro, application/json; serialization=Json, text/plain; charset=utf-8, text/vnd.ms.protobuf, application/json";
        return FluxUtil.withContext(context -> service.getSchemaById(this.getFullyQualifiedNamespace(),
            this.getServiceVersion().getVersion(), id, accept, requestOptions, context));
    }

    /**
     * Get a registered schema by its unique ID reference.
     * 
     * Gets a registered schema by its unique ID. Azure Schema Registry guarantees that ID is unique within a namespace.
     * Operation response type is based on serialization of schema requested.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * BinaryData
     * }</pre>
     * 
     * @param id Schema ID that uniquely identifies a schema in the registry namespace.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a registered schema by its unique ID along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getSchemaByIdWithResponse(String id, RequestOptions requestOptions) {
        final String accept
            = "application/json; serialization=Avro, application/json; serialization=Json, text/plain; charset=utf-8, text/vnd.ms.protobuf, application/json";
        return service.getSchemaByIdSync(this.getFullyQualifiedNamespace(), this.getServiceVersion().getVersion(), id,
            accept, requestOptions, Context.NONE);
    }

    /**
     * Get specific schema versions.
     * 
     * Gets one specific version of one schema.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * BinaryData
     * }</pre>
     * 
     * @param groupName Name of schema group.
     * @param schemaName Name of schema.
     * @param schemaVersion Version number of specific schema.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return one specific version of one schema along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getSchemaByVersionWithResponseAsync(String groupName, String schemaName,
        int schemaVersion, RequestOptions requestOptions) {
        final String accept
            = "application/json; serialization=Avro, application/json; serialization=Json, text/plain; charset=utf-8, text/vnd.ms.protobuf, application/json";
        return FluxUtil.withContext(context -> service.getSchemaByVersion(this.getFullyQualifiedNamespace(),
            this.getServiceVersion().getVersion(), groupName, schemaName, schemaVersion, accept, requestOptions,
            context));
    }

    /**
     * Get specific schema versions.
     * 
     * Gets one specific version of one schema.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * BinaryData
     * }</pre>
     * 
     * @param groupName Name of schema group.
     * @param schemaName Name of schema.
     * @param schemaVersion Version number of specific schema.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return one specific version of one schema along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getSchemaByVersionWithResponse(String groupName, String schemaName, int schemaVersion,
        RequestOptions requestOptions) {
        final String accept
            = "application/json; serialization=Avro, application/json; serialization=Json, text/plain; charset=utf-8, text/vnd.ms.protobuf, application/json";
        return service.getSchemaByVersionSync(this.getFullyQualifiedNamespace(), this.getServiceVersion().getVersion(),
            groupName, schemaName, schemaVersion, accept, requestOptions, Context.NONE);
    }

    /**
     * Get properties for existing schema.
     * 
     * Gets the properties referencing an existing schema within the specified schema group, as matched by schema
     * content comparison.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * BinaryData
     * }</pre>
     * 
     * @param groupName Name of schema group.
     * @param schemaName Name of schema.
     * @param contentType The content type for given schema. Allowed values: "application/json; serialization=Avro",
     * "application/json; serialization=Json", "text/plain; charset=utf-8", "text/vnd.ms.protobuf".
     * @param schemaContent String representation (UTF-8) of the schema.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the properties referencing an existing schema within the specified schema group, as matched by schema
     * content comparison along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> getSchemaPropertiesByContentWithResponseAsync(String groupName, String schemaName,
        String contentType, BinaryData schemaContent, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getSchemaPropertiesByContent(this.getFullyQualifiedNamespace(),
            this.getServiceVersion().getVersion(), groupName, schemaName, contentType, accept, schemaContent,
            requestOptions, context));
    }

    /**
     * Get properties for existing schema.
     * 
     * Gets the properties referencing an existing schema within the specified schema group, as matched by schema
     * content comparison.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * BinaryData
     * }</pre>
     * 
     * @param groupName Name of schema group.
     * @param schemaName Name of schema.
     * @param contentType The content type for given schema. Allowed values: "application/json; serialization=Avro",
     * "application/json; serialization=Json", "text/plain; charset=utf-8", "text/vnd.ms.protobuf".
     * @param schemaContent String representation (UTF-8) of the schema.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the properties referencing an existing schema within the specified schema group, as matched by schema
     * content comparison along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> getSchemaPropertiesByContentWithResponse(String groupName, String schemaName,
        String contentType, BinaryData schemaContent, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getSchemaPropertiesByContentSync(this.getFullyQualifiedNamespace(),
            this.getServiceVersion().getVersion(), groupName, schemaName, contentType, accept, schemaContent,
            requestOptions, Context.NONE);
    }

    /**
     * Register new schema
     * 
     * Register new schema. If schema of specified name does not exist in specified group, schema is created at version
     * 1. If schema of specified name exists already in specified group, schema is created at latest version + 1.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * BinaryData
     * }</pre>
     * 
     * @param groupName Name of schema group.
     * @param schemaName Name of schema.
     * @param contentType The content type for given schema. Allowed values: "application/json; serialization=Avro",
     * "application/json; serialization=Json", "text/plain; charset=utf-8", "text/vnd.ms.protobuf".
     * @param schemaContent String representation (UTF-8) of the schema.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> registerSchemaWithResponseAsync(String groupName, String schemaName, String contentType,
        BinaryData schemaContent, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.registerSchema(this.getFullyQualifiedNamespace(), this.getServiceVersion().getVersion(),
                groupName, schemaName, contentType, accept, schemaContent, requestOptions, context));
    }

    /**
     * Register new schema
     * 
     * Register new schema. If schema of specified name does not exist in specified group, schema is created at version
     * 1. If schema of specified name exists already in specified group, schema is created at latest version + 1.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * BinaryData
     * }</pre>
     * 
     * @param groupName Name of schema group.
     * @param schemaName Name of schema.
     * @param contentType The content type for given schema. Allowed values: "application/json; serialization=Avro",
     * "application/json; serialization=Json", "text/plain; charset=utf-8", "text/vnd.ms.protobuf".
     * @param schemaContent String representation (UTF-8) of the schema.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> registerSchemaWithResponse(String groupName, String schemaName, String contentType,
        BinaryData schemaContent, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.registerSchemaSync(this.getFullyQualifiedNamespace(), this.getServiceVersion().getVersion(),
            groupName, schemaName, contentType, accept, schemaContent, requestOptions, Context.NONE);
    }

    /**
     * Get list of schema groups.
     * 
     * Get the next page of items.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * String
     * }</pre>
     * 
     * @param nextLink The URL to get the next list of items.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of schema group names with server paging support along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listSchemaGroupsNextSinglePageAsync(String nextLink,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listSchemaGroupsNext(nextLink, this.getFullyQualifiedNamespace(), accept,
                requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "Value"), getNextLink(res.getValue(), "NextLink"), null));
    }

    /**
     * Get list of schema groups.
     * 
     * Get the next page of items.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * String
     * }</pre>
     * 
     * @param nextLink The URL to get the next list of items.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of schema group names with server paging support along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listSchemaGroupsNextSinglePage(String nextLink, RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res = service.listSchemaGroupsNextSync(nextLink, this.getFullyQualifiedNamespace(), accept,
            requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "Value"), getNextLink(res.getValue(), "NextLink"), null);
    }

    /**
     * List schema versions.
     * 
     * Get the next page of items.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * int
     * }</pre>
     * 
     * @param nextLink The URL to get the next list of items.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of schema versions with server paging support along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listSchemaVersionsNextSinglePageAsync(String nextLink,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listSchemaVersionsNext(nextLink, this.getFullyQualifiedNamespace(), accept,
                requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "Value"), getNextLink(res.getValue(), "NextLink"), null));
    }

    /**
     * List schema versions.
     * 
     * Get the next page of items.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * int
     * }</pre>
     * 
     * @param nextLink The URL to get the next list of items.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of schema versions with server paging support along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listSchemaVersionsNextSinglePage(String nextLink, RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res = service.listSchemaVersionsNextSync(nextLink, this.getFullyQualifiedNamespace(),
            accept, requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "Value"), getNextLink(res.getValue(), "NextLink"), null);
    }

    private List<BinaryData> getValues(BinaryData binaryData, String path) {
        try {
            Map<?, ?> obj = binaryData.toObject(Map.class);
            List<?> values = (List<?>) obj.get(path);
            return values.stream().map(BinaryData::fromObject).collect(Collectors.toList());
        } catch (RuntimeException e) {
            return null;
        }
    }

    private String getNextLink(BinaryData binaryData, String path) {
        try {
            Map<?, ?> obj = binaryData.toObject(Map.class);
            return (String) obj.get(path);
        } catch (RuntimeException e) {
            return null;
        }
    }
}
