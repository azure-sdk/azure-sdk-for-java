// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.intelligentdataexperiences.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.intelligentdataexperiences.fluent.DiagnosticSettingsClient;
import com.azure.resourcemanager.intelligentdataexperiences.fluent.models.DiagnosticSettingsResourceCollectionInner;
import com.azure.resourcemanager.intelligentdataexperiences.fluent.models.DiagnosticSettingsResourceInner;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in DiagnosticSettingsClient. */
public final class DiagnosticSettingsClientImpl implements DiagnosticSettingsClient {
    /** The proxy service used to perform REST calls. */
    private final DiagnosticSettingsService service;

    /** The service client containing this operation class. */
    private final AadcustomsecurityattributesdiagnosticsettingsImpl client;

    /**
     * Initializes an instance of DiagnosticSettingsClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    DiagnosticSettingsClientImpl(AadcustomsecurityattributesdiagnosticsettingsImpl client) {
        this.service =
            RestProxy.create(DiagnosticSettingsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AadcustomsecurityattributesdiagnosticsettingsDiagnosticSettings to be
     * used by the proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "Aadcustomsecurityatt")
    public interface DiagnosticSettingsService {
        @Headers({"Content-Type: application/json"})
        @Get("/providers/Microsoft.AadCustomSecurityAttributesDiagnosticSettings/diagnosticSettings")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DiagnosticSettingsResourceCollectionInner>> list(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/providers/Microsoft.AadCustomSecurityAttributesDiagnosticSettings/diagnosticSettings/{diagnosticSettingName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DiagnosticSettingsResourceInner>> get(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("diagnosticSettingName") String diagnosticSettingName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put(
            "/providers/Microsoft.AadCustomSecurityAttributesDiagnosticSettings/diagnosticSettings/{diagnosticSettingName}")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DiagnosticSettingsResourceInner>> createOrUpdate(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("diagnosticSettingName") String diagnosticSettingName,
            @BodyParam("application/json") DiagnosticSettingsResourceInner parameters,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete(
            "/providers/Microsoft.AadCustomSecurityAttributesDiagnosticSettings/diagnosticSettings/{diagnosticSettingName}")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> delete(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("diagnosticSettingName") String diagnosticSettingName,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Gets the active diagnostic settings list for AadCustomSecurityAttributesDiagnosticSettings.
     *
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the active diagnostic settings list for AadCustomSecurityAttributesDiagnosticSettings along with {@link
     *     Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DiagnosticSettingsResourceCollectionInner>> listWithResponseAsync() {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.list(this.client.getEndpoint(), this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets the active diagnostic settings list for AadCustomSecurityAttributesDiagnosticSettings.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the active diagnostic settings list for AadCustomSecurityAttributesDiagnosticSettings along with {@link
     *     Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DiagnosticSettingsResourceCollectionInner>> listWithResponseAsync(Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.list(this.client.getEndpoint(), this.client.getApiVersion(), accept, context);
    }

    /**
     * Gets the active diagnostic settings list for AadCustomSecurityAttributesDiagnosticSettings.
     *
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the active diagnostic settings list for AadCustomSecurityAttributesDiagnosticSettings on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DiagnosticSettingsResourceCollectionInner> listAsync() {
        return listWithResponseAsync().flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets the active diagnostic settings list for AadCustomSecurityAttributesDiagnosticSettings.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the active diagnostic settings list for AadCustomSecurityAttributesDiagnosticSettings along with {@link
     *     Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<DiagnosticSettingsResourceCollectionInner> listWithResponse(Context context) {
        return listWithResponseAsync(context).block();
    }

    /**
     * Gets the active diagnostic settings list for AadCustomSecurityAttributesDiagnosticSettings.
     *
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the active diagnostic settings list for AadCustomSecurityAttributesDiagnosticSettings.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DiagnosticSettingsResourceCollectionInner list() {
        return listWithResponse(Context.NONE).getValue();
    }

    /**
     * Gets the active diagnostic setting for AadCustomSecurityAttributesDiagnosticSettings.
     *
     * @param diagnosticSettingName The name of the diagnostic setting.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the active diagnostic setting for AadCustomSecurityAttributesDiagnosticSettings along with {@link
     *     Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DiagnosticSettingsResourceInner>> getWithResponseAsync(String diagnosticSettingName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (diagnosticSettingName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter diagnosticSettingName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .get(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            diagnosticSettingName,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets the active diagnostic setting for AadCustomSecurityAttributesDiagnosticSettings.
     *
     * @param diagnosticSettingName The name of the diagnostic setting.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the active diagnostic setting for AadCustomSecurityAttributesDiagnosticSettings along with {@link
     *     Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DiagnosticSettingsResourceInner>> getWithResponseAsync(
        String diagnosticSettingName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (diagnosticSettingName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter diagnosticSettingName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .get(this.client.getEndpoint(), this.client.getApiVersion(), diagnosticSettingName, accept, context);
    }

    /**
     * Gets the active diagnostic setting for AadCustomSecurityAttributesDiagnosticSettings.
     *
     * @param diagnosticSettingName The name of the diagnostic setting.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the active diagnostic setting for AadCustomSecurityAttributesDiagnosticSettings on successful completion
     *     of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DiagnosticSettingsResourceInner> getAsync(String diagnosticSettingName) {
        return getWithResponseAsync(diagnosticSettingName).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets the active diagnostic setting for AadCustomSecurityAttributesDiagnosticSettings.
     *
     * @param diagnosticSettingName The name of the diagnostic setting.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the active diagnostic setting for AadCustomSecurityAttributesDiagnosticSettings along with {@link
     *     Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<DiagnosticSettingsResourceInner> getWithResponse(String diagnosticSettingName, Context context) {
        return getWithResponseAsync(diagnosticSettingName, context).block();
    }

    /**
     * Gets the active diagnostic setting for AadCustomSecurityAttributesDiagnosticSettings.
     *
     * @param diagnosticSettingName The name of the diagnostic setting.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the active diagnostic setting for AadCustomSecurityAttributesDiagnosticSettings.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DiagnosticSettingsResourceInner get(String diagnosticSettingName) {
        return getWithResponse(diagnosticSettingName, Context.NONE).getValue();
    }

    /**
     * Creates or updates diagnostic settings for AadCustomSecurityAttributesDiagnosticSettings.
     *
     * @param diagnosticSettingName The name of the diagnostic setting.
     * @param parameters Parameters supplied to the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the diagnostic setting resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DiagnosticSettingsResourceInner>> createOrUpdateWithResponseAsync(
        String diagnosticSettingName, DiagnosticSettingsResourceInner parameters) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (diagnosticSettingName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter diagnosticSettingName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .createOrUpdate(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            diagnosticSettingName,
                            parameters,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Creates or updates diagnostic settings for AadCustomSecurityAttributesDiagnosticSettings.
     *
     * @param diagnosticSettingName The name of the diagnostic setting.
     * @param parameters Parameters supplied to the operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the diagnostic setting resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DiagnosticSettingsResourceInner>> createOrUpdateWithResponseAsync(
        String diagnosticSettingName, DiagnosticSettingsResourceInner parameters, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (diagnosticSettingName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter diagnosticSettingName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .createOrUpdate(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                diagnosticSettingName,
                parameters,
                accept,
                context);
    }

    /**
     * Creates or updates diagnostic settings for AadCustomSecurityAttributesDiagnosticSettings.
     *
     * @param diagnosticSettingName The name of the diagnostic setting.
     * @param parameters Parameters supplied to the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the diagnostic setting resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DiagnosticSettingsResourceInner> createOrUpdateAsync(
        String diagnosticSettingName, DiagnosticSettingsResourceInner parameters) {
        return createOrUpdateWithResponseAsync(diagnosticSettingName, parameters)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Creates or updates diagnostic settings for AadCustomSecurityAttributesDiagnosticSettings.
     *
     * @param diagnosticSettingName The name of the diagnostic setting.
     * @param parameters Parameters supplied to the operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the diagnostic setting resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<DiagnosticSettingsResourceInner> createOrUpdateWithResponse(
        String diagnosticSettingName, DiagnosticSettingsResourceInner parameters, Context context) {
        return createOrUpdateWithResponseAsync(diagnosticSettingName, parameters, context).block();
    }

    /**
     * Creates or updates diagnostic settings for AadCustomSecurityAttributesDiagnosticSettings.
     *
     * @param diagnosticSettingName The name of the diagnostic setting.
     * @param parameters Parameters supplied to the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the diagnostic setting resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DiagnosticSettingsResourceInner createOrUpdate(
        String diagnosticSettingName, DiagnosticSettingsResourceInner parameters) {
        return createOrUpdateWithResponse(diagnosticSettingName, parameters, Context.NONE).getValue();
    }

    /**
     * Deletes existing diagnostic setting for AadCustomSecurityAttributesDiagnosticSettings.
     *
     * @param diagnosticSettingName The name of the diagnostic setting.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(String diagnosticSettingName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (diagnosticSettingName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter diagnosticSettingName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .delete(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            diagnosticSettingName,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Deletes existing diagnostic setting for AadCustomSecurityAttributesDiagnosticSettings.
     *
     * @param diagnosticSettingName The name of the diagnostic setting.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(String diagnosticSettingName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (diagnosticSettingName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter diagnosticSettingName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .delete(this.client.getEndpoint(), this.client.getApiVersion(), diagnosticSettingName, accept, context);
    }

    /**
     * Deletes existing diagnostic setting for AadCustomSecurityAttributesDiagnosticSettings.
     *
     * @param diagnosticSettingName The name of the diagnostic setting.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String diagnosticSettingName) {
        return deleteWithResponseAsync(diagnosticSettingName).flatMap(ignored -> Mono.empty());
    }

    /**
     * Deletes existing diagnostic setting for AadCustomSecurityAttributesDiagnosticSettings.
     *
     * @param diagnosticSettingName The name of the diagnostic setting.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(String diagnosticSettingName, Context context) {
        return deleteWithResponseAsync(diagnosticSettingName, context).block();
    }

    /**
     * Deletes existing diagnostic setting for AadCustomSecurityAttributesDiagnosticSettings.
     *
     * @param diagnosticSettingName The name of the diagnostic setting.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String diagnosticSettingName) {
        deleteWithResponse(diagnosticSettingName, Context.NONE);
    }
}
