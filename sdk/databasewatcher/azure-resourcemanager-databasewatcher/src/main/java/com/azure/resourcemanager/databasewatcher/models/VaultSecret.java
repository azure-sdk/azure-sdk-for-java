// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databasewatcher.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * The vault specific details required if using SQL authentication to connect to a target.
 */
@Fluent
public final class VaultSecret {
    /*
     * The Azure ResourceId of the Key Vault instance storing database authentication secrets.
     */
    @JsonProperty(value = "akvResourceId")
    private String akvResourceId;

    /*
     * The path to the Key Vault secret storing the login name (aka user name, aka account name) for authentication to
     * a target.
     */
    @JsonProperty(value = "akvTargetUser")
    private String akvTargetUser;

    /*
     * The path to the Key Vault secret storing the password for authentication to a target.
     */
    @JsonProperty(value = "akvTargetPassword")
    private String akvTargetPassword;

    /**
     * Creates an instance of VaultSecret class.
     */
    public VaultSecret() {
    }

    /**
     * Get the akvResourceId property: The Azure ResourceId of the Key Vault instance storing database authentication
     * secrets.
     * 
     * @return the akvResourceId value.
     */
    public String akvResourceId() {
        return this.akvResourceId;
    }

    /**
     * Set the akvResourceId property: The Azure ResourceId of the Key Vault instance storing database authentication
     * secrets.
     * 
     * @param akvResourceId the akvResourceId value to set.
     * @return the VaultSecret object itself.
     */
    public VaultSecret withAkvResourceId(String akvResourceId) {
        this.akvResourceId = akvResourceId;
        return this;
    }

    /**
     * Get the akvTargetUser property: The path to the Key Vault secret storing the login name (aka user name, aka
     * account name) for authentication to a target.
     * 
     * @return the akvTargetUser value.
     */
    public String akvTargetUser() {
        return this.akvTargetUser;
    }

    /**
     * Set the akvTargetUser property: The path to the Key Vault secret storing the login name (aka user name, aka
     * account name) for authentication to a target.
     * 
     * @param akvTargetUser the akvTargetUser value to set.
     * @return the VaultSecret object itself.
     */
    public VaultSecret withAkvTargetUser(String akvTargetUser) {
        this.akvTargetUser = akvTargetUser;
        return this;
    }

    /**
     * Get the akvTargetPassword property: The path to the Key Vault secret storing the password for authentication to
     * a target.
     * 
     * @return the akvTargetPassword value.
     */
    public String akvTargetPassword() {
        return this.akvTargetPassword;
    }

    /**
     * Set the akvTargetPassword property: The path to the Key Vault secret storing the password for authentication to
     * a target.
     * 
     * @param akvTargetPassword the akvTargetPassword value to set.
     * @return the VaultSecret object itself.
     */
    public VaultSecret withAkvTargetPassword(String akvTargetPassword) {
        this.akvTargetPassword = akvTargetPassword;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
