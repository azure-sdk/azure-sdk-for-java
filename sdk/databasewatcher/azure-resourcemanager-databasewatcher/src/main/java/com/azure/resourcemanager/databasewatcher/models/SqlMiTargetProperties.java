// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databasewatcher.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * The properties specific to Azure SQL Managed Instance targets.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "targetType")
@JsonTypeName("SqlMi")
@Fluent
public final class SqlMiTargetProperties extends TargetProperties {
    /*
     * The Azure ResourceId of an Azure SQL Managed Instance target.
     */
    @JsonProperty(value = "sqlMiResourceId", required = true)
    private String sqlMiResourceId;

    /*
     * The TCP port number to optionally use in the connection string when connecting to an Azure SQL Managed Instance
     * target.
     */
    @JsonProperty(value = "connectionTcpPort")
    private Integer connectionTcpPort;

    /*
     * Set to true to monitor a high availability replica of specified target, if any.
     */
    @JsonProperty(value = "readIntent")
    private Boolean readIntent;

    /**
     * Creates an instance of SqlMiTargetProperties class.
     */
    public SqlMiTargetProperties() {
    }

    /**
     * Get the sqlMiResourceId property: The Azure ResourceId of an Azure SQL Managed Instance target.
     * 
     * @return the sqlMiResourceId value.
     */
    public String sqlMiResourceId() {
        return this.sqlMiResourceId;
    }

    /**
     * Set the sqlMiResourceId property: The Azure ResourceId of an Azure SQL Managed Instance target.
     * 
     * @param sqlMiResourceId the sqlMiResourceId value to set.
     * @return the SqlMiTargetProperties object itself.
     */
    public SqlMiTargetProperties withSqlMiResourceId(String sqlMiResourceId) {
        this.sqlMiResourceId = sqlMiResourceId;
        return this;
    }

    /**
     * Get the connectionTcpPort property: The TCP port number to optionally use in the connection string when
     * connecting to an Azure SQL Managed Instance target.
     * 
     * @return the connectionTcpPort value.
     */
    public Integer connectionTcpPort() {
        return this.connectionTcpPort;
    }

    /**
     * Set the connectionTcpPort property: The TCP port number to optionally use in the connection string when
     * connecting to an Azure SQL Managed Instance target.
     * 
     * @param connectionTcpPort the connectionTcpPort value to set.
     * @return the SqlMiTargetProperties object itself.
     */
    public SqlMiTargetProperties withConnectionTcpPort(Integer connectionTcpPort) {
        this.connectionTcpPort = connectionTcpPort;
        return this;
    }

    /**
     * Get the readIntent property: Set to true to monitor a high availability replica of specified target, if any.
     * 
     * @return the readIntent value.
     */
    public Boolean readIntent() {
        return this.readIntent;
    }

    /**
     * Set the readIntent property: Set to true to monitor a high availability replica of specified target, if any.
     * 
     * @param readIntent the readIntent value to set.
     * @return the SqlMiTargetProperties object itself.
     */
    public SqlMiTargetProperties withReadIntent(Boolean readIntent) {
        this.readIntent = readIntent;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SqlMiTargetProperties withTargetAuthenticationType(TargetAuthenticationType targetAuthenticationType) {
        super.withTargetAuthenticationType(targetAuthenticationType);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SqlMiTargetProperties withTargetVault(VaultSecret targetVault) {
        super.withTargetVault(targetVault);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SqlMiTargetProperties withConnectionServerName(String connectionServerName) {
        super.withConnectionServerName(connectionServerName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SqlMiTargetProperties withTargetCollectionStatus(StringModel targetCollectionStatus) {
        super.withTargetCollectionStatus(targetCollectionStatus);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (sqlMiResourceId() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property sqlMiResourceId in model SqlMiTargetProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(SqlMiTargetProperties.class);
}
