// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databasewatcher.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * The properties specific to elastic pool in Azure SQL Database.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "targetType")
@JsonTypeName("SqlEp")
@Fluent
public final class SqlDbElasticPoolTargetProperties extends TargetProperties {
    /*
     * The Azure ResourceId of an Azure SQL DB elastic pool target.
     */
    @JsonProperty(value = "sqlEpResourceId", required = true)
    private String sqlEpResourceId;

    /*
     * The Azure ResourceId of the anchor database used to connect to an elastic pool.
     */
    @JsonProperty(value = "anchorDatabaseResourceId", required = true)
    private String anchorDatabaseResourceId;

    /*
     * Set to true to monitor a high availability replica of specified target, if any.
     */
    @JsonProperty(value = "readIntent")
    private Boolean readIntent;

    /**
     * Creates an instance of SqlDbElasticPoolTargetProperties class.
     */
    public SqlDbElasticPoolTargetProperties() {
    }

    /**
     * Get the sqlEpResourceId property: The Azure ResourceId of an Azure SQL DB elastic pool target.
     * 
     * @return the sqlEpResourceId value.
     */
    public String sqlEpResourceId() {
        return this.sqlEpResourceId;
    }

    /**
     * Set the sqlEpResourceId property: The Azure ResourceId of an Azure SQL DB elastic pool target.
     * 
     * @param sqlEpResourceId the sqlEpResourceId value to set.
     * @return the SqlDbElasticPoolTargetProperties object itself.
     */
    public SqlDbElasticPoolTargetProperties withSqlEpResourceId(String sqlEpResourceId) {
        this.sqlEpResourceId = sqlEpResourceId;
        return this;
    }

    /**
     * Get the anchorDatabaseResourceId property: The Azure ResourceId of the anchor database used to connect to an
     * elastic pool.
     * 
     * @return the anchorDatabaseResourceId value.
     */
    public String anchorDatabaseResourceId() {
        return this.anchorDatabaseResourceId;
    }

    /**
     * Set the anchorDatabaseResourceId property: The Azure ResourceId of the anchor database used to connect to an
     * elastic pool.
     * 
     * @param anchorDatabaseResourceId the anchorDatabaseResourceId value to set.
     * @return the SqlDbElasticPoolTargetProperties object itself.
     */
    public SqlDbElasticPoolTargetProperties withAnchorDatabaseResourceId(String anchorDatabaseResourceId) {
        this.anchorDatabaseResourceId = anchorDatabaseResourceId;
        return this;
    }

    /**
     * Get the readIntent property: Set to true to monitor a high availability replica of specified target, if any.
     * 
     * @return the readIntent value.
     */
    public Boolean readIntent() {
        return this.readIntent;
    }

    /**
     * Set the readIntent property: Set to true to monitor a high availability replica of specified target, if any.
     * 
     * @param readIntent the readIntent value to set.
     * @return the SqlDbElasticPoolTargetProperties object itself.
     */
    public SqlDbElasticPoolTargetProperties withReadIntent(Boolean readIntent) {
        this.readIntent = readIntent;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SqlDbElasticPoolTargetProperties
        withTargetAuthenticationType(TargetAuthenticationType targetAuthenticationType) {
        super.withTargetAuthenticationType(targetAuthenticationType);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SqlDbElasticPoolTargetProperties withTargetVault(VaultSecret targetVault) {
        super.withTargetVault(targetVault);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SqlDbElasticPoolTargetProperties withConnectionServerName(String connectionServerName) {
        super.withConnectionServerName(connectionServerName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SqlDbElasticPoolTargetProperties withTargetCollectionStatus(StringModel targetCollectionStatus) {
        super.withTargetCollectionStatus(targetCollectionStatus);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (sqlEpResourceId() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property sqlEpResourceId in model SqlDbElasticPoolTargetProperties"));
        }
        if (anchorDatabaseResourceId() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property anchorDatabaseResourceId in model SqlDbElasticPoolTargetProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(SqlDbElasticPoolTargetProperties.class);
}
