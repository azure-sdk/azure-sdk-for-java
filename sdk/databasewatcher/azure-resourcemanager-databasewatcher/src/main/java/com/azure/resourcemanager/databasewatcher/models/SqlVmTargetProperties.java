// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databasewatcher.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeId;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * The properties specific to Azure SQL VM targets.
 */
@JsonTypeInfo(
    use = JsonTypeInfo.Id.NAME,
    property = "targetType",
    defaultImpl = SqlVmTargetProperties.class,
    visible = true)
@JsonTypeName("SqlVm")
@Fluent
public final class SqlVmTargetProperties extends TargetProperties {
    /*
     * Discriminator property for TargetProperties.
     */
    @JsonTypeId
    @JsonProperty(value = "targetType", required = true)
    private String targetType = "SqlVm";

    /*
     * The Azure ResourceId of an Azure SQL VM target.
     */
    @JsonProperty(value = "sqlVmResourceId", required = true)
    private String sqlVmResourceId;

    /*
     * The TCP port number to optionally use in the connection string when connecting to an Azure SQL VM target.
     */
    @JsonProperty(value = "connectionTcpPort")
    private Integer connectionTcpPort;

    /*
     * The SQL instance name to optionally use in the connection string when connecting to an Azure SQL VM target.
     */
    @JsonProperty(value = "sqlNamedInstanceName")
    private String sqlNamedInstanceName;

    /**
     * Creates an instance of SqlVmTargetProperties class.
     */
    public SqlVmTargetProperties() {
    }

    /**
     * Get the targetType property: Discriminator property for TargetProperties.
     * 
     * @return the targetType value.
     */
    @Override
    public String targetType() {
        return this.targetType;
    }

    /**
     * Get the sqlVmResourceId property: The Azure ResourceId of an Azure SQL VM target.
     * 
     * @return the sqlVmResourceId value.
     */
    public String sqlVmResourceId() {
        return this.sqlVmResourceId;
    }

    /**
     * Set the sqlVmResourceId property: The Azure ResourceId of an Azure SQL VM target.
     * 
     * @param sqlVmResourceId the sqlVmResourceId value to set.
     * @return the SqlVmTargetProperties object itself.
     */
    public SqlVmTargetProperties withSqlVmResourceId(String sqlVmResourceId) {
        this.sqlVmResourceId = sqlVmResourceId;
        return this;
    }

    /**
     * Get the connectionTcpPort property: The TCP port number to optionally use in the connection string when
     * connecting to an Azure SQL VM target.
     * 
     * @return the connectionTcpPort value.
     */
    public Integer connectionTcpPort() {
        return this.connectionTcpPort;
    }

    /**
     * Set the connectionTcpPort property: The TCP port number to optionally use in the connection string when
     * connecting to an Azure SQL VM target.
     * 
     * @param connectionTcpPort the connectionTcpPort value to set.
     * @return the SqlVmTargetProperties object itself.
     */
    public SqlVmTargetProperties withConnectionTcpPort(Integer connectionTcpPort) {
        this.connectionTcpPort = connectionTcpPort;
        return this;
    }

    /**
     * Get the sqlNamedInstanceName property: The SQL instance name to optionally use in the connection string when
     * connecting to an Azure SQL VM target.
     * 
     * @return the sqlNamedInstanceName value.
     */
    public String sqlNamedInstanceName() {
        return this.sqlNamedInstanceName;
    }

    /**
     * Set the sqlNamedInstanceName property: The SQL instance name to optionally use in the connection string when
     * connecting to an Azure SQL VM target.
     * 
     * @param sqlNamedInstanceName the sqlNamedInstanceName value to set.
     * @return the SqlVmTargetProperties object itself.
     */
    public SqlVmTargetProperties withSqlNamedInstanceName(String sqlNamedInstanceName) {
        this.sqlNamedInstanceName = sqlNamedInstanceName;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SqlVmTargetProperties withTargetAuthenticationType(TargetAuthenticationType targetAuthenticationType) {
        super.withTargetAuthenticationType(targetAuthenticationType);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SqlVmTargetProperties withTargetVault(VaultSecret targetVault) {
        super.withTargetVault(targetVault);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SqlVmTargetProperties withConnectionServerName(String connectionServerName) {
        super.withConnectionServerName(connectionServerName);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (sqlVmResourceId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property sqlVmResourceId in model SqlVmTargetProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(SqlVmTargetProperties.class);
}
