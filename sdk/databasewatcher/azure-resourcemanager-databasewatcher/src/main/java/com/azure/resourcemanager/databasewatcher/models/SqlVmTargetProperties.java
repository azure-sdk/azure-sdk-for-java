// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databasewatcher.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The properties specific to Azure SQL VM targets.
 */
@Fluent
public final class SqlVmTargetProperties extends TargetProperties {
    /*
     * Discriminator property for TargetProperties.
     */
    private String targetType = "SqlVm";

    /*
     * The Azure ResourceId of an Azure SQL VM target.
     */
    private String sqlVmResourceId;

    /*
     * The TCP port number to optionally use in the connection string when connecting to an Azure SQL VM target.
     */
    private Integer connectionTcpPort;

    /*
     * The SQL instance name to optionally use in the connection string when connecting to an Azure SQL VM target.
     */
    private String sqlNamedInstanceName;

    /*
     * The provisioning state of the resource.
     */
    private ResourceProvisioningState provisioningState;

    /**
     * Creates an instance of SqlVmTargetProperties class.
     */
    public SqlVmTargetProperties() {
    }

    /**
     * Get the targetType property: Discriminator property for TargetProperties.
     * 
     * @return the targetType value.
     */
    @Override
    public String targetType() {
        return this.targetType;
    }

    /**
     * Get the sqlVmResourceId property: The Azure ResourceId of an Azure SQL VM target.
     * 
     * @return the sqlVmResourceId value.
     */
    public String sqlVmResourceId() {
        return this.sqlVmResourceId;
    }

    /**
     * Set the sqlVmResourceId property: The Azure ResourceId of an Azure SQL VM target.
     * 
     * @param sqlVmResourceId the sqlVmResourceId value to set.
     * @return the SqlVmTargetProperties object itself.
     */
    public SqlVmTargetProperties withSqlVmResourceId(String sqlVmResourceId) {
        this.sqlVmResourceId = sqlVmResourceId;
        return this;
    }

    /**
     * Get the connectionTcpPort property: The TCP port number to optionally use in the connection string when
     * connecting to an Azure SQL VM target.
     * 
     * @return the connectionTcpPort value.
     */
    public Integer connectionTcpPort() {
        return this.connectionTcpPort;
    }

    /**
     * Set the connectionTcpPort property: The TCP port number to optionally use in the connection string when
     * connecting to an Azure SQL VM target.
     * 
     * @param connectionTcpPort the connectionTcpPort value to set.
     * @return the SqlVmTargetProperties object itself.
     */
    public SqlVmTargetProperties withConnectionTcpPort(Integer connectionTcpPort) {
        this.connectionTcpPort = connectionTcpPort;
        return this;
    }

    /**
     * Get the sqlNamedInstanceName property: The SQL instance name to optionally use in the connection string when
     * connecting to an Azure SQL VM target.
     * 
     * @return the sqlNamedInstanceName value.
     */
    public String sqlNamedInstanceName() {
        return this.sqlNamedInstanceName;
    }

    /**
     * Set the sqlNamedInstanceName property: The SQL instance name to optionally use in the connection string when
     * connecting to an Azure SQL VM target.
     * 
     * @param sqlNamedInstanceName the sqlNamedInstanceName value to set.
     * @return the SqlVmTargetProperties object itself.
     */
    public SqlVmTargetProperties withSqlNamedInstanceName(String sqlNamedInstanceName) {
        this.sqlNamedInstanceName = sqlNamedInstanceName;
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning state of the resource.
     * 
     * @return the provisioningState value.
     */
    @Override
    public ResourceProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SqlVmTargetProperties withTargetAuthenticationType(TargetAuthenticationType targetAuthenticationType) {
        super.withTargetAuthenticationType(targetAuthenticationType);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SqlVmTargetProperties withTargetVault(VaultSecret targetVault) {
        super.withTargetVault(targetVault);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SqlVmTargetProperties withConnectionServerName(String connectionServerName) {
        super.withConnectionServerName(connectionServerName);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (sqlVmResourceId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property sqlVmResourceId in model SqlVmTargetProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(SqlVmTargetProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("targetAuthenticationType",
            targetAuthenticationType() == null ? null : targetAuthenticationType().toString());
        jsonWriter.writeStringField("connectionServerName", connectionServerName());
        jsonWriter.writeJsonField("targetVault", targetVault());
        jsonWriter.writeStringField("sqlVmResourceId", this.sqlVmResourceId);
        jsonWriter.writeStringField("targetType", this.targetType);
        jsonWriter.writeNumberField("connectionTcpPort", this.connectionTcpPort);
        jsonWriter.writeStringField("sqlNamedInstanceName", this.sqlNamedInstanceName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SqlVmTargetProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SqlVmTargetProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SqlVmTargetProperties.
     */
    public static SqlVmTargetProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SqlVmTargetProperties deserializedSqlVmTargetProperties = new SqlVmTargetProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("targetAuthenticationType".equals(fieldName)) {
                    deserializedSqlVmTargetProperties
                        .withTargetAuthenticationType(TargetAuthenticationType.fromString(reader.getString()));
                } else if ("connectionServerName".equals(fieldName)) {
                    deserializedSqlVmTargetProperties.withConnectionServerName(reader.getString());
                } else if ("targetVault".equals(fieldName)) {
                    deserializedSqlVmTargetProperties.withTargetVault(VaultSecret.fromJson(reader));
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedSqlVmTargetProperties.provisioningState
                        = ResourceProvisioningState.fromString(reader.getString());
                } else if ("sqlVmResourceId".equals(fieldName)) {
                    deserializedSqlVmTargetProperties.sqlVmResourceId = reader.getString();
                } else if ("targetType".equals(fieldName)) {
                    deserializedSqlVmTargetProperties.targetType = reader.getString();
                } else if ("connectionTcpPort".equals(fieldName)) {
                    deserializedSqlVmTargetProperties.connectionTcpPort = reader.getNullable(JsonReader::getInt);
                } else if ("sqlNamedInstanceName".equals(fieldName)) {
                    deserializedSqlVmTargetProperties.sqlNamedInstanceName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSqlVmTargetProperties;
        });
    }
}
