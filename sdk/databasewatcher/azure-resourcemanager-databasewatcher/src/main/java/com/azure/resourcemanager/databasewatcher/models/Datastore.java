// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databasewatcher.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * The properties of a data store.
 */
@Fluent
public final class Datastore {
    /*
     * The Azure ResourceId of an Azure Data Explorer cluster.
     */
    @JsonProperty(value = "adxClusterResourceId")
    private String adxClusterResourceId;

    /*
     * The Kusto cluster display name.
     */
    @JsonProperty(value = "kustoClusterDisplayName")
    private String kustoClusterDisplayName;

    /*
     * The Kusto cluster URI.
     */
    @JsonProperty(value = "kustoClusterUri", required = true)
    private String kustoClusterUri;

    /*
     * The Kusto data ingestion URI.
     */
    @JsonProperty(value = "kustoDataIngestionUri", required = true)
    private String kustoDataIngestionUri;

    /*
     * The name of a Kusto database.
     */
    @JsonProperty(value = "kustoDatabaseName", required = true)
    private String kustoDatabaseName;

    /*
     * The Kusto management URL.
     */
    @JsonProperty(value = "kustoManagementUrl", required = true)
    private String kustoManagementUrl;

    /*
     * The type of a Kusto offering.
     */
    @JsonProperty(value = "kustoOfferingType", required = true)
    private KustoOfferingType kustoOfferingType;

    /**
     * Creates an instance of Datastore class.
     */
    public Datastore() {
    }

    /**
     * Get the adxClusterResourceId property: The Azure ResourceId of an Azure Data Explorer cluster.
     * 
     * @return the adxClusterResourceId value.
     */
    public String adxClusterResourceId() {
        return this.adxClusterResourceId;
    }

    /**
     * Set the adxClusterResourceId property: The Azure ResourceId of an Azure Data Explorer cluster.
     * 
     * @param adxClusterResourceId the adxClusterResourceId value to set.
     * @return the Datastore object itself.
     */
    public Datastore withAdxClusterResourceId(String adxClusterResourceId) {
        this.adxClusterResourceId = adxClusterResourceId;
        return this;
    }

    /**
     * Get the kustoClusterDisplayName property: The Kusto cluster display name.
     * 
     * @return the kustoClusterDisplayName value.
     */
    public String kustoClusterDisplayName() {
        return this.kustoClusterDisplayName;
    }

    /**
     * Set the kustoClusterDisplayName property: The Kusto cluster display name.
     * 
     * @param kustoClusterDisplayName the kustoClusterDisplayName value to set.
     * @return the Datastore object itself.
     */
    public Datastore withKustoClusterDisplayName(String kustoClusterDisplayName) {
        this.kustoClusterDisplayName = kustoClusterDisplayName;
        return this;
    }

    /**
     * Get the kustoClusterUri property: The Kusto cluster URI.
     * 
     * @return the kustoClusterUri value.
     */
    public String kustoClusterUri() {
        return this.kustoClusterUri;
    }

    /**
     * Set the kustoClusterUri property: The Kusto cluster URI.
     * 
     * @param kustoClusterUri the kustoClusterUri value to set.
     * @return the Datastore object itself.
     */
    public Datastore withKustoClusterUri(String kustoClusterUri) {
        this.kustoClusterUri = kustoClusterUri;
        return this;
    }

    /**
     * Get the kustoDataIngestionUri property: The Kusto data ingestion URI.
     * 
     * @return the kustoDataIngestionUri value.
     */
    public String kustoDataIngestionUri() {
        return this.kustoDataIngestionUri;
    }

    /**
     * Set the kustoDataIngestionUri property: The Kusto data ingestion URI.
     * 
     * @param kustoDataIngestionUri the kustoDataIngestionUri value to set.
     * @return the Datastore object itself.
     */
    public Datastore withKustoDataIngestionUri(String kustoDataIngestionUri) {
        this.kustoDataIngestionUri = kustoDataIngestionUri;
        return this;
    }

    /**
     * Get the kustoDatabaseName property: The name of a Kusto database.
     * 
     * @return the kustoDatabaseName value.
     */
    public String kustoDatabaseName() {
        return this.kustoDatabaseName;
    }

    /**
     * Set the kustoDatabaseName property: The name of a Kusto database.
     * 
     * @param kustoDatabaseName the kustoDatabaseName value to set.
     * @return the Datastore object itself.
     */
    public Datastore withKustoDatabaseName(String kustoDatabaseName) {
        this.kustoDatabaseName = kustoDatabaseName;
        return this;
    }

    /**
     * Get the kustoManagementUrl property: The Kusto management URL.
     * 
     * @return the kustoManagementUrl value.
     */
    public String kustoManagementUrl() {
        return this.kustoManagementUrl;
    }

    /**
     * Set the kustoManagementUrl property: The Kusto management URL.
     * 
     * @param kustoManagementUrl the kustoManagementUrl value to set.
     * @return the Datastore object itself.
     */
    public Datastore withKustoManagementUrl(String kustoManagementUrl) {
        this.kustoManagementUrl = kustoManagementUrl;
        return this;
    }

    /**
     * Get the kustoOfferingType property: The type of a Kusto offering.
     * 
     * @return the kustoOfferingType value.
     */
    public KustoOfferingType kustoOfferingType() {
        return this.kustoOfferingType;
    }

    /**
     * Set the kustoOfferingType property: The type of a Kusto offering.
     * 
     * @param kustoOfferingType the kustoOfferingType value to set.
     * @return the Datastore object itself.
     */
    public Datastore withKustoOfferingType(KustoOfferingType kustoOfferingType) {
        this.kustoOfferingType = kustoOfferingType;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (kustoClusterUri() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property kustoClusterUri in model Datastore"));
        }
        if (kustoDataIngestionUri() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property kustoDataIngestionUri in model Datastore"));
        }
        if (kustoDatabaseName() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property kustoDatabaseName in model Datastore"));
        }
        if (kustoManagementUrl() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property kustoManagementUrl in model Datastore"));
        }
        if (kustoOfferingType() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property kustoOfferingType in model Datastore"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(Datastore.class);
}
