// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databasewatcher.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.databasewatcher.models.AlertRuleCreationProperties;
import com.azure.resourcemanager.databasewatcher.models.ResourceProvisioningState;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Concrete proxy resource types can be created by aliasing this type using a specific property type.
 */
@Fluent
public final class AlertRuleResourceInner extends ProxyResource {
    /*
     * The resource-specific properties for this resource.
     */
    private AlertRuleResourceProperties innerProperties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of AlertRuleResourceInner class.
     */
    public AlertRuleResourceInner() {
    }

    /**
     * Get the innerProperties property: The resource-specific properties for this resource.
     * 
     * @return the innerProperties value.
     */
    private AlertRuleResourceProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the alertRuleResourceId property: The resource ID of the alert rule resource.
     * 
     * @return the alertRuleResourceId value.
     */
    public String alertRuleResourceId() {
        return this.innerProperties() == null ? null : this.innerProperties().alertRuleResourceId();
    }

    /**
     * Set the alertRuleResourceId property: The resource ID of the alert rule resource.
     * 
     * @param alertRuleResourceId the alertRuleResourceId value to set.
     * @return the AlertRuleResourceInner object itself.
     */
    public AlertRuleResourceInner withAlertRuleResourceId(String alertRuleResourceId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AlertRuleResourceProperties();
        }
        this.innerProperties().withAlertRuleResourceId(alertRuleResourceId);
        return this;
    }

    /**
     * Get the createdWithProperties property: The properties with which the alert rule resource was created.
     * 
     * @return the createdWithProperties value.
     */
    public AlertRuleCreationProperties createdWithProperties() {
        return this.innerProperties() == null ? null : this.innerProperties().createdWithProperties();
    }

    /**
     * Set the createdWithProperties property: The properties with which the alert rule resource was created.
     * 
     * @param createdWithProperties the createdWithProperties value to set.
     * @return the AlertRuleResourceInner object itself.
     */
    public AlertRuleResourceInner withCreatedWithProperties(AlertRuleCreationProperties createdWithProperties) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AlertRuleResourceProperties();
        }
        this.innerProperties().withCreatedWithProperties(createdWithProperties);
        return this;
    }

    /**
     * Get the creationTime property: The creation time of the alert rule resource.
     * 
     * @return the creationTime value.
     */
    public OffsetDateTime creationTime() {
        return this.innerProperties() == null ? null : this.innerProperties().creationTime();
    }

    /**
     * Set the creationTime property: The creation time of the alert rule resource.
     * 
     * @param creationTime the creationTime value to set.
     * @return the AlertRuleResourceInner object itself.
     */
    public AlertRuleResourceInner withCreationTime(OffsetDateTime creationTime) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AlertRuleResourceProperties();
        }
        this.innerProperties().withCreationTime(creationTime);
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning state of the alert rule resource.
     * 
     * @return the provisioningState value.
     */
    public ResourceProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the alertRuleTemplateId property: The template ID associated with alert rule resource.
     * 
     * @return the alertRuleTemplateId value.
     */
    public String alertRuleTemplateId() {
        return this.innerProperties() == null ? null : this.innerProperties().alertRuleTemplateId();
    }

    /**
     * Set the alertRuleTemplateId property: The template ID associated with alert rule resource.
     * 
     * @param alertRuleTemplateId the alertRuleTemplateId value to set.
     * @return the AlertRuleResourceInner object itself.
     */
    public AlertRuleResourceInner withAlertRuleTemplateId(String alertRuleTemplateId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AlertRuleResourceProperties();
        }
        this.innerProperties().withAlertRuleTemplateId(alertRuleTemplateId);
        return this;
    }

    /**
     * Get the alertRuleTemplateVersion property: The alert rule template version.
     * 
     * @return the alertRuleTemplateVersion value.
     */
    public String alertRuleTemplateVersion() {
        return this.innerProperties() == null ? null : this.innerProperties().alertRuleTemplateVersion();
    }

    /**
     * Set the alertRuleTemplateVersion property: The alert rule template version.
     * 
     * @param alertRuleTemplateVersion the alertRuleTemplateVersion value to set.
     * @return the AlertRuleResourceInner object itself.
     */
    public AlertRuleResourceInner withAlertRuleTemplateVersion(String alertRuleTemplateVersion) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AlertRuleResourceProperties();
        }
        this.innerProperties().withAlertRuleTemplateVersion(alertRuleTemplateVersion);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AlertRuleResourceInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AlertRuleResourceInner if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AlertRuleResourceInner.
     */
    public static AlertRuleResourceInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AlertRuleResourceInner deserializedAlertRuleResourceInner = new AlertRuleResourceInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedAlertRuleResourceInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedAlertRuleResourceInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedAlertRuleResourceInner.type = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedAlertRuleResourceInner.innerProperties = AlertRuleResourceProperties.fromJson(reader);
                } else if ("systemData".equals(fieldName)) {
                    deserializedAlertRuleResourceInner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAlertRuleResourceInner;
        });
    }
}
