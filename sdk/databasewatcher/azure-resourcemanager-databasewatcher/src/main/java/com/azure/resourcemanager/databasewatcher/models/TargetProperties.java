// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databasewatcher.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeId;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * The generic properties of a target.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = "targetType", defaultImpl = TargetProperties.class, visible = true)
@JsonTypeName("TargetProperties")
@JsonSubTypes({
    @JsonSubTypes.Type(name = "SqlEp", value = SqlDbElasticPoolTargetProperties.class),
    @JsonSubTypes.Type(name = "SqlDb", value = SqlDbSingleDatabaseTargetProperties.class),
    @JsonSubTypes.Type(name = "SqlMi", value = SqlMiTargetProperties.class),
    @JsonSubTypes.Type(name = "SqlVm", value = SqlVmTargetProperties.class) })
@Fluent
public class TargetProperties {
    /*
     * Discriminator property for TargetProperties.
     */
    @JsonTypeId
    @JsonProperty(value = "targetType", required = true)
    private String targetType;

    /*
     * The type of authentication to use when connecting to a target.
     */
    @JsonProperty(value = "targetAuthenticationType", required = true)
    private TargetAuthenticationType targetAuthenticationType;

    /*
     * To use SQL authentication when connecting to targets, specify the vault where the login name and password secrets are stored.
     */
    @JsonProperty(value = "targetVault")
    private VaultSecret targetVault;

    /*
     * The server name to use in the connection string when connecting to a target. Port number and instance name must be specified separately.
     */
    @JsonProperty(value = "connectionServerName", required = true)
    private String connectionServerName;

    /*
     * The provisioning state of the resource.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ResourceProvisioningState provisioningState;

    /**
     * Creates an instance of TargetProperties class.
     */
    public TargetProperties() {
        this.targetType = "TargetProperties";
    }

    /**
     * Get the targetType property: Discriminator property for TargetProperties.
     * 
     * @return the targetType value.
     */
    public String targetType() {
        return this.targetType;
    }

    /**
     * Get the targetAuthenticationType property: The type of authentication to use when connecting to a target.
     * 
     * @return the targetAuthenticationType value.
     */
    public TargetAuthenticationType targetAuthenticationType() {
        return this.targetAuthenticationType;
    }

    /**
     * Set the targetAuthenticationType property: The type of authentication to use when connecting to a target.
     * 
     * @param targetAuthenticationType the targetAuthenticationType value to set.
     * @return the TargetProperties object itself.
     */
    public TargetProperties withTargetAuthenticationType(TargetAuthenticationType targetAuthenticationType) {
        this.targetAuthenticationType = targetAuthenticationType;
        return this;
    }

    /**
     * Get the targetVault property: To use SQL authentication when connecting to targets, specify the vault where the
     * login name and password secrets are stored.
     * 
     * @return the targetVault value.
     */
    public VaultSecret targetVault() {
        return this.targetVault;
    }

    /**
     * Set the targetVault property: To use SQL authentication when connecting to targets, specify the vault where the
     * login name and password secrets are stored.
     * 
     * @param targetVault the targetVault value to set.
     * @return the TargetProperties object itself.
     */
    public TargetProperties withTargetVault(VaultSecret targetVault) {
        this.targetVault = targetVault;
        return this;
    }

    /**
     * Get the connectionServerName property: The server name to use in the connection string when connecting to a
     * target. Port number and instance name must be specified separately.
     * 
     * @return the connectionServerName value.
     */
    public String connectionServerName() {
        return this.connectionServerName;
    }

    /**
     * Set the connectionServerName property: The server name to use in the connection string when connecting to a
     * target. Port number and instance name must be specified separately.
     * 
     * @param connectionServerName the connectionServerName value to set.
     * @return the TargetProperties object itself.
     */
    public TargetProperties withConnectionServerName(String connectionServerName) {
        this.connectionServerName = connectionServerName;
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning state of the resource.
     * 
     * @return the provisioningState value.
     */
    public ResourceProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (targetAuthenticationType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property targetAuthenticationType in model TargetProperties"));
        }
        if (targetVault() != null) {
            targetVault().validate();
        }
        if (connectionServerName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property connectionServerName in model TargetProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(TargetProperties.class);
}
