// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databasewatcher.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.databasewatcher.models.DatabaseWatcherProvisioningState;
import com.azure.resourcemanager.databasewatcher.models.Datastore;
import com.azure.resourcemanager.databasewatcher.models.WatcherStatus;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * The RP specific properties of the resource.
 */
@Fluent
public final class WatcherProperties {
    /*
     * The data store for collected monitoring data.
     */
    @JsonProperty(value = "datastore")
    private Datastore datastore;

    /*
     * The monitoring collection status of the watcher.
     */
    @JsonProperty(value = "status", access = JsonProperty.Access.WRITE_ONLY)
    private WatcherStatus status;

    /*
     * The provisioning state of the resource watcher.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private DatabaseWatcherProvisioningState provisioningState;

    /**
     * Creates an instance of WatcherProperties class.
     */
    public WatcherProperties() {
    }

    /**
     * Get the datastore property: The data store for collected monitoring data.
     * 
     * @return the datastore value.
     */
    public Datastore datastore() {
        return this.datastore;
    }

    /**
     * Set the datastore property: The data store for collected monitoring data.
     * 
     * @param datastore the datastore value to set.
     * @return the WatcherProperties object itself.
     */
    public WatcherProperties withDatastore(Datastore datastore) {
        this.datastore = datastore;
        return this;
    }

    /**
     * Get the status property: The monitoring collection status of the watcher.
     * 
     * @return the status value.
     */
    public WatcherStatus status() {
        return this.status;
    }

    /**
     * Get the provisioningState property: The provisioning state of the resource watcher.
     * 
     * @return the provisioningState value.
     */
    public DatabaseWatcherProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (datastore() != null) {
            datastore().validate();
        }
    }
}
