// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databasewatcher.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The properties of a data store.
 */
@Fluent
public final class DatastoreUpdate implements JsonSerializable<DatastoreUpdate> {
    /*
     * The Azure ResourceId of an Azure Data Explorer cluster.
     */
    private String adxClusterResourceId;

    /*
     * The Kusto cluster display name.
     */
    private String kustoClusterDisplayName;

    /*
     * The Kusto cluster URI.
     */
    private String kustoClusterUri;

    /*
     * The Kusto data ingestion URI.
     */
    private String kustoDataIngestionUri;

    /*
     * The name of a Kusto database.
     */
    private String kustoDatabaseName;

    /*
     * The Kusto management URL.
     */
    private String kustoManagementUrl;

    /*
     * The type of a Kusto offering.
     */
    private KustoOfferingType kustoOfferingType;

    /**
     * Creates an instance of DatastoreUpdate class.
     */
    public DatastoreUpdate() {
    }

    /**
     * Get the adxClusterResourceId property: The Azure ResourceId of an Azure Data Explorer cluster.
     * 
     * @return the adxClusterResourceId value.
     */
    public String adxClusterResourceId() {
        return this.adxClusterResourceId;
    }

    /**
     * Set the adxClusterResourceId property: The Azure ResourceId of an Azure Data Explorer cluster.
     * 
     * @param adxClusterResourceId the adxClusterResourceId value to set.
     * @return the DatastoreUpdate object itself.
     */
    public DatastoreUpdate withAdxClusterResourceId(String adxClusterResourceId) {
        this.adxClusterResourceId = adxClusterResourceId;
        return this;
    }

    /**
     * Get the kustoClusterDisplayName property: The Kusto cluster display name.
     * 
     * @return the kustoClusterDisplayName value.
     */
    public String kustoClusterDisplayName() {
        return this.kustoClusterDisplayName;
    }

    /**
     * Set the kustoClusterDisplayName property: The Kusto cluster display name.
     * 
     * @param kustoClusterDisplayName the kustoClusterDisplayName value to set.
     * @return the DatastoreUpdate object itself.
     */
    public DatastoreUpdate withKustoClusterDisplayName(String kustoClusterDisplayName) {
        this.kustoClusterDisplayName = kustoClusterDisplayName;
        return this;
    }

    /**
     * Get the kustoClusterUri property: The Kusto cluster URI.
     * 
     * @return the kustoClusterUri value.
     */
    public String kustoClusterUri() {
        return this.kustoClusterUri;
    }

    /**
     * Set the kustoClusterUri property: The Kusto cluster URI.
     * 
     * @param kustoClusterUri the kustoClusterUri value to set.
     * @return the DatastoreUpdate object itself.
     */
    public DatastoreUpdate withKustoClusterUri(String kustoClusterUri) {
        this.kustoClusterUri = kustoClusterUri;
        return this;
    }

    /**
     * Get the kustoDataIngestionUri property: The Kusto data ingestion URI.
     * 
     * @return the kustoDataIngestionUri value.
     */
    public String kustoDataIngestionUri() {
        return this.kustoDataIngestionUri;
    }

    /**
     * Set the kustoDataIngestionUri property: The Kusto data ingestion URI.
     * 
     * @param kustoDataIngestionUri the kustoDataIngestionUri value to set.
     * @return the DatastoreUpdate object itself.
     */
    public DatastoreUpdate withKustoDataIngestionUri(String kustoDataIngestionUri) {
        this.kustoDataIngestionUri = kustoDataIngestionUri;
        return this;
    }

    /**
     * Get the kustoDatabaseName property: The name of a Kusto database.
     * 
     * @return the kustoDatabaseName value.
     */
    public String kustoDatabaseName() {
        return this.kustoDatabaseName;
    }

    /**
     * Set the kustoDatabaseName property: The name of a Kusto database.
     * 
     * @param kustoDatabaseName the kustoDatabaseName value to set.
     * @return the DatastoreUpdate object itself.
     */
    public DatastoreUpdate withKustoDatabaseName(String kustoDatabaseName) {
        this.kustoDatabaseName = kustoDatabaseName;
        return this;
    }

    /**
     * Get the kustoManagementUrl property: The Kusto management URL.
     * 
     * @return the kustoManagementUrl value.
     */
    public String kustoManagementUrl() {
        return this.kustoManagementUrl;
    }

    /**
     * Set the kustoManagementUrl property: The Kusto management URL.
     * 
     * @param kustoManagementUrl the kustoManagementUrl value to set.
     * @return the DatastoreUpdate object itself.
     */
    public DatastoreUpdate withKustoManagementUrl(String kustoManagementUrl) {
        this.kustoManagementUrl = kustoManagementUrl;
        return this;
    }

    /**
     * Get the kustoOfferingType property: The type of a Kusto offering.
     * 
     * @return the kustoOfferingType value.
     */
    public KustoOfferingType kustoOfferingType() {
        return this.kustoOfferingType;
    }

    /**
     * Set the kustoOfferingType property: The type of a Kusto offering.
     * 
     * @param kustoOfferingType the kustoOfferingType value to set.
     * @return the DatastoreUpdate object itself.
     */
    public DatastoreUpdate withKustoOfferingType(KustoOfferingType kustoOfferingType) {
        this.kustoOfferingType = kustoOfferingType;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("adxClusterResourceId", this.adxClusterResourceId);
        jsonWriter.writeStringField("kustoClusterDisplayName", this.kustoClusterDisplayName);
        jsonWriter.writeStringField("kustoClusterUri", this.kustoClusterUri);
        jsonWriter.writeStringField("kustoDataIngestionUri", this.kustoDataIngestionUri);
        jsonWriter.writeStringField("kustoDatabaseName", this.kustoDatabaseName);
        jsonWriter.writeStringField("kustoManagementUrl", this.kustoManagementUrl);
        jsonWriter.writeStringField("kustoOfferingType",
            this.kustoOfferingType == null ? null : this.kustoOfferingType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DatastoreUpdate from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DatastoreUpdate if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the DatastoreUpdate.
     */
    public static DatastoreUpdate fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DatastoreUpdate deserializedDatastoreUpdate = new DatastoreUpdate();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("adxClusterResourceId".equals(fieldName)) {
                    deserializedDatastoreUpdate.adxClusterResourceId = reader.getString();
                } else if ("kustoClusterDisplayName".equals(fieldName)) {
                    deserializedDatastoreUpdate.kustoClusterDisplayName = reader.getString();
                } else if ("kustoClusterUri".equals(fieldName)) {
                    deserializedDatastoreUpdate.kustoClusterUri = reader.getString();
                } else if ("kustoDataIngestionUri".equals(fieldName)) {
                    deserializedDatastoreUpdate.kustoDataIngestionUri = reader.getString();
                } else if ("kustoDatabaseName".equals(fieldName)) {
                    deserializedDatastoreUpdate.kustoDatabaseName = reader.getString();
                } else if ("kustoManagementUrl".equals(fieldName)) {
                    deserializedDatastoreUpdate.kustoManagementUrl = reader.getString();
                } else if ("kustoOfferingType".equals(fieldName)) {
                    deserializedDatastoreUpdate.kustoOfferingType = KustoOfferingType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDatastoreUpdate;
        });
    }
}
