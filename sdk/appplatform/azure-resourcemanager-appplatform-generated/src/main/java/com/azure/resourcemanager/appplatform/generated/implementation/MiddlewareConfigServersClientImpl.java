// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appplatform.generated.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.appplatform.generated.fluent.MiddlewareConfigServersClient;
import com.azure.resourcemanager.appplatform.generated.fluent.models.MiddlewareConfigServerInner;
import com.azure.resourcemanager.appplatform.generated.fluent.models.MiddlewareConfigServerSettingsValidateResultInner;
import com.azure.resourcemanager.appplatform.generated.models.ConfigServerResourceCollection;
import com.azure.resourcemanager.appplatform.generated.models.MiddlewareConfigServerSettings;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in MiddlewareConfigServersClient. */
public final class MiddlewareConfigServersClientImpl implements MiddlewareConfigServersClient {
    /** The proxy service used to perform REST calls. */
    private final MiddlewareConfigServersService service;

    /** The service client containing this operation class. */
    private final AppPlatformManagementClientImpl client;

    /**
     * Initializes an instance of MiddlewareConfigServersClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    MiddlewareConfigServersClientImpl(AppPlatformManagementClientImpl client) {
        this.service =
            RestProxy
                .create(MiddlewareConfigServersService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AppPlatformManagementClientMiddlewareConfigServers to be used by the
     * proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "AppPlatformManagemen")
    public interface MiddlewareConfigServersService {
        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/javaEnvironments/{javaEnvironmentName}/configServers")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ConfigServerResourceCollection>> list(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("javaEnvironmentName") String javaEnvironmentName,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/javaEnvironments/{javaEnvironmentName}/configServers/{configServerName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<MiddlewareConfigServerInner>> get(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("javaEnvironmentName") String javaEnvironmentName,
            @PathParam("configServerName") String configServerName,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/javaEnvironments/{javaEnvironmentName}/configServers/{configServerName}")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdate(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("javaEnvironmentName") String javaEnvironmentName,
            @PathParam("configServerName") String configServerName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") MiddlewareConfigServerInner configServerResource,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Patch(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/javaEnvironments/{javaEnvironmentName}/configServers/{configServerName}")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> updatePatch(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("javaEnvironmentName") String javaEnvironmentName,
            @PathParam("configServerName") String configServerName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") MiddlewareConfigServerInner configServerResource,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/javaEnvironments/{javaEnvironmentName}/configServers/{configServerName}/validate")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> validate(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("javaEnvironmentName") String javaEnvironmentName,
            @PathParam("configServerName") String configServerName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") MiddlewareConfigServerSettings configServerSettings,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ConfigServerResourceCollection>> listNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * List the config server settings.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return azure Spring Apps Config Server collection ARM resource along with {@link PagedResponse} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<MiddlewareConfigServerInner>> listSinglePageAsync(
        String resourceGroupName, String javaEnvironmentName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (javaEnvironmentName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter javaEnvironmentName is required and cannot be null."));
        }
        final String apiVersion = "2023-08-02-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .list(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            javaEnvironmentName,
                            apiVersion,
                            accept,
                            context))
            .<PagedResponse<MiddlewareConfigServerInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List the config server settings.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return azure Spring Apps Config Server collection ARM resource along with {@link PagedResponse} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<MiddlewareConfigServerInner>> listSinglePageAsync(
        String resourceGroupName, String javaEnvironmentName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (javaEnvironmentName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter javaEnvironmentName is required and cannot be null."));
        }
        final String apiVersion = "2023-08-02-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .list(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                javaEnvironmentName,
                apiVersion,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * List the config server settings.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return azure Spring Apps Config Server collection ARM resource as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<MiddlewareConfigServerInner> listAsync(String resourceGroupName, String javaEnvironmentName) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(resourceGroupName, javaEnvironmentName),
            nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * List the config server settings.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return azure Spring Apps Config Server collection ARM resource as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<MiddlewareConfigServerInner> listAsync(
        String resourceGroupName, String javaEnvironmentName, Context context) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(resourceGroupName, javaEnvironmentName, context),
            nextLink -> listNextSinglePageAsync(nextLink, context));
    }

    /**
     * List the config server settings.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return azure Spring Apps Config Server collection ARM resource as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<MiddlewareConfigServerInner> list(String resourceGroupName, String javaEnvironmentName) {
        return new PagedIterable<>(listAsync(resourceGroupName, javaEnvironmentName));
    }

    /**
     * List the config server settings.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return azure Spring Apps Config Server collection ARM resource as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<MiddlewareConfigServerInner> list(
        String resourceGroupName, String javaEnvironmentName, Context context) {
        return new PagedIterable<>(listAsync(resourceGroupName, javaEnvironmentName, context));
    }

    /**
     * Get the config server and its properties.
     *
     * <p>Operation to get the config server and its properties.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param configServerName Name of the Config Server.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return config Server resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<MiddlewareConfigServerInner>> getWithResponseAsync(
        String resourceGroupName, String javaEnvironmentName, String configServerName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (javaEnvironmentName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter javaEnvironmentName is required and cannot be null."));
        }
        if (configServerName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter configServerName is required and cannot be null."));
        }
        final String apiVersion = "2023-08-02-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .get(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            javaEnvironmentName,
                            configServerName,
                            apiVersion,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the config server and its properties.
     *
     * <p>Operation to get the config server and its properties.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param configServerName Name of the Config Server.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return config Server resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<MiddlewareConfigServerInner>> getWithResponseAsync(
        String resourceGroupName, String javaEnvironmentName, String configServerName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (javaEnvironmentName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter javaEnvironmentName is required and cannot be null."));
        }
        if (configServerName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter configServerName is required and cannot be null."));
        }
        final String apiVersion = "2023-08-02-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .get(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                javaEnvironmentName,
                configServerName,
                apiVersion,
                accept,
                context);
    }

    /**
     * Get the config server and its properties.
     *
     * <p>Operation to get the config server and its properties.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param configServerName Name of the Config Server.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return config Server resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<MiddlewareConfigServerInner> getAsync(
        String resourceGroupName, String javaEnvironmentName, String configServerName) {
        return getWithResponseAsync(resourceGroupName, javaEnvironmentName, configServerName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get the config server and its properties.
     *
     * <p>Operation to get the config server and its properties.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param configServerName Name of the Config Server.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return config Server resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<MiddlewareConfigServerInner> getWithResponse(
        String resourceGroupName, String javaEnvironmentName, String configServerName, Context context) {
        return getWithResponseAsync(resourceGroupName, javaEnvironmentName, configServerName, context).block();
    }

    /**
     * Get the config server and its properties.
     *
     * <p>Operation to get the config server and its properties.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param configServerName Name of the Config Server.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return config Server resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MiddlewareConfigServerInner get(
        String resourceGroupName, String javaEnvironmentName, String configServerName) {
        return getWithResponse(resourceGroupName, javaEnvironmentName, configServerName, Context.NONE).getValue();
    }

    /**
     * Create or update the config server middleware.
     *
     * <p>Operation to create or update the config server.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param configServerName Name of the Config Server.
     * @param configServerResource Parameters for the update operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return config Server resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(
        String resourceGroupName,
        String javaEnvironmentName,
        String configServerName,
        MiddlewareConfigServerInner configServerResource) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (javaEnvironmentName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter javaEnvironmentName is required and cannot be null."));
        }
        if (configServerName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter configServerName is required and cannot be null."));
        }
        if (configServerResource == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter configServerResource is required and cannot be null."));
        } else {
            configServerResource.validate();
        }
        final String apiVersion = "2023-08-02-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .createOrUpdate(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            javaEnvironmentName,
                            configServerName,
                            apiVersion,
                            configServerResource,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create or update the config server middleware.
     *
     * <p>Operation to create or update the config server.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param configServerName Name of the Config Server.
     * @param configServerResource Parameters for the update operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return config Server resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(
        String resourceGroupName,
        String javaEnvironmentName,
        String configServerName,
        MiddlewareConfigServerInner configServerResource,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (javaEnvironmentName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter javaEnvironmentName is required and cannot be null."));
        }
        if (configServerName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter configServerName is required and cannot be null."));
        }
        if (configServerResource == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter configServerResource is required and cannot be null."));
        } else {
            configServerResource.validate();
        }
        final String apiVersion = "2023-08-02-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .createOrUpdate(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                javaEnvironmentName,
                configServerName,
                apiVersion,
                configServerResource,
                accept,
                context);
    }

    /**
     * Create or update the config server middleware.
     *
     * <p>Operation to create or update the config server.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param configServerName Name of the Config Server.
     * @param configServerResource Parameters for the update operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of config Server resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<MiddlewareConfigServerInner>, MiddlewareConfigServerInner> beginCreateOrUpdateAsync(
        String resourceGroupName,
        String javaEnvironmentName,
        String configServerName,
        MiddlewareConfigServerInner configServerResource) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            createOrUpdateWithResponseAsync(
                resourceGroupName, javaEnvironmentName, configServerName, configServerResource);
        return this
            .client
            .<MiddlewareConfigServerInner, MiddlewareConfigServerInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                MiddlewareConfigServerInner.class,
                MiddlewareConfigServerInner.class,
                this.client.getContext());
    }

    /**
     * Create or update the config server middleware.
     *
     * <p>Operation to create or update the config server.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param configServerName Name of the Config Server.
     * @param configServerResource Parameters for the update operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of config Server resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<MiddlewareConfigServerInner>, MiddlewareConfigServerInner> beginCreateOrUpdateAsync(
        String resourceGroupName,
        String javaEnvironmentName,
        String configServerName,
        MiddlewareConfigServerInner configServerResource,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            createOrUpdateWithResponseAsync(
                resourceGroupName, javaEnvironmentName, configServerName, configServerResource, context);
        return this
            .client
            .<MiddlewareConfigServerInner, MiddlewareConfigServerInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                MiddlewareConfigServerInner.class,
                MiddlewareConfigServerInner.class,
                context);
    }

    /**
     * Create or update the config server middleware.
     *
     * <p>Operation to create or update the config server.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param configServerName Name of the Config Server.
     * @param configServerResource Parameters for the update operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of config Server resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<MiddlewareConfigServerInner>, MiddlewareConfigServerInner> beginCreateOrUpdate(
        String resourceGroupName,
        String javaEnvironmentName,
        String configServerName,
        MiddlewareConfigServerInner configServerResource) {
        return this
            .beginCreateOrUpdateAsync(resourceGroupName, javaEnvironmentName, configServerName, configServerResource)
            .getSyncPoller();
    }

    /**
     * Create or update the config server middleware.
     *
     * <p>Operation to create or update the config server.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param configServerName Name of the Config Server.
     * @param configServerResource Parameters for the update operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of config Server resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<MiddlewareConfigServerInner>, MiddlewareConfigServerInner> beginCreateOrUpdate(
        String resourceGroupName,
        String javaEnvironmentName,
        String configServerName,
        MiddlewareConfigServerInner configServerResource,
        Context context) {
        return this
            .beginCreateOrUpdateAsync(
                resourceGroupName, javaEnvironmentName, configServerName, configServerResource, context)
            .getSyncPoller();
    }

    /**
     * Create or update the config server middleware.
     *
     * <p>Operation to create or update the config server.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param configServerName Name of the Config Server.
     * @param configServerResource Parameters for the update operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return config Server resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<MiddlewareConfigServerInner> createOrUpdateAsync(
        String resourceGroupName,
        String javaEnvironmentName,
        String configServerName,
        MiddlewareConfigServerInner configServerResource) {
        return beginCreateOrUpdateAsync(resourceGroupName, javaEnvironmentName, configServerName, configServerResource)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create or update the config server middleware.
     *
     * <p>Operation to create or update the config server.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param configServerName Name of the Config Server.
     * @param configServerResource Parameters for the update operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return config Server resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<MiddlewareConfigServerInner> createOrUpdateAsync(
        String resourceGroupName,
        String javaEnvironmentName,
        String configServerName,
        MiddlewareConfigServerInner configServerResource,
        Context context) {
        return beginCreateOrUpdateAsync(
                resourceGroupName, javaEnvironmentName, configServerName, configServerResource, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create or update the config server middleware.
     *
     * <p>Operation to create or update the config server.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param configServerName Name of the Config Server.
     * @param configServerResource Parameters for the update operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return config Server resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MiddlewareConfigServerInner createOrUpdate(
        String resourceGroupName,
        String javaEnvironmentName,
        String configServerName,
        MiddlewareConfigServerInner configServerResource) {
        return createOrUpdateAsync(resourceGroupName, javaEnvironmentName, configServerName, configServerResource)
            .block();
    }

    /**
     * Create or update the config server middleware.
     *
     * <p>Operation to create or update the config server.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param configServerName Name of the Config Server.
     * @param configServerResource Parameters for the update operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return config Server resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MiddlewareConfigServerInner createOrUpdate(
        String resourceGroupName,
        String javaEnvironmentName,
        String configServerName,
        MiddlewareConfigServerInner configServerResource,
        Context context) {
        return createOrUpdateAsync(
                resourceGroupName, javaEnvironmentName, configServerName, configServerResource, context)
            .block();
    }

    /**
     * Update the config server middleware.
     *
     * <p>Operation to update the config server.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param configServerName Name of the Config Server.
     * @param configServerResource Parameters for the update operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return config Server resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updatePatchWithResponseAsync(
        String resourceGroupName,
        String javaEnvironmentName,
        String configServerName,
        MiddlewareConfigServerInner configServerResource) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (javaEnvironmentName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter javaEnvironmentName is required and cannot be null."));
        }
        if (configServerName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter configServerName is required and cannot be null."));
        }
        if (configServerResource == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter configServerResource is required and cannot be null."));
        } else {
            configServerResource.validate();
        }
        final String apiVersion = "2023-08-02-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .updatePatch(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            javaEnvironmentName,
                            configServerName,
                            apiVersion,
                            configServerResource,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Update the config server middleware.
     *
     * <p>Operation to update the config server.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param configServerName Name of the Config Server.
     * @param configServerResource Parameters for the update operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return config Server resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updatePatchWithResponseAsync(
        String resourceGroupName,
        String javaEnvironmentName,
        String configServerName,
        MiddlewareConfigServerInner configServerResource,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (javaEnvironmentName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter javaEnvironmentName is required and cannot be null."));
        }
        if (configServerName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter configServerName is required and cannot be null."));
        }
        if (configServerResource == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter configServerResource is required and cannot be null."));
        } else {
            configServerResource.validate();
        }
        final String apiVersion = "2023-08-02-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .updatePatch(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                javaEnvironmentName,
                configServerName,
                apiVersion,
                configServerResource,
                accept,
                context);
    }

    /**
     * Update the config server middleware.
     *
     * <p>Operation to update the config server.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param configServerName Name of the Config Server.
     * @param configServerResource Parameters for the update operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of config Server resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<MiddlewareConfigServerInner>, MiddlewareConfigServerInner> beginUpdatePatchAsync(
        String resourceGroupName,
        String javaEnvironmentName,
        String configServerName,
        MiddlewareConfigServerInner configServerResource) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            updatePatchWithResponseAsync(
                resourceGroupName, javaEnvironmentName, configServerName, configServerResource);
        return this
            .client
            .<MiddlewareConfigServerInner, MiddlewareConfigServerInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                MiddlewareConfigServerInner.class,
                MiddlewareConfigServerInner.class,
                this.client.getContext());
    }

    /**
     * Update the config server middleware.
     *
     * <p>Operation to update the config server.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param configServerName Name of the Config Server.
     * @param configServerResource Parameters for the update operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of config Server resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<MiddlewareConfigServerInner>, MiddlewareConfigServerInner> beginUpdatePatchAsync(
        String resourceGroupName,
        String javaEnvironmentName,
        String configServerName,
        MiddlewareConfigServerInner configServerResource,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            updatePatchWithResponseAsync(
                resourceGroupName, javaEnvironmentName, configServerName, configServerResource, context);
        return this
            .client
            .<MiddlewareConfigServerInner, MiddlewareConfigServerInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                MiddlewareConfigServerInner.class,
                MiddlewareConfigServerInner.class,
                context);
    }

    /**
     * Update the config server middleware.
     *
     * <p>Operation to update the config server.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param configServerName Name of the Config Server.
     * @param configServerResource Parameters for the update operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of config Server resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<MiddlewareConfigServerInner>, MiddlewareConfigServerInner> beginUpdatePatch(
        String resourceGroupName,
        String javaEnvironmentName,
        String configServerName,
        MiddlewareConfigServerInner configServerResource) {
        return this
            .beginUpdatePatchAsync(resourceGroupName, javaEnvironmentName, configServerName, configServerResource)
            .getSyncPoller();
    }

    /**
     * Update the config server middleware.
     *
     * <p>Operation to update the config server.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param configServerName Name of the Config Server.
     * @param configServerResource Parameters for the update operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of config Server resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<MiddlewareConfigServerInner>, MiddlewareConfigServerInner> beginUpdatePatch(
        String resourceGroupName,
        String javaEnvironmentName,
        String configServerName,
        MiddlewareConfigServerInner configServerResource,
        Context context) {
        return this
            .beginUpdatePatchAsync(
                resourceGroupName, javaEnvironmentName, configServerName, configServerResource, context)
            .getSyncPoller();
    }

    /**
     * Update the config server middleware.
     *
     * <p>Operation to update the config server.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param configServerName Name of the Config Server.
     * @param configServerResource Parameters for the update operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return config Server resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<MiddlewareConfigServerInner> updatePatchAsync(
        String resourceGroupName,
        String javaEnvironmentName,
        String configServerName,
        MiddlewareConfigServerInner configServerResource) {
        return beginUpdatePatchAsync(resourceGroupName, javaEnvironmentName, configServerName, configServerResource)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Update the config server middleware.
     *
     * <p>Operation to update the config server.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param configServerName Name of the Config Server.
     * @param configServerResource Parameters for the update operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return config Server resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<MiddlewareConfigServerInner> updatePatchAsync(
        String resourceGroupName,
        String javaEnvironmentName,
        String configServerName,
        MiddlewareConfigServerInner configServerResource,
        Context context) {
        return beginUpdatePatchAsync(
                resourceGroupName, javaEnvironmentName, configServerName, configServerResource, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Update the config server middleware.
     *
     * <p>Operation to update the config server.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param configServerName Name of the Config Server.
     * @param configServerResource Parameters for the update operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return config Server resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MiddlewareConfigServerInner updatePatch(
        String resourceGroupName,
        String javaEnvironmentName,
        String configServerName,
        MiddlewareConfigServerInner configServerResource) {
        return updatePatchAsync(resourceGroupName, javaEnvironmentName, configServerName, configServerResource).block();
    }

    /**
     * Update the config server middleware.
     *
     * <p>Operation to update the config server.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param configServerName Name of the Config Server.
     * @param configServerResource Parameters for the update operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return config Server resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MiddlewareConfigServerInner updatePatch(
        String resourceGroupName,
        String javaEnvironmentName,
        String configServerName,
        MiddlewareConfigServerInner configServerResource,
        Context context) {
        return updatePatchAsync(resourceGroupName, javaEnvironmentName, configServerName, configServerResource, context)
            .block();
    }

    /**
     * Validate the config server middleware settings.
     *
     * <p>Check if the config server settings are valid.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param configServerName Name of the Config Server.
     * @param configServerSettings Config server settings to be validated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return validation result for config server settings along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> validateWithResponseAsync(
        String resourceGroupName,
        String javaEnvironmentName,
        String configServerName,
        MiddlewareConfigServerSettings configServerSettings) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (javaEnvironmentName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter javaEnvironmentName is required and cannot be null."));
        }
        if (configServerName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter configServerName is required and cannot be null."));
        }
        if (configServerSettings == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter configServerSettings is required and cannot be null."));
        } else {
            configServerSettings.validate();
        }
        final String apiVersion = "2023-08-02-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .validate(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            javaEnvironmentName,
                            configServerName,
                            apiVersion,
                            configServerSettings,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Validate the config server middleware settings.
     *
     * <p>Check if the config server settings are valid.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param configServerName Name of the Config Server.
     * @param configServerSettings Config server settings to be validated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return validation result for config server settings along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> validateWithResponseAsync(
        String resourceGroupName,
        String javaEnvironmentName,
        String configServerName,
        MiddlewareConfigServerSettings configServerSettings,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (javaEnvironmentName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter javaEnvironmentName is required and cannot be null."));
        }
        if (configServerName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter configServerName is required and cannot be null."));
        }
        if (configServerSettings == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter configServerSettings is required and cannot be null."));
        } else {
            configServerSettings.validate();
        }
        final String apiVersion = "2023-08-02-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .validate(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                javaEnvironmentName,
                configServerName,
                apiVersion,
                configServerSettings,
                accept,
                context);
    }

    /**
     * Validate the config server middleware settings.
     *
     * <p>Check if the config server settings are valid.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param configServerName Name of the Config Server.
     * @param configServerSettings Config server settings to be validated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of validation result for config server settings.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<
            PollResult<MiddlewareConfigServerSettingsValidateResultInner>,
            MiddlewareConfigServerSettingsValidateResultInner>
        beginValidateAsync(
            String resourceGroupName,
            String javaEnvironmentName,
            String configServerName,
            MiddlewareConfigServerSettings configServerSettings) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            validateWithResponseAsync(resourceGroupName, javaEnvironmentName, configServerName, configServerSettings);
        return this
            .client
            .<MiddlewareConfigServerSettingsValidateResultInner, MiddlewareConfigServerSettingsValidateResultInner>
                getLroResult(
                    mono,
                    this.client.getHttpPipeline(),
                    MiddlewareConfigServerSettingsValidateResultInner.class,
                    MiddlewareConfigServerSettingsValidateResultInner.class,
                    this.client.getContext());
    }

    /**
     * Validate the config server middleware settings.
     *
     * <p>Check if the config server settings are valid.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param configServerName Name of the Config Server.
     * @param configServerSettings Config server settings to be validated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of validation result for config server settings.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<
            PollResult<MiddlewareConfigServerSettingsValidateResultInner>,
            MiddlewareConfigServerSettingsValidateResultInner>
        beginValidateAsync(
            String resourceGroupName,
            String javaEnvironmentName,
            String configServerName,
            MiddlewareConfigServerSettings configServerSettings,
            Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            validateWithResponseAsync(
                resourceGroupName, javaEnvironmentName, configServerName, configServerSettings, context);
        return this
            .client
            .<MiddlewareConfigServerSettingsValidateResultInner, MiddlewareConfigServerSettingsValidateResultInner>
                getLroResult(
                    mono,
                    this.client.getHttpPipeline(),
                    MiddlewareConfigServerSettingsValidateResultInner.class,
                    MiddlewareConfigServerSettingsValidateResultInner.class,
                    context);
    }

    /**
     * Validate the config server middleware settings.
     *
     * <p>Check if the config server settings are valid.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param configServerName Name of the Config Server.
     * @param configServerSettings Config server settings to be validated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of validation result for config server settings.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<
            PollResult<MiddlewareConfigServerSettingsValidateResultInner>,
            MiddlewareConfigServerSettingsValidateResultInner>
        beginValidate(
            String resourceGroupName,
            String javaEnvironmentName,
            String configServerName,
            MiddlewareConfigServerSettings configServerSettings) {
        return this
            .beginValidateAsync(resourceGroupName, javaEnvironmentName, configServerName, configServerSettings)
            .getSyncPoller();
    }

    /**
     * Validate the config server middleware settings.
     *
     * <p>Check if the config server settings are valid.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param configServerName Name of the Config Server.
     * @param configServerSettings Config server settings to be validated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of validation result for config server settings.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<
            PollResult<MiddlewareConfigServerSettingsValidateResultInner>,
            MiddlewareConfigServerSettingsValidateResultInner>
        beginValidate(
            String resourceGroupName,
            String javaEnvironmentName,
            String configServerName,
            MiddlewareConfigServerSettings configServerSettings,
            Context context) {
        return this
            .beginValidateAsync(resourceGroupName, javaEnvironmentName, configServerName, configServerSettings, context)
            .getSyncPoller();
    }

    /**
     * Validate the config server middleware settings.
     *
     * <p>Check if the config server settings are valid.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param configServerName Name of the Config Server.
     * @param configServerSettings Config server settings to be validated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return validation result for config server settings on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<MiddlewareConfigServerSettingsValidateResultInner> validateAsync(
        String resourceGroupName,
        String javaEnvironmentName,
        String configServerName,
        MiddlewareConfigServerSettings configServerSettings) {
        return beginValidateAsync(resourceGroupName, javaEnvironmentName, configServerName, configServerSettings)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Validate the config server middleware settings.
     *
     * <p>Check if the config server settings are valid.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param configServerName Name of the Config Server.
     * @param configServerSettings Config server settings to be validated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return validation result for config server settings on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<MiddlewareConfigServerSettingsValidateResultInner> validateAsync(
        String resourceGroupName,
        String javaEnvironmentName,
        String configServerName,
        MiddlewareConfigServerSettings configServerSettings,
        Context context) {
        return beginValidateAsync(
                resourceGroupName, javaEnvironmentName, configServerName, configServerSettings, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Validate the config server middleware settings.
     *
     * <p>Check if the config server settings are valid.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param configServerName Name of the Config Server.
     * @param configServerSettings Config server settings to be validated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return validation result for config server settings.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MiddlewareConfigServerSettingsValidateResultInner validate(
        String resourceGroupName,
        String javaEnvironmentName,
        String configServerName,
        MiddlewareConfigServerSettings configServerSettings) {
        return validateAsync(resourceGroupName, javaEnvironmentName, configServerName, configServerSettings).block();
    }

    /**
     * Validate the config server middleware settings.
     *
     * <p>Check if the config server settings are valid.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param configServerName Name of the Config Server.
     * @param configServerSettings Config server settings to be validated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return validation result for config server settings.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MiddlewareConfigServerSettingsValidateResultInner validate(
        String resourceGroupName,
        String javaEnvironmentName,
        String configServerName,
        MiddlewareConfigServerSettings configServerSettings,
        Context context) {
        return validateAsync(resourceGroupName, javaEnvironmentName, configServerName, configServerSettings, context)
            .block();
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return azure Spring Apps Config Server collection ARM resource along with {@link PagedResponse} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<MiddlewareConfigServerInner>> listNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<MiddlewareConfigServerInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return azure Spring Apps Config Server collection ARM resource along with {@link PagedResponse} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<MiddlewareConfigServerInner>> listNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }
}
