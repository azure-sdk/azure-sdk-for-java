// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appplatform.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Job's execution template, containing configuration for an execution.
 */
@Fluent
public final class JobExecutionTemplate implements JsonSerializable<JobExecutionTemplate> {
    /*
     * Environment variables of Job execution
     */
    private List<EnvVar> environmentVariables;

    /*
     * Arguments for the Job execution.
     */
    private List<String> args;

    /*
     * The requested resource quantity for required CPU and Memory.
     */
    private JobResourceRequests resourceRequests;

    /**
     * Creates an instance of JobExecutionTemplate class.
     */
    public JobExecutionTemplate() {
    }

    /**
     * Get the environmentVariables property: Environment variables of Job execution.
     * 
     * @return the environmentVariables value.
     */
    public List<EnvVar> environmentVariables() {
        return this.environmentVariables;
    }

    /**
     * Set the environmentVariables property: Environment variables of Job execution.
     * 
     * @param environmentVariables the environmentVariables value to set.
     * @return the JobExecutionTemplate object itself.
     */
    public JobExecutionTemplate withEnvironmentVariables(List<EnvVar> environmentVariables) {
        this.environmentVariables = environmentVariables;
        return this;
    }

    /**
     * Get the args property: Arguments for the Job execution.
     * 
     * @return the args value.
     */
    public List<String> args() {
        return this.args;
    }

    /**
     * Set the args property: Arguments for the Job execution.
     * 
     * @param args the args value to set.
     * @return the JobExecutionTemplate object itself.
     */
    public JobExecutionTemplate withArgs(List<String> args) {
        this.args = args;
        return this;
    }

    /**
     * Get the resourceRequests property: The requested resource quantity for required CPU and Memory.
     * 
     * @return the resourceRequests value.
     */
    public JobResourceRequests resourceRequests() {
        return this.resourceRequests;
    }

    /**
     * Set the resourceRequests property: The requested resource quantity for required CPU and Memory.
     * 
     * @param resourceRequests the resourceRequests value to set.
     * @return the JobExecutionTemplate object itself.
     */
    public JobExecutionTemplate withResourceRequests(JobResourceRequests resourceRequests) {
        this.resourceRequests = resourceRequests;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (environmentVariables() != null) {
            environmentVariables().forEach(e -> e.validate());
        }
        if (resourceRequests() != null) {
            resourceRequests().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("environmentVariables", this.environmentVariables,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("args", this.args, (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("resourceRequests", this.resourceRequests);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of JobExecutionTemplate from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of JobExecutionTemplate if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the JobExecutionTemplate.
     */
    public static JobExecutionTemplate fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            JobExecutionTemplate deserializedJobExecutionTemplate = new JobExecutionTemplate();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("environmentVariables".equals(fieldName)) {
                    List<EnvVar> environmentVariables = reader.readArray(reader1 -> EnvVar.fromJson(reader1));
                    deserializedJobExecutionTemplate.environmentVariables = environmentVariables;
                } else if ("args".equals(fieldName)) {
                    List<String> args = reader.readArray(reader1 -> reader1.getString());
                    deserializedJobExecutionTemplate.args = args;
                } else if ("resourceRequests".equals(fieldName)) {
                    deserializedJobExecutionTemplate.resourceRequests = JobResourceRequests.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedJobExecutionTemplate;
        });
    }
}
