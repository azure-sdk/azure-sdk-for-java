// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appplatform.generated.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * Job's execution template, containing configuration for an execution.
 */
@Fluent
public final class JobExecutionTemplate {
    /*
     * Environment variables of Job execution
     */
    @JsonProperty(value = "environmentVariables")
    private List<EnvVar> environmentVariables;

    /*
     * Arguments for the Job execution.
     */
    @JsonProperty(value = "args")
    private List<String> args;

    /**
     * Creates an instance of JobExecutionTemplate class.
     */
    public JobExecutionTemplate() {
    }

    /**
     * Get the environmentVariables property: Environment variables of Job execution.
     * 
     * @return the environmentVariables value.
     */
    public List<EnvVar> environmentVariables() {
        return this.environmentVariables;
    }

    /**
     * Set the environmentVariables property: Environment variables of Job execution.
     * 
     * @param environmentVariables the environmentVariables value to set.
     * @return the JobExecutionTemplate object itself.
     */
    public JobExecutionTemplate withEnvironmentVariables(List<EnvVar> environmentVariables) {
        this.environmentVariables = environmentVariables;
        return this;
    }

    /**
     * Get the args property: Arguments for the Job execution.
     * 
     * @return the args value.
     */
    public List<String> args() {
        return this.args;
    }

    /**
     * Set the args property: Arguments for the Job execution.
     * 
     * @param args the args value to set.
     * @return the JobExecutionTemplate object itself.
     */
    public JobExecutionTemplate withArgs(List<String> args) {
        this.args = args;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (environmentVariables() != null) {
            environmentVariables().forEach(e -> e.validate());
        }
    }
}
