// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appplatform.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.resourcemanager.appplatform.generated.models.ConfigServerEnabledState;
import com.azure.resourcemanager.appplatform.generated.models.ConfigServerState;
import com.azure.resourcemanager.appplatform.generated.models.MiddlewareConfigServerSettings;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Config Server resource.
 */
@Fluent
public final class MiddlewareConfigServerInner extends ProxyResource {
    /*
     * Config server git properties payload
     */
    @JsonProperty(value = "properties")
    private MiddlewareConfigServerProperties innerProperties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /**
     * Creates an instance of MiddlewareConfigServerInner class.
     */
    public MiddlewareConfigServerInner() {
    }

    /**
     * Get the innerProperties property: Config server git properties payload.
     * 
     * @return the innerProperties value.
     */
    private MiddlewareConfigServerProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the provisioningState property: State of the config server.
     * 
     * @return the provisioningState value.
     */
    public ConfigServerState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the enabledState property: Enabled state of the config server. This is only used in Consumption tier.
     * 
     * @return the enabledState value.
     */
    public ConfigServerEnabledState enabledState() {
        return this.innerProperties() == null ? null : this.innerProperties().enabledState();
    }

    /**
     * Set the enabledState property: Enabled state of the config server. This is only used in Consumption tier.
     * 
     * @param enabledState the enabledState value to set.
     * @return the MiddlewareConfigServerInner object itself.
     */
    public MiddlewareConfigServerInner withEnabledState(ConfigServerEnabledState enabledState) {
        if (this.innerProperties() == null) {
            this.innerProperties = new MiddlewareConfigServerProperties();
        }
        this.innerProperties().withEnabledState(enabledState);
        return this;
    }

    /**
     * Get the configServer property: Settings of config server.
     * 
     * @return the configServer value.
     */
    public MiddlewareConfigServerSettings configServer() {
        return this.innerProperties() == null ? null : this.innerProperties().configServer();
    }

    /**
     * Set the configServer property: Settings of config server.
     * 
     * @param configServer the configServer value to set.
     * @return the MiddlewareConfigServerInner object itself.
     */
    public MiddlewareConfigServerInner withConfigServer(MiddlewareConfigServerSettings configServer) {
        if (this.innerProperties() == null) {
            this.innerProperties = new MiddlewareConfigServerProperties();
        }
        this.innerProperties().withConfigServer(configServer);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
