// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appplatform.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.appplatform.generated.models.JobExecutionRunningState;
import com.azure.resourcemanager.appplatform.generated.models.JobExecutionTemplate;
import com.azure.resourcemanager.appplatform.generated.models.JobResourceProperties;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Azure Spring Apps Job execution.
 */
@Fluent
public final class JobExecutionInner implements JsonSerializable<JobExecutionInner> {
    /*
     * Job execution Name.
     */
    private String name;

    /*
     * Current state of the job execution
     */
    private JobExecutionRunningState status;

    /*
     * Job execution start time.
     */
    private OffsetDateTime startTime;

    /*
     * Job execution end time.
     */
    private OffsetDateTime endTime;

    /*
     * The template which is applied for the execution of the Job.
     */
    private JobExecutionTemplate template;

    /*
     * The snapshot of job configuration
     */
    private JobResourceProperties jobSnapshot;

    /**
     * Creates an instance of JobExecutionInner class.
     */
    public JobExecutionInner() {
    }

    /**
     * Get the name property: Job execution Name.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Job execution Name.
     * 
     * @param name the name value to set.
     * @return the JobExecutionInner object itself.
     */
    public JobExecutionInner withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the status property: Current state of the job execution.
     * 
     * @return the status value.
     */
    public JobExecutionRunningState status() {
        return this.status;
    }

    /**
     * Set the status property: Current state of the job execution.
     * 
     * @param status the status value to set.
     * @return the JobExecutionInner object itself.
     */
    public JobExecutionInner withStatus(JobExecutionRunningState status) {
        this.status = status;
        return this;
    }

    /**
     * Get the startTime property: Job execution start time.
     * 
     * @return the startTime value.
     */
    public OffsetDateTime startTime() {
        return this.startTime;
    }

    /**
     * Set the startTime property: Job execution start time.
     * 
     * @param startTime the startTime value to set.
     * @return the JobExecutionInner object itself.
     */
    public JobExecutionInner withStartTime(OffsetDateTime startTime) {
        this.startTime = startTime;
        return this;
    }

    /**
     * Get the endTime property: Job execution end time.
     * 
     * @return the endTime value.
     */
    public OffsetDateTime endTime() {
        return this.endTime;
    }

    /**
     * Set the endTime property: Job execution end time.
     * 
     * @param endTime the endTime value to set.
     * @return the JobExecutionInner object itself.
     */
    public JobExecutionInner withEndTime(OffsetDateTime endTime) {
        this.endTime = endTime;
        return this;
    }

    /**
     * Get the template property: The template which is applied for the execution of the Job.
     * 
     * @return the template value.
     */
    public JobExecutionTemplate template() {
        return this.template;
    }

    /**
     * Set the template property: The template which is applied for the execution of the Job.
     * 
     * @param template the template value to set.
     * @return the JobExecutionInner object itself.
     */
    public JobExecutionInner withTemplate(JobExecutionTemplate template) {
        this.template = template;
        return this;
    }

    /**
     * Get the jobSnapshot property: The snapshot of job configuration.
     * 
     * @return the jobSnapshot value.
     */
    public JobResourceProperties jobSnapshot() {
        return this.jobSnapshot;
    }

    /**
     * Set the jobSnapshot property: The snapshot of job configuration.
     * 
     * @param jobSnapshot the jobSnapshot value to set.
     * @return the JobExecutionInner object itself.
     */
    public JobExecutionInner withJobSnapshot(JobResourceProperties jobSnapshot) {
        this.jobSnapshot = jobSnapshot;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (template() != null) {
            template().validate();
        }
        if (jobSnapshot() != null) {
            jobSnapshot().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        jsonWriter.writeStringField("startTime",
            this.startTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.startTime));
        jsonWriter.writeStringField("endTime",
            this.endTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.endTime));
        jsonWriter.writeJsonField("template", this.template);
        jsonWriter.writeJsonField("jobSnapshot", this.jobSnapshot);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of JobExecutionInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of JobExecutionInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the JobExecutionInner.
     */
    public static JobExecutionInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            JobExecutionInner deserializedJobExecutionInner = new JobExecutionInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedJobExecutionInner.name = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedJobExecutionInner.status = JobExecutionRunningState.fromString(reader.getString());
                } else if ("startTime".equals(fieldName)) {
                    deserializedJobExecutionInner.startTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("endTime".equals(fieldName)) {
                    deserializedJobExecutionInner.endTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("template".equals(fieldName)) {
                    deserializedJobExecutionInner.template = JobExecutionTemplate.fromJson(reader);
                } else if ("jobSnapshot".equals(fieldName)) {
                    deserializedJobExecutionInner.jobSnapshot = JobResourceProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedJobExecutionInner;
        });
    }
}
