// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appplatform.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.core.management.SystemData;
import com.azure.resourcemanager.appplatform.generated.models.ProvisioningState;
import com.azure.resourcemanager.appplatform.generated.models.ZoneRedundantEnum;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Map;

/** An environment for hosting Azure Spring Apps. */
@Fluent
public final class JavaEnvironmentInner extends Resource {
    /*
     * Java environment resource specific properties
     */
    @JsonProperty(value = "properties")
    private JavaEnvironmentProperties innerProperties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /** Creates an instance of JavaEnvironmentInner class. */
    public JavaEnvironmentInner() {
    }

    /**
     * Get the innerProperties property: Java environment resource specific properties.
     *
     * @return the innerProperties value.
     */
    private JavaEnvironmentProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     *
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /** {@inheritDoc} */
    @Override
    public JavaEnvironmentInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public JavaEnvironmentInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state of the Service.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the environmentId property: The resource Id of the App Environment that the Spring Apps instance builds on.
     *
     * @return the environmentId value.
     */
    public String environmentId() {
        return this.innerProperties() == null ? null : this.innerProperties().environmentId();
    }

    /**
     * Set the environmentId property: The resource Id of the App Environment that the Spring Apps instance builds on.
     *
     * @param environmentId the environmentId value to set.
     * @return the JavaEnvironmentInner object itself.
     */
    public JavaEnvironmentInner withEnvironmentId(String environmentId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new JavaEnvironmentProperties();
        }
        this.innerProperties().withEnvironmentId(environmentId);
        return this;
    }

    /**
     * Get the infraResourceGroup property: The name of the resource group that contains the infrastructure resources.
     *
     * @return the infraResourceGroup value.
     */
    public String infraResourceGroup() {
        return this.innerProperties() == null ? null : this.innerProperties().infraResourceGroup();
    }

    /**
     * Set the infraResourceGroup property: The name of the resource group that contains the infrastructure resources.
     *
     * @param infraResourceGroup the infraResourceGroup value to set.
     * @return the JavaEnvironmentInner object itself.
     */
    public JavaEnvironmentInner withInfraResourceGroup(String infraResourceGroup) {
        if (this.innerProperties() == null) {
            this.innerProperties = new JavaEnvironmentProperties();
        }
        this.innerProperties().withInfraResourceGroup(infraResourceGroup);
        return this;
    }

    /**
     * Get the zoneRedundant property: Whether or not this Java Environment is zone-redundant.
     *
     * @return the zoneRedundant value.
     */
    public ZoneRedundantEnum zoneRedundant() {
        return this.innerProperties() == null ? null : this.innerProperties().zoneRedundant();
    }

    /**
     * Set the zoneRedundant property: Whether or not this Java Environment is zone-redundant.
     *
     * @param zoneRedundant the zoneRedundant value to set.
     * @return the JavaEnvironmentInner object itself.
     */
    public JavaEnvironmentInner withZoneRedundant(ZoneRedundantEnum zoneRedundant) {
        if (this.innerProperties() == null) {
            this.innerProperties = new JavaEnvironmentProperties();
        }
        this.innerProperties().withZoneRedundant(zoneRedundant);
        return this;
    }

    /**
     * Get the defaultDomain property: Default Domain Name for the Java environment.
     *
     * @return the defaultDomain value.
     */
    public String defaultDomain() {
        return this.innerProperties() == null ? null : this.innerProperties().defaultDomain();
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
