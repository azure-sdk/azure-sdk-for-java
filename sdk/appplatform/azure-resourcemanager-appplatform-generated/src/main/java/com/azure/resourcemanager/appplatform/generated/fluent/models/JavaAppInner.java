// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appplatform.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.appplatform.generated.models.Configuration;
import com.azure.resourcemanager.appplatform.generated.models.ContainerApp;
import com.azure.resourcemanager.appplatform.generated.models.ExtendedLocation;
import com.azure.resourcemanager.appplatform.generated.models.JavaAppProvisioningState;
import com.azure.resourcemanager.appplatform.generated.models.ManagedServiceIdentity;
import com.azure.resourcemanager.appplatform.generated.models.SpringAppsTemplate;
import com.azure.resourcemanager.appplatform.generated.models.Template;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Map;

/** Azure Spring Apps JavaApp resource. */
@Fluent
public class JavaAppInner extends ContainerApp {
    /*
     * The properties property.
     */
    @JsonProperty(value = "properties")
    private JavaAppProperties innerProperties;

    /** Creates an instance of JavaAppInner class. */
    public JavaAppInner() {
    }

    /**
     * Get the innerProperties property: The properties property.
     *
     * @return the innerProperties value.
     */
    private JavaAppProperties innerProperties() {
        return this.innerProperties;
    }

    /** {@inheritDoc} */
    @Override
    public JavaAppInner withExtendedLocation(ExtendedLocation extendedLocation) {
        super.withExtendedLocation(extendedLocation);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public JavaAppInner withIdentity(ManagedServiceIdentity identity) {
        super.withIdentity(identity);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public JavaAppInner withManagedBy(String managedBy) {
        super.withManagedBy(managedBy);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public JavaAppInner withManagedEnvironmentId(String managedEnvironmentId) {
        super.withManagedEnvironmentId(managedEnvironmentId);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public JavaAppInner withEnvironmentId(String environmentId) {
        super.withEnvironmentId(environmentId);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public JavaAppInner withWorkloadProfileName(String workloadProfileName) {
        super.withWorkloadProfileName(workloadProfileName);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public JavaAppInner withConfiguration(Configuration configuration) {
        super.withConfiguration(configuration);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public JavaAppInner withTemplate(Template template) {
        super.withTemplate(template);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public JavaAppInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public JavaAppInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state of the Azure Spring Apps JavaApp.
     *
     * @return the provisioningState value.
     */
    public JavaAppProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the template property: Azure Spring Apps Revision Template with all possible settings and the defaults if
     * user did not provide them. The defaults are populated as they were at the creation time.
     *
     * @return the template value.
     */
    public SpringAppsTemplate template() {
        return this.innerProperties() == null ? null : this.innerProperties().template();
    }

    /**
     * Set the template property: Azure Spring Apps Revision Template with all possible settings and the defaults if
     * user did not provide them. The defaults are populated as they were at the creation time.
     *
     * @param template the template value to set.
     * @return the JavaAppInner object itself.
     */
    public JavaAppInner withTemplate(SpringAppsTemplate template) {
        if (this.innerProperties() == null) {
            this.innerProperties = new JavaAppProperties();
        }
        this.innerProperties().withTemplate(template);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
