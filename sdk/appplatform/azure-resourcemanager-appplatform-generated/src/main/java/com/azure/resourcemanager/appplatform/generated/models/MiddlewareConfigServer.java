// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appplatform.generated.models;

import com.azure.core.util.Context;
import com.azure.resourcemanager.appplatform.generated.fluent.models.MiddlewareConfigServerInner;

/** An immutable client-side representation of MiddlewareConfigServer. */
public interface MiddlewareConfigServer {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the provisioningState property: State of the config server.
     *
     * @return the provisioningState value.
     */
    ConfigServerState provisioningState();

    /**
     * Gets the enabledState property: Enabled state of the config server. This is only used in Consumption tier.
     *
     * @return the enabledState value.
     */
    ConfigServerEnabledState enabledState();

    /**
     * Gets the configServer property: Settings of config server.
     *
     * @return the configServer value.
     */
    MiddlewareConfigServerSettings configServer();

    /**
     * Gets the name of the resource group.
     *
     * @return the name of the resource group.
     */
    String resourceGroupName();

    /**
     * Gets the inner com.azure.resourcemanager.appplatform.generated.fluent.models.MiddlewareConfigServerInner object.
     *
     * @return the inner object.
     */
    MiddlewareConfigServerInner innerModel();

    /** The entirety of the MiddlewareConfigServer definition. */
    interface Definition
        extends DefinitionStages.Blank, DefinitionStages.WithParentResource, DefinitionStages.WithCreate {
    }

    /** The MiddlewareConfigServer definition stages. */
    interface DefinitionStages {
        /** The first stage of the MiddlewareConfigServer definition. */
        interface Blank extends WithParentResource {
        }

        /** The stage of the MiddlewareConfigServer definition allowing to specify parent resource. */
        interface WithParentResource {
            /**
             * Specifies resourceGroupName, javaEnvironmentName.
             *
             * @param resourceGroupName The name of the resource group. The name is case insensitive.
             * @param javaEnvironmentName Name of the Java Environment.
             * @return the next definition stage.
             */
            WithCreate withExistingJavaEnvironment(String resourceGroupName, String javaEnvironmentName);
        }

        /**
         * The stage of the MiddlewareConfigServer definition which contains all the minimum required properties for the
         * resource to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate extends DefinitionStages.WithEnabledState, DefinitionStages.WithConfigServer {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            MiddlewareConfigServer create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            MiddlewareConfigServer create(Context context);
        }

        /** The stage of the MiddlewareConfigServer definition allowing to specify enabledState. */
        interface WithEnabledState {
            /**
             * Specifies the enabledState property: Enabled state of the config server. This is only used in Consumption
             * tier..
             *
             * @param enabledState Enabled state of the config server. This is only used in Consumption tier.
             * @return the next definition stage.
             */
            WithCreate withEnabledState(ConfigServerEnabledState enabledState);
        }

        /** The stage of the MiddlewareConfigServer definition allowing to specify configServer. */
        interface WithConfigServer {
            /**
             * Specifies the configServer property: Settings of config server..
             *
             * @param configServer Settings of config server.
             * @return the next definition stage.
             */
            WithCreate withConfigServer(MiddlewareConfigServerSettings configServer);
        }
    }

    /**
     * Begins update for the MiddlewareConfigServer resource.
     *
     * @return the stage of resource update.
     */
    MiddlewareConfigServer.Update update();

    /** The template for MiddlewareConfigServer update. */
    interface Update extends UpdateStages.WithEnabledState, UpdateStages.WithConfigServer {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        MiddlewareConfigServer apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        MiddlewareConfigServer apply(Context context);
    }

    /** The MiddlewareConfigServer update stages. */
    interface UpdateStages {
        /** The stage of the MiddlewareConfigServer update allowing to specify enabledState. */
        interface WithEnabledState {
            /**
             * Specifies the enabledState property: Enabled state of the config server. This is only used in Consumption
             * tier..
             *
             * @param enabledState Enabled state of the config server. This is only used in Consumption tier.
             * @return the next definition stage.
             */
            Update withEnabledState(ConfigServerEnabledState enabledState);
        }

        /** The stage of the MiddlewareConfigServer update allowing to specify configServer. */
        interface WithConfigServer {
            /**
             * Specifies the configServer property: Settings of config server..
             *
             * @param configServer Settings of config server.
             * @return the next definition stage.
             */
            Update withConfigServer(MiddlewareConfigServerSettings configServer);
        }
    }

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    MiddlewareConfigServer refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    MiddlewareConfigServer refresh(Context context);

    /**
     * Validate the config server middleware settings.
     *
     * <p>Check if the config server settings are valid.
     *
     * @param configServerSettings Config server settings to be validated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return validation result for config server settings.
     */
    MiddlewareConfigServerSettingsValidateResult validate(MiddlewareConfigServerSettings configServerSettings);

    /**
     * Validate the config server middleware settings.
     *
     * <p>Check if the config server settings are valid.
     *
     * @param configServerSettings Config server settings to be validated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return validation result for config server settings.
     */
    MiddlewareConfigServerSettingsValidateResult validate(
        MiddlewareConfigServerSettings configServerSettings, Context context);
}
