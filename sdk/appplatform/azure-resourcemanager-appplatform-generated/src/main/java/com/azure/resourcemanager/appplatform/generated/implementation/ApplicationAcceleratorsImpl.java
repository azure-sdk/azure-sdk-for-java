// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appplatform.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.appplatform.generated.fluent.ApplicationAcceleratorsClient;
import com.azure.resourcemanager.appplatform.generated.fluent.models.ApplicationAcceleratorResourceInner;
import com.azure.resourcemanager.appplatform.generated.models.ApplicationAcceleratorResource;
import com.azure.resourcemanager.appplatform.generated.models.ApplicationAccelerators;

public final class ApplicationAcceleratorsImpl implements ApplicationAccelerators {
    private static final ClientLogger LOGGER = new ClientLogger(ApplicationAcceleratorsImpl.class);

    private final ApplicationAcceleratorsClient innerClient;

    private final com.azure.resourcemanager.appplatform.generated.AppPlatformManager serviceManager;

    public ApplicationAcceleratorsImpl(ApplicationAcceleratorsClient innerClient,
        com.azure.resourcemanager.appplatform.generated.AppPlatformManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<ApplicationAcceleratorResource> list(String resourceGroupName, String serviceName) {
        PagedIterable<ApplicationAcceleratorResourceInner> inner
            = this.serviceClient().list(resourceGroupName, serviceName);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new ApplicationAcceleratorResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<ApplicationAcceleratorResource> list(String resourceGroupName, String serviceName,
        Context context) {
        PagedIterable<ApplicationAcceleratorResourceInner> inner
            = this.serviceClient().list(resourceGroupName, serviceName, context);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new ApplicationAcceleratorResourceImpl(inner1, this.manager()));
    }

    public Response<ApplicationAcceleratorResource> getWithResponse(String resourceGroupName, String serviceName,
        String applicationAcceleratorName, Context context) {
        Response<ApplicationAcceleratorResourceInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, serviceName, applicationAcceleratorName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new ApplicationAcceleratorResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ApplicationAcceleratorResource get(String resourceGroupName, String serviceName,
        String applicationAcceleratorName) {
        ApplicationAcceleratorResourceInner inner
            = this.serviceClient().get(resourceGroupName, serviceName, applicationAcceleratorName);
        if (inner != null) {
            return new ApplicationAcceleratorResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String serviceName, String applicationAcceleratorName) {
        this.serviceClient().delete(resourceGroupName, serviceName, applicationAcceleratorName);
    }

    public void delete(String resourceGroupName, String serviceName, String applicationAcceleratorName,
        Context context) {
        this.serviceClient().delete(resourceGroupName, serviceName, applicationAcceleratorName, context);
    }

    public ApplicationAcceleratorResource getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serviceName = ResourceManagerUtils.getValueFromIdByName(id, "Spring");
        if (serviceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'Spring'.", id)));
        }
        String applicationAcceleratorName = ResourceManagerUtils.getValueFromIdByName(id, "applicationAccelerators");
        if (applicationAcceleratorName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'applicationAccelerators'.", id)));
        }
        return this.getWithResponse(resourceGroupName, serviceName, applicationAcceleratorName, Context.NONE)
            .getValue();
    }

    public Response<ApplicationAcceleratorResource> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serviceName = ResourceManagerUtils.getValueFromIdByName(id, "Spring");
        if (serviceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'Spring'.", id)));
        }
        String applicationAcceleratorName = ResourceManagerUtils.getValueFromIdByName(id, "applicationAccelerators");
        if (applicationAcceleratorName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'applicationAccelerators'.", id)));
        }
        return this.getWithResponse(resourceGroupName, serviceName, applicationAcceleratorName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serviceName = ResourceManagerUtils.getValueFromIdByName(id, "Spring");
        if (serviceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'Spring'.", id)));
        }
        String applicationAcceleratorName = ResourceManagerUtils.getValueFromIdByName(id, "applicationAccelerators");
        if (applicationAcceleratorName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'applicationAccelerators'.", id)));
        }
        this.delete(resourceGroupName, serviceName, applicationAcceleratorName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serviceName = ResourceManagerUtils.getValueFromIdByName(id, "Spring");
        if (serviceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'Spring'.", id)));
        }
        String applicationAcceleratorName = ResourceManagerUtils.getValueFromIdByName(id, "applicationAccelerators");
        if (applicationAcceleratorName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'applicationAccelerators'.", id)));
        }
        this.delete(resourceGroupName, serviceName, applicationAcceleratorName, context);
    }

    private ApplicationAcceleratorsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.appplatform.generated.AppPlatformManager manager() {
        return this.serviceManager;
    }

    public ApplicationAcceleratorResourceImpl define(String name) {
        return new ApplicationAcceleratorResourceImpl(name, this.manager());
    }
}
