// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appplatform.generated.models;

import com.azure.core.http.rest.Response;
import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.appplatform.generated.fluent.models.ServiceResourceAutoGeneratedInner;
import java.util.Map;

/** An immutable client-side representation of ServiceResourceAutoGenerated. */
public interface ServiceResourceAutoGenerated {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the location property: The geo-location where the resource lives.
     *
     * @return the location value.
     */
    String location();

    /**
     * Gets the tags property: Resource tags.
     *
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the properties property: Properties of the Service resource.
     *
     * @return the properties value.
     */
    ClusterResourcePropertiesAutoGenerated properties();

    /**
     * Gets the sku property: Sku of the Service resource.
     *
     * @return the sku value.
     */
    Sku sku();

    /**
     * Gets the systemData property: Metadata pertaining to creation and last modification of the resource.
     *
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * Gets the region of the resource.
     *
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     *
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the name of the resource group.
     *
     * @return the name of the resource group.
     */
    String resourceGroupName();

    /**
     * Gets the inner com.azure.resourcemanager.appplatform.generated.fluent.models.ServiceResourceAutoGeneratedInner
     * object.
     *
     * @return the inner object.
     */
    ServiceResourceAutoGeneratedInner innerModel();

    /** The entirety of the ServiceResourceAutoGenerated definition. */
    interface Definition
        extends DefinitionStages.Blank,
            DefinitionStages.WithLocation,
            DefinitionStages.WithResourceGroup,
            DefinitionStages.WithCreate {
    }
    /** The ServiceResourceAutoGenerated definition stages. */
    interface DefinitionStages {
        /** The first stage of the ServiceResourceAutoGenerated definition. */
        interface Blank extends WithLocation {
        }
        /** The stage of the ServiceResourceAutoGenerated definition allowing to specify location. */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(Region location);

            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(String location);
        }
        /** The stage of the ServiceResourceAutoGenerated definition allowing to specify parent resource. */
        interface WithResourceGroup {
            /**
             * Specifies resourceGroupName.
             *
             * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this
             *     value from the Azure Resource Manager API or the portal.
             * @return the next definition stage.
             */
            WithCreate withExistingResourceGroup(String resourceGroupName);
        }
        /**
         * The stage of the ServiceResourceAutoGenerated definition which contains all the minimum required properties
         * for the resource to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithTags, DefinitionStages.WithProperties, DefinitionStages.WithSku {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            ServiceResourceAutoGenerated create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            ServiceResourceAutoGenerated create(Context context);
        }
        /** The stage of the ServiceResourceAutoGenerated definition allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }
        /** The stage of the ServiceResourceAutoGenerated definition allowing to specify properties. */
        interface WithProperties {
            /**
             * Specifies the properties property: Properties of the Service resource.
             *
             * @param properties Properties of the Service resource.
             * @return the next definition stage.
             */
            WithCreate withProperties(ClusterResourcePropertiesAutoGenerated properties);
        }
        /** The stage of the ServiceResourceAutoGenerated definition allowing to specify sku. */
        interface WithSku {
            /**
             * Specifies the sku property: Sku of the Service resource.
             *
             * @param sku Sku of the Service resource.
             * @return the next definition stage.
             */
            WithCreate withSku(Sku sku);
        }
    }
    /**
     * Begins update for the ServiceResourceAutoGenerated resource.
     *
     * @return the stage of resource update.
     */
    ServiceResourceAutoGenerated.Update update();

    /** The template for ServiceResourceAutoGenerated update. */
    interface Update extends UpdateStages.WithTags, UpdateStages.WithProperties, UpdateStages.WithSku {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        ServiceResourceAutoGenerated apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        ServiceResourceAutoGenerated apply(Context context);
    }
    /** The ServiceResourceAutoGenerated update stages. */
    interface UpdateStages {
        /** The stage of the ServiceResourceAutoGenerated update allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }
        /** The stage of the ServiceResourceAutoGenerated update allowing to specify properties. */
        interface WithProperties {
            /**
             * Specifies the properties property: Properties of the Service resource.
             *
             * @param properties Properties of the Service resource.
             * @return the next definition stage.
             */
            Update withProperties(ClusterResourcePropertiesAutoGenerated properties);
        }
        /** The stage of the ServiceResourceAutoGenerated update allowing to specify sku. */
        interface WithSku {
            /**
             * Specifies the sku property: Sku of the Service resource.
             *
             * @param sku Sku of the Service resource.
             * @return the next definition stage.
             */
            Update withSku(Sku sku);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    ServiceResourceAutoGenerated refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    ServiceResourceAutoGenerated refresh(Context context);

    /**
     * List test keys for a Service.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return test keys payload.
     */
    TestKeys listTestKeys();

    /**
     * List test keys for a Service.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return test keys payload along with {@link Response}.
     */
    Response<TestKeys> listTestKeysWithResponse(Context context);

    /**
     * Regenerate a test key for a Service.
     *
     * @param regenerateTestKeyRequest Parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return test keys payload.
     */
    TestKeys regenerateTestKey(RegenerateTestKeyRequestPayload regenerateTestKeyRequest);

    /**
     * Regenerate a test key for a Service.
     *
     * @param regenerateTestKeyRequest Parameters for the operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return test keys payload along with {@link Response}.
     */
    Response<TestKeys> regenerateTestKeyWithResponse(
        RegenerateTestKeyRequestPayload regenerateTestKeyRequest, Context context);

    /**
     * Disable test endpoint functionality for a Service.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void disableTestEndpoint();

    /**
     * Disable test endpoint functionality for a Service.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    Response<Void> disableTestEndpointWithResponse(Context context);

    /**
     * Enable test endpoint functionality for a Service.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return test keys payload.
     */
    TestKeys enableTestEndpoint();

    /**
     * Enable test endpoint functionality for a Service.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return test keys payload along with {@link Response}.
     */
    Response<TestKeys> enableTestEndpointWithResponse(Context context);

    /**
     * List test keys for a Service.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return test keys payload.
     */
    TestKeys listTestKeys();

    /**
     * List test keys for a Service.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return test keys payload along with {@link Response}.
     */
    Response<TestKeys> listTestKeysWithResponse(Context context);

    /**
     * Regenerate a test key for a Service.
     *
     * @param regenerateTestKeyRequest Parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return test keys payload.
     */
    TestKeys regenerateTestKey(RegenerateTestKeyRequestPayload regenerateTestKeyRequest);

    /**
     * Regenerate a test key for a Service.
     *
     * @param regenerateTestKeyRequest Parameters for the operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return test keys payload along with {@link Response}.
     */
    Response<TestKeys> regenerateTestKeyWithResponse(
        RegenerateTestKeyRequestPayload regenerateTestKeyRequest, Context context);

    /**
     * Disable test endpoint functionality for a Service.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void disableTestEndpoint();

    /**
     * Disable test endpoint functionality for a Service.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    Response<Void> disableTestEndpointWithResponse(Context context);

    /**
     * Enable test endpoint functionality for a Service.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return test keys payload.
     */
    TestKeys enableTestEndpoint();

    /**
     * Enable test endpoint functionality for a Service.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return test keys payload along with {@link Response}.
     */
    Response<TestKeys> enableTestEndpointWithResponse(Context context);

    /**
     * Stop a Service.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void stop();

    /**
     * Stop a Service.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void stop(Context context);

    /**
     * Start a Service.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void start();

    /**
     * Start a Service.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void start(Context context);
}
