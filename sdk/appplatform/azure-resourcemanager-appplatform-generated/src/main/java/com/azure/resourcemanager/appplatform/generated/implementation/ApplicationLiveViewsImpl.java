// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appplatform.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.appplatform.generated.fluent.ApplicationLiveViewsClient;
import com.azure.resourcemanager.appplatform.generated.fluent.models.ApplicationLiveViewResourceInner;
import com.azure.resourcemanager.appplatform.generated.models.ApplicationLiveViewResource;
import com.azure.resourcemanager.appplatform.generated.models.ApplicationLiveViews;

public final class ApplicationLiveViewsImpl implements ApplicationLiveViews {
    private static final ClientLogger LOGGER = new ClientLogger(ApplicationLiveViewsImpl.class);

    private final ApplicationLiveViewsClient innerClient;

    private final com.azure.resourcemanager.appplatform.generated.AppPlatformManager serviceManager;

    public ApplicationLiveViewsImpl(
        ApplicationLiveViewsClient innerClient,
        com.azure.resourcemanager.appplatform.generated.AppPlatformManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<ApplicationLiveViewResource> list(String resourceGroupName, String serviceName) {
        PagedIterable<ApplicationLiveViewResourceInner> inner =
            this.serviceClient().list(resourceGroupName, serviceName);
        return Utils.mapPage(inner, inner1 -> new ApplicationLiveViewResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<ApplicationLiveViewResource> list(
        String resourceGroupName, String serviceName, Context context) {
        PagedIterable<ApplicationLiveViewResourceInner> inner =
            this.serviceClient().list(resourceGroupName, serviceName, context);
        return Utils.mapPage(inner, inner1 -> new ApplicationLiveViewResourceImpl(inner1, this.manager()));
    }

    public Response<ApplicationLiveViewResource> getWithResponse(
        String resourceGroupName, String serviceName, String applicationLiveViewName, Context context) {
        Response<ApplicationLiveViewResourceInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, serviceName, applicationLiveViewName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ApplicationLiveViewResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ApplicationLiveViewResource get(
        String resourceGroupName, String serviceName, String applicationLiveViewName) {
        ApplicationLiveViewResourceInner inner =
            this.serviceClient().get(resourceGroupName, serviceName, applicationLiveViewName);
        if (inner != null) {
            return new ApplicationLiveViewResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String serviceName, String applicationLiveViewName) {
        this.serviceClient().delete(resourceGroupName, serviceName, applicationLiveViewName);
    }

    public void delete(String resourceGroupName, String serviceName, String applicationLiveViewName, Context context) {
        this.serviceClient().delete(resourceGroupName, serviceName, applicationLiveViewName, context);
    }

    public ApplicationLiveViewResource getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serviceName = Utils.getValueFromIdByName(id, "Spring");
        if (serviceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'Spring'.", id)));
        }
        String applicationLiveViewName = Utils.getValueFromIdByName(id, "applicationLiveViews");
        if (applicationLiveViewName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'applicationLiveViews'.",
                                id)));
        }
        return this.getWithResponse(resourceGroupName, serviceName, applicationLiveViewName, Context.NONE).getValue();
    }

    public Response<ApplicationLiveViewResource> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serviceName = Utils.getValueFromIdByName(id, "Spring");
        if (serviceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'Spring'.", id)));
        }
        String applicationLiveViewName = Utils.getValueFromIdByName(id, "applicationLiveViews");
        if (applicationLiveViewName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'applicationLiveViews'.",
                                id)));
        }
        return this.getWithResponse(resourceGroupName, serviceName, applicationLiveViewName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serviceName = Utils.getValueFromIdByName(id, "Spring");
        if (serviceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'Spring'.", id)));
        }
        String applicationLiveViewName = Utils.getValueFromIdByName(id, "applicationLiveViews");
        if (applicationLiveViewName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'applicationLiveViews'.",
                                id)));
        }
        this.delete(resourceGroupName, serviceName, applicationLiveViewName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serviceName = Utils.getValueFromIdByName(id, "Spring");
        if (serviceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'Spring'.", id)));
        }
        String applicationLiveViewName = Utils.getValueFromIdByName(id, "applicationLiveViews");
        if (applicationLiveViewName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'applicationLiveViews'.",
                                id)));
        }
        this.delete(resourceGroupName, serviceName, applicationLiveViewName, context);
    }

    private ApplicationLiveViewsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.appplatform.generated.AppPlatformManager manager() {
        return this.serviceManager;
    }

    public ApplicationLiveViewResourceImpl define(String name) {
        return new ApplicationLiveViewResourceImpl(name, this.manager());
    }
}
