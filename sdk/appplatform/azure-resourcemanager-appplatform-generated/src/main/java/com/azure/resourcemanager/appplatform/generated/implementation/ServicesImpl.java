// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appplatform.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.appplatform.generated.fluent.ServicesClient;
import com.azure.resourcemanager.appplatform.generated.fluent.models.NameAvailabilityInner;
import com.azure.resourcemanager.appplatform.generated.fluent.models.ServiceResourceAutoGeneratedInner;
import com.azure.resourcemanager.appplatform.generated.fluent.models.ServiceResourceInner;
import com.azure.resourcemanager.appplatform.generated.fluent.models.TestKeysInner;
import com.azure.resourcemanager.appplatform.generated.models.NameAvailability;
import com.azure.resourcemanager.appplatform.generated.models.NameAvailabilityParameters;
import com.azure.resourcemanager.appplatform.generated.models.RegenerateTestKeyRequestPayload;
import com.azure.resourcemanager.appplatform.generated.models.ServiceResource;
import com.azure.resourcemanager.appplatform.generated.models.ServiceResourceAutoGenerated;
import com.azure.resourcemanager.appplatform.generated.models.Services;
import com.azure.resourcemanager.appplatform.generated.models.TestKeys;

public final class ServicesImpl implements Services {
    private static final ClientLogger LOGGER = new ClientLogger(ServicesImpl.class);

    private final ServicesClient innerClient;

    private final com.azure.resourcemanager.appplatform.generated.AppPlatformManager serviceManager;

    public ServicesImpl(
        ServicesClient innerClient, com.azure.resourcemanager.appplatform.generated.AppPlatformManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public ServiceResource get(String resourceGroupName, String serviceName) {
        ServiceResourceInner inner = this.serviceClient().get(resourceGroupName, serviceName);
        if (inner != null) {
            return new ServiceResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ServiceResource> getWithResponse(String resourceGroupName, String serviceName, Context context) {
        Response<ServiceResourceInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, serviceName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ServiceResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceGroupName, String serviceName) {
        this.serviceClient().delete(resourceGroupName, serviceName);
    }

    public void delete(String resourceGroupName, String serviceName, Context context) {
        this.serviceClient().delete(resourceGroupName, serviceName, context);
    }

    public TestKeys listTestKeys(String resourceGroupName, String serviceName) {
        TestKeysInner inner = this.serviceClient().listTestKeys(resourceGroupName, serviceName);
        if (inner != null) {
            return new TestKeysImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<TestKeys> listTestKeysWithResponse(String resourceGroupName, String serviceName, Context context) {
        Response<TestKeysInner> inner =
            this.serviceClient().listTestKeysWithResponse(resourceGroupName, serviceName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new TestKeysImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public TestKeys regenerateTestKey(
        String resourceGroupName, String serviceName, RegenerateTestKeyRequestPayload regenerateTestKeyRequest) {
        TestKeysInner inner =
            this.serviceClient().regenerateTestKey(resourceGroupName, serviceName, regenerateTestKeyRequest);
        if (inner != null) {
            return new TestKeysImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<TestKeys> regenerateTestKeyWithResponse(
        String resourceGroupName,
        String serviceName,
        RegenerateTestKeyRequestPayload regenerateTestKeyRequest,
        Context context) {
        Response<TestKeysInner> inner =
            this
                .serviceClient()
                .regenerateTestKeyWithResponse(resourceGroupName, serviceName, regenerateTestKeyRequest, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new TestKeysImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void disableTestEndpoint(String resourceGroupName, String serviceName) {
        this.serviceClient().disableTestEndpoint(resourceGroupName, serviceName);
    }

    public Response<Void> disableTestEndpointWithResponse(
        String resourceGroupName, String serviceName, Context context) {
        return this.serviceClient().disableTestEndpointWithResponse(resourceGroupName, serviceName, context);
    }

    public TestKeys enableTestEndpoint(String resourceGroupName, String serviceName) {
        TestKeysInner inner = this.serviceClient().enableTestEndpoint(resourceGroupName, serviceName);
        if (inner != null) {
            return new TestKeysImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<TestKeys> enableTestEndpointWithResponse(
        String resourceGroupName, String serviceName, Context context) {
        Response<TestKeysInner> inner =
            this.serviceClient().enableTestEndpointWithResponse(resourceGroupName, serviceName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new TestKeysImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public NameAvailability checkNameAvailability(String location, NameAvailabilityParameters availabilityParameters) {
        NameAvailabilityInner inner = this.serviceClient().checkNameAvailability(location, availabilityParameters);
        if (inner != null) {
            return new NameAvailabilityImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<NameAvailability> checkNameAvailabilityWithResponse(
        String location, NameAvailabilityParameters availabilityParameters, Context context) {
        Response<NameAvailabilityInner> inner =
            this.serviceClient().checkNameAvailabilityWithResponse(location, availabilityParameters, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new NameAvailabilityImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PagedIterable<ServiceResource> listBySubscription() {
        PagedIterable<ServiceResourceInner> inner = this.serviceClient().listBySubscription();
        return Utils.mapPage(inner, inner1 -> new ServiceResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<ServiceResource> listBySubscription(Context context) {
        PagedIterable<ServiceResourceInner> inner = this.serviceClient().listBySubscription(context);
        return Utils.mapPage(inner, inner1 -> new ServiceResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<ServiceResource> list(String resourceGroupName) {
        PagedIterable<ServiceResourceInner> inner = this.serviceClient().list(resourceGroupName);
        return Utils.mapPage(inner, inner1 -> new ServiceResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<ServiceResource> list(String resourceGroupName, Context context) {
        PagedIterable<ServiceResourceInner> inner = this.serviceClient().list(resourceGroupName, context);
        return Utils.mapPage(inner, inner1 -> new ServiceResourceImpl(inner1, this.manager()));
    }

    public ServiceResourceAutoGenerated get(String resourceGroupName, String serviceName) {
        ServiceResourceAutoGeneratedInner inner = this.serviceClient().get(resourceGroupName, serviceName);
        if (inner != null) {
            return new ServiceResourceAutoGeneratedImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ServiceResourceAutoGenerated> getWithResponse(
        String resourceGroupName, String serviceName, Context context) {
        Response<ServiceResourceAutoGeneratedInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, serviceName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ServiceResourceAutoGeneratedImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String serviceName) {
        this.serviceClient().delete(resourceGroupName, serviceName);
    }

    public void delete(String resourceGroupName, String serviceName, Context context) {
        this.serviceClient().delete(resourceGroupName, serviceName, context);
    }

    public TestKeys listTestKeys(String resourceGroupName, String serviceName) {
        TestKeysInner inner = this.serviceClient().listTestKeys(resourceGroupName, serviceName);
        if (inner != null) {
            return new TestKeysImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<TestKeys> listTestKeysWithResponse(String resourceGroupName, String serviceName, Context context) {
        Response<TestKeysInner> inner =
            this.serviceClient().listTestKeysWithResponse(resourceGroupName, serviceName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new TestKeysImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public TestKeys regenerateTestKey(
        String resourceGroupName, String serviceName, RegenerateTestKeyRequestPayload regenerateTestKeyRequest) {
        TestKeysInner inner =
            this.serviceClient().regenerateTestKey(resourceGroupName, serviceName, regenerateTestKeyRequest);
        if (inner != null) {
            return new TestKeysImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<TestKeys> regenerateTestKeyWithResponse(
        String resourceGroupName,
        String serviceName,
        RegenerateTestKeyRequestPayload regenerateTestKeyRequest,
        Context context) {
        Response<TestKeysInner> inner =
            this
                .serviceClient()
                .regenerateTestKeyWithResponse(resourceGroupName, serviceName, regenerateTestKeyRequest, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new TestKeysImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void disableTestEndpoint(String resourceGroupName, String serviceName) {
        this.serviceClient().disableTestEndpoint(resourceGroupName, serviceName);
    }

    public Response<Void> disableTestEndpointWithResponse(
        String resourceGroupName, String serviceName, Context context) {
        return this.serviceClient().disableTestEndpointWithResponse(resourceGroupName, serviceName, context);
    }

    public TestKeys enableTestEndpoint(String resourceGroupName, String serviceName) {
        TestKeysInner inner = this.serviceClient().enableTestEndpoint(resourceGroupName, serviceName);
        if (inner != null) {
            return new TestKeysImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<TestKeys> enableTestEndpointWithResponse(
        String resourceGroupName, String serviceName, Context context) {
        Response<TestKeysInner> inner =
            this.serviceClient().enableTestEndpointWithResponse(resourceGroupName, serviceName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new TestKeysImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void stop(String resourceGroupName, String serviceName) {
        this.serviceClient().stop(resourceGroupName, serviceName);
    }

    public void stop(String resourceGroupName, String serviceName, Context context) {
        this.serviceClient().stop(resourceGroupName, serviceName, context);
    }

    public void start(String resourceGroupName, String serviceName) {
        this.serviceClient().start(resourceGroupName, serviceName);
    }

    public void start(String resourceGroupName, String serviceName, Context context) {
        this.serviceClient().start(resourceGroupName, serviceName, context);
    }

    public NameAvailability checkNameAvailability(String location, NameAvailabilityParameters availabilityParameters) {
        NameAvailabilityInner inner = this.serviceClient().checkNameAvailability(location, availabilityParameters);
        if (inner != null) {
            return new NameAvailabilityImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<NameAvailability> checkNameAvailabilityWithResponse(
        String location, NameAvailabilityParameters availabilityParameters, Context context) {
        Response<NameAvailabilityInner> inner =
            this.serviceClient().checkNameAvailabilityWithResponse(location, availabilityParameters, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new NameAvailabilityImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PagedIterable<ServiceResourceAutoGenerated> listBySubscription() {
        PagedIterable<ServiceResourceAutoGeneratedInner> inner = this.serviceClient().listBySubscription();
        return Utils.mapPage(inner, inner1 -> new ServiceResourceAutoGeneratedImpl(inner1, this.manager()));
    }

    public PagedIterable<ServiceResourceAutoGenerated> listBySubscription(Context context) {
        PagedIterable<ServiceResourceAutoGeneratedInner> inner = this.serviceClient().listBySubscription(context);
        return Utils.mapPage(inner, inner1 -> new ServiceResourceAutoGeneratedImpl(inner1, this.manager()));
    }

    public PagedIterable<ServiceResourceAutoGenerated> list(String resourceGroupName) {
        PagedIterable<ServiceResourceAutoGeneratedInner> inner = this.serviceClient().list(resourceGroupName);
        return Utils.mapPage(inner, inner1 -> new ServiceResourceAutoGeneratedImpl(inner1, this.manager()));
    }

    public PagedIterable<ServiceResourceAutoGenerated> list(String resourceGroupName, Context context) {
        PagedIterable<ServiceResourceAutoGeneratedInner> inner = this.serviceClient().list(resourceGroupName, context);
        return Utils.mapPage(inner, inner1 -> new ServiceResourceAutoGeneratedImpl(inner1, this.manager()));
    }

    public ServiceResource getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serviceName = Utils.getValueFromIdByName(id, "Spring");
        if (serviceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'Spring'.", id)));
        }
        return this.getWithResponse(resourceGroupName, serviceName, Context.NONE).getValue();
    }

    public Response<ServiceResource> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serviceName = Utils.getValueFromIdByName(id, "Spring");
        if (serviceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'Spring'.", id)));
        }
        return this.getWithResponse(resourceGroupName, serviceName, context);
    }

    public ServiceResource getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serviceName = Utils.getValueFromIdByName(id, "Spring");
        if (serviceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'Spring'.", id)));
        }
        return this.getWithResponse(resourceGroupName, serviceName, Context.NONE).getValue();
    }

    public Response<ServiceResource> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serviceName = Utils.getValueFromIdByName(id, "Spring");
        if (serviceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'Spring'.", id)));
        }
        return this.getWithResponse(resourceGroupName, serviceName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serviceName = Utils.getValueFromIdByName(id, "Spring");
        if (serviceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'Spring'.", id)));
        }
        this.delete(resourceGroupName, serviceName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serviceName = Utils.getValueFromIdByName(id, "Spring");
        if (serviceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'Spring'.", id)));
        }
        this.delete(resourceGroupName, serviceName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serviceName = Utils.getValueFromIdByName(id, "Spring");
        if (serviceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'Spring'.", id)));
        }
        this.delete(resourceGroupName, serviceName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serviceName = Utils.getValueFromIdByName(id, "Spring");
        if (serviceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'Spring'.", id)));
        }
        this.delete(resourceGroupName, serviceName, context);
    }

    private ServicesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.appplatform.generated.AppPlatformManager manager() {
        return this.serviceManager;
    }

    public ServiceResourceImpl define(String name) {
        return new ServiceResourceImpl(name, this.manager());
    }

    public ServiceResourceAutoGeneratedImpl define(String name) {
        return new ServiceResourceAutoGeneratedImpl(name, this.manager());
    }
}
