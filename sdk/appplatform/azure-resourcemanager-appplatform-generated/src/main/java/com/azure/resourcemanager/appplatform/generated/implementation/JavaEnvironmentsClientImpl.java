// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appplatform.generated.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.appplatform.generated.fluent.JavaEnvironmentsClient;
import com.azure.resourcemanager.appplatform.generated.fluent.models.JavaEnvironmentInner;
import com.azure.resourcemanager.appplatform.generated.fluent.models.ResourceUploadDefinitionInner;
import com.azure.resourcemanager.appplatform.generated.models.JavaEnvironmentForPatchBody;
import com.azure.resourcemanager.appplatform.generated.models.JavaEnvironmentsCollection;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in JavaEnvironmentsClient.
 */
public final class JavaEnvironmentsClientImpl implements JavaEnvironmentsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final JavaEnvironmentsService service;

    /**
     * The service client containing this operation class.
     */
    private final AppPlatformManagementClientImpl client;

    /**
     * Initializes an instance of JavaEnvironmentsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    JavaEnvironmentsClientImpl(AppPlatformManagementClientImpl client) {
        this.service
            = RestProxy.create(JavaEnvironmentsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AppPlatformManagementClientJavaEnvironments to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "AppPlatformManagemen")
    public interface JavaEnvironmentsService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/providers/Microsoft.AppPlatform/javaEnvironments")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<JavaEnvironmentsCollection>> list(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/javaEnvironments")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<JavaEnvironmentsCollection>> listByResourceGroup(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/javaEnvironments/{javaEnvironmentName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<JavaEnvironmentInner>> getByResourceGroup(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("javaEnvironmentName") String javaEnvironmentName, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/javaEnvironments/{javaEnvironmentName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdate(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("javaEnvironmentName") String javaEnvironmentName, @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") JavaEnvironmentInner environmentEnvelope,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/javaEnvironments/{javaEnvironmentName}")
        @ExpectedResponses({ 200, 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("javaEnvironmentName") String javaEnvironmentName, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/javaEnvironments/{javaEnvironmentName}")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> update(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("javaEnvironmentName") String javaEnvironmentName, @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") JavaEnvironmentForPatchBody environmentEnvelope,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/javaEnvironments/{javaEnvironmentName}/getResourceUploadUrl")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ResourceUploadDefinitionInner>> getResourceUploadUrl(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("javaEnvironmentName") String javaEnvironmentName, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<JavaEnvironmentsCollection>> listBySubscriptionNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<JavaEnvironmentsCollection>> listByResourceGroupNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Get all the Java Environments for a subscription.
     * 
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the Java Environments for a subscription along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<JavaEnvironmentInner>> listSinglePageAsync() {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2023-08-02-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.list(this.client.getEndpoint(), this.client.getSubscriptionId(), apiVersion,
                accept, context))
            .<PagedResponse<JavaEnvironmentInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get all the Java Environments for a subscription.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the Java Environments for a subscription along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<JavaEnvironmentInner>> listSinglePageAsync(Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2023-08-02-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.list(this.client.getEndpoint(), this.client.getSubscriptionId(), apiVersion, accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * Get all the Java Environments for a subscription.
     * 
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the Java Environments for a subscription as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<JavaEnvironmentInner> listAsync() {
        return new PagedFlux<>(() -> listSinglePageAsync(),
            nextLink -> listBySubscriptionNextSinglePageAsync(nextLink));
    }

    /**
     * Get all the Java Environments for a subscription.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the Java Environments for a subscription as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<JavaEnvironmentInner> listAsync(Context context) {
        return new PagedFlux<>(() -> listSinglePageAsync(context),
            nextLink -> listBySubscriptionNextSinglePageAsync(nextLink, context));
    }

    /**
     * Get all the Java Environments for a subscription.
     * 
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the Java Environments for a subscription as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<JavaEnvironmentInner> list() {
        return new PagedIterable<>(listAsync());
    }

    /**
     * Get all the Java Environments for a subscription.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the Java Environments for a subscription as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<JavaEnvironmentInner> list(Context context) {
        return new PagedIterable<>(listAsync(context));
    }

    /**
     * Get all the Java Environments in a resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the Java Environments in a resource group along with {@link PagedResponse} on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<JavaEnvironmentInner>> listByResourceGroupSinglePageAsync(String resourceGroupName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        final String apiVersion = "2023-08-02-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByResourceGroup(this.client.getEndpoint(),
                this.client.getSubscriptionId(), resourceGroupName, apiVersion, accept, context))
            .<PagedResponse<JavaEnvironmentInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get all the Java Environments in a resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the Java Environments in a resource group along with {@link PagedResponse} on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<JavaEnvironmentInner>> listByResourceGroupSinglePageAsync(String resourceGroupName,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        final String apiVersion = "2023-08-02-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByResourceGroup(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
                apiVersion, accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * Get all the Java Environments in a resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the Java Environments in a resource group as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<JavaEnvironmentInner> listByResourceGroupAsync(String resourceGroupName) {
        return new PagedFlux<>(() -> listByResourceGroupSinglePageAsync(resourceGroupName),
            nextLink -> listByResourceGroupNextSinglePageAsync(nextLink));
    }

    /**
     * Get all the Java Environments in a resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the Java Environments in a resource group as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<JavaEnvironmentInner> listByResourceGroupAsync(String resourceGroupName, Context context) {
        return new PagedFlux<>(() -> listByResourceGroupSinglePageAsync(resourceGroupName, context),
            nextLink -> listByResourceGroupNextSinglePageAsync(nextLink, context));
    }

    /**
     * Get all the Java Environments in a resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the Java Environments in a resource group as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<JavaEnvironmentInner> listByResourceGroup(String resourceGroupName) {
        return new PagedIterable<>(listByResourceGroupAsync(resourceGroupName));
    }

    /**
     * Get all the Java Environments in a resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the Java Environments in a resource group as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<JavaEnvironmentInner> listByResourceGroup(String resourceGroupName, Context context) {
        return new PagedIterable<>(listByResourceGroupAsync(resourceGroupName, context));
    }

    /**
     * Get the properties of a Java Environment.
     * 
     * Get a Java Environment and its properties.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Java Environment and its properties along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<JavaEnvironmentInner>> getByResourceGroupWithResponseAsync(String resourceGroupName,
        String javaEnvironmentName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (javaEnvironmentName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter javaEnvironmentName is required and cannot be null."));
        }
        final String apiVersion = "2023-08-02-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.getByResourceGroup(this.client.getEndpoint(),
                this.client.getSubscriptionId(), resourceGroupName, javaEnvironmentName, apiVersion, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the properties of a Java Environment.
     * 
     * Get a Java Environment and its properties.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Java Environment and its properties along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<JavaEnvironmentInner>> getByResourceGroupWithResponseAsync(String resourceGroupName,
        String javaEnvironmentName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (javaEnvironmentName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter javaEnvironmentName is required and cannot be null."));
        }
        final String apiVersion = "2023-08-02-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.getByResourceGroup(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            javaEnvironmentName, apiVersion, accept, context);
    }

    /**
     * Get the properties of a Java Environment.
     * 
     * Get a Java Environment and its properties.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Java Environment and its properties on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<JavaEnvironmentInner> getByResourceGroupAsync(String resourceGroupName, String javaEnvironmentName) {
        return getByResourceGroupWithResponseAsync(resourceGroupName, javaEnvironmentName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get the properties of a Java Environment.
     * 
     * Get a Java Environment and its properties.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Java Environment and its properties along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<JavaEnvironmentInner> getByResourceGroupWithResponse(String resourceGroupName,
        String javaEnvironmentName, Context context) {
        return getByResourceGroupWithResponseAsync(resourceGroupName, javaEnvironmentName, context).block();
    }

    /**
     * Get the properties of a Java Environment.
     * 
     * Get a Java Environment and its properties.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Java Environment and its properties.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public JavaEnvironmentInner getByResourceGroup(String resourceGroupName, String javaEnvironmentName) {
        return getByResourceGroupWithResponse(resourceGroupName, javaEnvironmentName, Context.NONE).getValue();
    }

    /**
     * Creates or updates a Java Environment.
     * 
     * Create a new Java Environment or update an exiting Java Environment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param environmentEnvelope Configuration details of the Java Environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an environment for hosting Azure Spring Apps along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String resourceGroupName,
        String javaEnvironmentName, JavaEnvironmentInner environmentEnvelope) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (javaEnvironmentName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter javaEnvironmentName is required and cannot be null."));
        }
        if (environmentEnvelope == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter environmentEnvelope is required and cannot be null."));
        } else {
            environmentEnvelope.validate();
        }
        final String apiVersion = "2023-08-02-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.createOrUpdate(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, javaEnvironmentName, apiVersion, environmentEnvelope, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Creates or updates a Java Environment.
     * 
     * Create a new Java Environment or update an exiting Java Environment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param environmentEnvelope Configuration details of the Java Environment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an environment for hosting Azure Spring Apps along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String resourceGroupName,
        String javaEnvironmentName, JavaEnvironmentInner environmentEnvelope, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (javaEnvironmentName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter javaEnvironmentName is required and cannot be null."));
        }
        if (environmentEnvelope == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter environmentEnvelope is required and cannot be null."));
        } else {
            environmentEnvelope.validate();
        }
        final String apiVersion = "2023-08-02-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.createOrUpdate(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            javaEnvironmentName, apiVersion, environmentEnvelope, accept, context);
    }

    /**
     * Creates or updates a Java Environment.
     * 
     * Create a new Java Environment or update an exiting Java Environment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param environmentEnvelope Configuration details of the Java Environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of an environment for hosting Azure Spring Apps.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<JavaEnvironmentInner>, JavaEnvironmentInner> beginCreateOrUpdateAsync(
        String resourceGroupName, String javaEnvironmentName, JavaEnvironmentInner environmentEnvelope) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = createOrUpdateWithResponseAsync(resourceGroupName, javaEnvironmentName, environmentEnvelope);
        return this.client.<JavaEnvironmentInner, JavaEnvironmentInner>getLroResult(mono, this.client.getHttpPipeline(),
            JavaEnvironmentInner.class, JavaEnvironmentInner.class, this.client.getContext());
    }

    /**
     * Creates or updates a Java Environment.
     * 
     * Create a new Java Environment or update an exiting Java Environment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param environmentEnvelope Configuration details of the Java Environment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of an environment for hosting Azure Spring Apps.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<JavaEnvironmentInner>, JavaEnvironmentInner> beginCreateOrUpdateAsync(
        String resourceGroupName, String javaEnvironmentName, JavaEnvironmentInner environmentEnvelope,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono
            = createOrUpdateWithResponseAsync(resourceGroupName, javaEnvironmentName, environmentEnvelope, context);
        return this.client.<JavaEnvironmentInner, JavaEnvironmentInner>getLroResult(mono, this.client.getHttpPipeline(),
            JavaEnvironmentInner.class, JavaEnvironmentInner.class, context);
    }

    /**
     * Creates or updates a Java Environment.
     * 
     * Create a new Java Environment or update an exiting Java Environment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param environmentEnvelope Configuration details of the Java Environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of an environment for hosting Azure Spring Apps.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<JavaEnvironmentInner>, JavaEnvironmentInner> beginCreateOrUpdate(
        String resourceGroupName, String javaEnvironmentName, JavaEnvironmentInner environmentEnvelope) {
        return this.beginCreateOrUpdateAsync(resourceGroupName, javaEnvironmentName, environmentEnvelope)
            .getSyncPoller();
    }

    /**
     * Creates or updates a Java Environment.
     * 
     * Create a new Java Environment or update an exiting Java Environment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param environmentEnvelope Configuration details of the Java Environment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of an environment for hosting Azure Spring Apps.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<JavaEnvironmentInner>, JavaEnvironmentInner> beginCreateOrUpdate(
        String resourceGroupName, String javaEnvironmentName, JavaEnvironmentInner environmentEnvelope,
        Context context) {
        return this.beginCreateOrUpdateAsync(resourceGroupName, javaEnvironmentName, environmentEnvelope, context)
            .getSyncPoller();
    }

    /**
     * Creates or updates a Java Environment.
     * 
     * Create a new Java Environment or update an exiting Java Environment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param environmentEnvelope Configuration details of the Java Environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an environment for hosting Azure Spring Apps on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<JavaEnvironmentInner> createOrUpdateAsync(String resourceGroupName, String javaEnvironmentName,
        JavaEnvironmentInner environmentEnvelope) {
        return beginCreateOrUpdateAsync(resourceGroupName, javaEnvironmentName, environmentEnvelope).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates or updates a Java Environment.
     * 
     * Create a new Java Environment or update an exiting Java Environment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param environmentEnvelope Configuration details of the Java Environment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an environment for hosting Azure Spring Apps on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<JavaEnvironmentInner> createOrUpdateAsync(String resourceGroupName, String javaEnvironmentName,
        JavaEnvironmentInner environmentEnvelope, Context context) {
        return beginCreateOrUpdateAsync(resourceGroupName, javaEnvironmentName, environmentEnvelope, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates or updates a Java Environment.
     * 
     * Create a new Java Environment or update an exiting Java Environment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param environmentEnvelope Configuration details of the Java Environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an environment for hosting Azure Spring Apps.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public JavaEnvironmentInner createOrUpdate(String resourceGroupName, String javaEnvironmentName,
        JavaEnvironmentInner environmentEnvelope) {
        return createOrUpdateAsync(resourceGroupName, javaEnvironmentName, environmentEnvelope).block();
    }

    /**
     * Creates or updates a Java Environment.
     * 
     * Create a new Java Environment or update an exiting Java Environment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param environmentEnvelope Configuration details of the Java Environment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an environment for hosting Azure Spring Apps.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public JavaEnvironmentInner createOrUpdate(String resourceGroupName, String javaEnvironmentName,
        JavaEnvironmentInner environmentEnvelope, Context context) {
        return createOrUpdateAsync(resourceGroupName, javaEnvironmentName, environmentEnvelope, context).block();
    }

    /**
     * Delete a Java Environment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName,
        String javaEnvironmentName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (javaEnvironmentName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter javaEnvironmentName is required and cannot be null."));
        }
        final String apiVersion = "2023-08-02-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.delete(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, javaEnvironmentName, apiVersion, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Delete a Java Environment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName,
        String javaEnvironmentName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (javaEnvironmentName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter javaEnvironmentName is required and cannot be null."));
        }
        final String apiVersion = "2023-08-02-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.delete(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            javaEnvironmentName, apiVersion, accept, context);
    }

    /**
     * Delete a Java Environment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceGroupName, String javaEnvironmentName) {
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(resourceGroupName, javaEnvironmentName);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            this.client.getContext());
    }

    /**
     * Delete a Java Environment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceGroupName, String javaEnvironmentName,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono
            = deleteWithResponseAsync(resourceGroupName, javaEnvironmentName, context);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            context);
    }

    /**
     * Delete a Java Environment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String javaEnvironmentName) {
        return this.beginDeleteAsync(resourceGroupName, javaEnvironmentName).getSyncPoller();
    }

    /**
     * Delete a Java Environment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String javaEnvironmentName,
        Context context) {
        return this.beginDeleteAsync(resourceGroupName, javaEnvironmentName, context).getSyncPoller();
    }

    /**
     * Delete a Java Environment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String javaEnvironmentName) {
        return beginDeleteAsync(resourceGroupName, javaEnvironmentName).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete a Java Environment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String javaEnvironmentName, Context context) {
        return beginDeleteAsync(resourceGroupName, javaEnvironmentName, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete a Java Environment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String javaEnvironmentName) {
        deleteAsync(resourceGroupName, javaEnvironmentName).block();
    }

    /**
     * Delete a Java Environment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String javaEnvironmentName, Context context) {
        deleteAsync(resourceGroupName, javaEnvironmentName, context).block();
    }

    /**
     * Update Java Environment's properties.
     * 
     * Operation to update an exiting Java Environment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param environmentEnvelope Configuration details of the Java Environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an environment for hosting Azure Spring Apps along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(String resourceGroupName,
        String javaEnvironmentName, JavaEnvironmentForPatchBody environmentEnvelope) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (javaEnvironmentName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter javaEnvironmentName is required and cannot be null."));
        }
        if (environmentEnvelope == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter environmentEnvelope is required and cannot be null."));
        } else {
            environmentEnvelope.validate();
        }
        final String apiVersion = "2023-08-02-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.update(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, javaEnvironmentName, apiVersion, environmentEnvelope, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Update Java Environment's properties.
     * 
     * Operation to update an exiting Java Environment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param environmentEnvelope Configuration details of the Java Environment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an environment for hosting Azure Spring Apps along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(String resourceGroupName,
        String javaEnvironmentName, JavaEnvironmentForPatchBody environmentEnvelope, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (javaEnvironmentName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter javaEnvironmentName is required and cannot be null."));
        }
        if (environmentEnvelope == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter environmentEnvelope is required and cannot be null."));
        } else {
            environmentEnvelope.validate();
        }
        final String apiVersion = "2023-08-02-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.update(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            javaEnvironmentName, apiVersion, environmentEnvelope, accept, context);
    }

    /**
     * Update Java Environment's properties.
     * 
     * Operation to update an exiting Java Environment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param environmentEnvelope Configuration details of the Java Environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of an environment for hosting Azure Spring Apps.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<JavaEnvironmentInner>, JavaEnvironmentInner> beginUpdateAsync(
        String resourceGroupName, String javaEnvironmentName, JavaEnvironmentForPatchBody environmentEnvelope) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = updateWithResponseAsync(resourceGroupName, javaEnvironmentName, environmentEnvelope);
        return this.client.<JavaEnvironmentInner, JavaEnvironmentInner>getLroResult(mono, this.client.getHttpPipeline(),
            JavaEnvironmentInner.class, JavaEnvironmentInner.class, this.client.getContext());
    }

    /**
     * Update Java Environment's properties.
     * 
     * Operation to update an exiting Java Environment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param environmentEnvelope Configuration details of the Java Environment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of an environment for hosting Azure Spring Apps.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<JavaEnvironmentInner>, JavaEnvironmentInner> beginUpdateAsync(
        String resourceGroupName, String javaEnvironmentName, JavaEnvironmentForPatchBody environmentEnvelope,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono
            = updateWithResponseAsync(resourceGroupName, javaEnvironmentName, environmentEnvelope, context);
        return this.client.<JavaEnvironmentInner, JavaEnvironmentInner>getLroResult(mono, this.client.getHttpPipeline(),
            JavaEnvironmentInner.class, JavaEnvironmentInner.class, context);
    }

    /**
     * Update Java Environment's properties.
     * 
     * Operation to update an exiting Java Environment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param environmentEnvelope Configuration details of the Java Environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of an environment for hosting Azure Spring Apps.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<JavaEnvironmentInner>, JavaEnvironmentInner> beginUpdate(String resourceGroupName,
        String javaEnvironmentName, JavaEnvironmentForPatchBody environmentEnvelope) {
        return this.beginUpdateAsync(resourceGroupName, javaEnvironmentName, environmentEnvelope).getSyncPoller();
    }

    /**
     * Update Java Environment's properties.
     * 
     * Operation to update an exiting Java Environment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param environmentEnvelope Configuration details of the Java Environment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of an environment for hosting Azure Spring Apps.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<JavaEnvironmentInner>, JavaEnvironmentInner> beginUpdate(String resourceGroupName,
        String javaEnvironmentName, JavaEnvironmentForPatchBody environmentEnvelope, Context context) {
        return this.beginUpdateAsync(resourceGroupName, javaEnvironmentName, environmentEnvelope, context)
            .getSyncPoller();
    }

    /**
     * Update Java Environment's properties.
     * 
     * Operation to update an exiting Java Environment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param environmentEnvelope Configuration details of the Java Environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an environment for hosting Azure Spring Apps on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<JavaEnvironmentInner> updateAsync(String resourceGroupName, String javaEnvironmentName,
        JavaEnvironmentForPatchBody environmentEnvelope) {
        return beginUpdateAsync(resourceGroupName, javaEnvironmentName, environmentEnvelope).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Update Java Environment's properties.
     * 
     * Operation to update an exiting Java Environment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param environmentEnvelope Configuration details of the Java Environment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an environment for hosting Azure Spring Apps on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<JavaEnvironmentInner> updateAsync(String resourceGroupName, String javaEnvironmentName,
        JavaEnvironmentForPatchBody environmentEnvelope, Context context) {
        return beginUpdateAsync(resourceGroupName, javaEnvironmentName, environmentEnvelope, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Update Java Environment's properties.
     * 
     * Operation to update an exiting Java Environment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param environmentEnvelope Configuration details of the Java Environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an environment for hosting Azure Spring Apps.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public JavaEnvironmentInner update(String resourceGroupName, String javaEnvironmentName,
        JavaEnvironmentForPatchBody environmentEnvelope) {
        return updateAsync(resourceGroupName, javaEnvironmentName, environmentEnvelope).block();
    }

    /**
     * Update Java Environment's properties.
     * 
     * Operation to update an exiting Java Environment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param environmentEnvelope Configuration details of the Java Environment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an environment for hosting Azure Spring Apps.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public JavaEnvironmentInner update(String resourceGroupName, String javaEnvironmentName,
        JavaEnvironmentForPatchBody environmentEnvelope, Context context) {
        return updateAsync(resourceGroupName, javaEnvironmentName, environmentEnvelope, context).block();
    }

    /**
     * Get an resource upload URL for the env, which may be artifacts or source archive.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an resource upload URL for the env, which may be artifacts or source archive along with {@link Response}
     * on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ResourceUploadDefinitionInner>>
        getResourceUploadUrlWithResponseAsync(String resourceGroupName, String javaEnvironmentName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (javaEnvironmentName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter javaEnvironmentName is required and cannot be null."));
        }
        final String apiVersion = "2023-08-02-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.getResourceUploadUrl(this.client.getEndpoint(),
                this.client.getSubscriptionId(), resourceGroupName, javaEnvironmentName, apiVersion, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get an resource upload URL for the env, which may be artifacts or source archive.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an resource upload URL for the env, which may be artifacts or source archive along with {@link Response}
     * on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ResourceUploadDefinitionInner>>
        getResourceUploadUrlWithResponseAsync(String resourceGroupName, String javaEnvironmentName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (javaEnvironmentName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter javaEnvironmentName is required and cannot be null."));
        }
        final String apiVersion = "2023-08-02-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.getResourceUploadUrl(this.client.getEndpoint(), this.client.getSubscriptionId(),
            resourceGroupName, javaEnvironmentName, apiVersion, accept, context);
    }

    /**
     * Get an resource upload URL for the env, which may be artifacts or source archive.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an resource upload URL for the env, which may be artifacts or source archive on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ResourceUploadDefinitionInner> getResourceUploadUrlAsync(String resourceGroupName,
        String javaEnvironmentName) {
        return getResourceUploadUrlWithResponseAsync(resourceGroupName, javaEnvironmentName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get an resource upload URL for the env, which may be artifacts or source archive.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an resource upload URL for the env, which may be artifacts or source archive along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ResourceUploadDefinitionInner> getResourceUploadUrlWithResponse(String resourceGroupName,
        String javaEnvironmentName, Context context) {
        return getResourceUploadUrlWithResponseAsync(resourceGroupName, javaEnvironmentName, context).block();
    }

    /**
     * Get an resource upload URL for the env, which may be artifacts or source archive.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an resource upload URL for the env, which may be artifacts or source archive.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ResourceUploadDefinitionInner getResourceUploadUrl(String resourceGroupName, String javaEnvironmentName) {
        return getResourceUploadUrlWithResponse(resourceGroupName, javaEnvironmentName, Context.NONE).getValue();
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of Java Environments along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<JavaEnvironmentInner>> listBySubscriptionNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listBySubscriptionNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<JavaEnvironmentInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of Java Environments along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<JavaEnvironmentInner>> listBySubscriptionNextSinglePageAsync(String nextLink,
        Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listBySubscriptionNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of Java Environments along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<JavaEnvironmentInner>> listByResourceGroupNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listByResourceGroupNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<JavaEnvironmentInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of Java Environments along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<JavaEnvironmentInner>> listByResourceGroupNextSinglePageAsync(String nextLink,
        Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listByResourceGroupNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }
}
