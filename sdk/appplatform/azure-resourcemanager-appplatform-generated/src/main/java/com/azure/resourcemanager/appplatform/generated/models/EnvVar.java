// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appplatform.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Azure Spring Apps components' environment variable.
 */
@Fluent
public final class EnvVar implements JsonSerializable<EnvVar> {
    /*
     * Environment variable name.
     */
    private String name;

    /*
     * Non-secret environment variable value.
     */
    private String value;

    /*
     * secret environment variable value.
     */
    private String secretValue;

    /**
     * Creates an instance of EnvVar class.
     */
    public EnvVar() {
    }

    /**
     * Get the name property: Environment variable name.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Environment variable name.
     * 
     * @param name the name value to set.
     * @return the EnvVar object itself.
     */
    public EnvVar withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the value property: Non-secret environment variable value.
     * 
     * @return the value value.
     */
    public String value() {
        return this.value;
    }

    /**
     * Set the value property: Non-secret environment variable value.
     * 
     * @param value the value value to set.
     * @return the EnvVar object itself.
     */
    public EnvVar withValue(String value) {
        this.value = value;
        return this;
    }

    /**
     * Get the secretValue property: secret environment variable value.
     * 
     * @return the secretValue value.
     */
    public String secretValue() {
        return this.secretValue;
    }

    /**
     * Set the secretValue property: secret environment variable value.
     * 
     * @param secretValue the secretValue value to set.
     * @return the EnvVar object itself.
     */
    public EnvVar withSecretValue(String secretValue) {
        this.secretValue = secretValue;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("value", this.value);
        jsonWriter.writeStringField("secretValue", this.secretValue);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EnvVar from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EnvVar if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the EnvVar.
     */
    public static EnvVar fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EnvVar deserializedEnvVar = new EnvVar();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedEnvVar.name = reader.getString();
                } else if ("value".equals(fieldName)) {
                    deserializedEnvVar.value = reader.getString();
                } else if ("secretValue".equals(fieldName)) {
                    deserializedEnvVar.secretValue = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEnvVar;
        });
    }
}
