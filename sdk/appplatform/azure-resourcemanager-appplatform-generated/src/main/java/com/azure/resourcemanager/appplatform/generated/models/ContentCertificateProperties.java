// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appplatform.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Properties of certificate imported from key vault.
 */
@Fluent
public final class ContentCertificateProperties extends CertificateProperties {
    /*
     * The type of the certificate source.
     */
    private String type = "ContentCertificate";

    /*
     * The content of uploaded certificate.
     */
    private String content;

    /**
     * Creates an instance of ContentCertificateProperties class.
     */
    public ContentCertificateProperties() {
    }

    /**
     * Get the type property: The type of the certificate source.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the content property: The content of uploaded certificate.
     * 
     * @return the content value.
     */
    public String content() {
        return this.content;
    }

    /**
     * Set the content property: The content of uploaded certificate.
     * 
     * @param content the content value to set.
     * @return the ContentCertificateProperties object itself.
     */
    public ContentCertificateProperties withContent(String content) {
        this.content = content;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeStringField("content", this.content);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ContentCertificateProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ContentCertificateProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ContentCertificateProperties.
     */
    public static ContentCertificateProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ContentCertificateProperties deserializedContentCertificateProperties = new ContentCertificateProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("thumbprint".equals(fieldName)) {
                    deserializedContentCertificateProperties.withThumbprint(reader.getString());
                } else if ("issuer".equals(fieldName)) {
                    deserializedContentCertificateProperties.withIssuer(reader.getString());
                } else if ("issuedDate".equals(fieldName)) {
                    deserializedContentCertificateProperties.withIssuedDate(reader.getString());
                } else if ("expirationDate".equals(fieldName)) {
                    deserializedContentCertificateProperties.withExpirationDate(reader.getString());
                } else if ("activateDate".equals(fieldName)) {
                    deserializedContentCertificateProperties.withActivateDate(reader.getString());
                } else if ("subjectName".equals(fieldName)) {
                    deserializedContentCertificateProperties.withSubjectName(reader.getString());
                } else if ("dnsNames".equals(fieldName)) {
                    List<String> dnsNames = reader.readArray(reader1 -> reader1.getString());
                    deserializedContentCertificateProperties.withDnsNames(dnsNames);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedContentCertificateProperties
                        .withProvisioningState(CertificateResourceProvisioningState.fromString(reader.getString()));
                } else if ("type".equals(fieldName)) {
                    deserializedContentCertificateProperties.type = reader.getString();
                } else if ("content".equals(fieldName)) {
                    deserializedContentCertificateProperties.content = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedContentCertificateProperties;
        });
    }
}
