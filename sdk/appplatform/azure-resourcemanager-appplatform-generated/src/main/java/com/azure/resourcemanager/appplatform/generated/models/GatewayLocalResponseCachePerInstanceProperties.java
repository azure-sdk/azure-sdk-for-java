// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appplatform.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Spring Cloud Gateway local response cache per instance properties.
 */
@Fluent
public final class GatewayLocalResponseCachePerInstanceProperties extends GatewayResponseCacheProperties {
    /*
     * The type of the response cache.
     */
    private String responseCacheType = "LocalCachePerInstance";

    /*
     * Maximum size of cache (10MB, 900KB, 1GB...) to determine if the cache needs to evict some entries
     */
    private String size;

    /*
     * Time before a cached entry is expired (300s, 5m, 1h...)
     */
    private String timeToLive;

    /**
     * Creates an instance of GatewayLocalResponseCachePerInstanceProperties class.
     */
    public GatewayLocalResponseCachePerInstanceProperties() {
    }

    /**
     * Get the responseCacheType property: The type of the response cache.
     * 
     * @return the responseCacheType value.
     */
    @Override
    public String responseCacheType() {
        return this.responseCacheType;
    }

    /**
     * Get the size property: Maximum size of cache (10MB, 900KB, 1GB...) to determine if the cache needs to evict some
     * entries.
     * 
     * @return the size value.
     */
    public String size() {
        return this.size;
    }

    /**
     * Set the size property: Maximum size of cache (10MB, 900KB, 1GB...) to determine if the cache needs to evict some
     * entries.
     * 
     * @param size the size value to set.
     * @return the GatewayLocalResponseCachePerInstanceProperties object itself.
     */
    public GatewayLocalResponseCachePerInstanceProperties withSize(String size) {
        this.size = size;
        return this;
    }

    /**
     * Get the timeToLive property: Time before a cached entry is expired (300s, 5m, 1h...).
     * 
     * @return the timeToLive value.
     */
    public String timeToLive() {
        return this.timeToLive;
    }

    /**
     * Set the timeToLive property: Time before a cached entry is expired (300s, 5m, 1h...).
     * 
     * @param timeToLive the timeToLive value to set.
     * @return the GatewayLocalResponseCachePerInstanceProperties object itself.
     */
    public GatewayLocalResponseCachePerInstanceProperties withTimeToLive(String timeToLive) {
        this.timeToLive = timeToLive;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("responseCacheType", this.responseCacheType);
        jsonWriter.writeStringField("size", this.size);
        jsonWriter.writeStringField("timeToLive", this.timeToLive);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GatewayLocalResponseCachePerInstanceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GatewayLocalResponseCachePerInstanceProperties if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the GatewayLocalResponseCachePerInstanceProperties.
     */
    public static GatewayLocalResponseCachePerInstanceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GatewayLocalResponseCachePerInstanceProperties deserializedGatewayLocalResponseCachePerInstanceProperties
                = new GatewayLocalResponseCachePerInstanceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("responseCacheType".equals(fieldName)) {
                    deserializedGatewayLocalResponseCachePerInstanceProperties.responseCacheType = reader.getString();
                } else if ("size".equals(fieldName)) {
                    deserializedGatewayLocalResponseCachePerInstanceProperties.size = reader.getString();
                } else if ("timeToLive".equals(fieldName)) {
                    deserializedGatewayLocalResponseCachePerInstanceProperties.timeToLive = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedGatewayLocalResponseCachePerInstanceProperties;
        });
    }
}
