// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appplatform.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Eureka server properties payload.
 */
@Fluent
public final class EurekaServerProperties implements JsonSerializable<EurekaServerProperties> {
    /*
     * State of the eureka server.
     */
    private EurekaServerState provisioningState;

    /*
     * Enabled state of the eureka server. This is only used in Consumption tier.
     */
    private EurekaServerEnabledState enabledState;

    /*
     * Error when applying eureka server settings.
     */
    private Error error;

    /**
     * Creates an instance of EurekaServerProperties class.
     */
    public EurekaServerProperties() {
    }

    /**
     * Get the provisioningState property: State of the eureka server.
     * 
     * @return the provisioningState value.
     */
    public EurekaServerState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the enabledState property: Enabled state of the eureka server. This is only used in Consumption tier.
     * 
     * @return the enabledState value.
     */
    public EurekaServerEnabledState enabledState() {
        return this.enabledState;
    }

    /**
     * Set the enabledState property: Enabled state of the eureka server. This is only used in Consumption tier.
     * 
     * @param enabledState the enabledState value to set.
     * @return the EurekaServerProperties object itself.
     */
    public EurekaServerProperties withEnabledState(EurekaServerEnabledState enabledState) {
        this.enabledState = enabledState;
        return this;
    }

    /**
     * Get the error property: Error when applying eureka server settings.
     * 
     * @return the error value.
     */
    public Error error() {
        return this.error;
    }

    /**
     * Set the error property: Error when applying eureka server settings.
     * 
     * @param error the error value to set.
     * @return the EurekaServerProperties object itself.
     */
    public EurekaServerProperties withError(Error error) {
        this.error = error;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (error() != null) {
            error().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("enabledState", this.enabledState == null ? null : this.enabledState.toString());
        jsonWriter.writeJsonField("error", this.error);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EurekaServerProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EurekaServerProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the EurekaServerProperties.
     */
    public static EurekaServerProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EurekaServerProperties deserializedEurekaServerProperties = new EurekaServerProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedEurekaServerProperties.provisioningState
                        = EurekaServerState.fromString(reader.getString());
                } else if ("enabledState".equals(fieldName)) {
                    deserializedEurekaServerProperties.enabledState
                        = EurekaServerEnabledState.fromString(reader.getString());
                } else if ("error".equals(fieldName)) {
                    deserializedEurekaServerProperties.error = Error.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEurekaServerProperties;
        });
    }
}
