// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appplatform.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.appplatform.generated.fluent.JavaEnvironmentsClient;
import com.azure.resourcemanager.appplatform.generated.fluent.models.JavaEnvironmentInner;
import com.azure.resourcemanager.appplatform.generated.fluent.models.ResourceUploadDefinitionInner;
import com.azure.resourcemanager.appplatform.generated.models.JavaEnvironment;
import com.azure.resourcemanager.appplatform.generated.models.JavaEnvironments;
import com.azure.resourcemanager.appplatform.generated.models.ResourceUploadDefinition;

public final class JavaEnvironmentsImpl implements JavaEnvironments {
    private static final ClientLogger LOGGER = new ClientLogger(JavaEnvironmentsImpl.class);

    private final JavaEnvironmentsClient innerClient;

    private final com.azure.resourcemanager.appplatform.generated.AppPlatformManager serviceManager;

    public JavaEnvironmentsImpl(
        JavaEnvironmentsClient innerClient,
        com.azure.resourcemanager.appplatform.generated.AppPlatformManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<JavaEnvironment> list() {
        PagedIterable<JavaEnvironmentInner> inner = this.serviceClient().list();
        return Utils.mapPage(inner, inner1 -> new JavaEnvironmentImpl(inner1, this.manager()));
    }

    public PagedIterable<JavaEnvironment> list(Context context) {
        PagedIterable<JavaEnvironmentInner> inner = this.serviceClient().list(context);
        return Utils.mapPage(inner, inner1 -> new JavaEnvironmentImpl(inner1, this.manager()));
    }

    public PagedIterable<JavaEnvironment> listByResourceGroup(String resourceGroupName) {
        PagedIterable<JavaEnvironmentInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return Utils.mapPage(inner, inner1 -> new JavaEnvironmentImpl(inner1, this.manager()));
    }

    public PagedIterable<JavaEnvironment> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<JavaEnvironmentInner> inner =
            this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return Utils.mapPage(inner, inner1 -> new JavaEnvironmentImpl(inner1, this.manager()));
    }

    public Response<JavaEnvironment> getByResourceGroupWithResponse(
        String resourceGroupName, String javaEnvironmentName, Context context) {
        Response<JavaEnvironmentInner> inner =
            this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, javaEnvironmentName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new JavaEnvironmentImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public JavaEnvironment getByResourceGroup(String resourceGroupName, String javaEnvironmentName) {
        JavaEnvironmentInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, javaEnvironmentName);
        if (inner != null) {
            return new JavaEnvironmentImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceGroupName, String javaEnvironmentName) {
        this.serviceClient().delete(resourceGroupName, javaEnvironmentName);
    }

    public void delete(String resourceGroupName, String javaEnvironmentName, Context context) {
        this.serviceClient().delete(resourceGroupName, javaEnvironmentName, context);
    }

    public Response<ResourceUploadDefinition> getResourceUploadUrlWithResponse(
        String resourceGroupName, String javaEnvironmentName, Context context) {
        Response<ResourceUploadDefinitionInner> inner =
            this.serviceClient().getResourceUploadUrlWithResponse(resourceGroupName, javaEnvironmentName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ResourceUploadDefinitionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ResourceUploadDefinition getResourceUploadUrl(String resourceGroupName, String javaEnvironmentName) {
        ResourceUploadDefinitionInner inner =
            this.serviceClient().getResourceUploadUrl(resourceGroupName, javaEnvironmentName);
        if (inner != null) {
            return new ResourceUploadDefinitionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public JavaEnvironment getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String javaEnvironmentName = Utils.getValueFromIdByName(id, "javaEnvironments");
        if (javaEnvironmentName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'javaEnvironments'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, javaEnvironmentName, Context.NONE).getValue();
    }

    public Response<JavaEnvironment> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String javaEnvironmentName = Utils.getValueFromIdByName(id, "javaEnvironments");
        if (javaEnvironmentName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'javaEnvironments'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, javaEnvironmentName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String javaEnvironmentName = Utils.getValueFromIdByName(id, "javaEnvironments");
        if (javaEnvironmentName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'javaEnvironments'.", id)));
        }
        this.delete(resourceGroupName, javaEnvironmentName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String javaEnvironmentName = Utils.getValueFromIdByName(id, "javaEnvironments");
        if (javaEnvironmentName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'javaEnvironments'.", id)));
        }
        this.delete(resourceGroupName, javaEnvironmentName, context);
    }

    private JavaEnvironmentsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.appplatform.generated.AppPlatformManager manager() {
        return this.serviceManager;
    }

    public JavaEnvironmentImpl define(String name) {
        return new JavaEnvironmentImpl(name, this.manager());
    }
}
