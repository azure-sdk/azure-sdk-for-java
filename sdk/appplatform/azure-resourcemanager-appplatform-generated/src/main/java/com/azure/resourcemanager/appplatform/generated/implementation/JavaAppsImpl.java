// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appplatform.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.appplatform.generated.fluent.JavaAppsClient;
import com.azure.resourcemanager.appplatform.generated.fluent.models.JavaAppInner;
import com.azure.resourcemanager.appplatform.generated.fluent.models.SecretsCollectionInner;
import com.azure.resourcemanager.appplatform.generated.models.JavaApp;
import com.azure.resourcemanager.appplatform.generated.models.JavaAppForPatch;
import com.azure.resourcemanager.appplatform.generated.models.JavaApps;
import com.azure.resourcemanager.appplatform.generated.models.SecretsCollection;

public final class JavaAppsImpl implements JavaApps {
    private static final ClientLogger LOGGER = new ClientLogger(JavaAppsImpl.class);

    private final JavaAppsClient innerClient;

    private final com.azure.resourcemanager.appplatform.generated.AppPlatformManager serviceManager;

    public JavaAppsImpl(JavaAppsClient innerClient,
        com.azure.resourcemanager.appplatform.generated.AppPlatformManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<JavaApp> list() {
        PagedIterable<JavaAppInner> inner = this.serviceClient().list();
        return Utils.mapPage(inner, inner1 -> new JavaAppImpl(inner1, this.manager()));
    }

    public PagedIterable<JavaApp> list(Context context) {
        PagedIterable<JavaAppInner> inner = this.serviceClient().list(context);
        return Utils.mapPage(inner, inner1 -> new JavaAppImpl(inner1, this.manager()));
    }

    public PagedIterable<JavaApp> listByResourceGroup(String resourceGroupName) {
        PagedIterable<JavaAppInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return Utils.mapPage(inner, inner1 -> new JavaAppImpl(inner1, this.manager()));
    }

    public PagedIterable<JavaApp> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<JavaAppInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return Utils.mapPage(inner, inner1 -> new JavaAppImpl(inner1, this.manager()));
    }

    public Response<JavaApp> getByResourceGroupWithResponse(String resourceGroupName, String appName, Context context) {
        Response<JavaAppInner> inner
            = this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, appName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new JavaAppImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public JavaApp getByResourceGroup(String resourceGroupName, String appName) {
        JavaAppInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, appName);
        if (inner != null) {
            return new JavaAppImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public JavaApp createOrUpdate(String resourceGroupName, String appName, JavaAppInner appEnvelope) {
        JavaAppInner inner = this.serviceClient().createOrUpdate(resourceGroupName, appName, appEnvelope);
        if (inner != null) {
            return new JavaAppImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public JavaApp createOrUpdate(String resourceGroupName, String appName, JavaAppInner appEnvelope, Context context) {
        JavaAppInner inner = this.serviceClient().createOrUpdate(resourceGroupName, appName, appEnvelope, context);
        if (inner != null) {
            return new JavaAppImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceGroupName, String appName) {
        this.serviceClient().delete(resourceGroupName, appName);
    }

    public void delete(String resourceGroupName, String appName, Context context) {
        this.serviceClient().delete(resourceGroupName, appName, context);
    }

    public JavaApp update(String resourceGroupName, String appName, JavaAppForPatch appEnvelope) {
        JavaAppInner inner = this.serviceClient().update(resourceGroupName, appName, appEnvelope);
        if (inner != null) {
            return new JavaAppImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public JavaApp update(String resourceGroupName, String appName, JavaAppForPatch appEnvelope, Context context) {
        JavaAppInner inner = this.serviceClient().update(resourceGroupName, appName, appEnvelope, context);
        if (inner != null) {
            return new JavaAppImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SecretsCollection> listSecretsWithResponse(String resourceGroupName, String appName,
        Context context) {
        Response<SecretsCollectionInner> inner
            = this.serviceClient().listSecretsWithResponse(resourceGroupName, appName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new SecretsCollectionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SecretsCollection listSecrets(String resourceGroupName, String appName) {
        SecretsCollectionInner inner = this.serviceClient().listSecrets(resourceGroupName, appName);
        if (inner != null) {
            return new SecretsCollectionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void start(String resourceGroupName, String appName) {
        this.serviceClient().start(resourceGroupName, appName);
    }

    public void start(String resourceGroupName, String appName, Context context) {
        this.serviceClient().start(resourceGroupName, appName, context);
    }

    public void stop(String resourceGroupName, String appName) {
        this.serviceClient().stop(resourceGroupName, appName);
    }

    public void stop(String resourceGroupName, String appName, Context context) {
        this.serviceClient().stop(resourceGroupName, appName, context);
    }

    private JavaAppsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.appplatform.generated.AppPlatformManager manager() {
        return this.serviceManager;
    }
}
