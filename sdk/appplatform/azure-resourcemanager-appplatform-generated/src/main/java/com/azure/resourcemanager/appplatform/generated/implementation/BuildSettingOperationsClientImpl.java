// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appplatform.generated.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.appplatform.generated.fluent.BuildSettingOperationsClient;
import com.azure.resourcemanager.appplatform.generated.fluent.models.BuildSettingResourceInner;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in BuildSettingOperationsClient.
 */
public final class BuildSettingOperationsClientImpl implements BuildSettingOperationsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final BuildSettingOperationsService service;

    /**
     * The service client containing this operation class.
     */
    private final AppPlatformManagementClientImpl client;

    /**
     * Initializes an instance of BuildSettingOperationsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    BuildSettingOperationsClientImpl(AppPlatformManagementClientImpl client) {
        this.service = RestProxy.create(BuildSettingOperationsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AppPlatformManagementClientBuildSettingOperations to be used by the
     * proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "AppPlatformManagemen")
    public interface BuildSettingOperationsService {
        @Headers({ "Content-Type: application/json" })
        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}/buildSettings/{buildSettingName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdate(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("serviceName") String serviceName,
            @PathParam("buildServiceName") String buildServiceName,
            @PathParam("buildSettingName") String buildSettingName,
            @BodyParam("application/json") BuildSettingResourceInner buildSettingResource,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Create or update a build settings.
     * 
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     * from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param buildSettingName The name of the build setting.
     * @param buildSettingResource Parameters for the create or update operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return build setting resource object along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String resourceGroupName,
        String serviceName, String buildServiceName, String buildSettingName,
        BuildSettingResourceInner buildSettingResource) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (serviceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter serviceName is required and cannot be null."));
        }
        if (buildServiceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter buildServiceName is required and cannot be null."));
        }
        if (buildSettingName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter buildSettingName is required and cannot be null."));
        }
        if (buildSettingResource == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter buildSettingResource is required and cannot be null."));
        } else {
            buildSettingResource.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.createOrUpdate(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, serviceName, buildServiceName, buildSettingName,
                buildSettingResource, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create or update a build settings.
     * 
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     * from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param buildSettingName The name of the build setting.
     * @param buildSettingResource Parameters for the create or update operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return build setting resource object along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String resourceGroupName,
        String serviceName, String buildServiceName, String buildSettingName,
        BuildSettingResourceInner buildSettingResource, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (serviceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter serviceName is required and cannot be null."));
        }
        if (buildServiceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter buildServiceName is required and cannot be null."));
        }
        if (buildSettingName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter buildSettingName is required and cannot be null."));
        }
        if (buildSettingResource == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter buildSettingResource is required and cannot be null."));
        } else {
            buildSettingResource.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.createOrUpdate(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, serviceName, buildServiceName, buildSettingName,
            buildSettingResource, accept, context);
    }

    /**
     * Create or update a build settings.
     * 
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     * from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param buildSettingName The name of the build setting.
     * @param buildSettingResource Parameters for the create or update operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of build setting resource object.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<BuildSettingResourceInner>, BuildSettingResourceInner> beginCreateOrUpdateAsync(
        String resourceGroupName, String serviceName, String buildServiceName, String buildSettingName,
        BuildSettingResourceInner buildSettingResource) {
        Mono<Response<Flux<ByteBuffer>>> mono = createOrUpdateWithResponseAsync(resourceGroupName, serviceName,
            buildServiceName, buildSettingName, buildSettingResource);
        return this.client.<BuildSettingResourceInner, BuildSettingResourceInner>getLroResult(mono,
            this.client.getHttpPipeline(), BuildSettingResourceInner.class, BuildSettingResourceInner.class,
            this.client.getContext());
    }

    /**
     * Create or update a build settings.
     * 
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     * from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param buildSettingName The name of the build setting.
     * @param buildSettingResource Parameters for the create or update operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of build setting resource object.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<BuildSettingResourceInner>, BuildSettingResourceInner> beginCreateOrUpdateAsync(
        String resourceGroupName, String serviceName, String buildServiceName, String buildSettingName,
        BuildSettingResourceInner buildSettingResource, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = createOrUpdateWithResponseAsync(resourceGroupName, serviceName,
            buildServiceName, buildSettingName, buildSettingResource, context);
        return this.client.<BuildSettingResourceInner, BuildSettingResourceInner>getLroResult(mono,
            this.client.getHttpPipeline(), BuildSettingResourceInner.class, BuildSettingResourceInner.class, context);
    }

    /**
     * Create or update a build settings.
     * 
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     * from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param buildSettingName The name of the build setting.
     * @param buildSettingResource Parameters for the create or update operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of build setting resource object.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<BuildSettingResourceInner>, BuildSettingResourceInner> beginCreateOrUpdate(
        String resourceGroupName, String serviceName, String buildServiceName, String buildSettingName,
        BuildSettingResourceInner buildSettingResource) {
        return this.beginCreateOrUpdateAsync(resourceGroupName, serviceName, buildServiceName, buildSettingName,
            buildSettingResource).getSyncPoller();
    }

    /**
     * Create or update a build settings.
     * 
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     * from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param buildSettingName The name of the build setting.
     * @param buildSettingResource Parameters for the create or update operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of build setting resource object.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<BuildSettingResourceInner>, BuildSettingResourceInner> beginCreateOrUpdate(
        String resourceGroupName, String serviceName, String buildServiceName, String buildSettingName,
        BuildSettingResourceInner buildSettingResource, Context context) {
        return this.beginCreateOrUpdateAsync(resourceGroupName, serviceName, buildServiceName, buildSettingName,
            buildSettingResource, context).getSyncPoller();
    }

    /**
     * Create or update a build settings.
     * 
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     * from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param buildSettingName The name of the build setting.
     * @param buildSettingResource Parameters for the create or update operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return build setting resource object on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<BuildSettingResourceInner> createOrUpdateAsync(String resourceGroupName, String serviceName,
        String buildServiceName, String buildSettingName, BuildSettingResourceInner buildSettingResource) {
        return beginCreateOrUpdateAsync(resourceGroupName, serviceName, buildServiceName, buildSettingName,
            buildSettingResource).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create or update a build settings.
     * 
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     * from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param buildSettingName The name of the build setting.
     * @param buildSettingResource Parameters for the create or update operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return build setting resource object on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<BuildSettingResourceInner> createOrUpdateAsync(String resourceGroupName, String serviceName,
        String buildServiceName, String buildSettingName, BuildSettingResourceInner buildSettingResource,
        Context context) {
        return beginCreateOrUpdateAsync(resourceGroupName, serviceName, buildServiceName, buildSettingName,
            buildSettingResource, context).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create or update a build settings.
     * 
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     * from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param buildSettingName The name of the build setting.
     * @param buildSettingResource Parameters for the create or update operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return build setting resource object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BuildSettingResourceInner createOrUpdate(String resourceGroupName, String serviceName,
        String buildServiceName, String buildSettingName, BuildSettingResourceInner buildSettingResource) {
        return createOrUpdateAsync(resourceGroupName, serviceName, buildServiceName, buildSettingName,
            buildSettingResource).block();
    }

    /**
     * Create or update a build settings.
     * 
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     * from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param buildSettingName The name of the build setting.
     * @param buildSettingResource Parameters for the create or update operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return build setting resource object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BuildSettingResourceInner createOrUpdate(String resourceGroupName, String serviceName,
        String buildServiceName, String buildSettingName, BuildSettingResourceInner buildSettingResource,
        Context context) {
        return createOrUpdateAsync(resourceGroupName, serviceName, buildServiceName, buildSettingName,
            buildSettingResource, context).block();
    }
}
