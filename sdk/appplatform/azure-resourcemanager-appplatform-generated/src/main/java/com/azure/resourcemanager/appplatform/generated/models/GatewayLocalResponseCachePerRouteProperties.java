// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appplatform.generated.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeId;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Spring Cloud Gateway local response cache per route properties.
 */
@JsonTypeInfo(
    use = JsonTypeInfo.Id.NAME,
    property = "responseCacheType",
    defaultImpl = GatewayLocalResponseCachePerRouteProperties.class,
    visible = true)
@JsonTypeName("LocalCachePerRoute")
@Fluent
public final class GatewayLocalResponseCachePerRouteProperties extends GatewayResponseCacheProperties {
    /*
     * The type of the response cache.
     */
    @JsonTypeId
    @JsonProperty(value = "responseCacheType", required = true)
    private String responseCacheType = "LocalCachePerRoute";

    /*
     * Maximum size of cache (10MB, 900KB, 1GB...) to determine if the cache needs to evict some entries.
     */
    @JsonProperty(value = "size")
    private String size;

    /*
     * Time before a cached entry is expired (300s, 5m, 1h...)
     */
    @JsonProperty(value = "timeToLive")
    private String timeToLive;

    /**
     * Creates an instance of GatewayLocalResponseCachePerRouteProperties class.
     */
    public GatewayLocalResponseCachePerRouteProperties() {
    }

    /**
     * Get the responseCacheType property: The type of the response cache.
     * 
     * @return the responseCacheType value.
     */
    @Override
    public String responseCacheType() {
        return this.responseCacheType;
    }

    /**
     * Get the size property: Maximum size of cache (10MB, 900KB, 1GB...) to determine if the cache needs to evict some
     * entries.
     * 
     * @return the size value.
     */
    public String size() {
        return this.size;
    }

    /**
     * Set the size property: Maximum size of cache (10MB, 900KB, 1GB...) to determine if the cache needs to evict some
     * entries.
     * 
     * @param size the size value to set.
     * @return the GatewayLocalResponseCachePerRouteProperties object itself.
     */
    public GatewayLocalResponseCachePerRouteProperties withSize(String size) {
        this.size = size;
        return this;
    }

    /**
     * Get the timeToLive property: Time before a cached entry is expired (300s, 5m, 1h...).
     * 
     * @return the timeToLive value.
     */
    public String timeToLive() {
        return this.timeToLive;
    }

    /**
     * Set the timeToLive property: Time before a cached entry is expired (300s, 5m, 1h...).
     * 
     * @param timeToLive the timeToLive value to set.
     * @return the GatewayLocalResponseCachePerRouteProperties object itself.
     */
    public GatewayLocalResponseCachePerRouteProperties withTimeToLive(String timeToLive) {
        this.timeToLive = timeToLive;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }
}
