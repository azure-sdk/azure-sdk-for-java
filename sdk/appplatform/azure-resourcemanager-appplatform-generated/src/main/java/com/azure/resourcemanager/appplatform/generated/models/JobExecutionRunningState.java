// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appplatform.generated.models;

import com.azure.core.util.ExpandableStringEnum;
import com.fasterxml.jackson.annotation.JsonCreator;
import java.util.Collection;

/**
 * Current state of the job execution.
 */
public final class JobExecutionRunningState extends ExpandableStringEnum<JobExecutionRunningState> {
    /**
     * Static value Running for JobExecutionRunningState.
     */
    public static final JobExecutionRunningState RUNNING = fromString("Running");

    /**
     * Static value Pending for JobExecutionRunningState.
     */
    public static final JobExecutionRunningState PENDING = fromString("Pending");

    /**
     * Static value Canceled for JobExecutionRunningState.
     */
    public static final JobExecutionRunningState CANCELED = fromString("Canceled");

    /**
     * Static value Failed for JobExecutionRunningState.
     */
    public static final JobExecutionRunningState FAILED = fromString("Failed");

    /**
     * Static value Completed for JobExecutionRunningState.
     */
    public static final JobExecutionRunningState COMPLETED = fromString("Completed");

    /**
     * Creates a new instance of JobExecutionRunningState value.
     * 
     * @deprecated Use the {@link #fromString(String)} factory method.
     */
    @Deprecated
    public JobExecutionRunningState() {
    }

    /**
     * Creates or finds a JobExecutionRunningState from its string representation.
     * 
     * @param name a name to look for.
     * @return the corresponding JobExecutionRunningState.
     */
    @JsonCreator
    public static JobExecutionRunningState fromString(String name) {
        return fromString(name, JobExecutionRunningState.class);
    }

    /**
     * Gets known JobExecutionRunningState values.
     * 
     * @return known JobExecutionRunningState values.
     */
    public static Collection<JobExecutionRunningState> values() {
        return values(JobExecutionRunningState.class);
    }
}
