// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appplatform.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.appplatform.generated.fluent.models.JavaAppInner;
import java.util.Map;

/** Azure Spring Apps JavaApp resource for patch body. */
@Fluent
public final class JavaAppForPatch extends JavaAppInner {
    /** Creates an instance of JavaAppForPatch class. */
    public JavaAppForPatch() {
    }

    /** {@inheritDoc} */
    @Override
    public JavaAppForPatch withTemplate(SpringAppsTemplate template) {
        super.withTemplate(template);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public JavaAppForPatch withExtendedLocation(ExtendedLocation extendedLocation) {
        super.withExtendedLocation(extendedLocation);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public JavaAppForPatch withIdentity(ManagedServiceIdentity identity) {
        super.withIdentity(identity);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public JavaAppForPatch withManagedBy(String managedBy) {
        super.withManagedBy(managedBy);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public JavaAppForPatch withManagedEnvironmentId(String managedEnvironmentId) {
        super.withManagedEnvironmentId(managedEnvironmentId);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public JavaAppForPatch withEnvironmentId(String environmentId) {
        super.withEnvironmentId(environmentId);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public JavaAppForPatch withWorkloadProfileName(String workloadProfileName) {
        super.withWorkloadProfileName(workloadProfileName);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public JavaAppForPatch withConfiguration(Configuration configuration) {
        super.withConfiguration(configuration);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public JavaAppForPatch withTemplate(Template template) {
        super.withTemplate(template);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public JavaAppForPatch withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public JavaAppForPatch withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }
}
