// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appplatform.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.appplatform.generated.fluent.CustomizedAcceleratorsClient;
import com.azure.resourcemanager.appplatform.generated.fluent.models.CustomizedAcceleratorResourceInner;
import com.azure.resourcemanager.appplatform.generated.fluent.models.CustomizedAcceleratorValidateResultInner;
import com.azure.resourcemanager.appplatform.generated.models.CustomizedAcceleratorProperties;
import com.azure.resourcemanager.appplatform.generated.models.CustomizedAcceleratorResource;
import com.azure.resourcemanager.appplatform.generated.models.CustomizedAcceleratorValidateResult;
import com.azure.resourcemanager.appplatform.generated.models.CustomizedAccelerators;

public final class CustomizedAcceleratorsImpl implements CustomizedAccelerators {
    private static final ClientLogger LOGGER = new ClientLogger(CustomizedAcceleratorsImpl.class);

    private final CustomizedAcceleratorsClient innerClient;

    private final com.azure.resourcemanager.appplatform.generated.AppPlatformManager serviceManager;

    public CustomizedAcceleratorsImpl(
        CustomizedAcceleratorsClient innerClient,
        com.azure.resourcemanager.appplatform.generated.AppPlatformManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<CustomizedAcceleratorResource> list(
        String resourceGroupName, String serviceName, String applicationAcceleratorName) {
        PagedIterable<CustomizedAcceleratorResourceInner> inner =
            this.serviceClient().list(resourceGroupName, serviceName, applicationAcceleratorName);
        return Utils.mapPage(inner, inner1 -> new CustomizedAcceleratorResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<CustomizedAcceleratorResource> list(
        String resourceGroupName, String serviceName, String applicationAcceleratorName, Context context) {
        PagedIterable<CustomizedAcceleratorResourceInner> inner =
            this.serviceClient().list(resourceGroupName, serviceName, applicationAcceleratorName, context);
        return Utils.mapPage(inner, inner1 -> new CustomizedAcceleratorResourceImpl(inner1, this.manager()));
    }

    public Response<CustomizedAcceleratorResource> getWithResponse(
        String resourceGroupName,
        String serviceName,
        String applicationAcceleratorName,
        String customizedAcceleratorName,
        Context context) {
        Response<CustomizedAcceleratorResourceInner> inner =
            this
                .serviceClient()
                .getWithResponse(
                    resourceGroupName, serviceName, applicationAcceleratorName, customizedAcceleratorName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new CustomizedAcceleratorResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public CustomizedAcceleratorResource get(
        String resourceGroupName,
        String serviceName,
        String applicationAcceleratorName,
        String customizedAcceleratorName) {
        CustomizedAcceleratorResourceInner inner =
            this
                .serviceClient()
                .get(resourceGroupName, serviceName, applicationAcceleratorName, customizedAcceleratorName);
        if (inner != null) {
            return new CustomizedAcceleratorResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(
        String resourceGroupName,
        String serviceName,
        String applicationAcceleratorName,
        String customizedAcceleratorName) {
        this
            .serviceClient()
            .delete(resourceGroupName, serviceName, applicationAcceleratorName, customizedAcceleratorName);
    }

    public void delete(
        String resourceGroupName,
        String serviceName,
        String applicationAcceleratorName,
        String customizedAcceleratorName,
        Context context) {
        this
            .serviceClient()
            .delete(resourceGroupName, serviceName, applicationAcceleratorName, customizedAcceleratorName, context);
    }

    public Response<CustomizedAcceleratorValidateResult> validateWithResponse(
        String resourceGroupName,
        String serviceName,
        String applicationAcceleratorName,
        String customizedAcceleratorName,
        CustomizedAcceleratorProperties properties,
        Context context) {
        Response<CustomizedAcceleratorValidateResultInner> inner =
            this
                .serviceClient()
                .validateWithResponse(
                    resourceGroupName,
                    serviceName,
                    applicationAcceleratorName,
                    customizedAcceleratorName,
                    properties,
                    context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new CustomizedAcceleratorValidateResultImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public CustomizedAcceleratorValidateResult validate(
        String resourceGroupName,
        String serviceName,
        String applicationAcceleratorName,
        String customizedAcceleratorName,
        CustomizedAcceleratorProperties properties) {
        CustomizedAcceleratorValidateResultInner inner =
            this
                .serviceClient()
                .validate(
                    resourceGroupName, serviceName, applicationAcceleratorName, customizedAcceleratorName, properties);
        if (inner != null) {
            return new CustomizedAcceleratorValidateResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public CustomizedAcceleratorResource getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serviceName = Utils.getValueFromIdByName(id, "Spring");
        if (serviceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'Spring'.", id)));
        }
        String applicationAcceleratorName = Utils.getValueFromIdByName(id, "applicationAccelerators");
        if (applicationAcceleratorName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'applicationAccelerators'.",
                                id)));
        }
        String customizedAcceleratorName = Utils.getValueFromIdByName(id, "customizedAccelerators");
        if (customizedAcceleratorName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'customizedAccelerators'.",
                                id)));
        }
        return this
            .getWithResponse(
                resourceGroupName, serviceName, applicationAcceleratorName, customizedAcceleratorName, Context.NONE)
            .getValue();
    }

    public Response<CustomizedAcceleratorResource> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serviceName = Utils.getValueFromIdByName(id, "Spring");
        if (serviceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'Spring'.", id)));
        }
        String applicationAcceleratorName = Utils.getValueFromIdByName(id, "applicationAccelerators");
        if (applicationAcceleratorName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'applicationAccelerators'.",
                                id)));
        }
        String customizedAcceleratorName = Utils.getValueFromIdByName(id, "customizedAccelerators");
        if (customizedAcceleratorName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'customizedAccelerators'.",
                                id)));
        }
        return this
            .getWithResponse(
                resourceGroupName, serviceName, applicationAcceleratorName, customizedAcceleratorName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serviceName = Utils.getValueFromIdByName(id, "Spring");
        if (serviceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'Spring'.", id)));
        }
        String applicationAcceleratorName = Utils.getValueFromIdByName(id, "applicationAccelerators");
        if (applicationAcceleratorName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'applicationAccelerators'.",
                                id)));
        }
        String customizedAcceleratorName = Utils.getValueFromIdByName(id, "customizedAccelerators");
        if (customizedAcceleratorName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'customizedAccelerators'.",
                                id)));
        }
        this
            .delete(
                resourceGroupName, serviceName, applicationAcceleratorName, customizedAcceleratorName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serviceName = Utils.getValueFromIdByName(id, "Spring");
        if (serviceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'Spring'.", id)));
        }
        String applicationAcceleratorName = Utils.getValueFromIdByName(id, "applicationAccelerators");
        if (applicationAcceleratorName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'applicationAccelerators'.",
                                id)));
        }
        String customizedAcceleratorName = Utils.getValueFromIdByName(id, "customizedAccelerators");
        if (customizedAcceleratorName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'customizedAccelerators'.",
                                id)));
        }
        this.delete(resourceGroupName, serviceName, applicationAcceleratorName, customizedAcceleratorName, context);
    }

    private CustomizedAcceleratorsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.appplatform.generated.AppPlatformManager manager() {
        return this.serviceManager;
    }

    public CustomizedAcceleratorResourceImpl define(String name) {
        return new CustomizedAcceleratorResourceImpl(name, this.manager());
    }
}
