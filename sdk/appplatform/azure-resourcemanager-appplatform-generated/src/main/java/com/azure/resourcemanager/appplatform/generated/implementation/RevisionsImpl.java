// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appplatform.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.appplatform.generated.fluent.RevisionsClient;
import com.azure.resourcemanager.appplatform.generated.fluent.models.RevisionInner;
import com.azure.resourcemanager.appplatform.generated.models.Revision;
import com.azure.resourcemanager.appplatform.generated.models.Revisions;

public final class RevisionsImpl implements Revisions {
    private static final ClientLogger LOGGER = new ClientLogger(RevisionsImpl.class);

    private final RevisionsClient innerClient;

    private final com.azure.resourcemanager.appplatform.generated.AppPlatformManager serviceManager;

    public RevisionsImpl(
        RevisionsClient innerClient,
        com.azure.resourcemanager.appplatform.generated.AppPlatformManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<Revision> list(String resourceGroupName, String appName) {
        PagedIterable<RevisionInner> inner = this.serviceClient().list(resourceGroupName, appName);
        return Utils.mapPage(inner, inner1 -> new RevisionImpl(inner1, this.manager()));
    }

    public PagedIterable<Revision> list(String resourceGroupName, String appName, String filter, Context context) {
        PagedIterable<RevisionInner> inner = this.serviceClient().list(resourceGroupName, appName, filter, context);
        return Utils.mapPage(inner, inner1 -> new RevisionImpl(inner1, this.manager()));
    }

    public Response<Revision> getWithResponse(
        String resourceGroupName, String appName, String revisionName, Context context) {
        Response<RevisionInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, appName, revisionName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new RevisionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Revision get(String resourceGroupName, String appName, String revisionName) {
        RevisionInner inner = this.serviceClient().get(resourceGroupName, appName, revisionName);
        if (inner != null) {
            return new RevisionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void activate(String resourceGroupName, String appName, String revisionName) {
        this.serviceClient().activate(resourceGroupName, appName, revisionName);
    }

    public void activate(String resourceGroupName, String appName, String revisionName, Context context) {
        this.serviceClient().activate(resourceGroupName, appName, revisionName, context);
    }

    public void deactivate(String resourceGroupName, String appName, String revisionName) {
        this.serviceClient().deactivate(resourceGroupName, appName, revisionName);
    }

    public void deactivate(String resourceGroupName, String appName, String revisionName, Context context) {
        this.serviceClient().deactivate(resourceGroupName, appName, revisionName, context);
    }

    public void restart(String resourceGroupName, String appName, String revisionName) {
        this.serviceClient().restart(resourceGroupName, appName, revisionName);
    }

    public void restart(String resourceGroupName, String appName, String revisionName, Context context) {
        this.serviceClient().restart(resourceGroupName, appName, revisionName, context);
    }

    private RevisionsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.appplatform.generated.AppPlatformManager manager() {
        return this.serviceManager;
    }
}
