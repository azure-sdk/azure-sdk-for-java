// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appplatform.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Weekly planned maintenance.
 */
@Fluent
public final class WeeklyMaintenanceScheduleConfiguration extends MaintenanceScheduleConfiguration {
    /*
     * The frequency to run the maintenance job
     */
    private Frequency frequency = Frequency.WEEKLY;

    /*
     * The hour to run the maintenance job
     */
    private int hour;

    /*
     * The duration time to run the maintenance job, specified in ISO8601 format, e.g. PT8H
     */
    private String duration;

    /*
     * The day to run the maintenance job
     */
    private WeekDay day;

    /**
     * Creates an instance of WeeklyMaintenanceScheduleConfiguration class.
     */
    public WeeklyMaintenanceScheduleConfiguration() {
    }

    /**
     * Get the frequency property: The frequency to run the maintenance job.
     * 
     * @return the frequency value.
     */
    @Override
    public Frequency frequency() {
        return this.frequency;
    }

    /**
     * Get the hour property: The hour to run the maintenance job.
     * 
     * @return the hour value.
     */
    public int hour() {
        return this.hour;
    }

    /**
     * Set the hour property: The hour to run the maintenance job.
     * 
     * @param hour the hour value to set.
     * @return the WeeklyMaintenanceScheduleConfiguration object itself.
     */
    public WeeklyMaintenanceScheduleConfiguration withHour(int hour) {
        this.hour = hour;
        return this;
    }

    /**
     * Get the duration property: The duration time to run the maintenance job, specified in ISO8601 format, e.g. PT8H.
     * 
     * @return the duration value.
     */
    public String duration() {
        return this.duration;
    }

    /**
     * Get the day property: The day to run the maintenance job.
     * 
     * @return the day value.
     */
    public WeekDay day() {
        return this.day;
    }

    /**
     * Set the day property: The day to run the maintenance job.
     * 
     * @param day the day value to set.
     * @return the WeeklyMaintenanceScheduleConfiguration object itself.
     */
    public WeeklyMaintenanceScheduleConfiguration withDay(WeekDay day) {
        this.day = day;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (day() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property day in model WeeklyMaintenanceScheduleConfiguration"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(WeeklyMaintenanceScheduleConfiguration.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("hour", this.hour);
        jsonWriter.writeStringField("day", this.day == null ? null : this.day.toString());
        jsonWriter.writeStringField("frequency", this.frequency == null ? null : this.frequency.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WeeklyMaintenanceScheduleConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of WeeklyMaintenanceScheduleConfiguration if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the WeeklyMaintenanceScheduleConfiguration.
     */
    public static WeeklyMaintenanceScheduleConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WeeklyMaintenanceScheduleConfiguration deserializedWeeklyMaintenanceScheduleConfiguration
                = new WeeklyMaintenanceScheduleConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("hour".equals(fieldName)) {
                    deserializedWeeklyMaintenanceScheduleConfiguration.hour = reader.getInt();
                } else if ("day".equals(fieldName)) {
                    deserializedWeeklyMaintenanceScheduleConfiguration.day = WeekDay.fromString(reader.getString());
                } else if ("frequency".equals(fieldName)) {
                    deserializedWeeklyMaintenanceScheduleConfiguration.frequency
                        = Frequency.fromString(reader.getString());
                } else if ("duration".equals(fieldName)) {
                    deserializedWeeklyMaintenanceScheduleConfiguration.duration = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedWeeklyMaintenanceScheduleConfiguration;
        });
    }
}
