// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appplatform.generated.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.appplatform.generated.fluent.EurekaServersClient;
import com.azure.resourcemanager.appplatform.generated.fluent.models.EurekaServerResourceCollectionInner;
import com.azure.resourcemanager.appplatform.generated.fluent.models.EurekaServerResourceInner;
import com.azure.resourcemanager.appplatform.generated.models.EurekaServerResource;
import com.azure.resourcemanager.appplatform.generated.models.EurekaServerResourceCollection;
import com.azure.resourcemanager.appplatform.generated.models.EurekaServers;

public final class EurekaServersImpl implements EurekaServers {
    private static final ClientLogger LOGGER = new ClientLogger(EurekaServersImpl.class);

    private final EurekaServersClient innerClient;

    private final com.azure.resourcemanager.appplatform.generated.AppPlatformManager serviceManager;

    public EurekaServersImpl(EurekaServersClient innerClient,
        com.azure.resourcemanager.appplatform.generated.AppPlatformManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<EurekaServerResourceCollection> listWithResponse(String resourceGroupName, String serviceName,
        Context context) {
        Response<EurekaServerResourceCollectionInner> inner
            = this.serviceClient().listWithResponse(resourceGroupName, serviceName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new EurekaServerResourceCollectionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public EurekaServerResourceCollection list(String resourceGroupName, String serviceName) {
        EurekaServerResourceCollectionInner inner = this.serviceClient().list(resourceGroupName, serviceName);
        if (inner != null) {
            return new EurekaServerResourceCollectionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<EurekaServerResource> getWithResponse(String resourceGroupName, String serviceName,
        Context context) {
        Response<EurekaServerResourceInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, serviceName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new EurekaServerResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public EurekaServerResource get(String resourceGroupName, String serviceName) {
        EurekaServerResourceInner inner = this.serviceClient().get(resourceGroupName, serviceName);
        if (inner != null) {
            return new EurekaServerResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public EurekaServerResource updatePut(String resourceGroupName, String serviceName,
        EurekaServerResourceInner eurekaServerResource) {
        EurekaServerResourceInner inner
            = this.serviceClient().updatePut(resourceGroupName, serviceName, eurekaServerResource);
        if (inner != null) {
            return new EurekaServerResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public EurekaServerResource updatePut(String resourceGroupName, String serviceName,
        EurekaServerResourceInner eurekaServerResource, Context context) {
        EurekaServerResourceInner inner
            = this.serviceClient().updatePut(resourceGroupName, serviceName, eurekaServerResource, context);
        if (inner != null) {
            return new EurekaServerResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public EurekaServerResource updatePatch(String resourceGroupName, String serviceName,
        EurekaServerResourceInner eurekaServerResource) {
        EurekaServerResourceInner inner
            = this.serviceClient().updatePatch(resourceGroupName, serviceName, eurekaServerResource);
        if (inner != null) {
            return new EurekaServerResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public EurekaServerResource updatePatch(String resourceGroupName, String serviceName,
        EurekaServerResourceInner eurekaServerResource, Context context) {
        EurekaServerResourceInner inner
            = this.serviceClient().updatePatch(resourceGroupName, serviceName, eurekaServerResource, context);
        if (inner != null) {
            return new EurekaServerResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    private EurekaServersClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.appplatform.generated.AppPlatformManager manager() {
        return this.serviceManager;
    }
}
