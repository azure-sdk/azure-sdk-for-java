// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appplatform.generated.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.appplatform.generated.fluent.JobOperationsClient;
import com.azure.resourcemanager.appplatform.generated.fluent.models.EnvSecretsCollectionInner;
import com.azure.resourcemanager.appplatform.generated.fluent.models.JobExecutionInner;
import com.azure.resourcemanager.appplatform.generated.fluent.models.JobResourceInner;
import com.azure.resourcemanager.appplatform.generated.models.EnvSecretsCollection;
import com.azure.resourcemanager.appplatform.generated.models.JobExecution;
import com.azure.resourcemanager.appplatform.generated.models.JobExecutionTemplate;
import com.azure.resourcemanager.appplatform.generated.models.JobOperations;
import com.azure.resourcemanager.appplatform.generated.models.JobResource;

public final class JobOperationsImpl implements JobOperations {
    private static final ClientLogger LOGGER = new ClientLogger(JobOperationsImpl.class);

    private final JobOperationsClient innerClient;

    private final com.azure.resourcemanager.appplatform.generated.AppPlatformManager serviceManager;

    public JobOperationsImpl(JobOperationsClient innerClient,
        com.azure.resourcemanager.appplatform.generated.AppPlatformManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<JobResource> getWithResponse(String resourceGroupName, String serviceName, String jobName,
        Context context) {
        Response<JobResourceInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, serviceName, jobName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new JobResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public JobResource get(String resourceGroupName, String serviceName, String jobName) {
        JobResourceInner inner = this.serviceClient().get(resourceGroupName, serviceName, jobName);
        if (inner != null) {
            return new JobResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String serviceName, String jobName) {
        this.serviceClient().delete(resourceGroupName, serviceName, jobName);
    }

    public void delete(String resourceGroupName, String serviceName, String jobName, Context context) {
        this.serviceClient().delete(resourceGroupName, serviceName, jobName, context);
    }

    public JobExecution start(String resourceGroupName, String serviceName, String jobName) {
        JobExecutionInner inner = this.serviceClient().start(resourceGroupName, serviceName, jobName);
        if (inner != null) {
            return new JobExecutionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public JobExecution start(String resourceGroupName, String serviceName, String jobName,
        JobExecutionTemplate template, Context context) {
        JobExecutionInner inner
            = this.serviceClient().start(resourceGroupName, serviceName, jobName, template, context);
        if (inner != null) {
            return new JobExecutionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<EnvSecretsCollection> listEnvSecretsWithResponse(String resourceGroupName, String serviceName,
        String jobName, Context context) {
        Response<EnvSecretsCollectionInner> inner
            = this.serviceClient().listEnvSecretsWithResponse(resourceGroupName, serviceName, jobName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new EnvSecretsCollectionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public EnvSecretsCollection listEnvSecrets(String resourceGroupName, String serviceName, String jobName) {
        EnvSecretsCollectionInner inner = this.serviceClient().listEnvSecrets(resourceGroupName, serviceName, jobName);
        if (inner != null) {
            return new EnvSecretsCollectionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public JobResource getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serviceName = ResourceManagerUtils.getValueFromIdByName(id, "Spring");
        if (serviceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'Spring'.", id)));
        }
        String jobName = ResourceManagerUtils.getValueFromIdByName(id, "jobs");
        if (jobName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'jobs'.", id)));
        }
        return this.getWithResponse(resourceGroupName, serviceName, jobName, Context.NONE).getValue();
    }

    public Response<JobResource> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serviceName = ResourceManagerUtils.getValueFromIdByName(id, "Spring");
        if (serviceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'Spring'.", id)));
        }
        String jobName = ResourceManagerUtils.getValueFromIdByName(id, "jobs");
        if (jobName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'jobs'.", id)));
        }
        return this.getWithResponse(resourceGroupName, serviceName, jobName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serviceName = ResourceManagerUtils.getValueFromIdByName(id, "Spring");
        if (serviceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'Spring'.", id)));
        }
        String jobName = ResourceManagerUtils.getValueFromIdByName(id, "jobs");
        if (jobName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'jobs'.", id)));
        }
        this.delete(resourceGroupName, serviceName, jobName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serviceName = ResourceManagerUtils.getValueFromIdByName(id, "Spring");
        if (serviceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'Spring'.", id)));
        }
        String jobName = ResourceManagerUtils.getValueFromIdByName(id, "jobs");
        if (jobName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'jobs'.", id)));
        }
        this.delete(resourceGroupName, serviceName, jobName, context);
    }

    private JobOperationsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.appplatform.generated.AppPlatformManager manager() {
        return this.serviceManager;
    }

    public JobResourceImpl define(String name) {
        return new JobResourceImpl(name, this.manager());
    }
}
