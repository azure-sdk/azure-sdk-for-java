// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appplatform.generated.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.appplatform.generated.fluent.models.JavaEnvironmentInner;
import com.azure.resourcemanager.appplatform.generated.models.JavaEnvironment;
import com.azure.resourcemanager.appplatform.generated.models.JavaEnvironmentForPatchBody;
import com.azure.resourcemanager.appplatform.generated.models.ProvisioningState;
import com.azure.resourcemanager.appplatform.generated.models.ResourceUploadDefinition;
import com.azure.resourcemanager.appplatform.generated.models.ZoneRedundantEnum;
import java.util.Collections;
import java.util.Map;

public final class JavaEnvironmentImpl implements JavaEnvironment, JavaEnvironment.Definition, JavaEnvironment.Update {
    private JavaEnvironmentInner innerObject;

    private final com.azure.resourcemanager.appplatform.generated.AppPlatformManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public ProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public String environmentId() {
        return this.innerModel().environmentId();
    }

    public String infraResourceGroup() {
        return this.innerModel().infraResourceGroup();
    }

    public ZoneRedundantEnum zoneRedundant() {
        return this.innerModel().zoneRedundant();
    }

    public String defaultDomain() {
        return this.innerModel().defaultDomain();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public JavaEnvironmentInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.appplatform.generated.AppPlatformManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String javaEnvironmentName;

    private JavaEnvironmentForPatchBody updateEnvironmentEnvelope;

    public JavaEnvironmentImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public JavaEnvironment create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getJavaEnvironments()
                .createOrUpdate(resourceGroupName, javaEnvironmentName, this.innerModel(), Context.NONE);
        return this;
    }

    public JavaEnvironment create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getJavaEnvironments()
                .createOrUpdate(resourceGroupName, javaEnvironmentName, this.innerModel(), context);
        return this;
    }

    JavaEnvironmentImpl(
        String name, com.azure.resourcemanager.appplatform.generated.AppPlatformManager serviceManager) {
        this.innerObject = new JavaEnvironmentInner();
        this.serviceManager = serviceManager;
        this.javaEnvironmentName = name;
    }

    public JavaEnvironmentImpl update() {
        this.updateEnvironmentEnvelope = new JavaEnvironmentForPatchBody();
        return this;
    }

    public JavaEnvironment apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getJavaEnvironments()
                .update(resourceGroupName, javaEnvironmentName, updateEnvironmentEnvelope, Context.NONE);
        return this;
    }

    public JavaEnvironment apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getJavaEnvironments()
                .update(resourceGroupName, javaEnvironmentName, updateEnvironmentEnvelope, context);
        return this;
    }

    JavaEnvironmentImpl(
        JavaEnvironmentInner innerObject,
        com.azure.resourcemanager.appplatform.generated.AppPlatformManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.javaEnvironmentName = Utils.getValueFromIdByName(innerObject.id(), "javaEnvironments");
    }

    public JavaEnvironment refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getJavaEnvironments()
                .getByResourceGroupWithResponse(resourceGroupName, javaEnvironmentName, Context.NONE)
                .getValue();
        return this;
    }

    public JavaEnvironment refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getJavaEnvironments()
                .getByResourceGroupWithResponse(resourceGroupName, javaEnvironmentName, context)
                .getValue();
        return this;
    }

    public Response<ResourceUploadDefinition> getResourceUploadUrlWithResponse(Context context) {
        return serviceManager
            .javaEnvironments()
            .getResourceUploadUrlWithResponse(resourceGroupName, javaEnvironmentName, context);
    }

    public ResourceUploadDefinition getResourceUploadUrl() {
        return serviceManager.javaEnvironments().getResourceUploadUrl(resourceGroupName, javaEnvironmentName);
    }

    public JavaEnvironmentImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public JavaEnvironmentImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public JavaEnvironmentImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateEnvironmentEnvelope.withTags(tags);
            return this;
        }
    }

    public JavaEnvironmentImpl withEnvironmentId(String environmentId) {
        this.innerModel().withEnvironmentId(environmentId);
        return this;
    }

    public JavaEnvironmentImpl withInfraResourceGroup(String infraResourceGroup) {
        this.innerModel().withInfraResourceGroup(infraResourceGroup);
        return this;
    }

    public JavaEnvironmentImpl withZoneRedundant(ZoneRedundantEnum zoneRedundant) {
        this.innerModel().withZoneRedundant(zoneRedundant);
        return this;
    }

    public JavaEnvironmentImpl withProperties(Object properties) {
        this.updateEnvironmentEnvelope.withProperties(properties);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
