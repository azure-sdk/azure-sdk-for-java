// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appplatform.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.appplatform.generated.fluent.MiddlewareEurekaServersClient;
import com.azure.resourcemanager.appplatform.generated.fluent.models.MiddlewareEurekaServerInner;
import com.azure.resourcemanager.appplatform.generated.models.MiddlewareEurekaServer;
import com.azure.resourcemanager.appplatform.generated.models.MiddlewareEurekaServers;

public final class MiddlewareEurekaServersImpl implements MiddlewareEurekaServers {
    private static final ClientLogger LOGGER = new ClientLogger(MiddlewareEurekaServersImpl.class);

    private final MiddlewareEurekaServersClient innerClient;

    private final com.azure.resourcemanager.appplatform.generated.AppPlatformManager serviceManager;

    public MiddlewareEurekaServersImpl(MiddlewareEurekaServersClient innerClient,
        com.azure.resourcemanager.appplatform.generated.AppPlatformManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<MiddlewareEurekaServer> list(String resourceGroupName, String javaEnvironmentName) {
        PagedIterable<MiddlewareEurekaServerInner> inner
            = this.serviceClient().list(resourceGroupName, javaEnvironmentName);
        return Utils.mapPage(inner, inner1 -> new MiddlewareEurekaServerImpl(inner1, this.manager()));
    }

    public PagedIterable<MiddlewareEurekaServer> list(String resourceGroupName, String javaEnvironmentName,
        Context context) {
        PagedIterable<MiddlewareEurekaServerInner> inner
            = this.serviceClient().list(resourceGroupName, javaEnvironmentName, context);
        return Utils.mapPage(inner, inner1 -> new MiddlewareEurekaServerImpl(inner1, this.manager()));
    }

    public Response<MiddlewareEurekaServer> getWithResponse(String resourceGroupName, String javaEnvironmentName,
        String eurekaServerName, Context context) {
        Response<MiddlewareEurekaServerInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, javaEnvironmentName, eurekaServerName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new MiddlewareEurekaServerImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public MiddlewareEurekaServer get(String resourceGroupName, String javaEnvironmentName, String eurekaServerName) {
        MiddlewareEurekaServerInner inner
            = this.serviceClient().get(resourceGroupName, javaEnvironmentName, eurekaServerName);
        if (inner != null) {
            return new MiddlewareEurekaServerImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public MiddlewareEurekaServer getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String javaEnvironmentName = Utils.getValueFromIdByName(id, "javaEnvironments");
        if (javaEnvironmentName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'javaEnvironments'.", id)));
        }
        String eurekaServerName = Utils.getValueFromIdByName(id, "eurekaServers");
        if (eurekaServerName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'eurekaServers'.", id)));
        }
        return this.getWithResponse(resourceGroupName, javaEnvironmentName, eurekaServerName, Context.NONE).getValue();
    }

    public Response<MiddlewareEurekaServer> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String javaEnvironmentName = Utils.getValueFromIdByName(id, "javaEnvironments");
        if (javaEnvironmentName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'javaEnvironments'.", id)));
        }
        String eurekaServerName = Utils.getValueFromIdByName(id, "eurekaServers");
        if (eurekaServerName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'eurekaServers'.", id)));
        }
        return this.getWithResponse(resourceGroupName, javaEnvironmentName, eurekaServerName, context);
    }

    private MiddlewareEurekaServersClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.appplatform.generated.AppPlatformManager manager() {
        return this.serviceManager;
    }

    public MiddlewareEurekaServerImpl define(String name) {
        return new MiddlewareEurekaServerImpl(name, this.manager());
    }
}
