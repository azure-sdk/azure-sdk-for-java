// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appplatform.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.appplatform.generated.fluent.ApmsClient;
import com.azure.resourcemanager.appplatform.generated.fluent.models.ApmResourceInner;
import com.azure.resourcemanager.appplatform.generated.fluent.models.ApmSecretKeysInner;
import com.azure.resourcemanager.appplatform.generated.models.ApmResource;
import com.azure.resourcemanager.appplatform.generated.models.ApmSecretKeys;
import com.azure.resourcemanager.appplatform.generated.models.Apms;

public final class ApmsImpl implements Apms {
    private static final ClientLogger LOGGER = new ClientLogger(ApmsImpl.class);

    private final ApmsClient innerClient;

    private final com.azure.resourcemanager.appplatform.generated.AppPlatformManager serviceManager;

    public ApmsImpl(ApmsClient innerClient,
        com.azure.resourcemanager.appplatform.generated.AppPlatformManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<ApmResource> list(String resourceGroupName, String serviceName) {
        PagedIterable<ApmResourceInner> inner = this.serviceClient().list(resourceGroupName, serviceName);
        return Utils.mapPage(inner, inner1 -> new ApmResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<ApmResource> list(String resourceGroupName, String serviceName, Context context) {
        PagedIterable<ApmResourceInner> inner = this.serviceClient().list(resourceGroupName, serviceName, context);
        return Utils.mapPage(inner, inner1 -> new ApmResourceImpl(inner1, this.manager()));
    }

    public Response<ApmResource> getWithResponse(String resourceGroupName, String serviceName, String apmName,
        Context context) {
        Response<ApmResourceInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, serviceName, apmName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new ApmResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ApmResource get(String resourceGroupName, String serviceName, String apmName) {
        ApmResourceInner inner = this.serviceClient().get(resourceGroupName, serviceName, apmName);
        if (inner != null) {
            return new ApmResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String serviceName, String apmName) {
        this.serviceClient().delete(resourceGroupName, serviceName, apmName);
    }

    public void delete(String resourceGroupName, String serviceName, String apmName, Context context) {
        this.serviceClient().delete(resourceGroupName, serviceName, apmName, context);
    }

    public Response<ApmSecretKeys> listSecretKeysWithResponse(String resourceGroupName, String serviceName,
        String apmName, Context context) {
        Response<ApmSecretKeysInner> inner
            = this.serviceClient().listSecretKeysWithResponse(resourceGroupName, serviceName, apmName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new ApmSecretKeysImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ApmSecretKeys listSecretKeys(String resourceGroupName, String serviceName, String apmName) {
        ApmSecretKeysInner inner = this.serviceClient().listSecretKeys(resourceGroupName, serviceName, apmName);
        if (inner != null) {
            return new ApmSecretKeysImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ApmResource getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serviceName = Utils.getValueFromIdByName(id, "Spring");
        if (serviceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'Spring'.", id)));
        }
        String apmName = Utils.getValueFromIdByName(id, "apms");
        if (apmName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'apms'.", id)));
        }
        return this.getWithResponse(resourceGroupName, serviceName, apmName, Context.NONE).getValue();
    }

    public Response<ApmResource> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serviceName = Utils.getValueFromIdByName(id, "Spring");
        if (serviceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'Spring'.", id)));
        }
        String apmName = Utils.getValueFromIdByName(id, "apms");
        if (apmName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'apms'.", id)));
        }
        return this.getWithResponse(resourceGroupName, serviceName, apmName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serviceName = Utils.getValueFromIdByName(id, "Spring");
        if (serviceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'Spring'.", id)));
        }
        String apmName = Utils.getValueFromIdByName(id, "apms");
        if (apmName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'apms'.", id)));
        }
        this.delete(resourceGroupName, serviceName, apmName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serviceName = Utils.getValueFromIdByName(id, "Spring");
        if (serviceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'Spring'.", id)));
        }
        String apmName = Utils.getValueFromIdByName(id, "apms");
        if (apmName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'apms'.", id)));
        }
        this.delete(resourceGroupName, serviceName, apmName, context);
    }

    private ApmsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.appplatform.generated.AppPlatformManager manager() {
        return this.serviceManager;
    }

    public ApmResourceImpl define(String name) {
        return new ApmResourceImpl(name, this.manager());
    }
}
