// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appplatform.generated.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.appplatform.generated.fluent.MiddlewareEurekaServersClient;
import com.azure.resourcemanager.appplatform.generated.fluent.models.MiddlewareEurekaServerInner;
import com.azure.resourcemanager.appplatform.generated.models.MiddlewareEurekaServerResourceCollection;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in MiddlewareEurekaServersClient. */
public final class MiddlewareEurekaServersClientImpl implements MiddlewareEurekaServersClient {
    /** The proxy service used to perform REST calls. */
    private final MiddlewareEurekaServersService service;

    /** The service client containing this operation class. */
    private final AppPlatformManagementClientImpl client;

    /**
     * Initializes an instance of MiddlewareEurekaServersClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    MiddlewareEurekaServersClientImpl(AppPlatformManagementClientImpl client) {
        this.service =
            RestProxy
                .create(MiddlewareEurekaServersService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AppPlatformManagementClientMiddlewareEurekaServers to be used by the
     * proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "AppPlatformManagemen")
    public interface MiddlewareEurekaServersService {
        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/javaEnvironments/{javaEnvironmentName}/eurekaServers")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<MiddlewareEurekaServerResourceCollection>> list(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("javaEnvironmentName") String javaEnvironmentName,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/javaEnvironments/{javaEnvironmentName}/eurekaServers/{eurekaServerName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<MiddlewareEurekaServerInner>> get(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("javaEnvironmentName") String javaEnvironmentName,
            @PathParam("eurekaServerName") String eurekaServerName,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/javaEnvironments/{javaEnvironmentName}/eurekaServers/{eurekaServerName}")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdate(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("javaEnvironmentName") String javaEnvironmentName,
            @PathParam("eurekaServerName") String eurekaServerName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") MiddlewareEurekaServerInner eurekaServerResource,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Patch(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/javaEnvironments/{javaEnvironmentName}/eurekaServers/{eurekaServerName}")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> updatePatch(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("javaEnvironmentName") String javaEnvironmentName,
            @PathParam("eurekaServerName") String eurekaServerName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") MiddlewareEurekaServerInner eurekaServerResource,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<MiddlewareEurekaServerResourceCollection>> listNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * List the eureka server settings.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return azure Spring Apps Eureka Server collection ARM resource along with {@link PagedResponse} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<MiddlewareEurekaServerInner>> listSinglePageAsync(
        String resourceGroupName, String javaEnvironmentName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (javaEnvironmentName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter javaEnvironmentName is required and cannot be null."));
        }
        final String apiVersion = "2023-08-02-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .list(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            javaEnvironmentName,
                            apiVersion,
                            accept,
                            context))
            .<PagedResponse<MiddlewareEurekaServerInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List the eureka server settings.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return azure Spring Apps Eureka Server collection ARM resource along with {@link PagedResponse} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<MiddlewareEurekaServerInner>> listSinglePageAsync(
        String resourceGroupName, String javaEnvironmentName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (javaEnvironmentName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter javaEnvironmentName is required and cannot be null."));
        }
        final String apiVersion = "2023-08-02-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .list(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                javaEnvironmentName,
                apiVersion,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * List the eureka server settings.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return azure Spring Apps Eureka Server collection ARM resource as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<MiddlewareEurekaServerInner> listAsync(String resourceGroupName, String javaEnvironmentName) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(resourceGroupName, javaEnvironmentName),
            nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * List the eureka server settings.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return azure Spring Apps Eureka Server collection ARM resource as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<MiddlewareEurekaServerInner> listAsync(
        String resourceGroupName, String javaEnvironmentName, Context context) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(resourceGroupName, javaEnvironmentName, context),
            nextLink -> listNextSinglePageAsync(nextLink, context));
    }

    /**
     * List the eureka server settings.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return azure Spring Apps Eureka Server collection ARM resource as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<MiddlewareEurekaServerInner> list(String resourceGroupName, String javaEnvironmentName) {
        return new PagedIterable<>(listAsync(resourceGroupName, javaEnvironmentName));
    }

    /**
     * List the eureka server settings.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return azure Spring Apps Eureka Server collection ARM resource as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<MiddlewareEurekaServerInner> list(
        String resourceGroupName, String javaEnvironmentName, Context context) {
        return new PagedIterable<>(listAsync(resourceGroupName, javaEnvironmentName, context));
    }

    /**
     * Get the eureka server middleware settings.
     *
     * <p>Get the eureka server settings.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param eurekaServerName Name of the Eureka Server.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the eureka server settings along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<MiddlewareEurekaServerInner>> getWithResponseAsync(
        String resourceGroupName, String javaEnvironmentName, String eurekaServerName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (javaEnvironmentName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter javaEnvironmentName is required and cannot be null."));
        }
        if (eurekaServerName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter eurekaServerName is required and cannot be null."));
        }
        final String apiVersion = "2023-08-02-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .get(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            javaEnvironmentName,
                            eurekaServerName,
                            apiVersion,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the eureka server middleware settings.
     *
     * <p>Get the eureka server settings.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param eurekaServerName Name of the Eureka Server.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the eureka server settings along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<MiddlewareEurekaServerInner>> getWithResponseAsync(
        String resourceGroupName, String javaEnvironmentName, String eurekaServerName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (javaEnvironmentName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter javaEnvironmentName is required and cannot be null."));
        }
        if (eurekaServerName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter eurekaServerName is required and cannot be null."));
        }
        final String apiVersion = "2023-08-02-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .get(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                javaEnvironmentName,
                eurekaServerName,
                apiVersion,
                accept,
                context);
    }

    /**
     * Get the eureka server middleware settings.
     *
     * <p>Get the eureka server settings.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param eurekaServerName Name of the Eureka Server.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the eureka server settings on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<MiddlewareEurekaServerInner> getAsync(
        String resourceGroupName, String javaEnvironmentName, String eurekaServerName) {
        return getWithResponseAsync(resourceGroupName, javaEnvironmentName, eurekaServerName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get the eureka server middleware settings.
     *
     * <p>Get the eureka server settings.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param eurekaServerName Name of the Eureka Server.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the eureka server settings along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<MiddlewareEurekaServerInner> getWithResponse(
        String resourceGroupName, String javaEnvironmentName, String eurekaServerName, Context context) {
        return getWithResponseAsync(resourceGroupName, javaEnvironmentName, eurekaServerName, context).block();
    }

    /**
     * Get the eureka server middleware settings.
     *
     * <p>Get the eureka server settings.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param eurekaServerName Name of the Eureka Server.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the eureka server settings.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MiddlewareEurekaServerInner get(
        String resourceGroupName, String javaEnvironmentName, String eurekaServerName) {
        return getWithResponse(resourceGroupName, javaEnvironmentName, eurekaServerName, Context.NONE).getValue();
    }

    /**
     * Create or update the eureka server settings.
     *
     * <p>The operation to create or update the eureka server settings.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param eurekaServerName Name of the Eureka Server.
     * @param eurekaServerResource Parameters for the update operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return eureka server resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(
        String resourceGroupName,
        String javaEnvironmentName,
        String eurekaServerName,
        MiddlewareEurekaServerInner eurekaServerResource) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (javaEnvironmentName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter javaEnvironmentName is required and cannot be null."));
        }
        if (eurekaServerName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter eurekaServerName is required and cannot be null."));
        }
        if (eurekaServerResource == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter eurekaServerResource is required and cannot be null."));
        } else {
            eurekaServerResource.validate();
        }
        final String apiVersion = "2023-08-02-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .createOrUpdate(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            javaEnvironmentName,
                            eurekaServerName,
                            apiVersion,
                            eurekaServerResource,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create or update the eureka server settings.
     *
     * <p>The operation to create or update the eureka server settings.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param eurekaServerName Name of the Eureka Server.
     * @param eurekaServerResource Parameters for the update operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return eureka server resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(
        String resourceGroupName,
        String javaEnvironmentName,
        String eurekaServerName,
        MiddlewareEurekaServerInner eurekaServerResource,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (javaEnvironmentName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter javaEnvironmentName is required and cannot be null."));
        }
        if (eurekaServerName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter eurekaServerName is required and cannot be null."));
        }
        if (eurekaServerResource == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter eurekaServerResource is required and cannot be null."));
        } else {
            eurekaServerResource.validate();
        }
        final String apiVersion = "2023-08-02-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .createOrUpdate(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                javaEnvironmentName,
                eurekaServerName,
                apiVersion,
                eurekaServerResource,
                accept,
                context);
    }

    /**
     * Create or update the eureka server settings.
     *
     * <p>The operation to create or update the eureka server settings.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param eurekaServerName Name of the Eureka Server.
     * @param eurekaServerResource Parameters for the update operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of eureka server resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<MiddlewareEurekaServerInner>, MiddlewareEurekaServerInner> beginCreateOrUpdateAsync(
        String resourceGroupName,
        String javaEnvironmentName,
        String eurekaServerName,
        MiddlewareEurekaServerInner eurekaServerResource) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            createOrUpdateWithResponseAsync(
                resourceGroupName, javaEnvironmentName, eurekaServerName, eurekaServerResource);
        return this
            .client
            .<MiddlewareEurekaServerInner, MiddlewareEurekaServerInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                MiddlewareEurekaServerInner.class,
                MiddlewareEurekaServerInner.class,
                this.client.getContext());
    }

    /**
     * Create or update the eureka server settings.
     *
     * <p>The operation to create or update the eureka server settings.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param eurekaServerName Name of the Eureka Server.
     * @param eurekaServerResource Parameters for the update operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of eureka server resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<MiddlewareEurekaServerInner>, MiddlewareEurekaServerInner> beginCreateOrUpdateAsync(
        String resourceGroupName,
        String javaEnvironmentName,
        String eurekaServerName,
        MiddlewareEurekaServerInner eurekaServerResource,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            createOrUpdateWithResponseAsync(
                resourceGroupName, javaEnvironmentName, eurekaServerName, eurekaServerResource, context);
        return this
            .client
            .<MiddlewareEurekaServerInner, MiddlewareEurekaServerInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                MiddlewareEurekaServerInner.class,
                MiddlewareEurekaServerInner.class,
                context);
    }

    /**
     * Create or update the eureka server settings.
     *
     * <p>The operation to create or update the eureka server settings.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param eurekaServerName Name of the Eureka Server.
     * @param eurekaServerResource Parameters for the update operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of eureka server resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<MiddlewareEurekaServerInner>, MiddlewareEurekaServerInner> beginCreateOrUpdate(
        String resourceGroupName,
        String javaEnvironmentName,
        String eurekaServerName,
        MiddlewareEurekaServerInner eurekaServerResource) {
        return this
            .beginCreateOrUpdateAsync(resourceGroupName, javaEnvironmentName, eurekaServerName, eurekaServerResource)
            .getSyncPoller();
    }

    /**
     * Create or update the eureka server settings.
     *
     * <p>The operation to create or update the eureka server settings.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param eurekaServerName Name of the Eureka Server.
     * @param eurekaServerResource Parameters for the update operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of eureka server resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<MiddlewareEurekaServerInner>, MiddlewareEurekaServerInner> beginCreateOrUpdate(
        String resourceGroupName,
        String javaEnvironmentName,
        String eurekaServerName,
        MiddlewareEurekaServerInner eurekaServerResource,
        Context context) {
        return this
            .beginCreateOrUpdateAsync(
                resourceGroupName, javaEnvironmentName, eurekaServerName, eurekaServerResource, context)
            .getSyncPoller();
    }

    /**
     * Create or update the eureka server settings.
     *
     * <p>The operation to create or update the eureka server settings.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param eurekaServerName Name of the Eureka Server.
     * @param eurekaServerResource Parameters for the update operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return eureka server resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<MiddlewareEurekaServerInner> createOrUpdateAsync(
        String resourceGroupName,
        String javaEnvironmentName,
        String eurekaServerName,
        MiddlewareEurekaServerInner eurekaServerResource) {
        return beginCreateOrUpdateAsync(resourceGroupName, javaEnvironmentName, eurekaServerName, eurekaServerResource)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create or update the eureka server settings.
     *
     * <p>The operation to create or update the eureka server settings.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param eurekaServerName Name of the Eureka Server.
     * @param eurekaServerResource Parameters for the update operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return eureka server resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<MiddlewareEurekaServerInner> createOrUpdateAsync(
        String resourceGroupName,
        String javaEnvironmentName,
        String eurekaServerName,
        MiddlewareEurekaServerInner eurekaServerResource,
        Context context) {
        return beginCreateOrUpdateAsync(
                resourceGroupName, javaEnvironmentName, eurekaServerName, eurekaServerResource, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create or update the eureka server settings.
     *
     * <p>The operation to create or update the eureka server settings.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param eurekaServerName Name of the Eureka Server.
     * @param eurekaServerResource Parameters for the update operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return eureka server resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MiddlewareEurekaServerInner createOrUpdate(
        String resourceGroupName,
        String javaEnvironmentName,
        String eurekaServerName,
        MiddlewareEurekaServerInner eurekaServerResource) {
        return createOrUpdateAsync(resourceGroupName, javaEnvironmentName, eurekaServerName, eurekaServerResource)
            .block();
    }

    /**
     * Create or update the eureka server settings.
     *
     * <p>The operation to create or update the eureka server settings.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param eurekaServerName Name of the Eureka Server.
     * @param eurekaServerResource Parameters for the update operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return eureka server resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MiddlewareEurekaServerInner createOrUpdate(
        String resourceGroupName,
        String javaEnvironmentName,
        String eurekaServerName,
        MiddlewareEurekaServerInner eurekaServerResource,
        Context context) {
        return createOrUpdateAsync(
                resourceGroupName, javaEnvironmentName, eurekaServerName, eurekaServerResource, context)
            .block();
    }

    /**
     * Update the eureka server settings.
     *
     * <p>The operation to update the eureka server settings.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param eurekaServerName Name of the Eureka Server.
     * @param eurekaServerResource Parameters for the update operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return eureka server resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updatePatchWithResponseAsync(
        String resourceGroupName,
        String javaEnvironmentName,
        String eurekaServerName,
        MiddlewareEurekaServerInner eurekaServerResource) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (javaEnvironmentName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter javaEnvironmentName is required and cannot be null."));
        }
        if (eurekaServerName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter eurekaServerName is required and cannot be null."));
        }
        if (eurekaServerResource == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter eurekaServerResource is required and cannot be null."));
        } else {
            eurekaServerResource.validate();
        }
        final String apiVersion = "2023-08-02-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .updatePatch(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            javaEnvironmentName,
                            eurekaServerName,
                            apiVersion,
                            eurekaServerResource,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Update the eureka server settings.
     *
     * <p>The operation to update the eureka server settings.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param eurekaServerName Name of the Eureka Server.
     * @param eurekaServerResource Parameters for the update operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return eureka server resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updatePatchWithResponseAsync(
        String resourceGroupName,
        String javaEnvironmentName,
        String eurekaServerName,
        MiddlewareEurekaServerInner eurekaServerResource,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (javaEnvironmentName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter javaEnvironmentName is required and cannot be null."));
        }
        if (eurekaServerName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter eurekaServerName is required and cannot be null."));
        }
        if (eurekaServerResource == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter eurekaServerResource is required and cannot be null."));
        } else {
            eurekaServerResource.validate();
        }
        final String apiVersion = "2023-08-02-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .updatePatch(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                javaEnvironmentName,
                eurekaServerName,
                apiVersion,
                eurekaServerResource,
                accept,
                context);
    }

    /**
     * Update the eureka server settings.
     *
     * <p>The operation to update the eureka server settings.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param eurekaServerName Name of the Eureka Server.
     * @param eurekaServerResource Parameters for the update operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of eureka server resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<MiddlewareEurekaServerInner>, MiddlewareEurekaServerInner> beginUpdatePatchAsync(
        String resourceGroupName,
        String javaEnvironmentName,
        String eurekaServerName,
        MiddlewareEurekaServerInner eurekaServerResource) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            updatePatchWithResponseAsync(
                resourceGroupName, javaEnvironmentName, eurekaServerName, eurekaServerResource);
        return this
            .client
            .<MiddlewareEurekaServerInner, MiddlewareEurekaServerInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                MiddlewareEurekaServerInner.class,
                MiddlewareEurekaServerInner.class,
                this.client.getContext());
    }

    /**
     * Update the eureka server settings.
     *
     * <p>The operation to update the eureka server settings.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param eurekaServerName Name of the Eureka Server.
     * @param eurekaServerResource Parameters for the update operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of eureka server resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<MiddlewareEurekaServerInner>, MiddlewareEurekaServerInner> beginUpdatePatchAsync(
        String resourceGroupName,
        String javaEnvironmentName,
        String eurekaServerName,
        MiddlewareEurekaServerInner eurekaServerResource,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            updatePatchWithResponseAsync(
                resourceGroupName, javaEnvironmentName, eurekaServerName, eurekaServerResource, context);
        return this
            .client
            .<MiddlewareEurekaServerInner, MiddlewareEurekaServerInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                MiddlewareEurekaServerInner.class,
                MiddlewareEurekaServerInner.class,
                context);
    }

    /**
     * Update the eureka server settings.
     *
     * <p>The operation to update the eureka server settings.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param eurekaServerName Name of the Eureka Server.
     * @param eurekaServerResource Parameters for the update operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of eureka server resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<MiddlewareEurekaServerInner>, MiddlewareEurekaServerInner> beginUpdatePatch(
        String resourceGroupName,
        String javaEnvironmentName,
        String eurekaServerName,
        MiddlewareEurekaServerInner eurekaServerResource) {
        return this
            .beginUpdatePatchAsync(resourceGroupName, javaEnvironmentName, eurekaServerName, eurekaServerResource)
            .getSyncPoller();
    }

    /**
     * Update the eureka server settings.
     *
     * <p>The operation to update the eureka server settings.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param eurekaServerName Name of the Eureka Server.
     * @param eurekaServerResource Parameters for the update operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of eureka server resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<MiddlewareEurekaServerInner>, MiddlewareEurekaServerInner> beginUpdatePatch(
        String resourceGroupName,
        String javaEnvironmentName,
        String eurekaServerName,
        MiddlewareEurekaServerInner eurekaServerResource,
        Context context) {
        return this
            .beginUpdatePatchAsync(
                resourceGroupName, javaEnvironmentName, eurekaServerName, eurekaServerResource, context)
            .getSyncPoller();
    }

    /**
     * Update the eureka server settings.
     *
     * <p>The operation to update the eureka server settings.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param eurekaServerName Name of the Eureka Server.
     * @param eurekaServerResource Parameters for the update operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return eureka server resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<MiddlewareEurekaServerInner> updatePatchAsync(
        String resourceGroupName,
        String javaEnvironmentName,
        String eurekaServerName,
        MiddlewareEurekaServerInner eurekaServerResource) {
        return beginUpdatePatchAsync(resourceGroupName, javaEnvironmentName, eurekaServerName, eurekaServerResource)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Update the eureka server settings.
     *
     * <p>The operation to update the eureka server settings.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param eurekaServerName Name of the Eureka Server.
     * @param eurekaServerResource Parameters for the update operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return eureka server resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<MiddlewareEurekaServerInner> updatePatchAsync(
        String resourceGroupName,
        String javaEnvironmentName,
        String eurekaServerName,
        MiddlewareEurekaServerInner eurekaServerResource,
        Context context) {
        return beginUpdatePatchAsync(
                resourceGroupName, javaEnvironmentName, eurekaServerName, eurekaServerResource, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Update the eureka server settings.
     *
     * <p>The operation to update the eureka server settings.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param eurekaServerName Name of the Eureka Server.
     * @param eurekaServerResource Parameters for the update operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return eureka server resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MiddlewareEurekaServerInner updatePatch(
        String resourceGroupName,
        String javaEnvironmentName,
        String eurekaServerName,
        MiddlewareEurekaServerInner eurekaServerResource) {
        return updatePatchAsync(resourceGroupName, javaEnvironmentName, eurekaServerName, eurekaServerResource).block();
    }

    /**
     * Update the eureka server settings.
     *
     * <p>The operation to update the eureka server settings.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param javaEnvironmentName Name of the Java Environment.
     * @param eurekaServerName Name of the Eureka Server.
     * @param eurekaServerResource Parameters for the update operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return eureka server resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MiddlewareEurekaServerInner updatePatch(
        String resourceGroupName,
        String javaEnvironmentName,
        String eurekaServerName,
        MiddlewareEurekaServerInner eurekaServerResource,
        Context context) {
        return updatePatchAsync(resourceGroupName, javaEnvironmentName, eurekaServerName, eurekaServerResource, context)
            .block();
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return azure Spring Apps Eureka Server collection ARM resource along with {@link PagedResponse} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<MiddlewareEurekaServerInner>> listNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<MiddlewareEurekaServerInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return azure Spring Apps Eureka Server collection ARM resource along with {@link PagedResponse} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<MiddlewareEurekaServerInner>> listNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }
}
