// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appplatform.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Job resource properties payload.
 */
@Fluent
public final class JobResourceProperties implements JsonSerializable<JobResourceProperties> {
    /*
     * Provisioning state of the Job
     */
    private JobResourceProvisioningState provisioningState;

    /*
     * The template which is applied for all executions of the Job.
     */
    private JobExecutionTemplate template;

    /*
     * Uploaded source information of the Job.
     */
    private UserSourceInfo source;

    /*
     * Referenced managed components collection
     */
    private List<ManagedComponentReference> managedComponentReferences;

    /*
     * The Job trigger related configuration.
     */
    private JobTriggerConfig triggerConfig;

    /**
     * Creates an instance of JobResourceProperties class.
     */
    public JobResourceProperties() {
    }

    /**
     * Get the provisioningState property: Provisioning state of the Job.
     * 
     * @return the provisioningState value.
     */
    public JobResourceProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the template property: The template which is applied for all executions of the Job.
     * 
     * @return the template value.
     */
    public JobExecutionTemplate template() {
        return this.template;
    }

    /**
     * Set the template property: The template which is applied for all executions of the Job.
     * 
     * @param template the template value to set.
     * @return the JobResourceProperties object itself.
     */
    public JobResourceProperties withTemplate(JobExecutionTemplate template) {
        this.template = template;
        return this;
    }

    /**
     * Get the source property: Uploaded source information of the Job.
     * 
     * @return the source value.
     */
    public UserSourceInfo source() {
        return this.source;
    }

    /**
     * Set the source property: Uploaded source information of the Job.
     * 
     * @param source the source value to set.
     * @return the JobResourceProperties object itself.
     */
    public JobResourceProperties withSource(UserSourceInfo source) {
        this.source = source;
        return this;
    }

    /**
     * Get the managedComponentReferences property: Referenced managed components collection.
     * 
     * @return the managedComponentReferences value.
     */
    public List<ManagedComponentReference> managedComponentReferences() {
        return this.managedComponentReferences;
    }

    /**
     * Set the managedComponentReferences property: Referenced managed components collection.
     * 
     * @param managedComponentReferences the managedComponentReferences value to set.
     * @return the JobResourceProperties object itself.
     */
    public JobResourceProperties
        withManagedComponentReferences(List<ManagedComponentReference> managedComponentReferences) {
        this.managedComponentReferences = managedComponentReferences;
        return this;
    }

    /**
     * Get the triggerConfig property: The Job trigger related configuration.
     * 
     * @return the triggerConfig value.
     */
    public JobTriggerConfig triggerConfig() {
        return this.triggerConfig;
    }

    /**
     * Set the triggerConfig property: The Job trigger related configuration.
     * 
     * @param triggerConfig the triggerConfig value to set.
     * @return the JobResourceProperties object itself.
     */
    public JobResourceProperties withTriggerConfig(JobTriggerConfig triggerConfig) {
        this.triggerConfig = triggerConfig;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (template() != null) {
            template().validate();
        }
        if (source() != null) {
            source().validate();
        }
        if (managedComponentReferences() != null) {
            managedComponentReferences().forEach(e -> e.validate());
        }
        if (triggerConfig() != null) {
            triggerConfig().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("template", this.template);
        jsonWriter.writeJsonField("source", this.source);
        jsonWriter.writeArrayField("managedComponentReferences", this.managedComponentReferences,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("triggerConfig", this.triggerConfig);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of JobResourceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of JobResourceProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the JobResourceProperties.
     */
    public static JobResourceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            JobResourceProperties deserializedJobResourceProperties = new JobResourceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedJobResourceProperties.provisioningState
                        = JobResourceProvisioningState.fromString(reader.getString());
                } else if ("template".equals(fieldName)) {
                    deserializedJobResourceProperties.template = JobExecutionTemplate.fromJson(reader);
                } else if ("source".equals(fieldName)) {
                    deserializedJobResourceProperties.source = UserSourceInfo.fromJson(reader);
                } else if ("managedComponentReferences".equals(fieldName)) {
                    List<ManagedComponentReference> managedComponentReferences
                        = reader.readArray(reader1 -> ManagedComponentReference.fromJson(reader1));
                    deserializedJobResourceProperties.managedComponentReferences = managedComponentReferences;
                } else if ("triggerConfig".equals(fieldName)) {
                    deserializedJobResourceProperties.triggerConfig = JobTriggerConfig.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedJobResourceProperties;
        });
    }
}
