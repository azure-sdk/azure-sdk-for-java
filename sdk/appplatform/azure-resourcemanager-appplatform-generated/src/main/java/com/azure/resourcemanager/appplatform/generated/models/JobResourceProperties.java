// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appplatform.generated.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Map;

/**
 * Job resource properties payload.
 */
@Fluent
public final class JobResourceProperties {
    /*
     * Provisioning state of the Job
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private JobResourceProvisioningState provisioningState;

    /*
     * The template which is applied for all executions of the Job.
     */
    @JsonProperty(value = "template")
    private JobExecutionTemplate template;

    /*
     * Collection of addons
     */
    @JsonProperty(value = "addonConfigs")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, Object> addonConfigs;

    /*
     * Uploaded source information of the Job.
     */
    @JsonProperty(value = "source")
    private UserSourceInfo source;

    /*
     * The Job specific configuration.
     */
    @JsonProperty(value = "configuration")
    private JobConfiguration configuration;

    /**
     * Creates an instance of JobResourceProperties class.
     */
    public JobResourceProperties() {
    }

    /**
     * Get the provisioningState property: Provisioning state of the Job.
     * 
     * @return the provisioningState value.
     */
    public JobResourceProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the template property: The template which is applied for all executions of the Job.
     * 
     * @return the template value.
     */
    public JobExecutionTemplate template() {
        return this.template;
    }

    /**
     * Set the template property: The template which is applied for all executions of the Job.
     * 
     * @param template the template value to set.
     * @return the JobResourceProperties object itself.
     */
    public JobResourceProperties withTemplate(JobExecutionTemplate template) {
        this.template = template;
        return this;
    }

    /**
     * Get the addonConfigs property: Collection of addons.
     * 
     * @return the addonConfigs value.
     */
    public Map<String, Object> addonConfigs() {
        return this.addonConfigs;
    }

    /**
     * Set the addonConfigs property: Collection of addons.
     * 
     * @param addonConfigs the addonConfigs value to set.
     * @return the JobResourceProperties object itself.
     */
    public JobResourceProperties withAddonConfigs(Map<String, Object> addonConfigs) {
        this.addonConfigs = addonConfigs;
        return this;
    }

    /**
     * Get the source property: Uploaded source information of the Job.
     * 
     * @return the source value.
     */
    public UserSourceInfo source() {
        return this.source;
    }

    /**
     * Set the source property: Uploaded source information of the Job.
     * 
     * @param source the source value to set.
     * @return the JobResourceProperties object itself.
     */
    public JobResourceProperties withSource(UserSourceInfo source) {
        this.source = source;
        return this;
    }

    /**
     * Get the configuration property: The Job specific configuration.
     * 
     * @return the configuration value.
     */
    public JobConfiguration configuration() {
        return this.configuration;
    }

    /**
     * Set the configuration property: The Job specific configuration.
     * 
     * @param configuration the configuration value to set.
     * @return the JobResourceProperties object itself.
     */
    public JobResourceProperties withConfiguration(JobConfiguration configuration) {
        this.configuration = configuration;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (template() != null) {
            template().validate();
        }
        if (source() != null) {
            source().validate();
        }
        if (configuration() != null) {
            configuration().validate();
        }
    }
}
