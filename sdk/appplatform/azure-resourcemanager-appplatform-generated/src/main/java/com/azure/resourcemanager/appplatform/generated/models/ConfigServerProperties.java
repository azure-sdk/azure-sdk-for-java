// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appplatform.generated.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * Config server git properties payload.
 */
@Fluent
public final class ConfigServerProperties {
    /*
     * State of the config server.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ConfigServerState provisioningState;

    /*
     * The requested resource quantity for required CPU and Memory, only available in Enterprise Plan.
     */
    @JsonProperty(value = "resourceRequests", access = JsonProperty.Access.WRITE_ONLY)
    private ConfigServerResourceRequests resourceRequests;

    /*
     * Collection of instances belong to Config Server, only available in Enterprise Plan.
     */
    @JsonProperty(value = "instances", access = JsonProperty.Access.WRITE_ONLY)
    private List<ConfigServerInstance> instances;

    /*
     * Error when apply config server settings.
     */
    @JsonProperty(value = "error")
    private Error error;

    /*
     * Enabled state of the config server. This is only used in Consumption tier.
     */
    @JsonProperty(value = "enabledState")
    private ConfigServerEnabledState enabledState;

    /*
     * Settings of config server.
     */
    @JsonProperty(value = "configServer")
    private ConfigServerSettings configServer;

    /**
     * Creates an instance of ConfigServerProperties class.
     */
    public ConfigServerProperties() {
    }

    /**
     * Get the provisioningState property: State of the config server.
     * 
     * @return the provisioningState value.
     */
    public ConfigServerState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the resourceRequests property: The requested resource quantity for required CPU and Memory, only available in
     * Enterprise Plan.
     * 
     * @return the resourceRequests value.
     */
    public ConfigServerResourceRequests resourceRequests() {
        return this.resourceRequests;
    }

    /**
     * Get the instances property: Collection of instances belong to Config Server, only available in Enterprise Plan.
     * 
     * @return the instances value.
     */
    public List<ConfigServerInstance> instances() {
        return this.instances;
    }

    /**
     * Get the error property: Error when apply config server settings.
     * 
     * @return the error value.
     */
    public Error error() {
        return this.error;
    }

    /**
     * Set the error property: Error when apply config server settings.
     * 
     * @param error the error value to set.
     * @return the ConfigServerProperties object itself.
     */
    public ConfigServerProperties withError(Error error) {
        this.error = error;
        return this;
    }

    /**
     * Get the enabledState property: Enabled state of the config server. This is only used in Consumption tier.
     * 
     * @return the enabledState value.
     */
    public ConfigServerEnabledState enabledState() {
        return this.enabledState;
    }

    /**
     * Set the enabledState property: Enabled state of the config server. This is only used in Consumption tier.
     * 
     * @param enabledState the enabledState value to set.
     * @return the ConfigServerProperties object itself.
     */
    public ConfigServerProperties withEnabledState(ConfigServerEnabledState enabledState) {
        this.enabledState = enabledState;
        return this;
    }

    /**
     * Get the configServer property: Settings of config server.
     * 
     * @return the configServer value.
     */
    public ConfigServerSettings configServer() {
        return this.configServer;
    }

    /**
     * Set the configServer property: Settings of config server.
     * 
     * @param configServer the configServer value to set.
     * @return the ConfigServerProperties object itself.
     */
    public ConfigServerProperties withConfigServer(ConfigServerSettings configServer) {
        this.configServer = configServer;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (resourceRequests() != null) {
            resourceRequests().validate();
        }
        if (instances() != null) {
            instances().forEach(e -> e.validate());
        }
        if (error() != null) {
            error().validate();
        }
        if (configServer() != null) {
            configServer().validate();
        }
    }
}
