// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appplatform.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Config server git properties payload.
 */
@Fluent
public final class ConfigServerProperties implements JsonSerializable<ConfigServerProperties> {
    /*
     * State of the config server.
     */
    private ConfigServerState provisioningState;

    /*
     * The requested resource quantity for required CPU and Memory, only available in Enterprise Plan.
     */
    private ConfigServerResourceRequests resourceRequests;

    /*
     * Collection of instances belong to Config Server, only available in Enterprise Plan.
     */
    private List<ConfigServerInstance> instances;

    /*
     * Error when apply config server settings.
     */
    private Error error;

    /*
     * Enabled state of the config server. This is only used in Consumption tier.
     */
    private ConfigServerEnabledState enabledState;

    /*
     * Settings of config server.
     */
    private ConfigServerSettings configServer;

    /**
     * Creates an instance of ConfigServerProperties class.
     */
    public ConfigServerProperties() {
    }

    /**
     * Get the provisioningState property: State of the config server.
     * 
     * @return the provisioningState value.
     */
    public ConfigServerState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the resourceRequests property: The requested resource quantity for required CPU and Memory, only available in
     * Enterprise Plan.
     * 
     * @return the resourceRequests value.
     */
    public ConfigServerResourceRequests resourceRequests() {
        return this.resourceRequests;
    }

    /**
     * Get the instances property: Collection of instances belong to Config Server, only available in Enterprise Plan.
     * 
     * @return the instances value.
     */
    public List<ConfigServerInstance> instances() {
        return this.instances;
    }

    /**
     * Get the error property: Error when apply config server settings.
     * 
     * @return the error value.
     */
    public Error error() {
        return this.error;
    }

    /**
     * Set the error property: Error when apply config server settings.
     * 
     * @param error the error value to set.
     * @return the ConfigServerProperties object itself.
     */
    public ConfigServerProperties withError(Error error) {
        this.error = error;
        return this;
    }

    /**
     * Get the enabledState property: Enabled state of the config server. This is only used in Consumption tier.
     * 
     * @return the enabledState value.
     */
    public ConfigServerEnabledState enabledState() {
        return this.enabledState;
    }

    /**
     * Set the enabledState property: Enabled state of the config server. This is only used in Consumption tier.
     * 
     * @param enabledState the enabledState value to set.
     * @return the ConfigServerProperties object itself.
     */
    public ConfigServerProperties withEnabledState(ConfigServerEnabledState enabledState) {
        this.enabledState = enabledState;
        return this;
    }

    /**
     * Get the configServer property: Settings of config server.
     * 
     * @return the configServer value.
     */
    public ConfigServerSettings configServer() {
        return this.configServer;
    }

    /**
     * Set the configServer property: Settings of config server.
     * 
     * @param configServer the configServer value to set.
     * @return the ConfigServerProperties object itself.
     */
    public ConfigServerProperties withConfigServer(ConfigServerSettings configServer) {
        this.configServer = configServer;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (resourceRequests() != null) {
            resourceRequests().validate();
        }
        if (instances() != null) {
            instances().forEach(e -> e.validate());
        }
        if (error() != null) {
            error().validate();
        }
        if (configServer() != null) {
            configServer().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("error", this.error);
        jsonWriter.writeStringField("enabledState", this.enabledState == null ? null : this.enabledState.toString());
        jsonWriter.writeJsonField("configServer", this.configServer);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ConfigServerProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ConfigServerProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ConfigServerProperties.
     */
    public static ConfigServerProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ConfigServerProperties deserializedConfigServerProperties = new ConfigServerProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedConfigServerProperties.provisioningState
                        = ConfigServerState.fromString(reader.getString());
                } else if ("resourceRequests".equals(fieldName)) {
                    deserializedConfigServerProperties.resourceRequests = ConfigServerResourceRequests.fromJson(reader);
                } else if ("instances".equals(fieldName)) {
                    List<ConfigServerInstance> instances
                        = reader.readArray(reader1 -> ConfigServerInstance.fromJson(reader1));
                    deserializedConfigServerProperties.instances = instances;
                } else if ("error".equals(fieldName)) {
                    deserializedConfigServerProperties.error = Error.fromJson(reader);
                } else if ("enabledState".equals(fieldName)) {
                    deserializedConfigServerProperties.enabledState
                        = ConfigServerEnabledState.fromString(reader.getString());
                } else if ("configServer".equals(fieldName)) {
                    deserializedConfigServerProperties.configServer = ConfigServerSettings.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedConfigServerProperties;
        });
    }
}
