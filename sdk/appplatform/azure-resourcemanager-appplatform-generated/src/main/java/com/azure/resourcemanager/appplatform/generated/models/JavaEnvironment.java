// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appplatform.generated.models;

import com.azure.core.http.rest.Response;
import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.appplatform.generated.fluent.models.JavaEnvironmentInner;
import java.util.Map;

/**
 * An immutable client-side representation of JavaEnvironment.
 */
public interface JavaEnvironment {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     * 
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     * 
     * @return the type value.
     */
    String type();

    /**
     * Gets the location property: The geo-location where the resource lives.
     * 
     * @return the location value.
     */
    String location();

    /**
     * Gets the tags property: Resource tags.
     * 
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * Gets the provisioningState property: Provisioning state of the Service.
     * 
     * @return the provisioningState value.
     */
    ProvisioningState provisioningState();

    /**
     * Gets the environmentId property: The resource Id of the App Environment that the Spring Apps instance builds on.
     * 
     * @return the environmentId value.
     */
    String environmentId();

    /**
     * Gets the infraResourceGroup property: The name of the resource group that contains the infrastructure resources.
     * 
     * @return the infraResourceGroup value.
     */
    String infraResourceGroup();

    /**
     * Gets the zoneRedundant property: Whether or not this Java Environment is zone-redundant.
     * 
     * @return the zoneRedundant value.
     */
    ZoneRedundantEnum zoneRedundant();

    /**
     * Gets the defaultDomain property: Default Domain Name for the Java environment.
     * 
     * @return the defaultDomain value.
     */
    String defaultDomain();

    /**
     * Gets the region of the resource.
     * 
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     * 
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the name of the resource group.
     * 
     * @return the name of the resource group.
     */
    String resourceGroupName();

    /**
     * Gets the inner com.azure.resourcemanager.appplatform.generated.fluent.models.JavaEnvironmentInner object.
     * 
     * @return the inner object.
     */
    JavaEnvironmentInner innerModel();

    /**
     * The entirety of the JavaEnvironment definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithLocation,
        DefinitionStages.WithResourceGroup, DefinitionStages.WithCreate {
    }

    /**
     * The JavaEnvironment definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of the JavaEnvironment definition.
         */
        interface Blank extends WithLocation {
        }

        /**
         * The stage of the JavaEnvironment definition allowing to specify location.
         */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             * 
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(Region location);

            /**
             * Specifies the region for the resource.
             * 
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(String location);
        }

        /**
         * The stage of the JavaEnvironment definition allowing to specify parent resource.
         */
        interface WithResourceGroup {
            /**
             * Specifies resourceGroupName.
             * 
             * @param resourceGroupName The name of the resource group. The name is case insensitive.
             * @return the next definition stage.
             */
            WithCreate withExistingResourceGroup(String resourceGroupName);
        }

        /**
         * The stage of the JavaEnvironment definition which contains all the minimum required properties for the
         * resource to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate extends DefinitionStages.WithTags, DefinitionStages.WithEnvironmentId,
            DefinitionStages.WithInfraResourceGroup, DefinitionStages.WithZoneRedundant {
            /**
             * Executes the create request.
             * 
             * @return the created resource.
             */
            JavaEnvironment create();

            /**
             * Executes the create request.
             * 
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            JavaEnvironment create(Context context);
        }

        /**
         * The stage of the JavaEnvironment definition allowing to specify tags.
         */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             * 
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }

        /**
         * The stage of the JavaEnvironment definition allowing to specify environmentId.
         */
        interface WithEnvironmentId {
            /**
             * Specifies the environmentId property: The resource Id of the App Environment that the Spring Apps
             * instance builds on.
             * 
             * @param environmentId The resource Id of the App Environment that the Spring Apps instance builds on.
             * @return the next definition stage.
             */
            WithCreate withEnvironmentId(String environmentId);
        }

        /**
         * The stage of the JavaEnvironment definition allowing to specify infraResourceGroup.
         */
        interface WithInfraResourceGroup {
            /**
             * Specifies the infraResourceGroup property: The name of the resource group that contains the
             * infrastructure resources.
             * 
             * @param infraResourceGroup The name of the resource group that contains the infrastructure resources.
             * @return the next definition stage.
             */
            WithCreate withInfraResourceGroup(String infraResourceGroup);
        }

        /**
         * The stage of the JavaEnvironment definition allowing to specify zoneRedundant.
         */
        interface WithZoneRedundant {
            /**
             * Specifies the zoneRedundant property: Whether or not this Java Environment is zone-redundant..
             * 
             * @param zoneRedundant Whether or not this Java Environment is zone-redundant.
             * @return the next definition stage.
             */
            WithCreate withZoneRedundant(ZoneRedundantEnum zoneRedundant);
        }
    }

    /**
     * Begins update for the JavaEnvironment resource.
     * 
     * @return the stage of resource update.
     */
    JavaEnvironment.Update update();

    /**
     * The template for JavaEnvironment update.
     */
    interface Update extends UpdateStages.WithTags, UpdateStages.WithProperties {
        /**
         * Executes the update request.
         * 
         * @return the updated resource.
         */
        JavaEnvironment apply();

        /**
         * Executes the update request.
         * 
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        JavaEnvironment apply(Context context);
    }

    /**
     * The JavaEnvironment update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the JavaEnvironment update allowing to specify tags.
         */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             * 
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }

        /**
         * The stage of the JavaEnvironment update allowing to specify properties.
         */
        interface WithProperties {
            /**
             * Specifies the properties property: Java environment resource specific properties.
             * 
             * @param properties Java environment resource specific properties.
             * @return the next definition stage.
             */
            Update withProperties(Object properties);
        }
    }

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @return the refreshed resource.
     */
    JavaEnvironment refresh();

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    JavaEnvironment refresh(Context context);

    /**
     * Get an resource upload URL for the env, which may be artifacts or source archive.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an resource upload URL for the env, which may be artifacts or source archive along with {@link Response}.
     */
    Response<ResourceUploadDefinition> getResourceUploadUrlWithResponse(Context context);

    /**
     * Get an resource upload URL for the env, which may be artifacts or source archive.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an resource upload URL for the env, which may be artifacts or source archive.
     */
    ResourceUploadDefinition getResourceUploadUrl();
}
