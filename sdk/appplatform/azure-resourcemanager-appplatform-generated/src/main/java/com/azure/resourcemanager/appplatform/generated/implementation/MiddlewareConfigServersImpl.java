// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appplatform.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.appplatform.generated.fluent.MiddlewareConfigServersClient;
import com.azure.resourcemanager.appplatform.generated.fluent.models.MiddlewareConfigServerInner;
import com.azure.resourcemanager.appplatform.generated.fluent.models.MiddlewareConfigServerSettingsValidateResultInner;
import com.azure.resourcemanager.appplatform.generated.models.MiddlewareConfigServer;
import com.azure.resourcemanager.appplatform.generated.models.MiddlewareConfigServerSettings;
import com.azure.resourcemanager.appplatform.generated.models.MiddlewareConfigServerSettingsValidateResult;
import com.azure.resourcemanager.appplatform.generated.models.MiddlewareConfigServers;

public final class MiddlewareConfigServersImpl implements MiddlewareConfigServers {
    private static final ClientLogger LOGGER = new ClientLogger(MiddlewareConfigServersImpl.class);

    private final MiddlewareConfigServersClient innerClient;

    private final com.azure.resourcemanager.appplatform.generated.AppPlatformManager serviceManager;

    public MiddlewareConfigServersImpl(MiddlewareConfigServersClient innerClient,
        com.azure.resourcemanager.appplatform.generated.AppPlatformManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<MiddlewareConfigServer> list(String resourceGroupName, String javaEnvironmentName) {
        PagedIterable<MiddlewareConfigServerInner> inner
            = this.serviceClient().list(resourceGroupName, javaEnvironmentName);
        return Utils.mapPage(inner, inner1 -> new MiddlewareConfigServerImpl(inner1, this.manager()));
    }

    public PagedIterable<MiddlewareConfigServer> list(String resourceGroupName, String javaEnvironmentName,
        Context context) {
        PagedIterable<MiddlewareConfigServerInner> inner
            = this.serviceClient().list(resourceGroupName, javaEnvironmentName, context);
        return Utils.mapPage(inner, inner1 -> new MiddlewareConfigServerImpl(inner1, this.manager()));
    }

    public Response<MiddlewareConfigServer> getWithResponse(String resourceGroupName, String javaEnvironmentName,
        String configServerName, Context context) {
        Response<MiddlewareConfigServerInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, javaEnvironmentName, configServerName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new MiddlewareConfigServerImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public MiddlewareConfigServer get(String resourceGroupName, String javaEnvironmentName, String configServerName) {
        MiddlewareConfigServerInner inner
            = this.serviceClient().get(resourceGroupName, javaEnvironmentName, configServerName);
        if (inner != null) {
            return new MiddlewareConfigServerImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public MiddlewareConfigServerSettingsValidateResult validate(String resourceGroupName, String javaEnvironmentName,
        String configServerName, MiddlewareConfigServerSettings configServerSettings) {
        MiddlewareConfigServerSettingsValidateResultInner inner = this.serviceClient().validate(resourceGroupName,
            javaEnvironmentName, configServerName, configServerSettings);
        if (inner != null) {
            return new MiddlewareConfigServerSettingsValidateResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public MiddlewareConfigServerSettingsValidateResult validate(String resourceGroupName, String javaEnvironmentName,
        String configServerName, MiddlewareConfigServerSettings configServerSettings, Context context) {
        MiddlewareConfigServerSettingsValidateResultInner inner = this.serviceClient().validate(resourceGroupName,
            javaEnvironmentName, configServerName, configServerSettings, context);
        if (inner != null) {
            return new MiddlewareConfigServerSettingsValidateResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public MiddlewareConfigServer getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String javaEnvironmentName = Utils.getValueFromIdByName(id, "javaEnvironments");
        if (javaEnvironmentName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'javaEnvironments'.", id)));
        }
        String configServerName = Utils.getValueFromIdByName(id, "configServers");
        if (configServerName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'configServers'.", id)));
        }
        return this.getWithResponse(resourceGroupName, javaEnvironmentName, configServerName, Context.NONE).getValue();
    }

    public Response<MiddlewareConfigServer> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String javaEnvironmentName = Utils.getValueFromIdByName(id, "javaEnvironments");
        if (javaEnvironmentName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'javaEnvironments'.", id)));
        }
        String configServerName = Utils.getValueFromIdByName(id, "configServers");
        if (configServerName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'configServers'.", id)));
        }
        return this.getWithResponse(resourceGroupName, javaEnvironmentName, configServerName, context);
    }

    private MiddlewareConfigServersClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.appplatform.generated.AppPlatformManager manager() {
        return this.serviceManager;
    }

    public MiddlewareConfigServerImpl define(String name) {
        return new MiddlewareConfigServerImpl(name, this.manager());
    }
}
