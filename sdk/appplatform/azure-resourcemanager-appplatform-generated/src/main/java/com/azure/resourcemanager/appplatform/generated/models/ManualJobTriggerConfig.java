// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appplatform.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Configuration for manual triggered job.
 */
@Fluent
public final class ManualJobTriggerConfig extends JobTriggerConfig {
    /*
     * Type of job trigger
     */
    private TriggerType triggerType = TriggerType.MANUAL;

    /*
     * Number of parallel replicas of a job execution can run.
     */
    private Integer parallelism;

    /*
     * Maximum number of seconds an execution is allowed to run.
     */
    private Integer timeoutInSeconds;

    /*
     * Maximum number of retries before failing the job.
     */
    private Integer retryLimit;

    /**
     * Creates an instance of ManualJobTriggerConfig class.
     */
    public ManualJobTriggerConfig() {
    }

    /**
     * Get the triggerType property: Type of job trigger.
     * 
     * @return the triggerType value.
     */
    @Override
    public TriggerType triggerType() {
        return this.triggerType;
    }

    /**
     * Get the parallelism property: Number of parallel replicas of a job execution can run.
     * 
     * @return the parallelism value.
     */
    public Integer parallelism() {
        return this.parallelism;
    }

    /**
     * Set the parallelism property: Number of parallel replicas of a job execution can run.
     * 
     * @param parallelism the parallelism value to set.
     * @return the ManualJobTriggerConfig object itself.
     */
    public ManualJobTriggerConfig withParallelism(Integer parallelism) {
        this.parallelism = parallelism;
        return this;
    }

    /**
     * Get the timeoutInSeconds property: Maximum number of seconds an execution is allowed to run.
     * 
     * @return the timeoutInSeconds value.
     */
    public Integer timeoutInSeconds() {
        return this.timeoutInSeconds;
    }

    /**
     * Set the timeoutInSeconds property: Maximum number of seconds an execution is allowed to run.
     * 
     * @param timeoutInSeconds the timeoutInSeconds value to set.
     * @return the ManualJobTriggerConfig object itself.
     */
    public ManualJobTriggerConfig withTimeoutInSeconds(Integer timeoutInSeconds) {
        this.timeoutInSeconds = timeoutInSeconds;
        return this;
    }

    /**
     * Get the retryLimit property: Maximum number of retries before failing the job.
     * 
     * @return the retryLimit value.
     */
    public Integer retryLimit() {
        return this.retryLimit;
    }

    /**
     * Set the retryLimit property: Maximum number of retries before failing the job.
     * 
     * @param retryLimit the retryLimit value to set.
     * @return the ManualJobTriggerConfig object itself.
     */
    public ManualJobTriggerConfig withRetryLimit(Integer retryLimit) {
        this.retryLimit = retryLimit;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("triggerType", this.triggerType == null ? null : this.triggerType.toString());
        jsonWriter.writeNumberField("parallelism", this.parallelism);
        jsonWriter.writeNumberField("timeoutInSeconds", this.timeoutInSeconds);
        jsonWriter.writeNumberField("retryLimit", this.retryLimit);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ManualJobTriggerConfig from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ManualJobTriggerConfig if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ManualJobTriggerConfig.
     */
    public static ManualJobTriggerConfig fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ManualJobTriggerConfig deserializedManualJobTriggerConfig = new ManualJobTriggerConfig();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("triggerType".equals(fieldName)) {
                    deserializedManualJobTriggerConfig.triggerType = TriggerType.fromString(reader.getString());
                } else if ("parallelism".equals(fieldName)) {
                    deserializedManualJobTriggerConfig.parallelism = reader.getNullable(JsonReader::getInt);
                } else if ("timeoutInSeconds".equals(fieldName)) {
                    deserializedManualJobTriggerConfig.timeoutInSeconds = reader.getNullable(JsonReader::getInt);
                } else if ("retryLimit".equals(fieldName)) {
                    deserializedManualJobTriggerConfig.retryLimit = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedManualJobTriggerConfig;
        });
    }
}
