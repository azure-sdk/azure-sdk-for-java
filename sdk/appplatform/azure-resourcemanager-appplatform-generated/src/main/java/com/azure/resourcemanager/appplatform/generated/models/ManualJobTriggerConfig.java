// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appplatform.generated.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeId;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Configuration for manual triggered job.
 */
@JsonTypeInfo(
    use = JsonTypeInfo.Id.NAME,
    property = "triggerType",
    defaultImpl = ManualJobTriggerConfig.class,
    visible = true)
@JsonTypeName("Manual")
@Fluent
public final class ManualJobTriggerConfig extends JobTriggerConfig {
    /*
     * Type of job trigger
     */
    @JsonTypeId
    @JsonProperty(value = "triggerType", required = true)
    private TriggerType triggerType = TriggerType.MANUAL;

    /*
     * Number of parallel replicas of a job execution can run.
     */
    @JsonProperty(value = "parallelism")
    private Integer parallelism;

    /*
     * Maximum number of seconds an execution is allowed to run.
     */
    @JsonProperty(value = "timeoutInSeconds")
    private Integer timeoutInSeconds;

    /*
     * Maximum number of retries before failing the job.
     */
    @JsonProperty(value = "retryLimit")
    private Integer retryLimit;

    /**
     * Creates an instance of ManualJobTriggerConfig class.
     */
    public ManualJobTriggerConfig() {
    }

    /**
     * Get the triggerType property: Type of job trigger.
     * 
     * @return the triggerType value.
     */
    @Override
    public TriggerType triggerType() {
        return this.triggerType;
    }

    /**
     * Get the parallelism property: Number of parallel replicas of a job execution can run.
     * 
     * @return the parallelism value.
     */
    public Integer parallelism() {
        return this.parallelism;
    }

    /**
     * Set the parallelism property: Number of parallel replicas of a job execution can run.
     * 
     * @param parallelism the parallelism value to set.
     * @return the ManualJobTriggerConfig object itself.
     */
    public ManualJobTriggerConfig withParallelism(Integer parallelism) {
        this.parallelism = parallelism;
        return this;
    }

    /**
     * Get the timeoutInSeconds property: Maximum number of seconds an execution is allowed to run.
     * 
     * @return the timeoutInSeconds value.
     */
    public Integer timeoutInSeconds() {
        return this.timeoutInSeconds;
    }

    /**
     * Set the timeoutInSeconds property: Maximum number of seconds an execution is allowed to run.
     * 
     * @param timeoutInSeconds the timeoutInSeconds value to set.
     * @return the ManualJobTriggerConfig object itself.
     */
    public ManualJobTriggerConfig withTimeoutInSeconds(Integer timeoutInSeconds) {
        this.timeoutInSeconds = timeoutInSeconds;
        return this;
    }

    /**
     * Get the retryLimit property: Maximum number of retries before failing the job.
     * 
     * @return the retryLimit value.
     */
    public Integer retryLimit() {
        return this.retryLimit;
    }

    /**
     * Set the retryLimit property: Maximum number of retries before failing the job.
     * 
     * @param retryLimit the retryLimit value to set.
     * @return the ManualJobTriggerConfig object itself.
     */
    public ManualJobTriggerConfig withRetryLimit(Integer retryLimit) {
        this.retryLimit = retryLimit;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }
}
