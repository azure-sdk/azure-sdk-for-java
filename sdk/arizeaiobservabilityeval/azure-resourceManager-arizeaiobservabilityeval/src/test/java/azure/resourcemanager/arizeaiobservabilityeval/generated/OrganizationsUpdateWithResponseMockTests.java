// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package azure.resourcemanager.arizeaiobservabilityeval.generated;

import azure.resourceManager.arizeaiobservabilityeval.fluent.models.OrganizationResourceInner;
import azure.resourceManager.arizeaiobservabilityeval.models.ManagedServiceIdentity;
import azure.resourceManager.arizeaiobservabilityeval.models.ManagedServiceIdentityType;
import azure.resourceManager.arizeaiobservabilityeval.models.OrganizationResourceUpdate;
import azure.resourceManager.arizeaiobservabilityeval.models.SingleSignOnStates;
import azure.resourceManager.arizeaiobservabilityeval.models.SingleSignOnType;
import azure.resourceManager.arizeaiobservabilityeval.models.UserAssignedIdentity;
import azure.resourcemanager.arizeaiobservabilityeval.ArizeAIObservabilityEvalManager;
import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class OrganizationsUpdateWithResponseMockTests {
    @Test
    public void testUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"marketplace\":{\"subscriptionId\":\"bovpl\",\"subscriptionStatus\":\"Subscribed\",\"offerDetails\":{\"publisherId\":\"hvgyuguosvmk\",\"offerId\":\"ss\",\"planId\":\"qukkfp\",\"planName\":\"mg\",\"termUnit\":\"nkjzkdeslpvlop\",\"termId\":\"yighxpk\"}},\"user\":{\"firstName\":\"zb\",\"lastName\":\"uebbaumnyqup\",\"emailAddress\":\"eojnabc\",\"upn\":\"smtxpsieb\",\"phoneNumber\":\"hvpesapskrdqm\"},\"provisioningState\":\"Canceled\",\"partnerProperties\":{\"description\":\"htldwk\"},\"singleSignOnProperties\":{\"type\":\"OpenId\",\"state\":\"Enable\",\"enterpriseAppId\":\"kn\",\"url\":\"scwsv\",\"aadDomains\":[\"togt\",\"rupqsxvnmicy\",\"vce\"]}},\"identity\":{\"principalId\":\"ilovnot\",\"tenantId\":\"jfcn\",\"type\":\"None\",\"userAssignedIdentities\":{\"h\":{\"clientId\":\"x\",\"principalId\":\"bttk\"}}},\"location\":\"pnvjtoqnermclf\",\"tags\":{\"rpabg\":\"hoxus\",\"xywpmueefjzwfqkq\":\"epsbjtazqu\"},\"id\":\"jidsuyonobglaoc\",\"name\":\"xtccmg\",\"type\":\"udxytlmoyrx\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ArizeAIObservabilityEvalManager manager = ArizeAIObservabilityEvalManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        OrganizationResourceInner response = manager.organizations()
            .updateWithResponse("ckzywbiexzfeyue", "xibxujwbhqwalm",
                new OrganizationResourceUpdate().withTags(mapOf("zjancuxr", "oxaepd"))
                    .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.USER_ASSIGNED)
                        .withUserAssignedIdentities(mapOf("wtctyqi", new UserAssignedIdentity()))),
                com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("pnvjtoqnermclf", response.location());
        Assertions.assertEquals("hoxus", response.tags().get("rpabg"));
        Assertions.assertEquals("bovpl", response.properties().marketplace().subscriptionId());
        Assertions.assertEquals("hvgyuguosvmk", response.properties().marketplace().offerDetails().publisherId());
        Assertions.assertEquals("ss", response.properties().marketplace().offerDetails().offerId());
        Assertions.assertEquals("qukkfp", response.properties().marketplace().offerDetails().planId());
        Assertions.assertEquals("mg", response.properties().marketplace().offerDetails().planName());
        Assertions.assertEquals("nkjzkdeslpvlop", response.properties().marketplace().offerDetails().termUnit());
        Assertions.assertEquals("yighxpk", response.properties().marketplace().offerDetails().termId());
        Assertions.assertEquals("zb", response.properties().user().firstName());
        Assertions.assertEquals("uebbaumnyqup", response.properties().user().lastName());
        Assertions.assertEquals("eojnabc", response.properties().user().emailAddress());
        Assertions.assertEquals("smtxpsieb", response.properties().user().upn());
        Assertions.assertEquals("hvpesapskrdqm", response.properties().user().phoneNumber());
        Assertions.assertEquals("htldwk", response.properties().partnerProperties().description());
        Assertions.assertEquals(SingleSignOnType.OPEN_ID, response.properties().singleSignOnProperties().type());
        Assertions.assertEquals(SingleSignOnStates.ENABLE, response.properties().singleSignOnProperties().state());
        Assertions.assertEquals("kn", response.properties().singleSignOnProperties().enterpriseAppId());
        Assertions.assertEquals("scwsv", response.properties().singleSignOnProperties().url());
        Assertions.assertEquals("togt", response.properties().singleSignOnProperties().aadDomains().get(0));
        Assertions.assertEquals(ManagedServiceIdentityType.NONE, response.identity().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
