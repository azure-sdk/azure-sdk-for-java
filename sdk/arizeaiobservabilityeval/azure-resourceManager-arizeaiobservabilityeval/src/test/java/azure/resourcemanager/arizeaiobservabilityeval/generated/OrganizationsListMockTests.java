// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package azure.resourcemanager.arizeaiobservabilityeval.generated;

import azure.resourceManager.arizeaiobservabilityeval.fluent.models.OrganizationResourceInner;
import azure.resourceManager.arizeaiobservabilityeval.models.ManagedServiceIdentityType;
import azure.resourceManager.arizeaiobservabilityeval.models.SingleSignOnStates;
import azure.resourceManager.arizeaiobservabilityeval.models.SingleSignOnType;
import azure.resourcemanager.arizeaiobservabilityeval.ArizeAIObservabilityEvalManager;
import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class OrganizationsListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"marketplace\":{\"subscriptionId\":\"nftguvriuhpr\",\"subscriptionStatus\":\"Suspended\",\"offerDetails\":{\"publisherId\":\"yvxqtayriwwroy\",\"offerId\":\"bexrmcq\",\"planId\":\"bycnojvkn\",\"planName\":\"fqsgzvahapjy\",\"termUnit\":\"pvgqzcjrvxdjzlm\",\"termId\":\"xkvugfhzov\"}},\"user\":{\"firstName\":\"jvzunluthnnp\",\"lastName\":\"xipeilpjzuaejx\",\"emailAddress\":\"ltskzbbtd\",\"upn\":\"mv\",\"phoneNumber\":\"kgpwoz\"},\"provisioningState\":\"Succeeded\",\"partnerProperties\":{\"description\":\"p\"},\"singleSignOnProperties\":{\"type\":\"OpenId\",\"state\":\"Initial\",\"enterpriseAppId\":\"dxluu\",\"url\":\"ttouwaboekqvkel\",\"aadDomains\":[\"vbxwyjsflhh\"]}},\"identity\":{\"principalId\":\"lnjixisxya\",\"tenantId\":\"oyaqcslyjpkiid\",\"type\":\"None\",\"userAssignedIdentities\":{\"dtpnapnyiropuhp\":{\"clientId\":\"nelixhnrztfo\",\"principalId\":\"bnxknalaulppg\"},\"lynqwwncwzzh\":{\"clientId\":\"vpgylgqgitxmed\",\"principalId\":\"c\"},\"pfqbuaceopzf\":{\"clientId\":\"ktrmgucnapkt\",\"principalId\":\"ellwptfdy\"},\"lzdahzxctobgbkdm\":{\"clientId\":\"hhuao\",\"principalId\":\"pcqeqx\"}}},\"location\":\"zpostmgrcfbu\",\"tags\":{\"xxjyngudivkrtsw\":\"fqjhhkxbpvjymj\",\"vjfdx\":\"xqzvszjfa\",\"qtdo\":\"ivetvtcq\"},\"id\":\"mcbxvwvxysl\",\"name\":\"bhsfxob\",\"type\":\"ytkblmpew\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ArizeAIObservabilityEvalManager manager = ArizeAIObservabilityEvalManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<OrganizationResourceInner> response
            = manager.organizations().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("zpostmgrcfbu", response.iterator().next().location());
        Assertions.assertEquals("fqjhhkxbpvjymj", response.iterator().next().tags().get("xxjyngudivkrtsw"));
        Assertions.assertEquals("nftguvriuhpr", response.iterator().next().properties().marketplace().subscriptionId());
        Assertions.assertEquals("yvxqtayriwwroy",
            response.iterator().next().properties().marketplace().offerDetails().publisherId());
        Assertions.assertEquals("bexrmcq",
            response.iterator().next().properties().marketplace().offerDetails().offerId());
        Assertions.assertEquals("bycnojvkn",
            response.iterator().next().properties().marketplace().offerDetails().planId());
        Assertions.assertEquals("fqsgzvahapjy",
            response.iterator().next().properties().marketplace().offerDetails().planName());
        Assertions.assertEquals("pvgqzcjrvxdjzlm",
            response.iterator().next().properties().marketplace().offerDetails().termUnit());
        Assertions.assertEquals("xkvugfhzov",
            response.iterator().next().properties().marketplace().offerDetails().termId());
        Assertions.assertEquals("jvzunluthnnp", response.iterator().next().properties().user().firstName());
        Assertions.assertEquals("xipeilpjzuaejx", response.iterator().next().properties().user().lastName());
        Assertions.assertEquals("ltskzbbtd", response.iterator().next().properties().user().emailAddress());
        Assertions.assertEquals("mv", response.iterator().next().properties().user().upn());
        Assertions.assertEquals("kgpwoz", response.iterator().next().properties().user().phoneNumber());
        Assertions.assertEquals("p", response.iterator().next().properties().partnerProperties().description());
        Assertions.assertEquals(SingleSignOnType.OPEN_ID,
            response.iterator().next().properties().singleSignOnProperties().type());
        Assertions.assertEquals(SingleSignOnStates.INITIAL,
            response.iterator().next().properties().singleSignOnProperties().state());
        Assertions.assertEquals("dxluu",
            response.iterator().next().properties().singleSignOnProperties().enterpriseAppId());
        Assertions.assertEquals("ttouwaboekqvkel",
            response.iterator().next().properties().singleSignOnProperties().url());
        Assertions.assertEquals("vbxwyjsflhh",
            response.iterator().next().properties().singleSignOnProperties().aadDomains().get(0));
        Assertions.assertEquals(ManagedServiceIdentityType.NONE, response.iterator().next().identity().type());
    }
}
