// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package azure.resourcemanager.arizeaiobservabilityeval.generated;

import azure.resourceManager.arizeaiobservabilityeval.fluent.models.OrganizationResourceInner;
import azure.resourceManager.arizeaiobservabilityeval.models.ManagedServiceIdentityType;
import azure.resourceManager.arizeaiobservabilityeval.models.SingleSignOnStates;
import azure.resourceManager.arizeaiobservabilityeval.models.SingleSignOnType;
import azure.resourcemanager.arizeaiobservabilityeval.ArizeAIObservabilityEvalManager;
import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class OrganizationsListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"marketplace\":{\"subscriptionId\":\"bh\",\"subscriptionStatus\":\"PendingFulfillmentStart\",\"offerDetails\":{\"publisherId\":\"rlhrxs\",\"offerId\":\"kyv\",\"planId\":\"ycanuzbpzkafku\",\"planName\":\"crnwbmeh\",\"termUnit\":\"eyvjusrtslhspkde\",\"termId\":\"aofmxagkvtme\"}},\"user\":{\"firstName\":\"qkrhahvljua\",\"lastName\":\"quhcdhmduala\",\"emailAddress\":\"qpv\",\"upn\":\"dmwsrcrgvxpvgomz\",\"phoneNumber\":\"misgwbnb\"},\"provisioningState\":\"Canceled\",\"partnerProperties\":{\"description\":\"awkz\"},\"singleSignOnProperties\":{\"type\":\"OpenId\",\"state\":\"Initial\",\"enterpriseAppId\":\"rqhakauha\",\"url\":\"sfwxosowzxc\",\"aadDomains\":[\"cjooxdjebwpucwwf\"]}},\"identity\":{\"principalId\":\"bvmeuecivy\",\"tenantId\":\"ce\",\"type\":\"SystemAssigned,UserAssigned\",\"userAssignedIdentities\":{\"it\":{\"clientId\":\"rw\",\"principalId\":\"eiotwmcdytdx\"},\"skxfbk\":{\"clientId\":\"rjaw\",\"principalId\":\"wgxhn\"},\"auwhvylwzbtdhx\":{\"clientId\":\"cg\",\"principalId\":\"wndnhj\"},\"obbc\":{\"clientId\":\"znbmpowuwprzq\",\"principalId\":\"eualupjmkhf\"}}},\"location\":\"s\",\"tags\":{\"fgb\":\"riplrbpbewtg\",\"wxzvlvqhjkb\":\"c\",\"iebwwaloayqcgwrt\":\"gibtnm\",\"zg\":\"j\"},\"id\":\"yzm\",\"name\":\"txon\",\"type\":\"mtsavjcbpwxqp\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ArizeAIObservabilityEvalManager manager = ArizeAIObservabilityEvalManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<OrganizationResourceInner> response
            = manager.organizations().listByResourceGroup("wfudwpzntxhdzhl", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("s", response.iterator().next().location());
        Assertions.assertEquals("riplrbpbewtg", response.iterator().next().tags().get("fgb"));
        Assertions.assertEquals("bh", response.iterator().next().properties().marketplace().subscriptionId());
        Assertions.assertEquals("rlhrxs",
            response.iterator().next().properties().marketplace().offerDetails().publisherId());
        Assertions.assertEquals("kyv", response.iterator().next().properties().marketplace().offerDetails().offerId());
        Assertions.assertEquals("ycanuzbpzkafku",
            response.iterator().next().properties().marketplace().offerDetails().planId());
        Assertions.assertEquals("crnwbmeh",
            response.iterator().next().properties().marketplace().offerDetails().planName());
        Assertions.assertEquals("eyvjusrtslhspkde",
            response.iterator().next().properties().marketplace().offerDetails().termUnit());
        Assertions.assertEquals("aofmxagkvtme",
            response.iterator().next().properties().marketplace().offerDetails().termId());
        Assertions.assertEquals("qkrhahvljua", response.iterator().next().properties().user().firstName());
        Assertions.assertEquals("quhcdhmduala", response.iterator().next().properties().user().lastName());
        Assertions.assertEquals("qpv", response.iterator().next().properties().user().emailAddress());
        Assertions.assertEquals("dmwsrcrgvxpvgomz", response.iterator().next().properties().user().upn());
        Assertions.assertEquals("misgwbnb", response.iterator().next().properties().user().phoneNumber());
        Assertions.assertEquals("awkz", response.iterator().next().properties().partnerProperties().description());
        Assertions.assertEquals(SingleSignOnType.OPEN_ID,
            response.iterator().next().properties().singleSignOnProperties().type());
        Assertions.assertEquals(SingleSignOnStates.INITIAL,
            response.iterator().next().properties().singleSignOnProperties().state());
        Assertions.assertEquals("rqhakauha",
            response.iterator().next().properties().singleSignOnProperties().enterpriseAppId());
        Assertions.assertEquals("sfwxosowzxc", response.iterator().next().properties().singleSignOnProperties().url());
        Assertions.assertEquals("cjooxdjebwpucwwf",
            response.iterator().next().properties().singleSignOnProperties().aadDomains().get(0));
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED,
            response.iterator().next().identity().type());
    }
}
