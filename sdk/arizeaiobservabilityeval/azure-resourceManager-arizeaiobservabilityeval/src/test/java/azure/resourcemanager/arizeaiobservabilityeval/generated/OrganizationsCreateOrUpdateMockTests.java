// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package azure.resourcemanager.arizeaiobservabilityeval.generated;

import azure.resourceManager.arizeaiobservabilityeval.fluent.models.OrganizationResourceInner;
import azure.resourceManager.arizeaiobservabilityeval.models.ManagedServiceIdentity;
import azure.resourceManager.arizeaiobservabilityeval.models.ManagedServiceIdentityType;
import azure.resourceManager.arizeaiobservabilityeval.models.MarketplaceDetails;
import azure.resourceManager.arizeaiobservabilityeval.models.OfferDetails;
import azure.resourceManager.arizeaiobservabilityeval.models.OrganizationProperties;
import azure.resourceManager.arizeaiobservabilityeval.models.PartnerProperties;
import azure.resourceManager.arizeaiobservabilityeval.models.SingleSignOnPropertiesV2;
import azure.resourceManager.arizeaiobservabilityeval.models.SingleSignOnStates;
import azure.resourceManager.arizeaiobservabilityeval.models.SingleSignOnType;
import azure.resourceManager.arizeaiobservabilityeval.models.UserAssignedIdentity;
import azure.resourceManager.arizeaiobservabilityeval.models.UserDetails;
import azure.resourcemanager.arizeaiobservabilityeval.ArizeAIObservabilityEvalManager;
import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class OrganizationsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"marketplace\":{\"subscriptionId\":\"xzbinjeputt\",\"subscriptionStatus\":\"Subscribed\",\"offerDetails\":{\"publisherId\":\"wnuzoqftiyqzrnkc\",\"offerId\":\"vyxlwhzlsicohoqq\",\"planId\":\"wvl\",\"planName\":\"avwhheunm\",\"termUnit\":\"hgyxzkonoc\",\"termId\":\"oklyaxuconuq\"}},\"user\":{\"firstName\":\"fkbey\",\"lastName\":\"wrmjmwvvjektc\",\"emailAddress\":\"enhwlrs\",\"upn\":\"rzpwvlqdqgbiq\",\"phoneNumber\":\"ihkaetcktvfc\"},\"provisioningState\":\"Succeeded\",\"partnerProperties\":{\"description\":\"nkymuctqhjfbebrj\"},\"singleSignOnProperties\":{\"type\":\"OpenId\",\"state\":\"Enable\",\"enterpriseAppId\":\"wutttxfvjrbi\",\"url\":\"hxepcyvahfnlj\",\"aadDomains\":[\"xjvuujqgidokg\"]}},\"identity\":{\"principalId\":\"yoxgvcltbgsnc\",\"tenantId\":\"kjeszz\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"eh\":{\"clientId\":\"txfvgx\",\"principalId\":\"smx\"},\"lzlfbxzpuz\":{\"clientId\":\"vecxgodebfqkk\",\"principalId\":\"mpukgriw\"},\"kpikadrgvt\":{\"clientId\":\"ispnqzahmgkbrp\",\"principalId\":\"dhibnuq\"},\"utrc\":{\"clientId\":\"gnbuy\",\"principalId\":\"ijggmebfsiar\"}}},\"location\":\"na\",\"tags\":{\"unmpxttd\":\"hj\",\"nbtkcxywnytnr\":\"hrbnlankxmyskpbh\",\"qidybyx\":\"yn\",\"aaxdbabphlwrq\":\"zfcl\"},\"id\":\"fkts\",\"name\":\"hsucoc\",\"type\":\"nyyazttbtwwrqpue\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ArizeAIObservabilityEvalManager manager = ArizeAIObservabilityEvalManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        OrganizationResourceInner response = manager.organizations()
            .createOrUpdate("jsllrmv", "d",
                new OrganizationResourceInner().withLocation("ukgjnpiucgygevq")
                    .withTags(mapOf("rbpizc", "yp", "j", "r", "yhxdeoejzicwi", "dpydn", "bkh", "sjttgzfbish"))
                    .withProperties(new OrganizationProperties()
                        .withMarketplace(new MarketplaceDetails().withSubscriptionId("t")
                            .withOfferDetails(new OfferDetails().withPublisherId("pulexxbczw")
                                .withOfferId("ruwiqzbqjvsov")
                                .withPlanId("yokacspkw")
                                .withPlanName("zdobpxjmflbvvnch")
                                .withTermUnit("cciw")
                                .withTermId("juqk")))
                        .withUser(new UserDetails().withFirstName("sa")
                            .withLastName("wkuofoskghsauu")
                            .withEmailAddress("jmvxie")
                            .withUpn("ugidyjrr")
                            .withPhoneNumber("y"))
                        .withPartnerProperties(new PartnerProperties().withDescription("e"))
                        .withSingleSignOnProperties(new SingleSignOnPropertiesV2().withType(SingleSignOnType.OPEN_ID)
                            .withState(SingleSignOnStates.INITIAL)
                            .withEnterpriseAppId("clhocohsl")
                            .withUrl("vleggzfbuhfmvfax")
                            .withAadDomains(Arrays.asList("eiithlvmez", "v", "hxmzsbbzoggig"))))
                    .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED)
                        .withUserAssignedIdentities(mapOf("o", new UserAssignedIdentity()))),
                com.azure.core.util.Context.NONE);

        Assertions.assertEquals("na", response.location());
        Assertions.assertEquals("hj", response.tags().get("unmpxttd"));
        Assertions.assertEquals("xzbinjeputt", response.properties().marketplace().subscriptionId());
        Assertions.assertEquals("wnuzoqftiyqzrnkc", response.properties().marketplace().offerDetails().publisherId());
        Assertions.assertEquals("vyxlwhzlsicohoqq", response.properties().marketplace().offerDetails().offerId());
        Assertions.assertEquals("wvl", response.properties().marketplace().offerDetails().planId());
        Assertions.assertEquals("avwhheunm", response.properties().marketplace().offerDetails().planName());
        Assertions.assertEquals("hgyxzkonoc", response.properties().marketplace().offerDetails().termUnit());
        Assertions.assertEquals("oklyaxuconuq", response.properties().marketplace().offerDetails().termId());
        Assertions.assertEquals("fkbey", response.properties().user().firstName());
        Assertions.assertEquals("wrmjmwvvjektc", response.properties().user().lastName());
        Assertions.assertEquals("enhwlrs", response.properties().user().emailAddress());
        Assertions.assertEquals("rzpwvlqdqgbiq", response.properties().user().upn());
        Assertions.assertEquals("ihkaetcktvfc", response.properties().user().phoneNumber());
        Assertions.assertEquals("nkymuctqhjfbebrj", response.properties().partnerProperties().description());
        Assertions.assertEquals(SingleSignOnType.OPEN_ID, response.properties().singleSignOnProperties().type());
        Assertions.assertEquals(SingleSignOnStates.ENABLE, response.properties().singleSignOnProperties().state());
        Assertions.assertEquals("wutttxfvjrbi", response.properties().singleSignOnProperties().enterpriseAppId());
        Assertions.assertEquals("hxepcyvahfnlj", response.properties().singleSignOnProperties().url());
        Assertions.assertEquals("xjvuujqgidokg", response.properties().singleSignOnProperties().aadDomains().get(0));
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, response.identity().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
