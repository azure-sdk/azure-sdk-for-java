// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package azure.resourcemanager.arizeaiobservabilityeval.generated;

import azure.resourceManager.arizeaiobservabilityeval.fluent.models.OrganizationResourceInner;
import azure.resourceManager.arizeaiobservabilityeval.models.ManagedServiceIdentity;
import azure.resourceManager.arizeaiobservabilityeval.models.ManagedServiceIdentityType;
import azure.resourceManager.arizeaiobservabilityeval.models.MarketplaceDetails;
import azure.resourceManager.arizeaiobservabilityeval.models.OfferDetails;
import azure.resourceManager.arizeaiobservabilityeval.models.OrganizationProperties;
import azure.resourceManager.arizeaiobservabilityeval.models.PartnerProperties;
import azure.resourceManager.arizeaiobservabilityeval.models.SingleSignOnPropertiesV2;
import azure.resourceManager.arizeaiobservabilityeval.models.SingleSignOnStates;
import azure.resourceManager.arizeaiobservabilityeval.models.SingleSignOnType;
import azure.resourceManager.arizeaiobservabilityeval.models.UserDetails;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for Organizations CreateOrUpdate.
 */
public final class OrganizationsCreateOrUpdateSamples {
    /*
     * x-ms-original-file: 2024-10-01-preview/Organizations_CreateOrUpdate_MaximumSet_Gen.json
     */
    /**
     * Sample code: Organizations_CreateOrUpdate - generated by [MaximumSet] rule.
     * 
     * @param manager Entry point to ArizeAIObservabilityEvalManager.
     */
    public static void organizationsCreateOrUpdateGeneratedByMaximumSetRule(
        azure.resourcemanager.arizeaiobservabilityeval.ArizeAIObservabilityEvalManager manager) {
        manager.organizations()
            .createOrUpdate("rgopenapi", "test-organization-1",
                new OrganizationResourceInner().withLocation("gigxuxdonjfmqnljxcgctfwqapllu")
                    .withTags(mapOf())
                    .withProperties(new OrganizationProperties()
                        .withMarketplace(new MarketplaceDetails().withSubscriptionId("meaowktoejxwfqomc")
                            .withOfferDetails(new OfferDetails().withPublisherId("flrya")
                                .withOfferId("hwhtxmtmmlwsu")
                                .withPlanId("jozklohkdpng")
                                .withPlanName("clnynwt")
                                .withTermUnit("cbfktammjyqewljjjaokakilog")
                                .withTermId("iugvvvoggusxuz")))
                        .withUser(new UserDetails().withFirstName("aorfffgdmglvzdvfvdyjohtnblzsfw")
                            .withLastName("tojbqzk")
                            .withEmailAddress("btables@arize.com")
                            .withUpn("xzvwwbjpqakqqyfudyp")
                            .withPhoneNumber("akbqdbs"))
                        .withPartnerProperties(new PartnerProperties().withDescription("this is a great description"))
                        .withSingleSignOnProperties(new SingleSignOnPropertiesV2().withType(SingleSignOnType.SAML)
                            .withState(SingleSignOnStates.INITIAL)
                            .withEnterpriseAppId("kqykskeuqffsslmpjryzggphhpeh")
                            .withUrl("ihidsswbeahnsjjxxqntz")
                            .withAadDomains(Arrays.asList("tyjdvljasl"))))
                    .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.NONE)
                        .withUserAssignedIdentities(mapOf())),
                com.azure.core.util.Context.NONE);
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
