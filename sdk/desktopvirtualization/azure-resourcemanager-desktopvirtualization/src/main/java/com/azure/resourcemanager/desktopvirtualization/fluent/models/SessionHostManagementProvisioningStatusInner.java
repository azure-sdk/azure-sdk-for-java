// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.desktopvirtualization.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.exception.ManagementError;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.desktopvirtualization.models.SessionHostManagementProvisioningOperationProgress;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * The current status of the session host provisioning async operation.
 */
@Fluent
public final class SessionHostManagementProvisioningStatusInner
    implements JsonSerializable<SessionHostManagementProvisioningStatusInner> {
    /*
     * Fully qualified ID for the async operation.
     */
    private String id;

    /*
     * Name of the async operation.
     */
    private String name;

    /*
     * Operation status. Current defined values are < Scheduled | ValidatingSessionHostProvisioning | Cancelling |
     * ProvisioningSessionHosts > | Succeeded | Failed | Canceled
     */
    private String status;

    /*
     * Percent of the operation that is complete.
     */
    private Float percentComplete;

    /*
     * The start time of the operation.
     */
    private OffsetDateTime startTime;

    /*
     * The end time of the operation.
     */
    private OffsetDateTime endTime;

    /*
     * If present, details of the operation error.
     */
    private ManagementError error;

    /*
     * The custom properties of the SessionHost Provisioning Status.
     */
    private SessionHostManagementProvisioningStatusPropertiesInner innerProperties;

    /**
     * Creates an instance of SessionHostManagementProvisioningStatusInner class.
     */
    public SessionHostManagementProvisioningStatusInner() {
    }

    /**
     * Get the id property: Fully qualified ID for the async operation.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: Fully qualified ID for the async operation.
     * 
     * @param id the id value to set.
     * @return the SessionHostManagementProvisioningStatusInner object itself.
     */
    public SessionHostManagementProvisioningStatusInner withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the name property: Name of the async operation.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Name of the async operation.
     * 
     * @param name the name value to set.
     * @return the SessionHostManagementProvisioningStatusInner object itself.
     */
    public SessionHostManagementProvisioningStatusInner withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the status property: Operation status. Current defined values are &lt; Scheduled |
     * ValidatingSessionHostProvisioning | Cancelling | ProvisioningSessionHosts &gt; | Succeeded | Failed | Canceled.
     * 
     * @return the status value.
     */
    public String status() {
        return this.status;
    }

    /**
     * Set the status property: Operation status. Current defined values are &lt; Scheduled |
     * ValidatingSessionHostProvisioning | Cancelling | ProvisioningSessionHosts &gt; | Succeeded | Failed | Canceled.
     * 
     * @param status the status value to set.
     * @return the SessionHostManagementProvisioningStatusInner object itself.
     */
    public SessionHostManagementProvisioningStatusInner withStatus(String status) {
        this.status = status;
        return this;
    }

    /**
     * Get the percentComplete property: Percent of the operation that is complete.
     * 
     * @return the percentComplete value.
     */
    public Float percentComplete() {
        return this.percentComplete;
    }

    /**
     * Set the percentComplete property: Percent of the operation that is complete.
     * 
     * @param percentComplete the percentComplete value to set.
     * @return the SessionHostManagementProvisioningStatusInner object itself.
     */
    public SessionHostManagementProvisioningStatusInner withPercentComplete(Float percentComplete) {
        this.percentComplete = percentComplete;
        return this;
    }

    /**
     * Get the startTime property: The start time of the operation.
     * 
     * @return the startTime value.
     */
    public OffsetDateTime startTime() {
        return this.startTime;
    }

    /**
     * Set the startTime property: The start time of the operation.
     * 
     * @param startTime the startTime value to set.
     * @return the SessionHostManagementProvisioningStatusInner object itself.
     */
    public SessionHostManagementProvisioningStatusInner withStartTime(OffsetDateTime startTime) {
        this.startTime = startTime;
        return this;
    }

    /**
     * Get the endTime property: The end time of the operation.
     * 
     * @return the endTime value.
     */
    public OffsetDateTime endTime() {
        return this.endTime;
    }

    /**
     * Set the endTime property: The end time of the operation.
     * 
     * @param endTime the endTime value to set.
     * @return the SessionHostManagementProvisioningStatusInner object itself.
     */
    public SessionHostManagementProvisioningStatusInner withEndTime(OffsetDateTime endTime) {
        this.endTime = endTime;
        return this;
    }

    /**
     * Get the error property: If present, details of the operation error.
     * 
     * @return the error value.
     */
    public ManagementError error() {
        return this.error;
    }

    /**
     * Set the error property: If present, details of the operation error.
     * 
     * @param error the error value to set.
     * @return the SessionHostManagementProvisioningStatusInner object itself.
     */
    public SessionHostManagementProvisioningStatusInner withError(ManagementError error) {
        this.error = error;
        return this;
    }

    /**
     * Get the innerProperties property: The custom properties of the SessionHost Provisioning Status.
     * 
     * @return the innerProperties value.
     */
    private SessionHostManagementProvisioningStatusPropertiesInner innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the correlationId property: The correlation Id for Log Analytics.
     * 
     * @return the correlationId value.
     */
    public String correlationId() {
        return this.innerProperties() == null ? null : this.innerProperties().correlationId();
    }

    /**
     * Set the correlationId property: The correlation Id for Log Analytics.
     * 
     * @param correlationId the correlationId value to set.
     * @return the SessionHostManagementProvisioningStatusInner object itself.
     */
    public SessionHostManagementProvisioningStatusInner withCorrelationId(String correlationId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SessionHostManagementProvisioningStatusPropertiesInner();
        }
        this.innerProperties().withCorrelationId(correlationId);
        return this;
    }

    /**
     * Get the progress property: Progress information on the sessionHostManagement operation.
     * 
     * @return the progress value.
     */
    public SessionHostManagementProvisioningOperationProgress progress() {
        return this.innerProperties() == null ? null : this.innerProperties().progress();
    }

    /**
     * Set the progress property: Progress information on the sessionHostManagement operation.
     * 
     * @param progress the progress value to set.
     * @return the SessionHostManagementProvisioningStatusInner object itself.
     */
    public SessionHostManagementProvisioningStatusInner
        withProgress(SessionHostManagementProvisioningOperationProgress progress) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SessionHostManagementProvisioningStatusPropertiesInner();
        }
        this.innerProperties().withProgress(progress);
        return this;
    }

    /**
     * Get the scheduledDateTime property: The timestamp that the update is scheduled for.
     * 
     * @return the scheduledDateTime value.
     */
    public OffsetDateTime scheduledDateTime() {
        return this.innerProperties() == null ? null : this.innerProperties().scheduledDateTime();
    }

    /**
     * Set the scheduledDateTime property: The timestamp that the update is scheduled for.
     * 
     * @param scheduledDateTime the scheduledDateTime value to set.
     * @return the SessionHostManagementProvisioningStatusInner object itself.
     */
    public SessionHostManagementProvisioningStatusInner withScheduledDateTime(OffsetDateTime scheduledDateTime) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SessionHostManagementProvisioningStatusPropertiesInner();
        }
        this.innerProperties().withScheduledDateTime(scheduledDateTime);
        return this;
    }

    /**
     * Get the sessionHostManagement property: SessionHostManagement properties used for the operation.
     * 
     * @return the sessionHostManagement value.
     */
    public SessionHostManagementInner sessionHostManagement() {
        return this.innerProperties() == null ? null : this.innerProperties().sessionHostManagement();
    }

    /**
     * Set the sessionHostManagement property: SessionHostManagement properties used for the operation.
     * 
     * @param sessionHostManagement the sessionHostManagement value to set.
     * @return the SessionHostManagementProvisioningStatusInner object itself.
     */
    public SessionHostManagementProvisioningStatusInner
        withSessionHostManagement(SessionHostManagementInner sessionHostManagement) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SessionHostManagementProvisioningStatusPropertiesInner();
        }
        this.innerProperties().withSessionHostManagement(sessionHostManagement);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (status() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property status in model SessionHostManagementProvisioningStatusInner"));
        }
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(SessionHostManagementProvisioningStatusInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("status", this.status);
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeNumberField("percentComplete", this.percentComplete);
        jsonWriter.writeStringField("startTime",
            this.startTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.startTime));
        jsonWriter.writeStringField("endTime",
            this.endTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.endTime));
        jsonWriter.writeJsonField("error", this.error);
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SessionHostManagementProvisioningStatusInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SessionHostManagementProvisioningStatusInner if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SessionHostManagementProvisioningStatusInner.
     */
    public static SessionHostManagementProvisioningStatusInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SessionHostManagementProvisioningStatusInner deserializedSessionHostManagementProvisioningStatusInner
                = new SessionHostManagementProvisioningStatusInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("status".equals(fieldName)) {
                    deserializedSessionHostManagementProvisioningStatusInner.status = reader.getString();
                } else if ("id".equals(fieldName)) {
                    deserializedSessionHostManagementProvisioningStatusInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedSessionHostManagementProvisioningStatusInner.name = reader.getString();
                } else if ("percentComplete".equals(fieldName)) {
                    deserializedSessionHostManagementProvisioningStatusInner.percentComplete
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("startTime".equals(fieldName)) {
                    deserializedSessionHostManagementProvisioningStatusInner.startTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("endTime".equals(fieldName)) {
                    deserializedSessionHostManagementProvisioningStatusInner.endTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("error".equals(fieldName)) {
                    deserializedSessionHostManagementProvisioningStatusInner.error = ManagementError.fromJson(reader);
                } else if ("properties".equals(fieldName)) {
                    deserializedSessionHostManagementProvisioningStatusInner.innerProperties
                        = SessionHostManagementProvisioningStatusPropertiesInner.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSessionHostManagementProvisioningStatusInner;
        });
    }
}
