// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.desktopvirtualization.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.core.management.SystemData;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.desktopvirtualization.models.ApplicationGroupType;
import com.azure.resourcemanager.desktopvirtualization.models.ManagedServiceIdentity;
import com.azure.resourcemanager.desktopvirtualization.models.Plan;
import com.azure.resourcemanager.desktopvirtualization.models.Sku;
import java.io.IOException;
import java.util.Map;

/**
 * Represents a ApplicationGroup definition.
 */
@Fluent
public final class ApplicationGroupInner extends Resource {
    /*
     * Detailed properties for ApplicationGroup
     */
    private ApplicationGroupProperties innerProperties = new ApplicationGroupProperties();

    /*
     * The managed service identities assigned to this resource.
     */
    private ManagedServiceIdentity identity;

    /*
     * If etag is provided in the response body, it may also be provided as a header per the normal etag convention.
     * Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity
     * tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section
     * 14.27) header fields.
     */
    private String etag;

    /*
     * Metadata used by portal/tooling/etc to render different UX experiences for resources of the same type; e.g.
     * ApiApps are a kind of Microsoft.Web/sites type. If supported, the resource provider must validate and persist
     * this value.
     */
    private String kind;

    /*
     * The fully qualified resource ID of the resource that manages this resource. Indicates if this resource is managed
     * by another Azure resource. If this is present, complete mode deployment will not delete the resource if it is
     * removed from the template since it is managed by another resource.
     */
    private String managedBy;

    /*
     * Details of the resource plan.
     */
    private Plan plan;

    /*
     * The SKU (Stock Keeping Unit) assigned to this resource.
     */
    private Sku sku;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of ApplicationGroupInner class.
     */
    public ApplicationGroupInner() {
    }

    /**
     * Get the innerProperties property: Detailed properties for ApplicationGroup.
     * 
     * @return the innerProperties value.
     */
    private ApplicationGroupProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the identity property: The managed service identities assigned to this resource.
     * 
     * @return the identity value.
     */
    public ManagedServiceIdentity identity() {
        return this.identity;
    }

    /**
     * Set the identity property: The managed service identities assigned to this resource.
     * 
     * @param identity the identity value to set.
     * @return the ApplicationGroupInner object itself.
     */
    public ApplicationGroupInner withIdentity(ManagedServiceIdentity identity) {
        this.identity = identity;
        return this;
    }

    /**
     * Get the etag property: If etag is provided in the response body, it may also be provided as a header per the
     * normal etag convention. Entity tags are used for comparing two or more entities from the same requested resource.
     * HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26),
     * and If-Range (section 14.27) header fields.
     * 
     * @return the etag value.
     */
    public String etag() {
        return this.etag;
    }

    /**
     * Get the kind property: Metadata used by portal/tooling/etc to render different UX experiences for resources of
     * the same type; e.g. ApiApps are a kind of Microsoft.Web/sites type. If supported, the resource provider must
     * validate and persist this value.
     * 
     * @return the kind value.
     */
    public String kind() {
        return this.kind;
    }

    /**
     * Set the kind property: Metadata used by portal/tooling/etc to render different UX experiences for resources of
     * the same type; e.g. ApiApps are a kind of Microsoft.Web/sites type. If supported, the resource provider must
     * validate and persist this value.
     * 
     * @param kind the kind value to set.
     * @return the ApplicationGroupInner object itself.
     */
    public ApplicationGroupInner withKind(String kind) {
        this.kind = kind;
        return this;
    }

    /**
     * Get the managedBy property: The fully qualified resource ID of the resource that manages this resource. Indicates
     * if this resource is managed by another Azure resource. If this is present, complete mode deployment will not
     * delete the resource if it is removed from the template since it is managed by another resource.
     * 
     * @return the managedBy value.
     */
    public String managedBy() {
        return this.managedBy;
    }

    /**
     * Set the managedBy property: The fully qualified resource ID of the resource that manages this resource. Indicates
     * if this resource is managed by another Azure resource. If this is present, complete mode deployment will not
     * delete the resource if it is removed from the template since it is managed by another resource.
     * 
     * @param managedBy the managedBy value to set.
     * @return the ApplicationGroupInner object itself.
     */
    public ApplicationGroupInner withManagedBy(String managedBy) {
        this.managedBy = managedBy;
        return this;
    }

    /**
     * Get the plan property: Details of the resource plan.
     * 
     * @return the plan value.
     */
    public Plan plan() {
        return this.plan;
    }

    /**
     * Set the plan property: Details of the resource plan.
     * 
     * @param plan the plan value to set.
     * @return the ApplicationGroupInner object itself.
     */
    public ApplicationGroupInner withPlan(Plan plan) {
        this.plan = plan;
        return this;
    }

    /**
     * Get the sku property: The SKU (Stock Keeping Unit) assigned to this resource.
     * 
     * @return the sku value.
     */
    public Sku sku() {
        return this.sku;
    }

    /**
     * Set the sku property: The SKU (Stock Keeping Unit) assigned to this resource.
     * 
     * @param sku the sku value to set.
     * @return the ApplicationGroupInner object itself.
     */
    public ApplicationGroupInner withSku(Sku sku) {
        this.sku = sku;
        return this;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ApplicationGroupInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ApplicationGroupInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the objectId property: ObjectId of ApplicationGroup. (internal use).
     * 
     * @return the objectId value.
     */
    public String objectId() {
        return this.innerProperties() == null ? null : this.innerProperties().objectId();
    }

    /**
     * Get the description property: Description of ApplicationGroup.
     * 
     * @return the description value.
     */
    public String description() {
        return this.innerProperties() == null ? null : this.innerProperties().description();
    }

    /**
     * Set the description property: Description of ApplicationGroup.
     * 
     * @param description the description value to set.
     * @return the ApplicationGroupInner object itself.
     */
    public ApplicationGroupInner withDescription(String description) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ApplicationGroupProperties();
        }
        this.innerProperties().withDescription(description);
        return this;
    }

    /**
     * Get the friendlyName property: Friendly name of ApplicationGroup.
     * 
     * @return the friendlyName value.
     */
    public String friendlyName() {
        return this.innerProperties() == null ? null : this.innerProperties().friendlyName();
    }

    /**
     * Set the friendlyName property: Friendly name of ApplicationGroup.
     * 
     * @param friendlyName the friendlyName value to set.
     * @return the ApplicationGroupInner object itself.
     */
    public ApplicationGroupInner withFriendlyName(String friendlyName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ApplicationGroupProperties();
        }
        this.innerProperties().withFriendlyName(friendlyName);
        return this;
    }

    /**
     * Get the hostPoolArmPath property: HostPool arm path of ApplicationGroup.
     * 
     * @return the hostPoolArmPath value.
     */
    public String hostPoolArmPath() {
        return this.innerProperties() == null ? null : this.innerProperties().hostPoolArmPath();
    }

    /**
     * Set the hostPoolArmPath property: HostPool arm path of ApplicationGroup.
     * 
     * @param hostPoolArmPath the hostPoolArmPath value to set.
     * @return the ApplicationGroupInner object itself.
     */
    public ApplicationGroupInner withHostPoolArmPath(String hostPoolArmPath) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ApplicationGroupProperties();
        }
        this.innerProperties().withHostPoolArmPath(hostPoolArmPath);
        return this;
    }

    /**
     * Get the workspaceArmPath property: Workspace arm path of ApplicationGroup.
     * 
     * @return the workspaceArmPath value.
     */
    public String workspaceArmPath() {
        return this.innerProperties() == null ? null : this.innerProperties().workspaceArmPath();
    }

    /**
     * Get the applicationGroupType property: Resource Type of ApplicationGroup.
     * 
     * @return the applicationGroupType value.
     */
    public ApplicationGroupType applicationGroupType() {
        return this.innerProperties() == null ? null : this.innerProperties().applicationGroupType();
    }

    /**
     * Set the applicationGroupType property: Resource Type of ApplicationGroup.
     * 
     * @param applicationGroupType the applicationGroupType value to set.
     * @return the ApplicationGroupInner object itself.
     */
    public ApplicationGroupInner withApplicationGroupType(ApplicationGroupType applicationGroupType) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ApplicationGroupProperties();
        }
        this.innerProperties().withApplicationGroupType(applicationGroupType);
        return this;
    }

    /**
     * Get the cloudPcResource property: Is cloud pc resource.
     * 
     * @return the cloudPcResource value.
     */
    public Boolean cloudPcResource() {
        return this.innerProperties() == null ? null : this.innerProperties().cloudPcResource();
    }

    /**
     * Get the showInFeed property: Boolean representing whether the applicationGroup is show in the feed.
     * 
     * @return the showInFeed value.
     */
    public Boolean showInFeed() {
        return this.innerProperties() == null ? null : this.innerProperties().showInFeed();
    }

    /**
     * Set the showInFeed property: Boolean representing whether the applicationGroup is show in the feed.
     * 
     * @param showInFeed the showInFeed value to set.
     * @return the ApplicationGroupInner object itself.
     */
    public ApplicationGroupInner withShowInFeed(Boolean showInFeed) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ApplicationGroupProperties();
        }
        this.innerProperties().withShowInFeed(showInFeed);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property innerProperties in model ApplicationGroupInner"));
        } else {
            innerProperties().validate();
        }
        if (identity() != null) {
            identity().validate();
        }
        if (plan() != null) {
            plan().validate();
        }
        if (sku() != null) {
            sku().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ApplicationGroupInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("location", location());
        jsonWriter.writeMapField("tags", tags(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("properties", this.innerProperties);
        jsonWriter.writeJsonField("identity", this.identity);
        jsonWriter.writeStringField("kind", this.kind);
        jsonWriter.writeStringField("managedBy", this.managedBy);
        jsonWriter.writeJsonField("plan", this.plan);
        jsonWriter.writeJsonField("sku", this.sku);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ApplicationGroupInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ApplicationGroupInner if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ApplicationGroupInner.
     */
    public static ApplicationGroupInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ApplicationGroupInner deserializedApplicationGroupInner = new ApplicationGroupInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedApplicationGroupInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedApplicationGroupInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedApplicationGroupInner.type = reader.getString();
                } else if ("location".equals(fieldName)) {
                    deserializedApplicationGroupInner.withLocation(reader.getString());
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedApplicationGroupInner.withTags(tags);
                } else if ("properties".equals(fieldName)) {
                    deserializedApplicationGroupInner.innerProperties = ApplicationGroupProperties.fromJson(reader);
                } else if ("identity".equals(fieldName)) {
                    deserializedApplicationGroupInner.identity = ManagedServiceIdentity.fromJson(reader);
                } else if ("etag".equals(fieldName)) {
                    deserializedApplicationGroupInner.etag = reader.getString();
                } else if ("kind".equals(fieldName)) {
                    deserializedApplicationGroupInner.kind = reader.getString();
                } else if ("managedBy".equals(fieldName)) {
                    deserializedApplicationGroupInner.managedBy = reader.getString();
                } else if ("plan".equals(fieldName)) {
                    deserializedApplicationGroupInner.plan = Plan.fromJson(reader);
                } else if ("sku".equals(fieldName)) {
                    deserializedApplicationGroupInner.sku = Sku.fromJson(reader);
                } else if ("systemData".equals(fieldName)) {
                    deserializedApplicationGroupInner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedApplicationGroupInner;
        });
    }
}
