// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.desktopvirtualization.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Active directory info. Only one should be populated based on the join type.
 */
@Fluent
public final class ActiveDirectoryInfoPatchProperties implements JsonSerializable<ActiveDirectoryInfoPatchProperties> {
    /*
     * Credentials needed to create the virtual machine.
     */
    private KeyVaultCredentialsPatchProperties domainCredentials;

    /**
     * Creates an instance of ActiveDirectoryInfoPatchProperties class.
     */
    public ActiveDirectoryInfoPatchProperties() {
    }

    /**
     * Get the domainCredentials property: Credentials needed to create the virtual machine.
     * 
     * @return the domainCredentials value.
     */
    public KeyVaultCredentialsPatchProperties domainCredentials() {
        return this.domainCredentials;
    }

    /**
     * Set the domainCredentials property: Credentials needed to create the virtual machine.
     * 
     * @param domainCredentials the domainCredentials value to set.
     * @return the ActiveDirectoryInfoPatchProperties object itself.
     */
    public ActiveDirectoryInfoPatchProperties
        withDomainCredentials(KeyVaultCredentialsPatchProperties domainCredentials) {
        this.domainCredentials = domainCredentials;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (domainCredentials() != null) {
            domainCredentials().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("domainCredentials", this.domainCredentials);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ActiveDirectoryInfoPatchProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ActiveDirectoryInfoPatchProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ActiveDirectoryInfoPatchProperties.
     */
    public static ActiveDirectoryInfoPatchProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ActiveDirectoryInfoPatchProperties deserializedActiveDirectoryInfoPatchProperties
                = new ActiveDirectoryInfoPatchProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("domainCredentials".equals(fieldName)) {
                    deserializedActiveDirectoryInfoPatchProperties.domainCredentials
                        = KeyVaultCredentialsPatchProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedActiveDirectoryInfoPatchProperties;
        });
    }
}
