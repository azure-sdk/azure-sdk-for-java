// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.desktopvirtualization.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Credentials kept in the keyvault.
 */
@Fluent
public final class KeyVaultCredentialsProperties implements JsonSerializable<KeyVaultCredentialsProperties> {
    /*
     * The uri to access the secret that the username is stored in.
     */
    private String usernameKeyVaultSecretUri;

    /*
     * The uri to access the secret that the password is stored in.
     */
    private String passwordKeyVaultSecretUri;

    /**
     * Creates an instance of KeyVaultCredentialsProperties class.
     */
    public KeyVaultCredentialsProperties() {
    }

    /**
     * Get the usernameKeyVaultSecretUri property: The uri to access the secret that the username is stored in.
     * 
     * @return the usernameKeyVaultSecretUri value.
     */
    public String usernameKeyVaultSecretUri() {
        return this.usernameKeyVaultSecretUri;
    }

    /**
     * Set the usernameKeyVaultSecretUri property: The uri to access the secret that the username is stored in.
     * 
     * @param usernameKeyVaultSecretUri the usernameKeyVaultSecretUri value to set.
     * @return the KeyVaultCredentialsProperties object itself.
     */
    public KeyVaultCredentialsProperties withUsernameKeyVaultSecretUri(String usernameKeyVaultSecretUri) {
        this.usernameKeyVaultSecretUri = usernameKeyVaultSecretUri;
        return this;
    }

    /**
     * Get the passwordKeyVaultSecretUri property: The uri to access the secret that the password is stored in.
     * 
     * @return the passwordKeyVaultSecretUri value.
     */
    public String passwordKeyVaultSecretUri() {
        return this.passwordKeyVaultSecretUri;
    }

    /**
     * Set the passwordKeyVaultSecretUri property: The uri to access the secret that the password is stored in.
     * 
     * @param passwordKeyVaultSecretUri the passwordKeyVaultSecretUri value to set.
     * @return the KeyVaultCredentialsProperties object itself.
     */
    public KeyVaultCredentialsProperties withPasswordKeyVaultSecretUri(String passwordKeyVaultSecretUri) {
        this.passwordKeyVaultSecretUri = passwordKeyVaultSecretUri;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (usernameKeyVaultSecretUri() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property usernameKeyVaultSecretUri in model KeyVaultCredentialsProperties"));
        }
        if (passwordKeyVaultSecretUri() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property passwordKeyVaultSecretUri in model KeyVaultCredentialsProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(KeyVaultCredentialsProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("usernameKeyVaultSecretUri", this.usernameKeyVaultSecretUri);
        jsonWriter.writeStringField("passwordKeyVaultSecretUri", this.passwordKeyVaultSecretUri);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of KeyVaultCredentialsProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of KeyVaultCredentialsProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the KeyVaultCredentialsProperties.
     */
    public static KeyVaultCredentialsProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            KeyVaultCredentialsProperties deserializedKeyVaultCredentialsProperties
                = new KeyVaultCredentialsProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("usernameKeyVaultSecretUri".equals(fieldName)) {
                    deserializedKeyVaultCredentialsProperties.usernameKeyVaultSecretUri = reader.getString();
                } else if ("passwordKeyVaultSecretUri".equals(fieldName)) {
                    deserializedKeyVaultCredentialsProperties.passwordKeyVaultSecretUri = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedKeyVaultCredentialsProperties;
        });
    }
}
