// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.desktopvirtualization.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Credentials kept in the keyvault. */
@Fluent
public final class KeyVaultCredentialsProperties {
    /*
     * The uri to access the secret that the username is stored in.
     */
    @JsonProperty(value = "usernameKeyVaultSecretUri", required = true)
    private String usernameKeyVaultSecretUri;

    /*
     * The uri to access the secret that the password is stored in.
     */
    @JsonProperty(value = "passwordKeyVaultSecretUri", required = true)
    private String passwordKeyVaultSecretUri;

    /** Creates an instance of KeyVaultCredentialsProperties class. */
    public KeyVaultCredentialsProperties() {
    }

    /**
     * Get the usernameKeyVaultSecretUri property: The uri to access the secret that the username is stored in.
     *
     * @return the usernameKeyVaultSecretUri value.
     */
    public String usernameKeyVaultSecretUri() {
        return this.usernameKeyVaultSecretUri;
    }

    /**
     * Set the usernameKeyVaultSecretUri property: The uri to access the secret that the username is stored in.
     *
     * @param usernameKeyVaultSecretUri the usernameKeyVaultSecretUri value to set.
     * @return the KeyVaultCredentialsProperties object itself.
     */
    public KeyVaultCredentialsProperties withUsernameKeyVaultSecretUri(String usernameKeyVaultSecretUri) {
        this.usernameKeyVaultSecretUri = usernameKeyVaultSecretUri;
        return this;
    }

    /**
     * Get the passwordKeyVaultSecretUri property: The uri to access the secret that the password is stored in.
     *
     * @return the passwordKeyVaultSecretUri value.
     */
    public String passwordKeyVaultSecretUri() {
        return this.passwordKeyVaultSecretUri;
    }

    /**
     * Set the passwordKeyVaultSecretUri property: The uri to access the secret that the password is stored in.
     *
     * @param passwordKeyVaultSecretUri the passwordKeyVaultSecretUri value to set.
     * @return the KeyVaultCredentialsProperties object itself.
     */
    public KeyVaultCredentialsProperties withPasswordKeyVaultSecretUri(String passwordKeyVaultSecretUri) {
        this.passwordKeyVaultSecretUri = passwordKeyVaultSecretUri;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (usernameKeyVaultSecretUri() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property usernameKeyVaultSecretUri in model KeyVaultCredentialsProperties"));
        }
        if (passwordKeyVaultSecretUri() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property passwordKeyVaultSecretUri in model KeyVaultCredentialsProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(KeyVaultCredentialsProperties.class);
}
