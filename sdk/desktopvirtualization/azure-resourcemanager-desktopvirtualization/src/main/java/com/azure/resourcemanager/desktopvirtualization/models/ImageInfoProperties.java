// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.desktopvirtualization.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Image configurations of session host in a HostPool.
 */
@Fluent
public final class ImageInfoProperties implements JsonSerializable<ImageInfoProperties> {
    /*
     * The type of image session hosts use in the hostpool.
     */
    private Type imageType;

    /*
     * The values to uniquely identify a marketplace image. Only one should be populated based on the image type.
     */
    private MarketplaceInfoProperties marketplaceInfo;

    /*
     * The values to uniquely identify a custom image. Only one should be populated based on the image type.
     */
    private CustomInfoProperties customInfo;

    /**
     * Creates an instance of ImageInfoProperties class.
     */
    public ImageInfoProperties() {
    }

    /**
     * Get the imageType property: The type of image session hosts use in the hostpool.
     * 
     * @return the imageType value.
     */
    public Type imageType() {
        return this.imageType;
    }

    /**
     * Set the imageType property: The type of image session hosts use in the hostpool.
     * 
     * @param imageType the imageType value to set.
     * @return the ImageInfoProperties object itself.
     */
    public ImageInfoProperties withImageType(Type imageType) {
        this.imageType = imageType;
        return this;
    }

    /**
     * Get the marketplaceInfo property: The values to uniquely identify a marketplace image. Only one should be
     * populated based on the image type.
     * 
     * @return the marketplaceInfo value.
     */
    public MarketplaceInfoProperties marketplaceInfo() {
        return this.marketplaceInfo;
    }

    /**
     * Set the marketplaceInfo property: The values to uniquely identify a marketplace image. Only one should be
     * populated based on the image type.
     * 
     * @param marketplaceInfo the marketplaceInfo value to set.
     * @return the ImageInfoProperties object itself.
     */
    public ImageInfoProperties withMarketplaceInfo(MarketplaceInfoProperties marketplaceInfo) {
        this.marketplaceInfo = marketplaceInfo;
        return this;
    }

    /**
     * Get the customInfo property: The values to uniquely identify a custom image. Only one should be populated based
     * on the image type.
     * 
     * @return the customInfo value.
     */
    public CustomInfoProperties customInfo() {
        return this.customInfo;
    }

    /**
     * Set the customInfo property: The values to uniquely identify a custom image. Only one should be populated based
     * on the image type.
     * 
     * @param customInfo the customInfo value to set.
     * @return the ImageInfoProperties object itself.
     */
    public ImageInfoProperties withCustomInfo(CustomInfoProperties customInfo) {
        this.customInfo = customInfo;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (imageType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property imageType in model ImageInfoProperties"));
        }
        if (marketplaceInfo() != null) {
            marketplaceInfo().validate();
        }
        if (customInfo() != null) {
            customInfo().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ImageInfoProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.imageType == null ? null : this.imageType.toString());
        jsonWriter.writeJsonField("marketplaceInfo", this.marketplaceInfo);
        jsonWriter.writeJsonField("customInfo", this.customInfo);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ImageInfoProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ImageInfoProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ImageInfoProperties.
     */
    public static ImageInfoProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ImageInfoProperties deserializedImageInfoProperties = new ImageInfoProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedImageInfoProperties.imageType = Type.fromString(reader.getString());
                } else if ("marketplaceInfo".equals(fieldName)) {
                    deserializedImageInfoProperties.marketplaceInfo = MarketplaceInfoProperties.fromJson(reader);
                } else if ("customInfo".equals(fieldName)) {
                    deserializedImageInfoProperties.customInfo = CustomInfoProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedImageInfoProperties;
        });
    }
}
