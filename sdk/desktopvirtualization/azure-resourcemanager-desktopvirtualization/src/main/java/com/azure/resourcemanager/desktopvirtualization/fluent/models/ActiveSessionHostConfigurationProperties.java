// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.desktopvirtualization.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.desktopvirtualization.models.BootDiagnosticsInfoProperties;
import com.azure.resourcemanager.desktopvirtualization.models.DiskInfoProperties;
import com.azure.resourcemanager.desktopvirtualization.models.DomainInfoProperties;
import com.azure.resourcemanager.desktopvirtualization.models.ImageInfoProperties;
import com.azure.resourcemanager.desktopvirtualization.models.KeyVaultCredentialsProperties;
import com.azure.resourcemanager.desktopvirtualization.models.NetworkInfoProperties;
import com.azure.resourcemanager.desktopvirtualization.models.SecurityInfoProperties;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;

/**
 * Represents a ActiveSessionHostConfiguration definition. This has all of the sessionHostConfiguration properties
 * except provisioningState.
 */
@Fluent
public final class ActiveSessionHostConfigurationProperties
    implements JsonSerializable<ActiveSessionHostConfigurationProperties> {
    /*
     * The timestamp of the last update.
     */
    private OffsetDateTime version;

    /*
     * Friendly name to describe this version of the SessionHostConfiguration
     */
    private String friendlyName;

    /*
     * Hashtable that lists key/value pair tags to apply to the VMs
     */
    private Map<String, String> vmTags;

    /*
     * The Location for the session host to be created in. It will default to the location of the hostpool if not
     * provided.
     */
    private String vmLocation;

    /*
     * The ResourceGroup for the session hosts to be created in. It will default to the ResourceGroup of the hostpool if
     * not provided.
     */
    private String vmResourceGroup;

    /*
     * The prefix that should be associated with session host names
     */
    private String vmNamePrefix;

    /*
     * Value for availability zones to be used by the session host. Should be from [1,2,3].
     */
    private List<Integer> availabilityZones;

    /*
     * Network information.
     */
    private NetworkInfoProperties networkInfo;

    /*
     * The id of the size of a virtual machine connected to a hostpool. Example: Standard_D2as_v6
     */
    private String vmSizeId;

    /*
     * Disk information.
     */
    private DiskInfoProperties diskInfo;

    /*
     * The uri to the storage blob containing the arm template to be run on the virtual machine after provisioning.
     */
    private String customConfigurationScriptUrl;

    /*
     * Image configurations of the HostPool.
     */
    private ImageInfoProperties imageInfo;

    /*
     * Domain configurations of session hosts.
     */
    private DomainInfoProperties domainInfo;

    /*
     * Security information.
     */
    private SecurityInfoProperties securityInfo;

    /*
     * Local Admin credentials for session hosts.
     */
    private KeyVaultCredentialsProperties vmAdminCredentials;

    /*
     * Boot Diagnostics information.
     */
    private BootDiagnosticsInfoProperties bootDiagnosticsInfo;

    /**
     * Creates an instance of ActiveSessionHostConfigurationProperties class.
     */
    public ActiveSessionHostConfigurationProperties() {
    }

    /**
     * Get the version property: The timestamp of the last update.
     * 
     * @return the version value.
     */
    public OffsetDateTime version() {
        return this.version;
    }

    /**
     * Get the friendlyName property: Friendly name to describe this version of the SessionHostConfiguration.
     * 
     * @return the friendlyName value.
     */
    public String friendlyName() {
        return this.friendlyName;
    }

    /**
     * Set the friendlyName property: Friendly name to describe this version of the SessionHostConfiguration.
     * 
     * @param friendlyName the friendlyName value to set.
     * @return the ActiveSessionHostConfigurationProperties object itself.
     */
    public ActiveSessionHostConfigurationProperties withFriendlyName(String friendlyName) {
        this.friendlyName = friendlyName;
        return this;
    }

    /**
     * Get the vmTags property: Hashtable that lists key/value pair tags to apply to the VMs.
     * 
     * @return the vmTags value.
     */
    public Map<String, String> vmTags() {
        return this.vmTags;
    }

    /**
     * Set the vmTags property: Hashtable that lists key/value pair tags to apply to the VMs.
     * 
     * @param vmTags the vmTags value to set.
     * @return the ActiveSessionHostConfigurationProperties object itself.
     */
    public ActiveSessionHostConfigurationProperties withVmTags(Map<String, String> vmTags) {
        this.vmTags = vmTags;
        return this;
    }

    /**
     * Get the vmLocation property: The Location for the session host to be created in. It will default to the location
     * of the hostpool if not provided.
     * 
     * @return the vmLocation value.
     */
    public String vmLocation() {
        return this.vmLocation;
    }

    /**
     * Set the vmLocation property: The Location for the session host to be created in. It will default to the location
     * of the hostpool if not provided.
     * 
     * @param vmLocation the vmLocation value to set.
     * @return the ActiveSessionHostConfigurationProperties object itself.
     */
    public ActiveSessionHostConfigurationProperties withVmLocation(String vmLocation) {
        this.vmLocation = vmLocation;
        return this;
    }

    /**
     * Get the vmResourceGroup property: The ResourceGroup for the session hosts to be created in. It will default to
     * the ResourceGroup of the hostpool if not provided.
     * 
     * @return the vmResourceGroup value.
     */
    public String vmResourceGroup() {
        return this.vmResourceGroup;
    }

    /**
     * Set the vmResourceGroup property: The ResourceGroup for the session hosts to be created in. It will default to
     * the ResourceGroup of the hostpool if not provided.
     * 
     * @param vmResourceGroup the vmResourceGroup value to set.
     * @return the ActiveSessionHostConfigurationProperties object itself.
     */
    public ActiveSessionHostConfigurationProperties withVmResourceGroup(String vmResourceGroup) {
        this.vmResourceGroup = vmResourceGroup;
        return this;
    }

    /**
     * Get the vmNamePrefix property: The prefix that should be associated with session host names.
     * 
     * @return the vmNamePrefix value.
     */
    public String vmNamePrefix() {
        return this.vmNamePrefix;
    }

    /**
     * Set the vmNamePrefix property: The prefix that should be associated with session host names.
     * 
     * @param vmNamePrefix the vmNamePrefix value to set.
     * @return the ActiveSessionHostConfigurationProperties object itself.
     */
    public ActiveSessionHostConfigurationProperties withVmNamePrefix(String vmNamePrefix) {
        this.vmNamePrefix = vmNamePrefix;
        return this;
    }

    /**
     * Get the availabilityZones property: Value for availability zones to be used by the session host. Should be from
     * [1,2,3].
     * 
     * @return the availabilityZones value.
     */
    public List<Integer> availabilityZones() {
        return this.availabilityZones;
    }

    /**
     * Set the availabilityZones property: Value for availability zones to be used by the session host. Should be from
     * [1,2,3].
     * 
     * @param availabilityZones the availabilityZones value to set.
     * @return the ActiveSessionHostConfigurationProperties object itself.
     */
    public ActiveSessionHostConfigurationProperties withAvailabilityZones(List<Integer> availabilityZones) {
        this.availabilityZones = availabilityZones;
        return this;
    }

    /**
     * Get the networkInfo property: Network information.
     * 
     * @return the networkInfo value.
     */
    public NetworkInfoProperties networkInfo() {
        return this.networkInfo;
    }

    /**
     * Set the networkInfo property: Network information.
     * 
     * @param networkInfo the networkInfo value to set.
     * @return the ActiveSessionHostConfigurationProperties object itself.
     */
    public ActiveSessionHostConfigurationProperties withNetworkInfo(NetworkInfoProperties networkInfo) {
        this.networkInfo = networkInfo;
        return this;
    }

    /**
     * Get the vmSizeId property: The id of the size of a virtual machine connected to a hostpool. Example:
     * Standard_D2as_v6.
     * 
     * @return the vmSizeId value.
     */
    public String vmSizeId() {
        return this.vmSizeId;
    }

    /**
     * Set the vmSizeId property: The id of the size of a virtual machine connected to a hostpool. Example:
     * Standard_D2as_v6.
     * 
     * @param vmSizeId the vmSizeId value to set.
     * @return the ActiveSessionHostConfigurationProperties object itself.
     */
    public ActiveSessionHostConfigurationProperties withVmSizeId(String vmSizeId) {
        this.vmSizeId = vmSizeId;
        return this;
    }

    /**
     * Get the diskInfo property: Disk information.
     * 
     * @return the diskInfo value.
     */
    public DiskInfoProperties diskInfo() {
        return this.diskInfo;
    }

    /**
     * Set the diskInfo property: Disk information.
     * 
     * @param diskInfo the diskInfo value to set.
     * @return the ActiveSessionHostConfigurationProperties object itself.
     */
    public ActiveSessionHostConfigurationProperties withDiskInfo(DiskInfoProperties diskInfo) {
        this.diskInfo = diskInfo;
        return this;
    }

    /**
     * Get the customConfigurationScriptUrl property: The uri to the storage blob containing the arm template to be run
     * on the virtual machine after provisioning.
     * 
     * @return the customConfigurationScriptUrl value.
     */
    public String customConfigurationScriptUrl() {
        return this.customConfigurationScriptUrl;
    }

    /**
     * Set the customConfigurationScriptUrl property: The uri to the storage blob containing the arm template to be run
     * on the virtual machine after provisioning.
     * 
     * @param customConfigurationScriptUrl the customConfigurationScriptUrl value to set.
     * @return the ActiveSessionHostConfigurationProperties object itself.
     */
    public ActiveSessionHostConfigurationProperties
        withCustomConfigurationScriptUrl(String customConfigurationScriptUrl) {
        this.customConfigurationScriptUrl = customConfigurationScriptUrl;
        return this;
    }

    /**
     * Get the imageInfo property: Image configurations of the HostPool.
     * 
     * @return the imageInfo value.
     */
    public ImageInfoProperties imageInfo() {
        return this.imageInfo;
    }

    /**
     * Set the imageInfo property: Image configurations of the HostPool.
     * 
     * @param imageInfo the imageInfo value to set.
     * @return the ActiveSessionHostConfigurationProperties object itself.
     */
    public ActiveSessionHostConfigurationProperties withImageInfo(ImageInfoProperties imageInfo) {
        this.imageInfo = imageInfo;
        return this;
    }

    /**
     * Get the domainInfo property: Domain configurations of session hosts.
     * 
     * @return the domainInfo value.
     */
    public DomainInfoProperties domainInfo() {
        return this.domainInfo;
    }

    /**
     * Set the domainInfo property: Domain configurations of session hosts.
     * 
     * @param domainInfo the domainInfo value to set.
     * @return the ActiveSessionHostConfigurationProperties object itself.
     */
    public ActiveSessionHostConfigurationProperties withDomainInfo(DomainInfoProperties domainInfo) {
        this.domainInfo = domainInfo;
        return this;
    }

    /**
     * Get the securityInfo property: Security information.
     * 
     * @return the securityInfo value.
     */
    public SecurityInfoProperties securityInfo() {
        return this.securityInfo;
    }

    /**
     * Set the securityInfo property: Security information.
     * 
     * @param securityInfo the securityInfo value to set.
     * @return the ActiveSessionHostConfigurationProperties object itself.
     */
    public ActiveSessionHostConfigurationProperties withSecurityInfo(SecurityInfoProperties securityInfo) {
        this.securityInfo = securityInfo;
        return this;
    }

    /**
     * Get the vmAdminCredentials property: Local Admin credentials for session hosts.
     * 
     * @return the vmAdminCredentials value.
     */
    public KeyVaultCredentialsProperties vmAdminCredentials() {
        return this.vmAdminCredentials;
    }

    /**
     * Set the vmAdminCredentials property: Local Admin credentials for session hosts.
     * 
     * @param vmAdminCredentials the vmAdminCredentials value to set.
     * @return the ActiveSessionHostConfigurationProperties object itself.
     */
    public ActiveSessionHostConfigurationProperties
        withVmAdminCredentials(KeyVaultCredentialsProperties vmAdminCredentials) {
        this.vmAdminCredentials = vmAdminCredentials;
        return this;
    }

    /**
     * Get the bootDiagnosticsInfo property: Boot Diagnostics information.
     * 
     * @return the bootDiagnosticsInfo value.
     */
    public BootDiagnosticsInfoProperties bootDiagnosticsInfo() {
        return this.bootDiagnosticsInfo;
    }

    /**
     * Set the bootDiagnosticsInfo property: Boot Diagnostics information.
     * 
     * @param bootDiagnosticsInfo the bootDiagnosticsInfo value to set.
     * @return the ActiveSessionHostConfigurationProperties object itself.
     */
    public ActiveSessionHostConfigurationProperties
        withBootDiagnosticsInfo(BootDiagnosticsInfoProperties bootDiagnosticsInfo) {
        this.bootDiagnosticsInfo = bootDiagnosticsInfo;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (vmNamePrefix() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property vmNamePrefix in model ActiveSessionHostConfigurationProperties"));
        }
        if (networkInfo() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property networkInfo in model ActiveSessionHostConfigurationProperties"));
        } else {
            networkInfo().validate();
        }
        if (vmSizeId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property vmSizeId in model ActiveSessionHostConfigurationProperties"));
        }
        if (diskInfo() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property diskInfo in model ActiveSessionHostConfigurationProperties"));
        } else {
            diskInfo().validate();
        }
        if (imageInfo() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property imageInfo in model ActiveSessionHostConfigurationProperties"));
        } else {
            imageInfo().validate();
        }
        if (domainInfo() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property domainInfo in model ActiveSessionHostConfigurationProperties"));
        } else {
            domainInfo().validate();
        }
        if (securityInfo() != null) {
            securityInfo().validate();
        }
        if (vmAdminCredentials() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property vmAdminCredentials in model ActiveSessionHostConfigurationProperties"));
        } else {
            vmAdminCredentials().validate();
        }
        if (bootDiagnosticsInfo() != null) {
            bootDiagnosticsInfo().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ActiveSessionHostConfigurationProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("vmNamePrefix", this.vmNamePrefix);
        jsonWriter.writeJsonField("networkInfo", this.networkInfo);
        jsonWriter.writeStringField("vmSizeId", this.vmSizeId);
        jsonWriter.writeJsonField("diskInfo", this.diskInfo);
        jsonWriter.writeJsonField("imageInfo", this.imageInfo);
        jsonWriter.writeJsonField("domainInfo", this.domainInfo);
        jsonWriter.writeJsonField("vmAdminCredentials", this.vmAdminCredentials);
        jsonWriter.writeStringField("friendlyName", this.friendlyName);
        jsonWriter.writeMapField("vmTags", this.vmTags, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("vmLocation", this.vmLocation);
        jsonWriter.writeStringField("vmResourceGroup", this.vmResourceGroup);
        jsonWriter.writeArrayField("availabilityZones", this.availabilityZones,
            (writer, element) -> writer.writeInt(element));
        jsonWriter.writeStringField("customConfigurationScriptUrl", this.customConfigurationScriptUrl);
        jsonWriter.writeJsonField("securityInfo", this.securityInfo);
        jsonWriter.writeJsonField("bootDiagnosticsInfo", this.bootDiagnosticsInfo);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ActiveSessionHostConfigurationProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ActiveSessionHostConfigurationProperties if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ActiveSessionHostConfigurationProperties.
     */
    public static ActiveSessionHostConfigurationProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ActiveSessionHostConfigurationProperties deserializedActiveSessionHostConfigurationProperties
                = new ActiveSessionHostConfigurationProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("vmNamePrefix".equals(fieldName)) {
                    deserializedActiveSessionHostConfigurationProperties.vmNamePrefix = reader.getString();
                } else if ("networkInfo".equals(fieldName)) {
                    deserializedActiveSessionHostConfigurationProperties.networkInfo
                        = NetworkInfoProperties.fromJson(reader);
                } else if ("vmSizeId".equals(fieldName)) {
                    deserializedActiveSessionHostConfigurationProperties.vmSizeId = reader.getString();
                } else if ("diskInfo".equals(fieldName)) {
                    deserializedActiveSessionHostConfigurationProperties.diskInfo = DiskInfoProperties.fromJson(reader);
                } else if ("imageInfo".equals(fieldName)) {
                    deserializedActiveSessionHostConfigurationProperties.imageInfo
                        = ImageInfoProperties.fromJson(reader);
                } else if ("domainInfo".equals(fieldName)) {
                    deserializedActiveSessionHostConfigurationProperties.domainInfo
                        = DomainInfoProperties.fromJson(reader);
                } else if ("vmAdminCredentials".equals(fieldName)) {
                    deserializedActiveSessionHostConfigurationProperties.vmAdminCredentials
                        = KeyVaultCredentialsProperties.fromJson(reader);
                } else if ("version".equals(fieldName)) {
                    deserializedActiveSessionHostConfigurationProperties.version = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("friendlyName".equals(fieldName)) {
                    deserializedActiveSessionHostConfigurationProperties.friendlyName = reader.getString();
                } else if ("vmTags".equals(fieldName)) {
                    Map<String, String> vmTags = reader.readMap(reader1 -> reader1.getString());
                    deserializedActiveSessionHostConfigurationProperties.vmTags = vmTags;
                } else if ("vmLocation".equals(fieldName)) {
                    deserializedActiveSessionHostConfigurationProperties.vmLocation = reader.getString();
                } else if ("vmResourceGroup".equals(fieldName)) {
                    deserializedActiveSessionHostConfigurationProperties.vmResourceGroup = reader.getString();
                } else if ("availabilityZones".equals(fieldName)) {
                    List<Integer> availabilityZones = reader.readArray(reader1 -> reader1.getInt());
                    deserializedActiveSessionHostConfigurationProperties.availabilityZones = availabilityZones;
                } else if ("customConfigurationScriptUrl".equals(fieldName)) {
                    deserializedActiveSessionHostConfigurationProperties.customConfigurationScriptUrl
                        = reader.getString();
                } else if ("securityInfo".equals(fieldName)) {
                    deserializedActiveSessionHostConfigurationProperties.securityInfo
                        = SecurityInfoProperties.fromJson(reader);
                } else if ("bootDiagnosticsInfo".equals(fieldName)) {
                    deserializedActiveSessionHostConfigurationProperties.bootDiagnosticsInfo
                        = BootDiagnosticsInfoProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedActiveSessionHostConfigurationProperties;
        });
    }
}
