// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.desktopvirtualization.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.desktopvirtualization.fluent.InitiateSessionHostUpdatesClient;
import com.azure.resourcemanager.desktopvirtualization.models.UpdateSessionHostsRequestBody;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in InitiateSessionHostUpdatesClient. */
public final class InitiateSessionHostUpdatesClientImpl implements InitiateSessionHostUpdatesClient {
    /** The proxy service used to perform REST calls. */
    private final InitiateSessionHostUpdatesService service;

    /** The service client containing this operation class. */
    private final DesktopVirtualizationApiClientImpl client;

    /**
     * Initializes an instance of InitiateSessionHostUpdatesClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    InitiateSessionHostUpdatesClientImpl(DesktopVirtualizationApiClientImpl client) {
        this.service =
            RestProxy
                .create(
                    InitiateSessionHostUpdatesService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for DesktopVirtualizationApiClientInitiateSessionHostUpdates to be used
     * by the proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "DesktopVirtualizatio")
    public interface InitiateSessionHostUpdatesService {
        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/hostPools/{hostPoolName}/sessionHostManagements/default/initiateSessionHostUpdate")
        @ExpectedResponses({202, 204})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> post(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("hostPoolName") String hostPoolName,
            @BodyParam("application/json") UpdateSessionHostsRequestBody updateSessionHostsRequestBody,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Initiates a hostpool update or schedule an update for the future.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group.
     * @param updateSessionHostsRequestBody Object containing the definition for properties to be used in the
     *     sessionHostUpdate validation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Flux<ByteBuffer>>> postWithResponseAsync(
        String resourceGroupName, String hostPoolName, UpdateSessionHostsRequestBody updateSessionHostsRequestBody) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (hostPoolName == null) {
            return Mono.error(new IllegalArgumentException("Parameter hostPoolName is required and cannot be null."));
        }
        if (updateSessionHostsRequestBody != null) {
            updateSessionHostsRequestBody.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .post(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            hostPoolName,
                            updateSessionHostsRequestBody,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Initiates a hostpool update or schedule an update for the future.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group.
     * @param updateSessionHostsRequestBody Object containing the definition for properties to be used in the
     *     sessionHostUpdate validation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> postWithResponseAsync(
        String resourceGroupName,
        String hostPoolName,
        UpdateSessionHostsRequestBody updateSessionHostsRequestBody,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (hostPoolName == null) {
            return Mono.error(new IllegalArgumentException("Parameter hostPoolName is required and cannot be null."));
        }
        if (updateSessionHostsRequestBody != null) {
            updateSessionHostsRequestBody.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .post(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                hostPoolName,
                updateSessionHostsRequestBody,
                accept,
                context);
    }

    /**
     * Initiates a hostpool update or schedule an update for the future.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group.
     * @param updateSessionHostsRequestBody Object containing the definition for properties to be used in the
     *     sessionHostUpdate validation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<PollResult<Void>, Void> beginPostAsync(
        String resourceGroupName, String hostPoolName, UpdateSessionHostsRequestBody updateSessionHostsRequestBody) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            postWithResponseAsync(resourceGroupName, hostPoolName, updateSessionHostsRequestBody);
        return this
            .client
            .<Void, Void>getLroResult(
                mono, this.client.getHttpPipeline(), Void.class, Void.class, this.client.getContext());
    }

    /**
     * Initiates a hostpool update or schedule an update for the future.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<PollResult<Void>, Void> beginPostAsync(String resourceGroupName, String hostPoolName) {
        final UpdateSessionHostsRequestBody updateSessionHostsRequestBody = null;
        Mono<Response<Flux<ByteBuffer>>> mono =
            postWithResponseAsync(resourceGroupName, hostPoolName, updateSessionHostsRequestBody);
        return this
            .client
            .<Void, Void>getLroResult(
                mono, this.client.getHttpPipeline(), Void.class, Void.class, this.client.getContext());
    }

    /**
     * Initiates a hostpool update or schedule an update for the future.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group.
     * @param updateSessionHostsRequestBody Object containing the definition for properties to be used in the
     *     sessionHostUpdate validation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginPostAsync(
        String resourceGroupName,
        String hostPoolName,
        UpdateSessionHostsRequestBody updateSessionHostsRequestBody,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            postWithResponseAsync(resourceGroupName, hostPoolName, updateSessionHostsRequestBody, context);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, context);
    }

    /**
     * Initiates a hostpool update or schedule an update for the future.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginPost(String resourceGroupName, String hostPoolName) {
        final UpdateSessionHostsRequestBody updateSessionHostsRequestBody = null;
        return this.beginPostAsync(resourceGroupName, hostPoolName, updateSessionHostsRequestBody).getSyncPoller();
    }

    /**
     * Initiates a hostpool update or schedule an update for the future.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group.
     * @param updateSessionHostsRequestBody Object containing the definition for properties to be used in the
     *     sessionHostUpdate validation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginPost(
        String resourceGroupName,
        String hostPoolName,
        UpdateSessionHostsRequestBody updateSessionHostsRequestBody,
        Context context) {
        return this
            .beginPostAsync(resourceGroupName, hostPoolName, updateSessionHostsRequestBody, context)
            .getSyncPoller();
    }

    /**
     * Initiates a hostpool update or schedule an update for the future.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group.
     * @param updateSessionHostsRequestBody Object containing the definition for properties to be used in the
     *     sessionHostUpdate validation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> postAsync(
        String resourceGroupName, String hostPoolName, UpdateSessionHostsRequestBody updateSessionHostsRequestBody) {
        return beginPostAsync(resourceGroupName, hostPoolName, updateSessionHostsRequestBody)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Initiates a hostpool update or schedule an update for the future.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> postAsync(String resourceGroupName, String hostPoolName) {
        final UpdateSessionHostsRequestBody updateSessionHostsRequestBody = null;
        return beginPostAsync(resourceGroupName, hostPoolName, updateSessionHostsRequestBody)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Initiates a hostpool update or schedule an update for the future.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group.
     * @param updateSessionHostsRequestBody Object containing the definition for properties to be used in the
     *     sessionHostUpdate validation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> postAsync(
        String resourceGroupName,
        String hostPoolName,
        UpdateSessionHostsRequestBody updateSessionHostsRequestBody,
        Context context) {
        return beginPostAsync(resourceGroupName, hostPoolName, updateSessionHostsRequestBody, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Initiates a hostpool update or schedule an update for the future.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void post(String resourceGroupName, String hostPoolName) {
        final UpdateSessionHostsRequestBody updateSessionHostsRequestBody = null;
        postAsync(resourceGroupName, hostPoolName, updateSessionHostsRequestBody).block();
    }

    /**
     * Initiates a hostpool update or schedule an update for the future.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group.
     * @param updateSessionHostsRequestBody Object containing the definition for properties to be used in the
     *     sessionHostUpdate validation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void post(
        String resourceGroupName,
        String hostPoolName,
        UpdateSessionHostsRequestBody updateSessionHostsRequestBody,
        Context context) {
        postAsync(resourceGroupName, hostPoolName, updateSessionHostsRequestBody, context).block();
    }
}
