// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.desktopvirtualization.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The configuration for session host provisioning operations.
 */
@Fluent
public final class SessionHostProvisioningConfigurationPatchProperties
    implements JsonSerializable<SessionHostProvisioningConfigurationPatchProperties> {
    /*
     * Whether the session host should be set in drain mode following provisioning.
     */
    private Boolean setDrainMode;

    /*
     * the number of session hosts to exist in the Host Pool.
     */
    private Integer instanceCount;

    /*
     * Policy on whether a Canary VM should be provisioned during a session host provisioning operation.
     */
    private CanaryPolicy canaryPolicy;

    /**
     * Creates an instance of SessionHostProvisioningConfigurationPatchProperties class.
     */
    public SessionHostProvisioningConfigurationPatchProperties() {
    }

    /**
     * Get the setDrainMode property: Whether the session host should be set in drain mode following provisioning.
     * 
     * @return the setDrainMode value.
     */
    public Boolean setDrainMode() {
        return this.setDrainMode;
    }

    /**
     * Set the setDrainMode property: Whether the session host should be set in drain mode following provisioning.
     * 
     * @param setDrainMode the setDrainMode value to set.
     * @return the SessionHostProvisioningConfigurationPatchProperties object itself.
     */
    public SessionHostProvisioningConfigurationPatchProperties withSetDrainMode(Boolean setDrainMode) {
        this.setDrainMode = setDrainMode;
        return this;
    }

    /**
     * Get the instanceCount property: the number of session hosts to exist in the Host Pool.
     * 
     * @return the instanceCount value.
     */
    public Integer instanceCount() {
        return this.instanceCount;
    }

    /**
     * Set the instanceCount property: the number of session hosts to exist in the Host Pool.
     * 
     * @param instanceCount the instanceCount value to set.
     * @return the SessionHostProvisioningConfigurationPatchProperties object itself.
     */
    public SessionHostProvisioningConfigurationPatchProperties withInstanceCount(Integer instanceCount) {
        this.instanceCount = instanceCount;
        return this;
    }

    /**
     * Get the canaryPolicy property: Policy on whether a Canary VM should be provisioned during a session host
     * provisioning operation.
     * 
     * @return the canaryPolicy value.
     */
    public CanaryPolicy canaryPolicy() {
        return this.canaryPolicy;
    }

    /**
     * Set the canaryPolicy property: Policy on whether a Canary VM should be provisioned during a session host
     * provisioning operation.
     * 
     * @param canaryPolicy the canaryPolicy value to set.
     * @return the SessionHostProvisioningConfigurationPatchProperties object itself.
     */
    public SessionHostProvisioningConfigurationPatchProperties withCanaryPolicy(CanaryPolicy canaryPolicy) {
        this.canaryPolicy = canaryPolicy;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("setDrainMode", this.setDrainMode);
        jsonWriter.writeNumberField("instanceCount", this.instanceCount);
        jsonWriter.writeStringField("canaryPolicy", this.canaryPolicy == null ? null : this.canaryPolicy.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SessionHostProvisioningConfigurationPatchProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SessionHostProvisioningConfigurationPatchProperties if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SessionHostProvisioningConfigurationPatchProperties.
     */
    public static SessionHostProvisioningConfigurationPatchProperties fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            SessionHostProvisioningConfigurationPatchProperties deserializedSessionHostProvisioningConfigurationPatchProperties
                = new SessionHostProvisioningConfigurationPatchProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("setDrainMode".equals(fieldName)) {
                    deserializedSessionHostProvisioningConfigurationPatchProperties.setDrainMode
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("instanceCount".equals(fieldName)) {
                    deserializedSessionHostProvisioningConfigurationPatchProperties.instanceCount
                        = reader.getNullable(JsonReader::getInt);
                } else if ("canaryPolicy".equals(fieldName)) {
                    deserializedSessionHostProvisioningConfigurationPatchProperties.canaryPolicy
                        = CanaryPolicy.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSessionHostProvisioningConfigurationPatchProperties;
        });
    }
}
