// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.desktopvirtualization.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Represents properties for a hostpool update control request.
 */
@Fluent
public final class HostPoolUpdateControlParameter implements JsonSerializable<HostPoolUpdateControlParameter> {
    /*
     * Action types for controlling hostpool update.
     */
    private HostPoolUpdateAction action;

    /*
     * The cancel message sent to the user on the session host. This is can only be specified if the action is 'Cancel'.
     */
    private String cancelMessage;

    /**
     * Creates an instance of HostPoolUpdateControlParameter class.
     */
    public HostPoolUpdateControlParameter() {
    }

    /**
     * Get the action property: Action types for controlling hostpool update.
     * 
     * @return the action value.
     */
    public HostPoolUpdateAction action() {
        return this.action;
    }

    /**
     * Set the action property: Action types for controlling hostpool update.
     * 
     * @param action the action value to set.
     * @return the HostPoolUpdateControlParameter object itself.
     */
    public HostPoolUpdateControlParameter withAction(HostPoolUpdateAction action) {
        this.action = action;
        return this;
    }

    /**
     * Get the cancelMessage property: The cancel message sent to the user on the session host. This is can only be
     * specified if the action is 'Cancel'.
     * 
     * @return the cancelMessage value.
     */
    public String cancelMessage() {
        return this.cancelMessage;
    }

    /**
     * Set the cancelMessage property: The cancel message sent to the user on the session host. This is can only be
     * specified if the action is 'Cancel'.
     * 
     * @param cancelMessage the cancelMessage value to set.
     * @return the HostPoolUpdateControlParameter object itself.
     */
    public HostPoolUpdateControlParameter withCancelMessage(String cancelMessage) {
        this.cancelMessage = cancelMessage;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (action() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property action in model HostPoolUpdateControlParameter"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(HostPoolUpdateControlParameter.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("action", this.action == null ? null : this.action.toString());
        jsonWriter.writeStringField("cancelMessage", this.cancelMessage);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of HostPoolUpdateControlParameter from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of HostPoolUpdateControlParameter if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the HostPoolUpdateControlParameter.
     */
    public static HostPoolUpdateControlParameter fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            HostPoolUpdateControlParameter deserializedHostPoolUpdateControlParameter
                = new HostPoolUpdateControlParameter();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("action".equals(fieldName)) {
                    deserializedHostPoolUpdateControlParameter.action
                        = HostPoolUpdateAction.fromString(reader.getString());
                } else if ("cancelMessage".equals(fieldName)) {
                    deserializedHostPoolUpdateControlParameter.cancelMessage = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedHostPoolUpdateControlParameter;
        });
    }
}
