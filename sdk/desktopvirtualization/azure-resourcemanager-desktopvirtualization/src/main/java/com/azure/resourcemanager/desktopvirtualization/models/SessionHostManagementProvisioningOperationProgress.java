// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.desktopvirtualization.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * SessionHostManagement Provisioning Operation Progress information.
 */
@Fluent
public final class SessionHostManagementProvisioningOperationProgress
    implements JsonSerializable<SessionHostManagementProvisioningOperationProgress> {
    /*
     * Time that the sessionHostManagement operation was created.
     */
    private OffsetDateTime executionStartTime;

    /*
     * The number of sessionHosts in progress in the sessionHostManagement provisioning operation.
     */
    private Integer sessionHostsInProgress;

    /*
     * The number of sessionHosts completed in the sessionHostManagement provisioning operation.
     */
    private Integer sessionHostsCompleted;

    /*
     * The final instance count of the host pool for this provisioning operation.
     */
    private Integer finalSessionHostsCount;

    /*
     * The initial instance count of the host pool for this provisioning operation.
     */
    private Integer initialSessionHostsCount;

    /**
     * Creates an instance of SessionHostManagementProvisioningOperationProgress class.
     */
    public SessionHostManagementProvisioningOperationProgress() {
    }

    /**
     * Get the executionStartTime property: Time that the sessionHostManagement operation was created.
     * 
     * @return the executionStartTime value.
     */
    public OffsetDateTime executionStartTime() {
        return this.executionStartTime;
    }

    /**
     * Set the executionStartTime property: Time that the sessionHostManagement operation was created.
     * 
     * @param executionStartTime the executionStartTime value to set.
     * @return the SessionHostManagementProvisioningOperationProgress object itself.
     */
    public SessionHostManagementProvisioningOperationProgress
        withExecutionStartTime(OffsetDateTime executionStartTime) {
        this.executionStartTime = executionStartTime;
        return this;
    }

    /**
     * Get the sessionHostsInProgress property: The number of sessionHosts in progress in the sessionHostManagement
     * provisioning operation.
     * 
     * @return the sessionHostsInProgress value.
     */
    public Integer sessionHostsInProgress() {
        return this.sessionHostsInProgress;
    }

    /**
     * Set the sessionHostsInProgress property: The number of sessionHosts in progress in the sessionHostManagement
     * provisioning operation.
     * 
     * @param sessionHostsInProgress the sessionHostsInProgress value to set.
     * @return the SessionHostManagementProvisioningOperationProgress object itself.
     */
    public SessionHostManagementProvisioningOperationProgress
        withSessionHostsInProgress(Integer sessionHostsInProgress) {
        this.sessionHostsInProgress = sessionHostsInProgress;
        return this;
    }

    /**
     * Get the sessionHostsCompleted property: The number of sessionHosts completed in the sessionHostManagement
     * provisioning operation.
     * 
     * @return the sessionHostsCompleted value.
     */
    public Integer sessionHostsCompleted() {
        return this.sessionHostsCompleted;
    }

    /**
     * Set the sessionHostsCompleted property: The number of sessionHosts completed in the sessionHostManagement
     * provisioning operation.
     * 
     * @param sessionHostsCompleted the sessionHostsCompleted value to set.
     * @return the SessionHostManagementProvisioningOperationProgress object itself.
     */
    public SessionHostManagementProvisioningOperationProgress withSessionHostsCompleted(Integer sessionHostsCompleted) {
        this.sessionHostsCompleted = sessionHostsCompleted;
        return this;
    }

    /**
     * Get the finalSessionHostsCount property: The final instance count of the host pool for this provisioning
     * operation.
     * 
     * @return the finalSessionHostsCount value.
     */
    public Integer finalSessionHostsCount() {
        return this.finalSessionHostsCount;
    }

    /**
     * Set the finalSessionHostsCount property: The final instance count of the host pool for this provisioning
     * operation.
     * 
     * @param finalSessionHostsCount the finalSessionHostsCount value to set.
     * @return the SessionHostManagementProvisioningOperationProgress object itself.
     */
    public SessionHostManagementProvisioningOperationProgress
        withFinalSessionHostsCount(Integer finalSessionHostsCount) {
        this.finalSessionHostsCount = finalSessionHostsCount;
        return this;
    }

    /**
     * Get the initialSessionHostsCount property: The initial instance count of the host pool for this provisioning
     * operation.
     * 
     * @return the initialSessionHostsCount value.
     */
    public Integer initialSessionHostsCount() {
        return this.initialSessionHostsCount;
    }

    /**
     * Set the initialSessionHostsCount property: The initial instance count of the host pool for this provisioning
     * operation.
     * 
     * @param initialSessionHostsCount the initialSessionHostsCount value to set.
     * @return the SessionHostManagementProvisioningOperationProgress object itself.
     */
    public SessionHostManagementProvisioningOperationProgress
        withInitialSessionHostsCount(Integer initialSessionHostsCount) {
        this.initialSessionHostsCount = initialSessionHostsCount;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("executionStartTime",
            this.executionStartTime == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.executionStartTime));
        jsonWriter.writeNumberField("sessionHostsInProgress", this.sessionHostsInProgress);
        jsonWriter.writeNumberField("sessionHostsCompleted", this.sessionHostsCompleted);
        jsonWriter.writeNumberField("finalSessionHostsCount", this.finalSessionHostsCount);
        jsonWriter.writeNumberField("initialSessionHostsCount", this.initialSessionHostsCount);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SessionHostManagementProvisioningOperationProgress from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SessionHostManagementProvisioningOperationProgress if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SessionHostManagementProvisioningOperationProgress.
     */
    public static SessionHostManagementProvisioningOperationProgress fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            SessionHostManagementProvisioningOperationProgress deserializedSessionHostManagementProvisioningOperationProgress
                = new SessionHostManagementProvisioningOperationProgress();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("executionStartTime".equals(fieldName)) {
                    deserializedSessionHostManagementProvisioningOperationProgress.executionStartTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("sessionHostsInProgress".equals(fieldName)) {
                    deserializedSessionHostManagementProvisioningOperationProgress.sessionHostsInProgress
                        = reader.getNullable(JsonReader::getInt);
                } else if ("sessionHostsCompleted".equals(fieldName)) {
                    deserializedSessionHostManagementProvisioningOperationProgress.sessionHostsCompleted
                        = reader.getNullable(JsonReader::getInt);
                } else if ("finalSessionHostsCount".equals(fieldName)) {
                    deserializedSessionHostManagementProvisioningOperationProgress.finalSessionHostsCount
                        = reader.getNullable(JsonReader::getInt);
                } else if ("initialSessionHostsCount".equals(fieldName)) {
                    deserializedSessionHostManagementProvisioningOperationProgress.initialSessionHostsCount
                        = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSessionHostManagementProvisioningOperationProgress;
        });
    }
}
