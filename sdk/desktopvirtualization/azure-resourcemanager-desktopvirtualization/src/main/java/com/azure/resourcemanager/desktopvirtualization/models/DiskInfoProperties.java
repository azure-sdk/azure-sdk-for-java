// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.desktopvirtualization.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Disk information.
 */
@Fluent
public final class DiskInfoProperties implements JsonSerializable<DiskInfoProperties> {
    /*
     * The disk type used by virtual machine in hostpool session host.
     */
    private VirtualMachineDiskType type;

    /**
     * Creates an instance of DiskInfoProperties class.
     */
    public DiskInfoProperties() {
    }

    /**
     * Get the type property: The disk type used by virtual machine in hostpool session host.
     * 
     * @return the type value.
     */
    public VirtualMachineDiskType type() {
        return this.type;
    }

    /**
     * Set the type property: The disk type used by virtual machine in hostpool session host.
     * 
     * @param type the type value to set.
     * @return the DiskInfoProperties object itself.
     */
    public DiskInfoProperties withType(VirtualMachineDiskType type) {
        this.type = type;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (type() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property type in model DiskInfoProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DiskInfoProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DiskInfoProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DiskInfoProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DiskInfoProperties.
     */
    public static DiskInfoProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DiskInfoProperties deserializedDiskInfoProperties = new DiskInfoProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedDiskInfoProperties.type = VirtualMachineDiskType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDiskInfoProperties;
        });
    }
}
