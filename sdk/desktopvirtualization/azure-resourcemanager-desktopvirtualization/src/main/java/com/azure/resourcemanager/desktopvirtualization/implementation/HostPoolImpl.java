// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.desktopvirtualization.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.desktopvirtualization.fluent.models.HostPoolInner;
import com.azure.resourcemanager.desktopvirtualization.fluent.models.HostPoolPropertiesInner;
import com.azure.resourcemanager.desktopvirtualization.models.AppAttachPackage;
import com.azure.resourcemanager.desktopvirtualization.models.ExpandMsixImage;
import com.azure.resourcemanager.desktopvirtualization.models.HostPool;
import com.azure.resourcemanager.desktopvirtualization.models.HostPoolPatch;
import com.azure.resourcemanager.desktopvirtualization.models.HostPoolPatchProperties;
import com.azure.resourcemanager.desktopvirtualization.models.HostPoolProperties;
import com.azure.resourcemanager.desktopvirtualization.models.ImportPackageInfoRequest;
import com.azure.resourcemanager.desktopvirtualization.models.MsixImageUri;
import com.azure.resourcemanager.desktopvirtualization.models.RegistrationInfo;
import com.azure.resourcemanager.desktopvirtualization.models.RegistrationTokenList;
import java.util.Collections;
import java.util.Map;

public final class HostPoolImpl implements HostPool, HostPool.Definition, HostPool.Update {
    private HostPoolInner innerObject;

    private final com.azure.resourcemanager.desktopvirtualization.DesktopVirtualizationManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public HostPoolProperties properties() {
        HostPoolPropertiesInner inner = this.innerModel().properties();
        if (inner != null) {
            return new HostPoolPropertiesImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public HostPoolInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.desktopvirtualization.DesktopVirtualizationManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String hostPoolName;

    private HostPoolPatch updateProperties;

    public HostPoolImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public HostPool create() {
        this.innerObject = serviceManager.serviceClient()
            .getHostPools()
            .createOrUpdateWithResponse(resourceGroupName, hostPoolName, this.innerModel(), Context.NONE)
            .getValue();
        return this;
    }

    public HostPool create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getHostPools()
            .createOrUpdateWithResponse(resourceGroupName, hostPoolName, this.innerModel(), context)
            .getValue();
        return this;
    }

    HostPoolImpl(String name,
        com.azure.resourcemanager.desktopvirtualization.DesktopVirtualizationManager serviceManager) {
        this.innerObject = new HostPoolInner();
        this.serviceManager = serviceManager;
        this.hostPoolName = name;
    }

    public HostPoolImpl update() {
        this.updateProperties = new HostPoolPatch();
        return this;
    }

    public HostPool apply() {
        this.innerObject = serviceManager.serviceClient()
            .getHostPools()
            .updateWithResponse(resourceGroupName, hostPoolName, updateProperties, Context.NONE)
            .getValue();
        return this;
    }

    public HostPool apply(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getHostPools()
            .updateWithResponse(resourceGroupName, hostPoolName, updateProperties, context)
            .getValue();
        return this;
    }

    HostPoolImpl(HostPoolInner innerObject,
        com.azure.resourcemanager.desktopvirtualization.DesktopVirtualizationManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.hostPoolName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "hostPools");
    }

    public HostPool refresh() {
        this.innerObject = serviceManager.serviceClient()
            .getHostPools()
            .getByResourceGroupWithResponse(resourceGroupName, hostPoolName, Context.NONE)
            .getValue();
        return this;
    }

    public HostPool refresh(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getHostPools()
            .getByResourceGroupWithResponse(resourceGroupName, hostPoolName, context)
            .getValue();
        return this;
    }

    public PagedIterable<ExpandMsixImage> expand(MsixImageUri body) {
        return serviceManager.hostPools().expand(resourceGroupName, hostPoolName, body);
    }

    public PagedIterable<ExpandMsixImage> expand(MsixImageUri body, Context context) {
        return serviceManager.hostPools().expand(resourceGroupName, hostPoolName, body, context);
    }

    public PagedIterable<AppAttachPackage> importAppAttachPackageInfo(ImportPackageInfoRequest body) {
        return serviceManager.hostPools().importAppAttachPackageInfo(resourceGroupName, hostPoolName, body);
    }

    public PagedIterable<AppAttachPackage> importAppAttachPackageInfo(ImportPackageInfoRequest body, Context context) {
        return serviceManager.hostPools().importAppAttachPackageInfo(resourceGroupName, hostPoolName, body, context);
    }

    public Response<RegistrationTokenList> listRegistrationTokensWithResponse(Context context) {
        return serviceManager.hostPools().listRegistrationTokensWithResponse(resourceGroupName, hostPoolName, context);
    }

    public RegistrationTokenList listRegistrationTokens() {
        return serviceManager.hostPools().listRegistrationTokens(resourceGroupName, hostPoolName);
    }

    public Response<RegistrationInfo> retrieveRegistrationTokenWithResponse(Context context) {
        return serviceManager.hostPools()
            .retrieveRegistrationTokenWithResponse(resourceGroupName, hostPoolName, context);
    }

    public RegistrationInfo retrieveRegistrationToken() {
        return serviceManager.hostPools().retrieveRegistrationToken(resourceGroupName, hostPoolName);
    }

    public HostPoolImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public HostPoolImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public HostPoolImpl withProperties(HostPoolPropertiesInner properties) {
        this.innerModel().withProperties(properties);
        return this;
    }

    public HostPoolImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateProperties.withTags(tags);
            return this;
        }
    }

    public HostPoolImpl withProperties(HostPoolPatchProperties properties) {
        this.updateProperties.withProperties(properties);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
