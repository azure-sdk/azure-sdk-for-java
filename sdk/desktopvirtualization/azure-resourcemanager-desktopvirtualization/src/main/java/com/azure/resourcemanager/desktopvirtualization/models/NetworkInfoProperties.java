// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.desktopvirtualization.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Network information.
 */
@Fluent
public final class NetworkInfoProperties implements JsonSerializable<NetworkInfoProperties> {
    /*
     * The resource ID of the subnet.
     */
    private String subnetId;

    /*
     * The resource ID of the security group. Any allowable/open ports should be specified in the Network Security
     * Group(NSG).
     */
    private String securityGroupId;

    /**
     * Creates an instance of NetworkInfoProperties class.
     */
    public NetworkInfoProperties() {
    }

    /**
     * Get the subnetId property: The resource ID of the subnet.
     * 
     * @return the subnetId value.
     */
    public String subnetId() {
        return this.subnetId;
    }

    /**
     * Set the subnetId property: The resource ID of the subnet.
     * 
     * @param subnetId the subnetId value to set.
     * @return the NetworkInfoProperties object itself.
     */
    public NetworkInfoProperties withSubnetId(String subnetId) {
        this.subnetId = subnetId;
        return this;
    }

    /**
     * Get the securityGroupId property: The resource ID of the security group. Any allowable/open ports should be
     * specified in the Network Security Group(NSG).
     * 
     * @return the securityGroupId value.
     */
    public String securityGroupId() {
        return this.securityGroupId;
    }

    /**
     * Set the securityGroupId property: The resource ID of the security group. Any allowable/open ports should be
     * specified in the Network Security Group(NSG).
     * 
     * @param securityGroupId the securityGroupId value to set.
     * @return the NetworkInfoProperties object itself.
     */
    public NetworkInfoProperties withSecurityGroupId(String securityGroupId) {
        this.securityGroupId = securityGroupId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (subnetId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property subnetId in model NetworkInfoProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(NetworkInfoProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("subnetId", this.subnetId);
        jsonWriter.writeStringField("securityGroupId", this.securityGroupId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NetworkInfoProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NetworkInfoProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the NetworkInfoProperties.
     */
    public static NetworkInfoProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NetworkInfoProperties deserializedNetworkInfoProperties = new NetworkInfoProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("subnetId".equals(fieldName)) {
                    deserializedNetworkInfoProperties.subnetId = reader.getString();
                } else if ("securityGroupId".equals(fieldName)) {
                    deserializedNetworkInfoProperties.securityGroupId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNetworkInfoProperties;
        });
    }
}
