// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.desktopvirtualization.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Network information. */
@Fluent
public final class NetworkInfoProperties {
    /*
     * The resource ID of the subnet.
     */
    @JsonProperty(value = "subnetId", required = true)
    private String subnetId;

    /*
     * The resource ID of the security group. Any allowable/open ports should be specified in the NSG.
     */
    @JsonProperty(value = "securityGroupId")
    private String securityGroupId;

    /** Creates an instance of NetworkInfoProperties class. */
    public NetworkInfoProperties() {
    }

    /**
     * Get the subnetId property: The resource ID of the subnet.
     *
     * @return the subnetId value.
     */
    public String subnetId() {
        return this.subnetId;
    }

    /**
     * Set the subnetId property: The resource ID of the subnet.
     *
     * @param subnetId the subnetId value to set.
     * @return the NetworkInfoProperties object itself.
     */
    public NetworkInfoProperties withSubnetId(String subnetId) {
        this.subnetId = subnetId;
        return this;
    }

    /**
     * Get the securityGroupId property: The resource ID of the security group. Any allowable/open ports should be
     * specified in the NSG.
     *
     * @return the securityGroupId value.
     */
    public String securityGroupId() {
        return this.securityGroupId;
    }

    /**
     * Set the securityGroupId property: The resource ID of the security group. Any allowable/open ports should be
     * specified in the NSG.
     *
     * @param securityGroupId the securityGroupId value to set.
     * @return the NetworkInfoProperties object itself.
     */
    public NetworkInfoProperties withSecurityGroupId(String securityGroupId) {
        this.securityGroupId = securityGroupId;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (subnetId() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property subnetId in model NetworkInfoProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(NetworkInfoProperties.class);
}
