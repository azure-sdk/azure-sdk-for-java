// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.desktopvirtualization.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.core.management.SystemData;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.desktopvirtualization.models.AppAttachPackageInfoProperties;
import com.azure.resourcemanager.desktopvirtualization.models.FailHealthCheckOnStagingFailure;
import com.azure.resourcemanager.desktopvirtualization.models.ProvisioningState;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * Schema for App Attach Package properties.
 */
@Fluent
public final class AppAttachPackageInner extends Resource {
    /*
     * Detailed properties for App Attach Package
     */
    private AppAttachPackageProperties innerProperties = new AppAttachPackageProperties();

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of AppAttachPackageInner class.
     */
    public AppAttachPackageInner() {
    }

    /**
     * Get the innerProperties property: Detailed properties for App Attach Package.
     * 
     * @return the innerProperties value.
     */
    private AppAttachPackageProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AppAttachPackageInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AppAttachPackageInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning state of the App Attach Package.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the image property: Detailed properties for App Attach Package.
     * 
     * @return the image value.
     */
    public AppAttachPackageInfoProperties image() {
        return this.innerProperties() == null ? null : this.innerProperties().image();
    }

    /**
     * Set the image property: Detailed properties for App Attach Package.
     * 
     * @param image the image value to set.
     * @return the AppAttachPackageInner object itself.
     */
    public AppAttachPackageInner withImage(AppAttachPackageInfoProperties image) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AppAttachPackageProperties();
        }
        this.innerProperties().withImage(image);
        return this;
    }

    /**
     * Get the hostPoolReferences property: List of Hostpool resource Ids.
     * 
     * @return the hostPoolReferences value.
     */
    public List<String> hostPoolReferences() {
        return this.innerProperties() == null ? null : this.innerProperties().hostPoolReferences();
    }

    /**
     * Set the hostPoolReferences property: List of Hostpool resource Ids.
     * 
     * @param hostPoolReferences the hostPoolReferences value to set.
     * @return the AppAttachPackageInner object itself.
     */
    public AppAttachPackageInner withHostPoolReferences(List<String> hostPoolReferences) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AppAttachPackageProperties();
        }
        this.innerProperties().withHostPoolReferences(hostPoolReferences);
        return this;
    }

    /**
     * Get the keyVaultUrl property: URL path to certificate name located in keyVault.
     * 
     * @return the keyVaultUrl value.
     */
    public String keyVaultUrl() {
        return this.innerProperties() == null ? null : this.innerProperties().keyVaultUrl();
    }

    /**
     * Set the keyVaultUrl property: URL path to certificate name located in keyVault.
     * 
     * @param keyVaultUrl the keyVaultUrl value to set.
     * @return the AppAttachPackageInner object itself.
     */
    public AppAttachPackageInner withKeyVaultUrl(String keyVaultUrl) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AppAttachPackageProperties();
        }
        this.innerProperties().withKeyVaultUrl(keyVaultUrl);
        return this;
    }

    /**
     * Get the failHealthCheckOnStagingFailure property: Parameter indicating how the health check should behave if this
     * package fails staging.
     * 
     * @return the failHealthCheckOnStagingFailure value.
     */
    public FailHealthCheckOnStagingFailure failHealthCheckOnStagingFailure() {
        return this.innerProperties() == null ? null : this.innerProperties().failHealthCheckOnStagingFailure();
    }

    /**
     * Set the failHealthCheckOnStagingFailure property: Parameter indicating how the health check should behave if this
     * package fails staging.
     * 
     * @param failHealthCheckOnStagingFailure the failHealthCheckOnStagingFailure value to set.
     * @return the AppAttachPackageInner object itself.
     */
    public AppAttachPackageInner
        withFailHealthCheckOnStagingFailure(FailHealthCheckOnStagingFailure failHealthCheckOnStagingFailure) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AppAttachPackageProperties();
        }
        this.innerProperties().withFailHealthCheckOnStagingFailure(failHealthCheckOnStagingFailure);
        return this;
    }

    /**
     * Get the packageOwnerName property: Specific name of package owner, is "AppAttach" for native app attach packages.
     * 
     * @return the packageOwnerName value.
     */
    public String packageOwnerName() {
        return this.innerProperties() == null ? null : this.innerProperties().packageOwnerName();
    }

    /**
     * Set the packageOwnerName property: Specific name of package owner, is "AppAttach" for native app attach packages.
     * 
     * @param packageOwnerName the packageOwnerName value to set.
     * @return the AppAttachPackageInner object itself.
     */
    public AppAttachPackageInner withPackageOwnerName(String packageOwnerName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AppAttachPackageProperties();
        }
        this.innerProperties().withPackageOwnerName(packageOwnerName);
        return this;
    }

    /**
     * Get the packageLookbackUrl property: Lookback url to third party control plane, is null for native app attach
     * packages.
     * 
     * @return the packageLookbackUrl value.
     */
    public String packageLookbackUrl() {
        return this.innerProperties() == null ? null : this.innerProperties().packageLookbackUrl();
    }

    /**
     * Set the packageLookbackUrl property: Lookback url to third party control plane, is null for native app attach
     * packages.
     * 
     * @param packageLookbackUrl the packageLookbackUrl value to set.
     * @return the AppAttachPackageInner object itself.
     */
    public AppAttachPackageInner withPackageLookbackUrl(String packageLookbackUrl) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AppAttachPackageProperties();
        }
        this.innerProperties().withPackageLookbackUrl(packageLookbackUrl);
        return this;
    }

    /**
     * Get the customData property: Field that can be populated with custom data and filtered on in list GET calls.
     * 
     * @return the customData value.
     */
    public String customData() {
        return this.innerProperties() == null ? null : this.innerProperties().customData();
    }

    /**
     * Set the customData property: Field that can be populated with custom data and filtered on in list GET calls.
     * 
     * @param customData the customData value to set.
     * @return the AppAttachPackageInner object itself.
     */
    public AppAttachPackageInner withCustomData(String customData) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AppAttachPackageProperties();
        }
        this.innerProperties().withCustomData(customData);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property innerProperties in model AppAttachPackageInner"));
        } else {
            innerProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(AppAttachPackageInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("location", location());
        jsonWriter.writeMapField("tags", tags(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AppAttachPackageInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AppAttachPackageInner if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AppAttachPackageInner.
     */
    public static AppAttachPackageInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AppAttachPackageInner deserializedAppAttachPackageInner = new AppAttachPackageInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedAppAttachPackageInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedAppAttachPackageInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedAppAttachPackageInner.type = reader.getString();
                } else if ("location".equals(fieldName)) {
                    deserializedAppAttachPackageInner.withLocation(reader.getString());
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedAppAttachPackageInner.withTags(tags);
                } else if ("properties".equals(fieldName)) {
                    deserializedAppAttachPackageInner.innerProperties = AppAttachPackageProperties.fromJson(reader);
                } else if ("systemData".equals(fieldName)) {
                    deserializedAppAttachPackageInner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAppAttachPackageInner;
        });
    }
}
