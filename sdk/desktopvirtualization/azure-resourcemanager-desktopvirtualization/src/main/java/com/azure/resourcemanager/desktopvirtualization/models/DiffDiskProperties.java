// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.desktopvirtualization.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Specifies the ephemeral Disk Settings for the operating system disk used by the virtual machine.
 */
@Fluent
public final class DiffDiskProperties implements JsonSerializable<DiffDiskProperties> {
    /*
     * Specifies the ephemeral disk settings for operating system disk.
     */
    private DiffDiskOption option;

    /*
     * Gets or sets specifies the ephemeral disk placement for operating system disk. The defaulting behavior is:
     * CacheDisk if one is configured for the VM size otherwise ResourceDisk is used. Refer to the VM size documentation
     * for Windows VM at https://docs.microsoft.com/azure/virtual-machines/windows/sizes and Linux VM at
     * https://docs.microsoft.com/azure/virtual-machines/linux/sizes to check which VM sizes exposes a cache disk.
     * Possible values include: 'CacheDisk', 'ResourceDisk'
     */
    private DiffDiskPlacement placement;

    /**
     * Creates an instance of DiffDiskProperties class.
     */
    public DiffDiskProperties() {
    }

    /**
     * Get the option property: Specifies the ephemeral disk settings for operating system disk.
     * 
     * @return the option value.
     */
    public DiffDiskOption option() {
        return this.option;
    }

    /**
     * Set the option property: Specifies the ephemeral disk settings for operating system disk.
     * 
     * @param option the option value to set.
     * @return the DiffDiskProperties object itself.
     */
    public DiffDiskProperties withOption(DiffDiskOption option) {
        this.option = option;
        return this;
    }

    /**
     * Get the placement property: Gets or sets specifies the ephemeral disk placement for operating system disk. The
     * defaulting behavior is: CacheDisk if one is configured for the VM size otherwise ResourceDisk is used. Refer to
     * the VM size documentation for Windows VM at https://docs.microsoft.com/azure/virtual-machines/windows/sizes and
     * Linux VM at https://docs.microsoft.com/azure/virtual-machines/linux/sizes to check which VM sizes exposes a cache
     * disk. Possible values include: 'CacheDisk', 'ResourceDisk'.
     * 
     * @return the placement value.
     */
    public DiffDiskPlacement placement() {
        return this.placement;
    }

    /**
     * Set the placement property: Gets or sets specifies the ephemeral disk placement for operating system disk. The
     * defaulting behavior is: CacheDisk if one is configured for the VM size otherwise ResourceDisk is used. Refer to
     * the VM size documentation for Windows VM at https://docs.microsoft.com/azure/virtual-machines/windows/sizes and
     * Linux VM at https://docs.microsoft.com/azure/virtual-machines/linux/sizes to check which VM sizes exposes a cache
     * disk. Possible values include: 'CacheDisk', 'ResourceDisk'.
     * 
     * @param placement the placement value to set.
     * @return the DiffDiskProperties object itself.
     */
    public DiffDiskProperties withPlacement(DiffDiskPlacement placement) {
        this.placement = placement;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("option", this.option == null ? null : this.option.toString());
        jsonWriter.writeStringField("placement", this.placement == null ? null : this.placement.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DiffDiskProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DiffDiskProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the DiffDiskProperties.
     */
    public static DiffDiskProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DiffDiskProperties deserializedDiffDiskProperties = new DiffDiskProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("option".equals(fieldName)) {
                    deserializedDiffDiskProperties.option = DiffDiskOption.fromString(reader.getString());
                } else if ("placement".equals(fieldName)) {
                    deserializedDiffDiskProperties.placement = DiffDiskPlacement.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDiffDiskProperties;
        });
    }
}
