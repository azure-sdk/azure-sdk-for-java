// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.desktopvirtualization.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Represents a StartMenuItem definition.
 */
@Fluent
public final class StartMenuItemInner extends ProxyResource {
    /*
     * Detailed properties for StartMenuItem
     */
    @JsonProperty(value = "properties")
    private StartMenuItemProperties innerProperties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /**
     * Creates an instance of StartMenuItemInner class.
     */
    public StartMenuItemInner() {
    }

    /**
     * Get the innerProperties property: Detailed properties for StartMenuItem.
     * 
     * @return the innerProperties value.
     */
    private StartMenuItemProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the appAlias property: Alias of StartMenuItem.
     * 
     * @return the appAlias value.
     */
    public String appAlias() {
        return this.innerProperties() == null ? null : this.innerProperties().appAlias();
    }

    /**
     * Set the appAlias property: Alias of StartMenuItem.
     * 
     * @param appAlias the appAlias value to set.
     * @return the StartMenuItemInner object itself.
     */
    public StartMenuItemInner withAppAlias(String appAlias) {
        if (this.innerProperties() == null) {
            this.innerProperties = new StartMenuItemProperties();
        }
        this.innerProperties().withAppAlias(appAlias);
        return this;
    }

    /**
     * Get the filePath property: Path to the file of StartMenuItem.
     * 
     * @return the filePath value.
     */
    public String filePath() {
        return this.innerProperties() == null ? null : this.innerProperties().filePath();
    }

    /**
     * Set the filePath property: Path to the file of StartMenuItem.
     * 
     * @param filePath the filePath value to set.
     * @return the StartMenuItemInner object itself.
     */
    public StartMenuItemInner withFilePath(String filePath) {
        if (this.innerProperties() == null) {
            this.innerProperties = new StartMenuItemProperties();
        }
        this.innerProperties().withFilePath(filePath);
        return this;
    }

    /**
     * Get the commandLineArguments property: Command line arguments for StartMenuItem.
     * 
     * @return the commandLineArguments value.
     */
    public String commandLineArguments() {
        return this.innerProperties() == null ? null : this.innerProperties().commandLineArguments();
    }

    /**
     * Set the commandLineArguments property: Command line arguments for StartMenuItem.
     * 
     * @param commandLineArguments the commandLineArguments value to set.
     * @return the StartMenuItemInner object itself.
     */
    public StartMenuItemInner withCommandLineArguments(String commandLineArguments) {
        if (this.innerProperties() == null) {
            this.innerProperties = new StartMenuItemProperties();
        }
        this.innerProperties().withCommandLineArguments(commandLineArguments);
        return this;
    }

    /**
     * Get the iconPath property: Path to the icon.
     * 
     * @return the iconPath value.
     */
    public String iconPath() {
        return this.innerProperties() == null ? null : this.innerProperties().iconPath();
    }

    /**
     * Set the iconPath property: Path to the icon.
     * 
     * @param iconPath the iconPath value to set.
     * @return the StartMenuItemInner object itself.
     */
    public StartMenuItemInner withIconPath(String iconPath) {
        if (this.innerProperties() == null) {
            this.innerProperties = new StartMenuItemProperties();
        }
        this.innerProperties().withIconPath(iconPath);
        return this;
    }

    /**
     * Get the iconIndex property: Index of the icon.
     * 
     * @return the iconIndex value.
     */
    public Integer iconIndex() {
        return this.innerProperties() == null ? null : this.innerProperties().iconIndex();
    }

    /**
     * Set the iconIndex property: Index of the icon.
     * 
     * @param iconIndex the iconIndex value to set.
     * @return the StartMenuItemInner object itself.
     */
    public StartMenuItemInner withIconIndex(Integer iconIndex) {
        if (this.innerProperties() == null) {
            this.innerProperties = new StartMenuItemProperties();
        }
        this.innerProperties().withIconIndex(iconIndex);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
