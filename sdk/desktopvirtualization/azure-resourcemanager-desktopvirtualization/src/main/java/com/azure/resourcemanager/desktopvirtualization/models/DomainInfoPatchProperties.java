// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.desktopvirtualization.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Domain configurations of session hosts.
 */
@Fluent
public final class DomainInfoPatchProperties implements JsonSerializable<DomainInfoPatchProperties> {
    /*
     * Active directory info. Only one should be populated based on the join type.
     */
    private ActiveDirectoryInfoPatchProperties activeDirectoryInfo;

    /**
     * Creates an instance of DomainInfoPatchProperties class.
     */
    public DomainInfoPatchProperties() {
    }

    /**
     * Get the activeDirectoryInfo property: Active directory info. Only one should be populated based on the join type.
     * 
     * @return the activeDirectoryInfo value.
     */
    public ActiveDirectoryInfoPatchProperties activeDirectoryInfo() {
        return this.activeDirectoryInfo;
    }

    /**
     * Set the activeDirectoryInfo property: Active directory info. Only one should be populated based on the join type.
     * 
     * @param activeDirectoryInfo the activeDirectoryInfo value to set.
     * @return the DomainInfoPatchProperties object itself.
     */
    public DomainInfoPatchProperties withActiveDirectoryInfo(ActiveDirectoryInfoPatchProperties activeDirectoryInfo) {
        this.activeDirectoryInfo = activeDirectoryInfo;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (activeDirectoryInfo() != null) {
            activeDirectoryInfo().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("activeDirectoryInfo", this.activeDirectoryInfo);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DomainInfoPatchProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DomainInfoPatchProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DomainInfoPatchProperties.
     */
    public static DomainInfoPatchProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DomainInfoPatchProperties deserializedDomainInfoPatchProperties = new DomainInfoPatchProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("activeDirectoryInfo".equals(fieldName)) {
                    deserializedDomainInfoPatchProperties.activeDirectoryInfo
                        = ActiveDirectoryInfoPatchProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDomainInfoPatchProperties;
        });
    }
}
