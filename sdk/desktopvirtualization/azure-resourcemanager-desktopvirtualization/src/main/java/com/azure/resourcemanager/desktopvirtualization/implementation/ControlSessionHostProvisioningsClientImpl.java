// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.desktopvirtualization.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.desktopvirtualization.fluent.ControlSessionHostProvisioningsClient;
import com.azure.resourcemanager.desktopvirtualization.models.HostPoolProvisioningControlParameter;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in ControlSessionHostProvisioningsClient.
 */
public final class ControlSessionHostProvisioningsClientImpl implements ControlSessionHostProvisioningsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final ControlSessionHostProvisioningsService service;

    /**
     * The service client containing this operation class.
     */
    private final DesktopVirtualizationApiClientImpl client;

    /**
     * Initializes an instance of ControlSessionHostProvisioningsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    ControlSessionHostProvisioningsClientImpl(DesktopVirtualizationApiClientImpl client) {
        this.service = RestProxy.create(ControlSessionHostProvisioningsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for DesktopVirtualizationApiClientControlSessionHostProvisionings to be
     * used by the proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "DesktopVirtualizatio")
    public interface ControlSessionHostProvisioningsService {
        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/hostPools/{hostPoolName}/sessionHostManagements/default/controlSessionHostProvisioning")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> post(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("hostPoolName") String hostPoolName,
            @BodyParam("application/json") HostPoolProvisioningControlParameter hostPoolProvisioningControlParameter,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/hostPools/{hostPoolName}/sessionHostManagements/default/controlSessionHostProvisioning")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> postSync(@HostParam("$host") String endpoint, @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("hostPoolName") String hostPoolName,
            @BodyParam("application/json") HostPoolProvisioningControlParameter hostPoolProvisioningControlParameter,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Control provisioning of a hostpool.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group.
     * @param hostPoolProvisioningControlParameter Object containing control action for hostpool provisioning.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Flux<ByteBuffer>>> postWithResponseAsync(String resourceGroupName, String hostPoolName,
        HostPoolProvisioningControlParameter hostPoolProvisioningControlParameter) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (hostPoolName == null) {
            return Mono.error(new IllegalArgumentException("Parameter hostPoolName is required and cannot be null."));
        }
        if (hostPoolProvisioningControlParameter == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter hostPoolProvisioningControlParameter is required and cannot be null."));
        } else {
            hostPoolProvisioningControlParameter.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.post(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, hostPoolName, hostPoolProvisioningControlParameter,
                accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Control provisioning of a hostpool.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group.
     * @param hostPoolProvisioningControlParameter Object containing control action for hostpool provisioning.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> postWithResponse(String resourceGroupName, String hostPoolName,
        HostPoolProvisioningControlParameter hostPoolProvisioningControlParameter) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (hostPoolName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter hostPoolName is required and cannot be null."));
        }
        if (hostPoolProvisioningControlParameter == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter hostPoolProvisioningControlParameter is required and cannot be null."));
        } else {
            hostPoolProvisioningControlParameter.validate();
        }
        final String accept = "application/json";
        return service.postSync(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, hostPoolName, hostPoolProvisioningControlParameter, accept, Context.NONE);
    }

    /**
     * Control provisioning of a hostpool.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group.
     * @param hostPoolProvisioningControlParameter Object containing control action for hostpool provisioning.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> postWithResponse(String resourceGroupName, String hostPoolName,
        HostPoolProvisioningControlParameter hostPoolProvisioningControlParameter, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (hostPoolName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter hostPoolName is required and cannot be null."));
        }
        if (hostPoolProvisioningControlParameter == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter hostPoolProvisioningControlParameter is required and cannot be null."));
        } else {
            hostPoolProvisioningControlParameter.validate();
        }
        final String accept = "application/json";
        return service.postSync(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, hostPoolName, hostPoolProvisioningControlParameter, accept, context);
    }

    /**
     * Control provisioning of a hostpool.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group.
     * @param hostPoolProvisioningControlParameter Object containing control action for hostpool provisioning.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<PollResult<Void>, Void> beginPostAsync(String resourceGroupName, String hostPoolName,
        HostPoolProvisioningControlParameter hostPoolProvisioningControlParameter) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = postWithResponseAsync(resourceGroupName, hostPoolName, hostPoolProvisioningControlParameter);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            this.client.getContext());
    }

    /**
     * Control provisioning of a hostpool.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group.
     * @param hostPoolProvisioningControlParameter Object containing control action for hostpool provisioning.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginPost(String resourceGroupName, String hostPoolName,
        HostPoolProvisioningControlParameter hostPoolProvisioningControlParameter) {
        Response<BinaryData> response
            = postWithResponse(resourceGroupName, hostPoolName, hostPoolProvisioningControlParameter);
        return this.client.<Void, Void>getLroResult(response, Void.class, Void.class, Context.NONE);
    }

    /**
     * Control provisioning of a hostpool.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group.
     * @param hostPoolProvisioningControlParameter Object containing control action for hostpool provisioning.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginPost(String resourceGroupName, String hostPoolName,
        HostPoolProvisioningControlParameter hostPoolProvisioningControlParameter, Context context) {
        Response<BinaryData> response
            = postWithResponse(resourceGroupName, hostPoolName, hostPoolProvisioningControlParameter, context);
        return this.client.<Void, Void>getLroResult(response, Void.class, Void.class, context);
    }

    /**
     * Control provisioning of a hostpool.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group.
     * @param hostPoolProvisioningControlParameter Object containing control action for hostpool provisioning.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> postAsync(String resourceGroupName, String hostPoolName,
        HostPoolProvisioningControlParameter hostPoolProvisioningControlParameter) {
        return beginPostAsync(resourceGroupName, hostPoolName, hostPoolProvisioningControlParameter).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Control provisioning of a hostpool.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group.
     * @param hostPoolProvisioningControlParameter Object containing control action for hostpool provisioning.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void post(String resourceGroupName, String hostPoolName,
        HostPoolProvisioningControlParameter hostPoolProvisioningControlParameter) {
        beginPost(resourceGroupName, hostPoolName, hostPoolProvisioningControlParameter).getFinalResult();
    }

    /**
     * Control provisioning of a hostpool.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group.
     * @param hostPoolProvisioningControlParameter Object containing control action for hostpool provisioning.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void post(String resourceGroupName, String hostPoolName,
        HostPoolProvisioningControlParameter hostPoolProvisioningControlParameter, Context context) {
        beginPost(resourceGroupName, hostPoolName, hostPoolProvisioningControlParameter, context).getFinalResult();
    }

    private static final ClientLogger LOGGER = new ClientLogger(ControlSessionHostProvisioningsClientImpl.class);
}
