// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.desktopvirtualization.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.desktopvirtualization.fluent.models.SessionHostConfigurationPatchProperties;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * Represents a SessionHostConfigurationPatch definition.
 */
@Fluent
public final class SessionHostConfigurationPatch implements JsonSerializable<SessionHostConfigurationPatch> {
    /*
     * Detailed properties for SessionHostConfigurationPatch
     */
    private SessionHostConfigurationPatchProperties innerProperties;

    /**
     * Creates an instance of SessionHostConfigurationPatch class.
     */
    public SessionHostConfigurationPatch() {
    }

    /**
     * Get the innerProperties property: Detailed properties for SessionHostConfigurationPatch.
     * 
     * @return the innerProperties value.
     */
    private SessionHostConfigurationPatchProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the friendlyName property: Friendly name to describe this version of the SessionHostConfiguration.
     * 
     * @return the friendlyName value.
     */
    public String friendlyName() {
        return this.innerProperties() == null ? null : this.innerProperties().friendlyName();
    }

    /**
     * Set the friendlyName property: Friendly name to describe this version of the SessionHostConfiguration.
     * 
     * @param friendlyName the friendlyName value to set.
     * @return the SessionHostConfigurationPatch object itself.
     */
    public SessionHostConfigurationPatch withFriendlyName(String friendlyName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SessionHostConfigurationPatchProperties();
        }
        this.innerProperties().withFriendlyName(friendlyName);
        return this;
    }

    /**
     * Get the vmTags property: Hashtable that lists key/value pair tags to apply to the VMs.
     * 
     * @return the vmTags value.
     */
    public Map<String, String> vmTags() {
        return this.innerProperties() == null ? null : this.innerProperties().vmTags();
    }

    /**
     * Set the vmTags property: Hashtable that lists key/value pair tags to apply to the VMs.
     * 
     * @param vmTags the vmTags value to set.
     * @return the SessionHostConfigurationPatch object itself.
     */
    public SessionHostConfigurationPatch withVmTags(Map<String, String> vmTags) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SessionHostConfigurationPatchProperties();
        }
        this.innerProperties().withVmTags(vmTags);
        return this;
    }

    /**
     * Get the vmLocation property: The Location for the session host to be created in.
     * 
     * @return the vmLocation value.
     */
    public String vmLocation() {
        return this.innerProperties() == null ? null : this.innerProperties().vmLocation();
    }

    /**
     * Set the vmLocation property: The Location for the session host to be created in.
     * 
     * @param vmLocation the vmLocation value to set.
     * @return the SessionHostConfigurationPatch object itself.
     */
    public SessionHostConfigurationPatch withVmLocation(String vmLocation) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SessionHostConfigurationPatchProperties();
        }
        this.innerProperties().withVmLocation(vmLocation);
        return this;
    }

    /**
     * Get the vmResourceGroup property: The ResourceGroup for the session hosts to be created in. It will default to
     * the ResourceGroup of the hostpool if not provided.
     * 
     * @return the vmResourceGroup value.
     */
    public String vmResourceGroup() {
        return this.innerProperties() == null ? null : this.innerProperties().vmResourceGroup();
    }

    /**
     * Set the vmResourceGroup property: The ResourceGroup for the session hosts to be created in. It will default to
     * the ResourceGroup of the hostpool if not provided.
     * 
     * @param vmResourceGroup the vmResourceGroup value to set.
     * @return the SessionHostConfigurationPatch object itself.
     */
    public SessionHostConfigurationPatch withVmResourceGroup(String vmResourceGroup) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SessionHostConfigurationPatchProperties();
        }
        this.innerProperties().withVmResourceGroup(vmResourceGroup);
        return this;
    }

    /**
     * Get the vmNamePrefix property: The prefix that should be associated with session host names.
     * 
     * @return the vmNamePrefix value.
     */
    public String vmNamePrefix() {
        return this.innerProperties() == null ? null : this.innerProperties().vmNamePrefix();
    }

    /**
     * Set the vmNamePrefix property: The prefix that should be associated with session host names.
     * 
     * @param vmNamePrefix the vmNamePrefix value to set.
     * @return the SessionHostConfigurationPatch object itself.
     */
    public SessionHostConfigurationPatch withVmNamePrefix(String vmNamePrefix) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SessionHostConfigurationPatchProperties();
        }
        this.innerProperties().withVmNamePrefix(vmNamePrefix);
        return this;
    }

    /**
     * Get the availabilityZones property: Value for availability zones to be used by the session host. Should be from
     * [1,2,3].
     * 
     * @return the availabilityZones value.
     */
    public List<Integer> availabilityZones() {
        return this.innerProperties() == null ? null : this.innerProperties().availabilityZones();
    }

    /**
     * Set the availabilityZones property: Value for availability zones to be used by the session host. Should be from
     * [1,2,3].
     * 
     * @param availabilityZones the availabilityZones value to set.
     * @return the SessionHostConfigurationPatch object itself.
     */
    public SessionHostConfigurationPatch withAvailabilityZones(List<Integer> availabilityZones) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SessionHostConfigurationPatchProperties();
        }
        this.innerProperties().withAvailabilityZones(availabilityZones);
        return this;
    }

    /**
     * Get the networkInfo property: Network information.
     * 
     * @return the networkInfo value.
     */
    public NetworkInfoPatchProperties networkInfo() {
        return this.innerProperties() == null ? null : this.innerProperties().networkInfo();
    }

    /**
     * Set the networkInfo property: Network information.
     * 
     * @param networkInfo the networkInfo value to set.
     * @return the SessionHostConfigurationPatch object itself.
     */
    public SessionHostConfigurationPatch withNetworkInfo(NetworkInfoPatchProperties networkInfo) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SessionHostConfigurationPatchProperties();
        }
        this.innerProperties().withNetworkInfo(networkInfo);
        return this;
    }

    /**
     * Get the vmSizeId property: The id of the size of a virtual machine connected to a hostpool. Example:
     * Standard_D2as_v6.
     * 
     * @return the vmSizeId value.
     */
    public String vmSizeId() {
        return this.innerProperties() == null ? null : this.innerProperties().vmSizeId();
    }

    /**
     * Set the vmSizeId property: The id of the size of a virtual machine connected to a hostpool. Example:
     * Standard_D2as_v6.
     * 
     * @param vmSizeId the vmSizeId value to set.
     * @return the SessionHostConfigurationPatch object itself.
     */
    public SessionHostConfigurationPatch withVmSizeId(String vmSizeId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SessionHostConfigurationPatchProperties();
        }
        this.innerProperties().withVmSizeId(vmSizeId);
        return this;
    }

    /**
     * Get the diskInfo property: Disk information.
     * 
     * @return the diskInfo value.
     */
    public DiskInfoPatchProperties diskInfo() {
        return this.innerProperties() == null ? null : this.innerProperties().diskInfo();
    }

    /**
     * Set the diskInfo property: Disk information.
     * 
     * @param diskInfo the diskInfo value to set.
     * @return the SessionHostConfigurationPatch object itself.
     */
    public SessionHostConfigurationPatch withDiskInfo(DiskInfoPatchProperties diskInfo) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SessionHostConfigurationPatchProperties();
        }
        this.innerProperties().withDiskInfo(diskInfo);
        return this;
    }

    /**
     * Get the customConfigurationScriptUrl property: The uri to the storage blob containing the arm template to be run
     * on the virtual machine after provisioning.
     * 
     * @return the customConfigurationScriptUrl value.
     */
    public String customConfigurationScriptUrl() {
        return this.innerProperties() == null ? null : this.innerProperties().customConfigurationScriptUrl();
    }

    /**
     * Set the customConfigurationScriptUrl property: The uri to the storage blob containing the arm template to be run
     * on the virtual machine after provisioning.
     * 
     * @param customConfigurationScriptUrl the customConfigurationScriptUrl value to set.
     * @return the SessionHostConfigurationPatch object itself.
     */
    public SessionHostConfigurationPatch withCustomConfigurationScriptUrl(String customConfigurationScriptUrl) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SessionHostConfigurationPatchProperties();
        }
        this.innerProperties().withCustomConfigurationScriptUrl(customConfigurationScriptUrl);
        return this;
    }

    /**
     * Get the imageInfo property: Image configurations of HostPool.
     * 
     * @return the imageInfo value.
     */
    public ImageInfoPatchProperties imageInfo() {
        return this.innerProperties() == null ? null : this.innerProperties().imageInfo();
    }

    /**
     * Set the imageInfo property: Image configurations of HostPool.
     * 
     * @param imageInfo the imageInfo value to set.
     * @return the SessionHostConfigurationPatch object itself.
     */
    public SessionHostConfigurationPatch withImageInfo(ImageInfoPatchProperties imageInfo) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SessionHostConfigurationPatchProperties();
        }
        this.innerProperties().withImageInfo(imageInfo);
        return this;
    }

    /**
     * Get the domainInfo property: Domain configurations of session hosts.
     * 
     * @return the domainInfo value.
     */
    public DomainInfoPatchProperties domainInfo() {
        return this.innerProperties() == null ? null : this.innerProperties().domainInfo();
    }

    /**
     * Set the domainInfo property: Domain configurations of session hosts.
     * 
     * @param domainInfo the domainInfo value to set.
     * @return the SessionHostConfigurationPatch object itself.
     */
    public SessionHostConfigurationPatch withDomainInfo(DomainInfoPatchProperties domainInfo) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SessionHostConfigurationPatchProperties();
        }
        this.innerProperties().withDomainInfo(domainInfo);
        return this;
    }

    /**
     * Get the securityInfo property: Security information.
     * 
     * @return the securityInfo value.
     */
    public SecurityInfoPatchProperties securityInfo() {
        return this.innerProperties() == null ? null : this.innerProperties().securityInfo();
    }

    /**
     * Set the securityInfo property: Security information.
     * 
     * @param securityInfo the securityInfo value to set.
     * @return the SessionHostConfigurationPatch object itself.
     */
    public SessionHostConfigurationPatch withSecurityInfo(SecurityInfoPatchProperties securityInfo) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SessionHostConfigurationPatchProperties();
        }
        this.innerProperties().withSecurityInfo(securityInfo);
        return this;
    }

    /**
     * Get the vmAdminCredentials property: Local Admin credentials for session hosts.
     * 
     * @return the vmAdminCredentials value.
     */
    public KeyVaultCredentialsPatchProperties vmAdminCredentials() {
        return this.innerProperties() == null ? null : this.innerProperties().vmAdminCredentials();
    }

    /**
     * Set the vmAdminCredentials property: Local Admin credentials for session hosts.
     * 
     * @param vmAdminCredentials the vmAdminCredentials value to set.
     * @return the SessionHostConfigurationPatch object itself.
     */
    public SessionHostConfigurationPatch withVmAdminCredentials(KeyVaultCredentialsPatchProperties vmAdminCredentials) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SessionHostConfigurationPatchProperties();
        }
        this.innerProperties().withVmAdminCredentials(vmAdminCredentials);
        return this;
    }

    /**
     * Get the bootDiagnosticsInfo property: Boot Diagnostics information.
     * 
     * @return the bootDiagnosticsInfo value.
     */
    public BootDiagnosticsInfoPatchProperties bootDiagnosticsInfo() {
        return this.innerProperties() == null ? null : this.innerProperties().bootDiagnosticsInfo();
    }

    /**
     * Set the bootDiagnosticsInfo property: Boot Diagnostics information.
     * 
     * @param bootDiagnosticsInfo the bootDiagnosticsInfo value to set.
     * @return the SessionHostConfigurationPatch object itself.
     */
    public SessionHostConfigurationPatch
        withBootDiagnosticsInfo(BootDiagnosticsInfoPatchProperties bootDiagnosticsInfo) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SessionHostConfigurationPatchProperties();
        }
        this.innerProperties().withBootDiagnosticsInfo(bootDiagnosticsInfo);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SessionHostConfigurationPatch from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SessionHostConfigurationPatch if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SessionHostConfigurationPatch.
     */
    public static SessionHostConfigurationPatch fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SessionHostConfigurationPatch deserializedSessionHostConfigurationPatch
                = new SessionHostConfigurationPatch();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("properties".equals(fieldName)) {
                    deserializedSessionHostConfigurationPatch.innerProperties
                        = SessionHostConfigurationPatchProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSessionHostConfigurationPatch;
        });
    }
}
