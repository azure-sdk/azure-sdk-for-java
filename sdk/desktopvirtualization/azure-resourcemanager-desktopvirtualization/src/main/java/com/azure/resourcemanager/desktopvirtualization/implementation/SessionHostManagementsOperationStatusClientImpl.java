// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.desktopvirtualization.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.desktopvirtualization.fluent.SessionHostManagementsOperationStatusClient;
import com.azure.resourcemanager.desktopvirtualization.fluent.models.SessionHostManagementOperationStatusInner;
import com.azure.resourcemanager.desktopvirtualization.models.SessionHostManagementOperationStatusList;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in
 * SessionHostManagementsOperationStatusClient.
 */
public final class SessionHostManagementsOperationStatusClientImpl
    implements SessionHostManagementsOperationStatusClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final SessionHostManagementsOperationStatusService service;

    /**
     * The service client containing this operation class.
     */
    private final DesktopVirtualizationApiClientImpl client;

    /**
     * Initializes an instance of SessionHostManagementsOperationStatusClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    SessionHostManagementsOperationStatusClientImpl(DesktopVirtualizationApiClientImpl client) {
        this.service = RestProxy.create(SessionHostManagementsOperationStatusService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for DesktopVirtualizationApiClientSessionHostManagementsOperationStatus
     * to be used by the proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "DesktopVirtualizatio")
    public interface SessionHostManagementsOperationStatusService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/hostPools/{hostPoolName}/sessionHostManagements/default/operationStatuses/{operationId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SessionHostManagementOperationStatusInner>> get(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("hostPoolName") String hostPoolName,
            @PathParam("operationId") String operationId, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/hostPools/{hostPoolName}/sessionHostManagements/default/operationStatuses")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SessionHostManagementOperationStatusList>> list(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("hostPoolName") String hostPoolName,
            @QueryParam("isLatest") Boolean isLatest, @QueryParam("type") String type,
            @QueryParam("isNonTerminal") Boolean isNonTerminal, @QueryParam("correlationId") String correlationId,
            @QueryParam("action") String action, @QueryParam("isInitiatingOperation") Boolean isInitiatingOperation,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SessionHostManagementOperationStatusList>> listNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Get Operation status for SessionHostManagement.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group.
     * @param operationId The Guid of the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return operation status for SessionHostManagement along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<SessionHostManagementOperationStatusInner>> getWithResponseAsync(String resourceGroupName,
        String hostPoolName, String operationId) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (hostPoolName == null) {
            return Mono.error(new IllegalArgumentException("Parameter hostPoolName is required and cannot be null."));
        }
        if (operationId == null) {
            return Mono.error(new IllegalArgumentException("Parameter operationId is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, hostPoolName, operationId, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get Operation status for SessionHostManagement.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group.
     * @param operationId The Guid of the operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return operation status for SessionHostManagement along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SessionHostManagementOperationStatusInner>> getWithResponseAsync(String resourceGroupName,
        String hostPoolName, String operationId, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (hostPoolName == null) {
            return Mono.error(new IllegalArgumentException("Parameter hostPoolName is required and cannot be null."));
        }
        if (operationId == null) {
            return Mono.error(new IllegalArgumentException("Parameter operationId is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, hostPoolName, operationId, accept, context);
    }

    /**
     * Get Operation status for SessionHostManagement.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group.
     * @param operationId The Guid of the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return operation status for SessionHostManagement on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SessionHostManagementOperationStatusInner> getAsync(String resourceGroupName, String hostPoolName,
        String operationId) {
        return getWithResponseAsync(resourceGroupName, hostPoolName, operationId)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get Operation status for SessionHostManagement.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group.
     * @param operationId The Guid of the operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return operation status for SessionHostManagement along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SessionHostManagementOperationStatusInner> getWithResponse(String resourceGroupName,
        String hostPoolName, String operationId, Context context) {
        return getWithResponseAsync(resourceGroupName, hostPoolName, operationId, context).block();
    }

    /**
     * Get Operation status for SessionHostManagement.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group.
     * @param operationId The Guid of the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return operation status for SessionHostManagement.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SessionHostManagementOperationStatusInner get(String resourceGroupName, String hostPoolName,
        String operationId) {
        return getWithResponse(resourceGroupName, hostPoolName, operationId, Context.NONE).getValue();
    }

    /**
     * Get Operation status for SessionHostManagement.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group.
     * @param isLatest Returns the most recent sessionHostManagement operation.
     * @param type Filter based on the type of sessionHostManagement operation. Valid values are
     * 'InitiateSessionHostUpdate' and 'ValidateSessionHostUpdate'.
     * @param isNonTerminal Returns currently running operations. Ignored if 'isLatest' is true.
     * @param correlationId CorrelationId of the sessionHostManagement operations to be returned.
     * @param action Action type for the Operation Status list to be filtered on. Valid actions are: start | retry |
     * pause | resume | cancel).
     * @param isInitiatingOperation Filter option to only return operations that initiated a sessionHostManagement
     * operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return operation status for SessionHostManagement along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SessionHostManagementOperationStatusInner>> listSinglePageAsync(String resourceGroupName,
        String hostPoolName, Boolean isLatest, String type, Boolean isNonTerminal, String correlationId, String action,
        Boolean isInitiatingOperation) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (hostPoolName == null) {
            return Mono.error(new IllegalArgumentException("Parameter hostPoolName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.list(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, hostPoolName, isLatest, type, isNonTerminal,
                correlationId, action, isInitiatingOperation, accept, context))
            .<PagedResponse<SessionHostManagementOperationStatusInner>>map(
                res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                    res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get Operation status for SessionHostManagement.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group.
     * @param isLatest Returns the most recent sessionHostManagement operation.
     * @param type Filter based on the type of sessionHostManagement operation. Valid values are
     * 'InitiateSessionHostUpdate' and 'ValidateSessionHostUpdate'.
     * @param isNonTerminal Returns currently running operations. Ignored if 'isLatest' is true.
     * @param correlationId CorrelationId of the sessionHostManagement operations to be returned.
     * @param action Action type for the Operation Status list to be filtered on. Valid actions are: start | retry |
     * pause | resume | cancel).
     * @param isInitiatingOperation Filter option to only return operations that initiated a sessionHostManagement
     * operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return operation status for SessionHostManagement along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SessionHostManagementOperationStatusInner>> listSinglePageAsync(String resourceGroupName,
        String hostPoolName, Boolean isLatest, String type, Boolean isNonTerminal, String correlationId, String action,
        Boolean isInitiatingOperation, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (hostPoolName == null) {
            return Mono.error(new IllegalArgumentException("Parameter hostPoolName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .list(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
                resourceGroupName, hostPoolName, isLatest, type, isNonTerminal, correlationId, action,
                isInitiatingOperation, accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * Get Operation status for SessionHostManagement.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group.
     * @param isLatest Returns the most recent sessionHostManagement operation.
     * @param type Filter based on the type of sessionHostManagement operation. Valid values are
     * 'InitiateSessionHostUpdate' and 'ValidateSessionHostUpdate'.
     * @param isNonTerminal Returns currently running operations. Ignored if 'isLatest' is true.
     * @param correlationId CorrelationId of the sessionHostManagement operations to be returned.
     * @param action Action type for the Operation Status list to be filtered on. Valid actions are: start | retry |
     * pause | resume | cancel).
     * @param isInitiatingOperation Filter option to only return operations that initiated a sessionHostManagement
     * operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return operation status for SessionHostManagement as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<SessionHostManagementOperationStatusInner> listAsync(String resourceGroupName, String hostPoolName,
        Boolean isLatest, String type, Boolean isNonTerminal, String correlationId, String action,
        Boolean isInitiatingOperation) {
        return new PagedFlux<>(() -> listSinglePageAsync(resourceGroupName, hostPoolName, isLatest, type, isNonTerminal,
            correlationId, action, isInitiatingOperation), nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Get Operation status for SessionHostManagement.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return operation status for SessionHostManagement as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<SessionHostManagementOperationStatusInner> listAsync(String resourceGroupName,
        String hostPoolName) {
        final Boolean isLatest = null;
        final String type = null;
        final Boolean isNonTerminal = null;
        final String correlationId = null;
        final String action = null;
        final Boolean isInitiatingOperation = null;
        return new PagedFlux<>(() -> listSinglePageAsync(resourceGroupName, hostPoolName, isLatest, type, isNonTerminal,
            correlationId, action, isInitiatingOperation), nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Get Operation status for SessionHostManagement.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group.
     * @param isLatest Returns the most recent sessionHostManagement operation.
     * @param type Filter based on the type of sessionHostManagement operation. Valid values are
     * 'InitiateSessionHostUpdate' and 'ValidateSessionHostUpdate'.
     * @param isNonTerminal Returns currently running operations. Ignored if 'isLatest' is true.
     * @param correlationId CorrelationId of the sessionHostManagement operations to be returned.
     * @param action Action type for the Operation Status list to be filtered on. Valid actions are: start | retry |
     * pause | resume | cancel).
     * @param isInitiatingOperation Filter option to only return operations that initiated a sessionHostManagement
     * operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return operation status for SessionHostManagement as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<SessionHostManagementOperationStatusInner> listAsync(String resourceGroupName,
        String hostPoolName, Boolean isLatest, String type, Boolean isNonTerminal, String correlationId, String action,
        Boolean isInitiatingOperation, Context context) {
        return new PagedFlux<>(() -> listSinglePageAsync(resourceGroupName, hostPoolName, isLatest, type, isNonTerminal,
            correlationId, action, isInitiatingOperation, context),
            nextLink -> listNextSinglePageAsync(nextLink, context));
    }

    /**
     * Get Operation status for SessionHostManagement.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return operation status for SessionHostManagement as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SessionHostManagementOperationStatusInner> list(String resourceGroupName,
        String hostPoolName) {
        final Boolean isLatest = null;
        final String type = null;
        final Boolean isNonTerminal = null;
        final String correlationId = null;
        final String action = null;
        final Boolean isInitiatingOperation = null;
        return new PagedIterable<>(listAsync(resourceGroupName, hostPoolName, isLatest, type, isNonTerminal,
            correlationId, action, isInitiatingOperation));
    }

    /**
     * Get Operation status for SessionHostManagement.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group.
     * @param isLatest Returns the most recent sessionHostManagement operation.
     * @param type Filter based on the type of sessionHostManagement operation. Valid values are
     * 'InitiateSessionHostUpdate' and 'ValidateSessionHostUpdate'.
     * @param isNonTerminal Returns currently running operations. Ignored if 'isLatest' is true.
     * @param correlationId CorrelationId of the sessionHostManagement operations to be returned.
     * @param action Action type for the Operation Status list to be filtered on. Valid actions are: start | retry |
     * pause | resume | cancel).
     * @param isInitiatingOperation Filter option to only return operations that initiated a sessionHostManagement
     * operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return operation status for SessionHostManagement as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SessionHostManagementOperationStatusInner> list(String resourceGroupName, String hostPoolName,
        Boolean isLatest, String type, Boolean isNonTerminal, String correlationId, String action,
        Boolean isInitiatingOperation, Context context) {
        return new PagedIterable<>(listAsync(resourceGroupName, hostPoolName, isLatest, type, isNonTerminal,
            correlationId, action, isInitiatingOperation, context));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return sessionHostManagementOperationStatusList along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SessionHostManagementOperationStatusInner>> listNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.listNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<SessionHostManagementOperationStatusInner>>map(
                res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                    res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return sessionHostManagementOperationStatusList along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SessionHostManagementOperationStatusInner>> listNextSinglePageAsync(String nextLink,
        Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }
}
