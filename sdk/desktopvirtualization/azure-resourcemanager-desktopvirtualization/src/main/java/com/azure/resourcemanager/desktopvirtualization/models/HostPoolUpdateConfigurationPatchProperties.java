// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.desktopvirtualization.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The configurations of a hostpool update.
 */
@Fluent
public final class HostPoolUpdateConfigurationPatchProperties
    implements JsonSerializable<HostPoolUpdateConfigurationPatchProperties> {
    /*
     * Whether not to save original disk. False by default.
     */
    private Boolean deleteOriginalVm;

    /*
     * The maximum number of virtual machines to be removed during hostpool update.
     */
    private Integer maxVmsRemoved;

    /*
     * Grace period before logging off users in minutes.
     */
    private Integer logOffDelayMinutes;

    /*
     * Log off message sent to user for logoff.
     */
    private String logOffMessage;

    /**
     * Creates an instance of HostPoolUpdateConfigurationPatchProperties class.
     */
    public HostPoolUpdateConfigurationPatchProperties() {
    }

    /**
     * Get the deleteOriginalVm property: Whether not to save original disk. False by default.
     * 
     * @return the deleteOriginalVm value.
     */
    public Boolean deleteOriginalVm() {
        return this.deleteOriginalVm;
    }

    /**
     * Set the deleteOriginalVm property: Whether not to save original disk. False by default.
     * 
     * @param deleteOriginalVm the deleteOriginalVm value to set.
     * @return the HostPoolUpdateConfigurationPatchProperties object itself.
     */
    public HostPoolUpdateConfigurationPatchProperties withDeleteOriginalVm(Boolean deleteOriginalVm) {
        this.deleteOriginalVm = deleteOriginalVm;
        return this;
    }

    /**
     * Get the maxVmsRemoved property: The maximum number of virtual machines to be removed during hostpool update.
     * 
     * @return the maxVmsRemoved value.
     */
    public Integer maxVmsRemoved() {
        return this.maxVmsRemoved;
    }

    /**
     * Set the maxVmsRemoved property: The maximum number of virtual machines to be removed during hostpool update.
     * 
     * @param maxVmsRemoved the maxVmsRemoved value to set.
     * @return the HostPoolUpdateConfigurationPatchProperties object itself.
     */
    public HostPoolUpdateConfigurationPatchProperties withMaxVmsRemoved(Integer maxVmsRemoved) {
        this.maxVmsRemoved = maxVmsRemoved;
        return this;
    }

    /**
     * Get the logOffDelayMinutes property: Grace period before logging off users in minutes.
     * 
     * @return the logOffDelayMinutes value.
     */
    public Integer logOffDelayMinutes() {
        return this.logOffDelayMinutes;
    }

    /**
     * Set the logOffDelayMinutes property: Grace period before logging off users in minutes.
     * 
     * @param logOffDelayMinutes the logOffDelayMinutes value to set.
     * @return the HostPoolUpdateConfigurationPatchProperties object itself.
     */
    public HostPoolUpdateConfigurationPatchProperties withLogOffDelayMinutes(Integer logOffDelayMinutes) {
        this.logOffDelayMinutes = logOffDelayMinutes;
        return this;
    }

    /**
     * Get the logOffMessage property: Log off message sent to user for logoff.
     * 
     * @return the logOffMessage value.
     */
    public String logOffMessage() {
        return this.logOffMessage;
    }

    /**
     * Set the logOffMessage property: Log off message sent to user for logoff.
     * 
     * @param logOffMessage the logOffMessage value to set.
     * @return the HostPoolUpdateConfigurationPatchProperties object itself.
     */
    public HostPoolUpdateConfigurationPatchProperties withLogOffMessage(String logOffMessage) {
        this.logOffMessage = logOffMessage;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("deleteOriginalVm", this.deleteOriginalVm);
        jsonWriter.writeNumberField("maxVmsRemoved", this.maxVmsRemoved);
        jsonWriter.writeNumberField("logOffDelayMinutes", this.logOffDelayMinutes);
        jsonWriter.writeStringField("logOffMessage", this.logOffMessage);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of HostPoolUpdateConfigurationPatchProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of HostPoolUpdateConfigurationPatchProperties if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the HostPoolUpdateConfigurationPatchProperties.
     */
    public static HostPoolUpdateConfigurationPatchProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            HostPoolUpdateConfigurationPatchProperties deserializedHostPoolUpdateConfigurationPatchProperties
                = new HostPoolUpdateConfigurationPatchProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("deleteOriginalVm".equals(fieldName)) {
                    deserializedHostPoolUpdateConfigurationPatchProperties.deleteOriginalVm
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("maxVmsRemoved".equals(fieldName)) {
                    deserializedHostPoolUpdateConfigurationPatchProperties.maxVmsRemoved
                        = reader.getNullable(JsonReader::getInt);
                } else if ("logOffDelayMinutes".equals(fieldName)) {
                    deserializedHostPoolUpdateConfigurationPatchProperties.logOffDelayMinutes
                        = reader.getNullable(JsonReader::getInt);
                } else if ("logOffMessage".equals(fieldName)) {
                    deserializedHostPoolUpdateConfigurationPatchProperties.logOffMessage = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedHostPoolUpdateConfigurationPatchProperties;
        });
    }
}
