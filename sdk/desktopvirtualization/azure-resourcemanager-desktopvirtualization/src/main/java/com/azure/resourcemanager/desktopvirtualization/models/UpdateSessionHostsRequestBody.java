// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.desktopvirtualization.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;

/** Object containing the definition for properties to be used for a sessionHostUpdate operation. */
@Fluent
public final class UpdateSessionHostsRequestBody {
    /*
     * The timestamp that the update validation is scheduled for. If none is provided, the update will be executed
     * immediately
     */
    @JsonProperty(value = "scheduledDateTime")
    private OffsetDateTime scheduledDateTime;

    /*
     * The timeZone as defined in
     * https://docs.microsoft.com/en-us/dotnet/api/system.timezoneinfo.findsystemtimezonebyid?view=net-5.0.
     */
    @JsonProperty(value = "scheduledDateTimeZone")
    private String scheduledDateTimeZone;

    /*
     * settings for management information for the hostpool update operation. If none is provided the update will use
     * the settings saved in the sessionHostManagement object.
     */
    @JsonProperty(value = "update")
    private HostPoolUpdateConfigurationPatchProperties update;

    /** Creates an instance of UpdateSessionHostsRequestBody class. */
    public UpdateSessionHostsRequestBody() {
    }

    /**
     * Get the scheduledDateTime property: The timestamp that the update validation is scheduled for. If none is
     * provided, the update will be executed immediately.
     *
     * @return the scheduledDateTime value.
     */
    public OffsetDateTime scheduledDateTime() {
        return this.scheduledDateTime;
    }

    /**
     * Set the scheduledDateTime property: The timestamp that the update validation is scheduled for. If none is
     * provided, the update will be executed immediately.
     *
     * @param scheduledDateTime the scheduledDateTime value to set.
     * @return the UpdateSessionHostsRequestBody object itself.
     */
    public UpdateSessionHostsRequestBody withScheduledDateTime(OffsetDateTime scheduledDateTime) {
        this.scheduledDateTime = scheduledDateTime;
        return this;
    }

    /**
     * Get the scheduledDateTimeZone property: The timeZone as defined in
     * https://docs.microsoft.com/en-us/dotnet/api/system.timezoneinfo.findsystemtimezonebyid?view=net-5.0.
     *
     * @return the scheduledDateTimeZone value.
     */
    public String scheduledDateTimeZone() {
        return this.scheduledDateTimeZone;
    }

    /**
     * Set the scheduledDateTimeZone property: The timeZone as defined in
     * https://docs.microsoft.com/en-us/dotnet/api/system.timezoneinfo.findsystemtimezonebyid?view=net-5.0.
     *
     * @param scheduledDateTimeZone the scheduledDateTimeZone value to set.
     * @return the UpdateSessionHostsRequestBody object itself.
     */
    public UpdateSessionHostsRequestBody withScheduledDateTimeZone(String scheduledDateTimeZone) {
        this.scheduledDateTimeZone = scheduledDateTimeZone;
        return this;
    }

    /**
     * Get the update property: settings for management information for the hostpool update operation. If none is
     * provided the update will use the settings saved in the sessionHostManagement object.
     *
     * @return the update value.
     */
    public HostPoolUpdateConfigurationPatchProperties update() {
        return this.update;
    }

    /**
     * Set the update property: settings for management information for the hostpool update operation. If none is
     * provided the update will use the settings saved in the sessionHostManagement object.
     *
     * @param update the update value to set.
     * @return the UpdateSessionHostsRequestBody object itself.
     */
    public UpdateSessionHostsRequestBody withUpdate(HostPoolUpdateConfigurationPatchProperties update) {
        this.update = update;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (update() != null) {
            update().validate();
        }
    }
}
