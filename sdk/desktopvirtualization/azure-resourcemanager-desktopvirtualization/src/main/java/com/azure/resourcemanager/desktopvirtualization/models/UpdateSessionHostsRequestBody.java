// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.desktopvirtualization.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Object containing the definition for properties to be used for a sessionHostUpdate operation.
 */
@Fluent
public final class UpdateSessionHostsRequestBody implements JsonSerializable<UpdateSessionHostsRequestBody> {
    /*
     * The timestamp that the update validation is scheduled for. If none is provided, the update will be executed
     * immediately
     */
    private OffsetDateTime scheduledDateTime;

    /*
     * The timeZone as defined in https://docs.microsoft.com/dotnet/api/system.timezoneinfo.findsystemtimezonebyid.
     */
    private String scheduledDateTimeZone;

    /*
     * settings for management information for the hostpool update operation. If none is provided the update will use
     * the settings saved in the sessionHostManagement object.
     */
    private HostPoolUpdateConfigurationPatchProperties update;

    /**
     * Creates an instance of UpdateSessionHostsRequestBody class.
     */
    public UpdateSessionHostsRequestBody() {
    }

    /**
     * Get the scheduledDateTime property: The timestamp that the update validation is scheduled for. If none is
     * provided, the update will be executed immediately.
     * 
     * @return the scheduledDateTime value.
     */
    public OffsetDateTime scheduledDateTime() {
        return this.scheduledDateTime;
    }

    /**
     * Set the scheduledDateTime property: The timestamp that the update validation is scheduled for. If none is
     * provided, the update will be executed immediately.
     * 
     * @param scheduledDateTime the scheduledDateTime value to set.
     * @return the UpdateSessionHostsRequestBody object itself.
     */
    public UpdateSessionHostsRequestBody withScheduledDateTime(OffsetDateTime scheduledDateTime) {
        this.scheduledDateTime = scheduledDateTime;
        return this;
    }

    /**
     * Get the scheduledDateTimeZone property: The timeZone as defined in
     * https://docs.microsoft.com/dotnet/api/system.timezoneinfo.findsystemtimezonebyid.
     * 
     * @return the scheduledDateTimeZone value.
     */
    public String scheduledDateTimeZone() {
        return this.scheduledDateTimeZone;
    }

    /**
     * Set the scheduledDateTimeZone property: The timeZone as defined in
     * https://docs.microsoft.com/dotnet/api/system.timezoneinfo.findsystemtimezonebyid.
     * 
     * @param scheduledDateTimeZone the scheduledDateTimeZone value to set.
     * @return the UpdateSessionHostsRequestBody object itself.
     */
    public UpdateSessionHostsRequestBody withScheduledDateTimeZone(String scheduledDateTimeZone) {
        this.scheduledDateTimeZone = scheduledDateTimeZone;
        return this;
    }

    /**
     * Get the update property: settings for management information for the hostpool update operation. If none is
     * provided the update will use the settings saved in the sessionHostManagement object.
     * 
     * @return the update value.
     */
    public HostPoolUpdateConfigurationPatchProperties update() {
        return this.update;
    }

    /**
     * Set the update property: settings for management information for the hostpool update operation. If none is
     * provided the update will use the settings saved in the sessionHostManagement object.
     * 
     * @param update the update value to set.
     * @return the UpdateSessionHostsRequestBody object itself.
     */
    public UpdateSessionHostsRequestBody withUpdate(HostPoolUpdateConfigurationPatchProperties update) {
        this.update = update;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (update() != null) {
            update().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("scheduledDateTime",
            this.scheduledDateTime == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.scheduledDateTime));
        jsonWriter.writeStringField("scheduledDateTimeZone", this.scheduledDateTimeZone);
        jsonWriter.writeJsonField("update", this.update);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UpdateSessionHostsRequestBody from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UpdateSessionHostsRequestBody if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the UpdateSessionHostsRequestBody.
     */
    public static UpdateSessionHostsRequestBody fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            UpdateSessionHostsRequestBody deserializedUpdateSessionHostsRequestBody
                = new UpdateSessionHostsRequestBody();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("scheduledDateTime".equals(fieldName)) {
                    deserializedUpdateSessionHostsRequestBody.scheduledDateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("scheduledDateTimeZone".equals(fieldName)) {
                    deserializedUpdateSessionHostsRequestBody.scheduledDateTimeZone = reader.getString();
                } else if ("update".equals(fieldName)) {
                    deserializedUpdateSessionHostsRequestBody.update
                        = HostPoolUpdateConfigurationPatchProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUpdateSessionHostsRequestBody;
        });
    }
}
