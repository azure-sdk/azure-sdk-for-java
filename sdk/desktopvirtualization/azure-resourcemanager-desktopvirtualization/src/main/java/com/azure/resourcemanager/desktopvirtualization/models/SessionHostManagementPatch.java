// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.desktopvirtualization.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.desktopvirtualization.fluent.models.SessionHostManagementPatchProperties;
import java.io.IOException;

/**
 * Represents a SessionHostManagementPatch definition.
 */
@Fluent
public final class SessionHostManagementPatch implements JsonSerializable<SessionHostManagementPatch> {
    /*
     * Detailed properties for SessionHostManagementPatch
     */
    private SessionHostManagementPatchProperties innerProperties;

    /**
     * Creates an instance of SessionHostManagementPatch class.
     */
    public SessionHostManagementPatch() {
    }

    /**
     * Get the innerProperties property: Detailed properties for SessionHostManagementPatch.
     * 
     * @return the innerProperties value.
     */
    private SessionHostManagementPatchProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the scheduledDateTimeZone property: Time zone for sessionHostManagement operations as defined in
     * https://docs.microsoft.com/dotnet/api/system.timezoneinfo.findsystemtimezonebyid. Must be set if useLocalTime is
     * true.
     * 
     * @return the scheduledDateTimeZone value.
     */
    public String scheduledDateTimeZone() {
        return this.innerProperties() == null ? null : this.innerProperties().scheduledDateTimeZone();
    }

    /**
     * Set the scheduledDateTimeZone property: Time zone for sessionHostManagement operations as defined in
     * https://docs.microsoft.com/dotnet/api/system.timezoneinfo.findsystemtimezonebyid. Must be set if useLocalTime is
     * true.
     * 
     * @param scheduledDateTimeZone the scheduledDateTimeZone value to set.
     * @return the SessionHostManagementPatch object itself.
     */
    public SessionHostManagementPatch withScheduledDateTimeZone(String scheduledDateTimeZone) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SessionHostManagementPatchProperties();
        }
        this.innerProperties().withScheduledDateTimeZone(scheduledDateTimeZone);
        return this;
    }

    /**
     * Get the update property: Parameters for a hostpool update.
     * 
     * @return the update value.
     */
    public HostPoolUpdateConfigurationPatchProperties update() {
        return this.innerProperties() == null ? null : this.innerProperties().update();
    }

    /**
     * Set the update property: Parameters for a hostpool update.
     * 
     * @param update the update value to set.
     * @return the SessionHostManagementPatch object itself.
     */
    public SessionHostManagementPatch withUpdate(HostPoolUpdateConfigurationPatchProperties update) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SessionHostManagementPatchProperties();
        }
        this.innerProperties().withUpdate(update);
        return this;
    }

    /**
     * Get the provisioning property: Parameters that apply when session hosts are provisioned.
     * 
     * @return the provisioning value.
     */
    public SessionHostProvisioningConfigurationPatchProperties provisioning() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioning();
    }

    /**
     * Set the provisioning property: Parameters that apply when session hosts are provisioned.
     * 
     * @param provisioning the provisioning value to set.
     * @return the SessionHostManagementPatch object itself.
     */
    public SessionHostManagementPatch
        withProvisioning(SessionHostProvisioningConfigurationPatchProperties provisioning) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SessionHostManagementPatchProperties();
        }
        this.innerProperties().withProvisioning(provisioning);
        return this;
    }

    /**
     * Get the failedSessionHostCleanupPolicy property: The policy that should be applied when the Session Host
     * provisioning operation fails.
     * 
     * @return the failedSessionHostCleanupPolicy value.
     */
    public FailedSessionHostCleanupPolicyShc failedSessionHostCleanupPolicy() {
        return this.innerProperties() == null ? null : this.innerProperties().failedSessionHostCleanupPolicy();
    }

    /**
     * Set the failedSessionHostCleanupPolicy property: The policy that should be applied when the Session Host
     * provisioning operation fails.
     * 
     * @param failedSessionHostCleanupPolicy the failedSessionHostCleanupPolicy value to set.
     * @return the SessionHostManagementPatch object itself.
     */
    public SessionHostManagementPatch
        withFailedSessionHostCleanupPolicy(FailedSessionHostCleanupPolicyShc failedSessionHostCleanupPolicy) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SessionHostManagementPatchProperties();
        }
        this.innerProperties().withFailedSessionHostCleanupPolicy(failedSessionHostCleanupPolicy);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SessionHostManagementPatch from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SessionHostManagementPatch if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SessionHostManagementPatch.
     */
    public static SessionHostManagementPatch fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SessionHostManagementPatch deserializedSessionHostManagementPatch = new SessionHostManagementPatch();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("properties".equals(fieldName)) {
                    deserializedSessionHostManagementPatch.innerProperties
                        = SessionHostManagementPatchProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSessionHostManagementPatch;
        });
    }
}
