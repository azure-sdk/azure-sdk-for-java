// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.desktopvirtualization.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.desktopvirtualization.fluent.ActiveSessionHostConfigurationsClient;
import com.azure.resourcemanager.desktopvirtualization.fluent.models.ActiveSessionHostConfigurationInner;
import com.azure.resourcemanager.desktopvirtualization.models.ActiveSessionHostConfiguration;
import com.azure.resourcemanager.desktopvirtualization.models.ActiveSessionHostConfigurations;

public final class ActiveSessionHostConfigurationsImpl implements ActiveSessionHostConfigurations {
    private static final ClientLogger LOGGER = new ClientLogger(ActiveSessionHostConfigurationsImpl.class);

    private final ActiveSessionHostConfigurationsClient innerClient;

    private final com.azure.resourcemanager.desktopvirtualization.DesktopVirtualizationManager serviceManager;

    public ActiveSessionHostConfigurationsImpl(ActiveSessionHostConfigurationsClient innerClient,
        com.azure.resourcemanager.desktopvirtualization.DesktopVirtualizationManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<ActiveSessionHostConfiguration> getWithResponse(String resourceGroupName, String hostPoolName,
        Context context) {
        Response<ActiveSessionHostConfigurationInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, hostPoolName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new ActiveSessionHostConfigurationImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ActiveSessionHostConfiguration get(String resourceGroupName, String hostPoolName) {
        ActiveSessionHostConfigurationInner inner = this.serviceClient().get(resourceGroupName, hostPoolName);
        if (inner != null) {
            return new ActiveSessionHostConfigurationImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<ActiveSessionHostConfiguration> listByHostPool(String resourceGroupName, String hostPoolName) {
        PagedIterable<ActiveSessionHostConfigurationInner> inner
            = this.serviceClient().listByHostPool(resourceGroupName, hostPoolName);
        return Utils.mapPage(inner, inner1 -> new ActiveSessionHostConfigurationImpl(inner1, this.manager()));
    }

    public PagedIterable<ActiveSessionHostConfiguration> listByHostPool(String resourceGroupName, String hostPoolName,
        Context context) {
        PagedIterable<ActiveSessionHostConfigurationInner> inner
            = this.serviceClient().listByHostPool(resourceGroupName, hostPoolName, context);
        return Utils.mapPage(inner, inner1 -> new ActiveSessionHostConfigurationImpl(inner1, this.manager()));
    }

    private ActiveSessionHostConfigurationsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.desktopvirtualization.DesktopVirtualizationManager manager() {
        return this.serviceManager;
    }
}
