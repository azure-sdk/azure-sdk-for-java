// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.desktopvirtualization.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;

/** The configurations of a hostpool update. */
@Fluent
public final class HostPoolUpdateConfigurationProperties {
    /*
     * Whether to save original disk. True by default.
     */
    @JsonProperty(value = "deleteOriginalVm")
    private Boolean deleteOriginalVm;

    /*
     * The maximum number of virtual machines to be removed during hostpool update.
     */
    @JsonProperty(value = "maxVmsRemoved", required = true)
    private int maxVmsRemoved;

    /*
     * Grace period before logging off users in minutes.
     */
    @JsonProperty(value = "logOffDelayMinutes", required = true)
    private int logOffDelayMinutes;

    /*
     * Log off message sent to user for logoff.
     */
    @JsonProperty(value = "logOffMessage", required = true)
    private String logOffMessage;

    /** Creates an instance of HostPoolUpdateConfigurationProperties class. */
    public HostPoolUpdateConfigurationProperties() {
    }

    /**
     * Get the deleteOriginalVm property: Whether to save original disk. True by default.
     *
     * @return the deleteOriginalVm value.
     */
    public Boolean deleteOriginalVm() {
        return this.deleteOriginalVm;
    }

    /**
     * Set the deleteOriginalVm property: Whether to save original disk. True by default.
     *
     * @param deleteOriginalVm the deleteOriginalVm value to set.
     * @return the HostPoolUpdateConfigurationProperties object itself.
     */
    public HostPoolUpdateConfigurationProperties withDeleteOriginalVm(Boolean deleteOriginalVm) {
        this.deleteOriginalVm = deleteOriginalVm;
        return this;
    }

    /**
     * Get the maxVmsRemoved property: The maximum number of virtual machines to be removed during hostpool update.
     *
     * @return the maxVmsRemoved value.
     */
    public int maxVmsRemoved() {
        return this.maxVmsRemoved;
    }

    /**
     * Set the maxVmsRemoved property: The maximum number of virtual machines to be removed during hostpool update.
     *
     * @param maxVmsRemoved the maxVmsRemoved value to set.
     * @return the HostPoolUpdateConfigurationProperties object itself.
     */
    public HostPoolUpdateConfigurationProperties withMaxVmsRemoved(int maxVmsRemoved) {
        this.maxVmsRemoved = maxVmsRemoved;
        return this;
    }

    /**
     * Get the logOffDelayMinutes property: Grace period before logging off users in minutes.
     *
     * @return the logOffDelayMinutes value.
     */
    public int logOffDelayMinutes() {
        return this.logOffDelayMinutes;
    }

    /**
     * Set the logOffDelayMinutes property: Grace period before logging off users in minutes.
     *
     * @param logOffDelayMinutes the logOffDelayMinutes value to set.
     * @return the HostPoolUpdateConfigurationProperties object itself.
     */
    public HostPoolUpdateConfigurationProperties withLogOffDelayMinutes(int logOffDelayMinutes) {
        this.logOffDelayMinutes = logOffDelayMinutes;
        return this;
    }

    /**
     * Get the logOffMessage property: Log off message sent to user for logoff.
     *
     * @return the logOffMessage value.
     */
    public String logOffMessage() {
        return this.logOffMessage;
    }

    /**
     * Set the logOffMessage property: Log off message sent to user for logoff.
     *
     * @param logOffMessage the logOffMessage value to set.
     * @return the HostPoolUpdateConfigurationProperties object itself.
     */
    public HostPoolUpdateConfigurationProperties withLogOffMessage(String logOffMessage) {
        this.logOffMessage = logOffMessage;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (logOffMessage() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property logOffMessage in model HostPoolUpdateConfigurationProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(HostPoolUpdateConfigurationProperties.class);
}
