// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.desktopvirtualization.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.desktopvirtualization.fluent.MsixPackagesClient;
import com.azure.resourcemanager.desktopvirtualization.fluent.models.MsixPackageInner;
import com.azure.resourcemanager.desktopvirtualization.models.MsixPackage;
import com.azure.resourcemanager.desktopvirtualization.models.MsixPackages;

public final class MsixPackagesImpl implements MsixPackages {
    private static final ClientLogger LOGGER = new ClientLogger(MsixPackagesImpl.class);

    private final MsixPackagesClient innerClient;

    private final com.azure.resourcemanager.desktopvirtualization.DesktopVirtualizationManager serviceManager;

    public MsixPackagesImpl(MsixPackagesClient innerClient,
        com.azure.resourcemanager.desktopvirtualization.DesktopVirtualizationManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<MsixPackage> list() {
        PagedIterable<MsixPackageInner> inner = this.serviceClient().list();
        return ResourceManagerUtils.mapPage(inner, inner1 -> new MsixPackageImpl(inner1, this.manager()));
    }

    public PagedIterable<MsixPackage> list(Integer pageSize, Boolean isDescending, Integer initialSkip,
        Context context) {
        PagedIterable<MsixPackageInner> inner = this.serviceClient().list(pageSize, isDescending, initialSkip, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new MsixPackageImpl(inner1, this.manager()));
    }

    public Response<MsixPackage> getWithResponse(String msixPackageFullName, Context context) {
        Response<MsixPackageInner> inner = this.serviceClient().getWithResponse(msixPackageFullName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new MsixPackageImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public MsixPackage get(String msixPackageFullName) {
        MsixPackageInner inner = this.serviceClient().get(msixPackageFullName);
        if (inner != null) {
            return new MsixPackageImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteWithResponse(String msixPackageFullName, Context context) {
        return this.serviceClient().deleteWithResponse(msixPackageFullName, context);
    }

    public void delete(String msixPackageFullName) {
        this.serviceClient().delete(msixPackageFullName);
    }

    public MsixPackage getById(String id) {
        String msixPackageFullName = ResourceManagerUtils.getValueFromIdByName(id, "msixPackages");
        if (msixPackageFullName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'msixPackages'.", id)));
        }
        return this.getWithResponse(msixPackageFullName, Context.NONE).getValue();
    }

    public Response<MsixPackage> getByIdWithResponse(String id, Context context) {
        String msixPackageFullName = ResourceManagerUtils.getValueFromIdByName(id, "msixPackages");
        if (msixPackageFullName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'msixPackages'.", id)));
        }
        return this.getWithResponse(msixPackageFullName, context);
    }

    public void deleteById(String id) {
        String msixPackageFullName = ResourceManagerUtils.getValueFromIdByName(id, "msixPackages");
        if (msixPackageFullName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'msixPackages'.", id)));
        }
        this.deleteWithResponse(msixPackageFullName, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String msixPackageFullName = ResourceManagerUtils.getValueFromIdByName(id, "msixPackages");
        if (msixPackageFullName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'msixPackages'.", id)));
        }
        return this.deleteWithResponse(msixPackageFullName, context);
    }

    private MsixPackagesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.desktopvirtualization.DesktopVirtualizationManager manager() {
        return this.serviceManager;
    }

    public MsixPackageImpl define(String name) {
        return new MsixPackageImpl(name, this.manager());
    }
}
