// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.desktopvirtualization.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Domain configurations of session hosts.
 */
@Fluent
public final class DomainInfoProperties implements JsonSerializable<DomainInfoProperties> {
    /*
     * The type of domain join done by the virtual machine.
     */
    private DomainJoinType joinType;

    /*
     * Active directory info. Only one should be populated based on the join type.
     */
    private ActiveDirectoryInfoProperties activeDirectoryInfo;

    /*
     * Azure active directory info. Only one should be populated based on the join type.
     */
    private AzureActiveDirectoryInfoProperties azureActiveDirectoryInfo;

    /**
     * Creates an instance of DomainInfoProperties class.
     */
    public DomainInfoProperties() {
    }

    /**
     * Get the joinType property: The type of domain join done by the virtual machine.
     * 
     * @return the joinType value.
     */
    public DomainJoinType joinType() {
        return this.joinType;
    }

    /**
     * Set the joinType property: The type of domain join done by the virtual machine.
     * 
     * @param joinType the joinType value to set.
     * @return the DomainInfoProperties object itself.
     */
    public DomainInfoProperties withJoinType(DomainJoinType joinType) {
        this.joinType = joinType;
        return this;
    }

    /**
     * Get the activeDirectoryInfo property: Active directory info. Only one should be populated based on the join type.
     * 
     * @return the activeDirectoryInfo value.
     */
    public ActiveDirectoryInfoProperties activeDirectoryInfo() {
        return this.activeDirectoryInfo;
    }

    /**
     * Set the activeDirectoryInfo property: Active directory info. Only one should be populated based on the join type.
     * 
     * @param activeDirectoryInfo the activeDirectoryInfo value to set.
     * @return the DomainInfoProperties object itself.
     */
    public DomainInfoProperties withActiveDirectoryInfo(ActiveDirectoryInfoProperties activeDirectoryInfo) {
        this.activeDirectoryInfo = activeDirectoryInfo;
        return this;
    }

    /**
     * Get the azureActiveDirectoryInfo property: Azure active directory info. Only one should be populated based on the
     * join type.
     * 
     * @return the azureActiveDirectoryInfo value.
     */
    public AzureActiveDirectoryInfoProperties azureActiveDirectoryInfo() {
        return this.azureActiveDirectoryInfo;
    }

    /**
     * Set the azureActiveDirectoryInfo property: Azure active directory info. Only one should be populated based on the
     * join type.
     * 
     * @param azureActiveDirectoryInfo the azureActiveDirectoryInfo value to set.
     * @return the DomainInfoProperties object itself.
     */
    public DomainInfoProperties
        withAzureActiveDirectoryInfo(AzureActiveDirectoryInfoProperties azureActiveDirectoryInfo) {
        this.azureActiveDirectoryInfo = azureActiveDirectoryInfo;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (joinType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property joinType in model DomainInfoProperties"));
        }
        if (activeDirectoryInfo() != null) {
            activeDirectoryInfo().validate();
        }
        if (azureActiveDirectoryInfo() != null) {
            azureActiveDirectoryInfo().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DomainInfoProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("joinType", this.joinType == null ? null : this.joinType.toString());
        jsonWriter.writeJsonField("activeDirectoryInfo", this.activeDirectoryInfo);
        jsonWriter.writeJsonField("azureActiveDirectoryInfo", this.azureActiveDirectoryInfo);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DomainInfoProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DomainInfoProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DomainInfoProperties.
     */
    public static DomainInfoProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DomainInfoProperties deserializedDomainInfoProperties = new DomainInfoProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("joinType".equals(fieldName)) {
                    deserializedDomainInfoProperties.joinType = DomainJoinType.fromString(reader.getString());
                } else if ("activeDirectoryInfo".equals(fieldName)) {
                    deserializedDomainInfoProperties.activeDirectoryInfo
                        = ActiveDirectoryInfoProperties.fromJson(reader);
                } else if ("azureActiveDirectoryInfo".equals(fieldName)) {
                    deserializedDomainInfoProperties.azureActiveDirectoryInfo
                        = AzureActiveDirectoryInfoProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDomainInfoProperties;
        });
    }
}
