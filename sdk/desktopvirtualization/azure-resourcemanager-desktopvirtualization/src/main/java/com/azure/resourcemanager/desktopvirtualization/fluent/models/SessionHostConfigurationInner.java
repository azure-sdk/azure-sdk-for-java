// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.desktopvirtualization.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.desktopvirtualization.models.BootDiagnosticsInfoProperties;
import com.azure.resourcemanager.desktopvirtualization.models.DiskInfoProperties;
import com.azure.resourcemanager.desktopvirtualization.models.DomainInfoProperties;
import com.azure.resourcemanager.desktopvirtualization.models.ImageInfoProperties;
import com.azure.resourcemanager.desktopvirtualization.models.KeyVaultCredentialsProperties;
import com.azure.resourcemanager.desktopvirtualization.models.NetworkInfoProperties;
import com.azure.resourcemanager.desktopvirtualization.models.ProvisioningStateShc;
import com.azure.resourcemanager.desktopvirtualization.models.SecurityInfoProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;

/** Represents a SessionHostConfiguration definition. */
@Fluent
public final class SessionHostConfigurationInner extends ProxyResource {
    /*
     * Detailed properties for SessionHostConfiguration
     */
    @JsonProperty(value = "properties", required = true)
    private SessionHostConfigurationProperties innerProperties = new SessionHostConfigurationProperties();

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /** Creates an instance of SessionHostConfigurationInner class. */
    public SessionHostConfigurationInner() {
    }

    /**
     * Get the innerProperties property: Detailed properties for SessionHostConfiguration.
     *
     * @return the innerProperties value.
     */
    private SessionHostConfigurationProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     *
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the version property: The timestamp of the last update.
     *
     * @return the version value.
     */
    public OffsetDateTime version() {
        return this.innerProperties() == null ? null : this.innerProperties().version();
    }

    /**
     * Get the friendlyName property: Friendly name to describe this version of the SessionHostConfiguration.
     *
     * @return the friendlyName value.
     */
    public String friendlyName() {
        return this.innerProperties() == null ? null : this.innerProperties().friendlyName();
    }

    /**
     * Set the friendlyName property: Friendly name to describe this version of the SessionHostConfiguration.
     *
     * @param friendlyName the friendlyName value to set.
     * @return the SessionHostConfigurationInner object itself.
     */
    public SessionHostConfigurationInner withFriendlyName(String friendlyName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SessionHostConfigurationProperties();
        }
        this.innerProperties().withFriendlyName(friendlyName);
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state of the Session Host Configuration.
     *
     * @return the provisioningState value.
     */
    public ProvisioningStateShc provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the vmTags property: Hashtable that lists key/value pair tags to apply to the VMs.
     *
     * @return the vmTags value.
     */
    public Map<String, String> vmTags() {
        return this.innerProperties() == null ? null : this.innerProperties().vmTags();
    }

    /**
     * Set the vmTags property: Hashtable that lists key/value pair tags to apply to the VMs.
     *
     * @param vmTags the vmTags value to set.
     * @return the SessionHostConfigurationInner object itself.
     */
    public SessionHostConfigurationInner withVmTags(Map<String, String> vmTags) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SessionHostConfigurationProperties();
        }
        this.innerProperties().withVmTags(vmTags);
        return this;
    }

    /**
     * Get the vmLocation property: The Location for the session host to be created in. It will default to the location
     * of the hostpool if not provided.
     *
     * @return the vmLocation value.
     */
    public String vmLocation() {
        return this.innerProperties() == null ? null : this.innerProperties().vmLocation();
    }

    /**
     * Set the vmLocation property: The Location for the session host to be created in. It will default to the location
     * of the hostpool if not provided.
     *
     * @param vmLocation the vmLocation value to set.
     * @return the SessionHostConfigurationInner object itself.
     */
    public SessionHostConfigurationInner withVmLocation(String vmLocation) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SessionHostConfigurationProperties();
        }
        this.innerProperties().withVmLocation(vmLocation);
        return this;
    }

    /**
     * Get the vmResourceGroup property: The ResourceGroup for the session hosts to be created in. It will default to
     * the ResourceGroup of the hostpool if not provided.
     *
     * @return the vmResourceGroup value.
     */
    public String vmResourceGroup() {
        return this.innerProperties() == null ? null : this.innerProperties().vmResourceGroup();
    }

    /**
     * Set the vmResourceGroup property: The ResourceGroup for the session hosts to be created in. It will default to
     * the ResourceGroup of the hostpool if not provided.
     *
     * @param vmResourceGroup the vmResourceGroup value to set.
     * @return the SessionHostConfigurationInner object itself.
     */
    public SessionHostConfigurationInner withVmResourceGroup(String vmResourceGroup) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SessionHostConfigurationProperties();
        }
        this.innerProperties().withVmResourceGroup(vmResourceGroup);
        return this;
    }

    /**
     * Get the vmNamePrefix property: The prefix that should be associated with session host names.
     *
     * @return the vmNamePrefix value.
     */
    public String vmNamePrefix() {
        return this.innerProperties() == null ? null : this.innerProperties().vmNamePrefix();
    }

    /**
     * Set the vmNamePrefix property: The prefix that should be associated with session host names.
     *
     * @param vmNamePrefix the vmNamePrefix value to set.
     * @return the SessionHostConfigurationInner object itself.
     */
    public SessionHostConfigurationInner withVmNamePrefix(String vmNamePrefix) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SessionHostConfigurationProperties();
        }
        this.innerProperties().withVmNamePrefix(vmNamePrefix);
        return this;
    }

    /**
     * Get the availabilityZones property: Value for availability zones to be used by the session host. Should be from
     * [1,2,3].
     *
     * @return the availabilityZones value.
     */
    public List<Integer> availabilityZones() {
        return this.innerProperties() == null ? null : this.innerProperties().availabilityZones();
    }

    /**
     * Set the availabilityZones property: Value for availability zones to be used by the session host. Should be from
     * [1,2,3].
     *
     * @param availabilityZones the availabilityZones value to set.
     * @return the SessionHostConfigurationInner object itself.
     */
    public SessionHostConfigurationInner withAvailabilityZones(List<Integer> availabilityZones) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SessionHostConfigurationProperties();
        }
        this.innerProperties().withAvailabilityZones(availabilityZones);
        return this;
    }

    /**
     * Get the networkInfo property: Network information.
     *
     * @return the networkInfo value.
     */
    public NetworkInfoProperties networkInfo() {
        return this.innerProperties() == null ? null : this.innerProperties().networkInfo();
    }

    /**
     * Set the networkInfo property: Network information.
     *
     * @param networkInfo the networkInfo value to set.
     * @return the SessionHostConfigurationInner object itself.
     */
    public SessionHostConfigurationInner withNetworkInfo(NetworkInfoProperties networkInfo) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SessionHostConfigurationProperties();
        }
        this.innerProperties().withNetworkInfo(networkInfo);
        return this;
    }

    /**
     * Get the vmSizeId property: The id of the size of a virtual machine connected to a hostpool.
     *
     * @return the vmSizeId value.
     */
    public String vmSizeId() {
        return this.innerProperties() == null ? null : this.innerProperties().vmSizeId();
    }

    /**
     * Set the vmSizeId property: The id of the size of a virtual machine connected to a hostpool.
     *
     * @param vmSizeId the vmSizeId value to set.
     * @return the SessionHostConfigurationInner object itself.
     */
    public SessionHostConfigurationInner withVmSizeId(String vmSizeId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SessionHostConfigurationProperties();
        }
        this.innerProperties().withVmSizeId(vmSizeId);
        return this;
    }

    /**
     * Get the diskInfo property: Disk information.
     *
     * @return the diskInfo value.
     */
    public DiskInfoProperties diskInfo() {
        return this.innerProperties() == null ? null : this.innerProperties().diskInfo();
    }

    /**
     * Set the diskInfo property: Disk information.
     *
     * @param diskInfo the diskInfo value to set.
     * @return the SessionHostConfigurationInner object itself.
     */
    public SessionHostConfigurationInner withDiskInfo(DiskInfoProperties diskInfo) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SessionHostConfigurationProperties();
        }
        this.innerProperties().withDiskInfo(diskInfo);
        return this;
    }

    /**
     * Get the customConfigurationScriptUrl property: The uri to the storage blob containing the arm template to be run
     * on the virtual machine after provisioning.
     *
     * @return the customConfigurationScriptUrl value.
     */
    public String customConfigurationScriptUrl() {
        return this.innerProperties() == null ? null : this.innerProperties().customConfigurationScriptUrl();
    }

    /**
     * Set the customConfigurationScriptUrl property: The uri to the storage blob containing the arm template to be run
     * on the virtual machine after provisioning.
     *
     * @param customConfigurationScriptUrl the customConfigurationScriptUrl value to set.
     * @return the SessionHostConfigurationInner object itself.
     */
    public SessionHostConfigurationInner withCustomConfigurationScriptUrl(String customConfigurationScriptUrl) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SessionHostConfigurationProperties();
        }
        this.innerProperties().withCustomConfigurationScriptUrl(customConfigurationScriptUrl);
        return this;
    }

    /**
     * Get the imageInfo property: Image configurations of HostPool.
     *
     * @return the imageInfo value.
     */
    public ImageInfoProperties imageInfo() {
        return this.innerProperties() == null ? null : this.innerProperties().imageInfo();
    }

    /**
     * Set the imageInfo property: Image configurations of HostPool.
     *
     * @param imageInfo the imageInfo value to set.
     * @return the SessionHostConfigurationInner object itself.
     */
    public SessionHostConfigurationInner withImageInfo(ImageInfoProperties imageInfo) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SessionHostConfigurationProperties();
        }
        this.innerProperties().withImageInfo(imageInfo);
        return this;
    }

    /**
     * Get the domainInfo property: Domain configurations of session hosts.
     *
     * @return the domainInfo value.
     */
    public DomainInfoProperties domainInfo() {
        return this.innerProperties() == null ? null : this.innerProperties().domainInfo();
    }

    /**
     * Set the domainInfo property: Domain configurations of session hosts.
     *
     * @param domainInfo the domainInfo value to set.
     * @return the SessionHostConfigurationInner object itself.
     */
    public SessionHostConfigurationInner withDomainInfo(DomainInfoProperties domainInfo) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SessionHostConfigurationProperties();
        }
        this.innerProperties().withDomainInfo(domainInfo);
        return this;
    }

    /**
     * Get the securityInfo property: Security information.
     *
     * @return the securityInfo value.
     */
    public SecurityInfoProperties securityInfo() {
        return this.innerProperties() == null ? null : this.innerProperties().securityInfo();
    }

    /**
     * Set the securityInfo property: Security information.
     *
     * @param securityInfo the securityInfo value to set.
     * @return the SessionHostConfigurationInner object itself.
     */
    public SessionHostConfigurationInner withSecurityInfo(SecurityInfoProperties securityInfo) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SessionHostConfigurationProperties();
        }
        this.innerProperties().withSecurityInfo(securityInfo);
        return this;
    }

    /**
     * Get the vmAdminCredentials property: Local Admin credentials for session hosts.
     *
     * @return the vmAdminCredentials value.
     */
    public KeyVaultCredentialsProperties vmAdminCredentials() {
        return this.innerProperties() == null ? null : this.innerProperties().vmAdminCredentials();
    }

    /**
     * Set the vmAdminCredentials property: Local Admin credentials for session hosts.
     *
     * @param vmAdminCredentials the vmAdminCredentials value to set.
     * @return the SessionHostConfigurationInner object itself.
     */
    public SessionHostConfigurationInner withVmAdminCredentials(KeyVaultCredentialsProperties vmAdminCredentials) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SessionHostConfigurationProperties();
        }
        this.innerProperties().withVmAdminCredentials(vmAdminCredentials);
        return this;
    }

    /**
     * Get the bootDiagnosticsInfo property: Boot Diagnostics information.
     *
     * @return the bootDiagnosticsInfo value.
     */
    public BootDiagnosticsInfoProperties bootDiagnosticsInfo() {
        return this.innerProperties() == null ? null : this.innerProperties().bootDiagnosticsInfo();
    }

    /**
     * Set the bootDiagnosticsInfo property: Boot Diagnostics information.
     *
     * @param bootDiagnosticsInfo the bootDiagnosticsInfo value to set.
     * @return the SessionHostConfigurationInner object itself.
     */
    public SessionHostConfigurationInner withBootDiagnosticsInfo(BootDiagnosticsInfoProperties bootDiagnosticsInfo) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SessionHostConfigurationProperties();
        }
        this.innerProperties().withBootDiagnosticsInfo(bootDiagnosticsInfo);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property innerProperties in model SessionHostConfigurationInner"));
        } else {
            innerProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(SessionHostConfigurationInner.class);
}
