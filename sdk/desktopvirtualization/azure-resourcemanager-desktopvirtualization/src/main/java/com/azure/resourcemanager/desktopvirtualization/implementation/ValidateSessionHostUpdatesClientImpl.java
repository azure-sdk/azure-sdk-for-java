// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.desktopvirtualization.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.desktopvirtualization.fluent.ValidateSessionHostUpdatesClient;
import com.azure.resourcemanager.desktopvirtualization.fluent.models.ValidateSessionHostUpdateRequestBodyInner;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in ValidateSessionHostUpdatesClient.
 */
public final class ValidateSessionHostUpdatesClientImpl implements ValidateSessionHostUpdatesClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final ValidateSessionHostUpdatesService service;

    /**
     * The service client containing this operation class.
     */
    private final DesktopVirtualizationApiClientImpl client;

    /**
     * Initializes an instance of ValidateSessionHostUpdatesClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    ValidateSessionHostUpdatesClientImpl(DesktopVirtualizationApiClientImpl client) {
        this.service = RestProxy.create(ValidateSessionHostUpdatesService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for DesktopVirtualizationApiClientValidateSessionHostUpdates to be used
     * by the proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "DesktopVirtualizatio")
    public interface ValidateSessionHostUpdatesService {
        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/hostPools/{hostPoolName}/sessionHostManagements/default/validateSessionHostUpdate")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> post(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("hostPoolName") String hostPoolName,
            @BodyParam("application/json") ValidateSessionHostUpdateRequestBodyInner validateSessionHostUpdateRequestBody,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Validates a session host update operation for validation errors. When Session Host Configuration and Session Host
     * Management values are not provided the ones saved in the Host Pool will be used.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group.
     * @param validateSessionHostUpdateRequestBody Object containing the definition for properties to be used in the
     * sessionHostUpdate validation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Flux<ByteBuffer>>> postWithResponseAsync(String resourceGroupName, String hostPoolName,
        ValidateSessionHostUpdateRequestBodyInner validateSessionHostUpdateRequestBody) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (hostPoolName == null) {
            return Mono.error(new IllegalArgumentException("Parameter hostPoolName is required and cannot be null."));
        }
        if (validateSessionHostUpdateRequestBody != null) {
            validateSessionHostUpdateRequestBody.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.post(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, hostPoolName, validateSessionHostUpdateRequestBody,
                accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Validates a session host update operation for validation errors. When Session Host Configuration and Session Host
     * Management values are not provided the ones saved in the Host Pool will be used.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group.
     * @param validateSessionHostUpdateRequestBody Object containing the definition for properties to be used in the
     * sessionHostUpdate validation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> postWithResponseAsync(String resourceGroupName, String hostPoolName,
        ValidateSessionHostUpdateRequestBodyInner validateSessionHostUpdateRequestBody, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (hostPoolName == null) {
            return Mono.error(new IllegalArgumentException("Parameter hostPoolName is required and cannot be null."));
        }
        if (validateSessionHostUpdateRequestBody != null) {
            validateSessionHostUpdateRequestBody.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.post(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, hostPoolName, validateSessionHostUpdateRequestBody, accept, context);
    }

    /**
     * Validates a session host update operation for validation errors. When Session Host Configuration and Session Host
     * Management values are not provided the ones saved in the Host Pool will be used.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group.
     * @param validateSessionHostUpdateRequestBody Object containing the definition for properties to be used in the
     * sessionHostUpdate validation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<PollResult<Void>, Void> beginPostAsync(String resourceGroupName, String hostPoolName,
        ValidateSessionHostUpdateRequestBodyInner validateSessionHostUpdateRequestBody) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = postWithResponseAsync(resourceGroupName, hostPoolName, validateSessionHostUpdateRequestBody);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            this.client.getContext());
    }

    /**
     * Validates a session host update operation for validation errors. When Session Host Configuration and Session Host
     * Management values are not provided the ones saved in the Host Pool will be used.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<PollResult<Void>, Void> beginPostAsync(String resourceGroupName, String hostPoolName) {
        final ValidateSessionHostUpdateRequestBodyInner validateSessionHostUpdateRequestBody = null;
        Mono<Response<Flux<ByteBuffer>>> mono
            = postWithResponseAsync(resourceGroupName, hostPoolName, validateSessionHostUpdateRequestBody);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            this.client.getContext());
    }

    /**
     * Validates a session host update operation for validation errors. When Session Host Configuration and Session Host
     * Management values are not provided the ones saved in the Host Pool will be used.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group.
     * @param validateSessionHostUpdateRequestBody Object containing the definition for properties to be used in the
     * sessionHostUpdate validation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginPostAsync(String resourceGroupName, String hostPoolName,
        ValidateSessionHostUpdateRequestBodyInner validateSessionHostUpdateRequestBody, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono
            = postWithResponseAsync(resourceGroupName, hostPoolName, validateSessionHostUpdateRequestBody, context);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            context);
    }

    /**
     * Validates a session host update operation for validation errors. When Session Host Configuration and Session Host
     * Management values are not provided the ones saved in the Host Pool will be used.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginPost(String resourceGroupName, String hostPoolName) {
        final ValidateSessionHostUpdateRequestBodyInner validateSessionHostUpdateRequestBody = null;
        return this.beginPostAsync(resourceGroupName, hostPoolName, validateSessionHostUpdateRequestBody)
            .getSyncPoller();
    }

    /**
     * Validates a session host update operation for validation errors. When Session Host Configuration and Session Host
     * Management values are not provided the ones saved in the Host Pool will be used.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group.
     * @param validateSessionHostUpdateRequestBody Object containing the definition for properties to be used in the
     * sessionHostUpdate validation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginPost(String resourceGroupName, String hostPoolName,
        ValidateSessionHostUpdateRequestBodyInner validateSessionHostUpdateRequestBody, Context context) {
        return this.beginPostAsync(resourceGroupName, hostPoolName, validateSessionHostUpdateRequestBody, context)
            .getSyncPoller();
    }

    /**
     * Validates a session host update operation for validation errors. When Session Host Configuration and Session Host
     * Management values are not provided the ones saved in the Host Pool will be used.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group.
     * @param validateSessionHostUpdateRequestBody Object containing the definition for properties to be used in the
     * sessionHostUpdate validation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> postAsync(String resourceGroupName, String hostPoolName,
        ValidateSessionHostUpdateRequestBodyInner validateSessionHostUpdateRequestBody) {
        return beginPostAsync(resourceGroupName, hostPoolName, validateSessionHostUpdateRequestBody).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Validates a session host update operation for validation errors. When Session Host Configuration and Session Host
     * Management values are not provided the ones saved in the Host Pool will be used.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> postAsync(String resourceGroupName, String hostPoolName) {
        final ValidateSessionHostUpdateRequestBodyInner validateSessionHostUpdateRequestBody = null;
        return beginPostAsync(resourceGroupName, hostPoolName, validateSessionHostUpdateRequestBody).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Validates a session host update operation for validation errors. When Session Host Configuration and Session Host
     * Management values are not provided the ones saved in the Host Pool will be used.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group.
     * @param validateSessionHostUpdateRequestBody Object containing the definition for properties to be used in the
     * sessionHostUpdate validation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> postAsync(String resourceGroupName, String hostPoolName,
        ValidateSessionHostUpdateRequestBodyInner validateSessionHostUpdateRequestBody, Context context) {
        return beginPostAsync(resourceGroupName, hostPoolName, validateSessionHostUpdateRequestBody, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Validates a session host update operation for validation errors. When Session Host Configuration and Session Host
     * Management values are not provided the ones saved in the Host Pool will be used.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void post(String resourceGroupName, String hostPoolName) {
        final ValidateSessionHostUpdateRequestBodyInner validateSessionHostUpdateRequestBody = null;
        postAsync(resourceGroupName, hostPoolName, validateSessionHostUpdateRequestBody).block();
    }

    /**
     * Validates a session host update operation for validation errors. When Session Host Configuration and Session Host
     * Management values are not provided the ones saved in the Host Pool will be used.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group.
     * @param validateSessionHostUpdateRequestBody Object containing the definition for properties to be used in the
     * sessionHostUpdate validation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void post(String resourceGroupName, String hostPoolName,
        ValidateSessionHostUpdateRequestBodyInner validateSessionHostUpdateRequestBody, Context context) {
        postAsync(resourceGroupName, hostPoolName, validateSessionHostUpdateRequestBody, context).block();
    }
}
