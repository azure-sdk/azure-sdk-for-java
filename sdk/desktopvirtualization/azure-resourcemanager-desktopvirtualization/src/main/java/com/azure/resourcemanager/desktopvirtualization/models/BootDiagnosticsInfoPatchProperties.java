// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.desktopvirtualization.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Boot Diagnostics is a debugging feature which allows you to view Console Output and Screenshot to diagnose VM status.
 * &lt;br&gt;&lt;br&gt; You can easily view the output of your console log. &lt;br&gt;&lt;br&gt; Azure also enables you
 * to see a screenshot of the VM from the hypervisor.
 */
@Fluent
public final class BootDiagnosticsInfoPatchProperties implements JsonSerializable<BootDiagnosticsInfoPatchProperties> {
    /*
     * Whether boot diagnostics should be enabled on the Virtual Machine.
     */
    private Boolean enabled;

    /*
     * Uri of the storage account to use for placing the console output and screenshot. <br><br>If storageUri is not
     * specified while enabling boot diagnostics, managed storage will be used.
     */
    private String storageUri;

    /**
     * Creates an instance of BootDiagnosticsInfoPatchProperties class.
     */
    public BootDiagnosticsInfoPatchProperties() {
    }

    /**
     * Get the enabled property: Whether boot diagnostics should be enabled on the Virtual Machine.
     * 
     * @return the enabled value.
     */
    public Boolean enabled() {
        return this.enabled;
    }

    /**
     * Set the enabled property: Whether boot diagnostics should be enabled on the Virtual Machine.
     * 
     * @param enabled the enabled value to set.
     * @return the BootDiagnosticsInfoPatchProperties object itself.
     */
    public BootDiagnosticsInfoPatchProperties withEnabled(Boolean enabled) {
        this.enabled = enabled;
        return this;
    }

    /**
     * Get the storageUri property: Uri of the storage account to use for placing the console output and screenshot.
     * &lt;br&gt;&lt;br&gt;If storageUri is not specified while enabling boot diagnostics, managed storage will be used.
     * 
     * @return the storageUri value.
     */
    public String storageUri() {
        return this.storageUri;
    }

    /**
     * Set the storageUri property: Uri of the storage account to use for placing the console output and screenshot.
     * &lt;br&gt;&lt;br&gt;If storageUri is not specified while enabling boot diagnostics, managed storage will be used.
     * 
     * @param storageUri the storageUri value to set.
     * @return the BootDiagnosticsInfoPatchProperties object itself.
     */
    public BootDiagnosticsInfoPatchProperties withStorageUri(String storageUri) {
        this.storageUri = storageUri;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("enabled", this.enabled);
        jsonWriter.writeStringField("storageUri", this.storageUri);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BootDiagnosticsInfoPatchProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BootDiagnosticsInfoPatchProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the BootDiagnosticsInfoPatchProperties.
     */
    public static BootDiagnosticsInfoPatchProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BootDiagnosticsInfoPatchProperties deserializedBootDiagnosticsInfoPatchProperties
                = new BootDiagnosticsInfoPatchProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("enabled".equals(fieldName)) {
                    deserializedBootDiagnosticsInfoPatchProperties.enabled = reader.getNullable(JsonReader::getBoolean);
                } else if ("storageUri".equals(fieldName)) {
                    deserializedBootDiagnosticsInfoPatchProperties.storageUri = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBootDiagnosticsInfoPatchProperties;
        });
    }
}
