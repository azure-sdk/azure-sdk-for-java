// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.desktopvirtualization.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.desktopvirtualization.models.SessionHostManagementOperationProgress;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;

/**
 * Properties bag to hold custom RP properties for sessionHostManagement Update Statuses.
 */
@Fluent
public final class SessionHostManagementUpdateStatusPropertiesInner {
    /*
     * The Log Analytics.
     */
    @JsonProperty(value = "correlationId")
    private String correlationId;

    /*
     * Progress information on the sessionHostManagement operation.
     */
    @JsonProperty(value = "progress")
    private SessionHostManagementOperationProgress progress;

    /*
     * The timestamp that the update is scheduled for.
     */
    @JsonProperty(value = "scheduledDateTime")
    private OffsetDateTime scheduledDateTime;

    /*
     * SessionHostManagement properties used for the operation.
     */
    @JsonProperty(value = "sessionHostManagement")
    private SessionHostManagementInner sessionHostManagement;

    /**
     * Creates an instance of SessionHostManagementUpdateStatusPropertiesInner class.
     */
    public SessionHostManagementUpdateStatusPropertiesInner() {
    }

    /**
     * Get the correlationId property: The Log Analytics.
     * 
     * @return the correlationId value.
     */
    public String correlationId() {
        return this.correlationId;
    }

    /**
     * Set the correlationId property: The Log Analytics.
     * 
     * @param correlationId the correlationId value to set.
     * @return the SessionHostManagementUpdateStatusPropertiesInner object itself.
     */
    public SessionHostManagementUpdateStatusPropertiesInner withCorrelationId(String correlationId) {
        this.correlationId = correlationId;
        return this;
    }

    /**
     * Get the progress property: Progress information on the sessionHostManagement operation.
     * 
     * @return the progress value.
     */
    public SessionHostManagementOperationProgress progress() {
        return this.progress;
    }

    /**
     * Set the progress property: Progress information on the sessionHostManagement operation.
     * 
     * @param progress the progress value to set.
     * @return the SessionHostManagementUpdateStatusPropertiesInner object itself.
     */
    public SessionHostManagementUpdateStatusPropertiesInner
        withProgress(SessionHostManagementOperationProgress progress) {
        this.progress = progress;
        return this;
    }

    /**
     * Get the scheduledDateTime property: The timestamp that the update is scheduled for.
     * 
     * @return the scheduledDateTime value.
     */
    public OffsetDateTime scheduledDateTime() {
        return this.scheduledDateTime;
    }

    /**
     * Set the scheduledDateTime property: The timestamp that the update is scheduled for.
     * 
     * @param scheduledDateTime the scheduledDateTime value to set.
     * @return the SessionHostManagementUpdateStatusPropertiesInner object itself.
     */
    public SessionHostManagementUpdateStatusPropertiesInner withScheduledDateTime(OffsetDateTime scheduledDateTime) {
        this.scheduledDateTime = scheduledDateTime;
        return this;
    }

    /**
     * Get the sessionHostManagement property: SessionHostManagement properties used for the operation.
     * 
     * @return the sessionHostManagement value.
     */
    public SessionHostManagementInner sessionHostManagement() {
        return this.sessionHostManagement;
    }

    /**
     * Set the sessionHostManagement property: SessionHostManagement properties used for the operation.
     * 
     * @param sessionHostManagement the sessionHostManagement value to set.
     * @return the SessionHostManagementUpdateStatusPropertiesInner object itself.
     */
    public SessionHostManagementUpdateStatusPropertiesInner
        withSessionHostManagement(SessionHostManagementInner sessionHostManagement) {
        this.sessionHostManagement = sessionHostManagement;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (progress() != null) {
            progress().validate();
        }
        if (sessionHostManagement() != null) {
            sessionHostManagement().validate();
        }
    }
}
