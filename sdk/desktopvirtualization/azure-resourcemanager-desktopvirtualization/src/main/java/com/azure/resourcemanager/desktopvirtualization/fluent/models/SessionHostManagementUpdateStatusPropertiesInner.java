// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.desktopvirtualization.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.desktopvirtualization.models.SessionHostManagementOperationProgress;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * The current status of the session host update async operation.
 */
@Fluent
public final class SessionHostManagementUpdateStatusPropertiesInner
    implements JsonSerializable<SessionHostManagementUpdateStatusPropertiesInner> {
    /*
     * The Log Analytics.
     */
    private String correlationId;

    /*
     * Progress information on the sessionHostManagement operation.
     */
    private SessionHostManagementOperationProgress progress;

    /*
     * The timestamp that the update is scheduled for.
     */
    private OffsetDateTime scheduledDateTime;

    /*
     * SessionHostManagement properties used for the operation.
     */
    private SessionHostManagementInner sessionHostManagement;

    /**
     * Creates an instance of SessionHostManagementUpdateStatusPropertiesInner class.
     */
    public SessionHostManagementUpdateStatusPropertiesInner() {
    }

    /**
     * Get the correlationId property: The Log Analytics.
     * 
     * @return the correlationId value.
     */
    public String correlationId() {
        return this.correlationId;
    }

    /**
     * Set the correlationId property: The Log Analytics.
     * 
     * @param correlationId the correlationId value to set.
     * @return the SessionHostManagementUpdateStatusPropertiesInner object itself.
     */
    public SessionHostManagementUpdateStatusPropertiesInner withCorrelationId(String correlationId) {
        this.correlationId = correlationId;
        return this;
    }

    /**
     * Get the progress property: Progress information on the sessionHostManagement operation.
     * 
     * @return the progress value.
     */
    public SessionHostManagementOperationProgress progress() {
        return this.progress;
    }

    /**
     * Set the progress property: Progress information on the sessionHostManagement operation.
     * 
     * @param progress the progress value to set.
     * @return the SessionHostManagementUpdateStatusPropertiesInner object itself.
     */
    public SessionHostManagementUpdateStatusPropertiesInner
        withProgress(SessionHostManagementOperationProgress progress) {
        this.progress = progress;
        return this;
    }

    /**
     * Get the scheduledDateTime property: The timestamp that the update is scheduled for.
     * 
     * @return the scheduledDateTime value.
     */
    public OffsetDateTime scheduledDateTime() {
        return this.scheduledDateTime;
    }

    /**
     * Set the scheduledDateTime property: The timestamp that the update is scheduled for.
     * 
     * @param scheduledDateTime the scheduledDateTime value to set.
     * @return the SessionHostManagementUpdateStatusPropertiesInner object itself.
     */
    public SessionHostManagementUpdateStatusPropertiesInner withScheduledDateTime(OffsetDateTime scheduledDateTime) {
        this.scheduledDateTime = scheduledDateTime;
        return this;
    }

    /**
     * Get the sessionHostManagement property: SessionHostManagement properties used for the operation.
     * 
     * @return the sessionHostManagement value.
     */
    public SessionHostManagementInner sessionHostManagement() {
        return this.sessionHostManagement;
    }

    /**
     * Set the sessionHostManagement property: SessionHostManagement properties used for the operation.
     * 
     * @param sessionHostManagement the sessionHostManagement value to set.
     * @return the SessionHostManagementUpdateStatusPropertiesInner object itself.
     */
    public SessionHostManagementUpdateStatusPropertiesInner
        withSessionHostManagement(SessionHostManagementInner sessionHostManagement) {
        this.sessionHostManagement = sessionHostManagement;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (progress() != null) {
            progress().validate();
        }
        if (sessionHostManagement() != null) {
            sessionHostManagement().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("correlationId", this.correlationId);
        jsonWriter.writeJsonField("progress", this.progress);
        jsonWriter.writeStringField("scheduledDateTime",
            this.scheduledDateTime == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.scheduledDateTime));
        jsonWriter.writeJsonField("sessionHostManagement", this.sessionHostManagement);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SessionHostManagementUpdateStatusPropertiesInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SessionHostManagementUpdateStatusPropertiesInner if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SessionHostManagementUpdateStatusPropertiesInner.
     */
    public static SessionHostManagementUpdateStatusPropertiesInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SessionHostManagementUpdateStatusPropertiesInner deserializedSessionHostManagementUpdateStatusPropertiesInner
                = new SessionHostManagementUpdateStatusPropertiesInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("correlationId".equals(fieldName)) {
                    deserializedSessionHostManagementUpdateStatusPropertiesInner.correlationId = reader.getString();
                } else if ("progress".equals(fieldName)) {
                    deserializedSessionHostManagementUpdateStatusPropertiesInner.progress
                        = SessionHostManagementOperationProgress.fromJson(reader);
                } else if ("scheduledDateTime".equals(fieldName)) {
                    deserializedSessionHostManagementUpdateStatusPropertiesInner.scheduledDateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("sessionHostManagement".equals(fieldName)) {
                    deserializedSessionHostManagementUpdateStatusPropertiesInner.sessionHostManagement
                        = SessionHostManagementInner.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSessionHostManagementUpdateStatusPropertiesInner;
        });
    }
}
