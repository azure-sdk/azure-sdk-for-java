// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.desktopvirtualization.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/**
 * Resource collection API of HostPools.
 */
public interface HostPools {
    /**
     * List hostPools in subscription.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of HostPool definitions as paginated response with {@link PagedIterable}.
     */
    PagedIterable<HostPool> list();

    /**
     * List hostPools in subscription.
     * 
     * @param pageSize Number of items per page.
     * @param isDescending Indicates whether the collection is descending.
     * @param initialSkip Initial number of items to skip.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of HostPool definitions as paginated response with {@link PagedIterable}.
     */
    PagedIterable<HostPool> list(Integer pageSize, Boolean isDescending, Integer initialSkip, Context context);

    /**
     * List hostPools.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of HostPool definitions as paginated response with {@link PagedIterable}.
     */
    PagedIterable<HostPool> listByResourceGroup(String resourceGroupName);

    /**
     * List hostPools.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param pageSize Number of items per page.
     * @param isDescending Indicates whether the collection is descending.
     * @param initialSkip Initial number of items to skip.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of HostPool definitions as paginated response with {@link PagedIterable}.
     */
    PagedIterable<HostPool> listByResourceGroup(String resourceGroupName, Integer pageSize, Boolean isDescending,
        Integer initialSkip, Context context);

    /**
     * Get a host pool.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a host pool along with {@link Response}.
     */
    Response<HostPool> getByResourceGroupWithResponse(String resourceGroupName, String hostPoolName, Context context);

    /**
     * Get a host pool.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a host pool.
     */
    HostPool getByResourceGroup(String resourceGroupName, String hostPoolName);

    /**
     * Remove a host pool.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group.
     * @param force Force flag to delete sessionHost.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    Response<Void> deleteWithResponse(String resourceGroupName, String hostPoolName, Boolean force, Context context);

    /**
     * Remove a host pool.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(String resourceGroupName, String hostPoolName);

    /**
     * Expands and Lists MSIX packages in an Image, given the Image Path.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group.
     * @param body Object containing URI to MSIX Image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of MSIX package properties retrieved from MSIX Image expansion as paginated response with
     * {@link PagedIterable}.
     */
    PagedIterable<ExpandMsixImage> expand(String resourceGroupName, String hostPoolName, MsixImageUri body);

    /**
     * Expands and Lists MSIX packages in an Image, given the Image Path.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group.
     * @param body Object containing URI to MSIX Image.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of MSIX package properties retrieved from MSIX Image expansion as paginated response with
     * {@link PagedIterable}.
     */
    PagedIterable<ExpandMsixImage> expand(String resourceGroupName, String hostPoolName, MsixImageUri body,
        Context context);

    /**
     * Gets information from a package given the path to the package.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group.
     * @param body Object containing URI to package image and other optional properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information from a package given the path to the package as paginated response with
     * {@link PagedIterable}.
     */
    PagedIterable<AppAttachPackage> importAppAttachPackageInfo(String resourceGroupName, String hostPoolName,
        ImportPackageInfoRequest body);

    /**
     * Gets information from a package given the path to the package.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group.
     * @param body Object containing URI to package image and other optional properties.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information from a package given the path to the package as paginated response with
     * {@link PagedIterable}.
     */
    PagedIterable<AppAttachPackage> importAppAttachPackageInfo(String resourceGroupName, String hostPoolName,
        ImportPackageInfoRequest body, Context context);

    /**
     * List scaling plan associated with hostpool.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of scaling plan definitions as paginated response with {@link PagedIterable}.
     */
    PagedIterable<ScalingPlan> listByHostPool(String resourceGroupName, String hostPoolName);

    /**
     * List scaling plan associated with hostpool.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group.
     * @param pageSize Number of items per page.
     * @param isDescending Indicates whether the collection is descending.
     * @param initialSkip Initial number of items to skip.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of scaling plan definitions as paginated response with {@link PagedIterable}.
     */
    PagedIterable<ScalingPlan> listByHostPool(String resourceGroupName, String hostPoolName, Integer pageSize,
        Boolean isDescending, Integer initialSkip, Context context);

    /**
     * Operation to list the RegistrationTokens associated with the HostPool.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of RegistrationToken definitions along with {@link Response}.
     */
    Response<RegistrationTokenList> listRegistrationTokensWithResponse(String resourceGroupName, String hostPoolName,
        Context context);

    /**
     * Operation to list the RegistrationTokens associated with the HostPool.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of RegistrationToken definitions.
     */
    RegistrationTokenList listRegistrationTokens(String resourceGroupName, String hostPoolName);

    /**
     * List the private link resources available for this hostpool.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of private link resources as paginated response with {@link PagedIterable}.
     */
    PagedIterable<PrivateLinkResource> privateLinkResourcesListByHostPool(String resourceGroupName,
        String hostPoolName);

    /**
     * List the private link resources available for this hostpool.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group.
     * @param pageSize Number of items per page.
     * @param isDescending Indicates whether the collection is descending.
     * @param initialSkip Initial number of items to skip.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of private link resources as paginated response with {@link PagedIterable}.
     */
    PagedIterable<PrivateLinkResource> privateLinkResourcesListByHostPool(String resourceGroupName, String hostPoolName,
        Integer pageSize, Boolean isDescending, Integer initialSkip, Context context);

    /**
     * Registration token of the host pool.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a RegistrationInfo definition along with {@link Response}.
     */
    Response<RegistrationInfo> retrieveRegistrationTokenWithResponse(String resourceGroupName, String hostPoolName,
        Context context);

    /**
     * Registration token of the host pool.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a RegistrationInfo definition.
     */
    RegistrationInfo retrieveRegistrationToken(String resourceGroupName, String hostPoolName);

    /**
     * List userSessions.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of UserSession definitions as paginated response with {@link PagedIterable}.
     */
    PagedIterable<UserSession> userSessionsListByHostPool(String resourceGroupName, String hostPoolName);

    /**
     * List userSessions.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group.
     * @param filter OData filter expression. Valid properties for filtering are userprincipalname and sessionstate.
     * @param pageSize Number of items per page.
     * @param isDescending Indicates whether the collection is descending.
     * @param initialSkip Initial number of items to skip.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of UserSession definitions as paginated response with {@link PagedIterable}.
     */
    PagedIterable<UserSession> userSessionsListByHostPool(String resourceGroupName, String hostPoolName, String filter,
        Integer pageSize, Boolean isDescending, Integer initialSkip, Context context);

    /**
     * Get a host pool.
     * 
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a host pool along with {@link Response}.
     */
    HostPool getById(String id);

    /**
     * Get a host pool.
     * 
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a host pool along with {@link Response}.
     */
    Response<HostPool> getByIdWithResponse(String id, Context context);

    /**
     * Remove a host pool.
     * 
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteById(String id);

    /**
     * Remove a host pool.
     * 
     * @param id the resource ID.
     * @param force Force flag to delete sessionHost.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    Response<Void> deleteByIdWithResponse(String id, Boolean force, Context context);

    /**
     * Begins definition for a new HostPool resource.
     * 
     * @param name resource name.
     * @return the first stage of the new HostPool definition.
     */
    HostPool.DefinitionStages.Blank define(String name);
}
