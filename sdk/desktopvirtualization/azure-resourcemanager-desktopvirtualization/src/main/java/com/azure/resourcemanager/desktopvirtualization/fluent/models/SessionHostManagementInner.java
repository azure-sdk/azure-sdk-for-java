// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.desktopvirtualization.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.desktopvirtualization.models.HostPoolUpdateConfigurationProperties;
import java.io.IOException;

/**
 * Represents a SessionHostManagement definition.
 */
@Fluent
public final class SessionHostManagementInner extends ProxyResource {
    /*
     * Detailed properties for SessionHostManagement
     */
    private SessionHostManagementProperties innerProperties = new SessionHostManagementProperties();

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of SessionHostManagementInner class.
     */
    public SessionHostManagementInner() {
    }

    /**
     * Get the innerProperties property: Detailed properties for SessionHostManagement.
     * 
     * @return the innerProperties value.
     */
    private SessionHostManagementProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the scheduledDateTimeZone property: Time zone for sessionHostManagement operations as defined in
     * https://docs.microsoft.com/dotnet/api/system.timezoneinfo.findsystemtimezonebyid. Must be set if useLocalTime is
     * true.
     * 
     * @return the scheduledDateTimeZone value.
     */
    public String scheduledDateTimeZone() {
        return this.innerProperties() == null ? null : this.innerProperties().scheduledDateTimeZone();
    }

    /**
     * Set the scheduledDateTimeZone property: Time zone for sessionHostManagement operations as defined in
     * https://docs.microsoft.com/dotnet/api/system.timezoneinfo.findsystemtimezonebyid. Must be set if useLocalTime is
     * true.
     * 
     * @param scheduledDateTimeZone the scheduledDateTimeZone value to set.
     * @return the SessionHostManagementInner object itself.
     */
    public SessionHostManagementInner withScheduledDateTimeZone(String scheduledDateTimeZone) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SessionHostManagementProperties();
        }
        this.innerProperties().withScheduledDateTimeZone(scheduledDateTimeZone);
        return this;
    }

    /**
     * Get the update property: Parameters for a hostpool update.
     * 
     * @return the update value.
     */
    public HostPoolUpdateConfigurationProperties update() {
        return this.innerProperties() == null ? null : this.innerProperties().update();
    }

    /**
     * Set the update property: Parameters for a hostpool update.
     * 
     * @param update the update value to set.
     * @return the SessionHostManagementInner object itself.
     */
    public SessionHostManagementInner withUpdate(HostPoolUpdateConfigurationProperties update) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SessionHostManagementProperties();
        }
        this.innerProperties().withUpdate(update);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property innerProperties in model SessionHostManagementInner"));
        } else {
            innerProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(SessionHostManagementInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SessionHostManagementInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SessionHostManagementInner if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SessionHostManagementInner.
     */
    public static SessionHostManagementInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SessionHostManagementInner deserializedSessionHostManagementInner = new SessionHostManagementInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedSessionHostManagementInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedSessionHostManagementInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedSessionHostManagementInner.type = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedSessionHostManagementInner.innerProperties
                        = SessionHostManagementProperties.fromJson(reader);
                } else if ("systemData".equals(fieldName)) {
                    deserializedSessionHostManagementInner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSessionHostManagementInner;
        });
    }
}
