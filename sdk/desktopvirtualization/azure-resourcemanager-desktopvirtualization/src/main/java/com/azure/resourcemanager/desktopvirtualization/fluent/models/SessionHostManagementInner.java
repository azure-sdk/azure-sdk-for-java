// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.desktopvirtualization.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.desktopvirtualization.models.HostPoolUpdateConfigurationProperties;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Represents a SessionHostManagement definition. */
@Fluent
public final class SessionHostManagementInner extends ProxyResource {
    /*
     * Detailed properties for SessionHostManagement
     */
    @JsonProperty(value = "properties", required = true)
    private SessionHostManagementProperties innerProperties = new SessionHostManagementProperties();

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /** Creates an instance of SessionHostManagementInner class. */
    public SessionHostManagementInner() {
    }

    /**
     * Get the innerProperties property: Detailed properties for SessionHostManagement.
     *
     * @return the innerProperties value.
     */
    private SessionHostManagementProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     *
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the scheduledDateTimeZone property: Time zone for sessionHostManagement operations as defined in
     * https://docs.microsoft.com/en-us/dotnet/api/system.timezoneinfo.findsystemtimezonebyid?view=net-5.0. Must be set
     * if useLocalTime is true.
     *
     * @return the scheduledDateTimeZone value.
     */
    public String scheduledDateTimeZone() {
        return this.innerProperties() == null ? null : this.innerProperties().scheduledDateTimeZone();
    }

    /**
     * Set the scheduledDateTimeZone property: Time zone for sessionHostManagement operations as defined in
     * https://docs.microsoft.com/en-us/dotnet/api/system.timezoneinfo.findsystemtimezonebyid?view=net-5.0. Must be set
     * if useLocalTime is true.
     *
     * @param scheduledDateTimeZone the scheduledDateTimeZone value to set.
     * @return the SessionHostManagementInner object itself.
     */
    public SessionHostManagementInner withScheduledDateTimeZone(String scheduledDateTimeZone) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SessionHostManagementProperties();
        }
        this.innerProperties().withScheduledDateTimeZone(scheduledDateTimeZone);
        return this;
    }

    /**
     * Get the update property: Parameters for a hostpool update.
     *
     * @return the update value.
     */
    public HostPoolUpdateConfigurationProperties update() {
        return this.innerProperties() == null ? null : this.innerProperties().update();
    }

    /**
     * Set the update property: Parameters for a hostpool update.
     *
     * @param update the update value to set.
     * @return the SessionHostManagementInner object itself.
     */
    public SessionHostManagementInner withUpdate(HostPoolUpdateConfigurationProperties update) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SessionHostManagementProperties();
        }
        this.innerProperties().withUpdate(update);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property innerProperties in model SessionHostManagementInner"));
        } else {
            innerProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(SessionHostManagementInner.class);
}
