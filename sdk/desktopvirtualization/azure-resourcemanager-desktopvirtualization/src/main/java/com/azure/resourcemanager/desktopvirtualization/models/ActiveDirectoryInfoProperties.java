// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.desktopvirtualization.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Active directory info. Only one should be populated based on the join type.
 */
@Fluent
public final class ActiveDirectoryInfoProperties implements JsonSerializable<ActiveDirectoryInfoProperties> {
    /*
     * Credentials needed to create the virtual machine.
     */
    private KeyVaultCredentialsProperties domainCredentials;

    /*
     * The organizational unit(OU) path.
     */
    private String ouPath;

    /*
     * The domain a virtual machine connected to a hostpool will join.
     */
    private String domainName;

    /**
     * Creates an instance of ActiveDirectoryInfoProperties class.
     */
    public ActiveDirectoryInfoProperties() {
    }

    /**
     * Get the domainCredentials property: Credentials needed to create the virtual machine.
     * 
     * @return the domainCredentials value.
     */
    public KeyVaultCredentialsProperties domainCredentials() {
        return this.domainCredentials;
    }

    /**
     * Set the domainCredentials property: Credentials needed to create the virtual machine.
     * 
     * @param domainCredentials the domainCredentials value to set.
     * @return the ActiveDirectoryInfoProperties object itself.
     */
    public ActiveDirectoryInfoProperties withDomainCredentials(KeyVaultCredentialsProperties domainCredentials) {
        this.domainCredentials = domainCredentials;
        return this;
    }

    /**
     * Get the ouPath property: The organizational unit(OU) path.
     * 
     * @return the ouPath value.
     */
    public String ouPath() {
        return this.ouPath;
    }

    /**
     * Set the ouPath property: The organizational unit(OU) path.
     * 
     * @param ouPath the ouPath value to set.
     * @return the ActiveDirectoryInfoProperties object itself.
     */
    public ActiveDirectoryInfoProperties withOuPath(String ouPath) {
        this.ouPath = ouPath;
        return this;
    }

    /**
     * Get the domainName property: The domain a virtual machine connected to a hostpool will join.
     * 
     * @return the domainName value.
     */
    public String domainName() {
        return this.domainName;
    }

    /**
     * Set the domainName property: The domain a virtual machine connected to a hostpool will join.
     * 
     * @param domainName the domainName value to set.
     * @return the ActiveDirectoryInfoProperties object itself.
     */
    public ActiveDirectoryInfoProperties withDomainName(String domainName) {
        this.domainName = domainName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (domainCredentials() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property domainCredentials in model ActiveDirectoryInfoProperties"));
        } else {
            domainCredentials().validate();
        }
        if (ouPath() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property ouPath in model ActiveDirectoryInfoProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ActiveDirectoryInfoProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("domainCredentials", this.domainCredentials);
        jsonWriter.writeStringField("ouPath", this.ouPath);
        jsonWriter.writeStringField("domainName", this.domainName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ActiveDirectoryInfoProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ActiveDirectoryInfoProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ActiveDirectoryInfoProperties.
     */
    public static ActiveDirectoryInfoProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ActiveDirectoryInfoProperties deserializedActiveDirectoryInfoProperties
                = new ActiveDirectoryInfoProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("domainCredentials".equals(fieldName)) {
                    deserializedActiveDirectoryInfoProperties.domainCredentials
                        = KeyVaultCredentialsProperties.fromJson(reader);
                } else if ("ouPath".equals(fieldName)) {
                    deserializedActiveDirectoryInfoProperties.ouPath = reader.getString();
                } else if ("domainName".equals(fieldName)) {
                    deserializedActiveDirectoryInfoProperties.domainName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedActiveDirectoryInfoProperties;
        });
    }
}
