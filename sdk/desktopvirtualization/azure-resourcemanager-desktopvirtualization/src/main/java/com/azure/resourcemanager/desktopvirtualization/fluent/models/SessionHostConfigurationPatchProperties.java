// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.desktopvirtualization.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.desktopvirtualization.models.BootDiagnosticsInfoPatchProperties;
import com.azure.resourcemanager.desktopvirtualization.models.DiskInfoPatchProperties;
import com.azure.resourcemanager.desktopvirtualization.models.DomainInfoPatchProperties;
import com.azure.resourcemanager.desktopvirtualization.models.ImageInfoPatchProperties;
import com.azure.resourcemanager.desktopvirtualization.models.KeyVaultCredentialsPatchProperties;
import com.azure.resourcemanager.desktopvirtualization.models.NetworkInfoPatchProperties;
import com.azure.resourcemanager.desktopvirtualization.models.SecurityInfoPatchProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/**
 * Session host configurations of HostPool.
 */
@Fluent
public final class SessionHostConfigurationPatchProperties {
    /*
     * Friendly name to describe this version of the SessionHostConfiguration.
     */
    @JsonProperty(value = "friendlyName")
    private String friendlyName;

    /*
     * Hashtable that lists key/value pair tags to apply to the VMs
     */
    @JsonProperty(value = "vmTags")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, String> vmTags;

    /*
     * The Location for the session host to be created in
     */
    @JsonProperty(value = "vmLocation")
    private String vmLocation;

    /*
     * The ResourceGroup for the session hosts to be created in. It will default to the ResourceGroup of the hostpool if not provided.
     */
    @JsonProperty(value = "vmResourceGroup")
    private String vmResourceGroup;

    /*
     * The prefix that should be associated with session host names
     */
    @JsonProperty(value = "vmNamePrefix")
    private String vmNamePrefix;

    /*
     * Value for availability zones to be used by the session host. Should be from [1,2,3].
     */
    @JsonProperty(value = "availabilityZones")
    private List<Integer> availabilityZones;

    /*
     * Network information.
     */
    @JsonProperty(value = "networkInfo")
    private NetworkInfoPatchProperties networkInfo;

    /*
     * The id of the size of a virtual machine connected to a hostpool. Example: Standard_D2as_v6
     */
    @JsonProperty(value = "vmSizeId")
    private String vmSizeId;

    /*
     * Disk information.
     */
    @JsonProperty(value = "diskInfo")
    private DiskInfoPatchProperties diskInfo;

    /*
     * The uri to the storage blob containing the arm template to be run on the virtual machine after provisioning.
     */
    @JsonProperty(value = "customConfigurationScriptUrl")
    private String customConfigurationScriptUrl;

    /*
     * Image configurations of HostPool.
     */
    @JsonProperty(value = "imageInfo")
    private ImageInfoPatchProperties imageInfo;

    /*
     * Domain configurations of session hosts.
     */
    @JsonProperty(value = "domainInfo")
    private DomainInfoPatchProperties domainInfo;

    /*
     * Security information.
     */
    @JsonProperty(value = "securityInfo")
    private SecurityInfoPatchProperties securityInfo;

    /*
     * Local Admin credentials for session hosts.
     */
    @JsonProperty(value = "vmAdminCredentials")
    private KeyVaultCredentialsPatchProperties vmAdminCredentials;

    /*
     * Boot Diagnostics information.
     */
    @JsonProperty(value = "bootDiagnosticsInfo")
    private BootDiagnosticsInfoPatchProperties bootDiagnosticsInfo;

    /**
     * Creates an instance of SessionHostConfigurationPatchProperties class.
     */
    public SessionHostConfigurationPatchProperties() {
    }

    /**
     * Get the friendlyName property: Friendly name to describe this version of the SessionHostConfiguration.
     * 
     * @return the friendlyName value.
     */
    public String friendlyName() {
        return this.friendlyName;
    }

    /**
     * Set the friendlyName property: Friendly name to describe this version of the SessionHostConfiguration.
     * 
     * @param friendlyName the friendlyName value to set.
     * @return the SessionHostConfigurationPatchProperties object itself.
     */
    public SessionHostConfigurationPatchProperties withFriendlyName(String friendlyName) {
        this.friendlyName = friendlyName;
        return this;
    }

    /**
     * Get the vmTags property: Hashtable that lists key/value pair tags to apply to the VMs.
     * 
     * @return the vmTags value.
     */
    public Map<String, String> vmTags() {
        return this.vmTags;
    }

    /**
     * Set the vmTags property: Hashtable that lists key/value pair tags to apply to the VMs.
     * 
     * @param vmTags the vmTags value to set.
     * @return the SessionHostConfigurationPatchProperties object itself.
     */
    public SessionHostConfigurationPatchProperties withVmTags(Map<String, String> vmTags) {
        this.vmTags = vmTags;
        return this;
    }

    /**
     * Get the vmLocation property: The Location for the session host to be created in.
     * 
     * @return the vmLocation value.
     */
    public String vmLocation() {
        return this.vmLocation;
    }

    /**
     * Set the vmLocation property: The Location for the session host to be created in.
     * 
     * @param vmLocation the vmLocation value to set.
     * @return the SessionHostConfigurationPatchProperties object itself.
     */
    public SessionHostConfigurationPatchProperties withVmLocation(String vmLocation) {
        this.vmLocation = vmLocation;
        return this;
    }

    /**
     * Get the vmResourceGroup property: The ResourceGroup for the session hosts to be created in. It will default to
     * the ResourceGroup of the hostpool if not provided.
     * 
     * @return the vmResourceGroup value.
     */
    public String vmResourceGroup() {
        return this.vmResourceGroup;
    }

    /**
     * Set the vmResourceGroup property: The ResourceGroup for the session hosts to be created in. It will default to
     * the ResourceGroup of the hostpool if not provided.
     * 
     * @param vmResourceGroup the vmResourceGroup value to set.
     * @return the SessionHostConfigurationPatchProperties object itself.
     */
    public SessionHostConfigurationPatchProperties withVmResourceGroup(String vmResourceGroup) {
        this.vmResourceGroup = vmResourceGroup;
        return this;
    }

    /**
     * Get the vmNamePrefix property: The prefix that should be associated with session host names.
     * 
     * @return the vmNamePrefix value.
     */
    public String vmNamePrefix() {
        return this.vmNamePrefix;
    }

    /**
     * Set the vmNamePrefix property: The prefix that should be associated with session host names.
     * 
     * @param vmNamePrefix the vmNamePrefix value to set.
     * @return the SessionHostConfigurationPatchProperties object itself.
     */
    public SessionHostConfigurationPatchProperties withVmNamePrefix(String vmNamePrefix) {
        this.vmNamePrefix = vmNamePrefix;
        return this;
    }

    /**
     * Get the availabilityZones property: Value for availability zones to be used by the session host. Should be from
     * [1,2,3].
     * 
     * @return the availabilityZones value.
     */
    public List<Integer> availabilityZones() {
        return this.availabilityZones;
    }

    /**
     * Set the availabilityZones property: Value for availability zones to be used by the session host. Should be from
     * [1,2,3].
     * 
     * @param availabilityZones the availabilityZones value to set.
     * @return the SessionHostConfigurationPatchProperties object itself.
     */
    public SessionHostConfigurationPatchProperties withAvailabilityZones(List<Integer> availabilityZones) {
        this.availabilityZones = availabilityZones;
        return this;
    }

    /**
     * Get the networkInfo property: Network information.
     * 
     * @return the networkInfo value.
     */
    public NetworkInfoPatchProperties networkInfo() {
        return this.networkInfo;
    }

    /**
     * Set the networkInfo property: Network information.
     * 
     * @param networkInfo the networkInfo value to set.
     * @return the SessionHostConfigurationPatchProperties object itself.
     */
    public SessionHostConfigurationPatchProperties withNetworkInfo(NetworkInfoPatchProperties networkInfo) {
        this.networkInfo = networkInfo;
        return this;
    }

    /**
     * Get the vmSizeId property: The id of the size of a virtual machine connected to a hostpool. Example:
     * Standard_D2as_v6.
     * 
     * @return the vmSizeId value.
     */
    public String vmSizeId() {
        return this.vmSizeId;
    }

    /**
     * Set the vmSizeId property: The id of the size of a virtual machine connected to a hostpool. Example:
     * Standard_D2as_v6.
     * 
     * @param vmSizeId the vmSizeId value to set.
     * @return the SessionHostConfigurationPatchProperties object itself.
     */
    public SessionHostConfigurationPatchProperties withVmSizeId(String vmSizeId) {
        this.vmSizeId = vmSizeId;
        return this;
    }

    /**
     * Get the diskInfo property: Disk information.
     * 
     * @return the diskInfo value.
     */
    public DiskInfoPatchProperties diskInfo() {
        return this.diskInfo;
    }

    /**
     * Set the diskInfo property: Disk information.
     * 
     * @param diskInfo the diskInfo value to set.
     * @return the SessionHostConfigurationPatchProperties object itself.
     */
    public SessionHostConfigurationPatchProperties withDiskInfo(DiskInfoPatchProperties diskInfo) {
        this.diskInfo = diskInfo;
        return this;
    }

    /**
     * Get the customConfigurationScriptUrl property: The uri to the storage blob containing the arm template to be run
     * on the virtual machine after provisioning.
     * 
     * @return the customConfigurationScriptUrl value.
     */
    public String customConfigurationScriptUrl() {
        return this.customConfigurationScriptUrl;
    }

    /**
     * Set the customConfigurationScriptUrl property: The uri to the storage blob containing the arm template to be run
     * on the virtual machine after provisioning.
     * 
     * @param customConfigurationScriptUrl the customConfigurationScriptUrl value to set.
     * @return the SessionHostConfigurationPatchProperties object itself.
     */
    public SessionHostConfigurationPatchProperties
        withCustomConfigurationScriptUrl(String customConfigurationScriptUrl) {
        this.customConfigurationScriptUrl = customConfigurationScriptUrl;
        return this;
    }

    /**
     * Get the imageInfo property: Image configurations of HostPool.
     * 
     * @return the imageInfo value.
     */
    public ImageInfoPatchProperties imageInfo() {
        return this.imageInfo;
    }

    /**
     * Set the imageInfo property: Image configurations of HostPool.
     * 
     * @param imageInfo the imageInfo value to set.
     * @return the SessionHostConfigurationPatchProperties object itself.
     */
    public SessionHostConfigurationPatchProperties withImageInfo(ImageInfoPatchProperties imageInfo) {
        this.imageInfo = imageInfo;
        return this;
    }

    /**
     * Get the domainInfo property: Domain configurations of session hosts.
     * 
     * @return the domainInfo value.
     */
    public DomainInfoPatchProperties domainInfo() {
        return this.domainInfo;
    }

    /**
     * Set the domainInfo property: Domain configurations of session hosts.
     * 
     * @param domainInfo the domainInfo value to set.
     * @return the SessionHostConfigurationPatchProperties object itself.
     */
    public SessionHostConfigurationPatchProperties withDomainInfo(DomainInfoPatchProperties domainInfo) {
        this.domainInfo = domainInfo;
        return this;
    }

    /**
     * Get the securityInfo property: Security information.
     * 
     * @return the securityInfo value.
     */
    public SecurityInfoPatchProperties securityInfo() {
        return this.securityInfo;
    }

    /**
     * Set the securityInfo property: Security information.
     * 
     * @param securityInfo the securityInfo value to set.
     * @return the SessionHostConfigurationPatchProperties object itself.
     */
    public SessionHostConfigurationPatchProperties withSecurityInfo(SecurityInfoPatchProperties securityInfo) {
        this.securityInfo = securityInfo;
        return this;
    }

    /**
     * Get the vmAdminCredentials property: Local Admin credentials for session hosts.
     * 
     * @return the vmAdminCredentials value.
     */
    public KeyVaultCredentialsPatchProperties vmAdminCredentials() {
        return this.vmAdminCredentials;
    }

    /**
     * Set the vmAdminCredentials property: Local Admin credentials for session hosts.
     * 
     * @param vmAdminCredentials the vmAdminCredentials value to set.
     * @return the SessionHostConfigurationPatchProperties object itself.
     */
    public SessionHostConfigurationPatchProperties
        withVmAdminCredentials(KeyVaultCredentialsPatchProperties vmAdminCredentials) {
        this.vmAdminCredentials = vmAdminCredentials;
        return this;
    }

    /**
     * Get the bootDiagnosticsInfo property: Boot Diagnostics information.
     * 
     * @return the bootDiagnosticsInfo value.
     */
    public BootDiagnosticsInfoPatchProperties bootDiagnosticsInfo() {
        return this.bootDiagnosticsInfo;
    }

    /**
     * Set the bootDiagnosticsInfo property: Boot Diagnostics information.
     * 
     * @param bootDiagnosticsInfo the bootDiagnosticsInfo value to set.
     * @return the SessionHostConfigurationPatchProperties object itself.
     */
    public SessionHostConfigurationPatchProperties
        withBootDiagnosticsInfo(BootDiagnosticsInfoPatchProperties bootDiagnosticsInfo) {
        this.bootDiagnosticsInfo = bootDiagnosticsInfo;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (networkInfo() != null) {
            networkInfo().validate();
        }
        if (diskInfo() != null) {
            diskInfo().validate();
        }
        if (imageInfo() != null) {
            imageInfo().validate();
        }
        if (domainInfo() != null) {
            domainInfo().validate();
        }
        if (securityInfo() != null) {
            securityInfo().validate();
        }
        if (vmAdminCredentials() != null) {
            vmAdminCredentials().validate();
        }
        if (bootDiagnosticsInfo() != null) {
            bootDiagnosticsInfo().validate();
        }
    }
}
