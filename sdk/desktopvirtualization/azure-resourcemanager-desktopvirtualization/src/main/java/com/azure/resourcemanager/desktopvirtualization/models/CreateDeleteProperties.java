// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.desktopvirtualization.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The properties that control how Scaling will manage the size of the hostpool by creating and deleting hosts.
 */
@Fluent
public final class CreateDeleteProperties implements JsonSerializable<CreateDeleteProperties> {
    /*
     * Maximum number of session hosts that may be created by the Scaling Service. This requires the assigned hostpool
     * to have a session host config property.
     */
    private Integer rampUpMaximumHostPoolSize;

    /*
     * Minimum number of session hosts that will be be created by the Scaling Service. Scaling will not delete any hosts
     * when this limit is met. This requires the assigned hostpool to have a session host config property.
     */
    private Integer rampUpMinimumHostPoolSize;

    /*
     * Maximum number of session hosts that may be created by the Scaling Service. This requires the assigned hostpool
     * to have a session host config property.
     */
    private Integer rampDownMaximumHostPoolSize;

    /*
     * Minimum number of session hosts that will be be created by the Scaling Service. Scaling will not delete any hosts
     * when this limit is met. This requires the assigned hostpool to have a session host config property.
     */
    private Integer rampDownMinimumHostPoolSize;

    /**
     * Creates an instance of CreateDeleteProperties class.
     */
    public CreateDeleteProperties() {
    }

    /**
     * Get the rampUpMaximumHostPoolSize property: Maximum number of session hosts that may be created by the Scaling
     * Service. This requires the assigned hostpool to have a session host config property.
     * 
     * @return the rampUpMaximumHostPoolSize value.
     */
    public Integer rampUpMaximumHostPoolSize() {
        return this.rampUpMaximumHostPoolSize;
    }

    /**
     * Set the rampUpMaximumHostPoolSize property: Maximum number of session hosts that may be created by the Scaling
     * Service. This requires the assigned hostpool to have a session host config property.
     * 
     * @param rampUpMaximumHostPoolSize the rampUpMaximumHostPoolSize value to set.
     * @return the CreateDeleteProperties object itself.
     */
    public CreateDeleteProperties withRampUpMaximumHostPoolSize(Integer rampUpMaximumHostPoolSize) {
        this.rampUpMaximumHostPoolSize = rampUpMaximumHostPoolSize;
        return this;
    }

    /**
     * Get the rampUpMinimumHostPoolSize property: Minimum number of session hosts that will be be created by the
     * Scaling Service. Scaling will not delete any hosts when this limit is met. This requires the assigned hostpool to
     * have a session host config property.
     * 
     * @return the rampUpMinimumHostPoolSize value.
     */
    public Integer rampUpMinimumHostPoolSize() {
        return this.rampUpMinimumHostPoolSize;
    }

    /**
     * Set the rampUpMinimumHostPoolSize property: Minimum number of session hosts that will be be created by the
     * Scaling Service. Scaling will not delete any hosts when this limit is met. This requires the assigned hostpool to
     * have a session host config property.
     * 
     * @param rampUpMinimumHostPoolSize the rampUpMinimumHostPoolSize value to set.
     * @return the CreateDeleteProperties object itself.
     */
    public CreateDeleteProperties withRampUpMinimumHostPoolSize(Integer rampUpMinimumHostPoolSize) {
        this.rampUpMinimumHostPoolSize = rampUpMinimumHostPoolSize;
        return this;
    }

    /**
     * Get the rampDownMaximumHostPoolSize property: Maximum number of session hosts that may be created by the Scaling
     * Service. This requires the assigned hostpool to have a session host config property.
     * 
     * @return the rampDownMaximumHostPoolSize value.
     */
    public Integer rampDownMaximumHostPoolSize() {
        return this.rampDownMaximumHostPoolSize;
    }

    /**
     * Set the rampDownMaximumHostPoolSize property: Maximum number of session hosts that may be created by the Scaling
     * Service. This requires the assigned hostpool to have a session host config property.
     * 
     * @param rampDownMaximumHostPoolSize the rampDownMaximumHostPoolSize value to set.
     * @return the CreateDeleteProperties object itself.
     */
    public CreateDeleteProperties withRampDownMaximumHostPoolSize(Integer rampDownMaximumHostPoolSize) {
        this.rampDownMaximumHostPoolSize = rampDownMaximumHostPoolSize;
        return this;
    }

    /**
     * Get the rampDownMinimumHostPoolSize property: Minimum number of session hosts that will be be created by the
     * Scaling Service. Scaling will not delete any hosts when this limit is met. This requires the assigned hostpool to
     * have a session host config property.
     * 
     * @return the rampDownMinimumHostPoolSize value.
     */
    public Integer rampDownMinimumHostPoolSize() {
        return this.rampDownMinimumHostPoolSize;
    }

    /**
     * Set the rampDownMinimumHostPoolSize property: Minimum number of session hosts that will be be created by the
     * Scaling Service. Scaling will not delete any hosts when this limit is met. This requires the assigned hostpool to
     * have a session host config property.
     * 
     * @param rampDownMinimumHostPoolSize the rampDownMinimumHostPoolSize value to set.
     * @return the CreateDeleteProperties object itself.
     */
    public CreateDeleteProperties withRampDownMinimumHostPoolSize(Integer rampDownMinimumHostPoolSize) {
        this.rampDownMinimumHostPoolSize = rampDownMinimumHostPoolSize;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("rampUpMaximumHostPoolSize", this.rampUpMaximumHostPoolSize);
        jsonWriter.writeNumberField("rampUpMinimumHostPoolSize", this.rampUpMinimumHostPoolSize);
        jsonWriter.writeNumberField("rampDownMaximumHostPoolSize", this.rampDownMaximumHostPoolSize);
        jsonWriter.writeNumberField("rampDownMinimumHostPoolSize", this.rampDownMinimumHostPoolSize);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CreateDeleteProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CreateDeleteProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the CreateDeleteProperties.
     */
    public static CreateDeleteProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CreateDeleteProperties deserializedCreateDeleteProperties = new CreateDeleteProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("rampUpMaximumHostPoolSize".equals(fieldName)) {
                    deserializedCreateDeleteProperties.rampUpMaximumHostPoolSize
                        = reader.getNullable(JsonReader::getInt);
                } else if ("rampUpMinimumHostPoolSize".equals(fieldName)) {
                    deserializedCreateDeleteProperties.rampUpMinimumHostPoolSize
                        = reader.getNullable(JsonReader::getInt);
                } else if ("rampDownMaximumHostPoolSize".equals(fieldName)) {
                    deserializedCreateDeleteProperties.rampDownMaximumHostPoolSize
                        = reader.getNullable(JsonReader::getInt);
                } else if ("rampDownMinimumHostPoolSize".equals(fieldName)) {
                    deserializedCreateDeleteProperties.rampDownMinimumHostPoolSize
                        = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCreateDeleteProperties;
        });
    }
}
