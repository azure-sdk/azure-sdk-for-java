// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.desktopvirtualization.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.desktopvirtualization.models.HostPoolUpdateConfigurationPatchProperties;
import java.io.IOException;

/**
 * Session host Managements of HostPool.
 */
@Fluent
public final class SessionHostManagementPatchProperties
    implements JsonSerializable<SessionHostManagementPatchProperties> {
    /*
     * Time zone for sessionHostManagement operations as defined in
     * https://docs.microsoft.com/dotnet/api/system.timezoneinfo.findsystemtimezonebyid. Must be set if useLocalTime is
     * true.
     */
    private String scheduledDateTimeZone;

    /*
     * Parameters for a hostpool update.
     */
    private HostPoolUpdateConfigurationPatchProperties update;

    /**
     * Creates an instance of SessionHostManagementPatchProperties class.
     */
    public SessionHostManagementPatchProperties() {
    }

    /**
     * Get the scheduledDateTimeZone property: Time zone for sessionHostManagement operations as defined in
     * https://docs.microsoft.com/dotnet/api/system.timezoneinfo.findsystemtimezonebyid. Must be set if useLocalTime is
     * true.
     * 
     * @return the scheduledDateTimeZone value.
     */
    public String scheduledDateTimeZone() {
        return this.scheduledDateTimeZone;
    }

    /**
     * Set the scheduledDateTimeZone property: Time zone for sessionHostManagement operations as defined in
     * https://docs.microsoft.com/dotnet/api/system.timezoneinfo.findsystemtimezonebyid. Must be set if useLocalTime is
     * true.
     * 
     * @param scheduledDateTimeZone the scheduledDateTimeZone value to set.
     * @return the SessionHostManagementPatchProperties object itself.
     */
    public SessionHostManagementPatchProperties withScheduledDateTimeZone(String scheduledDateTimeZone) {
        this.scheduledDateTimeZone = scheduledDateTimeZone;
        return this;
    }

    /**
     * Get the update property: Parameters for a hostpool update.
     * 
     * @return the update value.
     */
    public HostPoolUpdateConfigurationPatchProperties update() {
        return this.update;
    }

    /**
     * Set the update property: Parameters for a hostpool update.
     * 
     * @param update the update value to set.
     * @return the SessionHostManagementPatchProperties object itself.
     */
    public SessionHostManagementPatchProperties withUpdate(HostPoolUpdateConfigurationPatchProperties update) {
        this.update = update;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (update() != null) {
            update().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("scheduledDateTimeZone", this.scheduledDateTimeZone);
        jsonWriter.writeJsonField("update", this.update);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SessionHostManagementPatchProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SessionHostManagementPatchProperties if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SessionHostManagementPatchProperties.
     */
    public static SessionHostManagementPatchProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SessionHostManagementPatchProperties deserializedSessionHostManagementPatchProperties
                = new SessionHostManagementPatchProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("scheduledDateTimeZone".equals(fieldName)) {
                    deserializedSessionHostManagementPatchProperties.scheduledDateTimeZone = reader.getString();
                } else if ("update".equals(fieldName)) {
                    deserializedSessionHostManagementPatchProperties.update
                        = HostPoolUpdateConfigurationPatchProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSessionHostManagementPatchProperties;
        });
    }
}
