// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.desktopvirtualization.generated;

import com.azure.resourcemanager.desktopvirtualization.fluent.models.SessionHostConfigurationInner;
import com.azure.resourcemanager.desktopvirtualization.models.ActiveDirectoryInfoProperties;
import com.azure.resourcemanager.desktopvirtualization.models.AzureActiveDirectoryInfoProperties;
import com.azure.resourcemanager.desktopvirtualization.models.BootDiagnosticsInfoProperties;
import com.azure.resourcemanager.desktopvirtualization.models.CustomInfoProperties;
import com.azure.resourcemanager.desktopvirtualization.models.DiskInfoProperties;
import com.azure.resourcemanager.desktopvirtualization.models.DomainInfoProperties;
import com.azure.resourcemanager.desktopvirtualization.models.DomainJoinType;
import com.azure.resourcemanager.desktopvirtualization.models.ImageInfoProperties;
import com.azure.resourcemanager.desktopvirtualization.models.KeyVaultCredentialsProperties;
import com.azure.resourcemanager.desktopvirtualization.models.MarketplaceInfoProperties;
import com.azure.resourcemanager.desktopvirtualization.models.NetworkInfoProperties;
import com.azure.resourcemanager.desktopvirtualization.models.SecurityInfoProperties;
import com.azure.resourcemanager.desktopvirtualization.models.Type;
import com.azure.resourcemanager.desktopvirtualization.models.VirtualMachineDiskType;
import com.azure.resourcemanager.desktopvirtualization.models.VirtualMachineSecurityType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for SessionHostConfigurations CreateOrUpdate.
 */
public final class SessionHostConfigurationsCreateOrUpdateSamples {
    /*
     * x-ms-original-file:
     * specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2024-11-01-preview/
     * examples/SessionHostConfigurations_Create.json
     */
    /**
     * Sample code: SessionHostConfigurations_Create.
     * 
     * @param manager Entry point to DesktopVirtualizationManager.
     */
    public static void sessionHostConfigurationsCreate(
        com.azure.resourcemanager.desktopvirtualization.DesktopVirtualizationManager manager) {
        manager.sessionHostConfigurations()
            .createOrUpdate("resourceGroup1", "hostPool1", new SessionHostConfigurationInner()
                .withFriendlyName("InitialConfiguration")
                .withVmTags(mapOf("Department", "myDepartment", "Team", "myTeam"))
                .withVmLocation("eastus2")
                .withVmResourceGroup("myResourceGroup")
                .withVmNamePrefix("westus2-vm")
                .withAvailabilityZones(Arrays.asList(1, 3))
                .withNetworkInfo(new NetworkInfoProperties().withSubnetId(
                    "/subscriptions/.../resourceGroups/.../providers/Microsoft.Network/virtualNetworks/.../subnets/subnet1")
                    .withSecurityGroupId(
                        "/subscriptions/.../resourceGroups/.../provider s/Microsoft.Network/networkSecurityGroups/nsg1"))
                .withVmSizeId("Standard_D2s_v3")
                .withDiskInfo(new DiskInfoProperties().withType(VirtualMachineDiskType.STANDARD_LRS))
                .withCustomConfigurationScriptUrl("https://storageaccountname.blob.core.windows.net/blobcontainer/file")
                .withImageInfo(new ImageInfoProperties().withImageType(Type.MARKETPLACE)
                    .withMarketplaceInfo(new MarketplaceInfoProperties().withOffer("Windows-10")
                        .withPublisher("MicrosoftWindowsDesktop")
                        .withSku("19h2-ent")
                        .withExactVersion("2019.0.20190115"))
                    .withCustomInfo(new CustomInfoProperties().withResourceId(
                        "/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup1/providers/Microsoft.Compute/images/imageName")))
                .withDomainInfo(new DomainInfoProperties().withJoinType(DomainJoinType.ACTIVE_DIRECTORY)
                    .withActiveDirectoryInfo(new ActiveDirectoryInfoProperties()
                        .withDomainCredentials(
                            new KeyVaultCredentialsProperties().withUsernameKeyVaultSecretUri("fakeTokenPlaceholder")
                                .withPasswordKeyVaultSecretUri("fakeTokenPlaceholder"))
                        .withOuPath("OU=testOU,DC=domain,DC=Domain,DC=com")
                        .withDomainName("wvdarmtest1.net"))
                    .withAzureActiveDirectoryInfo(new AzureActiveDirectoryInfoProperties()
                        .withMdmProviderGuid("bdefabc0-95b4-48b3-b645-8a753a63c4fa")))
                .withSecurityInfo(new SecurityInfoProperties().withType(VirtualMachineSecurityType.TRUSTED_LAUNCH)
                    .withSecureBootEnabled(true)
                    .withVTpmEnabled(true))
                .withVmAdminCredentials(
                    new KeyVaultCredentialsProperties().withUsernameKeyVaultSecretUri("fakeTokenPlaceholder")
                        .withPasswordKeyVaultSecretUri("fakeTokenPlaceholder"))
                .withBootDiagnosticsInfo(new BootDiagnosticsInfoProperties().withEnabled(true)
                    .withStorageUri("https://myStorageAccountName.blob.core.windows.net")),
                com.azure.core.util.Context.NONE);
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
