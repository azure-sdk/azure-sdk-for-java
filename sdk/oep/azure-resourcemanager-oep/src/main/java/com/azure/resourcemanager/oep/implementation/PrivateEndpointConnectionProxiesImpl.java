// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.oep.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.oep.fluent.PrivateEndpointConnectionProxiesClient;
import com.azure.resourcemanager.oep.fluent.models.PrivateEndpointConnectionProxyInner;
import com.azure.resourcemanager.oep.models.PrivateEndpointConnectionProxies;
import com.azure.resourcemanager.oep.models.PrivateEndpointConnectionProxy;

public final class PrivateEndpointConnectionProxiesImpl implements PrivateEndpointConnectionProxies {
    private static final ClientLogger LOGGER = new ClientLogger(PrivateEndpointConnectionProxiesImpl.class);

    private final PrivateEndpointConnectionProxiesClient innerClient;

    private final com.azure.resourcemanager.oep.OepManager serviceManager;

    public PrivateEndpointConnectionProxiesImpl(
        PrivateEndpointConnectionProxiesClient innerClient, com.azure.resourcemanager.oep.OepManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<PrivateEndpointConnectionProxy> listByOakInstance(
        String resourceGroupName, String resourceName) {
        PagedIterable<PrivateEndpointConnectionProxyInner> inner =
            this.serviceClient().listByOakInstance(resourceGroupName, resourceName);
        return Utils.mapPage(inner, inner1 -> new PrivateEndpointConnectionProxyImpl(inner1, this.manager()));
    }

    public PagedIterable<PrivateEndpointConnectionProxy> listByOakInstance(
        String resourceGroupName, String resourceName, Context context) {
        PagedIterable<PrivateEndpointConnectionProxyInner> inner =
            this.serviceClient().listByOakInstance(resourceGroupName, resourceName, context);
        return Utils.mapPage(inner, inner1 -> new PrivateEndpointConnectionProxyImpl(inner1, this.manager()));
    }

    public Response<Void> validateWithResponse(
        String resourceGroupName,
        String resourceName,
        String privateEndpointConnectionProxyId,
        PrivateEndpointConnectionProxyInner privateEndpointConnectionProxy,
        Context context) {
        return this
            .serviceClient()
            .validateWithResponse(
                resourceGroupName,
                resourceName,
                privateEndpointConnectionProxyId,
                privateEndpointConnectionProxy,
                context);
    }

    public void validate(
        String resourceGroupName,
        String resourceName,
        String privateEndpointConnectionProxyId,
        PrivateEndpointConnectionProxyInner privateEndpointConnectionProxy) {
        this
            .serviceClient()
            .validate(
                resourceGroupName, resourceName, privateEndpointConnectionProxyId, privateEndpointConnectionProxy);
    }

    public Response<PrivateEndpointConnectionProxy> getWithResponse(
        String resourceGroupName, String resourceName, String privateEndpointConnectionProxyId, Context context) {
        Response<PrivateEndpointConnectionProxyInner> inner =
            this
                .serviceClient()
                .getWithResponse(resourceGroupName, resourceName, privateEndpointConnectionProxyId, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new PrivateEndpointConnectionProxyImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PrivateEndpointConnectionProxy get(
        String resourceGroupName, String resourceName, String privateEndpointConnectionProxyId) {
        PrivateEndpointConnectionProxyInner inner =
            this.serviceClient().get(resourceGroupName, resourceName, privateEndpointConnectionProxyId);
        if (inner != null) {
            return new PrivateEndpointConnectionProxyImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String resourceName, String privateEndpointConnectionProxyId) {
        this.serviceClient().delete(resourceGroupName, resourceName, privateEndpointConnectionProxyId);
    }

    public void delete(
        String resourceGroupName, String resourceName, String privateEndpointConnectionProxyId, Context context) {
        this.serviceClient().delete(resourceGroupName, resourceName, privateEndpointConnectionProxyId, context);
    }

    public PrivateEndpointConnectionProxy getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String resourceName = Utils.getValueFromIdByName(id, "energyServices");
        if (resourceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'energyServices'.", id)));
        }
        String privateEndpointConnectionProxyId = Utils.getValueFromIdByName(id, "privateEndpointConnectionProxies");
        if (privateEndpointConnectionProxyId == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment"
                                    + " 'privateEndpointConnectionProxies'.",
                                id)));
        }
        return this
            .getWithResponse(resourceGroupName, resourceName, privateEndpointConnectionProxyId, Context.NONE)
            .getValue();
    }

    public Response<PrivateEndpointConnectionProxy> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String resourceName = Utils.getValueFromIdByName(id, "energyServices");
        if (resourceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'energyServices'.", id)));
        }
        String privateEndpointConnectionProxyId = Utils.getValueFromIdByName(id, "privateEndpointConnectionProxies");
        if (privateEndpointConnectionProxyId == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment"
                                    + " 'privateEndpointConnectionProxies'.",
                                id)));
        }
        return this.getWithResponse(resourceGroupName, resourceName, privateEndpointConnectionProxyId, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String resourceName = Utils.getValueFromIdByName(id, "energyServices");
        if (resourceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'energyServices'.", id)));
        }
        String privateEndpointConnectionProxyId = Utils.getValueFromIdByName(id, "privateEndpointConnectionProxies");
        if (privateEndpointConnectionProxyId == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment"
                                    + " 'privateEndpointConnectionProxies'.",
                                id)));
        }
        this.delete(resourceGroupName, resourceName, privateEndpointConnectionProxyId, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String resourceName = Utils.getValueFromIdByName(id, "energyServices");
        if (resourceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'energyServices'.", id)));
        }
        String privateEndpointConnectionProxyId = Utils.getValueFromIdByName(id, "privateEndpointConnectionProxies");
        if (privateEndpointConnectionProxyId == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment"
                                    + " 'privateEndpointConnectionProxies'.",
                                id)));
        }
        this.delete(resourceGroupName, resourceName, privateEndpointConnectionProxyId, context);
    }

    private PrivateEndpointConnectionProxiesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.oep.OepManager manager() {
        return this.serviceManager;
    }

    public PrivateEndpointConnectionProxyImpl define(String name) {
        return new PrivateEndpointConnectionProxyImpl(name, this.manager());
    }
}
