// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.oep.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** List of cors rules. */
@Fluent
public final class CorsRulesList {
    /*
     * List of allowed headers
     */
    @JsonProperty(value = "allowedHeaders")
    private List<String> allowedHeaders;

    /*
     * List of allowed HTTP methods
     */
    @JsonProperty(value = "allowedMethods")
    private List<AllowedMethods> allowedMethods;

    /*
     * List of allowed origin endpoints
     */
    @JsonProperty(value = "allowedOrigins")
    private List<String> allowedOrigins;

    /*
     * List of exposed headers
     */
    @JsonProperty(value = "exposedHeaders")
    private List<String> exposedHeaders;

    /*
     * Max amount of time that a browser than cache the preflight OPTIONS request
     */
    @JsonProperty(value = "maxAgeInSeconds")
    private Integer maxAgeInSeconds;

    /** Creates an instance of CorsRulesList class. */
    public CorsRulesList() {
    }

    /**
     * Get the allowedHeaders property: List of allowed headers.
     *
     * @return the allowedHeaders value.
     */
    public List<String> allowedHeaders() {
        return this.allowedHeaders;
    }

    /**
     * Set the allowedHeaders property: List of allowed headers.
     *
     * @param allowedHeaders the allowedHeaders value to set.
     * @return the CorsRulesList object itself.
     */
    public CorsRulesList withAllowedHeaders(List<String> allowedHeaders) {
        this.allowedHeaders = allowedHeaders;
        return this;
    }

    /**
     * Get the allowedMethods property: List of allowed HTTP methods.
     *
     * @return the allowedMethods value.
     */
    public List<AllowedMethods> allowedMethods() {
        return this.allowedMethods;
    }

    /**
     * Set the allowedMethods property: List of allowed HTTP methods.
     *
     * @param allowedMethods the allowedMethods value to set.
     * @return the CorsRulesList object itself.
     */
    public CorsRulesList withAllowedMethods(List<AllowedMethods> allowedMethods) {
        this.allowedMethods = allowedMethods;
        return this;
    }

    /**
     * Get the allowedOrigins property: List of allowed origin endpoints.
     *
     * @return the allowedOrigins value.
     */
    public List<String> allowedOrigins() {
        return this.allowedOrigins;
    }

    /**
     * Set the allowedOrigins property: List of allowed origin endpoints.
     *
     * @param allowedOrigins the allowedOrigins value to set.
     * @return the CorsRulesList object itself.
     */
    public CorsRulesList withAllowedOrigins(List<String> allowedOrigins) {
        this.allowedOrigins = allowedOrigins;
        return this;
    }

    /**
     * Get the exposedHeaders property: List of exposed headers.
     *
     * @return the exposedHeaders value.
     */
    public List<String> exposedHeaders() {
        return this.exposedHeaders;
    }

    /**
     * Set the exposedHeaders property: List of exposed headers.
     *
     * @param exposedHeaders the exposedHeaders value to set.
     * @return the CorsRulesList object itself.
     */
    public CorsRulesList withExposedHeaders(List<String> exposedHeaders) {
        this.exposedHeaders = exposedHeaders;
        return this;
    }

    /**
     * Get the maxAgeInSeconds property: Max amount of time that a browser than cache the preflight OPTIONS request.
     *
     * @return the maxAgeInSeconds value.
     */
    public Integer maxAgeInSeconds() {
        return this.maxAgeInSeconds;
    }

    /**
     * Set the maxAgeInSeconds property: Max amount of time that a browser than cache the preflight OPTIONS request.
     *
     * @param maxAgeInSeconds the maxAgeInSeconds value to set.
     * @return the CorsRulesList object itself.
     */
    public CorsRulesList withMaxAgeInSeconds(Integer maxAgeInSeconds) {
        this.maxAgeInSeconds = maxAgeInSeconds;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
