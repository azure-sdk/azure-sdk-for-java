// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.manufacturingplatform.generated;

import com.azure.resourcemanager.manufacturingplatform.models.AzureResourceManagerCommonTypesManagedServiceIdentityUpdate;
import com.azure.resourcemanager.manufacturingplatform.models.AzureResourceManagerCommonTypesSkuUpdate;
import com.azure.resourcemanager.manufacturingplatform.models.DenyAssignmentExclusion;
import com.azure.resourcemanager.manufacturingplatform.models.FabricProfileUpdate;
import com.azure.resourcemanager.manufacturingplatform.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.manufacturingplatform.models.MdsResource;
import com.azure.resourcemanager.manufacturingplatform.models.MdsResourceUpdateProperties;
import com.azure.resourcemanager.manufacturingplatform.models.OpenAIProfile;
import com.azure.resourcemanager.manufacturingplatform.models.ResourceState;
import com.azure.resourcemanager.manufacturingplatform.models.SkuTier;
import com.azure.resourcemanager.manufacturingplatform.models.UserAssignedIdentities;
import com.azure.resourcemanager.manufacturingplatform.models.UserManagedOpenAIProfileUpdate;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for ManufacturingDataServices Update.
 */
public final class ManufacturingDataServicesUpdateSamples {
    /*
     * x-ms-original-file:
     * specification/manufacturingplatform/resource-manager/Microsoft.ManufacturingPlatform/stable/2025-03-01/examples/
     * ManufacturingDataServices_Update_MaximumSet_Gen.json
     */
    /**
     * Sample code: ManufacturingDataServices_Update_MaximumSet.
     * 
     * @param manager Entry point to ManufacturingplatformManager.
     */
    public static void manufacturingDataServicesUpdateMaximumSet(
        com.azure.resourcemanager.manufacturingplatform.ManufacturingplatformManager manager) {
        MdsResource resource = manager.manufacturingDataServices()
            .getByResourceGroupWithResponse("rgmanufacturingplatform", "-JC180-G53HQ-DV45--2",
                com.azure.core.util.Context.NONE)
            .getValue();
        resource.update()
            .withTags(mapOf("key686", "fakeTokenPlaceholder"))
            .withIdentity(new AzureResourceManagerCommonTypesManagedServiceIdentityUpdate()
                .withType(ManagedServiceIdentityType.NONE)
                .withUserAssignedIdentities(mapOf("key1454", new UserAssignedIdentities())))
            .withSku(new AzureResourceManagerCommonTypesSkuUpdate().withName("qxvzffcwcfranfrtxop")
                .withTier(SkuTier.FREE)
                .withSize("iuwoiucktfykgl")
                .withFamily("espbydeqhwpv")
                .withCapacity(10))
            .withProperties(new MdsResourceUpdateProperties().withVersion("nantvrbu")
                .withEnableCopilot(true)
                .withEnableDiagnosticSettings(true)
                .withOpenAIProfile(new OpenAIProfile().withGptModelName("dsbzdlz")
                    .withGptModelVersion("zvhjpcupzpgcwfooqynjsnexzb")
                    .withGptModelCapacity(17)
                    .withGptModelSkuName("okujmvpatodobzxiagptxmcmzlfu")
                    .withEmbeddingModelName("gvmbmegz")
                    .withEmbeddingModelVersion("jcywywrzkspz")
                    .withEmbeddingModelSkuName("ptrebrxvcytfvutzysjbsiepenjkbz")
                    .withEmbeddingModelCapacity(16))
                .withFabricProfile(new FabricProfileUpdate().withKeyUri("fakeTokenPlaceholder")
                    .withOneLakeUri("creuqapiyocerabsdfamjlhxgxsmq")
                    .withOneLakePath("pkwu"))
                .withUserManagedOpenAIProfile(new UserManagedOpenAIProfileUpdate().withId("pjgxutmesugsym")
                    .withGptModelDeploymentName("xbja")
                    .withEmbeddingModelDeploymentName("jxajth"))
                .withDenyAssignmentExclusions(Arrays
                    .asList(new DenyAssignmentExclusion().withId("jgkmcnaiascxqner").withType("pkwxzngyovmeunimdk")))
                .withResourceState(ResourceState.ACTIVE))
            .apply();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
