// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.manufacturingplatform.generated;

import com.azure.resourcemanager.manufacturingplatform.models.AmlProfileUpdate;
import com.azure.resourcemanager.manufacturingplatform.models.AzureResourceManagerCommonTypesManagedServiceIdentityUpdate;
import com.azure.resourcemanager.manufacturingplatform.models.AzureResourceManagerCommonTypesSkuUpdate;
import com.azure.resourcemanager.manufacturingplatform.models.DenyAssignmentExclusion;
import com.azure.resourcemanager.manufacturingplatform.models.FabricProfileUpdate;
import com.azure.resourcemanager.manufacturingplatform.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.manufacturingplatform.models.MdsResource;
import com.azure.resourcemanager.manufacturingplatform.models.MdsResourceUpdateProperties;
import com.azure.resourcemanager.manufacturingplatform.models.OpenAIProfile;
import com.azure.resourcemanager.manufacturingplatform.models.ResourceState;
import com.azure.resourcemanager.manufacturingplatform.models.SkuTier;
import com.azure.resourcemanager.manufacturingplatform.models.UserAssignedIdentity;
import com.azure.resourcemanager.manufacturingplatform.models.UserManagedOpenAIProfileUpdate;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for ManufacturingDataServices Update.
 */
public final class ManufacturingDataServicesUpdateSamples {
    /*
     * x-ms-original-file:
     * specification/manufacturingplatform/resource-manager/Microsoft.ManufacturingPlatform/preview/2024-02-01-preview/
     * examples/ManufacturingDataServices_Update_MaximumSet_Gen.json
     */
    /**
     * Sample code: ManufacturingDataServices_Update_MaximumSet.
     * 
     * @param manager Entry point to ManufacturingplatformManager.
     */
    public static void manufacturingDataServicesUpdateMaximumSet(
        com.azure.resourcemanager.manufacturingplatform.ManufacturingplatformManager manager) {
        MdsResource resource = manager.manufacturingDataServices()
            .getByResourceGroupWithResponse("rgmanufacturingplatform", "-JC180-G53HQ-DV45--2",
                com.azure.core.util.Context.NONE)
            .getValue();
        resource.update()
            .withTags(mapOf("key8765", "fakeTokenPlaceholder"))
            .withIdentity(new AzureResourceManagerCommonTypesManagedServiceIdentityUpdate()
                .withType(ManagedServiceIdentityType.NONE)
                .withUserAssignedIdentities(mapOf("key5851", new UserAssignedIdentity())))
            .withSku(new AzureResourceManagerCommonTypesSkuUpdate().withName("rbwukuvzskhsarruzdkpxkjekxbc")
                .withTier(SkuTier.FREE)
                .withSize("ulsrkxmhtvulceyyzmknprvsyw")
                .withFamily("uurphlxfxgzud")
                .withCapacity(12))
            .withProperties(new MdsResourceUpdateProperties().withVersion("uihmagrnpqkkbjtsohqgyoxmoyrtg")
                .withEnableTeamsNotification(true)
                .withEnableCopilot(true)
                .withEnableDiagnosticSettings(true)
                .withOpenAIProfile(new OpenAIProfile().withGptModelName("oclkeq")
                    .withGptModelVersion("paewwsvlhp")
                    .withGptModelCapacity(25)
                    .withGptModelSkuName("uuy")
                    .withEmbeddingModelName("xdqqhveootydkaed")
                    .withEmbeddingModelVersion("dddrtaedlevdqosxap")
                    .withEmbeddingModelSkuName("pdyhughmmkwmajeqlseuuydox")
                    .withEmbeddingModelCapacity(30))
                .withAmlProfile(new AmlProfileUpdate().withId("qjr").withCustomNerServiceUri("vcnedenz"))
                .withFabricProfile(new FabricProfileUpdate().withKeyUri("fakeTokenPlaceholder")
                    .withOneLakeUri("cbtxruhkzmsvxavtwp")
                    .withOneLakePath("wyxwdawtwcsuwyu"))
                .withUserManagedOpenAIProfile(new UserManagedOpenAIProfileUpdate().withId("pbpgcwghuullcbapcpxllffkri")
                    .withGptModelDeploymentName("evqxxkkeguvpujjxwv")
                    .withEmbeddingModelDeploymentName("aofhgjrzwvlj"))
                .withDenyAssignmentExclusions(Arrays.asList(
                    new DenyAssignmentExclusion().withId("adxldjrbyhdovyxt").withType("tswtczntehsdxgmwkjmlffbkkkar")))
                .withResourceState(ResourceState.ACTIVE))
            .apply();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
