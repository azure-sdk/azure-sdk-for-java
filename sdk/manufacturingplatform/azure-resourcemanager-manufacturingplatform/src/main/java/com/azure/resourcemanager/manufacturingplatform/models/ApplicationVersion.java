// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.manufacturingplatform.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Information about application versions.
 */
@Fluent
public final class ApplicationVersion implements JsonSerializable<ApplicationVersion> {
    /*
     * Application Version
     */
    private String version;

    /*
     * Is Latest
     */
    private boolean isLatest;

    /*
     * Is Preview
     */
    private boolean isPreview;

    /*
     * Is Deprecated
     */
    private boolean isDeprecated;

    /**
     * Creates an instance of ApplicationVersion class.
     */
    public ApplicationVersion() {
    }

    /**
     * Get the version property: Application Version.
     * 
     * @return the version value.
     */
    public String version() {
        return this.version;
    }

    /**
     * Set the version property: Application Version.
     * 
     * @param version the version value to set.
     * @return the ApplicationVersion object itself.
     */
    public ApplicationVersion withVersion(String version) {
        this.version = version;
        return this;
    }

    /**
     * Get the isLatest property: Is Latest.
     * 
     * @return the isLatest value.
     */
    public boolean isLatest() {
        return this.isLatest;
    }

    /**
     * Set the isLatest property: Is Latest.
     * 
     * @param isLatest the isLatest value to set.
     * @return the ApplicationVersion object itself.
     */
    public ApplicationVersion withIsLatest(boolean isLatest) {
        this.isLatest = isLatest;
        return this;
    }

    /**
     * Get the isPreview property: Is Preview.
     * 
     * @return the isPreview value.
     */
    public boolean isPreview() {
        return this.isPreview;
    }

    /**
     * Set the isPreview property: Is Preview.
     * 
     * @param isPreview the isPreview value to set.
     * @return the ApplicationVersion object itself.
     */
    public ApplicationVersion withIsPreview(boolean isPreview) {
        this.isPreview = isPreview;
        return this;
    }

    /**
     * Get the isDeprecated property: Is Deprecated.
     * 
     * @return the isDeprecated value.
     */
    public boolean isDeprecated() {
        return this.isDeprecated;
    }

    /**
     * Set the isDeprecated property: Is Deprecated.
     * 
     * @param isDeprecated the isDeprecated value to set.
     * @return the ApplicationVersion object itself.
     */
    public ApplicationVersion withIsDeprecated(boolean isDeprecated) {
        this.isDeprecated = isDeprecated;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (version() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property version in model ApplicationVersion"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ApplicationVersion.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("version", this.version);
        jsonWriter.writeBooleanField("isLatest", this.isLatest);
        jsonWriter.writeBooleanField("isPreview", this.isPreview);
        jsonWriter.writeBooleanField("isDeprecated", this.isDeprecated);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ApplicationVersion from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ApplicationVersion if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ApplicationVersion.
     */
    public static ApplicationVersion fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ApplicationVersion deserializedApplicationVersion = new ApplicationVersion();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("version".equals(fieldName)) {
                    deserializedApplicationVersion.version = reader.getString();
                } else if ("isLatest".equals(fieldName)) {
                    deserializedApplicationVersion.isLatest = reader.getBoolean();
                } else if ("isPreview".equals(fieldName)) {
                    deserializedApplicationVersion.isPreview = reader.getBoolean();
                } else if ("isDeprecated".equals(fieldName)) {
                    deserializedApplicationVersion.isDeprecated = reader.getBoolean();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedApplicationVersion;
        });
    }
}
