// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.manufacturingplatform.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The properties related to Azure Redis Cache Resource.
 */
@Immutable
public final class RedisProfile implements JsonSerializable<RedisProfile> {
    /*
     * Resource Id of Azure Redis Cache Resource
     */
    private String id;

    /**
     * Creates an instance of RedisProfile class.
     */
    public RedisProfile() {
    }

    /**
     * Get the id property: Resource Id of Azure Redis Cache Resource.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RedisProfile from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RedisProfile if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the RedisProfile.
     */
    public static RedisProfile fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RedisProfile deserializedRedisProfile = new RedisProfile();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedRedisProfile.id = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRedisProfile;
        });
    }
}
