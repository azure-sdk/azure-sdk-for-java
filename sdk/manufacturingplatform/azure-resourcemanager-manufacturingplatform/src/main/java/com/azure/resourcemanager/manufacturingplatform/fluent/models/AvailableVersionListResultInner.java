// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.manufacturingplatform.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.manufacturingplatform.models.ApplicationVersion;
import java.io.IOException;
import java.util.List;

/**
 * The list of available versions.
 */
@Fluent
public final class AvailableVersionListResultInner implements JsonSerializable<AvailableVersionListResultInner> {
    /*
     * The list of versions
     */
    private List<ApplicationVersion> versions;

    /**
     * Creates an instance of AvailableVersionListResultInner class.
     */
    public AvailableVersionListResultInner() {
    }

    /**
     * Get the versions property: The list of versions.
     * 
     * @return the versions value.
     */
    public List<ApplicationVersion> versions() {
        return this.versions;
    }

    /**
     * Set the versions property: The list of versions.
     * 
     * @param versions the versions value to set.
     * @return the AvailableVersionListResultInner object itself.
     */
    public AvailableVersionListResultInner withVersions(List<ApplicationVersion> versions) {
        this.versions = versions;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (versions() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property versions in model AvailableVersionListResultInner"));
        } else {
            versions().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(AvailableVersionListResultInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("versions", this.versions, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AvailableVersionListResultInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AvailableVersionListResultInner if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AvailableVersionListResultInner.
     */
    public static AvailableVersionListResultInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AvailableVersionListResultInner deserializedAvailableVersionListResultInner
                = new AvailableVersionListResultInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("versions".equals(fieldName)) {
                    List<ApplicationVersion> versions
                        = reader.readArray(reader1 -> ApplicationVersion.fromJson(reader1));
                    deserializedAvailableVersionListResultInner.versions = versions;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAvailableVersionListResultInner;
        });
    }
}
