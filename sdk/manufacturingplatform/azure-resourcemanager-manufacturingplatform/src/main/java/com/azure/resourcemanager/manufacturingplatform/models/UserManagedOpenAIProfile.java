// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.manufacturingplatform.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The properties related to User Managed OpenAI Resource.
 */
@Fluent
public final class UserManagedOpenAIProfile implements JsonSerializable<UserManagedOpenAIProfile> {
    /*
     * Resource Id of OpenAI Resource
     */
    private String id;

    /*
     * GPT Model Deployment Name
     */
    private String gptModelDeploymentName;

    /*
     * Embedding Model Deployment Name
     */
    private String embeddingModelDeploymentName;

    /*
     * Embedding Model Type
     */
    private String embeddingModelType;

    /**
     * Creates an instance of UserManagedOpenAIProfile class.
     */
    public UserManagedOpenAIProfile() {
    }

    /**
     * Get the id property: Resource Id of OpenAI Resource.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: Resource Id of OpenAI Resource.
     * 
     * @param id the id value to set.
     * @return the UserManagedOpenAIProfile object itself.
     */
    public UserManagedOpenAIProfile withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the gptModelDeploymentName property: GPT Model Deployment Name.
     * 
     * @return the gptModelDeploymentName value.
     */
    public String gptModelDeploymentName() {
        return this.gptModelDeploymentName;
    }

    /**
     * Set the gptModelDeploymentName property: GPT Model Deployment Name.
     * 
     * @param gptModelDeploymentName the gptModelDeploymentName value to set.
     * @return the UserManagedOpenAIProfile object itself.
     */
    public UserManagedOpenAIProfile withGptModelDeploymentName(String gptModelDeploymentName) {
        this.gptModelDeploymentName = gptModelDeploymentName;
        return this;
    }

    /**
     * Get the embeddingModelDeploymentName property: Embedding Model Deployment Name.
     * 
     * @return the embeddingModelDeploymentName value.
     */
    public String embeddingModelDeploymentName() {
        return this.embeddingModelDeploymentName;
    }

    /**
     * Set the embeddingModelDeploymentName property: Embedding Model Deployment Name.
     * 
     * @param embeddingModelDeploymentName the embeddingModelDeploymentName value to set.
     * @return the UserManagedOpenAIProfile object itself.
     */
    public UserManagedOpenAIProfile withEmbeddingModelDeploymentName(String embeddingModelDeploymentName) {
        this.embeddingModelDeploymentName = embeddingModelDeploymentName;
        return this;
    }

    /**
     * Get the embeddingModelType property: Embedding Model Type.
     * 
     * @return the embeddingModelType value.
     */
    public String embeddingModelType() {
        return this.embeddingModelType;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (id() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property id in model UserManagedOpenAIProfile"));
        }
        if (gptModelDeploymentName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property gptModelDeploymentName in model UserManagedOpenAIProfile"));
        }
        if (embeddingModelDeploymentName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property embeddingModelDeploymentName in model UserManagedOpenAIProfile"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(UserManagedOpenAIProfile.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("gptModelDeploymentName", this.gptModelDeploymentName);
        jsonWriter.writeStringField("embeddingModelDeploymentName", this.embeddingModelDeploymentName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UserManagedOpenAIProfile from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UserManagedOpenAIProfile if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the UserManagedOpenAIProfile.
     */
    public static UserManagedOpenAIProfile fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            UserManagedOpenAIProfile deserializedUserManagedOpenAIProfile = new UserManagedOpenAIProfile();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedUserManagedOpenAIProfile.id = reader.getString();
                } else if ("gptModelDeploymentName".equals(fieldName)) {
                    deserializedUserManagedOpenAIProfile.gptModelDeploymentName = reader.getString();
                } else if ("embeddingModelDeploymentName".equals(fieldName)) {
                    deserializedUserManagedOpenAIProfile.embeddingModelDeploymentName = reader.getString();
                } else if ("embeddingModelType".equals(fieldName)) {
                    deserializedUserManagedOpenAIProfile.embeddingModelType = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUserManagedOpenAIProfile;
        });
    }
}
