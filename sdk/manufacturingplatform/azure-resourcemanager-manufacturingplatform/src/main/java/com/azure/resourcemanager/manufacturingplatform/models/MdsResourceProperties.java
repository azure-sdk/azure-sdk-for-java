// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.manufacturingplatform.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Details of the ManufacturingPlatform MdsResource.
 */
@Fluent
public final class MdsResourceProperties implements JsonSerializable<MdsResourceProperties> {
    /*
     * The status of the last operation.
     */
    private ProvisioningState provisioningState;

    /*
     * Mds Resource Version.
     */
    private String version;

    /*
     * Enable Copilot.
     */
    private Boolean enableCopilot;

    /*
     * Enable Diagnostic Settings.
     */
    private Boolean enableDiagnosticSettings;

    /*
     * AAD Application Id.
     */
    private String aadApplicationId;

    /*
     * AKS Admin Group Id.
     */
    private String aksAdminGroupId;

    /*
     * Service Url
     */
    private String serviceUrl;

    /*
     * Profile of AKS Created.
     */
    private AksProfile aksProfile;

    /*
     * Profile of Storage Created.
     */
    private StorageProfile storageProfile;

    /*
     * Profile of Database Created.
     */
    private DatabaseProfile databaseProfile;

    /*
     * Profile of Adx Created.
     */
    private AdxProfile adxProfile;

    /*
     * Profile of Azure Redis Created.
     */
    private RedisProfile redisProfile;

    /*
     * Profile of Monitoring Resource Created.
     */
    private MonitoringProfile monitoringProfile;

    /*
     * Profile of EventHub Resource.
     */
    private EventHubProfile eventHubProfile;

    /*
     * Profile of Function App Resource.
     */
    private FunctionAppProfile functionAppProfile;

    /*
     * Profile of OpenAI Resource.
     */
    private OpenAIProfile openAIProfile;

    /*
     * Configuration of the managed resource group associated with the resource.
     */
    private ManagedResourceGroupConfiguration managedResourceGroupConfiguration;

    /*
     * Managed On Behalf Of Configuration.
     */
    private ManagedOnBehalfOfConfiguration managedOnBehalfOfConfiguration;

    /*
     * Profile of CMK Settings.
     */
    private CmkProfile cmkProfile;

    /*
     * Profile of Fabric resources.
     */
    private FabricProfile fabricProfile;

    /*
     * Profile of User Managed OpenAI Resource.
     */
    private UserManagedOpenAIProfile userManagedOpenAIProfile;

    /*
     * Deny Assignments exclusion list.
     */
    private List<DenyAssignmentExclusion> denyAssignmentExclusions;

    /*
     * State of the resource
     */
    private ResourceState resourceState;

    /*
     * Zone redundancy state for resources
     */
    private RedundancyState redundancyState;

    /**
     * Creates an instance of MdsResourceProperties class.
     */
    public MdsResourceProperties() {
    }

    /**
     * Get the provisioningState property: The status of the last operation.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the version property: Mds Resource Version.
     * 
     * @return the version value.
     */
    public String version() {
        return this.version;
    }

    /**
     * Set the version property: Mds Resource Version.
     * 
     * @param version the version value to set.
     * @return the MdsResourceProperties object itself.
     */
    public MdsResourceProperties withVersion(String version) {
        this.version = version;
        return this;
    }

    /**
     * Get the enableCopilot property: Enable Copilot.
     * 
     * @return the enableCopilot value.
     */
    public Boolean enableCopilot() {
        return this.enableCopilot;
    }

    /**
     * Set the enableCopilot property: Enable Copilot.
     * 
     * @param enableCopilot the enableCopilot value to set.
     * @return the MdsResourceProperties object itself.
     */
    public MdsResourceProperties withEnableCopilot(Boolean enableCopilot) {
        this.enableCopilot = enableCopilot;
        return this;
    }

    /**
     * Get the enableDiagnosticSettings property: Enable Diagnostic Settings.
     * 
     * @return the enableDiagnosticSettings value.
     */
    public Boolean enableDiagnosticSettings() {
        return this.enableDiagnosticSettings;
    }

    /**
     * Set the enableDiagnosticSettings property: Enable Diagnostic Settings.
     * 
     * @param enableDiagnosticSettings the enableDiagnosticSettings value to set.
     * @return the MdsResourceProperties object itself.
     */
    public MdsResourceProperties withEnableDiagnosticSettings(Boolean enableDiagnosticSettings) {
        this.enableDiagnosticSettings = enableDiagnosticSettings;
        return this;
    }

    /**
     * Get the aadApplicationId property: AAD Application Id.
     * 
     * @return the aadApplicationId value.
     */
    public String aadApplicationId() {
        return this.aadApplicationId;
    }

    /**
     * Set the aadApplicationId property: AAD Application Id.
     * 
     * @param aadApplicationId the aadApplicationId value to set.
     * @return the MdsResourceProperties object itself.
     */
    public MdsResourceProperties withAadApplicationId(String aadApplicationId) {
        this.aadApplicationId = aadApplicationId;
        return this;
    }

    /**
     * Get the aksAdminGroupId property: AKS Admin Group Id.
     * 
     * @return the aksAdminGroupId value.
     */
    public String aksAdminGroupId() {
        return this.aksAdminGroupId;
    }

    /**
     * Set the aksAdminGroupId property: AKS Admin Group Id.
     * 
     * @param aksAdminGroupId the aksAdminGroupId value to set.
     * @return the MdsResourceProperties object itself.
     */
    public MdsResourceProperties withAksAdminGroupId(String aksAdminGroupId) {
        this.aksAdminGroupId = aksAdminGroupId;
        return this;
    }

    /**
     * Get the serviceUrl property: Service Url.
     * 
     * @return the serviceUrl value.
     */
    public String serviceUrl() {
        return this.serviceUrl;
    }

    /**
     * Get the aksProfile property: Profile of AKS Created.
     * 
     * @return the aksProfile value.
     */
    public AksProfile aksProfile() {
        return this.aksProfile;
    }

    /**
     * Get the storageProfile property: Profile of Storage Created.
     * 
     * @return the storageProfile value.
     */
    public StorageProfile storageProfile() {
        return this.storageProfile;
    }

    /**
     * Get the databaseProfile property: Profile of Database Created.
     * 
     * @return the databaseProfile value.
     */
    public DatabaseProfile databaseProfile() {
        return this.databaseProfile;
    }

    /**
     * Get the adxProfile property: Profile of Adx Created.
     * 
     * @return the adxProfile value.
     */
    public AdxProfile adxProfile() {
        return this.adxProfile;
    }

    /**
     * Get the redisProfile property: Profile of Azure Redis Created.
     * 
     * @return the redisProfile value.
     */
    public RedisProfile redisProfile() {
        return this.redisProfile;
    }

    /**
     * Get the monitoringProfile property: Profile of Monitoring Resource Created.
     * 
     * @return the monitoringProfile value.
     */
    public MonitoringProfile monitoringProfile() {
        return this.monitoringProfile;
    }

    /**
     * Get the eventHubProfile property: Profile of EventHub Resource.
     * 
     * @return the eventHubProfile value.
     */
    public EventHubProfile eventHubProfile() {
        return this.eventHubProfile;
    }

    /**
     * Get the functionAppProfile property: Profile of Function App Resource.
     * 
     * @return the functionAppProfile value.
     */
    public FunctionAppProfile functionAppProfile() {
        return this.functionAppProfile;
    }

    /**
     * Get the openAIProfile property: Profile of OpenAI Resource.
     * 
     * @return the openAIProfile value.
     */
    public OpenAIProfile openAIProfile() {
        return this.openAIProfile;
    }

    /**
     * Set the openAIProfile property: Profile of OpenAI Resource.
     * 
     * @param openAIProfile the openAIProfile value to set.
     * @return the MdsResourceProperties object itself.
     */
    public MdsResourceProperties withOpenAIProfile(OpenAIProfile openAIProfile) {
        this.openAIProfile = openAIProfile;
        return this;
    }

    /**
     * Get the managedResourceGroupConfiguration property: Configuration of the managed resource group associated with
     * the resource.
     * 
     * @return the managedResourceGroupConfiguration value.
     */
    public ManagedResourceGroupConfiguration managedResourceGroupConfiguration() {
        return this.managedResourceGroupConfiguration;
    }

    /**
     * Get the managedOnBehalfOfConfiguration property: Managed On Behalf Of Configuration.
     * 
     * @return the managedOnBehalfOfConfiguration value.
     */
    public ManagedOnBehalfOfConfiguration managedOnBehalfOfConfiguration() {
        return this.managedOnBehalfOfConfiguration;
    }

    /**
     * Get the cmkProfile property: Profile of CMK Settings.
     * 
     * @return the cmkProfile value.
     */
    public CmkProfile cmkProfile() {
        return this.cmkProfile;
    }

    /**
     * Set the cmkProfile property: Profile of CMK Settings.
     * 
     * @param cmkProfile the cmkProfile value to set.
     * @return the MdsResourceProperties object itself.
     */
    public MdsResourceProperties withCmkProfile(CmkProfile cmkProfile) {
        this.cmkProfile = cmkProfile;
        return this;
    }

    /**
     * Get the fabricProfile property: Profile of Fabric resources.
     * 
     * @return the fabricProfile value.
     */
    public FabricProfile fabricProfile() {
        return this.fabricProfile;
    }

    /**
     * Set the fabricProfile property: Profile of Fabric resources.
     * 
     * @param fabricProfile the fabricProfile value to set.
     * @return the MdsResourceProperties object itself.
     */
    public MdsResourceProperties withFabricProfile(FabricProfile fabricProfile) {
        this.fabricProfile = fabricProfile;
        return this;
    }

    /**
     * Get the userManagedOpenAIProfile property: Profile of User Managed OpenAI Resource.
     * 
     * @return the userManagedOpenAIProfile value.
     */
    public UserManagedOpenAIProfile userManagedOpenAIProfile() {
        return this.userManagedOpenAIProfile;
    }

    /**
     * Set the userManagedOpenAIProfile property: Profile of User Managed OpenAI Resource.
     * 
     * @param userManagedOpenAIProfile the userManagedOpenAIProfile value to set.
     * @return the MdsResourceProperties object itself.
     */
    public MdsResourceProperties withUserManagedOpenAIProfile(UserManagedOpenAIProfile userManagedOpenAIProfile) {
        this.userManagedOpenAIProfile = userManagedOpenAIProfile;
        return this;
    }

    /**
     * Get the denyAssignmentExclusions property: Deny Assignments exclusion list.
     * 
     * @return the denyAssignmentExclusions value.
     */
    public List<DenyAssignmentExclusion> denyAssignmentExclusions() {
        return this.denyAssignmentExclusions;
    }

    /**
     * Set the denyAssignmentExclusions property: Deny Assignments exclusion list.
     * 
     * @param denyAssignmentExclusions the denyAssignmentExclusions value to set.
     * @return the MdsResourceProperties object itself.
     */
    public MdsResourceProperties withDenyAssignmentExclusions(List<DenyAssignmentExclusion> denyAssignmentExclusions) {
        this.denyAssignmentExclusions = denyAssignmentExclusions;
        return this;
    }

    /**
     * Get the resourceState property: State of the resource.
     * 
     * @return the resourceState value.
     */
    public ResourceState resourceState() {
        return this.resourceState;
    }

    /**
     * Set the resourceState property: State of the resource.
     * 
     * @param resourceState the resourceState value to set.
     * @return the MdsResourceProperties object itself.
     */
    public MdsResourceProperties withResourceState(ResourceState resourceState) {
        this.resourceState = resourceState;
        return this;
    }

    /**
     * Get the redundancyState property: Zone redundancy state for resources.
     * 
     * @return the redundancyState value.
     */
    public RedundancyState redundancyState() {
        return this.redundancyState;
    }

    /**
     * Set the redundancyState property: Zone redundancy state for resources.
     * 
     * @param redundancyState the redundancyState value to set.
     * @return the MdsResourceProperties object itself.
     */
    public MdsResourceProperties withRedundancyState(RedundancyState redundancyState) {
        this.redundancyState = redundancyState;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (aadApplicationId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property aadApplicationId in model MdsResourceProperties"));
        }
        if (aksProfile() != null) {
            aksProfile().validate();
        }
        if (storageProfile() != null) {
            storageProfile().validate();
        }
        if (databaseProfile() != null) {
            databaseProfile().validate();
        }
        if (adxProfile() != null) {
            adxProfile().validate();
        }
        if (redisProfile() != null) {
            redisProfile().validate();
        }
        if (monitoringProfile() != null) {
            monitoringProfile().validate();
        }
        if (eventHubProfile() != null) {
            eventHubProfile().validate();
        }
        if (functionAppProfile() != null) {
            functionAppProfile().validate();
        }
        if (openAIProfile() != null) {
            openAIProfile().validate();
        }
        if (managedResourceGroupConfiguration() != null) {
            managedResourceGroupConfiguration().validate();
        }
        if (managedOnBehalfOfConfiguration() != null) {
            managedOnBehalfOfConfiguration().validate();
        }
        if (cmkProfile() != null) {
            cmkProfile().validate();
        }
        if (fabricProfile() != null) {
            fabricProfile().validate();
        }
        if (userManagedOpenAIProfile() != null) {
            userManagedOpenAIProfile().validate();
        }
        if (denyAssignmentExclusions() != null) {
            denyAssignmentExclusions().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(MdsResourceProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("aadApplicationId", this.aadApplicationId);
        jsonWriter.writeStringField("version", this.version);
        jsonWriter.writeBooleanField("enableCopilot", this.enableCopilot);
        jsonWriter.writeBooleanField("enableDiagnosticSettings", this.enableDiagnosticSettings);
        jsonWriter.writeStringField("aksAdminGroupId", this.aksAdminGroupId);
        jsonWriter.writeJsonField("openAIProfile", this.openAIProfile);
        jsonWriter.writeJsonField("cmkProfile", this.cmkProfile);
        jsonWriter.writeJsonField("fabricProfile", this.fabricProfile);
        jsonWriter.writeJsonField("userManagedOpenAIProfile", this.userManagedOpenAIProfile);
        jsonWriter.writeArrayField("denyAssignmentExclusions", this.denyAssignmentExclusions,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("resourceState", this.resourceState == null ? null : this.resourceState.toString());
        jsonWriter.writeStringField("redundancyState",
            this.redundancyState == null ? null : this.redundancyState.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MdsResourceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MdsResourceProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MdsResourceProperties.
     */
    public static MdsResourceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MdsResourceProperties deserializedMdsResourceProperties = new MdsResourceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("aadApplicationId".equals(fieldName)) {
                    deserializedMdsResourceProperties.aadApplicationId = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedMdsResourceProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("version".equals(fieldName)) {
                    deserializedMdsResourceProperties.version = reader.getString();
                } else if ("enableCopilot".equals(fieldName)) {
                    deserializedMdsResourceProperties.enableCopilot = reader.getNullable(JsonReader::getBoolean);
                } else if ("enableDiagnosticSettings".equals(fieldName)) {
                    deserializedMdsResourceProperties.enableDiagnosticSettings
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("aksAdminGroupId".equals(fieldName)) {
                    deserializedMdsResourceProperties.aksAdminGroupId = reader.getString();
                } else if ("serviceUrl".equals(fieldName)) {
                    deserializedMdsResourceProperties.serviceUrl = reader.getString();
                } else if ("aksProfile".equals(fieldName)) {
                    deserializedMdsResourceProperties.aksProfile = AksProfile.fromJson(reader);
                } else if ("storageProfile".equals(fieldName)) {
                    deserializedMdsResourceProperties.storageProfile = StorageProfile.fromJson(reader);
                } else if ("databaseProfile".equals(fieldName)) {
                    deserializedMdsResourceProperties.databaseProfile = DatabaseProfile.fromJson(reader);
                } else if ("adxProfile".equals(fieldName)) {
                    deserializedMdsResourceProperties.adxProfile = AdxProfile.fromJson(reader);
                } else if ("redisProfile".equals(fieldName)) {
                    deserializedMdsResourceProperties.redisProfile = RedisProfile.fromJson(reader);
                } else if ("monitoringProfile".equals(fieldName)) {
                    deserializedMdsResourceProperties.monitoringProfile = MonitoringProfile.fromJson(reader);
                } else if ("eventHubProfile".equals(fieldName)) {
                    deserializedMdsResourceProperties.eventHubProfile = EventHubProfile.fromJson(reader);
                } else if ("functionAppProfile".equals(fieldName)) {
                    deserializedMdsResourceProperties.functionAppProfile = FunctionAppProfile.fromJson(reader);
                } else if ("openAIProfile".equals(fieldName)) {
                    deserializedMdsResourceProperties.openAIProfile = OpenAIProfile.fromJson(reader);
                } else if ("managedResourceGroupConfiguration".equals(fieldName)) {
                    deserializedMdsResourceProperties.managedResourceGroupConfiguration
                        = ManagedResourceGroupConfiguration.fromJson(reader);
                } else if ("managedOnBehalfOfConfiguration".equals(fieldName)) {
                    deserializedMdsResourceProperties.managedOnBehalfOfConfiguration
                        = ManagedOnBehalfOfConfiguration.fromJson(reader);
                } else if ("cmkProfile".equals(fieldName)) {
                    deserializedMdsResourceProperties.cmkProfile = CmkProfile.fromJson(reader);
                } else if ("fabricProfile".equals(fieldName)) {
                    deserializedMdsResourceProperties.fabricProfile = FabricProfile.fromJson(reader);
                } else if ("userManagedOpenAIProfile".equals(fieldName)) {
                    deserializedMdsResourceProperties.userManagedOpenAIProfile
                        = UserManagedOpenAIProfile.fromJson(reader);
                } else if ("denyAssignmentExclusions".equals(fieldName)) {
                    List<DenyAssignmentExclusion> denyAssignmentExclusions
                        = reader.readArray(reader1 -> DenyAssignmentExclusion.fromJson(reader1));
                    deserializedMdsResourceProperties.denyAssignmentExclusions = denyAssignmentExclusions;
                } else if ("resourceState".equals(fieldName)) {
                    deserializedMdsResourceProperties.resourceState = ResourceState.fromString(reader.getString());
                } else if ("redundancyState".equals(fieldName)) {
                    deserializedMdsResourceProperties.redundancyState = RedundancyState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMdsResourceProperties;
        });
    }
}
