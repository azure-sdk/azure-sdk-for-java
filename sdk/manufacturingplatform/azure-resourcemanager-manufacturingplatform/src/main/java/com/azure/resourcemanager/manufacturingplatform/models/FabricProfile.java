// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.manufacturingplatform.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The properties related to Fabric.
 */
@Fluent
public final class FabricProfile implements JsonSerializable<FabricProfile> {
    /*
     * Azure Key Vault Uri
     */
    private String keyUri;

    /*
     * URI of One Lake
     */
    private String oneLakeUri;

    /*
     * One Lake Path
     */
    private String oneLakePath;

    /**
     * Creates an instance of FabricProfile class.
     */
    public FabricProfile() {
    }

    /**
     * Get the keyUri property: Azure Key Vault Uri.
     * 
     * @return the keyUri value.
     */
    public String keyUri() {
        return this.keyUri;
    }

    /**
     * Set the keyUri property: Azure Key Vault Uri.
     * 
     * @param keyUri the keyUri value to set.
     * @return the FabricProfile object itself.
     */
    public FabricProfile withKeyUri(String keyUri) {
        this.keyUri = keyUri;
        return this;
    }

    /**
     * Get the oneLakeUri property: URI of One Lake.
     * 
     * @return the oneLakeUri value.
     */
    public String oneLakeUri() {
        return this.oneLakeUri;
    }

    /**
     * Set the oneLakeUri property: URI of One Lake.
     * 
     * @param oneLakeUri the oneLakeUri value to set.
     * @return the FabricProfile object itself.
     */
    public FabricProfile withOneLakeUri(String oneLakeUri) {
        this.oneLakeUri = oneLakeUri;
        return this;
    }

    /**
     * Get the oneLakePath property: One Lake Path.
     * 
     * @return the oneLakePath value.
     */
    public String oneLakePath() {
        return this.oneLakePath;
    }

    /**
     * Set the oneLakePath property: One Lake Path.
     * 
     * @param oneLakePath the oneLakePath value to set.
     * @return the FabricProfile object itself.
     */
    public FabricProfile withOneLakePath(String oneLakePath) {
        this.oneLakePath = oneLakePath;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (keyUri() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property keyUri in model FabricProfile"));
        }
        if (oneLakeUri() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property oneLakeUri in model FabricProfile"));
        }
        if (oneLakePath() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property oneLakePath in model FabricProfile"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(FabricProfile.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("keyUri", this.keyUri);
        jsonWriter.writeStringField("oneLakeUri", this.oneLakeUri);
        jsonWriter.writeStringField("oneLakePath", this.oneLakePath);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FabricProfile from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FabricProfile if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the FabricProfile.
     */
    public static FabricProfile fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FabricProfile deserializedFabricProfile = new FabricProfile();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("keyUri".equals(fieldName)) {
                    deserializedFabricProfile.keyUri = reader.getString();
                } else if ("oneLakeUri".equals(fieldName)) {
                    deserializedFabricProfile.oneLakeUri = reader.getString();
                } else if ("oneLakePath".equals(fieldName)) {
                    deserializedFabricProfile.oneLakePath = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFabricProfile;
        });
    }
}
