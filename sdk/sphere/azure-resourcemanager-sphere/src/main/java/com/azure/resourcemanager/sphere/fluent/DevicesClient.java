// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.sphere.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.exception.ManagementError;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.sphere.fluent.models.DeviceInner;
import com.azure.resourcemanager.sphere.models.DevicesUpdateResponse;
import com.azure.resourcemanager.sphere.models.DeviceUpdate;
import com.azure.resourcemanager.sphere.models.GenerateCapabilityImageRequest;

/**
 * An instance of this class provides access to all the operations defined in DevicesClient.
 */
public interface DevicesClient {
    /**
     * Get a Device. Use '.unassigned' or '.default' for the device group and product names when a device does not
     * belong to a device group and product.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param catalogName Name of catalog.
     * @param productName Name of product.
     * @param deviceGroupName Name of device group.
     * @param deviceName Device name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Device along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<DeviceInner> getWithResponse(String resourceGroupName, String catalogName, String productName,
        String deviceGroupName, String deviceName, Context context);

    /**
     * Get a Device. Use '.unassigned' or '.default' for the device group and product names when a device does not
     * belong to a device group and product.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param catalogName Name of catalog.
     * @param productName Name of product.
     * @param deviceGroupName Name of device group.
     * @param deviceName Device name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Device.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    DeviceInner get(String resourceGroupName, String catalogName, String productName, String deviceGroupName,
        String deviceName);

    /**
     * Create a Device. Use '.unassigned' or '.default' for the device group and product names to claim a device to the
     * catalog only.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param catalogName Name of catalog.
     * @param productName Name of product.
     * @param deviceGroupName Name of device group.
     * @param deviceName Device name.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of an device resource belonging to a device group resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<DeviceInner>, DeviceInner> beginCreateOrUpdate(String resourceGroupName, String catalogName,
        String productName, String deviceGroupName, String deviceName, DeviceInner resource);

    /**
     * Create a Device. Use '.unassigned' or '.default' for the device group and product names to claim a device to the
     * catalog only.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param catalogName Name of catalog.
     * @param productName Name of product.
     * @param deviceGroupName Name of device group.
     * @param deviceName Device name.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of an device resource belonging to a device group resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<DeviceInner>, DeviceInner> beginCreateOrUpdate(String resourceGroupName, String catalogName,
        String productName, String deviceGroupName, String deviceName, DeviceInner resource, Context context);

    /**
     * Create a Device. Use '.unassigned' or '.default' for the device group and product names to claim a device to the
     * catalog only.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param catalogName Name of catalog.
     * @param productName Name of product.
     * @param deviceGroupName Name of device group.
     * @param deviceName Device name.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an device resource belonging to a device group resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    DeviceInner createOrUpdate(String resourceGroupName, String catalogName, String productName, String deviceGroupName,
        String deviceName, DeviceInner resource);

    /**
     * Create a Device. Use '.unassigned' or '.default' for the device group and product names to claim a device to the
     * catalog only.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param catalogName Name of catalog.
     * @param productName Name of product.
     * @param deviceGroupName Name of device group.
     * @param deviceName Device name.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an device resource belonging to a device group resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    DeviceInner createOrUpdate(String resourceGroupName, String catalogName, String productName, String deviceGroupName,
        String deviceName, DeviceInner resource, Context context);

    /**
     * Update a Device. Use '.unassigned' or '.default' for the device group and product names to move a device to the
     * catalog level.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param catalogName Name of catalog.
     * @param productName Name of product.
     * @param deviceGroupName Name of device group.
     * @param deviceName Device name.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an device resource belonging to a device group resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    DevicesUpdateResponse updateWithResponse(String resourceGroupName, String catalogName, String productName,
        String deviceGroupName, String deviceName, DeviceUpdate properties, Context context);

    /**
     * Update a Device. Use '.unassigned' or '.default' for the device group and product names to move a device to the
     * catalog level.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param catalogName Name of catalog.
     * @param productName Name of product.
     * @param deviceGroupName Name of device group.
     * @param deviceName Device name.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an device resource belonging to a device group resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    DeviceInner update(String resourceGroupName, String catalogName, String productName, String deviceGroupName,
        String deviceName, DeviceUpdate properties);

    /**
     * Delete a Device.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param catalogName Name of catalog.
     * @param productName Name of product.
     * @param deviceGroupName Name of device group.
     * @param deviceName Device name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String catalogName, String productName,
        String deviceGroupName, String deviceName);

    /**
     * Delete a Device.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param catalogName Name of catalog.
     * @param productName Name of product.
     * @param deviceGroupName Name of device group.
     * @param deviceName Device name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String catalogName, String productName,
        String deviceGroupName, String deviceName, Context context);

    /**
     * Delete a Device.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param catalogName Name of catalog.
     * @param productName Name of product.
     * @param deviceGroupName Name of device group.
     * @param deviceName Device name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String catalogName, String productName, String deviceGroupName,
        String deviceName);

    /**
     * Delete a Device.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param catalogName Name of catalog.
     * @param productName Name of product.
     * @param deviceGroupName Name of device group.
     * @param deviceName Device name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String catalogName, String productName, String deviceGroupName,
        String deviceName, Context context);

    /**
     * List Device resources by DeviceGroup. '.default' and '.unassigned' are system defined values and cannot be used
     * for product or device group name.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param catalogName Name of catalog.
     * @param productName Name of product.
     * @param deviceGroupName Name of device group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Device list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<DeviceInner> listByDeviceGroup(String resourceGroupName, String catalogName, String productName,
        String deviceGroupName);

    /**
     * List Device resources by DeviceGroup. '.default' and '.unassigned' are system defined values and cannot be used
     * for product or device group name.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param catalogName Name of catalog.
     * @param productName Name of product.
     * @param deviceGroupName Name of device group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Device list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<DeviceInner> listByDeviceGroup(String resourceGroupName, String catalogName, String productName,
        String deviceGroupName, Context context);

    /**
     * Generates the capability image for the device. Use '.unassigned' or '.default' for the device group and product
     * names to generate the image for a device that does not belong to a specific device group and product.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param catalogName Name of catalog.
     * @param productName Name of product.
     * @param deviceGroupName Name of device group.
     * @param deviceName Device name.
     * @param body Generate capability image request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ManagementError>, ManagementError> beginGenerateCapabilityImage(String resourceGroupName,
        String catalogName, String productName, String deviceGroupName, String deviceName,
        GenerateCapabilityImageRequest body);

    /**
     * Generates the capability image for the device. Use '.unassigned' or '.default' for the device group and product
     * names to generate the image for a device that does not belong to a specific device group and product.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param catalogName Name of catalog.
     * @param productName Name of product.
     * @param deviceGroupName Name of device group.
     * @param deviceName Device name.
     * @param body Generate capability image request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ManagementError>, ManagementError> beginGenerateCapabilityImage(String resourceGroupName,
        String catalogName, String productName, String deviceGroupName, String deviceName,
        GenerateCapabilityImageRequest body, Context context);

    /**
     * Generates the capability image for the device. Use '.unassigned' or '.default' for the device group and product
     * names to generate the image for a device that does not belong to a specific device group and product.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param catalogName Name of catalog.
     * @param productName Name of product.
     * @param deviceGroupName Name of device group.
     * @param deviceName Device name.
     * @param body Generate capability image request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ManagementError generateCapabilityImage(String resourceGroupName, String catalogName, String productName,
        String deviceGroupName, String deviceName, GenerateCapabilityImageRequest body);

    /**
     * Generates the capability image for the device. Use '.unassigned' or '.default' for the device group and product
     * names to generate the image for a device that does not belong to a specific device group and product.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param catalogName Name of catalog.
     * @param productName Name of product.
     * @param deviceGroupName Name of device group.
     * @param deviceName Device name.
     * @param body Generate capability image request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ManagementError generateCapabilityImage(String resourceGroupName, String catalogName, String productName,
        String deviceGroupName, String deviceName, GenerateCapabilityImageRequest body, Context context);
}
