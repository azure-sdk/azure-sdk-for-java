// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.sphere.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.sphere.AzureSphereManager;
import com.azure.resourcemanager.sphere.fluent.models.ImageInner;
import com.azure.resourcemanager.sphere.models.Deployment;
import com.azure.resourcemanager.sphere.models.DeploymentProperties;
import com.azure.resourcemanager.sphere.models.ImageProperties;
import com.azure.resourcemanager.sphere.models.RegionalDataBoundary;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class DeploymentsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"deploymentId\":\"ltiugcxnavv\",\"deployedImages\":[{\"properties\":{\"image\":\"y\",\"imageId\":\"nyowxwlmdjrkvfg\",\"imageName\":\"fvpdbo\",\"regionalDataBoundary\":\"EU\",\"uri\":\"zsjqlh\",\"description\":\"r\",\"componentId\":\"deibqip\",\"imageType\":\"NormalWorldDtb\",\"provisioningState\":\"Deleting\"},\"id\":\"ndzwmkrefa\",\"name\":\"pjorwkqnyhg\",\"type\":\"ij\"}],\"deploymentDateUtc\":\"2021-03-05T18:22:33Z\",\"provisioningState\":\"Succeeded\"},\"id\":\"zs\",\"name\":\"ab\",\"type\":\"bsystawfsdjpvk\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AzureSphereManager manager = AzureSphereManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        Deployment response = manager.deployments()
            .define("khnzbonlw")
            .withExistingDeviceGroup("foqouicybx", "rzgszufoxci", "opidoamciodh", "haz")
            .withProperties(new DeploymentProperties().withDeploymentId("egokdwbwhkszzcmr")
                .withDeployedImages(Arrays.asList(
                    new ImageInner().withProperties(new ImageProperties().withImage("vbtqgsfraoyzk")
                        .withImageId("wtl")
                        .withRegionalDataBoundary(RegionalDataBoundary.NONE)),
                    new ImageInner().withProperties(new ImageProperties().withImage("bbejdcngqqm")
                        .withImageId("kufgmj")
                        .withRegionalDataBoundary(RegionalDataBoundary.EU)),
                    new ImageInner().withProperties(new ImageProperties().withImage("ylhalnswhcc")
                        .withImageId("hka")
                        .withRegionalDataBoundary(RegionalDataBoundary.EU)),
                    new ImageInner().withProperties(new ImageProperties().withImage("fgytguslfeadcyg")
                        .withImageId("kyhejhzisxgf")
                        .withRegionalDataBoundary(RegionalDataBoundary.NONE)))))
            .create();

        Assertions.assertEquals("ltiugcxnavv", response.properties().deploymentId());
        Assertions.assertEquals("y", response.properties().deployedImages().get(0).properties().image());
        Assertions.assertEquals("nyowxwlmdjrkvfg",
            response.properties().deployedImages().get(0).properties().imageId());
        Assertions.assertEquals(RegionalDataBoundary.EU,
            response.properties().deployedImages().get(0).properties().regionalDataBoundary());
    }
}
