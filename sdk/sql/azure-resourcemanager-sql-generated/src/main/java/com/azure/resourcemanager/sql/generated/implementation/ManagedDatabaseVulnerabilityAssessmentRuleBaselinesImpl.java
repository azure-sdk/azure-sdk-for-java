// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.generated.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.sql.generated.fluent.ManagedDatabaseVulnerabilityAssessmentRuleBaselinesClient;
import com.azure.resourcemanager.sql.generated.fluent.models.DatabaseVulnerabilityAssessmentRuleBaselineAutoGeneratedInner;
import com.azure.resourcemanager.sql.generated.models.DatabaseVulnerabilityAssessmentRuleBaselineAutoGenerated;
import com.azure.resourcemanager.sql.generated.models.ManagedDatabaseVulnerabilityAssessmentRuleBaselines;
import com.azure.resourcemanager.sql.generated.models.VulnerabilityAssessmentName;
import com.azure.resourcemanager.sql.generated.models.VulnerabilityAssessmentPolicyBaselineName;

public final class ManagedDatabaseVulnerabilityAssessmentRuleBaselinesImpl
    implements ManagedDatabaseVulnerabilityAssessmentRuleBaselines {
    private static final ClientLogger LOGGER =
        new ClientLogger(ManagedDatabaseVulnerabilityAssessmentRuleBaselinesImpl.class);

    private final ManagedDatabaseVulnerabilityAssessmentRuleBaselinesClient innerClient;

    private final com.azure.resourcemanager.sql.generated.SqlManager serviceManager;

    public ManagedDatabaseVulnerabilityAssessmentRuleBaselinesImpl(
        ManagedDatabaseVulnerabilityAssessmentRuleBaselinesClient innerClient,
        com.azure.resourcemanager.sql.generated.SqlManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<DatabaseVulnerabilityAssessmentRuleBaselineAutoGenerated> getWithResponse(
        String resourceGroupName,
        String managedInstanceName,
        String databaseName,
        VulnerabilityAssessmentName vulnerabilityAssessmentName,
        String ruleId,
        VulnerabilityAssessmentPolicyBaselineName baselineName,
        Context context) {
        Response<DatabaseVulnerabilityAssessmentRuleBaselineAutoGeneratedInner> inner =
            this
                .serviceClient()
                .getWithResponse(
                    resourceGroupName,
                    managedInstanceName,
                    databaseName,
                    vulnerabilityAssessmentName,
                    ruleId,
                    baselineName,
                    context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new DatabaseVulnerabilityAssessmentRuleBaselineAutoGeneratedImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public DatabaseVulnerabilityAssessmentRuleBaselineAutoGenerated get(
        String resourceGroupName,
        String managedInstanceName,
        String databaseName,
        VulnerabilityAssessmentName vulnerabilityAssessmentName,
        String ruleId,
        VulnerabilityAssessmentPolicyBaselineName baselineName) {
        DatabaseVulnerabilityAssessmentRuleBaselineAutoGeneratedInner inner =
            this
                .serviceClient()
                .get(
                    resourceGroupName,
                    managedInstanceName,
                    databaseName,
                    vulnerabilityAssessmentName,
                    ruleId,
                    baselineName);
        if (inner != null) {
            return new DatabaseVulnerabilityAssessmentRuleBaselineAutoGeneratedImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteWithResponse(
        String resourceGroupName,
        String managedInstanceName,
        String databaseName,
        VulnerabilityAssessmentName vulnerabilityAssessmentName,
        String ruleId,
        VulnerabilityAssessmentPolicyBaselineName baselineName,
        Context context) {
        return this
            .serviceClient()
            .deleteWithResponse(
                resourceGroupName,
                managedInstanceName,
                databaseName,
                vulnerabilityAssessmentName,
                ruleId,
                baselineName,
                context);
    }

    public void delete(
        String resourceGroupName,
        String managedInstanceName,
        String databaseName,
        VulnerabilityAssessmentName vulnerabilityAssessmentName,
        String ruleId,
        VulnerabilityAssessmentPolicyBaselineName baselineName) {
        this
            .serviceClient()
            .delete(
                resourceGroupName,
                managedInstanceName,
                databaseName,
                vulnerabilityAssessmentName,
                ruleId,
                baselineName);
    }

    public DatabaseVulnerabilityAssessmentRuleBaselineAutoGenerated getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String managedInstanceName = Utils.getValueFromIdByName(id, "managedInstances");
        if (managedInstanceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'managedInstances'.", id)));
        }
        String databaseName = Utils.getValueFromIdByName(id, "databases");
        if (databaseName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'databases'.", id)));
        }
        String vulnerabilityAssessmentNameLocal = Utils.getValueFromIdByName(id, "vulnerabilityAssessments");
        if (vulnerabilityAssessmentNameLocal == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'vulnerabilityAssessments'.",
                                id)));
        }
        VulnerabilityAssessmentName vulnerabilityAssessmentName =
            VulnerabilityAssessmentName.fromString(vulnerabilityAssessmentNameLocal);
        String ruleId = Utils.getValueFromIdByName(id, "rules");
        if (ruleId == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'rules'.", id)));
        }
        String baselineNameLocal = Utils.getValueFromIdByName(id, "baselines");
        if (baselineNameLocal == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'baselines'.", id)));
        }
        VulnerabilityAssessmentPolicyBaselineName baselineName =
            VulnerabilityAssessmentPolicyBaselineName.fromString(baselineNameLocal);
        return this
            .getWithResponse(
                resourceGroupName,
                managedInstanceName,
                databaseName,
                vulnerabilityAssessmentName,
                ruleId,
                baselineName,
                Context.NONE)
            .getValue();
    }

    public Response<DatabaseVulnerabilityAssessmentRuleBaselineAutoGenerated> getByIdWithResponse(
        String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String managedInstanceName = Utils.getValueFromIdByName(id, "managedInstances");
        if (managedInstanceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'managedInstances'.", id)));
        }
        String databaseName = Utils.getValueFromIdByName(id, "databases");
        if (databaseName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'databases'.", id)));
        }
        String vulnerabilityAssessmentNameLocal = Utils.getValueFromIdByName(id, "vulnerabilityAssessments");
        if (vulnerabilityAssessmentNameLocal == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'vulnerabilityAssessments'.",
                                id)));
        }
        VulnerabilityAssessmentName vulnerabilityAssessmentName =
            VulnerabilityAssessmentName.fromString(vulnerabilityAssessmentNameLocal);
        String ruleId = Utils.getValueFromIdByName(id, "rules");
        if (ruleId == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'rules'.", id)));
        }
        String baselineNameLocal = Utils.getValueFromIdByName(id, "baselines");
        if (baselineNameLocal == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'baselines'.", id)));
        }
        VulnerabilityAssessmentPolicyBaselineName baselineName =
            VulnerabilityAssessmentPolicyBaselineName.fromString(baselineNameLocal);
        return this
            .getWithResponse(
                resourceGroupName,
                managedInstanceName,
                databaseName,
                vulnerabilityAssessmentName,
                ruleId,
                baselineName,
                context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String managedInstanceName = Utils.getValueFromIdByName(id, "managedInstances");
        if (managedInstanceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'managedInstances'.", id)));
        }
        String databaseName = Utils.getValueFromIdByName(id, "databases");
        if (databaseName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'databases'.", id)));
        }
        String vulnerabilityAssessmentNameLocal = Utils.getValueFromIdByName(id, "vulnerabilityAssessments");
        if (vulnerabilityAssessmentNameLocal == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'vulnerabilityAssessments'.",
                                id)));
        }
        VulnerabilityAssessmentName vulnerabilityAssessmentName =
            VulnerabilityAssessmentName.fromString(vulnerabilityAssessmentNameLocal);
        String ruleId = Utils.getValueFromIdByName(id, "rules");
        if (ruleId == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'rules'.", id)));
        }
        String baselineNameLocal = Utils.getValueFromIdByName(id, "baselines");
        if (baselineNameLocal == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'baselines'.", id)));
        }
        VulnerabilityAssessmentPolicyBaselineName baselineName =
            VulnerabilityAssessmentPolicyBaselineName.fromString(baselineNameLocal);
        this
            .deleteWithResponse(
                resourceGroupName,
                managedInstanceName,
                databaseName,
                vulnerabilityAssessmentName,
                ruleId,
                baselineName,
                Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String managedInstanceName = Utils.getValueFromIdByName(id, "managedInstances");
        if (managedInstanceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'managedInstances'.", id)));
        }
        String databaseName = Utils.getValueFromIdByName(id, "databases");
        if (databaseName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'databases'.", id)));
        }
        String vulnerabilityAssessmentNameLocal = Utils.getValueFromIdByName(id, "vulnerabilityAssessments");
        if (vulnerabilityAssessmentNameLocal == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'vulnerabilityAssessments'.",
                                id)));
        }
        VulnerabilityAssessmentName vulnerabilityAssessmentName =
            VulnerabilityAssessmentName.fromString(vulnerabilityAssessmentNameLocal);
        String ruleId = Utils.getValueFromIdByName(id, "rules");
        if (ruleId == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'rules'.", id)));
        }
        String baselineNameLocal = Utils.getValueFromIdByName(id, "baselines");
        if (baselineNameLocal == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'baselines'.", id)));
        }
        VulnerabilityAssessmentPolicyBaselineName baselineName =
            VulnerabilityAssessmentPolicyBaselineName.fromString(baselineNameLocal);
        return this
            .deleteWithResponse(
                resourceGroupName,
                managedInstanceName,
                databaseName,
                vulnerabilityAssessmentName,
                ruleId,
                baselineName,
                context);
    }

    private ManagedDatabaseVulnerabilityAssessmentRuleBaselinesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.sql.generated.SqlManager manager() {
        return this.serviceManager;
    }

    public DatabaseVulnerabilityAssessmentRuleBaselineAutoGeneratedImpl define(
        VulnerabilityAssessmentPolicyBaselineName name) {
        return new DatabaseVulnerabilityAssessmentRuleBaselineAutoGeneratedImpl(name, this.manager());
    }
}
