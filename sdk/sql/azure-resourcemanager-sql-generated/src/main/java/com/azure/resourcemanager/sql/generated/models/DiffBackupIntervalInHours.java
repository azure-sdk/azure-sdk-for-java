// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.generated.models;

import com.azure.core.util.ExpandableEnum;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Map;
import java.util.Objects;
import java.util.concurrent.ConcurrentHashMap;
import java.util.function.Function;

/**
 * The differential backup interval in hours. This is how many interval hours between each differential backup will be
 * supported. This is only applicable to live databases but not dropped databases.
 */
public final class DiffBackupIntervalInHours implements ExpandableEnum<Integer> {
    private static final Map<Integer, DiffBackupIntervalInHours> VALUES = new ConcurrentHashMap<>();

    private static final Function<Integer, DiffBackupIntervalInHours> NEW_INSTANCE = DiffBackupIntervalInHours::new;

    /**
     * Static value 12 for DiffBackupIntervalInHours.
     */
    public static final DiffBackupIntervalInHours ONE_TWO = fromValue(12);

    /**
     * Static value 24 for DiffBackupIntervalInHours.
     */
    public static final DiffBackupIntervalInHours TWO_FOUR = fromValue(24);

    private final Integer value;

    private DiffBackupIntervalInHours(Integer value) {
        this.value = value;
    }

    /**
     * Creates or finds a DiffBackupIntervalInHours.
     * 
     * @param value a value to look for.
     * @return the corresponding DiffBackupIntervalInHours.
     * @throws IllegalArgumentException if value is null.
     */
    public static DiffBackupIntervalInHours fromValue(Integer value) {
        if (value == null) {
            throw new IllegalArgumentException("'value' cannot be null.");
        }
        return VALUES.computeIfAbsent(value, NEW_INSTANCE);
    }

    /**
     * Gets known DiffBackupIntervalInHours values.
     * 
     * @return Known DiffBackupIntervalInHours values.
     */
    public static Collection<DiffBackupIntervalInHours> values() {
        return new ArrayList<>(VALUES.values());
    }

    /**
     * Gets the value of the DiffBackupIntervalInHours instance.
     * 
     * @return the value of the DiffBackupIntervalInHours instance.
     */
    @Override
    public Integer getValue() {
        return this.value;
    }

    @Override
    public String toString() {
        return Objects.toString(this.value);
    }

    @Override
    public boolean equals(Object obj) {
        return this == obj;
    }

    @Override
    public int hashCode() {
        return Objects.hashCode(this.value);
    }
}
