// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.sql.generated.models.BackupStorageAccessTier;
import java.io.IOException;

/**
 * Properties of a long term retention policy.
 */
@Fluent
public final class LongTermRetentionPolicyProperties implements JsonSerializable<LongTermRetentionPolicyProperties> {
    /*
     * The setting whether to make LTR backups immutable
     */
    private Boolean makeBackupsImmutable;

    /*
     * The BackupStorageAccessTier for the LTR backups
     */
    private BackupStorageAccessTier backupStorageAccessTier;

    /*
     * The weekly retention policy for an LTR backup in an ISO 8601 format.
     */
    private String weeklyRetention;

    /*
     * The monthly retention policy for an LTR backup in an ISO 8601 format.
     */
    private String monthlyRetention;

    /*
     * The yearly retention policy for an LTR backup in an ISO 8601 format.
     */
    private String yearlyRetention;

    /*
     * The week of year to take the yearly backup in an ISO 8601 format.
     */
    private Integer weekOfYear;

    /**
     * Creates an instance of LongTermRetentionPolicyProperties class.
     */
    public LongTermRetentionPolicyProperties() {
    }

    /**
     * Get the makeBackupsImmutable property: The setting whether to make LTR backups immutable.
     * 
     * @return the makeBackupsImmutable value.
     */
    public Boolean makeBackupsImmutable() {
        return this.makeBackupsImmutable;
    }

    /**
     * Set the makeBackupsImmutable property: The setting whether to make LTR backups immutable.
     * 
     * @param makeBackupsImmutable the makeBackupsImmutable value to set.
     * @return the LongTermRetentionPolicyProperties object itself.
     */
    public LongTermRetentionPolicyProperties withMakeBackupsImmutable(Boolean makeBackupsImmutable) {
        this.makeBackupsImmutable = makeBackupsImmutable;
        return this;
    }

    /**
     * Get the backupStorageAccessTier property: The BackupStorageAccessTier for the LTR backups.
     * 
     * @return the backupStorageAccessTier value.
     */
    public BackupStorageAccessTier backupStorageAccessTier() {
        return this.backupStorageAccessTier;
    }

    /**
     * Set the backupStorageAccessTier property: The BackupStorageAccessTier for the LTR backups.
     * 
     * @param backupStorageAccessTier the backupStorageAccessTier value to set.
     * @return the LongTermRetentionPolicyProperties object itself.
     */
    public LongTermRetentionPolicyProperties
        withBackupStorageAccessTier(BackupStorageAccessTier backupStorageAccessTier) {
        this.backupStorageAccessTier = backupStorageAccessTier;
        return this;
    }

    /**
     * Get the weeklyRetention property: The weekly retention policy for an LTR backup in an ISO 8601 format.
     * 
     * @return the weeklyRetention value.
     */
    public String weeklyRetention() {
        return this.weeklyRetention;
    }

    /**
     * Set the weeklyRetention property: The weekly retention policy for an LTR backup in an ISO 8601 format.
     * 
     * @param weeklyRetention the weeklyRetention value to set.
     * @return the LongTermRetentionPolicyProperties object itself.
     */
    public LongTermRetentionPolicyProperties withWeeklyRetention(String weeklyRetention) {
        this.weeklyRetention = weeklyRetention;
        return this;
    }

    /**
     * Get the monthlyRetention property: The monthly retention policy for an LTR backup in an ISO 8601 format.
     * 
     * @return the monthlyRetention value.
     */
    public String monthlyRetention() {
        return this.monthlyRetention;
    }

    /**
     * Set the monthlyRetention property: The monthly retention policy for an LTR backup in an ISO 8601 format.
     * 
     * @param monthlyRetention the monthlyRetention value to set.
     * @return the LongTermRetentionPolicyProperties object itself.
     */
    public LongTermRetentionPolicyProperties withMonthlyRetention(String monthlyRetention) {
        this.monthlyRetention = monthlyRetention;
        return this;
    }

    /**
     * Get the yearlyRetention property: The yearly retention policy for an LTR backup in an ISO 8601 format.
     * 
     * @return the yearlyRetention value.
     */
    public String yearlyRetention() {
        return this.yearlyRetention;
    }

    /**
     * Set the yearlyRetention property: The yearly retention policy for an LTR backup in an ISO 8601 format.
     * 
     * @param yearlyRetention the yearlyRetention value to set.
     * @return the LongTermRetentionPolicyProperties object itself.
     */
    public LongTermRetentionPolicyProperties withYearlyRetention(String yearlyRetention) {
        this.yearlyRetention = yearlyRetention;
        return this;
    }

    /**
     * Get the weekOfYear property: The week of year to take the yearly backup in an ISO 8601 format.
     * 
     * @return the weekOfYear value.
     */
    public Integer weekOfYear() {
        return this.weekOfYear;
    }

    /**
     * Set the weekOfYear property: The week of year to take the yearly backup in an ISO 8601 format.
     * 
     * @param weekOfYear the weekOfYear value to set.
     * @return the LongTermRetentionPolicyProperties object itself.
     */
    public LongTermRetentionPolicyProperties withWeekOfYear(Integer weekOfYear) {
        this.weekOfYear = weekOfYear;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("makeBackupsImmutable", this.makeBackupsImmutable);
        jsonWriter.writeStringField("backupStorageAccessTier",
            this.backupStorageAccessTier == null ? null : this.backupStorageAccessTier.toString());
        jsonWriter.writeStringField("weeklyRetention", this.weeklyRetention);
        jsonWriter.writeStringField("monthlyRetention", this.monthlyRetention);
        jsonWriter.writeStringField("yearlyRetention", this.yearlyRetention);
        jsonWriter.writeNumberField("weekOfYear", this.weekOfYear);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LongTermRetentionPolicyProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LongTermRetentionPolicyProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the LongTermRetentionPolicyProperties.
     */
    public static LongTermRetentionPolicyProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LongTermRetentionPolicyProperties deserializedLongTermRetentionPolicyProperties
                = new LongTermRetentionPolicyProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("makeBackupsImmutable".equals(fieldName)) {
                    deserializedLongTermRetentionPolicyProperties.makeBackupsImmutable
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("backupStorageAccessTier".equals(fieldName)) {
                    deserializedLongTermRetentionPolicyProperties.backupStorageAccessTier
                        = BackupStorageAccessTier.fromString(reader.getString());
                } else if ("weeklyRetention".equals(fieldName)) {
                    deserializedLongTermRetentionPolicyProperties.weeklyRetention = reader.getString();
                } else if ("monthlyRetention".equals(fieldName)) {
                    deserializedLongTermRetentionPolicyProperties.monthlyRetention = reader.getString();
                } else if ("yearlyRetention".equals(fieldName)) {
                    deserializedLongTermRetentionPolicyProperties.yearlyRetention = reader.getString();
                } else if ("weekOfYear".equals(fieldName)) {
                    deserializedLongTermRetentionPolicyProperties.weekOfYear = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLongTermRetentionPolicyProperties;
        });
    }
}
