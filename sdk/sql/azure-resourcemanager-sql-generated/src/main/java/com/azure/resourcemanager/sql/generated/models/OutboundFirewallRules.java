// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.generated.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/** Resource collection API of OutboundFirewallRules. */
public interface OutboundFirewallRules {
    /**
     * Gets all outbound firewall rules on a server.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all outbound firewall rules on a server as paginated response with {@link PagedIterable}.
     */
    PagedIterable<OutboundFirewallRule> listByServer(String resourceGroupName, String serverName);

    /**
     * Gets all outbound firewall rules on a server.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all outbound firewall rules on a server as paginated response with {@link PagedIterable}.
     */
    PagedIterable<OutboundFirewallRule> listByServer(String resourceGroupName, String serverName, Context context);

    /**
     * Gets an outbound firewall rule.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param outboundRuleFqdn The outboundRuleFqdn parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an outbound firewall rule along with {@link Response}.
     */
    Response<OutboundFirewallRule> getWithResponse(
        String resourceGroupName, String serverName, String outboundRuleFqdn, Context context);

    /**
     * Gets an outbound firewall rule.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param outboundRuleFqdn The outboundRuleFqdn parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an outbound firewall rule.
     */
    OutboundFirewallRule get(String resourceGroupName, String serverName, String outboundRuleFqdn);

    /**
     * Create a outbound firewall rule with a given name.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param outboundRuleFqdn The outboundRuleFqdn parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an Azure SQL DB Server Outbound Firewall Rule.
     */
    OutboundFirewallRule createOrUpdate(String resourceGroupName, String serverName, String outboundRuleFqdn);

    /**
     * Create a outbound firewall rule with a given name.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param outboundRuleFqdn The outboundRuleFqdn parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an Azure SQL DB Server Outbound Firewall Rule.
     */
    OutboundFirewallRule createOrUpdate(
        String resourceGroupName, String serverName, String outboundRuleFqdn, Context context);

    /**
     * Deletes a outbound firewall rule with a given name.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param outboundRuleFqdn The outboundRuleFqdn parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(String resourceGroupName, String serverName, String outboundRuleFqdn);

    /**
     * Deletes a outbound firewall rule with a given name.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param outboundRuleFqdn The outboundRuleFqdn parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(String resourceGroupName, String serverName, String outboundRuleFqdn, Context context);
}
