// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.generated.implementation;

import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.sql.generated.fluent.models.ManagedInstanceAutoGeneratedInner;
import com.azure.resourcemanager.sql.generated.fluent.models.ManagedInstanceInner;
import com.azure.resourcemanager.sql.generated.models.BackupStorageRedundancy;
import com.azure.resourcemanager.sql.generated.models.ManagedInstance;
import com.azure.resourcemanager.sql.generated.models.ManagedInstanceAutoGenerated;
import com.azure.resourcemanager.sql.generated.models.ManagedInstanceExternalAdministrator;
import com.azure.resourcemanager.sql.generated.models.ManagedInstanceLicenseType;
import com.azure.resourcemanager.sql.generated.models.ManagedInstancePecProperty;
import com.azure.resourcemanager.sql.generated.models.ManagedInstanceProxyOverride;
import com.azure.resourcemanager.sql.generated.models.ManagedInstanceUpdate;
import com.azure.resourcemanager.sql.generated.models.ManagedServerCreateMode;
import com.azure.resourcemanager.sql.generated.models.ProvisioningState;
import com.azure.resourcemanager.sql.generated.models.RefreshExternalGovernanceStatusOperationResultMI;
import com.azure.resourcemanager.sql.generated.models.ReplicaType;
import com.azure.resourcemanager.sql.generated.models.ResourceIdentity;
import com.azure.resourcemanager.sql.generated.models.ServicePrincipal;
import com.azure.resourcemanager.sql.generated.models.Sku;
import java.time.OffsetDateTime;
import java.util.Collections;
import java.util.List;
import java.util.Map;

public final class ManagedInstanceAutoGeneratedImpl
    implements ManagedInstanceAutoGenerated,
        ManagedInstanceAutoGenerated.Definition,
        ManagedInstanceAutoGenerated.Update {
    private ManagedInstanceAutoGeneratedInner innerObject;

    private final com.azure.resourcemanager.sql.generated.SqlManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public ResourceIdentity identity() {
        return this.innerModel().identity();
    }

    public Sku sku() {
        return this.innerModel().sku();
    }

    public ProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public ManagedServerCreateMode managedInstanceCreateMode() {
        return this.innerModel().managedInstanceCreateMode();
    }

    public String fullyQualifiedDomainName() {
        return this.innerModel().fullyQualifiedDomainName();
    }

    public String administratorLogin() {
        return this.innerModel().administratorLogin();
    }

    public String administratorLoginPassword() {
        return this.innerModel().administratorLoginPassword();
    }

    public String subnetId() {
        return this.innerModel().subnetId();
    }

    public String state() {
        return this.innerModel().state();
    }

    public ManagedInstanceLicenseType licenseType() {
        return this.innerModel().licenseType();
    }

    public Integer vCores() {
        return this.innerModel().vCores();
    }

    public Integer storageSizeInGB() {
        return this.innerModel().storageSizeInGB();
    }

    public String collation() {
        return this.innerModel().collation();
    }

    public String dnsZone() {
        return this.innerModel().dnsZone();
    }

    public String dnsZonePartner() {
        return this.innerModel().dnsZonePartner();
    }

    public Boolean publicDataEndpointEnabled() {
        return this.innerModel().publicDataEndpointEnabled();
    }

    public String sourceManagedInstanceId() {
        return this.innerModel().sourceManagedInstanceId();
    }

    public OffsetDateTime restorePointInTime() {
        return this.innerModel().restorePointInTime();
    }

    public ManagedInstanceProxyOverride proxyOverride() {
        return this.innerModel().proxyOverride();
    }

    public String timezoneId() {
        return this.innerModel().timezoneId();
    }

    public String instancePoolId() {
        return this.innerModel().instancePoolId();
    }

    public String maintenanceConfigurationId() {
        return this.innerModel().maintenanceConfigurationId();
    }

    public List<ManagedInstancePecProperty> privateEndpointConnections() {
        List<ManagedInstancePecProperty> inner = this.innerModel().privateEndpointConnections();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public String minimalTlsVersion() {
        return this.innerModel().minimalTlsVersion();
    }

    public BackupStorageRedundancy currentBackupStorageRedundancy() {
        return this.innerModel().currentBackupStorageRedundancy();
    }

    public BackupStorageRedundancy requestedBackupStorageRedundancy() {
        return this.innerModel().requestedBackupStorageRedundancy();
    }

    public Boolean zoneRedundant() {
        return this.innerModel().zoneRedundant();
    }

    public String primaryUserAssignedIdentityId() {
        return this.innerModel().primaryUserAssignedIdentityId();
    }

    public String keyId() {
        return this.innerModel().keyId();
    }

    public ManagedInstanceExternalAdministrator administrators() {
        return this.innerModel().administrators();
    }

    public ServicePrincipal servicePrincipal() {
        return this.innerModel().servicePrincipal();
    }

    public String virtualClusterId() {
        return this.innerModel().virtualClusterId();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public ManagedInstanceAutoGeneratedInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.sql.generated.SqlManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String managedInstanceName;

    private ManagedInstanceInner createParameters;

    private ManagedInstanceUpdate updateParameters;

    public ManagedInstanceAutoGeneratedImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public ManagedInstanceAutoGenerated create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getManagedInstances()
                .createOrUpdate(resourceGroupName, managedInstanceName, createParameters, Context.NONE);
        return this;
    }

    public ManagedInstanceAutoGenerated create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getManagedInstances()
                .createOrUpdate(resourceGroupName, managedInstanceName, createParameters, context);
        return this;
    }

    ManagedInstanceAutoGeneratedImpl(String name, com.azure.resourcemanager.sql.generated.SqlManager serviceManager) {
        this.innerObject = new ManagedInstanceAutoGeneratedInner();
        this.serviceManager = serviceManager;
        this.managedInstanceName = name;
        this.createParameters = new ManagedInstanceInner();
    }

    public ManagedInstanceAutoGeneratedImpl update() {
        this.updateParameters = new ManagedInstanceUpdate();
        return this;
    }

    public ManagedInstanceAutoGenerated apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getManagedInstances()
                .update(resourceGroupName, managedInstanceName, updateParameters, Context.NONE);
        return this;
    }

    public ManagedInstanceAutoGenerated apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getManagedInstances()
                .update(resourceGroupName, managedInstanceName, updateParameters, context);
        return this;
    }

    ManagedInstanceAutoGeneratedImpl(
        ManagedInstanceAutoGeneratedInner innerObject,
        com.azure.resourcemanager.sql.generated.SqlManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.managedInstanceName = Utils.getValueFromIdByName(innerObject.id(), "managedInstances");
    }

    public ManagedInstanceAutoGenerated refresh() {
        String localExpand = null;
        this.innerObject =
            serviceManager
                .serviceClient()
                .getManagedInstances()
                .getWithResponse(resourceGroupName, managedInstanceName, localExpand, Context.NONE)
                .getValue();
        return this;
    }

    public ManagedInstanceAutoGenerated refresh(Context context) {
        String localExpand = null;
        this.innerObject =
            serviceManager
                .serviceClient()
                .getManagedInstances()
                .getWithResponse(resourceGroupName, managedInstanceName, localExpand, context)
                .getValue();
        return this;
    }

    public void failover() {
        serviceManager.managedInstances().failover(resourceGroupName, managedInstanceName);
    }

    public void failover(ReplicaType replicaType, Context context) {
        serviceManager.managedInstances().failover(resourceGroupName, managedInstanceName, replicaType, context);
    }

    public RefreshExternalGovernanceStatusOperationResultMI refreshStatus() {
        return serviceManager.managedInstances().refreshStatus(resourceGroupName, managedInstanceName);
    }

    public RefreshExternalGovernanceStatusOperationResultMI refreshStatus(Context context) {
        return serviceManager.managedInstances().refreshStatus(resourceGroupName, managedInstanceName, context);
    }

    public ManagedInstance start() {
        return serviceManager.managedInstances().start(resourceGroupName, managedInstanceName);
    }

    public ManagedInstance start(Context context) {
        return serviceManager.managedInstances().start(resourceGroupName, managedInstanceName, context);
    }

    public ManagedInstance stop() {
        return serviceManager.managedInstances().stop(resourceGroupName, managedInstanceName);
    }

    public ManagedInstance stop(Context context) {
        return serviceManager.managedInstances().stop(resourceGroupName, managedInstanceName, context);
    }

    public void failover() {
        serviceManager.managedInstances().failover(resourceGroupName, managedInstanceName);
    }

    public void failover(ReplicaType replicaType, Context context) {
        serviceManager.managedInstances().failover(resourceGroupName, managedInstanceName, replicaType, context);
    }

    public ManagedInstanceAutoGenerated start() {
        return serviceManager.managedInstances().start(resourceGroupName, managedInstanceName);
    }

    public ManagedInstanceAutoGenerated start(Context context) {
        return serviceManager.managedInstances().start(resourceGroupName, managedInstanceName, context);
    }

    public ManagedInstanceAutoGenerated stop() {
        return serviceManager.managedInstances().stop(resourceGroupName, managedInstanceName);
    }

    public ManagedInstanceAutoGenerated stop(Context context) {
        return serviceManager.managedInstances().stop(resourceGroupName, managedInstanceName, context);
    }

    public ManagedInstanceAutoGeneratedImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public ManagedInstanceAutoGeneratedImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public ManagedInstanceAutoGeneratedImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateParameters.withTags(tags);
            return this;
        }
    }

    public ManagedInstanceAutoGeneratedImpl withIdentity(ResourceIdentity identity) {
        if (isInCreateMode()) {
            this.innerModel().withIdentity(identity);
            return this;
        } else {
            this.updateParameters.withIdentity(identity);
            return this;
        }
    }

    public ManagedInstanceAutoGeneratedImpl withSku(Sku sku) {
        if (isInCreateMode()) {
            this.innerModel().withSku(sku);
            return this;
        } else {
            this.updateParameters.withSku(sku);
            return this;
        }
    }

    public ManagedInstanceAutoGeneratedImpl withManagedInstanceCreateMode(
        ManagedServerCreateMode managedInstanceCreateMode) {
        this.innerModel().withManagedInstanceCreateMode(managedInstanceCreateMode);
        return this;
    }

    public ManagedInstanceAutoGeneratedImpl withAdministratorLogin(String administratorLogin) {
        this.innerModel().withAdministratorLogin(administratorLogin);
        return this;
    }

    public ManagedInstanceAutoGeneratedImpl withAdministratorLoginPassword(String administratorLoginPassword) {
        if (isInCreateMode()) {
            this.innerModel().withAdministratorLoginPassword(administratorLoginPassword);
            return this;
        } else {
            this.updateParameters.withAdministratorLoginPassword(administratorLoginPassword);
            return this;
        }
    }

    public ManagedInstanceAutoGeneratedImpl withSubnetId(String subnetId) {
        if (isInCreateMode()) {
            this.innerModel().withSubnetId(subnetId);
            return this;
        } else {
            this.updateParameters.withSubnetId(subnetId);
            return this;
        }
    }

    public ManagedInstanceAutoGeneratedImpl withLicenseType(ManagedInstanceLicenseType licenseType) {
        if (isInCreateMode()) {
            this.innerModel().withLicenseType(licenseType);
            return this;
        } else {
            this.updateParameters.withLicenseType(licenseType);
            return this;
        }
    }

    public ManagedInstanceAutoGeneratedImpl withVCores(Integer vCores) {
        if (isInCreateMode()) {
            this.innerModel().withVCores(vCores);
            return this;
        } else {
            this.updateParameters.withVCores(vCores);
            return this;
        }
    }

    public ManagedInstanceAutoGeneratedImpl withStorageSizeInGB(Integer storageSizeInGB) {
        if (isInCreateMode()) {
            this.innerModel().withStorageSizeInGB(storageSizeInGB);
            return this;
        } else {
            this.updateParameters.withStorageSizeInGB(storageSizeInGB);
            return this;
        }
    }

    public ManagedInstanceAutoGeneratedImpl withCollation(String collation) {
        this.innerModel().withCollation(collation);
        return this;
    }

    public ManagedInstanceAutoGeneratedImpl withDnsZonePartner(String dnsZonePartner) {
        this.innerModel().withDnsZonePartner(dnsZonePartner);
        return this;
    }

    public ManagedInstanceAutoGeneratedImpl withPublicDataEndpointEnabled(Boolean publicDataEndpointEnabled) {
        if (isInCreateMode()) {
            this.innerModel().withPublicDataEndpointEnabled(publicDataEndpointEnabled);
            return this;
        } else {
            this.updateParameters.withPublicDataEndpointEnabled(publicDataEndpointEnabled);
            return this;
        }
    }

    public ManagedInstanceAutoGeneratedImpl withSourceManagedInstanceId(String sourceManagedInstanceId) {
        this.innerModel().withSourceManagedInstanceId(sourceManagedInstanceId);
        return this;
    }

    public ManagedInstanceAutoGeneratedImpl withRestorePointInTime(OffsetDateTime restorePointInTime) {
        this.innerModel().withRestorePointInTime(restorePointInTime);
        return this;
    }

    public ManagedInstanceAutoGeneratedImpl withProxyOverride(ManagedInstanceProxyOverride proxyOverride) {
        if (isInCreateMode()) {
            this.innerModel().withProxyOverride(proxyOverride);
            return this;
        } else {
            this.updateParameters.withProxyOverride(proxyOverride);
            return this;
        }
    }

    public ManagedInstanceAutoGeneratedImpl withTimezoneId(String timezoneId) {
        this.innerModel().withTimezoneId(timezoneId);
        return this;
    }

    public ManagedInstanceAutoGeneratedImpl withInstancePoolId(String instancePoolId) {
        if (isInCreateMode()) {
            this.innerModel().withInstancePoolId(instancePoolId);
            return this;
        } else {
            this.updateParameters.withInstancePoolId(instancePoolId);
            return this;
        }
    }

    public ManagedInstanceAutoGeneratedImpl withMaintenanceConfigurationId(String maintenanceConfigurationId) {
        if (isInCreateMode()) {
            this.innerModel().withMaintenanceConfigurationId(maintenanceConfigurationId);
            return this;
        } else {
            this.updateParameters.withMaintenanceConfigurationId(maintenanceConfigurationId);
            return this;
        }
    }

    public ManagedInstanceAutoGeneratedImpl withMinimalTlsVersion(String minimalTlsVersion) {
        if (isInCreateMode()) {
            this.innerModel().withMinimalTlsVersion(minimalTlsVersion);
            return this;
        } else {
            this.updateParameters.withMinimalTlsVersion(minimalTlsVersion);
            return this;
        }
    }

    public ManagedInstanceAutoGeneratedImpl withRequestedBackupStorageRedundancy(
        BackupStorageRedundancy requestedBackupStorageRedundancy) {
        this.innerModel().withRequestedBackupStorageRedundancy(requestedBackupStorageRedundancy);
        return this;
    }

    public ManagedInstanceAutoGeneratedImpl withZoneRedundant(Boolean zoneRedundant) {
        if (isInCreateMode()) {
            this.innerModel().withZoneRedundant(zoneRedundant);
            return this;
        } else {
            this.updateParameters.withZoneRedundant(zoneRedundant);
            return this;
        }
    }

    public ManagedInstanceAutoGeneratedImpl withPrimaryUserAssignedIdentityId(String primaryUserAssignedIdentityId) {
        if (isInCreateMode()) {
            this.innerModel().withPrimaryUserAssignedIdentityId(primaryUserAssignedIdentityId);
            return this;
        } else {
            this.updateParameters.withPrimaryUserAssignedIdentityId(primaryUserAssignedIdentityId);
            return this;
        }
    }

    public ManagedInstanceAutoGeneratedImpl withKeyId(String keyId) {
        this.innerModel().withKeyId(keyId);
        return this;
    }

    public ManagedInstanceAutoGeneratedImpl withAdministrators(ManagedInstanceExternalAdministrator administrators) {
        this.innerModel().withAdministrators(administrators);
        return this;
    }

    public ManagedInstanceAutoGeneratedImpl withServicePrincipal(ServicePrincipal servicePrincipal) {
        if (isInCreateMode()) {
            this.innerModel().withServicePrincipal(servicePrincipal);
            return this;
        } else {
            this.updateParameters.withServicePrincipal(servicePrincipal);
            return this;
        }
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
