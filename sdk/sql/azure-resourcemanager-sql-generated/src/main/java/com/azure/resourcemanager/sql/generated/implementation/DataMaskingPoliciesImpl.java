// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.generated.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.sql.generated.fluent.DataMaskingPoliciesClient;
import com.azure.resourcemanager.sql.generated.fluent.models.DataMaskingPolicyInner;
import com.azure.resourcemanager.sql.generated.models.DataMaskingPolicies;
import com.azure.resourcemanager.sql.generated.models.DataMaskingPolicy;
import com.azure.resourcemanager.sql.generated.models.DataMaskingPolicyName;

public final class DataMaskingPoliciesImpl implements DataMaskingPolicies {
    private static final ClientLogger LOGGER = new ClientLogger(DataMaskingPoliciesImpl.class);

    private final DataMaskingPoliciesClient innerClient;

    private final com.azure.resourcemanager.sql.generated.SqlManager serviceManager;

    public DataMaskingPoliciesImpl(DataMaskingPoliciesClient innerClient,
        com.azure.resourcemanager.sql.generated.SqlManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<DataMaskingPolicy> getWithResponse(String resourceGroupName, String serverName, String databaseName,
        DataMaskingPolicyName dataMaskingPolicyName, Context context) {
        Response<DataMaskingPolicyInner> inner = this.serviceClient().getWithResponse(resourceGroupName, serverName,
            databaseName, dataMaskingPolicyName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new DataMaskingPolicyImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public DataMaskingPolicy get(String resourceGroupName, String serverName, String databaseName,
        DataMaskingPolicyName dataMaskingPolicyName) {
        DataMaskingPolicyInner inner
            = this.serviceClient().get(resourceGroupName, serverName, databaseName, dataMaskingPolicyName);
        if (inner != null) {
            return new DataMaskingPolicyImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public DataMaskingPolicy getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serverName = ResourceManagerUtils.getValueFromIdByName(id, "servers");
        if (serverName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'servers'.", id)));
        }
        String databaseName = ResourceManagerUtils.getValueFromIdByName(id, "databases");
        if (databaseName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'databases'.", id)));
        }
        String dataMaskingPolicyNameLocal = ResourceManagerUtils.getValueFromIdByName(id, "dataMaskingPolicies");
        if (dataMaskingPolicyNameLocal == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'dataMaskingPolicies'.", id)));
        }
        DataMaskingPolicyName dataMaskingPolicyName = DataMaskingPolicyName.fromString(dataMaskingPolicyNameLocal);
        return this.getWithResponse(resourceGroupName, serverName, databaseName, dataMaskingPolicyName, Context.NONE)
            .getValue();
    }

    public Response<DataMaskingPolicy> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serverName = ResourceManagerUtils.getValueFromIdByName(id, "servers");
        if (serverName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'servers'.", id)));
        }
        String databaseName = ResourceManagerUtils.getValueFromIdByName(id, "databases");
        if (databaseName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'databases'.", id)));
        }
        String dataMaskingPolicyNameLocal = ResourceManagerUtils.getValueFromIdByName(id, "dataMaskingPolicies");
        if (dataMaskingPolicyNameLocal == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'dataMaskingPolicies'.", id)));
        }
        DataMaskingPolicyName dataMaskingPolicyName = DataMaskingPolicyName.fromString(dataMaskingPolicyNameLocal);
        return this.getWithResponse(resourceGroupName, serverName, databaseName, dataMaskingPolicyName, context);
    }

    private DataMaskingPoliciesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.sql.generated.SqlManager manager() {
        return this.serviceManager;
    }

    public DataMaskingPolicyImpl define(DataMaskingPolicyName name) {
        return new DataMaskingPolicyImpl(name, this.manager());
    }
}
