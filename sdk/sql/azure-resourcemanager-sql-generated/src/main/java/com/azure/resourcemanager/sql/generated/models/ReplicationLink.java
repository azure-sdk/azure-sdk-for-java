// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.generated.models;

import com.azure.core.util.Context;
import com.azure.resourcemanager.sql.generated.fluent.models.ReplicationLinkInner;
import java.time.OffsetDateTime;

/** An immutable client-side representation of ReplicationLink. */
public interface ReplicationLink {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the partnerServer property: Resource partner server.
     *
     * @return the partnerServer value.
     */
    String partnerServer();

    /**
     * Gets the partnerDatabase property: Resource partner database.
     *
     * @return the partnerDatabase value.
     */
    String partnerDatabase();

    /**
     * Gets the partnerDatabaseId property: Resource partner database Id.
     *
     * @return the partnerDatabaseId value.
     */
    String partnerDatabaseId();

    /**
     * Gets the partnerLocation property: Resource partner location.
     *
     * @return the partnerLocation value.
     */
    String partnerLocation();

    /**
     * Gets the role property: Local replication role.
     *
     * @return the role value.
     */
    ReplicationRole role();

    /**
     * Gets the partnerRole property: Partner replication role.
     *
     * @return the partnerRole value.
     */
    ReplicationRole partnerRole();

    /**
     * Gets the replicationMode property: Replication mode.
     *
     * @return the replicationMode value.
     */
    String replicationMode();

    /**
     * Gets the startTime property: Time at which the link was created.
     *
     * @return the startTime value.
     */
    OffsetDateTime startTime();

    /**
     * Gets the percentComplete property: Seeding completion percentage for the link.
     *
     * @return the percentComplete value.
     */
    Integer percentComplete();

    /**
     * Gets the replicationState property: Replication state (PENDING, SEEDING, CATCHUP, SUSPENDED).
     *
     * @return the replicationState value.
     */
    ReplicationState replicationState();

    /**
     * Gets the isTerminationAllowed property: Whether the user is currently allowed to terminate the link.
     *
     * @return the isTerminationAllowed value.
     */
    Boolean isTerminationAllowed();

    /**
     * Gets the linkType property: Link type (GEO, NAMED, STANDBY). Update operation does not support NAMED.
     *
     * @return the linkType value.
     */
    ReplicationLinkType linkType();

    /**
     * Gets the name of the resource group.
     *
     * @return the name of the resource group.
     */
    String resourceGroupName();

    /**
     * Gets the inner com.azure.resourcemanager.sql.generated.fluent.models.ReplicationLinkInner object.
     *
     * @return the inner object.
     */
    ReplicationLinkInner innerModel();

    /** The entirety of the ReplicationLink definition. */
    interface Definition
        extends DefinitionStages.Blank, DefinitionStages.WithParentResource, DefinitionStages.WithCreate {
    }

    /** The ReplicationLink definition stages. */
    interface DefinitionStages {
        /** The first stage of the ReplicationLink definition. */
        interface Blank extends WithParentResource {
        }

        /** The stage of the ReplicationLink definition allowing to specify parent resource. */
        interface WithParentResource {
            /**
             * Specifies resourceGroupName, serverName, databaseName.
             *
             * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this
             *     value from the Azure Resource Manager API or the portal.
             * @param serverName The name of the server.
             * @param databaseName The name of the database.
             * @return the next definition stage.
             */
            WithCreate withExistingDatabase(String resourceGroupName, String serverName, String databaseName);
        }

        /**
         * The stage of the ReplicationLink definition which contains all the minimum required properties for the
         * resource to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate extends DefinitionStages.WithLinkType {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            ReplicationLink create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            ReplicationLink create(Context context);
        }

        /** The stage of the ReplicationLink definition allowing to specify linkType. */
        interface WithLinkType {
            /**
             * Specifies the linkType property: Link type (GEO, NAMED, STANDBY). Update operation does not support
             * NAMED..
             *
             * @param linkType Link type (GEO, NAMED, STANDBY). Update operation does not support NAMED.
             * @return the next definition stage.
             */
            WithCreate withLinkType(ReplicationLinkType linkType);
        }
    }

    /**
     * Begins update for the ReplicationLink resource.
     *
     * @return the stage of resource update.
     */
    ReplicationLink.Update update();

    /** The template for ReplicationLink update. */
    interface Update extends UpdateStages.WithLinkType {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        ReplicationLink apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        ReplicationLink apply(Context context);
    }

    /** The ReplicationLink update stages. */
    interface UpdateStages {
        /** The stage of the ReplicationLink update allowing to specify linkType. */
        interface WithLinkType {
            /**
             * Specifies the linkType property: Link type (GEO, NAMED, STANDBY). Update operation does not support
             * NAMED..
             *
             * @param linkType Link type (GEO, NAMED, STANDBY). Update operation does not support NAMED.
             * @return the next definition stage.
             */
            Update withLinkType(ReplicationLinkType linkType);
        }
    }

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    ReplicationLink refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    ReplicationLink refresh(Context context);

    /**
     * Fails over from the current primary server to this server.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a replication link.
     */
    ReplicationLink failover();

    /**
     * Fails over from the current primary server to this server.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a replication link.
     */
    ReplicationLink failover(Context context);

    /**
     * Fails over from the current primary server to this server allowing data loss.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a replication link.
     */
    ReplicationLink failoverAllowDataLoss();

    /**
     * Fails over from the current primary server to this server allowing data loss.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a replication link.
     */
    ReplicationLink failoverAllowDataLoss(Context context);
}
