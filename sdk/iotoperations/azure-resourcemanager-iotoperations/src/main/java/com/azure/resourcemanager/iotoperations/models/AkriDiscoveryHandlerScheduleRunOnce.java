// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * AkriDiscoveryHandlerScheduleRunOnce properties.
 */
@Fluent
public final class AkriDiscoveryHandlerScheduleRunOnce extends AkriDiscoveryHandlerSchedule {
    /*
     * Schedule type.
     */
    private AkriDiscoveryHandlerScheduleType scheduleType = AkriDiscoveryHandlerScheduleType.RUN_ONCE;

    /*
     * The time to run the discovery handler.
     */
    private String runOnce;

    /**
     * Creates an instance of AkriDiscoveryHandlerScheduleRunOnce class.
     */
    public AkriDiscoveryHandlerScheduleRunOnce() {
    }

    /**
     * Get the scheduleType property: Schedule type.
     * 
     * @return the scheduleType value.
     */
    @Override
    public AkriDiscoveryHandlerScheduleType scheduleType() {
        return this.scheduleType;
    }

    /**
     * Get the runOnce property: The time to run the discovery handler.
     * 
     * @return the runOnce value.
     */
    public String runOnce() {
        return this.runOnce;
    }

    /**
     * Set the runOnce property: The time to run the discovery handler.
     * 
     * @param runOnce the runOnce value to set.
     * @return the AkriDiscoveryHandlerScheduleRunOnce object itself.
     */
    public AkriDiscoveryHandlerScheduleRunOnce withRunOnce(String runOnce) {
        this.runOnce = runOnce;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (runOnce() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property runOnce in model AkriDiscoveryHandlerScheduleRunOnce"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(AkriDiscoveryHandlerScheduleRunOnce.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("runOnce", this.runOnce);
        jsonWriter.writeStringField("scheduleType", this.scheduleType == null ? null : this.scheduleType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AkriDiscoveryHandlerScheduleRunOnce from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AkriDiscoveryHandlerScheduleRunOnce if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AkriDiscoveryHandlerScheduleRunOnce.
     */
    public static AkriDiscoveryHandlerScheduleRunOnce fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AkriDiscoveryHandlerScheduleRunOnce deserializedAkriDiscoveryHandlerScheduleRunOnce
                = new AkriDiscoveryHandlerScheduleRunOnce();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("runOnce".equals(fieldName)) {
                    deserializedAkriDiscoveryHandlerScheduleRunOnce.runOnce = reader.getString();
                } else if ("scheduleType".equals(fieldName)) {
                    deserializedAkriDiscoveryHandlerScheduleRunOnce.scheduleType
                        = AkriDiscoveryHandlerScheduleType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAkriDiscoveryHandlerScheduleRunOnce;
        });
    }
}
