// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Azure Data Lake endpoint.
 */
@Fluent
public final class DataLakeStorageEndpoint extends DataflowEndpointProperties {
    /*
     * Endpoint Type.
     */
    private EndpointType endpointType = EndpointType.DATA_LAKE_STORAGE;

    /*
     * Azure Data Lake endpoint.
     */
    private DataLakeStorageSettings dataLakeStorageSettings;

    /*
     * The status of the last operation.
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of DataLakeStorageEndpoint class.
     */
    public DataLakeStorageEndpoint() {
    }

    /**
     * Get the endpointType property: Endpoint Type.
     * 
     * @return the endpointType value.
     */
    @Override
    public EndpointType endpointType() {
        return this.endpointType;
    }

    /**
     * Get the dataLakeStorageSettings property: Azure Data Lake endpoint.
     * 
     * @return the dataLakeStorageSettings value.
     */
    public DataLakeStorageSettings dataLakeStorageSettings() {
        return this.dataLakeStorageSettings;
    }

    /**
     * Set the dataLakeStorageSettings property: Azure Data Lake endpoint.
     * 
     * @param dataLakeStorageSettings the dataLakeStorageSettings value to set.
     * @return the DataLakeStorageEndpoint object itself.
     */
    public DataLakeStorageEndpoint withDataLakeStorageSettings(DataLakeStorageSettings dataLakeStorageSettings) {
        this.dataLakeStorageSettings = dataLakeStorageSettings;
        return this;
    }

    /**
     * Get the provisioningState property: The status of the last operation.
     * 
     * @return the provisioningState value.
     */
    @Override
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (dataLakeStorageSettings() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property dataLakeStorageSettings in model DataLakeStorageEndpoint"));
        } else {
            dataLakeStorageSettings().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DataLakeStorageEndpoint.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("dataLakeStorageSettings", this.dataLakeStorageSettings);
        jsonWriter.writeStringField("endpointType", this.endpointType == null ? null : this.endpointType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DataLakeStorageEndpoint from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DataLakeStorageEndpoint if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DataLakeStorageEndpoint.
     */
    public static DataLakeStorageEndpoint fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DataLakeStorageEndpoint deserializedDataLakeStorageEndpoint = new DataLakeStorageEndpoint();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedDataLakeStorageEndpoint.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("dataLakeStorageSettings".equals(fieldName)) {
                    deserializedDataLakeStorageEndpoint.dataLakeStorageSettings
                        = DataLakeStorageSettings.fromJson(reader);
                } else if ("endpointType".equals(fieldName)) {
                    deserializedDataLakeStorageEndpoint.endpointType = EndpointType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDataLakeStorageEndpoint;
        });
    }
}
