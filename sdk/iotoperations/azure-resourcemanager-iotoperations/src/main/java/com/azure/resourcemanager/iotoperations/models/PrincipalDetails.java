// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * PrincipalDefinition properties of Rule.
 */
@Fluent
public final class PrincipalDetails implements JsonSerializable<PrincipalDetails> {
    /*
     * A list of key-value pairs that match the attributes of the clients. The attributes are case-sensitive and must
     * match the attributes provided by the clients during authentication.
     */
    private List<Map<String, String>> attributes;

    /*
     * A list of client IDs that match the clients. The client IDs are case-sensitive and must match the client IDs
     * provided by the clients during connection.
     */
    private List<String> clientIds;

    /*
     * A list of usernames that match the clients. The usernames are case-sensitive and must match the usernames
     * provided by the clients during authentication.
     */
    private List<String> usernames;

    /**
     * Creates an instance of PrincipalDetails class.
     */
    public PrincipalDetails() {
    }

    /**
     * Get the attributes property: A list of key-value pairs that match the attributes of the clients. The attributes
     * are case-sensitive and must match the attributes provided by the clients during authentication.
     * 
     * @return the attributes value.
     */
    public List<Map<String, String>> attributes() {
        return this.attributes;
    }

    /**
     * Set the attributes property: A list of key-value pairs that match the attributes of the clients. The attributes
     * are case-sensitive and must match the attributes provided by the clients during authentication.
     * 
     * @param attributes the attributes value to set.
     * @return the PrincipalDetails object itself.
     */
    public PrincipalDetails withAttributes(List<Map<String, String>> attributes) {
        this.attributes = attributes;
        return this;
    }

    /**
     * Get the clientIds property: A list of client IDs that match the clients. The client IDs are case-sensitive and
     * must match the client IDs provided by the clients during connection.
     * 
     * @return the clientIds value.
     */
    public List<String> clientIds() {
        return this.clientIds;
    }

    /**
     * Set the clientIds property: A list of client IDs that match the clients. The client IDs are case-sensitive and
     * must match the client IDs provided by the clients during connection.
     * 
     * @param clientIds the clientIds value to set.
     * @return the PrincipalDetails object itself.
     */
    public PrincipalDetails withClientIds(List<String> clientIds) {
        this.clientIds = clientIds;
        return this;
    }

    /**
     * Get the usernames property: A list of usernames that match the clients. The usernames are case-sensitive and must
     * match the usernames provided by the clients during authentication.
     * 
     * @return the usernames value.
     */
    public List<String> usernames() {
        return this.usernames;
    }

    /**
     * Set the usernames property: A list of usernames that match the clients. The usernames are case-sensitive and must
     * match the usernames provided by the clients during authentication.
     * 
     * @param usernames the usernames value to set.
     * @return the PrincipalDetails object itself.
     */
    public PrincipalDetails withUsernames(List<String> usernames) {
        this.usernames = usernames;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("attributes", this.attributes,
            (writer, element) -> writer.writeMap(element, (writer1, element1) -> writer1.writeString(element1)));
        jsonWriter.writeArrayField("clientIds", this.clientIds, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("usernames", this.usernames, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PrincipalDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PrincipalDetails if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the PrincipalDetails.
     */
    public static PrincipalDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PrincipalDetails deserializedPrincipalDetails = new PrincipalDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("attributes".equals(fieldName)) {
                    List<Map<String, String>> attributes
                        = reader.readArray(reader1 -> reader1.readMap(reader2 -> reader2.getString()));
                    deserializedPrincipalDetails.attributes = attributes;
                } else if ("clientIds".equals(fieldName)) {
                    List<String> clientIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedPrincipalDetails.clientIds = clientIds;
                } else if ("usernames".equals(fieldName)) {
                    List<String> usernames = reader.readArray(reader1 -> reader1.getString());
                    deserializedPrincipalDetails.usernames = usernames;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPrincipalDetails;
        });
    }
}
