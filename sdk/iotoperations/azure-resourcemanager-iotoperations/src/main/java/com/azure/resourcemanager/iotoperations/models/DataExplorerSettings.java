// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Azure Data Explorer endpoint properties.
 */
@Fluent
public final class DataExplorerSettings implements JsonSerializable<DataExplorerSettings> {
    /*
     * Authentication configuration. NOTE - only authentication property is allowed per entry.
     */
    private DataflowEndpointDataExplorerAuthentication authentication;

    /*
     * Database name.
     */
    private String database;

    /*
     * Host of the Azure Data Explorer in the form of <cluster>.<region>.kusto.windows.net .
     */
    private String host;

    /*
     * Azure Data Explorer endpoint batching configuration.
     */
    private BatchingConfiguration batching;

    /**
     * Creates an instance of DataExplorerSettings class.
     */
    public DataExplorerSettings() {
    }

    /**
     * Get the authentication property: Authentication configuration. NOTE - only authentication property is allowed per
     * entry.
     * 
     * @return the authentication value.
     */
    public DataflowEndpointDataExplorerAuthentication authentication() {
        return this.authentication;
    }

    /**
     * Set the authentication property: Authentication configuration. NOTE - only authentication property is allowed per
     * entry.
     * 
     * @param authentication the authentication value to set.
     * @return the DataExplorerSettings object itself.
     */
    public DataExplorerSettings withAuthentication(DataflowEndpointDataExplorerAuthentication authentication) {
        this.authentication = authentication;
        return this;
    }

    /**
     * Get the database property: Database name.
     * 
     * @return the database value.
     */
    public String database() {
        return this.database;
    }

    /**
     * Set the database property: Database name.
     * 
     * @param database the database value to set.
     * @return the DataExplorerSettings object itself.
     */
    public DataExplorerSettings withDatabase(String database) {
        this.database = database;
        return this;
    }

    /**
     * Get the host property: Host of the Azure Data Explorer in the form of
     * &lt;cluster&gt;.&lt;region&gt;.kusto.windows.net .
     * 
     * @return the host value.
     */
    public String host() {
        return this.host;
    }

    /**
     * Set the host property: Host of the Azure Data Explorer in the form of
     * &lt;cluster&gt;.&lt;region&gt;.kusto.windows.net .
     * 
     * @param host the host value to set.
     * @return the DataExplorerSettings object itself.
     */
    public DataExplorerSettings withHost(String host) {
        this.host = host;
        return this;
    }

    /**
     * Get the batching property: Azure Data Explorer endpoint batching configuration.
     * 
     * @return the batching value.
     */
    public BatchingConfiguration batching() {
        return this.batching;
    }

    /**
     * Set the batching property: Azure Data Explorer endpoint batching configuration.
     * 
     * @param batching the batching value to set.
     * @return the DataExplorerSettings object itself.
     */
    public DataExplorerSettings withBatching(BatchingConfiguration batching) {
        this.batching = batching;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (authentication() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property authentication in model DataExplorerSettings"));
        } else {
            authentication().validate();
        }
        if (database() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property database in model DataExplorerSettings"));
        }
        if (host() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property host in model DataExplorerSettings"));
        }
        if (batching() != null) {
            batching().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DataExplorerSettings.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("authentication", this.authentication);
        jsonWriter.writeStringField("database", this.database);
        jsonWriter.writeStringField("host", this.host);
        jsonWriter.writeJsonField("batching", this.batching);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DataExplorerSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DataExplorerSettings if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DataExplorerSettings.
     */
    public static DataExplorerSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DataExplorerSettings deserializedDataExplorerSettings = new DataExplorerSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("authentication".equals(fieldName)) {
                    deserializedDataExplorerSettings.authentication
                        = DataflowEndpointDataExplorerAuthentication.fromJson(reader);
                } else if ("database".equals(fieldName)) {
                    deserializedDataExplorerSettings.database = reader.getString();
                } else if ("host".equals(fieldName)) {
                    deserializedDataExplorerSettings.host = reader.getString();
                } else if ("batching".equals(fieldName)) {
                    deserializedDataExplorerSettings.batching = BatchingConfiguration.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDataExplorerSettings;
        });
    }
}
