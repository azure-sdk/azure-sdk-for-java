// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * AkriDiscoveryHandler properties.
 */
@Fluent
public final class AkriDiscoveryHandlerProperties implements JsonSerializable<AkriDiscoveryHandlerProperties> {
    /*
     * The status of the last operation.
     */
    private ProvisioningState provisioningState;

    /*
     * Metadata about AIO.
     */
    private AkriDiscoveryHandlerAioMetadata aioMetadata;

    /*
     * Additional configuration for the AkriDiscoveryHandler.
     */
    private Map<String, String> additionalConfiguration;

    /*
     * Diagnostics settings for the AkriDiscoveryHandler.
     */
    private AkriDiscoveryHandlerDiagnostics diagnostics;

    /*
     * Mode of the AkriDiscoveryHandler.
     */
    private OperationalMode mode;

    /*
     * Device inbound endpoint types.
     */
    private List<AkriDiscoveryHandlerDiscoverableDeviceEndpointType> discoverableDeviceEndpointTypes;

    /*
     * Mqtt connection configuration settings.
     */
    private AkriConnectorsMqttConnectionConfiguration mqttConnectionConfiguration;

    /*
     * The image configuration for the AkriDiscoveryHandler.
     */
    private AkriDiscoveryHandlerImageConfiguration imageConfiguration;

    /*
     * Schedule for the AkriDiscoveryHandler.
     */
    private AkriDiscoveryHandlerSchedule schedule;

    /*
     * Secrets that will be mounted onto discovery handler.
     */
    private List<AkriConnectorsSecret> secrets;

    /**
     * Creates an instance of AkriDiscoveryHandlerProperties class.
     */
    public AkriDiscoveryHandlerProperties() {
    }

    /**
     * Get the provisioningState property: The status of the last operation.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the aioMetadata property: Metadata about AIO.
     * 
     * @return the aioMetadata value.
     */
    public AkriDiscoveryHandlerAioMetadata aioMetadata() {
        return this.aioMetadata;
    }

    /**
     * Set the aioMetadata property: Metadata about AIO.
     * 
     * @param aioMetadata the aioMetadata value to set.
     * @return the AkriDiscoveryHandlerProperties object itself.
     */
    public AkriDiscoveryHandlerProperties withAioMetadata(AkriDiscoveryHandlerAioMetadata aioMetadata) {
        this.aioMetadata = aioMetadata;
        return this;
    }

    /**
     * Get the additionalConfiguration property: Additional configuration for the AkriDiscoveryHandler.
     * 
     * @return the additionalConfiguration value.
     */
    public Map<String, String> additionalConfiguration() {
        return this.additionalConfiguration;
    }

    /**
     * Set the additionalConfiguration property: Additional configuration for the AkriDiscoveryHandler.
     * 
     * @param additionalConfiguration the additionalConfiguration value to set.
     * @return the AkriDiscoveryHandlerProperties object itself.
     */
    public AkriDiscoveryHandlerProperties withAdditionalConfiguration(Map<String, String> additionalConfiguration) {
        this.additionalConfiguration = additionalConfiguration;
        return this;
    }

    /**
     * Get the diagnostics property: Diagnostics settings for the AkriDiscoveryHandler.
     * 
     * @return the diagnostics value.
     */
    public AkriDiscoveryHandlerDiagnostics diagnostics() {
        return this.diagnostics;
    }

    /**
     * Set the diagnostics property: Diagnostics settings for the AkriDiscoveryHandler.
     * 
     * @param diagnostics the diagnostics value to set.
     * @return the AkriDiscoveryHandlerProperties object itself.
     */
    public AkriDiscoveryHandlerProperties withDiagnostics(AkriDiscoveryHandlerDiagnostics diagnostics) {
        this.diagnostics = diagnostics;
        return this;
    }

    /**
     * Get the mode property: Mode of the AkriDiscoveryHandler.
     * 
     * @return the mode value.
     */
    public OperationalMode mode() {
        return this.mode;
    }

    /**
     * Set the mode property: Mode of the AkriDiscoveryHandler.
     * 
     * @param mode the mode value to set.
     * @return the AkriDiscoveryHandlerProperties object itself.
     */
    public AkriDiscoveryHandlerProperties withMode(OperationalMode mode) {
        this.mode = mode;
        return this;
    }

    /**
     * Get the discoverableDeviceEndpointTypes property: Device inbound endpoint types.
     * 
     * @return the discoverableDeviceEndpointTypes value.
     */
    public List<AkriDiscoveryHandlerDiscoverableDeviceEndpointType> discoverableDeviceEndpointTypes() {
        return this.discoverableDeviceEndpointTypes;
    }

    /**
     * Set the discoverableDeviceEndpointTypes property: Device inbound endpoint types.
     * 
     * @param discoverableDeviceEndpointTypes the discoverableDeviceEndpointTypes value to set.
     * @return the AkriDiscoveryHandlerProperties object itself.
     */
    public AkriDiscoveryHandlerProperties withDiscoverableDeviceEndpointTypes(
        List<AkriDiscoveryHandlerDiscoverableDeviceEndpointType> discoverableDeviceEndpointTypes) {
        this.discoverableDeviceEndpointTypes = discoverableDeviceEndpointTypes;
        return this;
    }

    /**
     * Get the mqttConnectionConfiguration property: Mqtt connection configuration settings.
     * 
     * @return the mqttConnectionConfiguration value.
     */
    public AkriConnectorsMqttConnectionConfiguration mqttConnectionConfiguration() {
        return this.mqttConnectionConfiguration;
    }

    /**
     * Set the mqttConnectionConfiguration property: Mqtt connection configuration settings.
     * 
     * @param mqttConnectionConfiguration the mqttConnectionConfiguration value to set.
     * @return the AkriDiscoveryHandlerProperties object itself.
     */
    public AkriDiscoveryHandlerProperties
        withMqttConnectionConfiguration(AkriConnectorsMqttConnectionConfiguration mqttConnectionConfiguration) {
        this.mqttConnectionConfiguration = mqttConnectionConfiguration;
        return this;
    }

    /**
     * Get the imageConfiguration property: The image configuration for the AkriDiscoveryHandler.
     * 
     * @return the imageConfiguration value.
     */
    public AkriDiscoveryHandlerImageConfiguration imageConfiguration() {
        return this.imageConfiguration;
    }

    /**
     * Set the imageConfiguration property: The image configuration for the AkriDiscoveryHandler.
     * 
     * @param imageConfiguration the imageConfiguration value to set.
     * @return the AkriDiscoveryHandlerProperties object itself.
     */
    public AkriDiscoveryHandlerProperties
        withImageConfiguration(AkriDiscoveryHandlerImageConfiguration imageConfiguration) {
        this.imageConfiguration = imageConfiguration;
        return this;
    }

    /**
     * Get the schedule property: Schedule for the AkriDiscoveryHandler.
     * 
     * @return the schedule value.
     */
    public AkriDiscoveryHandlerSchedule schedule() {
        return this.schedule;
    }

    /**
     * Set the schedule property: Schedule for the AkriDiscoveryHandler.
     * 
     * @param schedule the schedule value to set.
     * @return the AkriDiscoveryHandlerProperties object itself.
     */
    public AkriDiscoveryHandlerProperties withSchedule(AkriDiscoveryHandlerSchedule schedule) {
        this.schedule = schedule;
        return this;
    }

    /**
     * Get the secrets property: Secrets that will be mounted onto discovery handler.
     * 
     * @return the secrets value.
     */
    public List<AkriConnectorsSecret> secrets() {
        return this.secrets;
    }

    /**
     * Set the secrets property: Secrets that will be mounted onto discovery handler.
     * 
     * @param secrets the secrets value to set.
     * @return the AkriDiscoveryHandlerProperties object itself.
     */
    public AkriDiscoveryHandlerProperties withSecrets(List<AkriConnectorsSecret> secrets) {
        this.secrets = secrets;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (aioMetadata() != null) {
            aioMetadata().validate();
        }
        if (diagnostics() != null) {
            diagnostics().validate();
        }
        if (discoverableDeviceEndpointTypes() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property discoverableDeviceEndpointTypes in model AkriDiscoveryHandlerProperties"));
        } else {
            discoverableDeviceEndpointTypes().forEach(e -> e.validate());
        }
        if (mqttConnectionConfiguration() != null) {
            mqttConnectionConfiguration().validate();
        }
        if (imageConfiguration() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property imageConfiguration in model AkriDiscoveryHandlerProperties"));
        } else {
            imageConfiguration().validate();
        }
        if (schedule() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property schedule in model AkriDiscoveryHandlerProperties"));
        } else {
            schedule().validate();
        }
        if (secrets() != null) {
            secrets().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(AkriDiscoveryHandlerProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("discoverableDeviceEndpointTypes", this.discoverableDeviceEndpointTypes,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("imageConfiguration", this.imageConfiguration);
        jsonWriter.writeJsonField("schedule", this.schedule);
        jsonWriter.writeJsonField("aioMetadata", this.aioMetadata);
        jsonWriter.writeMapField("additionalConfiguration", this.additionalConfiguration,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("diagnostics", this.diagnostics);
        jsonWriter.writeStringField("mode", this.mode == null ? null : this.mode.toString());
        jsonWriter.writeJsonField("mqttConnectionConfiguration", this.mqttConnectionConfiguration);
        jsonWriter.writeArrayField("secrets", this.secrets, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AkriDiscoveryHandlerProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AkriDiscoveryHandlerProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AkriDiscoveryHandlerProperties.
     */
    public static AkriDiscoveryHandlerProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AkriDiscoveryHandlerProperties deserializedAkriDiscoveryHandlerProperties
                = new AkriDiscoveryHandlerProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("discoverableDeviceEndpointTypes".equals(fieldName)) {
                    List<AkriDiscoveryHandlerDiscoverableDeviceEndpointType> discoverableDeviceEndpointTypes = reader
                        .readArray(reader1 -> AkriDiscoveryHandlerDiscoverableDeviceEndpointType.fromJson(reader1));
                    deserializedAkriDiscoveryHandlerProperties.discoverableDeviceEndpointTypes
                        = discoverableDeviceEndpointTypes;
                } else if ("imageConfiguration".equals(fieldName)) {
                    deserializedAkriDiscoveryHandlerProperties.imageConfiguration
                        = AkriDiscoveryHandlerImageConfiguration.fromJson(reader);
                } else if ("schedule".equals(fieldName)) {
                    deserializedAkriDiscoveryHandlerProperties.schedule = AkriDiscoveryHandlerSchedule.fromJson(reader);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedAkriDiscoveryHandlerProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("aioMetadata".equals(fieldName)) {
                    deserializedAkriDiscoveryHandlerProperties.aioMetadata
                        = AkriDiscoveryHandlerAioMetadata.fromJson(reader);
                } else if ("additionalConfiguration".equals(fieldName)) {
                    Map<String, String> additionalConfiguration = reader.readMap(reader1 -> reader1.getString());
                    deserializedAkriDiscoveryHandlerProperties.additionalConfiguration = additionalConfiguration;
                } else if ("diagnostics".equals(fieldName)) {
                    deserializedAkriDiscoveryHandlerProperties.diagnostics
                        = AkriDiscoveryHandlerDiagnostics.fromJson(reader);
                } else if ("mode".equals(fieldName)) {
                    deserializedAkriDiscoveryHandlerProperties.mode = OperationalMode.fromString(reader.getString());
                } else if ("mqttConnectionConfiguration".equals(fieldName)) {
                    deserializedAkriDiscoveryHandlerProperties.mqttConnectionConfiguration
                        = AkriConnectorsMqttConnectionConfiguration.fromJson(reader);
                } else if ("secrets".equals(fieldName)) {
                    List<AkriConnectorsSecret> secrets
                        = reader.readArray(reader1 -> AkriConnectorsSecret.fromJson(reader1));
                    deserializedAkriDiscoveryHandlerProperties.secrets = secrets;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAkriDiscoveryHandlerProperties;
        });
    }
}
