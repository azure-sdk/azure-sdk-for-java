// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.iotoperations.fluent.AkriDiscoveryHandlersClient;
import com.azure.resourcemanager.iotoperations.fluent.models.AkriDiscoveryHandlerResourceInner;
import com.azure.resourcemanager.iotoperations.models.AkriDiscoveryHandlerResource;
import com.azure.resourcemanager.iotoperations.models.AkriDiscoveryHandlers;

public final class AkriDiscoveryHandlersImpl implements AkriDiscoveryHandlers {
    private static final ClientLogger LOGGER = new ClientLogger(AkriDiscoveryHandlersImpl.class);

    private final AkriDiscoveryHandlersClient innerClient;

    private final com.azure.resourcemanager.iotoperations.IoTOperationsManager serviceManager;

    public AkriDiscoveryHandlersImpl(AkriDiscoveryHandlersClient innerClient,
        com.azure.resourcemanager.iotoperations.IoTOperationsManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<AkriDiscoveryHandlerResource> getWithResponse(String resourceGroupName, String instanceName,
        String akriDiscoveryHandlerName, Context context) {
        Response<AkriDiscoveryHandlerResourceInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, instanceName, akriDiscoveryHandlerName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new AkriDiscoveryHandlerResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public AkriDiscoveryHandlerResource get(String resourceGroupName, String instanceName,
        String akriDiscoveryHandlerName) {
        AkriDiscoveryHandlerResourceInner inner
            = this.serviceClient().get(resourceGroupName, instanceName, akriDiscoveryHandlerName);
        if (inner != null) {
            return new AkriDiscoveryHandlerResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String instanceName, String akriDiscoveryHandlerName) {
        this.serviceClient().delete(resourceGroupName, instanceName, akriDiscoveryHandlerName);
    }

    public void delete(String resourceGroupName, String instanceName, String akriDiscoveryHandlerName,
        Context context) {
        this.serviceClient().delete(resourceGroupName, instanceName, akriDiscoveryHandlerName, context);
    }

    public PagedIterable<AkriDiscoveryHandlerResource> listByInstanceResource(String resourceGroupName,
        String instanceName) {
        PagedIterable<AkriDiscoveryHandlerResourceInner> inner
            = this.serviceClient().listByInstanceResource(resourceGroupName, instanceName);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new AkriDiscoveryHandlerResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<AkriDiscoveryHandlerResource> listByInstanceResource(String resourceGroupName,
        String instanceName, Context context) {
        PagedIterable<AkriDiscoveryHandlerResourceInner> inner
            = this.serviceClient().listByInstanceResource(resourceGroupName, instanceName, context);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new AkriDiscoveryHandlerResourceImpl(inner1, this.manager()));
    }

    public AkriDiscoveryHandlerResource getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String instanceName = ResourceManagerUtils.getValueFromIdByName(id, "instances");
        if (instanceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'instances'.", id)));
        }
        String akriDiscoveryHandlerName = ResourceManagerUtils.getValueFromIdByName(id, "akriDiscoveryHandlers");
        if (akriDiscoveryHandlerName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'akriDiscoveryHandlers'.", id)));
        }
        return this.getWithResponse(resourceGroupName, instanceName, akriDiscoveryHandlerName, Context.NONE).getValue();
    }

    public Response<AkriDiscoveryHandlerResource> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String instanceName = ResourceManagerUtils.getValueFromIdByName(id, "instances");
        if (instanceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'instances'.", id)));
        }
        String akriDiscoveryHandlerName = ResourceManagerUtils.getValueFromIdByName(id, "akriDiscoveryHandlers");
        if (akriDiscoveryHandlerName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'akriDiscoveryHandlers'.", id)));
        }
        return this.getWithResponse(resourceGroupName, instanceName, akriDiscoveryHandlerName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String instanceName = ResourceManagerUtils.getValueFromIdByName(id, "instances");
        if (instanceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'instances'.", id)));
        }
        String akriDiscoveryHandlerName = ResourceManagerUtils.getValueFromIdByName(id, "akriDiscoveryHandlers");
        if (akriDiscoveryHandlerName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'akriDiscoveryHandlers'.", id)));
        }
        this.delete(resourceGroupName, instanceName, akriDiscoveryHandlerName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String instanceName = ResourceManagerUtils.getValueFromIdByName(id, "instances");
        if (instanceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'instances'.", id)));
        }
        String akriDiscoveryHandlerName = ResourceManagerUtils.getValueFromIdByName(id, "akriDiscoveryHandlers");
        if (akriDiscoveryHandlerName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'akriDiscoveryHandlers'.", id)));
        }
        this.delete(resourceGroupName, instanceName, akriDiscoveryHandlerName, context);
    }

    private AkriDiscoveryHandlersClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.iotoperations.IoTOperationsManager manager() {
        return this.serviceManager;
    }

    public AkriDiscoveryHandlerResourceImpl define(String name) {
        return new AkriDiscoveryHandlerResourceImpl(name, this.manager());
    }
}
