// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * AkriDiscoveryHandlerScheduleCron properties.
 */
@Fluent
public final class AkriDiscoveryHandlerScheduleCron extends AkriDiscoveryHandlerSchedule {
    /*
     * Schedule type.
     */
    private AkriDiscoveryHandlerScheduleType scheduleType = AkriDiscoveryHandlerScheduleType.CRON;

    /*
     * The cron expression for the schedule.
     */
    private String cron;

    /**
     * Creates an instance of AkriDiscoveryHandlerScheduleCron class.
     */
    public AkriDiscoveryHandlerScheduleCron() {
    }

    /**
     * Get the scheduleType property: Schedule type.
     * 
     * @return the scheduleType value.
     */
    @Override
    public AkriDiscoveryHandlerScheduleType scheduleType() {
        return this.scheduleType;
    }

    /**
     * Get the cron property: The cron expression for the schedule.
     * 
     * @return the cron value.
     */
    public String cron() {
        return this.cron;
    }

    /**
     * Set the cron property: The cron expression for the schedule.
     * 
     * @param cron the cron value to set.
     * @return the AkriDiscoveryHandlerScheduleCron object itself.
     */
    public AkriDiscoveryHandlerScheduleCron withCron(String cron) {
        this.cron = cron;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (cron() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property cron in model AkriDiscoveryHandlerScheduleCron"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(AkriDiscoveryHandlerScheduleCron.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("cron", this.cron);
        jsonWriter.writeStringField("scheduleType", this.scheduleType == null ? null : this.scheduleType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AkriDiscoveryHandlerScheduleCron from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AkriDiscoveryHandlerScheduleCron if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AkriDiscoveryHandlerScheduleCron.
     */
    public static AkriDiscoveryHandlerScheduleCron fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AkriDiscoveryHandlerScheduleCron deserializedAkriDiscoveryHandlerScheduleCron
                = new AkriDiscoveryHandlerScheduleCron();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("cron".equals(fieldName)) {
                    deserializedAkriDiscoveryHandlerScheduleCron.cron = reader.getString();
                } else if ("scheduleType".equals(fieldName)) {
                    deserializedAkriDiscoveryHandlerScheduleCron.scheduleType
                        = AkriDiscoveryHandlerScheduleType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAkriDiscoveryHandlerScheduleCron;
        });
    }
}
