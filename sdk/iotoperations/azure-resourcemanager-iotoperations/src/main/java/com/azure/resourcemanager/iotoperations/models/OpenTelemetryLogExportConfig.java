// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * OpenTelemetry Log Export Configuration properties.
 */
@Fluent
public final class OpenTelemetryLogExportConfig implements JsonSerializable<OpenTelemetryLogExportConfig> {
    /*
     * The open telemetry collector endpoint to export to.
     */
    private String otlpGrpcEndpoint;

    /*
     * How often to export the metrics to the open telemetry collector.
     */
    private Integer intervalSeconds;

    /*
     * The log level. Examples - 'debug', 'info', 'warn', 'error', 'trace'.
     */
    private String level;

    /**
     * Creates an instance of OpenTelemetryLogExportConfig class.
     */
    public OpenTelemetryLogExportConfig() {
    }

    /**
     * Get the otlpGrpcEndpoint property: The open telemetry collector endpoint to export to.
     * 
     * @return the otlpGrpcEndpoint value.
     */
    public String otlpGrpcEndpoint() {
        return this.otlpGrpcEndpoint;
    }

    /**
     * Set the otlpGrpcEndpoint property: The open telemetry collector endpoint to export to.
     * 
     * @param otlpGrpcEndpoint the otlpGrpcEndpoint value to set.
     * @return the OpenTelemetryLogExportConfig object itself.
     */
    public OpenTelemetryLogExportConfig withOtlpGrpcEndpoint(String otlpGrpcEndpoint) {
        this.otlpGrpcEndpoint = otlpGrpcEndpoint;
        return this;
    }

    /**
     * Get the intervalSeconds property: How often to export the metrics to the open telemetry collector.
     * 
     * @return the intervalSeconds value.
     */
    public Integer intervalSeconds() {
        return this.intervalSeconds;
    }

    /**
     * Set the intervalSeconds property: How often to export the metrics to the open telemetry collector.
     * 
     * @param intervalSeconds the intervalSeconds value to set.
     * @return the OpenTelemetryLogExportConfig object itself.
     */
    public OpenTelemetryLogExportConfig withIntervalSeconds(Integer intervalSeconds) {
        this.intervalSeconds = intervalSeconds;
        return this;
    }

    /**
     * Get the level property: The log level. Examples - 'debug', 'info', 'warn', 'error', 'trace'.
     * 
     * @return the level value.
     */
    public String level() {
        return this.level;
    }

    /**
     * Set the level property: The log level. Examples - 'debug', 'info', 'warn', 'error', 'trace'.
     * 
     * @param level the level value to set.
     * @return the OpenTelemetryLogExportConfig object itself.
     */
    public OpenTelemetryLogExportConfig withLevel(String level) {
        this.level = level;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (otlpGrpcEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property otlpGrpcEndpoint in model OpenTelemetryLogExportConfig"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(OpenTelemetryLogExportConfig.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("otlpGrpcEndpoint", this.otlpGrpcEndpoint);
        jsonWriter.writeNumberField("intervalSeconds", this.intervalSeconds);
        jsonWriter.writeStringField("level", this.level);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OpenTelemetryLogExportConfig from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OpenTelemetryLogExportConfig if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the OpenTelemetryLogExportConfig.
     */
    public static OpenTelemetryLogExportConfig fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OpenTelemetryLogExportConfig deserializedOpenTelemetryLogExportConfig = new OpenTelemetryLogExportConfig();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("otlpGrpcEndpoint".equals(fieldName)) {
                    deserializedOpenTelemetryLogExportConfig.otlpGrpcEndpoint = reader.getString();
                } else if ("intervalSeconds".equals(fieldName)) {
                    deserializedOpenTelemetryLogExportConfig.intervalSeconds = reader.getNullable(JsonReader::getInt);
                } else if ("level".equals(fieldName)) {
                    deserializedOpenTelemetryLogExportConfig.level = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOpenTelemetryLogExportConfig;
        });
    }
}
