// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Authorization Resource properties.
 */
@Fluent
public final class AuthorizationProperties implements JsonSerializable<AuthorizationProperties> {
    /*
     * The list of authorization policies supported by the Authorization Resource.
     */
    private AuthorizationConfig authorizationPolicies;

    /*
     * The status of the last operation.
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of AuthorizationProperties class.
     */
    public AuthorizationProperties() {
    }

    /**
     * Get the authorizationPolicies property: The list of authorization policies supported by the Authorization
     * Resource.
     * 
     * @return the authorizationPolicies value.
     */
    public AuthorizationConfig authorizationPolicies() {
        return this.authorizationPolicies;
    }

    /**
     * Set the authorizationPolicies property: The list of authorization policies supported by the Authorization
     * Resource.
     * 
     * @param authorizationPolicies the authorizationPolicies value to set.
     * @return the AuthorizationProperties object itself.
     */
    public AuthorizationProperties withAuthorizationPolicies(AuthorizationConfig authorizationPolicies) {
        this.authorizationPolicies = authorizationPolicies;
        return this;
    }

    /**
     * Get the provisioningState property: The status of the last operation.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (authorizationPolicies() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property authorizationPolicies in model AuthorizationProperties"));
        } else {
            authorizationPolicies().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(AuthorizationProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("authorizationPolicies", this.authorizationPolicies);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AuthorizationProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AuthorizationProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AuthorizationProperties.
     */
    public static AuthorizationProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AuthorizationProperties deserializedAuthorizationProperties = new AuthorizationProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("authorizationPolicies".equals(fieldName)) {
                    deserializedAuthorizationProperties.authorizationPolicies = AuthorizationConfig.fromJson(reader);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedAuthorizationProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAuthorizationProperties;
        });
    }
}
