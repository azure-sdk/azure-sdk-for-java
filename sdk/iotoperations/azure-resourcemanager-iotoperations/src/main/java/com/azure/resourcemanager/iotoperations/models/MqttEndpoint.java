// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Broker endpoint.
 */
@Fluent
public final class MqttEndpoint extends DataflowEndpointProperties {
    /*
     * Endpoint Type.
     */
    private EndpointType endpointType = EndpointType.MQTT;

    /*
     * Broker endpoint.
     */
    private MqttSettings mqttSettings;

    /*
     * The status of the last operation.
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of MqttEndpoint class.
     */
    public MqttEndpoint() {
    }

    /**
     * Get the endpointType property: Endpoint Type.
     * 
     * @return the endpointType value.
     */
    @Override
    public EndpointType endpointType() {
        return this.endpointType;
    }

    /**
     * Get the mqttSettings property: Broker endpoint.
     * 
     * @return the mqttSettings value.
     */
    public MqttSettings mqttSettings() {
        return this.mqttSettings;
    }

    /**
     * Set the mqttSettings property: Broker endpoint.
     * 
     * @param mqttSettings the mqttSettings value to set.
     * @return the MqttEndpoint object itself.
     */
    public MqttEndpoint withMqttSettings(MqttSettings mqttSettings) {
        this.mqttSettings = mqttSettings;
        return this;
    }

    /**
     * Get the provisioningState property: The status of the last operation.
     * 
     * @return the provisioningState value.
     */
    @Override
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (mqttSettings() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property mqttSettings in model MqttEndpoint"));
        } else {
            mqttSettings().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(MqttEndpoint.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("mqttSettings", this.mqttSettings);
        jsonWriter.writeStringField("endpointType", this.endpointType == null ? null : this.endpointType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MqttEndpoint from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MqttEndpoint if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MqttEndpoint.
     */
    public static MqttEndpoint fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MqttEndpoint deserializedMqttEndpoint = new MqttEndpoint();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedMqttEndpoint.provisioningState = ProvisioningState.fromString(reader.getString());
                } else if ("mqttSettings".equals(fieldName)) {
                    deserializedMqttEndpoint.mqttSettings = MqttSettings.fromJson(reader);
                } else if ("endpointType".equals(fieldName)) {
                    deserializedMqttEndpoint.endpointType = EndpointType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMqttEndpoint;
        });
    }
}
