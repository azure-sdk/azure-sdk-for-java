// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * DataflowGraph destination node properties.
 */
@Fluent
public final class DatafloGraphDestinationNode extends DataflowGraphNode {
    /*
     * Type of the node.
     */
    private DataflowGraphNodeType type = DataflowGraphNodeType.DESTINATION;

    /*
     * Destination configuration.
     */
    private DataflowGraphDestinationNodeSettings destinationSettings;

    /**
     * Creates an instance of DatafloGraphDestinationNode class.
     */
    public DatafloGraphDestinationNode() {
    }

    /**
     * Get the type property: Type of the node.
     * 
     * @return the type value.
     */
    @Override
    public DataflowGraphNodeType type() {
        return this.type;
    }

    /**
     * Get the destinationSettings property: Destination configuration.
     * 
     * @return the destinationSettings value.
     */
    public DataflowGraphDestinationNodeSettings destinationSettings() {
        return this.destinationSettings;
    }

    /**
     * Set the destinationSettings property: Destination configuration.
     * 
     * @param destinationSettings the destinationSettings value to set.
     * @return the DatafloGraphDestinationNode object itself.
     */
    public DatafloGraphDestinationNode
        withDestinationSettings(DataflowGraphDestinationNodeSettings destinationSettings) {
        this.destinationSettings = destinationSettings;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DatafloGraphDestinationNode withName(String name) {
        super.withName(name);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (destinationSettings() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property destinationSettings in model DatafloGraphDestinationNode"));
        } else {
            destinationSettings().validate();
        }
        if (name() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property name in model DatafloGraphDestinationNode"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DatafloGraphDestinationNode.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", name());
        jsonWriter.writeJsonField("destinationSettings", this.destinationSettings);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DatafloGraphDestinationNode from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DatafloGraphDestinationNode if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DatafloGraphDestinationNode.
     */
    public static DatafloGraphDestinationNode fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DatafloGraphDestinationNode deserializedDatafloGraphDestinationNode = new DatafloGraphDestinationNode();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedDatafloGraphDestinationNode.withName(reader.getString());
                } else if ("destinationSettings".equals(fieldName)) {
                    deserializedDatafloGraphDestinationNode.destinationSettings
                        = DataflowGraphDestinationNodeSettings.fromJson(reader);
                } else if ("type".equals(fieldName)) {
                    deserializedDatafloGraphDestinationNode.type = DataflowGraphNodeType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDatafloGraphDestinationNode;
        });
    }
}
