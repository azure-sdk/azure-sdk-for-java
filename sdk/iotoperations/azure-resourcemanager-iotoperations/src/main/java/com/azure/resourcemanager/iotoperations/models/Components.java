// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The configuration for components of the AIO Instance.
 */
@Fluent
public final class Components implements JsonSerializable<Components> {
    /*
     * The properties of the ADR instance.
     */
    private AdrProperties adr;

    /*
     * The properties of the AKRI instance.
     */
    private AkriInstanceProperties akri;

    /*
     * The properties of the connectors instance.
     */
    private ConnectorInstanceProperties connectors;

    /*
     * The properties of the dataflows instance.
     */
    private DataflowInstanceProperties dataflows;

    /*
     * The properties of the device provisioning instance.
     */
    private SchemaRegistryInstanceProperties schemaRegistry;

    /**
     * Creates an instance of Components class.
     */
    public Components() {
    }

    /**
     * Get the adr property: The properties of the ADR instance.
     * 
     * @return the adr value.
     */
    public AdrProperties adr() {
        return this.adr;
    }

    /**
     * Set the adr property: The properties of the ADR instance.
     * 
     * @param adr the adr value to set.
     * @return the Components object itself.
     */
    public Components withAdr(AdrProperties adr) {
        this.adr = adr;
        return this;
    }

    /**
     * Get the akri property: The properties of the AKRI instance.
     * 
     * @return the akri value.
     */
    public AkriInstanceProperties akri() {
        return this.akri;
    }

    /**
     * Set the akri property: The properties of the AKRI instance.
     * 
     * @param akri the akri value to set.
     * @return the Components object itself.
     */
    public Components withAkri(AkriInstanceProperties akri) {
        this.akri = akri;
        return this;
    }

    /**
     * Get the connectors property: The properties of the connectors instance.
     * 
     * @return the connectors value.
     */
    public ConnectorInstanceProperties connectors() {
        return this.connectors;
    }

    /**
     * Set the connectors property: The properties of the connectors instance.
     * 
     * @param connectors the connectors value to set.
     * @return the Components object itself.
     */
    public Components withConnectors(ConnectorInstanceProperties connectors) {
        this.connectors = connectors;
        return this;
    }

    /**
     * Get the dataflows property: The properties of the dataflows instance.
     * 
     * @return the dataflows value.
     */
    public DataflowInstanceProperties dataflows() {
        return this.dataflows;
    }

    /**
     * Set the dataflows property: The properties of the dataflows instance.
     * 
     * @param dataflows the dataflows value to set.
     * @return the Components object itself.
     */
    public Components withDataflows(DataflowInstanceProperties dataflows) {
        this.dataflows = dataflows;
        return this;
    }

    /**
     * Get the schemaRegistry property: The properties of the device provisioning instance.
     * 
     * @return the schemaRegistry value.
     */
    public SchemaRegistryInstanceProperties schemaRegistry() {
        return this.schemaRegistry;
    }

    /**
     * Set the schemaRegistry property: The properties of the device provisioning instance.
     * 
     * @param schemaRegistry the schemaRegistry value to set.
     * @return the Components object itself.
     */
    public Components withSchemaRegistry(SchemaRegistryInstanceProperties schemaRegistry) {
        this.schemaRegistry = schemaRegistry;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (adr() != null) {
            adr().validate();
        }
        if (akri() != null) {
            akri().validate();
        }
        if (connectors() != null) {
            connectors().validate();
        }
        if (dataflows() != null) {
            dataflows().validate();
        }
        if (schemaRegistry() != null) {
            schemaRegistry().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("adr", this.adr);
        jsonWriter.writeJsonField("akri", this.akri);
        jsonWriter.writeJsonField("connectors", this.connectors);
        jsonWriter.writeJsonField("dataflows", this.dataflows);
        jsonWriter.writeJsonField("schemaRegistry", this.schemaRegistry);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Components from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Components if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the Components.
     */
    public static Components fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Components deserializedComponents = new Components();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("adr".equals(fieldName)) {
                    deserializedComponents.adr = AdrProperties.fromJson(reader);
                } else if ("akri".equals(fieldName)) {
                    deserializedComponents.akri = AkriInstanceProperties.fromJson(reader);
                } else if ("connectors".equals(fieldName)) {
                    deserializedComponents.connectors = ConnectorInstanceProperties.fromJson(reader);
                } else if ("dataflows".equals(fieldName)) {
                    deserializedComponents.dataflows = DataflowInstanceProperties.fromJson(reader);
                } else if ("schemaRegistry".equals(fieldName)) {
                    deserializedComponents.schemaRegistry = SchemaRegistryInstanceProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedComponents;
        });
    }
}
