// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Authentication Resource properties.
 */
@Fluent
public final class AuthenticationProperties implements JsonSerializable<AuthenticationProperties> {
    /*
     * Defines a set of Broker authentication methods to be used on `BrokerListeners`. For each array element one
     * authenticator type supported.
     */
    private List<AuthenticatorMethods> authenticationMethods;

    /*
     * The status of the last operation.
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of AuthenticationProperties class.
     */
    public AuthenticationProperties() {
    }

    /**
     * Get the authenticationMethods property: Defines a set of Broker authentication methods to be used on
     * `BrokerListeners`. For each array element one authenticator type supported.
     * 
     * @return the authenticationMethods value.
     */
    public List<AuthenticatorMethods> authenticationMethods() {
        return this.authenticationMethods;
    }

    /**
     * Set the authenticationMethods property: Defines a set of Broker authentication methods to be used on
     * `BrokerListeners`. For each array element one authenticator type supported.
     * 
     * @param authenticationMethods the authenticationMethods value to set.
     * @return the AuthenticationProperties object itself.
     */
    public AuthenticationProperties withAuthenticationMethods(List<AuthenticatorMethods> authenticationMethods) {
        this.authenticationMethods = authenticationMethods;
        return this;
    }

    /**
     * Get the provisioningState property: The status of the last operation.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (authenticationMethods() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property authenticationMethods in model AuthenticationProperties"));
        } else {
            authenticationMethods().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(AuthenticationProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("authenticationMethods", this.authenticationMethods,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AuthenticationProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AuthenticationProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AuthenticationProperties.
     */
    public static AuthenticationProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AuthenticationProperties deserializedAuthenticationProperties = new AuthenticationProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("authenticationMethods".equals(fieldName)) {
                    List<AuthenticatorMethods> authenticationMethods
                        = reader.readArray(reader1 -> AuthenticatorMethods.fromJson(reader1));
                    deserializedAuthenticationProperties.authenticationMethods = authenticationMethods;
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedAuthenticationProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAuthenticationProperties;
        });
    }
}
