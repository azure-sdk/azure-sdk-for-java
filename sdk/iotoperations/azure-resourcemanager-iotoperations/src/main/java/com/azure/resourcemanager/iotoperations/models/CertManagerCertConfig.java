// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Cert Manager Cert properties.
 */
@Fluent
public final class CertManagerCertConfig implements JsonSerializable<CertManagerCertConfig> {
    /*
     * Lifetime of certificate. Must be specified using a Go time.Duration format (h|m|s). E.g. 240h for 240 hours and
     * 45m for 45 minutes.
     */
    private String duration;

    /*
     * When to begin renewing certificate. Must be specified using a Go time.Duration format (h|m|s). E.g. 240h for 240
     * hours and 45m for 45 minutes.
     */
    private String renewBefore;

    /*
     * Configuration of certificate private key.
     */
    private CertManagerPrivateKey privateKey;

    /**
     * Creates an instance of CertManagerCertConfig class.
     */
    public CertManagerCertConfig() {
    }

    /**
     * Get the duration property: Lifetime of certificate. Must be specified using a Go time.Duration format (h|m|s).
     * E.g. 240h for 240 hours and 45m for 45 minutes.
     * 
     * @return the duration value.
     */
    public String duration() {
        return this.duration;
    }

    /**
     * Set the duration property: Lifetime of certificate. Must be specified using a Go time.Duration format (h|m|s).
     * E.g. 240h for 240 hours and 45m for 45 minutes.
     * 
     * @param duration the duration value to set.
     * @return the CertManagerCertConfig object itself.
     */
    public CertManagerCertConfig withDuration(String duration) {
        this.duration = duration;
        return this;
    }

    /**
     * Get the renewBefore property: When to begin renewing certificate. Must be specified using a Go time.Duration
     * format (h|m|s). E.g. 240h for 240 hours and 45m for 45 minutes.
     * 
     * @return the renewBefore value.
     */
    public String renewBefore() {
        return this.renewBefore;
    }

    /**
     * Set the renewBefore property: When to begin renewing certificate. Must be specified using a Go time.Duration
     * format (h|m|s). E.g. 240h for 240 hours and 45m for 45 minutes.
     * 
     * @param renewBefore the renewBefore value to set.
     * @return the CertManagerCertConfig object itself.
     */
    public CertManagerCertConfig withRenewBefore(String renewBefore) {
        this.renewBefore = renewBefore;
        return this;
    }

    /**
     * Get the privateKey property: Configuration of certificate private key.
     * 
     * @return the privateKey value.
     */
    public CertManagerPrivateKey privateKey() {
        return this.privateKey;
    }

    /**
     * Set the privateKey property: Configuration of certificate private key.
     * 
     * @param privateKey the privateKey value to set.
     * @return the CertManagerCertConfig object itself.
     */
    public CertManagerCertConfig withPrivateKey(CertManagerPrivateKey privateKey) {
        this.privateKey = privateKey;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (duration() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property duration in model CertManagerCertConfig"));
        }
        if (renewBefore() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property renewBefore in model CertManagerCertConfig"));
        }
        if (privateKey() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property privateKey in model CertManagerCertConfig"));
        } else {
            privateKey().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(CertManagerCertConfig.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("duration", this.duration);
        jsonWriter.writeStringField("renewBefore", this.renewBefore);
        jsonWriter.writeJsonField("privateKey", this.privateKey);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CertManagerCertConfig from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CertManagerCertConfig if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CertManagerCertConfig.
     */
    public static CertManagerCertConfig fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CertManagerCertConfig deserializedCertManagerCertConfig = new CertManagerCertConfig();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("duration".equals(fieldName)) {
                    deserializedCertManagerCertConfig.duration = reader.getString();
                } else if ("renewBefore".equals(fieldName)) {
                    deserializedCertManagerCertConfig.renewBefore = reader.getString();
                } else if ("privateKey".equals(fieldName)) {
                    deserializedCertManagerCertConfig.privateKey = CertManagerPrivateKey.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCertManagerCertConfig;
        });
    }
}
