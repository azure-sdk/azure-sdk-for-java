// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.generated;

import com.azure.resourcemanager.iotoperations.models.AkriConnectorsDiagnosticsLogs;
import com.azure.resourcemanager.iotoperations.models.AkriConnectorsImagePullPolicy;
import com.azure.resourcemanager.iotoperations.models.AkriConnectorsMqttAuthentication;
import com.azure.resourcemanager.iotoperations.models.AkriConnectorsMqttConnectionConfiguration;
import com.azure.resourcemanager.iotoperations.models.AkriConnectorsMqttProtocolType;
import com.azure.resourcemanager.iotoperations.models.AkriConnectorsRegistrySettings;
import com.azure.resourcemanager.iotoperations.models.AkriConnectorsSecret;
import com.azure.resourcemanager.iotoperations.models.AkriConnectorsTagDigestSettings;
import com.azure.resourcemanager.iotoperations.models.AkriDiscoveryHandlerAioMetadata;
import com.azure.resourcemanager.iotoperations.models.AkriDiscoveryHandlerDiagnostics;
import com.azure.resourcemanager.iotoperations.models.AkriDiscoveryHandlerDiscoverableDeviceEndpointType;
import com.azure.resourcemanager.iotoperations.models.AkriDiscoveryHandlerImageConfiguration;
import com.azure.resourcemanager.iotoperations.models.AkriDiscoveryHandlerProperties;
import com.azure.resourcemanager.iotoperations.models.AkriDiscoveryHandlerSchedule;
import com.azure.resourcemanager.iotoperations.models.ExtendedLocation;
import com.azure.resourcemanager.iotoperations.models.ExtendedLocationType;
import com.azure.resourcemanager.iotoperations.models.OperationalMode;
import com.azure.resourcemanager.iotoperations.models.TlsProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for AkriDiscoveryHandler CreateOrUpdate.
 */
public final class AkriDiscoveryHandlerCreateOrUpdateSamples {
    /*
     * x-ms-original-file: 2025-07-01-preview/AkriDiscoveryHandler_CreateOrUpdate_MaximumSet_Gen.json
     */
    /**
     * Sample code: AkriDiscoveryHandler_CreateOrUpdate_MaximumSet.
     * 
     * @param manager Entry point to IoTOperationsManager.
     */
    public static void akriDiscoveryHandlerCreateOrUpdateMaximumSet(
        com.azure.resourcemanager.iotoperations.IoTOperationsManager manager) {
        manager.akriDiscoveryHandlers()
            .define("resource-name123")
            .withExistingInstance("rgiotoperations", "resource-name123")
            .withProperties(new AkriDiscoveryHandlerProperties()
                .withAioMetadata(new AkriDiscoveryHandlerAioMetadata().withAioMinVersion("nxusafsppaikld")
                    .withAioMaxVersion("yrmlixhxsnrgialgwruyk"))
                .withAdditionalConfiguration(mapOf("key2206", "fakeTokenPlaceholder"))
                .withDiagnostics(new AkriDiscoveryHandlerDiagnostics()
                    .withLogs(new AkriConnectorsDiagnosticsLogs().withLevel("inypis")))
                .withMode(OperationalMode.ENABLED)
                .withDiscoverableDeviceEndpointTypes(Arrays
                    .asList(new AkriDiscoveryHandlerDiscoverableDeviceEndpointType().withEndpointType("chkkpymxhp")
                        .withVersion("chkkpymxhp")))
                .withMqttConnectionConfiguration(new AkriConnectorsMqttConnectionConfiguration()
                    .withAuthentication(new AkriConnectorsMqttAuthentication())
                    .withHost("mfxhevl")
                    .withProtocol(AkriConnectorsMqttProtocolType.MQTT)
                    .withKeepAliveSeconds(0)
                    .withMaxInflightMessages(0)
                    .withSessionExpirySeconds(0)
                    .withTls(new TlsProperties().withMode(OperationalMode.ENABLED)
                        .withTrustedCaCertificateConfigMapRef("tectjjvukvelsreihwadh")))
                .withImageConfiguration(
                    new AkriDiscoveryHandlerImageConfiguration().withImageName("vrglpcosiuiulgwqkjbrdxnyjphp")
                        .withImagePullPolicy(AkriConnectorsImagePullPolicy.ALWAYS)
                        .withReplicas(4)
                        .withRegistrySettings(new AkriConnectorsRegistrySettings())
                        .withTagDigestSettings(new AkriConnectorsTagDigestSettings()))
                .withSchedule(new AkriDiscoveryHandlerSchedule())
                .withSecrets(Arrays.asList(new AkriConnectorsSecret().withSecretKey("fakeTokenPlaceholder")
                    .withSecretAlias("fakeTokenPlaceholder")
                    .withSecretRef("fakeTokenPlaceholder"))))
            .withExtendedLocation(
                new ExtendedLocation().withName("qmbrfwcpwwhggszhrdjv").withType(ExtendedLocationType.CUSTOM_LOCATION))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
