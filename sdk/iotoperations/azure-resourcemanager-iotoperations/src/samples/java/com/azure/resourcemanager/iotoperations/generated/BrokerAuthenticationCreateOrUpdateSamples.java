// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.generated;

import com.azure.resourcemanager.iotoperations.models.AuthenticationMethod;
import com.azure.resourcemanager.iotoperations.models.AuthenticationProperties;
import com.azure.resourcemanager.iotoperations.models.AuthenticatorMethodCustom;
import com.azure.resourcemanager.iotoperations.models.AuthenticatorMethodSat;
import com.azure.resourcemanager.iotoperations.models.AuthenticatorMethodX509;
import com.azure.resourcemanager.iotoperations.models.AuthenticatorMethods;
import com.azure.resourcemanager.iotoperations.models.BrokerAuthenticatorCustomAuth;
import com.azure.resourcemanager.iotoperations.models.BrokerAuthenticatorMethodX509Attributes;
import com.azure.resourcemanager.iotoperations.models.ExtendedLocation;
import com.azure.resourcemanager.iotoperations.models.ExtendedLocationType;
import com.azure.resourcemanager.iotoperations.models.X509ManualCertificate;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for BrokerAuthentication CreateOrUpdate.
 */
public final class BrokerAuthenticationCreateOrUpdateSamples {
    /*
     * x-ms-original-file: 2025-01-01-preview/BrokerAuthentication_CreateOrUpdate_MaximumSet_Gen.json
     */
    /**
     * Sample code: BrokerAuthentication_CreateOrUpdate.
     * 
     * @param manager Entry point to IoTOperationsManager.
     */
    public static void
        brokerAuthenticationCreateOrUpdate(com.azure.resourcemanager.iotoperations.IoTOperationsManager manager) {
        manager.brokerAuthentications()
            .define("resource-name123")
            .withExistingBroker("rgiotoperations", "resource-name123", "resource-name123")
            .withExtendedLocation(
                new ExtendedLocation().withName("qmbrfwcpwwhggszhrdjv").withType(ExtendedLocationType.CUSTOM_LOCATION))
            .withProperties(
                new AuthenticationProperties()
                    .withAuthenticationMethods(
                        Arrays
                            .asList(new AuthenticatorMethods().withMethod(AuthenticationMethod.CUSTOM)
                                .withCustomSettings(new AuthenticatorMethodCustom()
                                    .withAuth(new BrokerAuthenticatorCustomAuth()
                                        .withX509(new X509ManualCertificate().withSecretRef("fakeTokenPlaceholder")))
                                    .withCaCertConfigMap("pdecudefqyolvncbus")
                                    .withEndpoint("https://www.example.com")
                                    .withHeaders(mapOf("key8518", "fakeTokenPlaceholder")))
                                .withServiceAccountTokenSettings(
                                    new AuthenticatorMethodSat().withAudiences(Arrays.asList("jqyhyqatuydg")))
                                .withX509Settings(new AuthenticatorMethodX509()
                                    .withAuthorizationAttributes(mapOf("key3384",
                                        new BrokerAuthenticatorMethodX509Attributes()
                                            .withAttributes(mapOf("key186", "fakeTokenPlaceholder"))
                                            .withSubject("jpgwctfeixitptfgfnqhua")))
                                    .withTrustedClientCaCert("vlctsqddl")))))
            .create();
    }

    /*
     * x-ms-original-file: 2025-01-01-preview/BrokerAuthentication_CreateOrUpdate_Complex.json
     */
    /**
     * Sample code: BrokerAuthentication_CreateOrUpdate_Complex.
     * 
     * @param manager Entry point to IoTOperationsManager.
     */
    public static void brokerAuthenticationCreateOrUpdateComplex(
        com.azure.resourcemanager.iotoperations.IoTOperationsManager manager) {
        manager.brokerAuthentications()
            .define("resource-name123")
            .withExistingBroker("rgiotoperations", "resource-name123", "resource-name123")
            .withExtendedLocation(
                new ExtendedLocation().withName("qmbrfwcpwwhggszhrdjv").withType(ExtendedLocationType.CUSTOM_LOCATION))
            .withProperties(new AuthenticationProperties().withAuthenticationMethods(Arrays.asList(
                new AuthenticatorMethods().withMethod(AuthenticationMethod.SERVICE_ACCOUNT_TOKEN)
                    .withServiceAccountTokenSettings(
                        new AuthenticatorMethodSat().withAudiences(Arrays.asList("aio-internal"))),
                new AuthenticatorMethods().withMethod(AuthenticationMethod.X509)
                    .withX509Settings(new AuthenticatorMethodX509().withAuthorizationAttributes(mapOf("root",
                        new BrokerAuthenticatorMethodX509Attributes().withAttributes(mapOf("organization", "contoso"))
                            .withSubject("CN = Contoso Root CA Cert, OU = Engineering, C = US"),
                        "intermediate",
                        new BrokerAuthenticatorMethodX509Attributes()
                            .withAttributes(mapOf("city", "seattle", "foo", "bar"))
                            .withSubject("CN = Contoso Intermediate CA"),
                        "smart-fan",
                        new BrokerAuthenticatorMethodX509Attributes().withAttributes(mapOf("building", "17"))
                            .withSubject("CN = smart-fan")))
                        .withTrustedClientCaCert("my-ca")))))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
