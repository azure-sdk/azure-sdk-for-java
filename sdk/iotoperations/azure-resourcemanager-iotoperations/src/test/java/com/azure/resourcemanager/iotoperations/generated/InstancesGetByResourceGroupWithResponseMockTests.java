// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.iotoperations.IoTOperationsManager;
import com.azure.resourcemanager.iotoperations.models.ExtendedLocationType;
import com.azure.resourcemanager.iotoperations.models.InstanceResource;
import com.azure.resourcemanager.iotoperations.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.iotoperations.models.OperationalMode;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class InstancesGetByResourceGroupWithResponseMockTests {
    @Test
    public void testGetByResourceGroupWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"description\":\"or\",\"provisioningState\":\"Provisioning\",\"version\":\"olmncwsobqwcs\",\"schemaRegistryRef\":{\"resourceId\":\"bnwdcfh\"},\"features\":{\"pfuvglsbjjca\":\"Enabled\",\"xbvtvudu\":\"Enabled\",\"cormr\":\"Disabled\",\"qtvcofudflvkgj\":\"Enabled\"}},\"extendedLocation\":{\"name\":\"bgdknnqv\",\"type\":\"CustomLocation\"},\"identity\":{\"principalId\":\"qntorudsgsahmkyc\",\"tenantId\":\"auwjuetaebu\",\"type\":\"None\",\"userAssignedIdentities\":{\"kif\":{\"clientId\":\"ovsm\",\"principalId\":\"xwabmqoe\"},\"tujitcjedft\":{\"clientId\":\"tpuqujmq\",\"principalId\":\"kfbtndoaongbjc\"}}},\"location\":\"ae\",\"tags\":{\"bxarzgszufoxci\":\"jvdcpzfoqouic\",\"haz\":\"opidoamciodh\",\"toego\":\"khnzbonlw\"},\"id\":\"dwbwhkszzcmrvexz\",\"name\":\"vbtqgsfraoyzk\",\"type\":\"owtlmnguxawqald\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        IoTOperationsManager manager = IoTOperationsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        InstanceResource response = manager.instances()
            .getByResourceGroupWithResponse("wyfzqwhxxbuyqa", "zfeqztppri", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("ae", response.location());
        Assertions.assertEquals("jvdcpzfoqouic", response.tags().get("bxarzgszufoxci"));
        Assertions.assertEquals("or", response.properties().description());
        Assertions.assertEquals("bnwdcfh", response.properties().schemaRegistryRef().resourceId());
        Assertions.assertEquals(OperationalMode.ENABLED, response.properties().features().get("pfuvglsbjjca"));
        Assertions.assertEquals("bgdknnqv", response.extendedLocation().name());
        Assertions.assertEquals(ExtendedLocationType.CUSTOM_LOCATION, response.extendedLocation().type());
        Assertions.assertEquals(ManagedServiceIdentityType.NONE, response.identity().type());
    }
}
