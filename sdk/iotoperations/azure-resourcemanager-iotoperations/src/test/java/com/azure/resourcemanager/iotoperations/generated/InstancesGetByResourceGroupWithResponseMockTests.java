// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.iotoperations.IoTOperationsManager;
import com.azure.resourcemanager.iotoperations.models.ExtendedLocationType;
import com.azure.resourcemanager.iotoperations.models.InstanceResource;
import com.azure.resourcemanager.iotoperations.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.iotoperations.models.OperationalMode;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class InstancesGetByResourceGroupWithResponseMockTests {
    @Test
    public void testGetByResourceGroupWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"description\":\"doamciodhkha\",\"provisioningState\":\"Canceled\",\"version\":\"nz\",\"schemaRegistryNamespace\":\"onlwntoeg\",\"components\":{\"adr\":{\"state\":\"Enabled\"},\"akri\":{\"state\":\"Disabled\"},\"connectors\":{\"state\":\"Disabled\"},\"dataflows\":{\"state\":\"Enabled\"},\"schemaRegistry\":{\"state\":\"Enabled\"}}},\"extendedLocation\":{\"name\":\"mrv\",\"type\":\"CustomLocation\"},\"identity\":{\"principalId\":\"vbtqgsfraoyzk\",\"tenantId\":\"wtl\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"yznkby\":{\"principalId\":\"aw\",\"clientId\":\"ldsyuuximerqfob\"}}},\"location\":\"t\",\"tags\":{\"r\":\"hpagm\",\"kkze\":\"kdsnfdsdoakgtdl\",\"sdsttwvog\":\"dlhewp\",\"akufgmjz\":\"bbejdcngqqm\"},\"id\":\"wr\",\"name\":\"grtwae\",\"type\":\"u\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        IoTOperationsManager manager = IoTOperationsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        InstanceResource response = manager.instances()
            .getByResourceGroupWithResponse("qouicybxarzgsz", "foxciq", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("t", response.location());
        Assertions.assertEquals("hpagm", response.tags().get("r"));
        Assertions.assertEquals("doamciodhkha", response.properties().description());
        Assertions.assertEquals("onlwntoeg", response.properties().schemaRegistryNamespace());
        Assertions.assertEquals(OperationalMode.ENABLED, response.properties().components().adr().state());
        Assertions.assertEquals(OperationalMode.DISABLED, response.properties().components().akri().state());
        Assertions.assertEquals(OperationalMode.DISABLED, response.properties().components().connectors().state());
        Assertions.assertEquals(OperationalMode.ENABLED, response.properties().components().dataflows().state());
        Assertions.assertEquals(OperationalMode.ENABLED, response.properties().components().schemaRegistry().state());
        Assertions.assertEquals("mrv", response.extendedLocation().name());
        Assertions.assertEquals(ExtendedLocationType.CUSTOM_LOCATION, response.extendedLocation().type());
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, response.identity().type());
    }
}
