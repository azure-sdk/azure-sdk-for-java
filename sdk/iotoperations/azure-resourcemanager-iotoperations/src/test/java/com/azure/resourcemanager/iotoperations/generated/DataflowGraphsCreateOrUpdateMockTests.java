// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.iotoperations.IoTOperationsManager;
import com.azure.resourcemanager.iotoperations.models.DataflowGraphConnectionInput;
import com.azure.resourcemanager.iotoperations.models.DataflowGraphConnectionOutput;
import com.azure.resourcemanager.iotoperations.models.DataflowGraphNode;
import com.azure.resourcemanager.iotoperations.models.DataflowGraphNodeConnection;
import com.azure.resourcemanager.iotoperations.models.DataflowGraphProperties;
import com.azure.resourcemanager.iotoperations.models.DataflowGraphResource;
import com.azure.resourcemanager.iotoperations.models.DataflowGraphSchemaSettings;
import com.azure.resourcemanager.iotoperations.models.ExtendedLocation;
import com.azure.resourcemanager.iotoperations.models.ExtendedLocationType;
import com.azure.resourcemanager.iotoperations.models.OperationalMode;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class DataflowGraphsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"mode\":\"Disabled\",\"requestDiskPersistence\":\"Enabled\",\"nodes\":[{\"type\":\"DataflowGraphNode\",\"name\":\"oq\"},{\"type\":\"DataflowGraphNode\",\"name\":\"fdvruz\"},{\"type\":\"DataflowGraphNode\",\"name\":\"lzo\"}],\"nodeConnections\":[{\"from\":{\"name\":\"pctf\",\"schema\":{\"schemaRef\":\"dxotng\"}},\"to\":{\"name\":\"dgug\"}}],\"provisioningState\":\"Succeeded\"},\"extendedLocation\":{\"name\":\"hgrky\",\"type\":\"CustomLocation\"},\"id\":\"absnmfpp\",\"name\":\"ojeevy\",\"type\":\"yhsgz\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        IoTOperationsManager manager = IoTOperationsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        DataflowGraphResource response = manager.dataflowGraphs()
            .define("lalniex")
            .withExistingDataflowProfile("cwyhahno", "drkywuhps", "fuurutlwexx")
            .withProperties(new DataflowGraphProperties().withMode(OperationalMode.ENABLED)
                .withRequestDiskPersistence(OperationalMode.DISABLED)
                .withNodes(Arrays.asList(new DataflowGraphNode().withName("pqtybb"),
                    new DataflowGraphNode().withName("wpgdak")))
                .withNodeConnections(Arrays.asList(
                    new DataflowGraphNodeConnection()
                        .withFrom(new DataflowGraphConnectionInput().withName("zyvli")
                            .withSchema(new DataflowGraphSchemaSettings().withSchemaRef("nrkcxkj")))
                        .withTo(new DataflowGraphConnectionOutput().withName("bn")),
                    new DataflowGraphNodeConnection()
                        .withFrom(new DataflowGraphConnectionInput().withName("mysu")
                            .withSchema(new DataflowGraphSchemaSettings().withSchemaRef("wq")))
                        .withTo(new DataflowGraphConnectionOutput().withName("ntvlwijpsttexo")),
                    new DataflowGraphNodeConnection()
                        .withFrom(new DataflowGraphConnectionInput().withName("qpwcyyufmh")
                            .withSchema(new DataflowGraphSchemaSettings().withSchemaRef("nc")))
                        .withTo(new DataflowGraphConnectionOutput().withName("wmqs")),
                    new DataflowGraphNodeConnection()
                        .withFrom(new DataflowGraphConnectionInput().withName("kcdqzhlct")
                            .withSchema(new DataflowGraphSchemaSettings().withSchemaRef("unqndyfpchrqb")))
                        .withTo(new DataflowGraphConnectionOutput().withName("jjrcgegydc")))))
            .withExtendedLocation(
                new ExtendedLocation().withName("jumvqqolihrraio").withType(ExtendedLocationType.CUSTOM_LOCATION))
            .create();

        Assertions.assertEquals(OperationalMode.DISABLED, response.properties().mode());
        Assertions.assertEquals(OperationalMode.ENABLED, response.properties().requestDiskPersistence());
        Assertions.assertEquals("oq", response.properties().nodes().get(0).name());
        Assertions.assertEquals("pctf", response.properties().nodeConnections().get(0).from().name());
        Assertions.assertEquals("dxotng", response.properties().nodeConnections().get(0).from().schema().schemaRef());
        Assertions.assertEquals("dgug", response.properties().nodeConnections().get(0).to().name());
        Assertions.assertEquals("hgrky", response.extendedLocation().name());
        Assertions.assertEquals(ExtendedLocationType.CUSTOM_LOCATION, response.extendedLocation().type());
    }
}
