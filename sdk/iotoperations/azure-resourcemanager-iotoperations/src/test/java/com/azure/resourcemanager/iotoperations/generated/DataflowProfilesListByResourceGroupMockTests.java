// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.iotoperations.IoTOperationsManager;
import com.azure.resourcemanager.iotoperations.models.DataflowProfileResource;
import com.azure.resourcemanager.iotoperations.models.ExtendedLocationType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class DataflowProfilesListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"diagnostics\":{\"logs\":{\"opentelemetryExportConfig\":{\"otlpGrpcEndpoint\":\"moxoftpi\",\"intervalSeconds\":828485961,\"level\":\"czuhxacpqjlihh\"},\"level\":\"spskasdvlmfwdgz\"},\"metrics\":{\"opentelemetryExportConfig\":{\"otlpGrpcEndpoint\":\"ucvpamrs\",\"intervalSeconds\":856089944},\"prometheusPort\":2029618474}},\"instanceCount\":1675155115,\"provisioningState\":\"Provisioning\"},\"extendedLocation\":{\"name\":\"sjnhn\",\"type\":\"CustomLocation\"},\"id\":\"ifqjz\",\"name\":\"xmrhu\",\"type\":\"lw\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        IoTOperationsManager manager = IoTOperationsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<DataflowProfileResource> response = manager.dataflowProfiles()
            .listByResourceGroup("snrbgyefrymsgao", "fmwncotmrfh", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("moxoftpi",
            response.iterator()
                .next()
                .properties()
                .diagnostics()
                .logs()
                .opentelemetryExportConfig()
                .otlpGrpcEndpoint());
        Assertions.assertEquals(828485961,
            response.iterator().next().properties().diagnostics().logs().opentelemetryExportConfig().intervalSeconds());
        Assertions.assertEquals("czuhxacpqjlihh",
            response.iterator().next().properties().diagnostics().logs().opentelemetryExportConfig().level());
        Assertions.assertEquals("spskasdvlmfwdgz",
            response.iterator().next().properties().diagnostics().logs().level());
        Assertions.assertEquals("ucvpamrs",
            response.iterator()
                .next()
                .properties()
                .diagnostics()
                .metrics()
                .opentelemetryExportConfig()
                .otlpGrpcEndpoint());
        Assertions.assertEquals(856089944,
            response.iterator()
                .next()
                .properties()
                .diagnostics()
                .metrics()
                .opentelemetryExportConfig()
                .intervalSeconds());
        Assertions.assertEquals(2029618474,
            response.iterator().next().properties().diagnostics().metrics().prometheusPort());
        Assertions.assertEquals(1675155115, response.iterator().next().properties().instanceCount());
        Assertions.assertEquals("sjnhn", response.iterator().next().extendedLocation().name());
        Assertions.assertEquals(ExtendedLocationType.CUSTOM_LOCATION,
            response.iterator().next().extendedLocation().type());
    }
}
