// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.iotoperations.IoTOperationsManager;
import com.azure.resourcemanager.iotoperations.models.DataflowProfileProperties;
import com.azure.resourcemanager.iotoperations.models.DataflowProfileResource;
import com.azure.resourcemanager.iotoperations.models.DiagnosticsLogs;
import com.azure.resourcemanager.iotoperations.models.ExtendedLocation;
import com.azure.resourcemanager.iotoperations.models.ExtendedLocationType;
import com.azure.resourcemanager.iotoperations.models.Metrics;
import com.azure.resourcemanager.iotoperations.models.OpenTelemetryExportConfig;
import com.azure.resourcemanager.iotoperations.models.OpenTelemetryLogExportConfig;
import com.azure.resourcemanager.iotoperations.models.ProfileDiagnostics;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class DataflowProfilesCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"diagnostics\":{\"logs\":{\"opentelemetryExportConfig\":{\"otlpGrpcEndpoint\":\"khbejdznxc\",\"intervalSeconds\":2045200930,\"level\":\"hnjivo\"},\"level\":\"tnovqfzgemjdftul\"},\"metrics\":{\"opentelemetryExportConfig\":{\"otlpGrpcEndpoint\":\"duceamtmc\",\"intervalSeconds\":11700249},\"prometheusPort\":289279485}},\"instanceCount\":733943203,\"provisioningState\":\"Succeeded\"},\"extendedLocation\":{\"name\":\"wqiok\",\"type\":\"CustomLocation\"},\"id\":\"xmojmsvpkjp\",\"name\":\"vk\",\"type\":\"cfzq\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        IoTOperationsManager manager = IoTOperationsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        DataflowProfileResource response
            = manager.dataflowProfiles()
                .define("qg")
                .withExistingInstance("cesutrgjupauut", "woqhihe")
                .withExtendedLocation(
                    new ExtendedLocation().withName("tsf").withType(ExtendedLocationType.CUSTOM_LOCATION))
                .withProperties(
                    new DataflowProfileProperties()
                        .withDiagnostics(new ProfileDiagnostics()
                            .withLogs(new DiagnosticsLogs()
                                .withOpentelemetryExportConfig(
                                    new OpenTelemetryLogExportConfig().withOtlpGrpcEndpoint("qntcypsxjvfoimwk")
                                        .withIntervalSeconds(37072566)
                                        .withLevel("cizjxvydfceacvl"))
                                .withLevel("ygdyftumrtw"))
                            .withMetrics(new Metrics()
                                .withOpentelemetryExportConfig(
                                    new OpenTelemetryExportConfig().withOtlpGrpcEndpoint("jslb")
                                        .withIntervalSeconds(171945561))
                                .withPrometheusPort(1263082708)))
                        .withInstanceCount(1395476305))
                .create();

        Assertions.assertEquals("khbejdznxc",
            response.properties().diagnostics().logs().opentelemetryExportConfig().otlpGrpcEndpoint());
        Assertions.assertEquals(2045200930,
            response.properties().diagnostics().logs().opentelemetryExportConfig().intervalSeconds());
        Assertions.assertEquals("hnjivo",
            response.properties().diagnostics().logs().opentelemetryExportConfig().level());
        Assertions.assertEquals("tnovqfzgemjdftul", response.properties().diagnostics().logs().level());
        Assertions.assertEquals("duceamtmc",
            response.properties().diagnostics().metrics().opentelemetryExportConfig().otlpGrpcEndpoint());
        Assertions.assertEquals(11700249,
            response.properties().diagnostics().metrics().opentelemetryExportConfig().intervalSeconds());
        Assertions.assertEquals(289279485, response.properties().diagnostics().metrics().prometheusPort());
        Assertions.assertEquals(733943203, response.properties().instanceCount());
        Assertions.assertEquals("wqiok", response.extendedLocation().name());
        Assertions.assertEquals(ExtendedLocationType.CUSTOM_LOCATION, response.extendedLocation().type());
    }
}
