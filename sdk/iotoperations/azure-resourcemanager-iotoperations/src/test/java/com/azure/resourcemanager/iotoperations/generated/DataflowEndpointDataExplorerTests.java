// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.iotoperations.models.BatchingConfiguration;
import com.azure.resourcemanager.iotoperations.models.DataExplorerAuthMethod;
import com.azure.resourcemanager.iotoperations.models.DataflowEndpointAuthenticationSystemAssignedManagedIdentity;
import com.azure.resourcemanager.iotoperations.models.DataflowEndpointAuthenticationUserAssignedManagedIdentity;
import com.azure.resourcemanager.iotoperations.models.DataflowEndpointDataExplorer;
import com.azure.resourcemanager.iotoperations.models.DataflowEndpointDataExplorerAuthentication;
import org.junit.jupiter.api.Assertions;

public final class DataflowEndpointDataExplorerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DataflowEndpointDataExplorer model = BinaryData.fromString(
            "{\"authentication\":{\"method\":\"SystemAssignedManagedIdentity\",\"systemAssignedManagedIdentitySettings\":{\"audience\":\"sphyoulpjrvxa\"},\"userAssignedManagedIdentitySettings\":{\"clientId\":\"rvimjwosytxitcsk\",\"scope\":\"k\",\"tenantId\":\"qumiek\"}},\"database\":\"ez\",\"host\":\"ikh\",\"batching\":{\"latencySeconds\":1852856811,\"maxMessages\":202591470}}")
            .toObject(DataflowEndpointDataExplorer.class);
        Assertions.assertEquals(DataExplorerAuthMethod.SYSTEM_ASSIGNED_MANAGED_IDENTITY,
            model.authentication().method());
        Assertions.assertEquals("sphyoulpjrvxa",
            model.authentication().systemAssignedManagedIdentitySettings().audience());
        Assertions.assertEquals("rvimjwosytxitcsk",
            model.authentication().userAssignedManagedIdentitySettings().clientId());
        Assertions.assertEquals("k", model.authentication().userAssignedManagedIdentitySettings().scope());
        Assertions.assertEquals("qumiek", model.authentication().userAssignedManagedIdentitySettings().tenantId());
        Assertions.assertEquals("ez", model.database());
        Assertions.assertEquals("ikh", model.host());
        Assertions.assertEquals(1852856811, model.batching().latencySeconds());
        Assertions.assertEquals(202591470, model.batching().maxMessages());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DataflowEndpointDataExplorer model = new DataflowEndpointDataExplorer()
            .withAuthentication(new DataflowEndpointDataExplorerAuthentication()
                .withMethod(DataExplorerAuthMethod.SYSTEM_ASSIGNED_MANAGED_IDENTITY)
                .withSystemAssignedManagedIdentitySettings(
                    new DataflowEndpointAuthenticationSystemAssignedManagedIdentity().withAudience("sphyoulpjrvxa"))
                .withUserAssignedManagedIdentitySettings(
                    new DataflowEndpointAuthenticationUserAssignedManagedIdentity().withClientId("rvimjwosytxitcsk")
                        .withScope("k")
                        .withTenantId("qumiek")))
            .withDatabase("ez")
            .withHost("ikh")
            .withBatching(new BatchingConfiguration().withLatencySeconds(1852856811).withMaxMessages(202591470));
        model = BinaryData.fromObject(model).toObject(DataflowEndpointDataExplorer.class);
        Assertions.assertEquals(DataExplorerAuthMethod.SYSTEM_ASSIGNED_MANAGED_IDENTITY,
            model.authentication().method());
        Assertions.assertEquals("sphyoulpjrvxa",
            model.authentication().systemAssignedManagedIdentitySettings().audience());
        Assertions.assertEquals("rvimjwosytxitcsk",
            model.authentication().userAssignedManagedIdentitySettings().clientId());
        Assertions.assertEquals("k", model.authentication().userAssignedManagedIdentitySettings().scope());
        Assertions.assertEquals("qumiek", model.authentication().userAssignedManagedIdentitySettings().tenantId());
        Assertions.assertEquals("ez", model.database());
        Assertions.assertEquals("ikh", model.host());
        Assertions.assertEquals(1852856811, model.batching().latencySeconds());
        Assertions.assertEquals(202591470, model.batching().maxMessages());
    }
}
