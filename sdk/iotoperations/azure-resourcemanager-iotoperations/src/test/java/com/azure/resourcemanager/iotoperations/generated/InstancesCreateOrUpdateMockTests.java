// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.iotoperations.IoTOperationsManager;
import com.azure.resourcemanager.iotoperations.models.ExtendedLocation;
import com.azure.resourcemanager.iotoperations.models.ExtendedLocationType;
import com.azure.resourcemanager.iotoperations.models.InstanceProperties;
import com.azure.resourcemanager.iotoperations.models.InstanceResource;
import com.azure.resourcemanager.iotoperations.models.ManagedServiceIdentity;
import com.azure.resourcemanager.iotoperations.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.iotoperations.models.OperationalMode;
import com.azure.resourcemanager.iotoperations.models.SchemaRegistryRef;
import com.azure.resourcemanager.iotoperations.models.UserAssignedIdentity;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class InstancesCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"description\":\"spughftqsxhq\",\"provisioningState\":\"Succeeded\",\"version\":\"ukndxdigrjgu\",\"schemaRegistryRef\":{\"resourceId\":\"fzdm\"},\"features\":{\"fi\":\"Enabled\",\"hbotzingamvppho\":\"Disabled\",\"qzudphq\":\"Enabled\",\"vdkfwynwcvtbvk\":\"Enabled\"}},\"extendedLocation\":{\"name\":\"yhmtnvyqiat\",\"type\":\"CustomLocation\"},\"identity\":{\"principalId\":\"cnpwzcjaesgvvscc\",\"tenantId\":\"jguq\",\"type\":\"None\",\"userAssignedIdentities\":{\"svuo\":{\"clientId\":\"zlvdnkfxusemdw\",\"principalId\":\"muhapfcqdpsqxqv\"}}},\"location\":\"gc\",\"tags\":{\"erqwkyhkobopg\":\"vezrypqlmfeo\"},\"id\":\"edkowepbqpcrfk\",\"name\":\"wccsnjvcdwxlpqek\",\"type\":\"tn\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        IoTOperationsManager manager = IoTOperationsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        InstanceResource response = manager.instances()
            .define("jivfxzsjabib")
            .withRegion("rlazszrnw")
            .withExistingResourceGroup("ij")
            .withExtendedLocation(
                new ExtendedLocation().withName("eeyebi").withType(ExtendedLocationType.CUSTOM_LOCATION))
            .withTags(mapOf("lwbtlhf", "ndfpwpj", "dhszfjv", "sj", "qmqhldvriii", "bgofeljag"))
            .withProperties(new InstanceProperties().withDescription("tawfsdjpvkvp")
                .withSchemaRegistryRef(new SchemaRegistryRef().withResourceId("gkakmokzhjjklff"))
                .withFeatures(mapOf("wqlgzrf", OperationalMode.DISABLED)))
            .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.NONE)
                .withUserAssignedIdentities(mapOf("pdrhne", new UserAssignedIdentity(), "kpzi",
                    new UserAssignedIdentity(), "nokixrjqcirgz", new UserAssignedIdentity())))
            .create();

        Assertions.assertEquals("gc", response.location());
        Assertions.assertEquals("vezrypqlmfeo", response.tags().get("erqwkyhkobopg"));
        Assertions.assertEquals("spughftqsxhq", response.properties().description());
        Assertions.assertEquals("fzdm", response.properties().schemaRegistryRef().resourceId());
        Assertions.assertEquals(OperationalMode.ENABLED, response.properties().features().get("fi"));
        Assertions.assertEquals("yhmtnvyqiat", response.extendedLocation().name());
        Assertions.assertEquals(ExtendedLocationType.CUSTOM_LOCATION, response.extendedLocation().type());
        Assertions.assertEquals(ManagedServiceIdentityType.NONE, response.identity().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
