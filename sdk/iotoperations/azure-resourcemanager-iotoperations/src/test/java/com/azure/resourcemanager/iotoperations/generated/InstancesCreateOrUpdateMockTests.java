// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.iotoperations.IoTOperationsManager;
import com.azure.resourcemanager.iotoperations.models.AdrProperties;
import com.azure.resourcemanager.iotoperations.models.AkriInstanceProperties;
import com.azure.resourcemanager.iotoperations.models.Components;
import com.azure.resourcemanager.iotoperations.models.ConnectorInstanceProperties;
import com.azure.resourcemanager.iotoperations.models.DataflowInstanceProperties;
import com.azure.resourcemanager.iotoperations.models.ExtendedLocation;
import com.azure.resourcemanager.iotoperations.models.ExtendedLocationType;
import com.azure.resourcemanager.iotoperations.models.InstanceProperties;
import com.azure.resourcemanager.iotoperations.models.InstanceResource;
import com.azure.resourcemanager.iotoperations.models.ManagedServiceIdentity;
import com.azure.resourcemanager.iotoperations.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.iotoperations.models.OperationalMode;
import com.azure.resourcemanager.iotoperations.models.SchemaRegistryInstanceProperties;
import com.azure.resourcemanager.iotoperations.models.UserAssignedIdentity;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class InstancesCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"description\":\"hqamvdkf\",\"provisioningState\":\"Succeeded\",\"version\":\"cvtbv\",\"schemaRegistryNamespace\":\"ayhmtnvyqiatkz\",\"components\":{\"adr\":{\"state\":\"Disabled\"},\"akri\":{\"state\":\"Disabled\"},\"connectors\":{\"state\":\"Disabled\"},\"dataflows\":{\"state\":\"Enabled\"},\"schemaRegistry\":{\"state\":\"Disabled\"}}},\"extendedLocation\":{\"name\":\"gvvs\",\"type\":\"CustomLocation\"},\"identity\":{\"principalId\":\"jguq\",\"tenantId\":\"wygzlvdnkfxusem\",\"type\":\"SystemAssigned\",\"userAssignedIdentities\":{\"qvpsvuoymg\":{\"principalId\":\"uh\",\"clientId\":\"fcqdpsq\"},\"erqwkyhkobopg\":{\"principalId\":\"elvezrypq\",\"clientId\":\"feo\"},\"fkbw\":{\"principalId\":\"dkow\",\"clientId\":\"bqpc\"}}},\"location\":\"snjvcdwxlpqekftn\",\"tags\":{\"dhtmdvypgikd\":\"jsyingwfqatm\",\"hlhkjoqrvqqaatj\":\"szywkbirryu\"},\"id\":\"nrvgoupmfiibfgg\",\"name\":\"ioolvrwxkvtkkgll\",\"type\":\"wjygvjayvblmhvk\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        IoTOperationsManager manager = IoTOperationsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        InstanceResource response
            = manager.instances()
                .define("hneuyowqkd")
                .withRegion("pjgwwspug")
                .withExistingResourceGroup("smwutwbdsrezpd")
                .withExtendedLocation(
                    new ExtendedLocation().withName("vrmbzono").withType(ExtendedLocationType.CUSTOM_LOCATION))
                .withTags(mapOf("hqxujxukndxdi", "qs"))
                .withProperties(new InstanceProperties().withDescription("i")
                    .withSchemaRegistryNamespace("kpzi")
                    .withComponents(new Components().withAdr(new AdrProperties().withState(OperationalMode.ENABLED))
                        .withAkri(new AkriInstanceProperties().withState(OperationalMode.DISABLED))
                        .withConnectors(new ConnectorInstanceProperties().withState(OperationalMode.DISABLED))
                        .withDataflows(new DataflowInstanceProperties().withState(OperationalMode.ENABLED))
                        .withSchemaRegistry(new SchemaRegistryInstanceProperties().withState(OperationalMode.ENABLED))))
                .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.NONE)
                    .withUserAssignedIdentities(mapOf("jvfbgofelja", new UserAssignedIdentity(), "ueluqhhahhxvrhmz",
                        new UserAssignedIdentity())))
                .create();

        Assertions.assertEquals("snjvcdwxlpqekftn", response.location());
        Assertions.assertEquals("jsyingwfqatm", response.tags().get("dhtmdvypgikd"));
        Assertions.assertEquals("hqamvdkf", response.properties().description());
        Assertions.assertEquals("ayhmtnvyqiatkz", response.properties().schemaRegistryNamespace());
        Assertions.assertEquals(OperationalMode.DISABLED, response.properties().components().adr().state());
        Assertions.assertEquals(OperationalMode.DISABLED, response.properties().components().akri().state());
        Assertions.assertEquals(OperationalMode.DISABLED, response.properties().components().connectors().state());
        Assertions.assertEquals(OperationalMode.ENABLED, response.properties().components().dataflows().state());
        Assertions.assertEquals(OperationalMode.DISABLED, response.properties().components().schemaRegistry().state());
        Assertions.assertEquals("gvvs", response.extendedLocation().name());
        Assertions.assertEquals(ExtendedLocationType.CUSTOM_LOCATION, response.extendedLocation().type());
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED, response.identity().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
