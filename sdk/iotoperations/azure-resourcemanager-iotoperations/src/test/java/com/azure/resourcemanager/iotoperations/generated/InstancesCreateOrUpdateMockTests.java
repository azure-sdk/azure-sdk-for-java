// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.iotoperations.IoTOperationsManager;
import com.azure.resourcemanager.iotoperations.models.ExtendedLocation;
import com.azure.resourcemanager.iotoperations.models.ExtendedLocationType;
import com.azure.resourcemanager.iotoperations.models.InstanceProperties;
import com.azure.resourcemanager.iotoperations.models.InstanceResource;
import com.azure.resourcemanager.iotoperations.models.ManagedServiceIdentity;
import com.azure.resourcemanager.iotoperations.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.iotoperations.models.SchemaRegistryRef;
import com.azure.resourcemanager.iotoperations.models.UserAssignedIdentity;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class InstancesCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"description\":\"vfycxzb\",\"provisioningState\":\"Succeeded\",\"version\":\"wvrvmtg\",\"schemaRegistryRef\":{\"resourceId\":\"qp\"}},\"extendedLocation\":{\"name\":\"y\",\"type\":\"CustomLocation\"},\"identity\":{\"principalId\":\"on\",\"tenantId\":\"yhgfipnsx\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"jglikkxwslolb\":{\"principalId\":\"ekrrjr\",\"clientId\":\"fxtsgum\"},\"gplcrpwjxeznoigb\":{\"principalId\":\"vuzlm\",\"clientId\":\"elfk\"},\"gzxnfaazpxdtnk\":{\"principalId\":\"jwmwkpnbs\",\"clientId\":\"ejjoqkagfhsxtta\"},\"ixqtn\":{\"principalId\":\"kqjjlwuenvrkp\",\"clientId\":\"uaibrebqaaysj\"}}},\"location\":\"tezlwff\",\"tags\":{\"qqmtedltmmji\":\"kpj\",\"upkvipmdsc\":\"yeozphvwauyqncy\",\"totxhojujb\":\"xqupevzhf\",\"n\":\"pelmcuvhixbjxyf\"},\"id\":\"lrcoolsttpki\",\"name\":\"kkbnu\",\"type\":\"rywvtylbfpn\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        IoTOperationsManager manager = IoTOperationsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        InstanceResource response = manager.instances()
            .define("ngwfqatm")
            .withRegion("vvyhg")
            .withExistingResourceGroup("y")
            .withExtendedLocation(
                new ExtendedLocation().withName("qrvqq").withType(ExtendedLocationType.CUSTOM_LOCATION))
            .withTags(mapOf("uvwzfbnh", "byrqufeg", "bmhrixkwmyijejv", "mctlpdngitv", "ixexcc", "grhbpn"))
            .withProperties(new InstanceProperties().withDescription("tmdvypgikdgs")
                .withSchemaRegistryRef(new SchemaRegistryRef().withResourceId("kj")))
            .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.NONE)
                .withUserAssignedIdentities(mapOf("hvkzuh", new UserAssignedIdentity())))
            .create();

        Assertions.assertEquals("tezlwff", response.location());
        Assertions.assertEquals("kpj", response.tags().get("qqmtedltmmji"));
        Assertions.assertEquals("vfycxzb", response.properties().description());
        Assertions.assertEquals("qp", response.properties().schemaRegistryRef().resourceId());
        Assertions.assertEquals("y", response.extendedLocation().name());
        Assertions.assertEquals(ExtendedLocationType.CUSTOM_LOCATION, response.extendedLocation().type());
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, response.identity().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
