// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.iotoperations.IoTOperationsManager;
import com.azure.resourcemanager.iotoperations.models.AkriConnectorTemplateAioMetadata;
import com.azure.resourcemanager.iotoperations.models.AkriConnectorTemplateDeviceInboundEndpointConfigurationSchemaRefs;
import com.azure.resourcemanager.iotoperations.models.AkriConnectorTemplateDeviceInboundEndpointType;
import com.azure.resourcemanager.iotoperations.models.AkriConnectorTemplateDiagnostics;
import com.azure.resourcemanager.iotoperations.models.AkriConnectorTemplateProperties;
import com.azure.resourcemanager.iotoperations.models.AkriConnectorTemplateResource;
import com.azure.resourcemanager.iotoperations.models.AkriConnectorTemplateRuntimeConfiguration;
import com.azure.resourcemanager.iotoperations.models.AkriConnectorsDiagnosticsLogs;
import com.azure.resourcemanager.iotoperations.models.AkriConnectorsMqttAuthentication;
import com.azure.resourcemanager.iotoperations.models.AkriConnectorsMqttConnectionConfiguration;
import com.azure.resourcemanager.iotoperations.models.AkriConnectorsMqttProtocolType;
import com.azure.resourcemanager.iotoperations.models.ExtendedLocation;
import com.azure.resourcemanager.iotoperations.models.ExtendedLocationType;
import com.azure.resourcemanager.iotoperations.models.OperationalMode;
import com.azure.resourcemanager.iotoperations.models.TlsProperties;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class AkriConnectorTemplatesCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"aioMetadata\":{\"aioMinVersion\":\"nkbwvqv\",\"aioMaxVersion\":\"divqi\"},\"runtimeConfiguration\":{\"runtimeConfigurationType\":\"AkriConnectorTemplateRuntimeConfiguration\"},\"diagnostics\":{\"logs\":{\"level\":\"wtswbzuwfmdur\"}},\"deviceInboundEndpointTypes\":[{\"endpointType\":\"egizv\",\"version\":\"jfelisdjubggbqig\",\"configurationSchemaRefs\":{\"defaultDatasetConfigSchemaRef\":\"bsazgakg\",\"defaultEventsConfigSchemaRef\":\"yrcmjdmspofap\",\"defaultProcessControlConfigSchemaRef\":\"hryl\",\"defaultStreamsConfigSchemaRef\":\"ofrzgb\",\"additionalConfigSchemaRef\":\"edm\"}},{\"endpointType\":\"tkvnlvxbcuiiznkt\",\"version\":\"f\",\"configurationSchemaRefs\":{\"defaultDatasetConfigSchemaRef\":\"nv\",\"defaultEventsConfigSchemaRef\":\"ibmikostbzb\",\"defaultProcessControlConfigSchemaRef\":\"wbuqn\",\"defaultStreamsConfigSchemaRef\":\"phzfylsgcrp\",\"additionalConfigSchemaRef\":\"cunezzcezelfw\"}},{\"endpointType\":\"fwlwxjwetnps\",\"version\":\"hclafzvaylptrs\",\"configurationSchemaRefs\":{\"defaultDatasetConfigSchemaRef\":\"ztcmwq\",\"defaultEventsConfigSchemaRef\":\"hcxwaxfewzjk\",\"defaultProcessControlConfigSchemaRef\":\"xfdeqvhpsyl\",\"defaultStreamsConfigSchemaRef\":\"shk\",\"additionalConfigSchemaRef\":\"f\"}}],\"mqttConnectionConfiguration\":{\"authentication\":{\"method\":\"AkriConnectorsMqttAuthentication\"},\"host\":\"zjrgyww\",\"protocol\":\"Mqtt\",\"keepAliveSeconds\":1374457315,\"maxInflightMessages\":1849178398,\"sessionExpirySeconds\":835008707,\"tls\":{\"mode\":\"Disabled\",\"trustedCaCertificateConfigMapRef\":\"cg\"}}},\"extendedLocation\":{\"name\":\"o\",\"type\":\"CustomLocation\"},\"id\":\"taqutdewem\",\"name\":\"swvr\",\"type\":\"unzzjgehk\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        IoTOperationsManager manager = IoTOperationsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        AkriConnectorTemplateResource response = manager.akriConnectorTemplates()
            .define("ri")
            .withExistingInstance("dsxwaab", "mifrygznmma")
            .withProperties(new AkriConnectorTemplateProperties()
                .withAioMetadata(new AkriConnectorTemplateAioMetadata().withAioMinVersion("opxlhslnelxieixy")
                    .withAioMaxVersion("lxecwcrojphslh"))
                .withRuntimeConfiguration(new AkriConnectorTemplateRuntimeConfiguration())
                .withDiagnostics(new AkriConnectorTemplateDiagnostics()
                    .withLogs(new AkriConnectorsDiagnosticsLogs().withLevel("jutifdwfmvigorqj")))
                .withDeviceInboundEndpointTypes(Arrays.asList(new AkriConnectorTemplateDeviceInboundEndpointType()
                    .withEndpointType("tzh")
                    .withVersion("aglkafhon")
                    .withConfigurationSchemaRefs(new AkriConnectorTemplateDeviceInboundEndpointConfigurationSchemaRefs()
                        .withDefaultDatasetConfigSchemaRef("jeick")
                        .withDefaultEventsConfigSchemaRef("vcpopmxe")
                        .withDefaultProcessControlConfigSchemaRef("wcltyjede")
                        .withDefaultStreamsConfigSchemaRef("mlfmkqs")
                        .withAdditionalConfigSchemaRef("zuawxtzxpuamwa")),
                    new AkriConnectorTemplateDeviceInboundEndpointType().withEndpointType("zxrvxcus")
                        .withVersion("sphaivmxyasflvg")
                        .withConfigurationSchemaRefs(
                            new AkriConnectorTemplateDeviceInboundEndpointConfigurationSchemaRefs()
                                .withDefaultDatasetConfigSchemaRef("wywa")
                                .withDefaultEventsConfigSchemaRef("ihknsmjbl")
                                .withDefaultProcessControlConfigSchemaRef("jhlnymzotqyryu")
                                .withDefaultStreamsConfigSchemaRef("bmqqvxmvw")
                                .withAdditionalConfigSchemaRef("tayx"))))
                .withMqttConnectionConfiguration(new AkriConnectorsMqttConnectionConfiguration()
                    .withAuthentication(new AkriConnectorsMqttAuthentication())
                    .withHost("peujlzqn")
                    .withProtocol(AkriConnectorsMqttProtocolType.MQTT)
                    .withKeepAliveSeconds(489682268)
                    .withMaxInflightMessages(1417564823)
                    .withSessionExpirySeconds(1936009218)
                    .withTls(new TlsProperties().withMode(OperationalMode.DISABLED)
                        .withTrustedCaCertificateConfigMapRef("sxgnx"))))
            .withExtendedLocation(
                new ExtendedLocation().withName("qonmpqoxwdof").withType(ExtendedLocationType.CUSTOM_LOCATION))
            .create();

        Assertions.assertEquals("nkbwvqv", response.properties().aioMetadata().aioMinVersion());
        Assertions.assertEquals("divqi", response.properties().aioMetadata().aioMaxVersion());
        Assertions.assertEquals("wtswbzuwfmdur", response.properties().diagnostics().logs().level());
        Assertions.assertEquals("egizv", response.properties().deviceInboundEndpointTypes().get(0).endpointType());
        Assertions.assertEquals("jfelisdjubggbqig",
            response.properties().deviceInboundEndpointTypes().get(0).version());
        Assertions.assertEquals("bsazgakg",
            response.properties()
                .deviceInboundEndpointTypes()
                .get(0)
                .configurationSchemaRefs()
                .defaultDatasetConfigSchemaRef());
        Assertions.assertEquals("yrcmjdmspofap",
            response.properties()
                .deviceInboundEndpointTypes()
                .get(0)
                .configurationSchemaRefs()
                .defaultEventsConfigSchemaRef());
        Assertions.assertEquals("hryl",
            response.properties()
                .deviceInboundEndpointTypes()
                .get(0)
                .configurationSchemaRefs()
                .defaultProcessControlConfigSchemaRef());
        Assertions.assertEquals("ofrzgb",
            response.properties()
                .deviceInboundEndpointTypes()
                .get(0)
                .configurationSchemaRefs()
                .defaultStreamsConfigSchemaRef());
        Assertions.assertEquals("edm",
            response.properties()
                .deviceInboundEndpointTypes()
                .get(0)
                .configurationSchemaRefs()
                .additionalConfigSchemaRef());
        Assertions.assertEquals("zjrgyww", response.properties().mqttConnectionConfiguration().host());
        Assertions.assertEquals(AkriConnectorsMqttProtocolType.MQTT,
            response.properties().mqttConnectionConfiguration().protocol());
        Assertions.assertEquals(1374457315, response.properties().mqttConnectionConfiguration().keepAliveSeconds());
        Assertions.assertEquals(1849178398, response.properties().mqttConnectionConfiguration().maxInflightMessages());
        Assertions.assertEquals(835008707, response.properties().mqttConnectionConfiguration().sessionExpirySeconds());
        Assertions.assertEquals(OperationalMode.DISABLED,
            response.properties().mqttConnectionConfiguration().tls().mode());
        Assertions.assertEquals("cg",
            response.properties().mqttConnectionConfiguration().tls().trustedCaCertificateConfigMapRef());
        Assertions.assertEquals("o", response.extendedLocation().name());
        Assertions.assertEquals(ExtendedLocationType.CUSTOM_LOCATION, response.extendedLocation().type());
    }
}
