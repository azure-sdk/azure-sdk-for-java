// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.iotoperations.models.BatchingConfiguration;
import com.azure.resourcemanager.iotoperations.models.DataflowEndpointAuthenticationSystemAssignedManagedIdentity;
import com.azure.resourcemanager.iotoperations.models.DataflowEndpointAuthenticationUserAssignedManagedIdentity;
import com.azure.resourcemanager.iotoperations.models.DataflowEndpointFabricOneLakeAuthentication;
import com.azure.resourcemanager.iotoperations.models.DataflowEndpointFabricOneLakeNames;
import com.azure.resourcemanager.iotoperations.models.DataflowEndpointFabricPathType;
import com.azure.resourcemanager.iotoperations.models.FabricOneLakeAuthMethod;
import com.azure.resourcemanager.iotoperations.models.FabricOneLakeEndpoint;
import com.azure.resourcemanager.iotoperations.models.FabricOneLakeSettings;
import org.junit.jupiter.api.Assertions;

public final class FabricOneLakeEndpointTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        FabricOneLakeEndpoint model = BinaryData.fromString(
            "{\"endpointType\":\"FabricOneLake\",\"fabricOneLakeSettings\":{\"authentication\":{\"method\":\"SystemAssignedManagedIdentity\",\"systemAssignedManagedIdentitySettings\":{\"audience\":\"niodkooeb\"},\"userAssignedManagedIdentitySettings\":{\"clientId\":\"ujhemmsbvdkcrodt\",\"scope\":\"nfwjlfltkacjvefk\",\"tenantId\":\"lfoakg\"}},\"names\":{\"lakehouseName\":\"kfpagao\",\"workspaceName\":\"pulpqblylsyxk\"},\"oneLakePathType\":\"Tables\",\"host\":\"nsj\",\"batching\":{\"latencySeconds\":1312829950,\"maxMessages\":853584621}},\"provisioningState\":\"Provisioning\"}")
            .toObject(FabricOneLakeEndpoint.class);
        Assertions.assertEquals(FabricOneLakeAuthMethod.SYSTEM_ASSIGNED_MANAGED_IDENTITY,
            model.fabricOneLakeSettings().authentication().method());
        Assertions.assertEquals("niodkooeb",
            model.fabricOneLakeSettings().authentication().systemAssignedManagedIdentitySettings().audience());
        Assertions.assertEquals("ujhemmsbvdkcrodt",
            model.fabricOneLakeSettings().authentication().userAssignedManagedIdentitySettings().clientId());
        Assertions.assertEquals("nfwjlfltkacjvefk",
            model.fabricOneLakeSettings().authentication().userAssignedManagedIdentitySettings().scope());
        Assertions.assertEquals("lfoakg",
            model.fabricOneLakeSettings().authentication().userAssignedManagedIdentitySettings().tenantId());
        Assertions.assertEquals("kfpagao", model.fabricOneLakeSettings().names().lakehouseName());
        Assertions.assertEquals("pulpqblylsyxk", model.fabricOneLakeSettings().names().workspaceName());
        Assertions.assertEquals(DataflowEndpointFabricPathType.TABLES, model.fabricOneLakeSettings().oneLakePathType());
        Assertions.assertEquals("nsj", model.fabricOneLakeSettings().host());
        Assertions.assertEquals(1312829950, model.fabricOneLakeSettings().batching().latencySeconds());
        Assertions.assertEquals(853584621, model.fabricOneLakeSettings().batching().maxMessages());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        FabricOneLakeEndpoint model = new FabricOneLakeEndpoint().withFabricOneLakeSettings(new FabricOneLakeSettings()
            .withAuthentication(new DataflowEndpointFabricOneLakeAuthentication()
                .withMethod(FabricOneLakeAuthMethod.SYSTEM_ASSIGNED_MANAGED_IDENTITY)
                .withSystemAssignedManagedIdentitySettings(
                    new DataflowEndpointAuthenticationSystemAssignedManagedIdentity().withAudience("niodkooeb"))
                .withUserAssignedManagedIdentitySettings(
                    new DataflowEndpointAuthenticationUserAssignedManagedIdentity().withClientId("ujhemmsbvdkcrodt")
                        .withScope("nfwjlfltkacjvefk")
                        .withTenantId("lfoakg")))
            .withNames(new DataflowEndpointFabricOneLakeNames().withLakehouseName("kfpagao")
                .withWorkspaceName("pulpqblylsyxk"))
            .withOneLakePathType(DataflowEndpointFabricPathType.TABLES)
            .withHost("nsj")
            .withBatching(new BatchingConfiguration().withLatencySeconds(1312829950).withMaxMessages(853584621)));
        model = BinaryData.fromObject(model).toObject(FabricOneLakeEndpoint.class);
        Assertions.assertEquals(FabricOneLakeAuthMethod.SYSTEM_ASSIGNED_MANAGED_IDENTITY,
            model.fabricOneLakeSettings().authentication().method());
        Assertions.assertEquals("niodkooeb",
            model.fabricOneLakeSettings().authentication().systemAssignedManagedIdentitySettings().audience());
        Assertions.assertEquals("ujhemmsbvdkcrodt",
            model.fabricOneLakeSettings().authentication().userAssignedManagedIdentitySettings().clientId());
        Assertions.assertEquals("nfwjlfltkacjvefk",
            model.fabricOneLakeSettings().authentication().userAssignedManagedIdentitySettings().scope());
        Assertions.assertEquals("lfoakg",
            model.fabricOneLakeSettings().authentication().userAssignedManagedIdentitySettings().tenantId());
        Assertions.assertEquals("kfpagao", model.fabricOneLakeSettings().names().lakehouseName());
        Assertions.assertEquals("pulpqblylsyxk", model.fabricOneLakeSettings().names().workspaceName());
        Assertions.assertEquals(DataflowEndpointFabricPathType.TABLES, model.fabricOneLakeSettings().oneLakePathType());
        Assertions.assertEquals("nsj", model.fabricOneLakeSettings().host());
        Assertions.assertEquals(1312829950, model.fabricOneLakeSettings().batching().latencySeconds());
        Assertions.assertEquals(853584621, model.fabricOneLakeSettings().batching().maxMessages());
    }
}
