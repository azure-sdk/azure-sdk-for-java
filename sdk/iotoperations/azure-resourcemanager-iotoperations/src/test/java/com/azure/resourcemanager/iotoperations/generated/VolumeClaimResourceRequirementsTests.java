// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.iotoperations.models.VolumeClaimResourceRequirements;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class VolumeClaimResourceRequirementsTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VolumeClaimResourceRequirements model = BinaryData.fromString(
            "{\"limits\":{\"gm\":\"rkgqhcjrefo\",\"yyvxyqjpkcattpn\":\"qsl\",\"v\":\"jcrcczsqpjhvmda\",\"q\":\"ysou\"},\"requests\":{\"pfhyhl\":\"noae\"}}")
            .toObject(VolumeClaimResourceRequirements.class);
        Assertions.assertEquals("rkgqhcjrefo", model.limits().get("gm"));
        Assertions.assertEquals("noae", model.requests().get("pfhyhl"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VolumeClaimResourceRequirements model = new VolumeClaimResourceRequirements()
            .withLimits(mapOf("gm", "rkgqhcjrefo", "yyvxyqjpkcattpn", "qsl", "v", "jcrcczsqpjhvmda", "q", "ysou"))
            .withRequests(mapOf("pfhyhl", "noae"));
        model = BinaryData.fromObject(model).toObject(VolumeClaimResourceRequirements.class);
        Assertions.assertEquals("rkgqhcjrefo", model.limits().get("gm"));
        Assertions.assertEquals("noae", model.requests().get("pfhyhl"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
