// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.iotoperations.IoTOperationsManager;
import com.azure.resourcemanager.iotoperations.models.AkriConnectorTemplateResource;
import com.azure.resourcemanager.iotoperations.models.AkriConnectorsMqttProtocolType;
import com.azure.resourcemanager.iotoperations.models.ExtendedLocationType;
import com.azure.resourcemanager.iotoperations.models.OperationalMode;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class AkriConnectorTemplatesGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Canceled\",\"aioMetadata\":{\"aioMinVersion\":\"miybnn\",\"aioMaxVersion\":\"tgnljhnmgixhcmav\"},\"runtimeConfiguration\":{\"runtimeConfigurationType\":\"AkriConnectorTemplateRuntimeConfiguration\"},\"diagnostics\":{\"logs\":{\"level\":\"oudorhcgyyp\"}},\"deviceInboundEndpointTypes\":[{\"endpointType\":\"twypundmbxh\",\"version\":\"gcmjkavl\",\"configurationSchemaRefs\":{\"defaultDatasetConfigSchemaRef\":\"bmftpmdt\",\"defaultEventsConfigSchemaRef\":\"jltfvnzcyjtotpv\",\"defaultProcessControlConfigSchemaRef\":\"vpbdbzqgq\",\"defaultStreamsConfigSchemaRef\":\"hedsvqwthmkyib\",\"additionalConfigSchemaRef\":\"sihsgqcwdhohsd\"}},{\"endpointType\":\"mcdzsufcohdxbz\",\"version\":\"mcmuapc\",\"configurationSchemaRefs\":{\"defaultDatasetConfigSchemaRef\":\"bevwqqxeys\",\"defaultEventsConfigSchemaRef\":\"nqzi\",\"defaultProcessControlConfigSchemaRef\":\"fkbg\",\"defaultStreamsConfigSchemaRef\":\"bowxe\",\"additionalConfigSchemaRef\":\"clj\"}},{\"endpointType\":\"ygvkzqkjj\",\"version\":\"okbzef\",\"configurationSchemaRefs\":{\"defaultDatasetConfigSchemaRef\":\"xcczurtl\",\"defaultEventsConfigSchemaRef\":\"pqxbkwvzgnzvdf\",\"defaultProcessControlConfigSchemaRef\":\"d\",\"defaultStreamsConfigSchemaRef\":\"zmqpnodawopqhewj\",\"additionalConfigSchemaRef\":\"mcgsbostzelnd\"}}],\"mqttConnectionConfiguration\":{\"authentication\":{\"method\":\"AkriConnectorsMqttAuthentication\"},\"host\":\"tmzlbiojlv\",\"protocol\":\"Mqtt\",\"keepAliveSeconds\":1426924958,\"maxInflightMessages\":1171808306,\"sessionExpirySeconds\":1309559741,\"tls\":{\"mode\":\"Disabled\",\"trustedCaCertificateConfigMapRef\":\"yyurmochpprprsnm\"}}},\"extendedLocation\":{\"name\":\"ayzejnhlbkpbz\",\"type\":\"CustomLocation\"},\"id\":\"iljhahz\",\"name\":\"echndbnwieholew\",\"type\":\"wiuub\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        IoTOperationsManager manager = IoTOperationsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        AkriConnectorTemplateResource response = manager.akriConnectorTemplates()
            .getWithResponse("iypoqeyhlqhykprl", "yznuciqd", "mexiitdfuxt", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("miybnn", response.properties().aioMetadata().aioMinVersion());
        Assertions.assertEquals("tgnljhnmgixhcmav", response.properties().aioMetadata().aioMaxVersion());
        Assertions.assertEquals("oudorhcgyyp", response.properties().diagnostics().logs().level());
        Assertions.assertEquals("twypundmbxh",
            response.properties().deviceInboundEndpointTypes().get(0).endpointType());
        Assertions.assertEquals("gcmjkavl", response.properties().deviceInboundEndpointTypes().get(0).version());
        Assertions.assertEquals("bmftpmdt",
            response.properties()
                .deviceInboundEndpointTypes()
                .get(0)
                .configurationSchemaRefs()
                .defaultDatasetConfigSchemaRef());
        Assertions.assertEquals("jltfvnzcyjtotpv",
            response.properties()
                .deviceInboundEndpointTypes()
                .get(0)
                .configurationSchemaRefs()
                .defaultEventsConfigSchemaRef());
        Assertions.assertEquals("vpbdbzqgq",
            response.properties()
                .deviceInboundEndpointTypes()
                .get(0)
                .configurationSchemaRefs()
                .defaultProcessControlConfigSchemaRef());
        Assertions.assertEquals("hedsvqwthmkyib",
            response.properties()
                .deviceInboundEndpointTypes()
                .get(0)
                .configurationSchemaRefs()
                .defaultStreamsConfigSchemaRef());
        Assertions.assertEquals("sihsgqcwdhohsd",
            response.properties()
                .deviceInboundEndpointTypes()
                .get(0)
                .configurationSchemaRefs()
                .additionalConfigSchemaRef());
        Assertions.assertEquals("tmzlbiojlv", response.properties().mqttConnectionConfiguration().host());
        Assertions.assertEquals(AkriConnectorsMqttProtocolType.MQTT,
            response.properties().mqttConnectionConfiguration().protocol());
        Assertions.assertEquals(1426924958, response.properties().mqttConnectionConfiguration().keepAliveSeconds());
        Assertions.assertEquals(1171808306, response.properties().mqttConnectionConfiguration().maxInflightMessages());
        Assertions.assertEquals(1309559741, response.properties().mqttConnectionConfiguration().sessionExpirySeconds());
        Assertions.assertEquals(OperationalMode.DISABLED,
            response.properties().mqttConnectionConfiguration().tls().mode());
        Assertions.assertEquals("yyurmochpprprsnm",
            response.properties().mqttConnectionConfiguration().tls().trustedCaCertificateConfigMapRef());
        Assertions.assertEquals("ayzejnhlbkpbz", response.extendedLocation().name());
        Assertions.assertEquals(ExtendedLocationType.CUSTOM_LOCATION, response.extendedLocation().type());
    }
}
