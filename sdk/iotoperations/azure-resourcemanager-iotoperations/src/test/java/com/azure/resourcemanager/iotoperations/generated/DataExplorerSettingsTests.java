// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.iotoperations.models.BatchingConfiguration;
import com.azure.resourcemanager.iotoperations.models.DataExplorerAuthMethod;
import com.azure.resourcemanager.iotoperations.models.DataExplorerSettings;
import com.azure.resourcemanager.iotoperations.models.DataflowEndpointAuthenticationSystemAssignedManagedIdentity;
import com.azure.resourcemanager.iotoperations.models.DataflowEndpointAuthenticationUserAssignedManagedIdentity;
import com.azure.resourcemanager.iotoperations.models.DataflowEndpointDataExplorerAuthentication;
import org.junit.jupiter.api.Assertions;

public final class DataExplorerSettingsTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DataExplorerSettings model = BinaryData.fromString(
            "{\"authentication\":{\"method\":\"UserAssignedManagedIdentity\",\"systemAssignedManagedIdentitySettings\":{\"audience\":\"jsjqbjhhyx\"},\"userAssignedManagedIdentitySettings\":{\"clientId\":\"wlycoduhpkxkg\",\"scope\":\"areqna\",\"tenantId\":\"xqugjhkycubedd\"}},\"database\":\"ssofwqmzqa\",\"host\":\"krmnjijpxacqqud\",\"batching\":{\"latencySeconds\":1238431927,\"maxMessages\":891607282}}")
            .toObject(DataExplorerSettings.class);
        Assertions.assertEquals(DataExplorerAuthMethod.USER_ASSIGNED_MANAGED_IDENTITY, model.authentication().method());
        Assertions.assertEquals("jsjqbjhhyx",
            model.authentication().systemAssignedManagedIdentitySettings().audience());
        Assertions.assertEquals("wlycoduhpkxkg",
            model.authentication().userAssignedManagedIdentitySettings().clientId());
        Assertions.assertEquals("areqna", model.authentication().userAssignedManagedIdentitySettings().scope());
        Assertions.assertEquals("xqugjhkycubedd",
            model.authentication().userAssignedManagedIdentitySettings().tenantId());
        Assertions.assertEquals("ssofwqmzqa", model.database());
        Assertions.assertEquals("krmnjijpxacqqud", model.host());
        Assertions.assertEquals(1238431927, model.batching().latencySeconds());
        Assertions.assertEquals(891607282, model.batching().maxMessages());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DataExplorerSettings model = new DataExplorerSettings()
            .withAuthentication(new DataflowEndpointDataExplorerAuthentication()
                .withMethod(DataExplorerAuthMethod.USER_ASSIGNED_MANAGED_IDENTITY)
                .withSystemAssignedManagedIdentitySettings(
                    new DataflowEndpointAuthenticationSystemAssignedManagedIdentity().withAudience("jsjqbjhhyx"))
                .withUserAssignedManagedIdentitySettings(
                    new DataflowEndpointAuthenticationUserAssignedManagedIdentity().withClientId("wlycoduhpkxkg")
                        .withScope("areqna")
                        .withTenantId("xqugjhkycubedd")))
            .withDatabase("ssofwqmzqa")
            .withHost("krmnjijpxacqqud")
            .withBatching(new BatchingConfiguration().withLatencySeconds(1238431927).withMaxMessages(891607282));
        model = BinaryData.fromObject(model).toObject(DataExplorerSettings.class);
        Assertions.assertEquals(DataExplorerAuthMethod.USER_ASSIGNED_MANAGED_IDENTITY, model.authentication().method());
        Assertions.assertEquals("jsjqbjhhyx",
            model.authentication().systemAssignedManagedIdentitySettings().audience());
        Assertions.assertEquals("wlycoduhpkxkg",
            model.authentication().userAssignedManagedIdentitySettings().clientId());
        Assertions.assertEquals("areqna", model.authentication().userAssignedManagedIdentitySettings().scope());
        Assertions.assertEquals("xqugjhkycubedd",
            model.authentication().userAssignedManagedIdentitySettings().tenantId());
        Assertions.assertEquals("ssofwqmzqa", model.database());
        Assertions.assertEquals("krmnjijpxacqqud", model.host());
        Assertions.assertEquals(1238431927, model.batching().latencySeconds());
        Assertions.assertEquals(891607282, model.batching().maxMessages());
    }
}
