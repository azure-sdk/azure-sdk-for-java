// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.iotoperations.IoTOperationsManager;
import com.azure.resourcemanager.iotoperations.models.DataflowProfileResource;
import com.azure.resourcemanager.iotoperations.models.ExtendedLocationType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class DataflowProfilesGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"diagnostics\":{\"logs\":{\"level\":\"x\"},\"metrics\":{\"prometheusPort\":1532025762}},\"instanceCount\":338199100,\"provisioningState\":\"Provisioning\"},\"extendedLocation\":{\"name\":\"pyklyhpluodpvru\",\"type\":\"CustomLocation\"},\"id\":\"gzibthostgktstv\",\"name\":\"xeclzedqbcvhzlhp\",\"type\":\"odqkdlwwqfb\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        IoTOperationsManager manager = IoTOperationsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        DataflowProfileResource response = manager.dataflowProfiles()
            .getWithResponse("gtczheydb", "dshmkxmaehvbbx", "ripltf", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("x", response.properties().diagnostics().logs().level());
        Assertions.assertEquals(1532025762, response.properties().diagnostics().metrics().prometheusPort());
        Assertions.assertEquals(338199100, response.properties().instanceCount());
        Assertions.assertEquals("pyklyhpluodpvru", response.extendedLocation().name());
        Assertions.assertEquals(ExtendedLocationType.CUSTOM_LOCATION, response.extendedLocation().type());
    }
}
