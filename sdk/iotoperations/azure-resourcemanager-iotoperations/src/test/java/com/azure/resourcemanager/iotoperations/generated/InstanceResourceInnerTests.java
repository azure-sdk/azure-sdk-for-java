// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.iotoperations.fluent.models.InstanceResourceInner;
import com.azure.resourcemanager.iotoperations.models.AdrProperties;
import com.azure.resourcemanager.iotoperations.models.AkriInstanceProperties;
import com.azure.resourcemanager.iotoperations.models.Components;
import com.azure.resourcemanager.iotoperations.models.ConnectorInstanceProperties;
import com.azure.resourcemanager.iotoperations.models.DataflowInstanceProperties;
import com.azure.resourcemanager.iotoperations.models.ExtendedLocation;
import com.azure.resourcemanager.iotoperations.models.ExtendedLocationType;
import com.azure.resourcemanager.iotoperations.models.InstanceProperties;
import com.azure.resourcemanager.iotoperations.models.ManagedServiceIdentity;
import com.azure.resourcemanager.iotoperations.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.iotoperations.models.OperationalMode;
import com.azure.resourcemanager.iotoperations.models.SchemaRegistryInstanceProperties;
import com.azure.resourcemanager.iotoperations.models.UserAssignedIdentity;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class InstanceResourceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        InstanceResourceInner model = BinaryData.fromString(
            "{\"properties\":{\"description\":\"jbpzvgnwzsymg\",\"provisioningState\":\"Accepted\",\"version\":\"cyzkohdbihanuf\",\"schemaRegistryNamespace\":\"fcbjysagithxqha\",\"components\":{\"adr\":{\"state\":\"Disabled\"},\"akri\":{\"state\":\"Disabled\"},\"connectors\":{\"state\":\"Enabled\"},\"dataflows\":{\"state\":\"Enabled\"},\"schemaRegistry\":{\"state\":\"Enabled\"}}},\"extendedLocation\":{\"name\":\"scnpqxuhivy\",\"type\":\"CustomLocation\"},\"identity\":{\"principalId\":\"b\",\"tenantId\":\"rkxvdum\",\"type\":\"SystemAssigned\",\"userAssignedIdentities\":{\"yejhk\":{\"principalId\":\"wvukx\",\"clientId\":\"udccsnhsjc\"},\"jnchgej\":{\"principalId\":\"htnapczwlokjyem\",\"clientId\":\"vnipjox\"},\"wyahuxinpmqnja\":{\"principalId\":\"odmailzyd\",\"clientId\":\"o\"}}},\"location\":\"ixjsprozvcputeg\",\"tags\":{\"u\":\"mfdatscmdvpj\",\"kjozkrwfnd\":\"suuv\",\"vwryoqpso\":\"odjpslwejd\",\"yffdfdos\":\"cctazakljlahbc\"},\"id\":\"gexpaojakhmsbz\",\"name\":\"hcrzevd\",\"type\":\"hlxaolthqtr\"}")
            .toObject(InstanceResourceInner.class);
        Assertions.assertEquals("ixjsprozvcputeg", model.location());
        Assertions.assertEquals("mfdatscmdvpj", model.tags().get("u"));
        Assertions.assertEquals("jbpzvgnwzsymg", model.properties().description());
        Assertions.assertEquals("fcbjysagithxqha", model.properties().schemaRegistryNamespace());
        Assertions.assertEquals(OperationalMode.DISABLED, model.properties().components().adr().state());
        Assertions.assertEquals(OperationalMode.DISABLED, model.properties().components().akri().state());
        Assertions.assertEquals(OperationalMode.ENABLED, model.properties().components().connectors().state());
        Assertions.assertEquals(OperationalMode.ENABLED, model.properties().components().dataflows().state());
        Assertions.assertEquals(OperationalMode.ENABLED, model.properties().components().schemaRegistry().state());
        Assertions.assertEquals("scnpqxuhivy", model.extendedLocation().name());
        Assertions.assertEquals(ExtendedLocationType.CUSTOM_LOCATION, model.extendedLocation().type());
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED, model.identity().type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        InstanceResourceInner model = new InstanceResourceInner().withLocation("ixjsprozvcputeg")
            .withTags(mapOf("u", "mfdatscmdvpj", "kjozkrwfnd", "suuv", "vwryoqpso", "odjpslwejd", "yffdfdos",
                "cctazakljlahbc"))
            .withProperties(new InstanceProperties().withDescription("jbpzvgnwzsymg")
                .withSchemaRegistryNamespace("fcbjysagithxqha")
                .withComponents(new Components().withAdr(new AdrProperties().withState(OperationalMode.DISABLED))
                    .withAkri(new AkriInstanceProperties().withState(OperationalMode.DISABLED))
                    .withConnectors(new ConnectorInstanceProperties().withState(OperationalMode.ENABLED))
                    .withDataflows(new DataflowInstanceProperties().withState(OperationalMode.ENABLED))
                    .withSchemaRegistry(new SchemaRegistryInstanceProperties().withState(OperationalMode.ENABLED))))
            .withExtendedLocation(
                new ExtendedLocation().withName("scnpqxuhivy").withType(ExtendedLocationType.CUSTOM_LOCATION))
            .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED)
                .withUserAssignedIdentities(mapOf("yejhk", new UserAssignedIdentity(), "jnchgej",
                    new UserAssignedIdentity(), "wyahuxinpmqnja", new UserAssignedIdentity())));
        model = BinaryData.fromObject(model).toObject(InstanceResourceInner.class);
        Assertions.assertEquals("ixjsprozvcputeg", model.location());
        Assertions.assertEquals("mfdatscmdvpj", model.tags().get("u"));
        Assertions.assertEquals("jbpzvgnwzsymg", model.properties().description());
        Assertions.assertEquals("fcbjysagithxqha", model.properties().schemaRegistryNamespace());
        Assertions.assertEquals(OperationalMode.DISABLED, model.properties().components().adr().state());
        Assertions.assertEquals(OperationalMode.DISABLED, model.properties().components().akri().state());
        Assertions.assertEquals(OperationalMode.ENABLED, model.properties().components().connectors().state());
        Assertions.assertEquals(OperationalMode.ENABLED, model.properties().components().dataflows().state());
        Assertions.assertEquals(OperationalMode.ENABLED, model.properties().components().schemaRegistry().state());
        Assertions.assertEquals("scnpqxuhivy", model.extendedLocation().name());
        Assertions.assertEquals(ExtendedLocationType.CUSTOM_LOCATION, model.extendedLocation().type());
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED, model.identity().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
