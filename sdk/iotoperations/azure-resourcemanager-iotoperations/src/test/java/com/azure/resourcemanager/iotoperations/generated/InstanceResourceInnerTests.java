// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.iotoperations.fluent.models.InstanceResourceInner;
import com.azure.resourcemanager.iotoperations.models.ExtendedLocation;
import com.azure.resourcemanager.iotoperations.models.ExtendedLocationType;
import com.azure.resourcemanager.iotoperations.models.InstanceProperties;
import com.azure.resourcemanager.iotoperations.models.ManagedServiceIdentity;
import com.azure.resourcemanager.iotoperations.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.iotoperations.models.OperationalMode;
import com.azure.resourcemanager.iotoperations.models.SchemaRegistryRef;
import com.azure.resourcemanager.iotoperations.models.UserAssignedIdentity;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class InstanceResourceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        InstanceResourceInner model = BinaryData.fromString(
            "{\"properties\":{\"description\":\"jbpzvgnwzsymg\",\"provisioningState\":\"Accepted\",\"version\":\"cyzkohdbihanuf\",\"schemaRegistryRef\":{\"resourceId\":\"fcbjysagithxqha\"},\"features\":{\"ikxwc\":\"Disabled\",\"yscnpqxu\":\"Enabled\",\"vyq\":\"Disabled\"}},\"extendedLocation\":{\"name\":\"iwbybrkxvdumjg\",\"type\":\"CustomLocation\"},\"identity\":{\"principalId\":\"vukxgau\",\"tenantId\":\"cs\",\"type\":\"None\",\"userAssignedIdentities\":{\"kvnipjoxz\":{\"clientId\":\"nyejhkryhtnap\",\"principalId\":\"wlokjyem\"}}},\"location\":\"chgejspodm\",\"tags\":{\"o\":\"zyde\",\"wixjsprozvcp\":\"wyahuxinpmqnja\",\"atscmd\":\"tegjvwmf\",\"zkrwfn\":\"pjhulsuuvmkj\"},\"id\":\"iodjp\",\"name\":\"lwejdpv\",\"type\":\"ryo\"}")
            .toObject(InstanceResourceInner.class);
        Assertions.assertEquals("chgejspodm", model.location());
        Assertions.assertEquals("zyde", model.tags().get("o"));
        Assertions.assertEquals("jbpzvgnwzsymg", model.properties().description());
        Assertions.assertEquals("fcbjysagithxqha", model.properties().schemaRegistryRef().resourceId());
        Assertions.assertEquals(OperationalMode.DISABLED, model.properties().features().get("ikxwc"));
        Assertions.assertEquals("iwbybrkxvdumjg", model.extendedLocation().name());
        Assertions.assertEquals(ExtendedLocationType.CUSTOM_LOCATION, model.extendedLocation().type());
        Assertions.assertEquals(ManagedServiceIdentityType.NONE, model.identity().type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        InstanceResourceInner model = new InstanceResourceInner().withLocation("chgejspodm")
            .withTags(
                mapOf("o", "zyde", "wixjsprozvcp", "wyahuxinpmqnja", "atscmd", "tegjvwmf", "zkrwfn", "pjhulsuuvmkj"))
            .withProperties(new InstanceProperties().withDescription("jbpzvgnwzsymg")
                .withSchemaRegistryRef(new SchemaRegistryRef().withResourceId("fcbjysagithxqha"))
                .withFeatures(mapOf("ikxwc", OperationalMode.DISABLED, "yscnpqxu", OperationalMode.ENABLED, "vyq",
                    OperationalMode.DISABLED)))
            .withExtendedLocation(
                new ExtendedLocation().withName("iwbybrkxvdumjg").withType(ExtendedLocationType.CUSTOM_LOCATION))
            .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.NONE)
                .withUserAssignedIdentities(mapOf("kvnipjoxz", new UserAssignedIdentity())));
        model = BinaryData.fromObject(model).toObject(InstanceResourceInner.class);
        Assertions.assertEquals("chgejspodm", model.location());
        Assertions.assertEquals("zyde", model.tags().get("o"));
        Assertions.assertEquals("jbpzvgnwzsymg", model.properties().description());
        Assertions.assertEquals("fcbjysagithxqha", model.properties().schemaRegistryRef().resourceId());
        Assertions.assertEquals(OperationalMode.DISABLED, model.properties().features().get("ikxwc"));
        Assertions.assertEquals("iwbybrkxvdumjg", model.extendedLocation().name());
        Assertions.assertEquals(ExtendedLocationType.CUSTOM_LOCATION, model.extendedLocation().type());
        Assertions.assertEquals(ManagedServiceIdentityType.NONE, model.identity().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
