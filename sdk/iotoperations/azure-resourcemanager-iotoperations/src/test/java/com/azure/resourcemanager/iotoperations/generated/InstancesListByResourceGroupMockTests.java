// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.iotoperations.IoTOperationsManager;
import com.azure.resourcemanager.iotoperations.models.ExtendedLocationType;
import com.azure.resourcemanager.iotoperations.models.InstanceResource;
import com.azure.resourcemanager.iotoperations.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.iotoperations.models.OperationalMode;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class InstancesListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"description\":\"rfdwoyu\",\"provisioningState\":\"Provisioning\",\"version\":\"u\",\"schemaRegistryNamespace\":\"efozbhdms\",\"components\":{\"adr\":{\"state\":\"Enabled\"},\"akri\":{\"state\":\"Enabled\"},\"connectors\":{\"state\":\"Enabled\"},\"dataflows\":{\"state\":\"Enabled\"},\"schemaRegistry\":{\"state\":\"Enabled\"}}},\"extendedLocation\":{\"name\":\"equi\",\"type\":\"CustomLocation\"},\"identity\":{\"principalId\":\"cslfaoqzpiyylha\",\"tenantId\":\"swhccsphk\",\"type\":\"SystemAssigned,UserAssigned\",\"userAssignedIdentities\":{\"i\":{\"principalId\":\"tqscywug\",\"clientId\":\"oluhczbwemh\"},\"n\":{\"principalId\":\"brgz\",\"clientId\":\"msweypqwdxggicc\"},\"hz\":{\"principalId\":\"huexmk\",\"clientId\":\"lstvlzywe\"},\"adcy\":{\"principalId\":\"csdtclusiypbs\",\"clientId\":\"ytguslf\"}}},\"location\":\"ukyhejhzis\",\"tags\":{\"pv\":\"pelol\"},\"id\":\"srp\",\"name\":\"vu\",\"type\":\"zraehtwd\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        IoTOperationsManager manager = IoTOperationsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<InstanceResource> response
            = manager.instances().listByResourceGroup("zkopb", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("ukyhejhzis", response.iterator().next().location());
        Assertions.assertEquals("pelol", response.iterator().next().tags().get("pv"));
        Assertions.assertEquals("rfdwoyu", response.iterator().next().properties().description());
        Assertions.assertEquals("efozbhdms", response.iterator().next().properties().schemaRegistryNamespace());
        Assertions.assertEquals(OperationalMode.ENABLED,
            response.iterator().next().properties().components().adr().state());
        Assertions.assertEquals(OperationalMode.ENABLED,
            response.iterator().next().properties().components().akri().state());
        Assertions.assertEquals(OperationalMode.ENABLED,
            response.iterator().next().properties().components().connectors().state());
        Assertions.assertEquals(OperationalMode.ENABLED,
            response.iterator().next().properties().components().dataflows().state());
        Assertions.assertEquals(OperationalMode.ENABLED,
            response.iterator().next().properties().components().schemaRegistry().state());
        Assertions.assertEquals("equi", response.iterator().next().extendedLocation().name());
        Assertions.assertEquals(ExtendedLocationType.CUSTOM_LOCATION,
            response.iterator().next().extendedLocation().type());
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED,
            response.iterator().next().identity().type());
    }
}
