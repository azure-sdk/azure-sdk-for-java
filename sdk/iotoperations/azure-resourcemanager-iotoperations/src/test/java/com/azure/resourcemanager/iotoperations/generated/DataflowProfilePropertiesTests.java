// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.iotoperations.models.DataflowProfileProperties;
import com.azure.resourcemanager.iotoperations.models.DiagnosticsLogs;
import com.azure.resourcemanager.iotoperations.models.Metrics;
import com.azure.resourcemanager.iotoperations.models.OpenTelemetryExportConfig;
import com.azure.resourcemanager.iotoperations.models.OpenTelemetryLogExportConfig;
import com.azure.resourcemanager.iotoperations.models.ProfileDiagnostics;
import org.junit.jupiter.api.Assertions;

public final class DataflowProfilePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DataflowProfileProperties model = BinaryData.fromString(
            "{\"diagnostics\":{\"logs\":{\"opentelemetryExportConfig\":{\"otlpGrpcEndpoint\":\"kthumaqolbgycdui\",\"intervalSeconds\":1108910411,\"level\":\"ccymvaolpsslql\"},\"level\":\"mdnbbglzpswiy\"},\"metrics\":{\"opentelemetryExportConfig\":{\"otlpGrpcEndpoint\":\"wyhzdx\",\"intervalSeconds\":1314424917},\"prometheusPort\":759374962}},\"instanceCount\":1712782654,\"provisioningState\":\"Deleting\"}")
            .toObject(DataflowProfileProperties.class);
        Assertions.assertEquals("kthumaqolbgycdui",
            model.diagnostics().logs().opentelemetryExportConfig().otlpGrpcEndpoint());
        Assertions.assertEquals(1108910411, model.diagnostics().logs().opentelemetryExportConfig().intervalSeconds());
        Assertions.assertEquals("ccymvaolpsslql", model.diagnostics().logs().opentelemetryExportConfig().level());
        Assertions.assertEquals("mdnbbglzpswiy", model.diagnostics().logs().level());
        Assertions.assertEquals("wyhzdx", model.diagnostics().metrics().opentelemetryExportConfig().otlpGrpcEndpoint());
        Assertions.assertEquals(1314424917,
            model.diagnostics().metrics().opentelemetryExportConfig().intervalSeconds());
        Assertions.assertEquals(759374962, model.diagnostics().metrics().prometheusPort());
        Assertions.assertEquals(1712782654, model.instanceCount());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DataflowProfileProperties model = new DataflowProfileProperties().withDiagnostics(new ProfileDiagnostics()
            .withLogs(new DiagnosticsLogs()
                .withOpentelemetryExportConfig(
                    new OpenTelemetryLogExportConfig().withOtlpGrpcEndpoint("kthumaqolbgycdui")
                        .withIntervalSeconds(1108910411)
                        .withLevel("ccymvaolpsslql"))
                .withLevel("mdnbbglzpswiy"))
            .withMetrics(new Metrics()
                .withOpentelemetryExportConfig(
                    new OpenTelemetryExportConfig().withOtlpGrpcEndpoint("wyhzdx").withIntervalSeconds(1314424917))
                .withPrometheusPort(759374962)))
            .withInstanceCount(1712782654);
        model = BinaryData.fromObject(model).toObject(DataflowProfileProperties.class);
        Assertions.assertEquals("kthumaqolbgycdui",
            model.diagnostics().logs().opentelemetryExportConfig().otlpGrpcEndpoint());
        Assertions.assertEquals(1108910411, model.diagnostics().logs().opentelemetryExportConfig().intervalSeconds());
        Assertions.assertEquals("ccymvaolpsslql", model.diagnostics().logs().opentelemetryExportConfig().level());
        Assertions.assertEquals("mdnbbglzpswiy", model.diagnostics().logs().level());
        Assertions.assertEquals("wyhzdx", model.diagnostics().metrics().opentelemetryExportConfig().otlpGrpcEndpoint());
        Assertions.assertEquals(1314424917,
            model.diagnostics().metrics().opentelemetryExportConfig().intervalSeconds());
        Assertions.assertEquals(759374962, model.diagnostics().metrics().prometheusPort());
        Assertions.assertEquals(1712782654, model.instanceCount());
    }
}
