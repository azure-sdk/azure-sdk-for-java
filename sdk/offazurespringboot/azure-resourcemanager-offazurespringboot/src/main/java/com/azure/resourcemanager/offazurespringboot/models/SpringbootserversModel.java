// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.offazurespringboot.models;

import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.offazurespringboot.fluent.models.SpringbootserversModelInner;
import java.util.List;

/**
 * An immutable client-side representation of SpringbootserversModel.
 */
public interface SpringbootserversModel {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     * 
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     * 
     * @return the type value.
     */
    String type();

    /**
     * Gets the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * Gets the port property: Target server port for remote login.
     * 
     * @return the port value.
     */
    Integer port();

    /**
     * Gets the server property: Server is the target server name or ip address to discover of SpringBootServer.
     * 
     * @return the server value.
     */
    String server();

    /**
     * Gets the fqdnAndIpAddressList property: The alternative FQDN or IP addresses to discover for this server.
     * 
     * @return the fqdnAndIpAddressList value.
     */
    List<String> fqdnAndIpAddressList();

    /**
     * Gets the machineArmId property: The machine Id from ARM.
     * 
     * @return the machineArmId value.
     */
    String machineArmId();

    /**
     * Gets the totalApps property: The total number of apps been discovered.
     * 
     * @return the totalApps value.
     */
    Integer totalApps();

    /**
     * Gets the springBootApps property: The total number of spring boot apps been discovered.
     * 
     * @return the springBootApps value.
     */
    Integer springBootApps();

    /**
     * Gets the errors property: The list of errors.
     * 
     * @return the errors value.
     */
    List<Error> errors();

    /**
     * Gets the provisioningState property: The resource provisioning state.
     * 
     * @return the provisioningState value.
     */
    ProvisioningState provisioningState();

    /**
     * Gets the name of the resource group.
     * 
     * @return the name of the resource group.
     */
    String resourceGroupName();

    /**
     * Gets the inner com.azure.resourcemanager.offazurespringboot.fluent.models.SpringbootserversModelInner object.
     * 
     * @return the inner object.
     */
    SpringbootserversModelInner innerModel();

    /**
     * The entirety of the SpringbootserversModel definition.
     */
    interface Definition
        extends DefinitionStages.Blank, DefinitionStages.WithParentResource, DefinitionStages.WithCreate {
    }

    /**
     * The SpringbootserversModel definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of the SpringbootserversModel definition.
         */
        interface Blank extends WithParentResource {
        }

        /**
         * The stage of the SpringbootserversModel definition allowing to specify parent resource.
         */
        interface WithParentResource {
            /**
             * Specifies resourceGroupName, springbootsitesName.
             * 
             * @param resourceGroupName The name of the resource group. The name is case insensitive.
             * @param springbootsitesName The springbootsites name.
             * @return the next definition stage.
             */
            WithCreate withExistingSpringbootsite(String resourceGroupName, String springbootsitesName);
        }

        /**
         * The stage of the SpringbootserversModel definition which contains all the minimum required properties for the
         * resource to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithPort, DefinitionStages.WithServer, DefinitionStages.WithFqdnAndIpAddressList,
            DefinitionStages.WithMachineArmId, DefinitionStages.WithTotalApps, DefinitionStages.WithSpringBootApps,
            DefinitionStages.WithErrors, DefinitionStages.WithProvisioningState {
            /**
             * Executes the create request.
             * 
             * @return the created resource.
             */
            SpringbootserversModel create();

            /**
             * Executes the create request.
             * 
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            SpringbootserversModel create(Context context);
        }

        /**
         * The stage of the SpringbootserversModel definition allowing to specify port.
         */
        interface WithPort {
            /**
             * Specifies the port property: Target server port for remote login.
             * 
             * @param port Target server port for remote login.
             * @return the next definition stage.
             */
            WithCreate withPort(Integer port);
        }

        /**
         * The stage of the SpringbootserversModel definition allowing to specify server.
         */
        interface WithServer {
            /**
             * Specifies the server property: Server is the target server name or ip address to discover of
             * SpringBootServer..
             * 
             * @param server Server is the target server name or ip address to discover of SpringBootServer.
             * @return the next definition stage.
             */
            WithCreate withServer(String server);
        }

        /**
         * The stage of the SpringbootserversModel definition allowing to specify fqdnAndIpAddressList.
         */
        interface WithFqdnAndIpAddressList {
            /**
             * Specifies the fqdnAndIpAddressList property: The alternative FQDN or IP addresses to discover for this
             * server.
             * 
             * @param fqdnAndIpAddressList The alternative FQDN or IP addresses to discover for this server.
             * @return the next definition stage.
             */
            WithCreate withFqdnAndIpAddressList(List<String> fqdnAndIpAddressList);
        }

        /**
         * The stage of the SpringbootserversModel definition allowing to specify machineArmId.
         */
        interface WithMachineArmId {
            /**
             * Specifies the machineArmId property: The machine Id from ARM.
             * 
             * @param machineArmId The machine Id from ARM.
             * @return the next definition stage.
             */
            WithCreate withMachineArmId(String machineArmId);
        }

        /**
         * The stage of the SpringbootserversModel definition allowing to specify totalApps.
         */
        interface WithTotalApps {
            /**
             * Specifies the totalApps property: The total number of apps been discovered.
             * 
             * @param totalApps The total number of apps been discovered.
             * @return the next definition stage.
             */
            WithCreate withTotalApps(Integer totalApps);
        }

        /**
         * The stage of the SpringbootserversModel definition allowing to specify springBootApps.
         */
        interface WithSpringBootApps {
            /**
             * Specifies the springBootApps property: The total number of spring boot apps been discovered.
             * 
             * @param springBootApps The total number of spring boot apps been discovered.
             * @return the next definition stage.
             */
            WithCreate withSpringBootApps(Integer springBootApps);
        }

        /**
         * The stage of the SpringbootserversModel definition allowing to specify errors.
         */
        interface WithErrors {
            /**
             * Specifies the errors property: The list of errors..
             * 
             * @param errors The list of errors.
             * @return the next definition stage.
             */
            WithCreate withErrors(List<Error> errors);
        }

        /**
         * The stage of the SpringbootserversModel definition allowing to specify provisioningState.
         */
        interface WithProvisioningState {
            /**
             * Specifies the provisioningState property: The resource provisioning state..
             * 
             * @param provisioningState The resource provisioning state.
             * @return the next definition stage.
             */
            WithCreate withProvisioningState(ProvisioningState provisioningState);
        }
    }

    /**
     * Begins update for the SpringbootserversModel resource.
     * 
     * @return the stage of resource update.
     */
    SpringbootserversModel.Update update();

    /**
     * The template for SpringbootserversModel update.
     */
    interface Update extends UpdateStages.WithPort, UpdateStages.WithServer, UpdateStages.WithFqdnAndIpAddressList,
        UpdateStages.WithMachineArmId, UpdateStages.WithTotalApps, UpdateStages.WithSpringBootApps,
        UpdateStages.WithErrors, UpdateStages.WithProvisioningState {
        /**
         * Executes the update request.
         * 
         * @return the updated resource.
         */
        SpringbootserversModel apply();

        /**
         * Executes the update request.
         * 
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        SpringbootserversModel apply(Context context);
    }

    /**
     * The SpringbootserversModel update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the SpringbootserversModel update allowing to specify port.
         */
        interface WithPort {
            /**
             * Specifies the port property: Target server port for remote login.
             * 
             * @param port Target server port for remote login.
             * @return the next definition stage.
             */
            Update withPort(Integer port);
        }

        /**
         * The stage of the SpringbootserversModel update allowing to specify server.
         */
        interface WithServer {
            /**
             * Specifies the server property: Server is the target server name or ip address to discover of
             * SpringBootServer..
             * 
             * @param server Server is the target server name or ip address to discover of SpringBootServer.
             * @return the next definition stage.
             */
            Update withServer(String server);
        }

        /**
         * The stage of the SpringbootserversModel update allowing to specify fqdnAndIpAddressList.
         */
        interface WithFqdnAndIpAddressList {
            /**
             * Specifies the fqdnAndIpAddressList property: The alternative FQDN or IP addresses to discover for this
             * server.
             * 
             * @param fqdnAndIpAddressList The alternative FQDN or IP addresses to discover for this server.
             * @return the next definition stage.
             */
            Update withFqdnAndIpAddressList(List<String> fqdnAndIpAddressList);
        }

        /**
         * The stage of the SpringbootserversModel update allowing to specify machineArmId.
         */
        interface WithMachineArmId {
            /**
             * Specifies the machineArmId property: The machine Id from ARM.
             * 
             * @param machineArmId The machine Id from ARM.
             * @return the next definition stage.
             */
            Update withMachineArmId(String machineArmId);
        }

        /**
         * The stage of the SpringbootserversModel update allowing to specify totalApps.
         */
        interface WithTotalApps {
            /**
             * Specifies the totalApps property: The total number of apps been discovered.
             * 
             * @param totalApps The total number of apps been discovered.
             * @return the next definition stage.
             */
            Update withTotalApps(Integer totalApps);
        }

        /**
         * The stage of the SpringbootserversModel update allowing to specify springBootApps.
         */
        interface WithSpringBootApps {
            /**
             * Specifies the springBootApps property: The total number of spring boot apps been discovered.
             * 
             * @param springBootApps The total number of spring boot apps been discovered.
             * @return the next definition stage.
             */
            Update withSpringBootApps(Integer springBootApps);
        }

        /**
         * The stage of the SpringbootserversModel update allowing to specify errors.
         */
        interface WithErrors {
            /**
             * Specifies the errors property: The list of errors..
             * 
             * @param errors The list of errors.
             * @return the next definition stage.
             */
            Update withErrors(List<Error> errors);
        }

        /**
         * The stage of the SpringbootserversModel update allowing to specify provisioningState.
         */
        interface WithProvisioningState {
            /**
             * Specifies the provisioningState property: The resource provisioning state..
             * 
             * @param provisioningState The resource provisioning state.
             * @return the next definition stage.
             */
            Update withProvisioningState(ProvisioningState provisioningState);
        }
    }

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @return the refreshed resource.
     */
    SpringbootserversModel refresh();

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    SpringbootserversModel refresh(Context context);
}
