// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.offazurespringboot.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.offazurespringboot.fluent.models.SpringbootserversModelUpdateProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * The type used for update operations of the SpringbootserversModel.
 */
@Fluent
public final class SpringbootserversModelUpdate {
    /*
     * The updatable properties of the SpringbootserversModel.
     */
    @JsonProperty(value = "properties")
    private SpringbootserversModelUpdateProperties innerProperties;

    /**
     * Creates an instance of SpringbootserversModelUpdate class.
     */
    public SpringbootserversModelUpdate() {
    }

    /**
     * Get the innerProperties property: The updatable properties of the SpringbootserversModel.
     * 
     * @return the innerProperties value.
     */
    private SpringbootserversModelUpdateProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the port property: Target server port for remote login.
     * 
     * @return the port value.
     */
    public Integer port() {
        return this.innerProperties() == null ? null : this.innerProperties().port();
    }

    /**
     * Set the port property: Target server port for remote login.
     * 
     * @param port the port value to set.
     * @return the SpringbootserversModelUpdate object itself.
     */
    public SpringbootserversModelUpdate withPort(Integer port) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SpringbootserversModelUpdateProperties();
        }
        this.innerProperties().withPort(port);
        return this;
    }

    /**
     * Get the server property: Server is the target server name or ip address to discover of SpringBootServer.
     * 
     * @return the server value.
     */
    public String server() {
        return this.innerProperties() == null ? null : this.innerProperties().server();
    }

    /**
     * Set the server property: Server is the target server name or ip address to discover of SpringBootServer.
     * 
     * @param server the server value to set.
     * @return the SpringbootserversModelUpdate object itself.
     */
    public SpringbootserversModelUpdate withServer(String server) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SpringbootserversModelUpdateProperties();
        }
        this.innerProperties().withServer(server);
        return this;
    }

    /**
     * Get the fqdnAndIpAddressList property: The alternative FQDN or IP addresses to discover for this server.
     * 
     * @return the fqdnAndIpAddressList value.
     */
    public List<String> fqdnAndIpAddressList() {
        return this.innerProperties() == null ? null : this.innerProperties().fqdnAndIpAddressList();
    }

    /**
     * Set the fqdnAndIpAddressList property: The alternative FQDN or IP addresses to discover for this server.
     * 
     * @param fqdnAndIpAddressList the fqdnAndIpAddressList value to set.
     * @return the SpringbootserversModelUpdate object itself.
     */
    public SpringbootserversModelUpdate withFqdnAndIpAddressList(List<String> fqdnAndIpAddressList) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SpringbootserversModelUpdateProperties();
        }
        this.innerProperties().withFqdnAndIpAddressList(fqdnAndIpAddressList);
        return this;
    }

    /**
     * Get the machineArmId property: The machine Id from ARM.
     * 
     * @return the machineArmId value.
     */
    public String machineArmId() {
        return this.innerProperties() == null ? null : this.innerProperties().machineArmId();
    }

    /**
     * Set the machineArmId property: The machine Id from ARM.
     * 
     * @param machineArmId the machineArmId value to set.
     * @return the SpringbootserversModelUpdate object itself.
     */
    public SpringbootserversModelUpdate withMachineArmId(String machineArmId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SpringbootserversModelUpdateProperties();
        }
        this.innerProperties().withMachineArmId(machineArmId);
        return this;
    }

    /**
     * Get the totalApps property: The total number of apps been discovered.
     * 
     * @return the totalApps value.
     */
    public Integer totalApps() {
        return this.innerProperties() == null ? null : this.innerProperties().totalApps();
    }

    /**
     * Set the totalApps property: The total number of apps been discovered.
     * 
     * @param totalApps the totalApps value to set.
     * @return the SpringbootserversModelUpdate object itself.
     */
    public SpringbootserversModelUpdate withTotalApps(Integer totalApps) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SpringbootserversModelUpdateProperties();
        }
        this.innerProperties().withTotalApps(totalApps);
        return this;
    }

    /**
     * Get the springBootApps property: The total number of spring boot apps been discovered.
     * 
     * @return the springBootApps value.
     */
    public Integer springBootApps() {
        return this.innerProperties() == null ? null : this.innerProperties().springBootApps();
    }

    /**
     * Set the springBootApps property: The total number of spring boot apps been discovered.
     * 
     * @param springBootApps the springBootApps value to set.
     * @return the SpringbootserversModelUpdate object itself.
     */
    public SpringbootserversModelUpdate withSpringBootApps(Integer springBootApps) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SpringbootserversModelUpdateProperties();
        }
        this.innerProperties().withSpringBootApps(springBootApps);
        return this;
    }

    /**
     * Get the errors property: The list of errors.
     * 
     * @return the errors value.
     */
    public List<Error> errors() {
        return this.innerProperties() == null ? null : this.innerProperties().errors();
    }

    /**
     * Set the errors property: The list of errors.
     * 
     * @param errors the errors value to set.
     * @return the SpringbootserversModelUpdate object itself.
     */
    public SpringbootserversModelUpdate withErrors(List<Error> errors) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SpringbootserversModelUpdateProperties();
        }
        this.innerProperties().withErrors(errors);
        return this;
    }

    /**
     * Get the provisioningState property: The resource provisioning state.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Set the provisioningState property: The resource provisioning state.
     * 
     * @param provisioningState the provisioningState value to set.
     * @return the SpringbootserversModelUpdate object itself.
     */
    public SpringbootserversModelUpdate withProvisioningState(ProvisioningState provisioningState) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SpringbootserversModelUpdateProperties();
        }
        this.innerProperties().withProvisioningState(provisioningState);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
