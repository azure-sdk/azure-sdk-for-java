// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.offazurespringboot.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.offazurespringboot.fluent.models.SpringbootsitesModelInner;
import com.azure.resourcemanager.offazurespringboot.models.ProvisioningState;
import com.azure.resourcemanager.offazurespringboot.models.SpringbootsitesModel;
import com.azure.resourcemanager.offazurespringboot.models.SpringbootsitesModelExtendedLocation;
import com.azure.resourcemanager.offazurespringboot.models.SpringbootsitesModelUpdate;
import java.util.Collections;
import java.util.Map;

public final class SpringbootsitesModelImpl
    implements SpringbootsitesModel, SpringbootsitesModel.Definition, SpringbootsitesModel.Update {
    private SpringbootsitesModelInner innerObject;

    private final com.azure.resourcemanager.offazurespringboot.SpringAppsDiscoveryManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public SpringbootsitesModelExtendedLocation extendedLocation() {
        return this.innerModel().extendedLocation();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public String masterSiteId() {
        return this.innerModel().masterSiteId();
    }

    public String migrateProjectId() {
        return this.innerModel().migrateProjectId();
    }

    public ProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public SpringbootsitesModelInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.offazurespringboot.SpringAppsDiscoveryManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String springbootsitesName;

    private SpringbootsitesModelUpdate updateProperties;

    public SpringbootsitesModelImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public SpringbootsitesModel create() {
        this.innerObject = serviceManager.serviceClient().getSpringbootsites()
            .createOrUpdateWithResponse(resourceGroupName, springbootsitesName, this.innerModel(), Context.NONE)
            .getValue();
        return this;
    }

    public SpringbootsitesModel create(Context context) {
        this.innerObject = serviceManager.serviceClient().getSpringbootsites()
            .createOrUpdateWithResponse(resourceGroupName, springbootsitesName, this.innerModel(), context).getValue();
        return this;
    }

    SpringbootsitesModelImpl(String name,
        com.azure.resourcemanager.offazurespringboot.SpringAppsDiscoveryManager serviceManager) {
        this.innerObject = new SpringbootsitesModelInner();
        this.serviceManager = serviceManager;
        this.springbootsitesName = name;
    }

    public SpringbootsitesModelImpl update() {
        this.updateProperties = new SpringbootsitesModelUpdate();
        return this;
    }

    public SpringbootsitesModel apply() {
        this.innerObject = serviceManager.serviceClient().getSpringbootsites().update(resourceGroupName,
            springbootsitesName, updateProperties, Context.NONE);
        return this;
    }

    public SpringbootsitesModel apply(Context context) {
        this.innerObject = serviceManager.serviceClient().getSpringbootsites().update(resourceGroupName,
            springbootsitesName, updateProperties, context);
        return this;
    }

    SpringbootsitesModelImpl(SpringbootsitesModelInner innerObject,
        com.azure.resourcemanager.offazurespringboot.SpringAppsDiscoveryManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.springbootsitesName = Utils.getValueFromIdByName(innerObject.id(), "springbootsites");
    }

    public SpringbootsitesModel refresh() {
        this.innerObject = serviceManager.serviceClient().getSpringbootsites()
            .getByResourceGroupWithResponse(resourceGroupName, springbootsitesName, Context.NONE).getValue();
        return this;
    }

    public SpringbootsitesModel refresh(Context context) {
        this.innerObject = serviceManager.serviceClient().getSpringbootsites()
            .getByResourceGroupWithResponse(resourceGroupName, springbootsitesName, context).getValue();
        return this;
    }

    public void triggerRefreshSite() {
        serviceManager.springbootsites().triggerRefreshSite(resourceGroupName, springbootsitesName);
    }

    public void triggerRefreshSite(Context context) {
        serviceManager.springbootsites().triggerRefreshSite(resourceGroupName, springbootsitesName, context);
    }

    public SpringbootsitesModelImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public SpringbootsitesModelImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public SpringbootsitesModelImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateProperties.withTags(tags);
            return this;
        }
    }

    public SpringbootsitesModelImpl withExtendedLocation(SpringbootsitesModelExtendedLocation extendedLocation) {
        if (isInCreateMode()) {
            this.innerModel().withExtendedLocation(extendedLocation);
            return this;
        } else {
            this.updateProperties.withExtendedLocation(extendedLocation);
            return this;
        }
    }

    public SpringbootsitesModelImpl withMasterSiteId(String masterSiteId) {
        if (isInCreateMode()) {
            this.innerModel().withMasterSiteId(masterSiteId);
            return this;
        } else {
            this.updateProperties.withMasterSiteId(masterSiteId);
            return this;
        }
    }

    public SpringbootsitesModelImpl withMigrateProjectId(String migrateProjectId) {
        if (isInCreateMode()) {
            this.innerModel().withMigrateProjectId(migrateProjectId);
            return this;
        } else {
            this.updateProperties.withMigrateProjectId(migrateProjectId);
            return this;
        }
    }

    public SpringbootsitesModelImpl withProvisioningState(ProvisioningState provisioningState) {
        if (isInCreateMode()) {
            this.innerModel().withProvisioningState(provisioningState);
            return this;
        } else {
            this.updateProperties.withProvisioningState(provisioningState);
            return this;
        }
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
