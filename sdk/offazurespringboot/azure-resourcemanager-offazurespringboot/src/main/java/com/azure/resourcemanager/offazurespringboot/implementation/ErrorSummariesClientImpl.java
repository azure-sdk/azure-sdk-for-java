// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.offazurespringboot.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.offazurespringboot.fluent.ErrorSummariesClient;
import com.azure.resourcemanager.offazurespringboot.fluent.models.ErrorSummaryInner;
import com.azure.resourcemanager.offazurespringboot.models.ErrorSummaryListResult;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in ErrorSummariesClient.
 */
public final class ErrorSummariesClientImpl implements ErrorSummariesClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final ErrorSummariesService service;

    /**
     * The service client containing this operation class.
     */
    private final SpringAppsDiscoveryClientImpl client;

    /**
     * Initializes an instance of ErrorSummariesClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    ErrorSummariesClientImpl(SpringAppsDiscoveryClientImpl client) {
        this.service
            = RestProxy.create(ErrorSummariesService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for SpringAppsDiscoveryClientErrorSummaries to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "SpringAppsDiscoveryC")
    public interface ErrorSummariesService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzureSpringBoot/springbootsites/{springbootsitesName}/errorSummaries")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ErrorSummaryListResult>> listBySpringbootsitesModel(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("springbootsitesName") String springbootsitesName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzureSpringBoot/springbootsites/{springbootsitesName}/errorSummaries/{errorSummaryName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ErrorSummaryInner>> get(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("springbootsitesName") String springbootsitesName,
            @PathParam("errorSummaryName") String errorSummaryName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ErrorSummaryListResult>> listBySpringbootsitesModelNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Lists the ErrorSummaries resource in springbootsites.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param springbootsitesName The springbootsites name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ErrorSummary list operation along with {@link PagedResponse} on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ErrorSummaryInner>> listBySpringbootsitesModelSinglePageAsync(String resourceGroupName,
        String springbootsitesName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (springbootsitesName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter springbootsitesName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listBySpringbootsitesModel(this.client.getEndpoint(), this.client.getApiVersion(),
                    this.client.getSubscriptionId(), resourceGroupName, springbootsitesName, accept, context))
            .<PagedResponse<ErrorSummaryInner>>map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(),
                res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Lists the ErrorSummaries resource in springbootsites.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param springbootsitesName The springbootsites name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ErrorSummary list operation along with {@link PagedResponse} on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ErrorSummaryInner>> listBySpringbootsitesModelSinglePageAsync(String resourceGroupName,
        String springbootsitesName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (springbootsitesName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter springbootsitesName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listBySpringbootsitesModel(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, springbootsitesName, accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * Lists the ErrorSummaries resource in springbootsites.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param springbootsitesName The springbootsites name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ErrorSummary list operation as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ErrorSummaryInner> listBySpringbootsitesModelAsync(String resourceGroupName,
        String springbootsitesName) {
        return new PagedFlux<>(() -> listBySpringbootsitesModelSinglePageAsync(resourceGroupName, springbootsitesName),
            nextLink -> listBySpringbootsitesModelNextSinglePageAsync(nextLink));
    }

    /**
     * Lists the ErrorSummaries resource in springbootsites.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param springbootsitesName The springbootsites name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ErrorSummary list operation as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ErrorSummaryInner> listBySpringbootsitesModelAsync(String resourceGroupName,
        String springbootsitesName, Context context) {
        return new PagedFlux<>(
            () -> listBySpringbootsitesModelSinglePageAsync(resourceGroupName, springbootsitesName, context),
            nextLink -> listBySpringbootsitesModelNextSinglePageAsync(nextLink, context));
    }

    /**
     * Lists the ErrorSummaries resource in springbootsites.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param springbootsitesName The springbootsites name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ErrorSummary list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ErrorSummaryInner> listBySpringbootsitesModel(String resourceGroupName,
        String springbootsitesName) {
        return new PagedIterable<>(listBySpringbootsitesModelAsync(resourceGroupName, springbootsitesName));
    }

    /**
     * Lists the ErrorSummaries resource in springbootsites.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param springbootsitesName The springbootsites name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ErrorSummary list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ErrorSummaryInner> listBySpringbootsitesModel(String resourceGroupName,
        String springbootsitesName, Context context) {
        return new PagedIterable<>(listBySpringbootsitesModelAsync(resourceGroupName, springbootsitesName, context));
    }

    /**
     * Gets the ErrorSummaries resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param springbootsitesName The springbootsites name.
     * @param errorSummaryName The name of error summary.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ErrorSummaries resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ErrorSummaryInner>> getWithResponseAsync(String resourceGroupName, String springbootsitesName,
        String errorSummaryName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (springbootsitesName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter springbootsitesName is required and cannot be null."));
        }
        if (errorSummaryName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter errorSummaryName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.get(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, springbootsitesName, errorSummaryName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets the ErrorSummaries resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param springbootsitesName The springbootsites name.
     * @param errorSummaryName The name of error summary.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ErrorSummaries resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ErrorSummaryInner>> getWithResponseAsync(String resourceGroupName, String springbootsitesName,
        String errorSummaryName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (springbootsitesName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter springbootsitesName is required and cannot be null."));
        }
        if (errorSummaryName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter errorSummaryName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, springbootsitesName, errorSummaryName, accept, context);
    }

    /**
     * Gets the ErrorSummaries resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param springbootsitesName The springbootsites name.
     * @param errorSummaryName The name of error summary.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ErrorSummaries resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ErrorSummaryInner> getAsync(String resourceGroupName, String springbootsitesName,
        String errorSummaryName) {
        return getWithResponseAsync(resourceGroupName, springbootsitesName, errorSummaryName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets the ErrorSummaries resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param springbootsitesName The springbootsites name.
     * @param errorSummaryName The name of error summary.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ErrorSummaries resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ErrorSummaryInner> getWithResponse(String resourceGroupName, String springbootsitesName,
        String errorSummaryName, Context context) {
        return getWithResponseAsync(resourceGroupName, springbootsitesName, errorSummaryName, context).block();
    }

    /**
     * Gets the ErrorSummaries resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param springbootsitesName The springbootsites name.
     * @param errorSummaryName The name of error summary.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ErrorSummaries resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ErrorSummaryInner get(String resourceGroupName, String springbootsitesName, String errorSummaryName) {
        return getWithResponse(resourceGroupName, springbootsitesName, errorSummaryName, Context.NONE).getValue();
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ErrorSummary list operation along with {@link PagedResponse} on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ErrorSummaryInner>> listBySpringbootsitesModelNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listBySpringbootsitesModelNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<ErrorSummaryInner>>map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(),
                res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ErrorSummary list operation along with {@link PagedResponse} on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ErrorSummaryInner>> listBySpringbootsitesModelNextSinglePageAsync(String nextLink,
        Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listBySpringbootsitesModelNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }
}
