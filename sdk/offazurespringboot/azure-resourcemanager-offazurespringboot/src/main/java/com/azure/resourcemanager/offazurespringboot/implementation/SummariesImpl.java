// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.offazurespringboot.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.offazurespringboot.fluent.SummariesClient;
import com.azure.resourcemanager.offazurespringboot.fluent.models.SummaryInner;
import com.azure.resourcemanager.offazurespringboot.models.Summaries;
import com.azure.resourcemanager.offazurespringboot.models.Summary;

public final class SummariesImpl implements Summaries {
    private static final ClientLogger LOGGER = new ClientLogger(SummariesImpl.class);

    private final SummariesClient innerClient;

    private final com.azure.resourcemanager.offazurespringboot.SpringAppsDiscoveryManager serviceManager;

    public SummariesImpl(
        SummariesClient innerClient,
        com.azure.resourcemanager.offazurespringboot.SpringAppsDiscoveryManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<Summary> getWithResponse(
        String resourceGroupName, String siteName, String summaryName, Context context) {
        Response<SummaryInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, siteName, summaryName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SummaryImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Summary get(String resourceGroupName, String siteName, String summaryName) {
        SummaryInner inner = this.serviceClient().get(resourceGroupName, siteName, summaryName);
        if (inner != null) {
            return new SummaryImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteWithResponse(
        String resourceGroupName, String siteName, String summaryName, Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, siteName, summaryName, context);
    }

    public void delete(String resourceGroupName, String siteName, String summaryName) {
        this.serviceClient().delete(resourceGroupName, siteName, summaryName);
    }

    public PagedIterable<Summary> listBySite(String resourceGroupName, String siteName) {
        PagedIterable<SummaryInner> inner = this.serviceClient().listBySite(resourceGroupName, siteName);
        return Utils.mapPage(inner, inner1 -> new SummaryImpl(inner1, this.manager()));
    }

    public PagedIterable<Summary> listBySite(String resourceGroupName, String siteName, Context context) {
        PagedIterable<SummaryInner> inner = this.serviceClient().listBySite(resourceGroupName, siteName, context);
        return Utils.mapPage(inner, inner1 -> new SummaryImpl(inner1, this.manager()));
    }

    public Summary getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String siteName = Utils.getValueFromIdByName(id, "springbootsites");
        if (siteName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'springbootsites'.", id)));
        }
        String summaryName = Utils.getValueFromIdByName(id, "Summaries");
        if (summaryName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'Summaries'.", id)));
        }
        return this.getWithResponse(resourceGroupName, siteName, summaryName, Context.NONE).getValue();
    }

    public Response<Summary> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String siteName = Utils.getValueFromIdByName(id, "springbootsites");
        if (siteName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'springbootsites'.", id)));
        }
        String summaryName = Utils.getValueFromIdByName(id, "Summaries");
        if (summaryName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'Summaries'.", id)));
        }
        return this.getWithResponse(resourceGroupName, siteName, summaryName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String siteName = Utils.getValueFromIdByName(id, "springbootsites");
        if (siteName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'springbootsites'.", id)));
        }
        String summaryName = Utils.getValueFromIdByName(id, "Summaries");
        if (summaryName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'Summaries'.", id)));
        }
        this.deleteWithResponse(resourceGroupName, siteName, summaryName, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String siteName = Utils.getValueFromIdByName(id, "springbootsites");
        if (siteName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'springbootsites'.", id)));
        }
        String summaryName = Utils.getValueFromIdByName(id, "Summaries");
        if (summaryName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'Summaries'.", id)));
        }
        return this.deleteWithResponse(resourceGroupName, siteName, summaryName, context);
    }

    private SummariesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.offazurespringboot.SpringAppsDiscoveryManager manager() {
        return this.serviceManager;
    }

    public SummaryImpl define(String name) {
        return new SummaryImpl(name, this.manager());
    }
}
