// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.offazurespringboot.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.offazurespringboot.fluent.models.SpringbootappsModelInner;
import com.azure.resourcemanager.offazurespringboot.models.SpringbootappsModelUpdate;

/**
 * An instance of this class provides access to all the operations defined in SpringbootappsClient.
 */
public interface SpringbootappsClient {
    /**
     * List springbootapps resource by subscription.
     * 
     * @param springbootsitesName The springbootsites name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a SpringbootappsModel list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<SpringbootappsModelInner> listBySubscription(String springbootsitesName);

    /**
     * List springbootapps resource by subscription.
     * 
     * @param springbootsitesName The springbootsites name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a SpringbootappsModel list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<SpringbootappsModelInner> listBySubscription(String springbootsitesName, Context context);

    /**
     * List springbootapps resource by resourceGroup.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param springbootsitesName The springbootsites name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a SpringbootappsModel list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<SpringbootappsModelInner> listBySpringbootsitesModel(String resourceGroupName,
        String springbootsitesName);

    /**
     * List springbootapps resource by resourceGroup.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param springbootsitesName The springbootsites name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a SpringbootappsModel list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<SpringbootappsModelInner> listBySpringbootsitesModel(String resourceGroupName,
        String springbootsitesName, Context context);

    /**
     * Get a springbootapps resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param springbootsitesName The springbootsites name.
     * @param springbootappsName The springbootapps name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a springbootapps resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<SpringbootappsModelInner> getWithResponse(String resourceGroupName, String springbootsitesName,
        String springbootappsName, Context context);

    /**
     * Get a springbootapps resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param springbootsitesName The springbootsites name.
     * @param springbootappsName The springbootapps name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a springbootapps resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SpringbootappsModelInner get(String resourceGroupName, String springbootsitesName, String springbootappsName);

    /**
     * Update a springbootapps resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param springbootsitesName The springbootsites name.
     * @param springbootappsName The springbootapps name.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the springbootapps envelope resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<SpringbootappsModelInner>, SpringbootappsModelInner> beginUpdate(String resourceGroupName,
        String springbootsitesName, String springbootappsName, SpringbootappsModelUpdate properties);

    /**
     * Update a springbootapps resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param springbootsitesName The springbootsites name.
     * @param springbootappsName The springbootapps name.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the springbootapps envelope resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<SpringbootappsModelInner>, SpringbootappsModelInner> beginUpdate(String resourceGroupName,
        String springbootsitesName, String springbootappsName, SpringbootappsModelUpdate properties, Context context);

    /**
     * Update a springbootapps resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param springbootsitesName The springbootsites name.
     * @param springbootappsName The springbootapps name.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the springbootapps envelope resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SpringbootappsModelInner update(String resourceGroupName, String springbootsitesName, String springbootappsName,
        SpringbootappsModelUpdate properties);

    /**
     * Update a springbootapps resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param springbootsitesName The springbootsites name.
     * @param springbootappsName The springbootapps name.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the springbootapps envelope resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SpringbootappsModelInner update(String resourceGroupName, String springbootsitesName, String springbootappsName,
        SpringbootappsModelUpdate properties, Context context);
}
