// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.offazurespringboot.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.offazurespringboot.fluent.SpringbootappsClient;
import com.azure.resourcemanager.offazurespringboot.fluent.models.SpringbootappsModelInner;
import com.azure.resourcemanager.offazurespringboot.models.SpringbootappsListResult;
import com.azure.resourcemanager.offazurespringboot.models.SpringbootappsPatch;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in SpringbootappsClient. */
public final class SpringbootappsClientImpl implements SpringbootappsClient {
    /** The proxy service used to perform REST calls. */
    private final SpringbootappsService service;

    /** The service client containing this operation class. */
    private final SpringAppsDiscoveryClientImpl client;

    /**
     * Initializes an instance of SpringbootappsClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    SpringbootappsClientImpl(SpringAppsDiscoveryClientImpl client) {
        this.service =
            RestProxy.create(SpringbootappsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for SpringAppsDiscoveryClientSpringbootapps to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "SpringAppsDiscoveryC")
    public interface SpringbootappsService {
        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzureSpringBoot/springbootsites/{siteName}/springbootapps/{springbootappsName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SpringbootappsModelInner>> get(
            @HostParam("$host") String endpoint,
            @PathParam("siteName") String siteName,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("springbootappsName") String springbootappsName,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzureSpringBoot/springbootsites/{siteName}/springbootapps/{springbootappsName}")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SpringbootappsModelInner>> createOrUpdate(
            @HostParam("$host") String endpoint,
            @PathParam("siteName") String siteName,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("springbootappsName") String springbootappsName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") SpringbootappsModelInner springbootapps,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzureSpringBoot/springbootsites/{siteName}/springbootapps/{springbootappsName}")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SpringbootappsModelInner>> delete(
            @HostParam("$host") String endpoint,
            @PathParam("siteName") String siteName,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("springbootappsName") String springbootappsName,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Patch(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzureSpringBoot/springbootsites/{siteName}/springbootapps/{springbootappsName}")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SpringbootappsModelInner>> update(
            @HostParam("$host") String endpoint,
            @PathParam("siteName") String siteName,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("springbootappsName") String springbootappsName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") SpringbootappsPatch springbootapps,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzureSpringBoot/springbootsites/{siteName}/springbootapps")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SpringbootappsListResult>> listByResourceGroup(
            @HostParam("$host") String endpoint,
            @PathParam("siteName") String siteName,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/providers/Microsoft.OffAzureSpringBoot/springbootsites/{siteName}/springbootapps")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SpringbootappsListResult>> listBySubscription(
            @HostParam("$host") String endpoint,
            @PathParam("siteName") String siteName,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SpringbootappsListResult>> listByResourceGroupNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SpringbootappsListResult>> listBySubscriptionNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Get a springbootapps resource.
     *
     * @param siteName The springbootsites name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param springbootappsName The springbootapps name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a springbootapps resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SpringbootappsModelInner>> getWithResponseAsync(
        String siteName, String resourceGroupName, String springbootappsName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (siteName == null) {
            return Mono.error(new IllegalArgumentException("Parameter siteName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (springbootappsName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter springbootappsName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .get(
                            this.client.getEndpoint(),
                            siteName,
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            springbootappsName,
                            this.client.getApiVersion(),
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get a springbootapps resource.
     *
     * @param siteName The springbootsites name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param springbootappsName The springbootapps name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a springbootapps resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SpringbootappsModelInner>> getWithResponseAsync(
        String siteName, String resourceGroupName, String springbootappsName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (siteName == null) {
            return Mono.error(new IllegalArgumentException("Parameter siteName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (springbootappsName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter springbootappsName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .get(
                this.client.getEndpoint(),
                siteName,
                this.client.getSubscriptionId(),
                resourceGroupName,
                springbootappsName,
                this.client.getApiVersion(),
                accept,
                context);
    }

    /**
     * Get a springbootapps resource.
     *
     * @param siteName The springbootsites name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param springbootappsName The springbootapps name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a springbootapps resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SpringbootappsModelInner> getAsync(
        String siteName, String resourceGroupName, String springbootappsName) {
        return getWithResponseAsync(siteName, resourceGroupName, springbootappsName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get a springbootapps resource.
     *
     * @param siteName The springbootsites name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param springbootappsName The springbootapps name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a springbootapps resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SpringbootappsModelInner> getWithResponse(
        String siteName, String resourceGroupName, String springbootappsName, Context context) {
        return getWithResponseAsync(siteName, resourceGroupName, springbootappsName, context).block();
    }

    /**
     * Get a springbootapps resource.
     *
     * @param siteName The springbootsites name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param springbootappsName The springbootapps name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a springbootapps resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SpringbootappsModelInner get(String siteName, String resourceGroupName, String springbootappsName) {
        return getWithResponse(siteName, resourceGroupName, springbootappsName, Context.NONE).getValue();
    }

    /**
     * Create a springbootapps resource.
     *
     * @param siteName The springbootsites name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param springbootappsName The springbootapps name.
     * @param springbootapps Create a springbootapps payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the springbootapps envelope resource definition along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SpringbootappsModelInner>> createOrUpdateWithResponseAsync(
        String siteName, String resourceGroupName, String springbootappsName, SpringbootappsModelInner springbootapps) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (siteName == null) {
            return Mono.error(new IllegalArgumentException("Parameter siteName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (springbootappsName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter springbootappsName is required and cannot be null."));
        }
        if (springbootapps == null) {
            return Mono.error(new IllegalArgumentException("Parameter springbootapps is required and cannot be null."));
        } else {
            springbootapps.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .createOrUpdate(
                            this.client.getEndpoint(),
                            siteName,
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            springbootappsName,
                            this.client.getApiVersion(),
                            springbootapps,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create a springbootapps resource.
     *
     * @param siteName The springbootsites name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param springbootappsName The springbootapps name.
     * @param springbootapps Create a springbootapps payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the springbootapps envelope resource definition along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SpringbootappsModelInner>> createOrUpdateWithResponseAsync(
        String siteName,
        String resourceGroupName,
        String springbootappsName,
        SpringbootappsModelInner springbootapps,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (siteName == null) {
            return Mono.error(new IllegalArgumentException("Parameter siteName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (springbootappsName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter springbootappsName is required and cannot be null."));
        }
        if (springbootapps == null) {
            return Mono.error(new IllegalArgumentException("Parameter springbootapps is required and cannot be null."));
        } else {
            springbootapps.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .createOrUpdate(
                this.client.getEndpoint(),
                siteName,
                this.client.getSubscriptionId(),
                resourceGroupName,
                springbootappsName,
                this.client.getApiVersion(),
                springbootapps,
                accept,
                context);
    }

    /**
     * Create a springbootapps resource.
     *
     * @param siteName The springbootsites name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param springbootappsName The springbootapps name.
     * @param springbootapps Create a springbootapps payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the springbootapps envelope resource definition on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SpringbootappsModelInner> createOrUpdateAsync(
        String siteName, String resourceGroupName, String springbootappsName, SpringbootappsModelInner springbootapps) {
        return createOrUpdateWithResponseAsync(siteName, resourceGroupName, springbootappsName, springbootapps)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Create a springbootapps resource.
     *
     * @param siteName The springbootsites name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param springbootappsName The springbootapps name.
     * @param springbootapps Create a springbootapps payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the springbootapps envelope resource definition along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SpringbootappsModelInner> createOrUpdateWithResponse(
        String siteName,
        String resourceGroupName,
        String springbootappsName,
        SpringbootappsModelInner springbootapps,
        Context context) {
        return createOrUpdateWithResponseAsync(siteName, resourceGroupName, springbootappsName, springbootapps, context)
            .block();
    }

    /**
     * Create a springbootapps resource.
     *
     * @param siteName The springbootsites name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param springbootappsName The springbootapps name.
     * @param springbootapps Create a springbootapps payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the springbootapps envelope resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SpringbootappsModelInner createOrUpdate(
        String siteName, String resourceGroupName, String springbootappsName, SpringbootappsModelInner springbootapps) {
        return createOrUpdateWithResponse(siteName, resourceGroupName, springbootappsName, springbootapps, Context.NONE)
            .getValue();
    }

    /**
     * Delete a springbootapps resource.
     *
     * @param siteName The springbootsites name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param springbootappsName The springbootapps name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the springbootapps envelope resource definition along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SpringbootappsModelInner>> deleteWithResponseAsync(
        String siteName, String resourceGroupName, String springbootappsName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (siteName == null) {
            return Mono.error(new IllegalArgumentException("Parameter siteName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (springbootappsName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter springbootappsName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .delete(
                            this.client.getEndpoint(),
                            siteName,
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            springbootappsName,
                            this.client.getApiVersion(),
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Delete a springbootapps resource.
     *
     * @param siteName The springbootsites name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param springbootappsName The springbootapps name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the springbootapps envelope resource definition along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SpringbootappsModelInner>> deleteWithResponseAsync(
        String siteName, String resourceGroupName, String springbootappsName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (siteName == null) {
            return Mono.error(new IllegalArgumentException("Parameter siteName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (springbootappsName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter springbootappsName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .delete(
                this.client.getEndpoint(),
                siteName,
                this.client.getSubscriptionId(),
                resourceGroupName,
                springbootappsName,
                this.client.getApiVersion(),
                accept,
                context);
    }

    /**
     * Delete a springbootapps resource.
     *
     * @param siteName The springbootsites name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param springbootappsName The springbootapps name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the springbootapps envelope resource definition on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SpringbootappsModelInner> deleteAsync(
        String siteName, String resourceGroupName, String springbootappsName) {
        return deleteWithResponseAsync(siteName, resourceGroupName, springbootappsName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Delete a springbootapps resource.
     *
     * @param siteName The springbootsites name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param springbootappsName The springbootapps name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the springbootapps envelope resource definition along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SpringbootappsModelInner> deleteWithResponse(
        String siteName, String resourceGroupName, String springbootappsName, Context context) {
        return deleteWithResponseAsync(siteName, resourceGroupName, springbootappsName, context).block();
    }

    /**
     * Delete a springbootapps resource.
     *
     * @param siteName The springbootsites name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param springbootappsName The springbootapps name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the springbootapps envelope resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SpringbootappsModelInner delete(String siteName, String resourceGroupName, String springbootappsName) {
        return deleteWithResponse(siteName, resourceGroupName, springbootappsName, Context.NONE).getValue();
    }

    /**
     * Update a springbootapps resource.
     *
     * @param siteName The springbootsites name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param springbootappsName The springbootapps name.
     * @param springbootapps Update a springbootapps payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the springbootapps envelope resource definition along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SpringbootappsModelInner>> updateWithResponseAsync(
        String siteName, String resourceGroupName, String springbootappsName, SpringbootappsPatch springbootapps) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (siteName == null) {
            return Mono.error(new IllegalArgumentException("Parameter siteName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (springbootappsName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter springbootappsName is required and cannot be null."));
        }
        if (springbootapps == null) {
            return Mono.error(new IllegalArgumentException("Parameter springbootapps is required and cannot be null."));
        } else {
            springbootapps.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .update(
                            this.client.getEndpoint(),
                            siteName,
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            springbootappsName,
                            this.client.getApiVersion(),
                            springbootapps,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Update a springbootapps resource.
     *
     * @param siteName The springbootsites name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param springbootappsName The springbootapps name.
     * @param springbootapps Update a springbootapps payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the springbootapps envelope resource definition along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SpringbootappsModelInner>> updateWithResponseAsync(
        String siteName,
        String resourceGroupName,
        String springbootappsName,
        SpringbootappsPatch springbootapps,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (siteName == null) {
            return Mono.error(new IllegalArgumentException("Parameter siteName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (springbootappsName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter springbootappsName is required and cannot be null."));
        }
        if (springbootapps == null) {
            return Mono.error(new IllegalArgumentException("Parameter springbootapps is required and cannot be null."));
        } else {
            springbootapps.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .update(
                this.client.getEndpoint(),
                siteName,
                this.client.getSubscriptionId(),
                resourceGroupName,
                springbootappsName,
                this.client.getApiVersion(),
                springbootapps,
                accept,
                context);
    }

    /**
     * Update a springbootapps resource.
     *
     * @param siteName The springbootsites name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param springbootappsName The springbootapps name.
     * @param springbootapps Update a springbootapps payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the springbootapps envelope resource definition on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SpringbootappsModelInner> updateAsync(
        String siteName, String resourceGroupName, String springbootappsName, SpringbootappsPatch springbootapps) {
        return updateWithResponseAsync(siteName, resourceGroupName, springbootappsName, springbootapps)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Update a springbootapps resource.
     *
     * @param siteName The springbootsites name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param springbootappsName The springbootapps name.
     * @param springbootapps Update a springbootapps payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the springbootapps envelope resource definition along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SpringbootappsModelInner> updateWithResponse(
        String siteName,
        String resourceGroupName,
        String springbootappsName,
        SpringbootappsPatch springbootapps,
        Context context) {
        return updateWithResponseAsync(siteName, resourceGroupName, springbootappsName, springbootapps, context)
            .block();
    }

    /**
     * Update a springbootapps resource.
     *
     * @param siteName The springbootsites name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param springbootappsName The springbootapps name.
     * @param springbootapps Update a springbootapps payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the springbootapps envelope resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SpringbootappsModelInner update(
        String siteName, String resourceGroupName, String springbootappsName, SpringbootappsPatch springbootapps) {
        return updateWithResponse(siteName, resourceGroupName, springbootappsName, springbootapps, Context.NONE)
            .getValue();
    }

    /**
     * List springbootapps resource by resourceGroup.
     *
     * @param siteName The springbootsites name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the springbootapps list resource definition along with {@link PagedResponse} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SpringbootappsModelInner>> listByResourceGroupSinglePageAsync(
        String siteName, String resourceGroupName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (siteName == null) {
            return Mono.error(new IllegalArgumentException("Parameter siteName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listByResourceGroup(
                            this.client.getEndpoint(),
                            siteName,
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            this.client.getApiVersion(),
                            accept,
                            context))
            .<PagedResponse<SpringbootappsModelInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List springbootapps resource by resourceGroup.
     *
     * @param siteName The springbootsites name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the springbootapps list resource definition along with {@link PagedResponse} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SpringbootappsModelInner>> listByResourceGroupSinglePageAsync(
        String siteName, String resourceGroupName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (siteName == null) {
            return Mono.error(new IllegalArgumentException("Parameter siteName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByResourceGroup(
                this.client.getEndpoint(),
                siteName,
                this.client.getSubscriptionId(),
                resourceGroupName,
                this.client.getApiVersion(),
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * List springbootapps resource by resourceGroup.
     *
     * @param siteName The springbootsites name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the springbootapps list resource definition as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<SpringbootappsModelInner> listByResourceGroupAsync(String siteName, String resourceGroupName) {
        return new PagedFlux<>(
            () -> listByResourceGroupSinglePageAsync(siteName, resourceGroupName),
            nextLink -> listByResourceGroupNextSinglePageAsync(nextLink));
    }

    /**
     * List springbootapps resource by resourceGroup.
     *
     * @param siteName The springbootsites name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the springbootapps list resource definition as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<SpringbootappsModelInner> listByResourceGroupAsync(
        String siteName, String resourceGroupName, Context context) {
        return new PagedFlux<>(
            () -> listByResourceGroupSinglePageAsync(siteName, resourceGroupName, context),
            nextLink -> listByResourceGroupNextSinglePageAsync(nextLink, context));
    }

    /**
     * List springbootapps resource by resourceGroup.
     *
     * @param siteName The springbootsites name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the springbootapps list resource definition as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SpringbootappsModelInner> listByResourceGroup(String siteName, String resourceGroupName) {
        return new PagedIterable<>(listByResourceGroupAsync(siteName, resourceGroupName));
    }

    /**
     * List springbootapps resource by resourceGroup.
     *
     * @param siteName The springbootsites name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the springbootapps list resource definition as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SpringbootappsModelInner> listByResourceGroup(
        String siteName, String resourceGroupName, Context context) {
        return new PagedIterable<>(listByResourceGroupAsync(siteName, resourceGroupName, context));
    }

    /**
     * List springbootapps resource by subscription.
     *
     * @param siteName The springbootsites name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the springbootapps list resource definition along with {@link PagedResponse} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SpringbootappsModelInner>> listBySubscriptionSinglePageAsync(String siteName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (siteName == null) {
            return Mono.error(new IllegalArgumentException("Parameter siteName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listBySubscription(
                            this.client.getEndpoint(),
                            siteName,
                            this.client.getSubscriptionId(),
                            this.client.getApiVersion(),
                            accept,
                            context))
            .<PagedResponse<SpringbootappsModelInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List springbootapps resource by subscription.
     *
     * @param siteName The springbootsites name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the springbootapps list resource definition along with {@link PagedResponse} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SpringbootappsModelInner>> listBySubscriptionSinglePageAsync(
        String siteName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (siteName == null) {
            return Mono.error(new IllegalArgumentException("Parameter siteName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listBySubscription(
                this.client.getEndpoint(),
                siteName,
                this.client.getSubscriptionId(),
                this.client.getApiVersion(),
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * List springbootapps resource by subscription.
     *
     * @param siteName The springbootsites name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the springbootapps list resource definition as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<SpringbootappsModelInner> listBySubscriptionAsync(String siteName) {
        return new PagedFlux<>(
            () -> listBySubscriptionSinglePageAsync(siteName),
            nextLink -> listBySubscriptionNextSinglePageAsync(nextLink));
    }

    /**
     * List springbootapps resource by subscription.
     *
     * @param siteName The springbootsites name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the springbootapps list resource definition as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<SpringbootappsModelInner> listBySubscriptionAsync(String siteName, Context context) {
        return new PagedFlux<>(
            () -> listBySubscriptionSinglePageAsync(siteName, context),
            nextLink -> listBySubscriptionNextSinglePageAsync(nextLink, context));
    }

    /**
     * List springbootapps resource by subscription.
     *
     * @param siteName The springbootsites name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the springbootapps list resource definition as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SpringbootappsModelInner> listBySubscription(String siteName) {
        return new PagedIterable<>(listBySubscriptionAsync(siteName));
    }

    /**
     * List springbootapps resource by subscription.
     *
     * @param siteName The springbootsites name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the springbootapps list resource definition as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SpringbootappsModelInner> listBySubscription(String siteName, Context context) {
        return new PagedIterable<>(listBySubscriptionAsync(siteName, context));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the springbootapps list resource definition along with {@link PagedResponse} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SpringbootappsModelInner>> listByResourceGroupNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listByResourceGroupNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<SpringbootappsModelInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the springbootapps list resource definition along with {@link PagedResponse} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SpringbootappsModelInner>> listByResourceGroupNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByResourceGroupNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the springbootapps list resource definition along with {@link PagedResponse} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SpringbootappsModelInner>> listBySubscriptionNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listBySubscriptionNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<SpringbootappsModelInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the springbootapps list resource definition along with {@link PagedResponse} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SpringbootappsModelInner>> listBySubscriptionNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listBySubscriptionNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }
}
