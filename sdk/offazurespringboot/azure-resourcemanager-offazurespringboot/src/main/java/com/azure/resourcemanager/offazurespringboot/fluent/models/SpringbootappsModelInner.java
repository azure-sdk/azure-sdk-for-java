// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.offazurespringboot.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.resourcemanager.offazurespringboot.models.Error;
import com.azure.resourcemanager.offazurespringboot.models.ProvisioningState;
import com.azure.resourcemanager.offazurespringboot.models.SpringbootappsPropertiesApplicationConfigurationsItem;
import com.azure.resourcemanager.offazurespringboot.models.SpringbootappsPropertiesInstancesItem;
import com.azure.resourcemanager.offazurespringboot.models.SpringbootappsPropertiesMiscsItem;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * The springbootapps envelope resource definition.
 */
@Fluent
public final class SpringbootappsModelInner extends ProxyResource {
    /*
     * The resource-specific properties for this resource.
     */
    @JsonProperty(value = "properties")
    private SpringbootappsProperties innerProperties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /**
     * Creates an instance of SpringbootappsModelInner class.
     */
    public SpringbootappsModelInner() {
    }

    /**
     * Get the innerProperties property: The resource-specific properties for this resource.
     * 
     * @return the innerProperties value.
     */
    private SpringbootappsProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the appName property: The name of SpringBootApp.
     * 
     * @return the appName value.
     */
    public String appName() {
        return this.innerProperties() == null ? null : this.innerProperties().appName();
    }

    /**
     * Set the appName property: The name of SpringBootApp.
     * 
     * @param appName the appName value to set.
     * @return the SpringbootappsModelInner object itself.
     */
    public SpringbootappsModelInner withAppName(String appName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SpringbootappsProperties();
        }
        this.innerProperties().withAppName(appName);
        return this;
    }

    /**
     * Get the artifactName property: The artifact name of SpringBootApp.
     * 
     * @return the artifactName value.
     */
    public String artifactName() {
        return this.innerProperties() == null ? null : this.innerProperties().artifactName();
    }

    /**
     * Set the artifactName property: The artifact name of SpringBootApp.
     * 
     * @param artifactName the artifactName value to set.
     * @return the SpringbootappsModelInner object itself.
     */
    public SpringbootappsModelInner withArtifactName(String artifactName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SpringbootappsProperties();
        }
        this.innerProperties().withArtifactName(artifactName);
        return this;
    }

    /**
     * Get the appPort property: The application port.
     * 
     * @return the appPort value.
     */
    public Integer appPort() {
        return this.innerProperties() == null ? null : this.innerProperties().appPort();
    }

    /**
     * Set the appPort property: The application port.
     * 
     * @param appPort the appPort value to set.
     * @return the SpringbootappsModelInner object itself.
     */
    public SpringbootappsModelInner withAppPort(Integer appPort) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SpringbootappsProperties();
        }
        this.innerProperties().withAppPort(appPort);
        return this;
    }

    /**
     * Get the appType property: The application type, whether it is a SpringBoot app.
     * 
     * @return the appType value.
     */
    public String appType() {
        return this.innerProperties() == null ? null : this.innerProperties().appType();
    }

    /**
     * Set the appType property: The application type, whether it is a SpringBoot app.
     * 
     * @param appType the appType value to set.
     * @return the SpringbootappsModelInner object itself.
     */
    public SpringbootappsModelInner withAppType(String appType) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SpringbootappsProperties();
        }
        this.innerProperties().withAppType(appType);
        return this;
    }

    /**
     * Get the applicationConfigurations property: The application configuration file list.
     * 
     * @return the applicationConfigurations value.
     */
    public List<SpringbootappsPropertiesApplicationConfigurationsItem> applicationConfigurations() {
        return this.innerProperties() == null ? null : this.innerProperties().applicationConfigurations();
    }

    /**
     * Set the applicationConfigurations property: The application configuration file list.
     * 
     * @param applicationConfigurations the applicationConfigurations value to set.
     * @return the SpringbootappsModelInner object itself.
     */
    public SpringbootappsModelInner withApplicationConfigurations(
        List<SpringbootappsPropertiesApplicationConfigurationsItem> applicationConfigurations) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SpringbootappsProperties();
        }
        this.innerProperties().withApplicationConfigurations(applicationConfigurations);
        return this;
    }

    /**
     * Get the bindingPorts property: The application binding port list.
     * 
     * @return the bindingPorts value.
     */
    public List<Integer> bindingPorts() {
        return this.innerProperties() == null ? null : this.innerProperties().bindingPorts();
    }

    /**
     * Set the bindingPorts property: The application binding port list.
     * 
     * @param bindingPorts the bindingPorts value to set.
     * @return the SpringbootappsModelInner object itself.
     */
    public SpringbootappsModelInner withBindingPorts(List<Integer> bindingPorts) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SpringbootappsProperties();
        }
        this.innerProperties().withBindingPorts(bindingPorts);
        return this;
    }

    /**
     * Get the buildJdkVersion property: The jdk version in build.
     * 
     * @return the buildJdkVersion value.
     */
    public String buildJdkVersion() {
        return this.innerProperties() == null ? null : this.innerProperties().buildJdkVersion();
    }

    /**
     * Set the buildJdkVersion property: The jdk version in build.
     * 
     * @param buildJdkVersion the buildJdkVersion value to set.
     * @return the SpringbootappsModelInner object itself.
     */
    public SpringbootappsModelInner withBuildJdkVersion(String buildJdkVersion) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SpringbootappsProperties();
        }
        this.innerProperties().withBuildJdkVersion(buildJdkVersion);
        return this;
    }

    /**
     * Get the certificates property: The certificate file list.
     * 
     * @return the certificates value.
     */
    public List<String> certificates() {
        return this.innerProperties() == null ? null : this.innerProperties().certificates();
    }

    /**
     * Set the certificates property: The certificate file list.
     * 
     * @param certificates the certificates value to set.
     * @return the SpringbootappsModelInner object itself.
     */
    public SpringbootappsModelInner withCertificates(List<String> certificates) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SpringbootappsProperties();
        }
        this.innerProperties().withCertificates(certificates);
        return this;
    }

    /**
     * Get the checksum property: The checksum of jar file.
     * 
     * @return the checksum value.
     */
    public String checksum() {
        return this.innerProperties() == null ? null : this.innerProperties().checksum();
    }

    /**
     * Set the checksum property: The checksum of jar file.
     * 
     * @param checksum the checksum value to set.
     * @return the SpringbootappsModelInner object itself.
     */
    public SpringbootappsModelInner withChecksum(String checksum) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SpringbootappsProperties();
        }
        this.innerProperties().withChecksum(checksum);
        return this;
    }

    /**
     * Get the dependencies property: The dependency list.
     * 
     * @return the dependencies value.
     */
    public List<String> dependencies() {
        return this.innerProperties() == null ? null : this.innerProperties().dependencies();
    }

    /**
     * Set the dependencies property: The dependency list.
     * 
     * @param dependencies the dependencies value to set.
     * @return the SpringbootappsModelInner object itself.
     */
    public SpringbootappsModelInner withDependencies(List<String> dependencies) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SpringbootappsProperties();
        }
        this.innerProperties().withDependencies(dependencies);
        return this;
    }

    /**
     * Get the environments property: The environment variable list.
     * 
     * @return the environments value.
     */
    public List<String> environments() {
        return this.innerProperties() == null ? null : this.innerProperties().environments();
    }

    /**
     * Set the environments property: The environment variable list.
     * 
     * @param environments the environments value to set.
     * @return the SpringbootappsModelInner object itself.
     */
    public SpringbootappsModelInner withEnvironments(List<String> environments) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SpringbootappsProperties();
        }
        this.innerProperties().withEnvironments(environments);
        return this;
    }

    /**
     * Get the instanceCount property: The total instance count the app deployed.
     * 
     * @return the instanceCount value.
     */
    public Integer instanceCount() {
        return this.innerProperties() == null ? null : this.innerProperties().instanceCount();
    }

    /**
     * Set the instanceCount property: The total instance count the app deployed.
     * 
     * @param instanceCount the instanceCount value to set.
     * @return the SpringbootappsModelInner object itself.
     */
    public SpringbootappsModelInner withInstanceCount(Integer instanceCount) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SpringbootappsProperties();
        }
        this.innerProperties().withInstanceCount(instanceCount);
        return this;
    }

    /**
     * Get the jarFileLocation property: The jar file location on the server.
     * 
     * @return the jarFileLocation value.
     */
    public String jarFileLocation() {
        return this.innerProperties() == null ? null : this.innerProperties().jarFileLocation();
    }

    /**
     * Set the jarFileLocation property: The jar file location on the server.
     * 
     * @param jarFileLocation the jarFileLocation value to set.
     * @return the SpringbootappsModelInner object itself.
     */
    public SpringbootappsModelInner withJarFileLocation(String jarFileLocation) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SpringbootappsProperties();
        }
        this.innerProperties().withJarFileLocation(jarFileLocation);
        return this;
    }

    /**
     * Get the jvmMemoryInMB property: The jvm heap memory allocated.
     * 
     * @return the jvmMemoryInMB value.
     */
    public Integer jvmMemoryInMB() {
        return this.innerProperties() == null ? null : this.innerProperties().jvmMemoryInMB();
    }

    /**
     * Set the jvmMemoryInMB property: The jvm heap memory allocated.
     * 
     * @param jvmMemoryInMB the jvmMemoryInMB value to set.
     * @return the SpringbootappsModelInner object itself.
     */
    public SpringbootappsModelInner withJvmMemoryInMB(Integer jvmMemoryInMB) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SpringbootappsProperties();
        }
        this.innerProperties().withJvmMemoryInMB(jvmMemoryInMB);
        return this;
    }

    /**
     * Get the jvmOptions property: The jvm options.
     * 
     * @return the jvmOptions value.
     */
    public List<String> jvmOptions() {
        return this.innerProperties() == null ? null : this.innerProperties().jvmOptions();
    }

    /**
     * Set the jvmOptions property: The jvm options.
     * 
     * @param jvmOptions the jvmOptions value to set.
     * @return the SpringbootappsModelInner object itself.
     */
    public SpringbootappsModelInner withJvmOptions(List<String> jvmOptions) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SpringbootappsProperties();
        }
        this.innerProperties().withJvmOptions(jvmOptions);
        return this;
    }

    /**
     * Get the miscs property: The other types of date collected.
     * 
     * @return the miscs value.
     */
    public List<SpringbootappsPropertiesMiscsItem> miscs() {
        return this.innerProperties() == null ? null : this.innerProperties().miscs();
    }

    /**
     * Set the miscs property: The other types of date collected.
     * 
     * @param miscs the miscs value to set.
     * @return the SpringbootappsModelInner object itself.
     */
    public SpringbootappsModelInner withMiscs(List<SpringbootappsPropertiesMiscsItem> miscs) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SpringbootappsProperties();
        }
        this.innerProperties().withMiscs(miscs);
        return this;
    }

    /**
     * Get the instances property: The breakdown info for app instances on all the servers.
     * 
     * @return the instances value.
     */
    public List<SpringbootappsPropertiesInstancesItem> instances() {
        return this.innerProperties() == null ? null : this.innerProperties().instances();
    }

    /**
     * Set the instances property: The breakdown info for app instances on all the servers.
     * 
     * @param instances the instances value to set.
     * @return the SpringbootappsModelInner object itself.
     */
    public SpringbootappsModelInner withInstances(List<SpringbootappsPropertiesInstancesItem> instances) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SpringbootappsProperties();
        }
        this.innerProperties().withInstances(instances);
        return this;
    }

    /**
     * Get the runtimeJdkVersion property: The jdk version installed on server.
     * 
     * @return the runtimeJdkVersion value.
     */
    public String runtimeJdkVersion() {
        return this.innerProperties() == null ? null : this.innerProperties().runtimeJdkVersion();
    }

    /**
     * Set the runtimeJdkVersion property: The jdk version installed on server.
     * 
     * @param runtimeJdkVersion the runtimeJdkVersion value to set.
     * @return the SpringbootappsModelInner object itself.
     */
    public SpringbootappsModelInner withRuntimeJdkVersion(String runtimeJdkVersion) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SpringbootappsProperties();
        }
        this.innerProperties().withRuntimeJdkVersion(runtimeJdkVersion);
        return this;
    }

    /**
     * Get the servers property: The server list the app installed.
     * 
     * @return the servers value.
     */
    public List<String> servers() {
        return this.innerProperties() == null ? null : this.innerProperties().servers();
    }

    /**
     * Set the servers property: The server list the app installed.
     * 
     * @param servers the servers value to set.
     * @return the SpringbootappsModelInner object itself.
     */
    public SpringbootappsModelInner withServers(List<String> servers) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SpringbootappsProperties();
        }
        this.innerProperties().withServers(servers);
        return this;
    }

    /**
     * Get the machineArmIds property: The machine ARM id list the app belongs to.
     * 
     * @return the machineArmIds value.
     */
    public List<String> machineArmIds() {
        return this.innerProperties() == null ? null : this.innerProperties().machineArmIds();
    }

    /**
     * Set the machineArmIds property: The machine ARM id list the app belongs to.
     * 
     * @param machineArmIds the machineArmIds value to set.
     * @return the SpringbootappsModelInner object itself.
     */
    public SpringbootappsModelInner withMachineArmIds(List<String> machineArmIds) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SpringbootappsProperties();
        }
        this.innerProperties().withMachineArmIds(machineArmIds);
        return this;
    }

    /**
     * Get the siteName property: The site name.
     * 
     * @return the siteName value.
     */
    public String siteName() {
        return this.innerProperties() == null ? null : this.innerProperties().siteName();
    }

    /**
     * Set the siteName property: The site name.
     * 
     * @param siteName the siteName value to set.
     * @return the SpringbootappsModelInner object itself.
     */
    public SpringbootappsModelInner withSiteName(String siteName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SpringbootappsProperties();
        }
        this.innerProperties().withSiteName(siteName);
        return this;
    }

    /**
     * Get the springBootVersion property: The spring boot version.
     * 
     * @return the springBootVersion value.
     */
    public String springBootVersion() {
        return this.innerProperties() == null ? null : this.innerProperties().springBootVersion();
    }

    /**
     * Set the springBootVersion property: The spring boot version.
     * 
     * @param springBootVersion the springBootVersion value to set.
     * @return the SpringbootappsModelInner object itself.
     */
    public SpringbootappsModelInner withSpringBootVersion(String springBootVersion) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SpringbootappsProperties();
        }
        this.innerProperties().withSpringBootVersion(springBootVersion);
        return this;
    }

    /**
     * Get the staticContentLocations property: The static content location list.
     * 
     * @return the staticContentLocations value.
     */
    public List<String> staticContentLocations() {
        return this.innerProperties() == null ? null : this.innerProperties().staticContentLocations();
    }

    /**
     * Set the staticContentLocations property: The static content location list.
     * 
     * @param staticContentLocations the staticContentLocations value to set.
     * @return the SpringbootappsModelInner object itself.
     */
    public SpringbootappsModelInner withStaticContentLocations(List<String> staticContentLocations) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SpringbootappsProperties();
        }
        this.innerProperties().withStaticContentLocations(staticContentLocations);
        return this;
    }

    /**
     * Get the connectionStrings property: The connection string list.
     * 
     * @return the connectionStrings value.
     */
    public List<String> connectionStrings() {
        return this.innerProperties() == null ? null : this.innerProperties().connectionStrings();
    }

    /**
     * Set the connectionStrings property: The connection string list.
     * 
     * @param connectionStrings the connectionStrings value to set.
     * @return the SpringbootappsModelInner object itself.
     */
    public SpringbootappsModelInner withConnectionStrings(List<String> connectionStrings) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SpringbootappsProperties();
        }
        this.innerProperties().withConnectionStrings(connectionStrings);
        return this;
    }

    /**
     * Get the lastModifiedTime property: Time when this springbootapps jar file was last modified.
     * 
     * @return the lastModifiedTime value.
     */
    public OffsetDateTime lastModifiedTime() {
        return this.innerProperties() == null ? null : this.innerProperties().lastModifiedTime();
    }

    /**
     * Set the lastModifiedTime property: Time when this springbootapps jar file was last modified.
     * 
     * @param lastModifiedTime the lastModifiedTime value to set.
     * @return the SpringbootappsModelInner object itself.
     */
    public SpringbootappsModelInner withLastModifiedTime(OffsetDateTime lastModifiedTime) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SpringbootappsProperties();
        }
        this.innerProperties().withLastModifiedTime(lastModifiedTime);
        return this;
    }

    /**
     * Get the lastUpdatedTime property: Time when this springbootapps instance was last refreshed.
     * 
     * @return the lastUpdatedTime value.
     */
    public OffsetDateTime lastUpdatedTime() {
        return this.innerProperties() == null ? null : this.innerProperties().lastUpdatedTime();
    }

    /**
     * Set the lastUpdatedTime property: Time when this springbootapps instance was last refreshed.
     * 
     * @param lastUpdatedTime the lastUpdatedTime value to set.
     * @return the SpringbootappsModelInner object itself.
     */
    public SpringbootappsModelInner withLastUpdatedTime(OffsetDateTime lastUpdatedTime) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SpringbootappsProperties();
        }
        this.innerProperties().withLastUpdatedTime(lastUpdatedTime);
        return this;
    }

    /**
     * Get the provisioningState property: The resource provisioning state.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Set the provisioningState property: The resource provisioning state.
     * 
     * @param provisioningState the provisioningState value to set.
     * @return the SpringbootappsModelInner object itself.
     */
    public SpringbootappsModelInner withProvisioningState(ProvisioningState provisioningState) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SpringbootappsProperties();
        }
        this.innerProperties().withProvisioningState(provisioningState);
        return this;
    }

    /**
     * Get the errors property: The list of errors.
     * 
     * @return the errors value.
     */
    public List<Error> errors() {
        return this.innerProperties() == null ? null : this.innerProperties().errors();
    }

    /**
     * Set the errors property: The list of errors.
     * 
     * @param errors the errors value to set.
     * @return the SpringbootappsModelInner object itself.
     */
    public SpringbootappsModelInner withErrors(List<Error> errors) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SpringbootappsProperties();
        }
        this.innerProperties().withErrors(errors);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
