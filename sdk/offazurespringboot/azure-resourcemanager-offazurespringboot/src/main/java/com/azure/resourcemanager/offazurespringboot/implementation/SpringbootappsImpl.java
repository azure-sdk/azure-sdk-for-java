// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.offazurespringboot.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.offazurespringboot.fluent.SpringbootappsClient;
import com.azure.resourcemanager.offazurespringboot.fluent.models.SpringbootappsModelInner;
import com.azure.resourcemanager.offazurespringboot.models.Springbootapps;
import com.azure.resourcemanager.offazurespringboot.models.SpringbootappsModel;

public final class SpringbootappsImpl implements Springbootapps {
    private static final ClientLogger LOGGER = new ClientLogger(SpringbootappsImpl.class);

    private final SpringbootappsClient innerClient;

    private final com.azure.resourcemanager.offazurespringboot.SpringAppsDiscoveryManager serviceManager;

    public SpringbootappsImpl(
        SpringbootappsClient innerClient,
        com.azure.resourcemanager.offazurespringboot.SpringAppsDiscoveryManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<SpringbootappsModel> getWithResponse(
        String siteName, String resourceGroupName, String springbootappsName, Context context) {
        Response<SpringbootappsModelInner> inner =
            this.serviceClient().getWithResponse(siteName, resourceGroupName, springbootappsName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SpringbootappsModelImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SpringbootappsModel get(String siteName, String resourceGroupName, String springbootappsName) {
        SpringbootappsModelInner inner = this.serviceClient().get(siteName, resourceGroupName, springbootappsName);
        if (inner != null) {
            return new SpringbootappsModelImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SpringbootappsModel> deleteWithResponse(
        String siteName, String resourceGroupName, String springbootappsName, Context context) {
        Response<SpringbootappsModelInner> inner =
            this.serviceClient().deleteWithResponse(siteName, resourceGroupName, springbootappsName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SpringbootappsModelImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SpringbootappsModel delete(String siteName, String resourceGroupName, String springbootappsName) {
        SpringbootappsModelInner inner = this.serviceClient().delete(siteName, resourceGroupName, springbootappsName);
        if (inner != null) {
            return new SpringbootappsModelImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<SpringbootappsModel> listByResourceGroup(String siteName, String resourceGroupName) {
        PagedIterable<SpringbootappsModelInner> inner =
            this.serviceClient().listByResourceGroup(siteName, resourceGroupName);
        return Utils.mapPage(inner, inner1 -> new SpringbootappsModelImpl(inner1, this.manager()));
    }

    public PagedIterable<SpringbootappsModel> listByResourceGroup(
        String siteName, String resourceGroupName, Context context) {
        PagedIterable<SpringbootappsModelInner> inner =
            this.serviceClient().listByResourceGroup(siteName, resourceGroupName, context);
        return Utils.mapPage(inner, inner1 -> new SpringbootappsModelImpl(inner1, this.manager()));
    }

    public PagedIterable<SpringbootappsModel> listBySubscription(String siteName) {
        PagedIterable<SpringbootappsModelInner> inner = this.serviceClient().listBySubscription(siteName);
        return Utils.mapPage(inner, inner1 -> new SpringbootappsModelImpl(inner1, this.manager()));
    }

    public PagedIterable<SpringbootappsModel> listBySubscription(String siteName, Context context) {
        PagedIterable<SpringbootappsModelInner> inner = this.serviceClient().listBySubscription(siteName, context);
        return Utils.mapPage(inner, inner1 -> new SpringbootappsModelImpl(inner1, this.manager()));
    }

    public SpringbootappsModel getById(String id) {
        String siteName = Utils.getValueFromIdByName(id, "springbootsites");
        if (siteName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'springbootsites'.", id)));
        }
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String springbootappsName = Utils.getValueFromIdByName(id, "springbootapps");
        if (springbootappsName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'springbootapps'.", id)));
        }
        return this.getWithResponse(siteName, resourceGroupName, springbootappsName, Context.NONE).getValue();
    }

    public Response<SpringbootappsModel> getByIdWithResponse(String id, Context context) {
        String siteName = Utils.getValueFromIdByName(id, "springbootsites");
        if (siteName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'springbootsites'.", id)));
        }
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String springbootappsName = Utils.getValueFromIdByName(id, "springbootapps");
        if (springbootappsName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'springbootapps'.", id)));
        }
        return this.getWithResponse(siteName, resourceGroupName, springbootappsName, context);
    }

    public SpringbootappsModel deleteById(String id) {
        String siteName = Utils.getValueFromIdByName(id, "springbootsites");
        if (siteName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'springbootsites'.", id)));
        }
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String springbootappsName = Utils.getValueFromIdByName(id, "springbootapps");
        if (springbootappsName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'springbootapps'.", id)));
        }
        return this.deleteWithResponse(siteName, resourceGroupName, springbootappsName, Context.NONE).getValue();
    }

    public Response<SpringbootappsModel> deleteByIdWithResponse(String id, Context context) {
        String siteName = Utils.getValueFromIdByName(id, "springbootsites");
        if (siteName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'springbootsites'.", id)));
        }
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String springbootappsName = Utils.getValueFromIdByName(id, "springbootapps");
        if (springbootappsName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'springbootapps'.", id)));
        }
        return this.deleteWithResponse(siteName, resourceGroupName, springbootappsName, context);
    }

    private SpringbootappsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.offazurespringboot.SpringAppsDiscoveryManager manager() {
        return this.serviceManager;
    }

    public SpringbootappsModelImpl define(String name) {
        return new SpringbootappsModelImpl(name, this.manager());
    }
}
