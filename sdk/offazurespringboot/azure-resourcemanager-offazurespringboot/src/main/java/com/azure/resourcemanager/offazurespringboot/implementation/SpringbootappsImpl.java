// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.offazurespringboot.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.offazurespringboot.fluent.SpringbootappsClient;
import com.azure.resourcemanager.offazurespringboot.fluent.models.SpringbootappsModelInner;
import com.azure.resourcemanager.offazurespringboot.models.Springbootapps;
import com.azure.resourcemanager.offazurespringboot.models.SpringbootappsModel;
import com.azure.resourcemanager.offazurespringboot.models.SpringbootappsModelUpdate;

public final class SpringbootappsImpl implements Springbootapps {
    private static final ClientLogger LOGGER = new ClientLogger(SpringbootappsImpl.class);

    private final SpringbootappsClient innerClient;

    private final com.azure.resourcemanager.offazurespringboot.SpringAppsDiscoveryManager serviceManager;

    public SpringbootappsImpl(SpringbootappsClient innerClient,
        com.azure.resourcemanager.offazurespringboot.SpringAppsDiscoveryManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<SpringbootappsModel> listBySubscription(String springbootsitesName) {
        PagedIterable<SpringbootappsModelInner> inner = this.serviceClient().listBySubscription(springbootsitesName);
        return Utils.mapPage(inner, inner1 -> new SpringbootappsModelImpl(inner1, this.manager()));
    }

    public PagedIterable<SpringbootappsModel> listBySubscription(String springbootsitesName, Context context) {
        PagedIterable<SpringbootappsModelInner> inner
            = this.serviceClient().listBySubscription(springbootsitesName, context);
        return Utils.mapPage(inner, inner1 -> new SpringbootappsModelImpl(inner1, this.manager()));
    }

    public PagedIterable<SpringbootappsModel> listBySpringbootsitesModel(String resourceGroupName,
        String springbootsitesName) {
        PagedIterable<SpringbootappsModelInner> inner
            = this.serviceClient().listBySpringbootsitesModel(resourceGroupName, springbootsitesName);
        return Utils.mapPage(inner, inner1 -> new SpringbootappsModelImpl(inner1, this.manager()));
    }

    public PagedIterable<SpringbootappsModel> listBySpringbootsitesModel(String resourceGroupName,
        String springbootsitesName, Context context) {
        PagedIterable<SpringbootappsModelInner> inner
            = this.serviceClient().listBySpringbootsitesModel(resourceGroupName, springbootsitesName, context);
        return Utils.mapPage(inner, inner1 -> new SpringbootappsModelImpl(inner1, this.manager()));
    }

    public Response<SpringbootappsModel> getWithResponse(String resourceGroupName, String springbootsitesName,
        String springbootappsName, Context context) {
        Response<SpringbootappsModelInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, springbootsitesName, springbootappsName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new SpringbootappsModelImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SpringbootappsModel get(String resourceGroupName, String springbootsitesName, String springbootappsName) {
        SpringbootappsModelInner inner
            = this.serviceClient().get(resourceGroupName, springbootsitesName, springbootappsName);
        if (inner != null) {
            return new SpringbootappsModelImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public SpringbootappsModel update(String resourceGroupName, String springbootsitesName, String springbootappsName,
        SpringbootappsModelUpdate properties) {
        SpringbootappsModelInner inner
            = this.serviceClient().update(resourceGroupName, springbootsitesName, springbootappsName, properties);
        if (inner != null) {
            return new SpringbootappsModelImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public SpringbootappsModel update(String resourceGroupName, String springbootsitesName, String springbootappsName,
        SpringbootappsModelUpdate properties, Context context) {
        SpringbootappsModelInner inner = this.serviceClient().update(resourceGroupName, springbootsitesName,
            springbootappsName, properties, context);
        if (inner != null) {
            return new SpringbootappsModelImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    private SpringbootappsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.offazurespringboot.SpringAppsDiscoveryManager manager() {
        return this.serviceManager;
    }
}
