// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.offazurespringboot.implementation;

import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.offazurespringboot.fluent.models.SpringbootserversModelInner;
import com.azure.resourcemanager.offazurespringboot.models.Error;
import com.azure.resourcemanager.offazurespringboot.models.ProvisioningState;
import com.azure.resourcemanager.offazurespringboot.models.SpringbootserversModel;
import com.azure.resourcemanager.offazurespringboot.models.SpringbootserversModelUpdate;
import java.util.Collections;
import java.util.List;

public final class SpringbootserversModelImpl
    implements SpringbootserversModel, SpringbootserversModel.Definition, SpringbootserversModel.Update {
    private SpringbootserversModelInner innerObject;

    private final com.azure.resourcemanager.offazurespringboot.SpringAppsDiscoveryManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public Integer port() {
        return this.innerModel().port();
    }

    public String server() {
        return this.innerModel().server();
    }

    public List<String> fqdnAndIpAddressList() {
        List<String> inner = this.innerModel().fqdnAndIpAddressList();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public String machineArmId() {
        return this.innerModel().machineArmId();
    }

    public Integer totalApps() {
        return this.innerModel().totalApps();
    }

    public Integer springBootApps() {
        return this.innerModel().springBootApps();
    }

    public List<Error> errors() {
        List<Error> inner = this.innerModel().errors();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public ProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public SpringbootserversModelInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.offazurespringboot.SpringAppsDiscoveryManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String springbootsitesName;

    private String springbootserversName;

    private SpringbootserversModelUpdate updateProperties;

    public SpringbootserversModelImpl withExistingSpringbootsite(String resourceGroupName, String springbootsitesName) {
        this.resourceGroupName = resourceGroupName;
        this.springbootsitesName = springbootsitesName;
        return this;
    }

    public SpringbootserversModel create() {
        this.innerObject
            = serviceManager.serviceClient().getSpringbootservers().createOrUpdateWithResponse(resourceGroupName,
                springbootsitesName, springbootserversName, this.innerModel(), Context.NONE).getValue();
        return this;
    }

    public SpringbootserversModel create(Context context) {
        this.innerObject
            = serviceManager.serviceClient().getSpringbootservers().createOrUpdateWithResponse(resourceGroupName,
                springbootsitesName, springbootserversName, this.innerModel(), context).getValue();
        return this;
    }

    SpringbootserversModelImpl(String name,
        com.azure.resourcemanager.offazurespringboot.SpringAppsDiscoveryManager serviceManager) {
        this.innerObject = new SpringbootserversModelInner();
        this.serviceManager = serviceManager;
        this.springbootserversName = name;
    }

    public SpringbootserversModelImpl update() {
        this.updateProperties = new SpringbootserversModelUpdate();
        return this;
    }

    public SpringbootserversModel apply() {
        this.innerObject = serviceManager.serviceClient().getSpringbootservers().update(resourceGroupName,
            springbootsitesName, springbootserversName, updateProperties, Context.NONE);
        return this;
    }

    public SpringbootserversModel apply(Context context) {
        this.innerObject = serviceManager.serviceClient().getSpringbootservers().update(resourceGroupName,
            springbootsitesName, springbootserversName, updateProperties, context);
        return this;
    }

    SpringbootserversModelImpl(SpringbootserversModelInner innerObject,
        com.azure.resourcemanager.offazurespringboot.SpringAppsDiscoveryManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.springbootsitesName = Utils.getValueFromIdByName(innerObject.id(), "springbootsites");
        this.springbootserversName = Utils.getValueFromIdByName(innerObject.id(), "springbootservers");
    }

    public SpringbootserversModel refresh() {
        this.innerObject = serviceManager.serviceClient().getSpringbootservers()
            .getWithResponse(resourceGroupName, springbootsitesName, springbootserversName, Context.NONE).getValue();
        return this;
    }

    public SpringbootserversModel refresh(Context context) {
        this.innerObject = serviceManager.serviceClient().getSpringbootservers()
            .getWithResponse(resourceGroupName, springbootsitesName, springbootserversName, context).getValue();
        return this;
    }

    public SpringbootserversModelImpl withPort(Integer port) {
        if (isInCreateMode()) {
            this.innerModel().withPort(port);
            return this;
        } else {
            this.updateProperties.withPort(port);
            return this;
        }
    }

    public SpringbootserversModelImpl withServer(String server) {
        if (isInCreateMode()) {
            this.innerModel().withServer(server);
            return this;
        } else {
            this.updateProperties.withServer(server);
            return this;
        }
    }

    public SpringbootserversModelImpl withFqdnAndIpAddressList(List<String> fqdnAndIpAddressList) {
        if (isInCreateMode()) {
            this.innerModel().withFqdnAndIpAddressList(fqdnAndIpAddressList);
            return this;
        } else {
            this.updateProperties.withFqdnAndIpAddressList(fqdnAndIpAddressList);
            return this;
        }
    }

    public SpringbootserversModelImpl withMachineArmId(String machineArmId) {
        if (isInCreateMode()) {
            this.innerModel().withMachineArmId(machineArmId);
            return this;
        } else {
            this.updateProperties.withMachineArmId(machineArmId);
            return this;
        }
    }

    public SpringbootserversModelImpl withTotalApps(Integer totalApps) {
        if (isInCreateMode()) {
            this.innerModel().withTotalApps(totalApps);
            return this;
        } else {
            this.updateProperties.withTotalApps(totalApps);
            return this;
        }
    }

    public SpringbootserversModelImpl withSpringBootApps(Integer springBootApps) {
        if (isInCreateMode()) {
            this.innerModel().withSpringBootApps(springBootApps);
            return this;
        } else {
            this.updateProperties.withSpringBootApps(springBootApps);
            return this;
        }
    }

    public SpringbootserversModelImpl withErrors(List<Error> errors) {
        if (isInCreateMode()) {
            this.innerModel().withErrors(errors);
            return this;
        } else {
            this.updateProperties.withErrors(errors);
            return this;
        }
    }

    public SpringbootserversModelImpl withProvisioningState(ProvisioningState provisioningState) {
        if (isInCreateMode()) {
            this.innerModel().withProvisioningState(provisioningState);
            return this;
        } else {
            this.updateProperties.withProvisioningState(provisioningState);
            return this;
        }
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
