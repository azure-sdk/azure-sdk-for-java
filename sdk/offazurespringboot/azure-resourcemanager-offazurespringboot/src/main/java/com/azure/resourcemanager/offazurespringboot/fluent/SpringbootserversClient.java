// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.offazurespringboot.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.offazurespringboot.fluent.models.SpringbootserversModelInner;
import com.azure.resourcemanager.offazurespringboot.models.SpringbootserversPatch;

/** An instance of this class provides access to all the operations defined in SpringbootserversClient. */
public interface SpringbootserversClient {
    /**
     * List springbootservers resource.
     *
     * @param siteName The springbootsites name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param springbootserversName The springbootservers name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the springbootservers envelope resource definition along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<SpringbootserversModelInner> getWithResponse(
        String siteName, String resourceGroupName, String springbootserversName, Context context);

    /**
     * List springbootservers resource.
     *
     * @param siteName The springbootsites name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param springbootserversName The springbootservers name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the springbootservers envelope resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SpringbootserversModelInner get(String siteName, String resourceGroupName, String springbootserversName);

    /**
     * Create springbootservers resource.
     *
     * @param siteName The springbootsites name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param springbootserversName The springbootservers name.
     * @param springbootservers Create a springbootservers payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the springbootservers envelope resource definition along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<SpringbootserversModelInner> createOrUpdateWithResponse(
        String siteName,
        String resourceGroupName,
        String springbootserversName,
        SpringbootserversModelInner springbootservers,
        Context context);

    /**
     * Create springbootservers resource.
     *
     * @param siteName The springbootsites name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param springbootserversName The springbootservers name.
     * @param springbootservers Create a springbootservers payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the springbootservers envelope resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SpringbootserversModelInner createOrUpdate(
        String siteName,
        String resourceGroupName,
        String springbootserversName,
        SpringbootserversModelInner springbootservers);

    /**
     * Delete springbootservers resource.
     *
     * @param siteName The springbootsites name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param springbootserversName The springbootservers name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(
        String siteName, String resourceGroupName, String springbootserversName);

    /**
     * Delete springbootservers resource.
     *
     * @param siteName The springbootsites name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param springbootserversName The springbootservers name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(
        String siteName, String resourceGroupName, String springbootserversName, Context context);

    /**
     * Delete springbootservers resource.
     *
     * @param siteName The springbootsites name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param springbootserversName The springbootservers name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String siteName, String resourceGroupName, String springbootserversName);

    /**
     * Delete springbootservers resource.
     *
     * @param siteName The springbootsites name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param springbootserversName The springbootservers name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String siteName, String resourceGroupName, String springbootserversName, Context context);

    /**
     * Update springbootservers resource.
     *
     * @param siteName The springbootsites name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param springbootserversName The springbootservers name.
     * @param springbootservers Update a springbootservers payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the springbootservers envelope resource definition along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<SpringbootserversModelInner> updateWithResponse(
        String siteName,
        String resourceGroupName,
        String springbootserversName,
        SpringbootserversPatch springbootservers,
        Context context);

    /**
     * Update springbootservers resource.
     *
     * @param siteName The springbootsites name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param springbootserversName The springbootservers name.
     * @param springbootservers Update a springbootservers payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the springbootservers envelope resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SpringbootserversModelInner update(
        String siteName,
        String resourceGroupName,
        String springbootserversName,
        SpringbootserversPatch springbootservers);

    /**
     * List springbootservers resource by resourceGroup.
     *
     * @param siteName The springbootsites name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the springbootservers list resource definition as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<SpringbootserversModelInner> listByResourceGroup(String siteName, String resourceGroupName);

    /**
     * List springbootservers resource by resourceGroup.
     *
     * @param siteName The springbootsites name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the springbootservers list resource definition as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<SpringbootserversModelInner> listByResourceGroup(
        String siteName, String resourceGroupName, Context context);

    /**
     * List springbootservers resource by subscription.
     *
     * @param siteName The springbootsites name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the springbootservers list resource definition as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<SpringbootserversModelInner> listBySubscription(String siteName);

    /**
     * List springbootservers resource by subscription.
     *
     * @param siteName The springbootsites name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the springbootservers list resource definition as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<SpringbootserversModelInner> listBySubscription(String siteName, Context context);
}
