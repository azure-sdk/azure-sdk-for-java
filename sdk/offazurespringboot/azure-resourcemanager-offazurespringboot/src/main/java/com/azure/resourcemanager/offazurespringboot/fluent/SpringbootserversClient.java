// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.offazurespringboot.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.offazurespringboot.fluent.models.SpringbootserversModelInner;
import com.azure.resourcemanager.offazurespringboot.models.SpringbootserversModelUpdate;

/**
 * An instance of this class provides access to all the operations defined in SpringbootserversClient.
 */
public interface SpringbootserversClient {
    /**
     * List springbootservers resource by subscription.
     * 
     * @param springbootsitesName The springbootsites name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a SpringbootserversModel list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<SpringbootserversModelInner> listBySubscription(String springbootsitesName);

    /**
     * List springbootservers resource by subscription.
     * 
     * @param springbootsitesName The springbootsites name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a SpringbootserversModel list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<SpringbootserversModelInner> listBySubscription(String springbootsitesName, Context context);

    /**
     * List springbootservers resource by resourceGroup.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param springbootsitesName The springbootsites name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a SpringbootserversModel list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<SpringbootserversModelInner> listBySpringbootsitesModel(String resourceGroupName,
        String springbootsitesName);

    /**
     * List springbootservers resource by resourceGroup.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param springbootsitesName The springbootsites name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a SpringbootserversModel list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<SpringbootserversModelInner> listBySpringbootsitesModel(String resourceGroupName,
        String springbootsitesName, Context context);

    /**
     * List springbootservers resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param springbootsitesName The springbootsites name.
     * @param springbootserversName The springbootservers name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the springbootservers envelope resource definition along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<SpringbootserversModelInner> getWithResponse(String resourceGroupName, String springbootsitesName,
        String springbootserversName, Context context);

    /**
     * List springbootservers resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param springbootsitesName The springbootsites name.
     * @param springbootserversName The springbootservers name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the springbootservers envelope resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SpringbootserversModelInner get(String resourceGroupName, String springbootsitesName, String springbootserversName);

    /**
     * Create springbootservers resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param springbootsitesName The springbootsites name.
     * @param springbootserversName The springbootservers name.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the springbootservers envelope resource definition along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<SpringbootserversModelInner> createOrUpdateWithResponse(String resourceGroupName,
        String springbootsitesName, String springbootserversName, SpringbootserversModelInner resource,
        Context context);

    /**
     * Create springbootservers resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param springbootsitesName The springbootsites name.
     * @param springbootserversName The springbootservers name.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the springbootservers envelope resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SpringbootserversModelInner createOrUpdate(String resourceGroupName, String springbootsitesName,
        String springbootserversName, SpringbootserversModelInner resource);

    /**
     * Update springbootservers resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param springbootsitesName The springbootsites name.
     * @param springbootserversName The springbootservers name.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the springbootservers envelope resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<SpringbootserversModelInner>, SpringbootserversModelInner> beginUpdate(
        String resourceGroupName, String springbootsitesName, String springbootserversName,
        SpringbootserversModelUpdate properties);

    /**
     * Update springbootservers resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param springbootsitesName The springbootsites name.
     * @param springbootserversName The springbootservers name.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the springbootservers envelope resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<SpringbootserversModelInner>, SpringbootserversModelInner> beginUpdate(
        String resourceGroupName, String springbootsitesName, String springbootserversName,
        SpringbootserversModelUpdate properties, Context context);

    /**
     * Update springbootservers resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param springbootsitesName The springbootsites name.
     * @param springbootserversName The springbootservers name.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the springbootservers envelope resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SpringbootserversModelInner update(String resourceGroupName, String springbootsitesName,
        String springbootserversName, SpringbootserversModelUpdate properties);

    /**
     * Update springbootservers resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param springbootsitesName The springbootsites name.
     * @param springbootserversName The springbootservers name.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the springbootservers envelope resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SpringbootserversModelInner update(String resourceGroupName, String springbootsitesName,
        String springbootserversName, SpringbootserversModelUpdate properties, Context context);

    /**
     * Delete springbootservers resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param springbootsitesName The springbootsites name.
     * @param springbootserversName The springbootservers name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String springbootsitesName,
        String springbootserversName);

    /**
     * Delete springbootservers resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param springbootsitesName The springbootsites name.
     * @param springbootserversName The springbootservers name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String springbootsitesName,
        String springbootserversName, Context context);

    /**
     * Delete springbootservers resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param springbootsitesName The springbootsites name.
     * @param springbootserversName The springbootservers name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String springbootsitesName, String springbootserversName);

    /**
     * Delete springbootservers resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param springbootsitesName The springbootsites name.
     * @param springbootserversName The springbootservers name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String springbootsitesName, String springbootserversName, Context context);
}
