// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.offazurespringboot.generated;

import com.azure.resourcemanager.offazurespringboot.models.Error;
import com.azure.resourcemanager.offazurespringboot.models.ErrorSummariesProperties;
import com.azure.resourcemanager.offazurespringboot.models.ErrorSummaryModel;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/** Samples for ErrorSummaries CreateOrUpdate. */
public final class ErrorSummariesCreateOrUpdateSamples {
    /*
     * x-ms-original-file: specification/offazurespringboot/resource-manager/Microsoft.OffAzureSpringBoot/preview/2023-01-01-preview/examples/ErrorSummaries_CreateOrUpdate_MinimumSet_Gen.json
     */
    /**
     * Sample code: ErrorSummaries_CreateOrUpdate_MinimumSet_Gen.
     *
     * @param manager Entry point to SpringAppsDiscoveryManager.
     */
    public static void errorSummariesCreateOrUpdateMinimumSetGen(
        com.azure.resourcemanager.offazurespringboot.SpringAppsDiscoveryManager manager) {
        manager
            .errorSummaries()
            .define("K2lv")
            .withExistingSpringbootsite("rgspringbootdiscovery", "xxkzlvbihwxunadjcpjpjmghmhxrqyvghtpfps")
            .withProperties(new ErrorSummariesProperties())
            .create();
    }

    /*
     * x-ms-original-file: specification/offazurespringboot/resource-manager/Microsoft.OffAzureSpringBoot/preview/2023-01-01-preview/examples/ErrorSummaries_CreateOrUpdate_MaximumSet_Gen.json
     */
    /**
     * Sample code: ErrorSummaries_CreateOrUpdate_MaximumSet_Gen.
     *
     * @param manager Entry point to SpringAppsDiscoveryManager.
     */
    public static void errorSummariesCreateOrUpdateMaximumSetGen(
        com.azure.resourcemanager.offazurespringboot.SpringAppsDiscoveryManager manager) {
        manager
            .errorSummaries()
            .define("K2lv")
            .withExistingSpringbootsite("rgspringbootdiscovery", "xxkzlvbihwxunadjcpjpjmghmhxrqyvghtpfps")
            .withTags(mapOf("key2085", "fakeTokenPlaceholder"))
            .withProperties(
                new ErrorSummariesProperties()
                    .withDiscoveryScopeErrorSummaries(
                        Arrays
                            .asList(
                                new ErrorSummaryModel()
                                    .withAffectedResourceType("kprvjasvybficrqctgbjpaek")
                                    .withAffectedObjectsCount(2)))
                    .withErrors(
                        Arrays
                            .asList(
                                new Error()
                                    .withId(13)
                                    .withCode("fakeTokenPlaceholder")
                                    .withSummaryMessage("knjufnfkdpukqiuqzfviwnss")
                                    .withRunAsAccountId("knjufnfkdpukqiuqzfviwnss")
                                    .withMessage("knjufnfkdpukqiuqzfviwnss")
                                    .withPossibleCauses("knjufnfkdpukqiuqzfviwnss")
                                    .withRecommendedAction("qpycieevlbrcomlwooiw")
                                    .withSeverity("wcusqqmqwo")
                                    .withUpdatedTimestamp(OffsetDateTime.parse("2022-12-02T09:28:24.094Z")))))
            .create();
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
