// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurefleet.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Details of the Compute Fleet.
 */
@Fluent
public final class FleetPropertiesUpdate implements JsonSerializable<FleetPropertiesUpdate> {
    /*
     * Configuration Options for Spot instances in Compute Fleet.
     */
    private SpotPriorityProfile spotPriorityProfile;

    /*
     * Configuration Options for Regular instances in Compute Fleet.
     */
    private RegularPriorityProfile regularPriorityProfile;

    /*
     * List of VM sizes supported for Compute Fleet
     */
    private List<VmSizeProfile> vmSizesProfile;

    /*
     * Compute Profile to use for running user's workloads.
     */
    private ComputeProfileUpdate computeProfile;

    /**
     * Creates an instance of FleetPropertiesUpdate class.
     */
    public FleetPropertiesUpdate() {
    }

    /**
     * Get the spotPriorityProfile property: Configuration Options for Spot instances in Compute Fleet.
     * 
     * @return the spotPriorityProfile value.
     */
    public SpotPriorityProfile spotPriorityProfile() {
        return this.spotPriorityProfile;
    }

    /**
     * Set the spotPriorityProfile property: Configuration Options for Spot instances in Compute Fleet.
     * 
     * @param spotPriorityProfile the spotPriorityProfile value to set.
     * @return the FleetPropertiesUpdate object itself.
     */
    public FleetPropertiesUpdate withSpotPriorityProfile(SpotPriorityProfile spotPriorityProfile) {
        this.spotPriorityProfile = spotPriorityProfile;
        return this;
    }

    /**
     * Get the regularPriorityProfile property: Configuration Options for Regular instances in Compute Fleet.
     * 
     * @return the regularPriorityProfile value.
     */
    public RegularPriorityProfile regularPriorityProfile() {
        return this.regularPriorityProfile;
    }

    /**
     * Set the regularPriorityProfile property: Configuration Options for Regular instances in Compute Fleet.
     * 
     * @param regularPriorityProfile the regularPriorityProfile value to set.
     * @return the FleetPropertiesUpdate object itself.
     */
    public FleetPropertiesUpdate withRegularPriorityProfile(RegularPriorityProfile regularPriorityProfile) {
        this.regularPriorityProfile = regularPriorityProfile;
        return this;
    }

    /**
     * Get the vmSizesProfile property: List of VM sizes supported for Compute Fleet.
     * 
     * @return the vmSizesProfile value.
     */
    public List<VmSizeProfile> vmSizesProfile() {
        return this.vmSizesProfile;
    }

    /**
     * Set the vmSizesProfile property: List of VM sizes supported for Compute Fleet.
     * 
     * @param vmSizesProfile the vmSizesProfile value to set.
     * @return the FleetPropertiesUpdate object itself.
     */
    public FleetPropertiesUpdate withVmSizesProfile(List<VmSizeProfile> vmSizesProfile) {
        this.vmSizesProfile = vmSizesProfile;
        return this;
    }

    /**
     * Get the computeProfile property: Compute Profile to use for running user's workloads.
     * 
     * @return the computeProfile value.
     */
    public ComputeProfileUpdate computeProfile() {
        return this.computeProfile;
    }

    /**
     * Set the computeProfile property: Compute Profile to use for running user's workloads.
     * 
     * @param computeProfile the computeProfile value to set.
     * @return the FleetPropertiesUpdate object itself.
     */
    public FleetPropertiesUpdate withComputeProfile(ComputeProfileUpdate computeProfile) {
        this.computeProfile = computeProfile;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (spotPriorityProfile() != null) {
            spotPriorityProfile().validate();
        }
        if (regularPriorityProfile() != null) {
            regularPriorityProfile().validate();
        }
        if (vmSizesProfile() != null) {
            vmSizesProfile().forEach(e -> e.validate());
        }
        if (computeProfile() != null) {
            computeProfile().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("spotPriorityProfile", this.spotPriorityProfile);
        jsonWriter.writeJsonField("regularPriorityProfile", this.regularPriorityProfile);
        jsonWriter.writeArrayField("vmSizesProfile", this.vmSizesProfile,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("computeProfile", this.computeProfile);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FleetPropertiesUpdate from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FleetPropertiesUpdate if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the FleetPropertiesUpdate.
     */
    public static FleetPropertiesUpdate fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FleetPropertiesUpdate deserializedFleetPropertiesUpdate = new FleetPropertiesUpdate();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("spotPriorityProfile".equals(fieldName)) {
                    deserializedFleetPropertiesUpdate.spotPriorityProfile = SpotPriorityProfile.fromJson(reader);
                } else if ("regularPriorityProfile".equals(fieldName)) {
                    deserializedFleetPropertiesUpdate.regularPriorityProfile = RegularPriorityProfile.fromJson(reader);
                } else if ("vmSizesProfile".equals(fieldName)) {
                    List<VmSizeProfile> vmSizesProfile = reader.readArray(reader1 -> VmSizeProfile.fromJson(reader1));
                    deserializedFleetPropertiesUpdate.vmSizesProfile = vmSizesProfile;
                } else if ("computeProfile".equals(fieldName)) {
                    deserializedFleetPropertiesUpdate.computeProfile = ComputeProfileUpdate.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFleetPropertiesUpdate;
        });
    }
}
