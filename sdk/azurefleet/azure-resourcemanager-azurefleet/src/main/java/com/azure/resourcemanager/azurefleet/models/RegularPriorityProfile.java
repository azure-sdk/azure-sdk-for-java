// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurefleet.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Configuration Options for Regular instances in Compute Fleet.
 */
@Fluent
public final class RegularPriorityProfile {
    /*
     * Total capacity to achieve. It is currently in terms of number of VMs.
     */
    @JsonProperty(value = "capacity")
    private Integer capacity;

    /*
     * Minimum capacity to achieve which cannot be updated. If we will not be able to "guarantee" minimum capacity, we will reject the request in the sync path itself.
     */
    @JsonProperty(value = "minCapacity")
    private Integer minCapacity;

    /*
     * Allocation strategy to follow when determining the VM sizes distribution for Regular VMs.
     */
    @JsonProperty(value = "allocationStrategy")
    private RegularPriorityAllocationStrategy allocationStrategy;

    /**
     * Creates an instance of RegularPriorityProfile class.
     */
    public RegularPriorityProfile() {
    }

    /**
     * Get the capacity property: Total capacity to achieve. It is currently in terms of number of VMs.
     * 
     * @return the capacity value.
     */
    public Integer capacity() {
        return this.capacity;
    }

    /**
     * Set the capacity property: Total capacity to achieve. It is currently in terms of number of VMs.
     * 
     * @param capacity the capacity value to set.
     * @return the RegularPriorityProfile object itself.
     */
    public RegularPriorityProfile withCapacity(Integer capacity) {
        this.capacity = capacity;
        return this;
    }

    /**
     * Get the minCapacity property: Minimum capacity to achieve which cannot be updated. If we will not be able to
     * "guarantee" minimum capacity, we will reject the request in the sync path itself.
     * 
     * @return the minCapacity value.
     */
    public Integer minCapacity() {
        return this.minCapacity;
    }

    /**
     * Set the minCapacity property: Minimum capacity to achieve which cannot be updated. If we will not be able to
     * "guarantee" minimum capacity, we will reject the request in the sync path itself.
     * 
     * @param minCapacity the minCapacity value to set.
     * @return the RegularPriorityProfile object itself.
     */
    public RegularPriorityProfile withMinCapacity(Integer minCapacity) {
        this.minCapacity = minCapacity;
        return this;
    }

    /**
     * Get the allocationStrategy property: Allocation strategy to follow when determining the VM sizes distribution for
     * Regular VMs.
     * 
     * @return the allocationStrategy value.
     */
    public RegularPriorityAllocationStrategy allocationStrategy() {
        return this.allocationStrategy;
    }

    /**
     * Set the allocationStrategy property: Allocation strategy to follow when determining the VM sizes distribution for
     * Regular VMs.
     * 
     * @param allocationStrategy the allocationStrategy value to set.
     * @return the RegularPriorityProfile object itself.
     */
    public RegularPriorityProfile withAllocationStrategy(RegularPriorityAllocationStrategy allocationStrategy) {
        this.allocationStrategy = allocationStrategy;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
