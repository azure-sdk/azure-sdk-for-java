// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurefleet.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Specifications about a VM Size. This will also contain the corresponding rank and weight in future.
 */
@Fluent
public final class VmSizeProfile {
    /*
     * The Sku name (e.g. 'Standard_DS1_v2')
     */
    @JsonProperty(value = "name", required = true)
    private String name;

    /*
     * The rank of the VM size. This is used with 'RegularPriorityAllocationStrategy.Prioritized'
     * The lower the number, the higher the priority. Starting with 0.
     */
    @JsonProperty(value = "rank")
    private Integer rank;

    /**
     * Creates an instance of VmSizeProfile class.
     */
    public VmSizeProfile() {
    }

    /**
     * Get the name property: The Sku name (e.g. 'Standard_DS1_v2').
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The Sku name (e.g. 'Standard_DS1_v2').
     * 
     * @param name the name value to set.
     * @return the VmSizeProfile object itself.
     */
    public VmSizeProfile withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the rank property: The rank of the VM size. This is used with 'RegularPriorityAllocationStrategy.Prioritized'
     * The lower the number, the higher the priority. Starting with 0.
     * 
     * @return the rank value.
     */
    public Integer rank() {
        return this.rank;
    }

    /**
     * Set the rank property: The rank of the VM size. This is used with 'RegularPriorityAllocationStrategy.Prioritized'
     * The lower the number, the higher the priority. Starting with 0.
     * 
     * @param rank the rank value to set.
     * @return the VmSizeProfile object itself.
     */
    public VmSizeProfile withRank(Integer rank) {
        this.rank = rank;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (name() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property name in model VmSizeProfile"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(VmSizeProfile.class);
}
