// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurefleet.models;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.azurefleet.fluent.models.FleetInner;
import com.azure.resourcemanager.azurefleet.fluent.models.FleetProperties;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;

/**
 * An immutable client-side representation of Fleet.
 */
public interface Fleet {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     * 
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     * 
     * @return the type value.
     */
    String type();

    /**
     * Gets the location property: The geo-location where the resource lives.
     * 
     * @return the location value.
     */
    String location();

    /**
     * Gets the tags property: Resource tags.
     * 
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the zones property: Zones in which the Compute Fleet is available.
     * 
     * @return the zones value.
     */
    List<String> zones();

    /**
     * Gets the identity property: The managed service identities assigned to this resource.
     * 
     * @return the identity value.
     */
    ManagedServiceIdentity identity();

    /**
     * Gets the plan property: Details of the resource plan.
     * 
     * @return the plan value.
     */
    Plan plan();

    /**
     * Gets the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * Gets the provisioningState property: The status of the last operation.
     * 
     * @return the provisioningState value.
     */
    ProvisioningState provisioningState();

    /**
     * Gets the spotPriorityProfile property: Configuration Options for Spot instances in Compute Fleet.
     * 
     * @return the spotPriorityProfile value.
     */
    SpotPriorityProfile spotPriorityProfile();

    /**
     * Gets the regularPriorityProfile property: Configuration Options for Regular instances in Compute Fleet.
     * 
     * @return the regularPriorityProfile value.
     */
    RegularPriorityProfile regularPriorityProfile();

    /**
     * Gets the vmSizesProfile property: List of VM sizes supported for Compute Fleet.
     * 
     * @return the vmSizesProfile value.
     */
    List<VmSizeProfile> vmSizesProfile();

    /**
     * Gets the computeProfile property: Compute Profile to use for running user's workloads.
     * 
     * @return the computeProfile value.
     */
    ComputeProfile computeProfile();

    /**
     * Gets the timeCreated property: Specifies the time at which the Compute Fleet is created.
     * 
     * @return the timeCreated value.
     */
    OffsetDateTime timeCreated();

    /**
     * Gets the uniqueId property: Specifies the ID which uniquely identifies a Compute Fleet.
     * 
     * @return the uniqueId value.
     */
    String uniqueId();

    /**
     * Gets the region of the resource.
     * 
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     * 
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the name of the resource group.
     * 
     * @return the name of the resource group.
     */
    String resourceGroupName();

    /**
     * Gets the inner com.azure.resourcemanager.azurefleet.fluent.models.FleetInner object.
     * 
     * @return the inner object.
     */
    FleetInner innerModel();

    /**
     * The entirety of the Fleet definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithLocation,
        DefinitionStages.WithResourceGroup, DefinitionStages.WithCreate {
    }

    /**
     * The Fleet definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of the Fleet definition.
         */
        interface Blank extends WithLocation {
        }

        /**
         * The stage of the Fleet definition allowing to specify location.
         */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             * 
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(Region location);

            /**
             * Specifies the region for the resource.
             * 
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(String location);
        }

        /**
         * The stage of the Fleet definition allowing to specify parent resource.
         */
        interface WithResourceGroup {
            /**
             * Specifies resourceGroupName.
             * 
             * @param resourceGroupName The name of the resource group. The name is case insensitive.
             * @return the next definition stage.
             */
            WithCreate withExistingResourceGroup(String resourceGroupName);
        }

        /**
         * The stage of the Fleet definition which contains all the minimum required properties for the resource to be
         * created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate extends DefinitionStages.WithTags, DefinitionStages.WithZones,
            DefinitionStages.WithIdentity, DefinitionStages.WithPlan, DefinitionStages.WithSpotPriorityProfile,
            DefinitionStages.WithRegularPriorityProfile, DefinitionStages.WithVmSizesProfile,
            DefinitionStages.WithComputeProfile {
            /**
             * Executes the create request.
             * 
             * @return the created resource.
             */
            Fleet create();

            /**
             * Executes the create request.
             * 
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            Fleet create(Context context);
        }

        /**
         * The stage of the Fleet definition allowing to specify tags.
         */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             * 
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }

        /**
         * The stage of the Fleet definition allowing to specify zones.
         */
        interface WithZones {
            /**
             * Specifies the zones property: Zones in which the Compute Fleet is available.
             * 
             * @param zones Zones in which the Compute Fleet is available.
             * @return the next definition stage.
             */
            WithCreate withZones(List<String> zones);
        }

        /**
         * The stage of the Fleet definition allowing to specify identity.
         */
        interface WithIdentity {
            /**
             * Specifies the identity property: The managed service identities assigned to this resource..
             * 
             * @param identity The managed service identities assigned to this resource.
             * @return the next definition stage.
             */
            WithCreate withIdentity(ManagedServiceIdentity identity);
        }

        /**
         * The stage of the Fleet definition allowing to specify plan.
         */
        interface WithPlan {
            /**
             * Specifies the plan property: Details of the resource plan..
             * 
             * @param plan Details of the resource plan.
             * @return the next definition stage.
             */
            WithCreate withPlan(Plan plan);
        }

        /**
         * The stage of the Fleet definition allowing to specify spotPriorityProfile.
         */
        interface WithSpotPriorityProfile {
            /**
             * Specifies the spotPriorityProfile property: Configuration Options for Spot instances in Compute Fleet..
             * 
             * @param spotPriorityProfile Configuration Options for Spot instances in Compute Fleet.
             * @return the next definition stage.
             */
            WithCreate withSpotPriorityProfile(SpotPriorityProfile spotPriorityProfile);
        }

        /**
         * The stage of the Fleet definition allowing to specify regularPriorityProfile.
         */
        interface WithRegularPriorityProfile {
            /**
             * Specifies the regularPriorityProfile property: Configuration Options for Regular instances in Compute
             * Fleet..
             * 
             * @param regularPriorityProfile Configuration Options for Regular instances in Compute Fleet.
             * @return the next definition stage.
             */
            WithCreate withRegularPriorityProfile(RegularPriorityProfile regularPriorityProfile);
        }

        /**
         * The stage of the Fleet definition allowing to specify vmSizesProfile.
         */
        interface WithVmSizesProfile {
            /**
             * Specifies the vmSizesProfile property: List of VM sizes supported for Compute Fleet.
             * 
             * @param vmSizesProfile List of VM sizes supported for Compute Fleet.
             * @return the next definition stage.
             */
            WithCreate withVmSizesProfile(List<VmSizeProfile> vmSizesProfile);
        }

        /**
         * The stage of the Fleet definition allowing to specify computeProfile.
         */
        interface WithComputeProfile {
            /**
             * Specifies the computeProfile property: Compute Profile to use for running user's workloads..
             * 
             * @param computeProfile Compute Profile to use for running user's workloads.
             * @return the next definition stage.
             */
            WithCreate withComputeProfile(ComputeProfile computeProfile);
        }
    }

    /**
     * Begins update for the Fleet resource.
     * 
     * @return the stage of resource update.
     */
    Fleet.Update update();

    /**
     * The template for Fleet update.
     */
    interface Update
        extends UpdateStages.WithTags, UpdateStages.WithIdentity, UpdateStages.WithPlan, UpdateStages.WithProperties {
        /**
         * Executes the update request.
         * 
         * @return the updated resource.
         */
        Fleet apply();

        /**
         * Executes the update request.
         * 
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        Fleet apply(Context context);
    }

    /**
     * The Fleet update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the Fleet update allowing to specify tags.
         */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             * 
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }

        /**
         * The stage of the Fleet update allowing to specify identity.
         */
        interface WithIdentity {
            /**
             * Specifies the identity property: Updatable managed service identity.
             * 
             * @param identity Updatable managed service identity.
             * @return the next definition stage.
             */
            Update withIdentity(ManagedServiceIdentityUpdate identity);
        }

        /**
         * The stage of the Fleet update allowing to specify plan.
         */
        interface WithPlan {
            /**
             * Specifies the plan property: Updatable resource plan.
             * 
             * @param plan Updatable resource plan.
             * @return the next definition stage.
             */
            Update withPlan(ResourcePlanUpdate plan);
        }

        /**
         * The stage of the Fleet update allowing to specify properties.
         */
        interface WithProperties {
            /**
             * Specifies the properties property: RP-specific updatable properties.
             * 
             * @param properties RP-specific updatable properties.
             * @return the next definition stage.
             */
            Update withProperties(FleetProperties properties);
        }
    }

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @return the refreshed resource.
     */
    Fleet refresh();

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    Fleet refresh(Context context);
}
