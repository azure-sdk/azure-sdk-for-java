// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurefleet.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.core.management.SystemData;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.azurefleet.models.ComputeProfile;
import com.azure.resourcemanager.azurefleet.models.ManagedServiceIdentity;
import com.azure.resourcemanager.azurefleet.models.Plan;
import com.azure.resourcemanager.azurefleet.models.ProvisioningState;
import com.azure.resourcemanager.azurefleet.models.RegularPriorityProfile;
import com.azure.resourcemanager.azurefleet.models.SpotPriorityProfile;
import com.azure.resourcemanager.azurefleet.models.VmSizeProfile;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;

/**
 * An Compute Fleet resource.
 */
@Fluent
public final class FleetInner extends Resource {
    /*
     * The resource-specific properties for this resource.
     */
    private FleetProperties innerProperties;

    /*
     * Zones in which the Compute Fleet is available
     */
    private List<String> zones;

    /*
     * The managed service identities assigned to this resource.
     */
    private ManagedServiceIdentity identity;

    /*
     * Details of the resource plan.
     */
    private Plan plan;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * The type of the resource.
     */
    private String type;

    /**
     * Creates an instance of FleetInner class.
     */
    public FleetInner() {
    }

    /**
     * Get the innerProperties property: The resource-specific properties for this resource.
     * 
     * @return the innerProperties value.
     */
    private FleetProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the zones property: Zones in which the Compute Fleet is available.
     * 
     * @return the zones value.
     */
    public List<String> zones() {
        return this.zones;
    }

    /**
     * Set the zones property: Zones in which the Compute Fleet is available.
     * 
     * @param zones the zones value to set.
     * @return the FleetInner object itself.
     */
    public FleetInner withZones(List<String> zones) {
        this.zones = zones;
        return this;
    }

    /**
     * Get the identity property: The managed service identities assigned to this resource.
     * 
     * @return the identity value.
     */
    public ManagedServiceIdentity identity() {
        return this.identity;
    }

    /**
     * Set the identity property: The managed service identities assigned to this resource.
     * 
     * @param identity the identity value to set.
     * @return the FleetInner object itself.
     */
    public FleetInner withIdentity(ManagedServiceIdentity identity) {
        this.identity = identity;
        return this;
    }

    /**
     * Get the plan property: Details of the resource plan.
     * 
     * @return the plan value.
     */
    public Plan plan() {
        return this.plan;
    }

    /**
     * Set the plan property: Details of the resource plan.
     * 
     * @param plan the plan value to set.
     * @return the FleetInner object itself.
     */
    public FleetInner withPlan(Plan plan) {
        this.plan = plan;
        return this;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FleetInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FleetInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the provisioningState property: The status of the last operation.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the spotPriorityProfile property: Configuration Options for Spot instances in Compute Fleet.
     * 
     * @return the spotPriorityProfile value.
     */
    public SpotPriorityProfile spotPriorityProfile() {
        return this.innerProperties() == null ? null : this.innerProperties().spotPriorityProfile();
    }

    /**
     * Set the spotPriorityProfile property: Configuration Options for Spot instances in Compute Fleet.
     * 
     * @param spotPriorityProfile the spotPriorityProfile value to set.
     * @return the FleetInner object itself.
     */
    public FleetInner withSpotPriorityProfile(SpotPriorityProfile spotPriorityProfile) {
        if (this.innerProperties() == null) {
            this.innerProperties = new FleetProperties();
        }
        this.innerProperties().withSpotPriorityProfile(spotPriorityProfile);
        return this;
    }

    /**
     * Get the regularPriorityProfile property: Configuration Options for Regular instances in Compute Fleet.
     * 
     * @return the regularPriorityProfile value.
     */
    public RegularPriorityProfile regularPriorityProfile() {
        return this.innerProperties() == null ? null : this.innerProperties().regularPriorityProfile();
    }

    /**
     * Set the regularPriorityProfile property: Configuration Options for Regular instances in Compute Fleet.
     * 
     * @param regularPriorityProfile the regularPriorityProfile value to set.
     * @return the FleetInner object itself.
     */
    public FleetInner withRegularPriorityProfile(RegularPriorityProfile regularPriorityProfile) {
        if (this.innerProperties() == null) {
            this.innerProperties = new FleetProperties();
        }
        this.innerProperties().withRegularPriorityProfile(regularPriorityProfile);
        return this;
    }

    /**
     * Get the vmSizesProfile property: List of VM sizes supported for Compute Fleet.
     * 
     * @return the vmSizesProfile value.
     */
    public VmSizeProfile vmSizesProfile() {
        return this.innerProperties() == null ? null : this.innerProperties().vmSizesProfile();
    }

    /**
     * Set the vmSizesProfile property: List of VM sizes supported for Compute Fleet.
     * 
     * @param vmSizesProfile the vmSizesProfile value to set.
     * @return the FleetInner object itself.
     */
    public FleetInner withVmSizesProfile(VmSizeProfile vmSizesProfile) {
        if (this.innerProperties() == null) {
            this.innerProperties = new FleetProperties();
        }
        this.innerProperties().withVmSizesProfile(vmSizesProfile);
        return this;
    }

    /**
     * Get the computeProfile property: Compute Profile to use for running user's workloads.
     * 
     * @return the computeProfile value.
     */
    public ComputeProfile computeProfile() {
        return this.innerProperties() == null ? null : this.innerProperties().computeProfile();
    }

    /**
     * Set the computeProfile property: Compute Profile to use for running user's workloads.
     * 
     * @param computeProfile the computeProfile value to set.
     * @return the FleetInner object itself.
     */
    public FleetInner withComputeProfile(ComputeProfile computeProfile) {
        if (this.innerProperties() == null) {
            this.innerProperties = new FleetProperties();
        }
        this.innerProperties().withComputeProfile(computeProfile);
        return this;
    }

    /**
     * Get the timeCreated property: Specifies the time at which the Compute Fleet is created.
     * 
     * @return the timeCreated value.
     */
    public OffsetDateTime timeCreated() {
        return this.innerProperties() == null ? null : this.innerProperties().timeCreated();
    }

    /**
     * Set the timeCreated property: Specifies the time at which the Compute Fleet is created.
     * 
     * @param timeCreated the timeCreated value to set.
     * @return the FleetInner object itself.
     */
    public FleetInner withTimeCreated(OffsetDateTime timeCreated) {
        if (this.innerProperties() == null) {
            this.innerProperties = new FleetProperties();
        }
        this.innerProperties().withTimeCreated(timeCreated);
        return this;
    }

    /**
     * Get the uniqueId property: Specifies the ID which uniquely identifies a Compute Fleet.
     * 
     * @return the uniqueId value.
     */
    public String uniqueId() {
        return this.innerProperties() == null ? null : this.innerProperties().uniqueId();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
        if (identity() != null) {
            identity().validate();
        }
        if (plan() != null) {
            plan().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("location", location());
        jsonWriter.writeMapField("tags", tags(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("properties", this.innerProperties);
        jsonWriter.writeArrayField("zones", this.zones, (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("identity", this.identity);
        jsonWriter.writeJsonField("plan", this.plan);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FleetInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FleetInner if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the FleetInner.
     */
    public static FleetInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FleetInner deserializedFleetInner = new FleetInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedFleetInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedFleetInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedFleetInner.type = reader.getString();
                } else if ("location".equals(fieldName)) {
                    deserializedFleetInner.withLocation(reader.getString());
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedFleetInner.withTags(tags);
                } else if ("properties".equals(fieldName)) {
                    deserializedFleetInner.innerProperties = FleetProperties.fromJson(reader);
                } else if ("zones".equals(fieldName)) {
                    List<String> zones = reader.readArray(reader1 -> reader1.getString());
                    deserializedFleetInner.zones = zones;
                } else if ("identity".equals(fieldName)) {
                    deserializedFleetInner.identity = ManagedServiceIdentity.fromJson(reader);
                } else if ("plan".equals(fieldName)) {
                    deserializedFleetInner.plan = Plan.fromJson(reader);
                } else if ("systemData".equals(fieldName)) {
                    deserializedFleetInner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFleetInner;
        });
    }
}
