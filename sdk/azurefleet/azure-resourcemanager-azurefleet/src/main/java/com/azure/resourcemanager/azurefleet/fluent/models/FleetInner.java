// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurefleet.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.core.management.SystemData;
import com.azure.resourcemanager.azurefleet.models.ComputeProfile;
import com.azure.resourcemanager.azurefleet.models.ManagedServiceIdentity;
import com.azure.resourcemanager.azurefleet.models.Plan;
import com.azure.resourcemanager.azurefleet.models.ProvisioningState;
import com.azure.resourcemanager.azurefleet.models.RegularPriorityProfile;
import com.azure.resourcemanager.azurefleet.models.SpotPriorityProfile;
import com.azure.resourcemanager.azurefleet.models.VmSizeProfile;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/**
 * An Compute Fleet resource.
 */
@Fluent
public final class FleetInner extends Resource {
    /*
     * The resource-specific properties for this resource.
     */
    @JsonProperty(value = "properties")
    private FleetProperties innerProperties;

    /*
     * Zones in which the Compute Fleet is available
     */
    @JsonProperty(value = "zones")
    private List<String> zones;

    /*
     * The managed service identities assigned to this resource.
     */
    @JsonProperty(value = "identity")
    private ManagedServiceIdentity identity;

    /*
     * Details of the resource plan.
     */
    @JsonProperty(value = "plan")
    private Plan plan;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /**
     * Creates an instance of FleetInner class.
     */
    public FleetInner() {
    }

    /**
     * Get the innerProperties property: The resource-specific properties for this resource.
     * 
     * @return the innerProperties value.
     */
    private FleetProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the zones property: Zones in which the Compute Fleet is available.
     * 
     * @return the zones value.
     */
    public List<String> zones() {
        return this.zones;
    }

    /**
     * Set the zones property: Zones in which the Compute Fleet is available.
     * 
     * @param zones the zones value to set.
     * @return the FleetInner object itself.
     */
    public FleetInner withZones(List<String> zones) {
        this.zones = zones;
        return this;
    }

    /**
     * Get the identity property: The managed service identities assigned to this resource.
     * 
     * @return the identity value.
     */
    public ManagedServiceIdentity identity() {
        return this.identity;
    }

    /**
     * Set the identity property: The managed service identities assigned to this resource.
     * 
     * @param identity the identity value to set.
     * @return the FleetInner object itself.
     */
    public FleetInner withIdentity(ManagedServiceIdentity identity) {
        this.identity = identity;
        return this;
    }

    /**
     * Get the plan property: Details of the resource plan.
     * 
     * @return the plan value.
     */
    public Plan plan() {
        return this.plan;
    }

    /**
     * Set the plan property: Details of the resource plan.
     * 
     * @param plan the plan value to set.
     * @return the FleetInner object itself.
     */
    public FleetInner withPlan(Plan plan) {
        this.plan = plan;
        return this;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FleetInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FleetInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the provisioningState property: The status of the last operation.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the spotPriorityProfile property: Configuration Options for Spot instances in Compute Fleet.
     * 
     * @return the spotPriorityProfile value.
     */
    public SpotPriorityProfile spotPriorityProfile() {
        return this.innerProperties() == null ? null : this.innerProperties().spotPriorityProfile();
    }

    /**
     * Set the spotPriorityProfile property: Configuration Options for Spot instances in Compute Fleet.
     * 
     * @param spotPriorityProfile the spotPriorityProfile value to set.
     * @return the FleetInner object itself.
     */
    public FleetInner withSpotPriorityProfile(SpotPriorityProfile spotPriorityProfile) {
        if (this.innerProperties() == null) {
            this.innerProperties = new FleetProperties();
        }
        this.innerProperties().withSpotPriorityProfile(spotPriorityProfile);
        return this;
    }

    /**
     * Get the regularPriorityProfile property: Configuration Options for Regular instances in Compute Fleet.
     * 
     * @return the regularPriorityProfile value.
     */
    public RegularPriorityProfile regularPriorityProfile() {
        return this.innerProperties() == null ? null : this.innerProperties().regularPriorityProfile();
    }

    /**
     * Set the regularPriorityProfile property: Configuration Options for Regular instances in Compute Fleet.
     * 
     * @param regularPriorityProfile the regularPriorityProfile value to set.
     * @return the FleetInner object itself.
     */
    public FleetInner withRegularPriorityProfile(RegularPriorityProfile regularPriorityProfile) {
        if (this.innerProperties() == null) {
            this.innerProperties = new FleetProperties();
        }
        this.innerProperties().withRegularPriorityProfile(regularPriorityProfile);
        return this;
    }

    /**
     * Get the vmSizesProfile property: List of VM sizes supported for Compute Fleet.
     * 
     * @return the vmSizesProfile value.
     */
    public List<VmSizeProfile> vmSizesProfile() {
        return this.innerProperties() == null ? null : this.innerProperties().vmSizesProfile();
    }

    /**
     * Set the vmSizesProfile property: List of VM sizes supported for Compute Fleet.
     * 
     * @param vmSizesProfile the vmSizesProfile value to set.
     * @return the FleetInner object itself.
     */
    public FleetInner withVmSizesProfile(List<VmSizeProfile> vmSizesProfile) {
        if (this.innerProperties() == null) {
            this.innerProperties = new FleetProperties();
        }
        this.innerProperties().withVmSizesProfile(vmSizesProfile);
        return this;
    }

    /**
     * Get the computeProfile property: Compute Profile to use for running user's workloads.
     * 
     * @return the computeProfile value.
     */
    public ComputeProfile computeProfile() {
        return this.innerProperties() == null ? null : this.innerProperties().computeProfile();
    }

    /**
     * Set the computeProfile property: Compute Profile to use for running user's workloads.
     * 
     * @param computeProfile the computeProfile value to set.
     * @return the FleetInner object itself.
     */
    public FleetInner withComputeProfile(ComputeProfile computeProfile) {
        if (this.innerProperties() == null) {
            this.innerProperties = new FleetProperties();
        }
        this.innerProperties().withComputeProfile(computeProfile);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
        if (identity() != null) {
            identity().validate();
        }
        if (plan() != null) {
            plan().validate();
        }
    }
}
