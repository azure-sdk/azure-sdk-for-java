// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurefleet.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.azurefleet.models.ComputeProfile;
import com.azure.resourcemanager.azurefleet.models.ProvisioningState;
import com.azure.resourcemanager.azurefleet.models.RegularPriorityProfile;
import com.azure.resourcemanager.azurefleet.models.SpotPriorityProfile;
import com.azure.resourcemanager.azurefleet.models.VmSizeProfile;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * Details of the Compute Fleet.
 */
@Fluent
public final class FleetProperties {
    /*
     * The status of the last operation.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /*
     * Configuration Options for Spot instances in Compute Fleet.
     */
    @JsonProperty(value = "spotPriorityProfile")
    private SpotPriorityProfile spotPriorityProfile;

    /*
     * Configuration Options for Regular instances in Compute Fleet.
     */
    @JsonProperty(value = "regularPriorityProfile")
    private RegularPriorityProfile regularPriorityProfile;

    /*
     * List of VM sizes supported for Compute Fleet
     */
    @JsonProperty(value = "vmSizesProfile", required = true)
    private List<VmSizeProfile> vmSizesProfile;

    /*
     * Compute Profile to use for running user's workloads.
     */
    @JsonProperty(value = "computeProfile", required = true)
    private ComputeProfile computeProfile;

    /**
     * Creates an instance of FleetProperties class.
     */
    public FleetProperties() {
    }

    /**
     * Get the provisioningState property: The status of the last operation.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the spotPriorityProfile property: Configuration Options for Spot instances in Compute Fleet.
     * 
     * @return the spotPriorityProfile value.
     */
    public SpotPriorityProfile spotPriorityProfile() {
        return this.spotPriorityProfile;
    }

    /**
     * Set the spotPriorityProfile property: Configuration Options for Spot instances in Compute Fleet.
     * 
     * @param spotPriorityProfile the spotPriorityProfile value to set.
     * @return the FleetProperties object itself.
     */
    public FleetProperties withSpotPriorityProfile(SpotPriorityProfile spotPriorityProfile) {
        this.spotPriorityProfile = spotPriorityProfile;
        return this;
    }

    /**
     * Get the regularPriorityProfile property: Configuration Options for Regular instances in Compute Fleet.
     * 
     * @return the regularPriorityProfile value.
     */
    public RegularPriorityProfile regularPriorityProfile() {
        return this.regularPriorityProfile;
    }

    /**
     * Set the regularPriorityProfile property: Configuration Options for Regular instances in Compute Fleet.
     * 
     * @param regularPriorityProfile the regularPriorityProfile value to set.
     * @return the FleetProperties object itself.
     */
    public FleetProperties withRegularPriorityProfile(RegularPriorityProfile regularPriorityProfile) {
        this.regularPriorityProfile = regularPriorityProfile;
        return this;
    }

    /**
     * Get the vmSizesProfile property: List of VM sizes supported for Compute Fleet.
     * 
     * @return the vmSizesProfile value.
     */
    public List<VmSizeProfile> vmSizesProfile() {
        return this.vmSizesProfile;
    }

    /**
     * Set the vmSizesProfile property: List of VM sizes supported for Compute Fleet.
     * 
     * @param vmSizesProfile the vmSizesProfile value to set.
     * @return the FleetProperties object itself.
     */
    public FleetProperties withVmSizesProfile(List<VmSizeProfile> vmSizesProfile) {
        this.vmSizesProfile = vmSizesProfile;
        return this;
    }

    /**
     * Get the computeProfile property: Compute Profile to use for running user's workloads.
     * 
     * @return the computeProfile value.
     */
    public ComputeProfile computeProfile() {
        return this.computeProfile;
    }

    /**
     * Set the computeProfile property: Compute Profile to use for running user's workloads.
     * 
     * @param computeProfile the computeProfile value to set.
     * @return the FleetProperties object itself.
     */
    public FleetProperties withComputeProfile(ComputeProfile computeProfile) {
        this.computeProfile = computeProfile;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (spotPriorityProfile() != null) {
            spotPriorityProfile().validate();
        }
        if (regularPriorityProfile() != null) {
            regularPriorityProfile().validate();
        }
        if (vmSizesProfile() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property vmSizesProfile in model FleetProperties"));
        } else {
            vmSizesProfile().forEach(e -> e.validate());
        }
        if (computeProfile() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property computeProfile in model FleetProperties"));
        } else {
            computeProfile().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(FleetProperties.class);
}
