// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.contentsafety.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Harm category task result model.
 */
@Immutable
public final class HarmCategoryTaskResult implements JsonSerializable<HarmCategoryTaskResult> {
    /*
     * The harm category.
     */
    @Generated
    private final HarmCategory harmCategory;

    /*
     * The harm configuration ID.
     */
    @Generated
    private final String harmConfigId;

    /*
     * Indicates if it is detected.
     */
    @Generated
    private final boolean isDetected;

    /*
     * The severity level.
     */
    @Generated
    private final int severity;

    /*
     * The risk level.
     */
    @Generated
    private final RiskLevel riskLevel;

    /*
     * Result details.
     */
    @Generated
    private PromptInjectionDetail details;

    /**
     * Creates an instance of HarmCategoryTaskResult class.
     * 
     * @param harmCategory the harmCategory value to set.
     * @param harmConfigId the harmConfigId value to set.
     * @param isDetected the isDetected value to set.
     * @param severity the severity value to set.
     * @param riskLevel the riskLevel value to set.
     */
    @Generated
    private HarmCategoryTaskResult(HarmCategory harmCategory, String harmConfigId, boolean isDetected, int severity,
        RiskLevel riskLevel) {
        this.harmCategory = harmCategory;
        this.harmConfigId = harmConfigId;
        this.isDetected = isDetected;
        this.severity = severity;
        this.riskLevel = riskLevel;
    }

    /**
     * Get the harmCategory property: The harm category.
     * 
     * @return the harmCategory value.
     */
    @Generated
    public HarmCategory getHarmCategory() {
        return this.harmCategory;
    }

    /**
     * Get the harmConfigId property: The harm configuration ID.
     * 
     * @return the harmConfigId value.
     */
    @Generated
    public String getHarmConfigId() {
        return this.harmConfigId;
    }

    /**
     * Get the isDetected property: Indicates if it is detected.
     * 
     * @return the isDetected value.
     */
    @Generated
    public boolean isDetected() {
        return this.isDetected;
    }

    /**
     * Get the severity property: The severity level.
     * 
     * @return the severity value.
     */
    @Generated
    public int getSeverity() {
        return this.severity;
    }

    /**
     * Get the riskLevel property: The risk level.
     * 
     * @return the riskLevel value.
     */
    @Generated
    public RiskLevel getRiskLevel() {
        return this.riskLevel;
    }

    /**
     * Get the details property: Result details.
     * 
     * @return the details value.
     */
    @Generated
    public PromptInjectionDetail getDetails() {
        return this.details;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("harmCategory", this.harmCategory == null ? null : this.harmCategory.toString());
        jsonWriter.writeStringField("harmConfigId", this.harmConfigId);
        jsonWriter.writeBooleanField("isDetected", this.isDetected);
        jsonWriter.writeIntField("severity", this.severity);
        jsonWriter.writeStringField("riskLevel", this.riskLevel == null ? null : this.riskLevel.toString());
        jsonWriter.writeJsonField("details", this.details);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of HarmCategoryTaskResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of HarmCategoryTaskResult if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the HarmCategoryTaskResult.
     */
    @Generated
    public static HarmCategoryTaskResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            HarmCategory harmCategory = null;
            String harmConfigId = null;
            boolean isDetected = false;
            int severity = 0;
            RiskLevel riskLevel = null;
            PromptInjectionDetail details = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("harmCategory".equals(fieldName)) {
                    harmCategory = HarmCategory.fromString(reader.getString());
                } else if ("harmConfigId".equals(fieldName)) {
                    harmConfigId = reader.getString();
                } else if ("isDetected".equals(fieldName)) {
                    isDetected = reader.getBoolean();
                } else if ("severity".equals(fieldName)) {
                    severity = reader.getInt();
                } else if ("riskLevel".equals(fieldName)) {
                    riskLevel = RiskLevel.fromString(reader.getString());
                } else if ("details".equals(fieldName)) {
                    details = PromptInjectionDetail.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            HarmCategoryTaskResult deserializedHarmCategoryTaskResult
                = new HarmCategoryTaskResult(harmCategory, harmConfigId, isDetected, severity, riskLevel);
            deserializedHarmCategoryTaskResult.details = details;

            return deserializedHarmCategoryTaskResult;
        });
    }
}
