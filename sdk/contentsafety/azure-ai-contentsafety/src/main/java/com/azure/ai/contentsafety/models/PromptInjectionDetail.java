// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.contentsafety.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Details the output of an analysis, including detection status, severity, and additional information.
 */
@Immutable
public final class PromptInjectionDetail implements JsonSerializable<PromptInjectionDetail> {
    /*
     * Indicates whether prompt injection was detected.
     */
    @Generated
    private Boolean promptInjection;

    /*
     * Indicates whether cross-domain issues were detected.
     */
    @Generated
    private Boolean crossDomain;

    /**
     * Creates an instance of PromptInjectionDetail class.
     */
    @Generated
    private PromptInjectionDetail() {
    }

    /**
     * Get the promptInjection property: Indicates whether prompt injection was detected.
     * 
     * @return the promptInjection value.
     */
    @Generated
    public Boolean isPromptInjection() {
        return this.promptInjection;
    }

    /**
     * Get the crossDomain property: Indicates whether cross-domain issues were detected.
     * 
     * @return the crossDomain value.
     */
    @Generated
    public Boolean isCrossDomain() {
        return this.crossDomain;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("promptInjection", this.promptInjection);
        jsonWriter.writeBooleanField("crossDomain", this.crossDomain);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PromptInjectionDetail from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PromptInjectionDetail if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the PromptInjectionDetail.
     */
    @Generated
    public static PromptInjectionDetail fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PromptInjectionDetail deserializedPromptInjectionDetail = new PromptInjectionDetail();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("promptInjection".equals(fieldName)) {
                    deserializedPromptInjectionDetail.promptInjection = reader.getNullable(JsonReader::getBoolean);
                } else if ("crossDomain".equals(fieldName)) {
                    deserializedPromptInjectionDetail.crossDomain = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPromptInjectionDetail;
        });
    }
}
