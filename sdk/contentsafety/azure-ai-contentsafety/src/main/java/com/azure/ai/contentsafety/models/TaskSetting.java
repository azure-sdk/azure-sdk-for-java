// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.contentsafety.models;

import com.azure.ai.contentsafety.implementation.JsonMergePatchHelper;
import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 * Task setting model.
 */
@Fluent
public final class TaskSetting implements JsonSerializable<TaskSetting> {
    /*
     * The setting ID.
     */
    @Generated
    private String settingId;

    /*
     * Indicates if the setting is enabled.
     */
    @Generated
    private boolean settingEnabled;

    /*
     * The applied for settings.
     */
    @Generated
    private List<AppliedFor> appliedFor;

    /*
     * The task type.
     */
    @Generated
    private TaskType kind;

    /*
     * The harm category task setting.
     */
    @Generated
    private HarmCategoryTaskSetting harmCategoryTaskSetting;

    /*
     * The blocklist task setting.
     */
    @Generated
    private BlocklistTaskSetting blocklistTaskSetting;

    /*
     * The safety incident task setting.
     */
    @Generated
    private SafetyIncidentTaskSetting safetyIncidentTaskSetting;

    /*
     * The custom harm category task setting.
     */
    @Generated
    private CustomHarmCategoryTaskSetting customHarmCategoryTaskSetting;

    /*
     * The blocking criteria.
     */
    @Generated
    private BlockingCriteria blockingCriteria;

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    @Generated
    private boolean jsonMergePatch;

    @Generated
    private void serializeAsJsonMergePatch(boolean jsonMergePatch) {
        this.jsonMergePatch = jsonMergePatch;
    }

    static {
        JsonMergePatchHelper.setTaskSettingAccessor(new JsonMergePatchHelper.TaskSettingAccessor() {
            @Override
            public TaskSetting prepareModelForJsonMergePatch(TaskSetting model, boolean jsonMergePatchEnabled) {
                model.serializeAsJsonMergePatch(jsonMergePatchEnabled);
                return model;
            }

            @Override
            public boolean isJsonMergePatch(TaskSetting model) {
                return model.jsonMergePatch;
            }
        });
    }

    /**
     * Creates an instance of TaskSetting class.
     */
    @Generated
    public TaskSetting() {
    }

    /**
     * Get the settingId property: The setting ID.
     * 
     * @return the settingId value.
     */
    @Generated
    public String getSettingId() {
        return this.settingId;
    }

    /**
     * Set the settingId property: The setting ID.
     * <p>Required when create the resource.</p>
     * 
     * @param settingId the settingId value to set.
     * @return the TaskSetting object itself.
     */
    @Generated
    public TaskSetting setSettingId(String settingId) {
        this.settingId = settingId;
        this.updatedProperties.add("settingId");
        return this;
    }

    /**
     * Get the settingEnabled property: Indicates if the setting is enabled.
     * 
     * @return the settingEnabled value.
     */
    @Generated
    public boolean isSettingEnabled() {
        return this.settingEnabled;
    }

    /**
     * Set the settingEnabled property: Indicates if the setting is enabled.
     * <p>Required when create the resource.</p>
     * 
     * @param settingEnabled the settingEnabled value to set.
     * @return the TaskSetting object itself.
     */
    @Generated
    public TaskSetting setSettingEnabled(boolean settingEnabled) {
        this.settingEnabled = settingEnabled;
        this.updatedProperties.add("settingEnabled");
        return this;
    }

    /**
     * Get the appliedFor property: The applied for settings.
     * 
     * @return the appliedFor value.
     */
    @Generated
    public List<AppliedFor> getAppliedFor() {
        return this.appliedFor;
    }

    /**
     * Set the appliedFor property: The applied for settings.
     * <p>Required when create the resource.</p>
     * 
     * @param appliedFor the appliedFor value to set.
     * @return the TaskSetting object itself.
     */
    @Generated
    public TaskSetting setAppliedFor(List<AppliedFor> appliedFor) {
        this.appliedFor = appliedFor;
        this.updatedProperties.add("appliedFor");
        return this;
    }

    /**
     * Get the kind property: The task type.
     * 
     * @return the kind value.
     */
    @Generated
    public TaskType getKind() {
        return this.kind;
    }

    /**
     * Set the kind property: The task type.
     * <p>Required when create the resource.</p>
     * 
     * @param kind the kind value to set.
     * @return the TaskSetting object itself.
     */
    @Generated
    public TaskSetting setKind(TaskType kind) {
        this.kind = kind;
        this.updatedProperties.add("kind");
        return this;
    }

    /**
     * Get the harmCategoryTaskSetting property: The harm category task setting.
     * 
     * @return the harmCategoryTaskSetting value.
     */
    @Generated
    public HarmCategoryTaskSetting getHarmCategoryTaskSetting() {
        return this.harmCategoryTaskSetting;
    }

    /**
     * Set the harmCategoryTaskSetting property: The harm category task setting.
     * 
     * @param harmCategoryTaskSetting the harmCategoryTaskSetting value to set.
     * @return the TaskSetting object itself.
     */
    @Generated
    public TaskSetting setHarmCategoryTaskSetting(HarmCategoryTaskSetting harmCategoryTaskSetting) {
        this.harmCategoryTaskSetting = harmCategoryTaskSetting;
        this.updatedProperties.add("harmCategoryTaskSetting");
        return this;
    }

    /**
     * Get the blocklistTaskSetting property: The blocklist task setting.
     * 
     * @return the blocklistTaskSetting value.
     */
    @Generated
    public BlocklistTaskSetting getBlocklistTaskSetting() {
        return this.blocklistTaskSetting;
    }

    /**
     * Set the blocklistTaskSetting property: The blocklist task setting.
     * 
     * @param blocklistTaskSetting the blocklistTaskSetting value to set.
     * @return the TaskSetting object itself.
     */
    @Generated
    public TaskSetting setBlocklistTaskSetting(BlocklistTaskSetting blocklistTaskSetting) {
        this.blocklistTaskSetting = blocklistTaskSetting;
        this.updatedProperties.add("blocklistTaskSetting");
        return this;
    }

    /**
     * Get the safetyIncidentTaskSetting property: The safety incident task setting.
     * 
     * @return the safetyIncidentTaskSetting value.
     */
    @Generated
    public SafetyIncidentTaskSetting getSafetyIncidentTaskSetting() {
        return this.safetyIncidentTaskSetting;
    }

    /**
     * Set the safetyIncidentTaskSetting property: The safety incident task setting.
     * 
     * @param safetyIncidentTaskSetting the safetyIncidentTaskSetting value to set.
     * @return the TaskSetting object itself.
     */
    @Generated
    public TaskSetting setSafetyIncidentTaskSetting(SafetyIncidentTaskSetting safetyIncidentTaskSetting) {
        this.safetyIncidentTaskSetting = safetyIncidentTaskSetting;
        this.updatedProperties.add("safetyIncidentTaskSetting");
        return this;
    }

    /**
     * Get the customHarmCategoryTaskSetting property: The custom harm category task setting.
     * 
     * @return the customHarmCategoryTaskSetting value.
     */
    @Generated
    public CustomHarmCategoryTaskSetting getCustomHarmCategoryTaskSetting() {
        return this.customHarmCategoryTaskSetting;
    }

    /**
     * Set the customHarmCategoryTaskSetting property: The custom harm category task setting.
     * 
     * @param customHarmCategoryTaskSetting the customHarmCategoryTaskSetting value to set.
     * @return the TaskSetting object itself.
     */
    @Generated
    public TaskSetting setCustomHarmCategoryTaskSetting(CustomHarmCategoryTaskSetting customHarmCategoryTaskSetting) {
        this.customHarmCategoryTaskSetting = customHarmCategoryTaskSetting;
        this.updatedProperties.add("customHarmCategoryTaskSetting");
        return this;
    }

    /**
     * Get the blockingCriteria property: The blocking criteria.
     * 
     * @return the blockingCriteria value.
     */
    @Generated
    public BlockingCriteria getBlockingCriteria() {
        return this.blockingCriteria;
    }

    /**
     * Set the blockingCriteria property: The blocking criteria.
     * <p>Required when create the resource.</p>
     * 
     * @param blockingCriteria the blockingCriteria value to set.
     * @return the TaskSetting object itself.
     */
    @Generated
    public TaskSetting setBlockingCriteria(BlockingCriteria blockingCriteria) {
        this.blockingCriteria = blockingCriteria;
        this.updatedProperties.add("blockingCriteria");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (jsonMergePatch) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeStringField("settingId", this.settingId);
            jsonWriter.writeBooleanField("settingEnabled", this.settingEnabled);
            jsonWriter.writeArrayField("appliedFor", this.appliedFor, (writer, element) -> writer.writeJson(element));
            jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
            jsonWriter.writeJsonField("harmCategoryTaskSetting", this.harmCategoryTaskSetting);
            jsonWriter.writeJsonField("blocklistTaskSetting", this.blocklistTaskSetting);
            jsonWriter.writeJsonField("safetyIncidentTaskSetting", this.safetyIncidentTaskSetting);
            jsonWriter.writeJsonField("customHarmCategoryTaskSetting", this.customHarmCategoryTaskSetting);
            jsonWriter.writeJsonField("blockingCriteria", this.blockingCriteria);
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (updatedProperties.contains("settingId")) {
            if (this.settingId == null) {
                jsonWriter.writeNullField("settingId");
            } else {
                jsonWriter.writeStringField("settingId", this.settingId);
            }
        }
        if (updatedProperties.contains("settingEnabled")) {
            jsonWriter.writeBooleanField("settingEnabled", this.settingEnabled);
        }
        if (updatedProperties.contains("appliedFor")) {
            if (this.appliedFor == null) {
                jsonWriter.writeNullField("appliedFor");
            } else {
                jsonWriter.writeArrayField("appliedFor", this.appliedFor,
                    (writer, element) -> writer.writeJson(element));
            }
        }
        if (updatedProperties.contains("kind")) {
            if (this.kind == null) {
                jsonWriter.writeNullField("kind");
            } else {
                jsonWriter.writeStringField("kind", this.kind.toString());
            }
        }
        if (updatedProperties.contains("harmCategoryTaskSetting")) {
            if (this.harmCategoryTaskSetting == null) {
                jsonWriter.writeNullField("harmCategoryTaskSetting");
            } else {
                JsonMergePatchHelper.getHarmCategoryTaskSettingAccessor()
                    .prepareModelForJsonMergePatch(this.harmCategoryTaskSetting, true);
                jsonWriter.writeJsonField("harmCategoryTaskSetting", this.harmCategoryTaskSetting);
                JsonMergePatchHelper.getHarmCategoryTaskSettingAccessor()
                    .prepareModelForJsonMergePatch(this.harmCategoryTaskSetting, false);
            }
        }
        if (updatedProperties.contains("blocklistTaskSetting")) {
            if (this.blocklistTaskSetting == null) {
                jsonWriter.writeNullField("blocklistTaskSetting");
            } else {
                JsonMergePatchHelper.getBlocklistTaskSettingAccessor()
                    .prepareModelForJsonMergePatch(this.blocklistTaskSetting, true);
                jsonWriter.writeJsonField("blocklistTaskSetting", this.blocklistTaskSetting);
                JsonMergePatchHelper.getBlocklistTaskSettingAccessor()
                    .prepareModelForJsonMergePatch(this.blocklistTaskSetting, false);
            }
        }
        if (updatedProperties.contains("safetyIncidentTaskSetting")) {
            if (this.safetyIncidentTaskSetting == null) {
                jsonWriter.writeNullField("safetyIncidentTaskSetting");
            } else {
                JsonMergePatchHelper.getSafetyIncidentTaskSettingAccessor()
                    .prepareModelForJsonMergePatch(this.safetyIncidentTaskSetting, true);
                jsonWriter.writeJsonField("safetyIncidentTaskSetting", this.safetyIncidentTaskSetting);
                JsonMergePatchHelper.getSafetyIncidentTaskSettingAccessor()
                    .prepareModelForJsonMergePatch(this.safetyIncidentTaskSetting, false);
            }
        }
        if (updatedProperties.contains("customHarmCategoryTaskSetting")) {
            if (this.customHarmCategoryTaskSetting == null) {
                jsonWriter.writeNullField("customHarmCategoryTaskSetting");
            } else {
                JsonMergePatchHelper.getCustomHarmCategoryTaskSettingAccessor()
                    .prepareModelForJsonMergePatch(this.customHarmCategoryTaskSetting, true);
                jsonWriter.writeJsonField("customHarmCategoryTaskSetting", this.customHarmCategoryTaskSetting);
                JsonMergePatchHelper.getCustomHarmCategoryTaskSettingAccessor()
                    .prepareModelForJsonMergePatch(this.customHarmCategoryTaskSetting, false);
            }
        }
        if (updatedProperties.contains("blockingCriteria")) {
            if (this.blockingCriteria == null) {
                jsonWriter.writeNullField("blockingCriteria");
            } else {
                JsonMergePatchHelper.getBlockingCriteriaAccessor()
                    .prepareModelForJsonMergePatch(this.blockingCriteria, true);
                jsonWriter.writeJsonField("blockingCriteria", this.blockingCriteria);
                JsonMergePatchHelper.getBlockingCriteriaAccessor()
                    .prepareModelForJsonMergePatch(this.blockingCriteria, false);
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TaskSetting from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TaskSetting if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the TaskSetting.
     */
    @Generated
    public static TaskSetting fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TaskSetting deserializedTaskSetting = new TaskSetting();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("settingId".equals(fieldName)) {
                    deserializedTaskSetting.settingId = reader.getString();
                } else if ("settingEnabled".equals(fieldName)) {
                    deserializedTaskSetting.settingEnabled = reader.getBoolean();
                } else if ("appliedFor".equals(fieldName)) {
                    List<AppliedFor> appliedFor = reader.readArray(reader1 -> AppliedFor.fromJson(reader1));
                    deserializedTaskSetting.appliedFor = appliedFor;
                } else if ("kind".equals(fieldName)) {
                    deserializedTaskSetting.kind = TaskType.fromString(reader.getString());
                } else if ("harmCategoryTaskSetting".equals(fieldName)) {
                    deserializedTaskSetting.harmCategoryTaskSetting = HarmCategoryTaskSetting.fromJson(reader);
                } else if ("blocklistTaskSetting".equals(fieldName)) {
                    deserializedTaskSetting.blocklistTaskSetting = BlocklistTaskSetting.fromJson(reader);
                } else if ("safetyIncidentTaskSetting".equals(fieldName)) {
                    deserializedTaskSetting.safetyIncidentTaskSetting = SafetyIncidentTaskSetting.fromJson(reader);
                } else if ("customHarmCategoryTaskSetting".equals(fieldName)) {
                    deserializedTaskSetting.customHarmCategoryTaskSetting
                        = CustomHarmCategoryTaskSetting.fromJson(reader);
                } else if ("blockingCriteria".equals(fieldName)) {
                    deserializedTaskSetting.blockingCriteria = BlockingCriteria.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTaskSetting;
        });
    }
}
