// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.contentsafety.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The individual analysis result of potential injection attacks in the given user prompt.
 */
@Immutable
public final class UserPromptInjectionAnalysisResult implements JsonSerializable<UserPromptInjectionAnalysisResult> {
    /*
     * Whether a potential injection attack is detected or not.
     */
    @Generated
    private final boolean attackDetected;

    /**
     * Creates an instance of UserPromptInjectionAnalysisResult class.
     * 
     * @param attackDetected the attackDetected value to set.
     */
    @Generated
    private UserPromptInjectionAnalysisResult(boolean attackDetected) {
        this.attackDetected = attackDetected;
    }

    /**
     * Get the attackDetected property: Whether a potential injection attack is detected or not.
     * 
     * @return the attackDetected value.
     */
    @Generated
    public boolean isAttackDetected() {
        return this.attackDetected;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("attackDetected", this.attackDetected);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UserPromptInjectionAnalysisResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UserPromptInjectionAnalysisResult if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the UserPromptInjectionAnalysisResult.
     */
    @Generated
    public static UserPromptInjectionAnalysisResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            boolean attackDetected = false;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("attackDetected".equals(fieldName)) {
                    attackDetected = reader.getBoolean();
                } else {
                    reader.skipChildren();
                }
            }
            return new UserPromptInjectionAnalysisResult(attackDetected);
        });
    }
}
