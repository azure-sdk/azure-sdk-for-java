// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.contentsafety.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Defines the options for analyzing content with a rai policy.
 */
@Fluent
public final class RaiPolicyAnalyzeOption implements JsonSerializable<RaiPolicyAnalyzeOption> {
    /*
     * The messages to be analyzed.
     */
    @Generated
    private final List<UnifyMessage> messages;

    /*
     * The inline rai policy to be applied during analysis. One of `raiPolicyName` or `raiPolicyInline` must be
     * provided.
     */
    @Generated
    private RaiPolicy raiPolicyInline;

    /*
     * The name of a predefined rai policy to be applied during analysis. One of `raiPolicyName` or `raiPolicyInline`
     * must be provided.
     */
    @Generated
    private String raiPolicyName;

    /**
     * Creates an instance of RaiPolicyAnalyzeOption class.
     * 
     * @param messages the messages value to set.
     */
    @Generated
    public RaiPolicyAnalyzeOption(List<UnifyMessage> messages) {
        this.messages = messages;
    }

    /**
     * Get the messages property: The messages to be analyzed.
     * 
     * @return the messages value.
     */
    @Generated
    public List<UnifyMessage> getMessages() {
        return this.messages;
    }

    /**
     * Get the raiPolicyInline property: The inline rai policy to be applied during analysis. One of `raiPolicyName` or
     * `raiPolicyInline` must be provided.
     * 
     * @return the raiPolicyInline value.
     */
    @Generated
    public RaiPolicy getRaiPolicyInline() {
        return this.raiPolicyInline;
    }

    /**
     * Set the raiPolicyInline property: The inline rai policy to be applied during analysis. One of `raiPolicyName` or
     * `raiPolicyInline` must be provided.
     * 
     * @param raiPolicyInline the raiPolicyInline value to set.
     * @return the RaiPolicyAnalyzeOption object itself.
     */
    @Generated
    public RaiPolicyAnalyzeOption setRaiPolicyInline(RaiPolicy raiPolicyInline) {
        this.raiPolicyInline = raiPolicyInline;
        return this;
    }

    /**
     * Get the raiPolicyName property: The name of a predefined rai policy to be applied during analysis. One of
     * `raiPolicyName` or `raiPolicyInline` must be provided.
     * 
     * @return the raiPolicyName value.
     */
    @Generated
    public String getRaiPolicyName() {
        return this.raiPolicyName;
    }

    /**
     * Set the raiPolicyName property: The name of a predefined rai policy to be applied during analysis. One of
     * `raiPolicyName` or `raiPolicyInline` must be provided.
     * 
     * @param raiPolicyName the raiPolicyName value to set.
     * @return the RaiPolicyAnalyzeOption object itself.
     */
    @Generated
    public RaiPolicyAnalyzeOption setRaiPolicyName(String raiPolicyName) {
        this.raiPolicyName = raiPolicyName;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("messages", this.messages, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("raiPolicyInline", this.raiPolicyInline);
        jsonWriter.writeStringField("raiPolicyName", this.raiPolicyName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RaiPolicyAnalyzeOption from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RaiPolicyAnalyzeOption if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RaiPolicyAnalyzeOption.
     */
    @Generated
    public static RaiPolicyAnalyzeOption fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            List<UnifyMessage> messages = null;
            RaiPolicy raiPolicyInline = null;
            String raiPolicyName = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("messages".equals(fieldName)) {
                    messages = reader.readArray(reader1 -> UnifyMessage.fromJson(reader1));
                } else if ("raiPolicyInline".equals(fieldName)) {
                    raiPolicyInline = RaiPolicy.fromJson(reader);
                } else if ("raiPolicyName".equals(fieldName)) {
                    raiPolicyName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            RaiPolicyAnalyzeOption deserializedRaiPolicyAnalyzeOption = new RaiPolicyAnalyzeOption(messages);
            deserializedRaiPolicyAnalyzeOption.raiPolicyInline = raiPolicyInline;
            deserializedRaiPolicyAnalyzeOption.raiPolicyName = raiPolicyName;

            return deserializedRaiPolicyAnalyzeOption;
        });
    }
}
