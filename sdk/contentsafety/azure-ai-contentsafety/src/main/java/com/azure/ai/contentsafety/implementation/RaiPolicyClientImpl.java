// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.contentsafety.implementation;

import com.azure.ai.contentsafety.ContentSafetyServiceVersion;
import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.serializer.JacksonAdapter;
import com.azure.core.util.serializer.SerializerAdapter;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the RaiPolicyClient type.
 */
public final class RaiPolicyClientImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final RaiPolicyClientService service;

    /**
     * Supported Cognitive Services endpoints (protocol and hostname, for example:
     * https://&lt;resource-name&gt;.cognitiveservices.azure.com).
     */
    private final String endpoint;

    /**
     * Gets Supported Cognitive Services endpoints (protocol and hostname, for example:
     * https://&lt;resource-name&gt;.cognitiveservices.azure.com).
     * 
     * @return the endpoint value.
     */
    public String getEndpoint() {
        return this.endpoint;
    }

    /**
     * Service version.
     */
    private final ContentSafetyServiceVersion serviceVersion;

    /**
     * Gets Service version.
     * 
     * @return the serviceVersion value.
     */
    public ContentSafetyServiceVersion getServiceVersion() {
        return this.serviceVersion;
    }

    /**
     * The HTTP pipeline to send requests through.
     */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     * 
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /**
     * The serializer to serialize an object into a string.
     */
    private final SerializerAdapter serializerAdapter;

    /**
     * Gets The serializer to serialize an object into a string.
     * 
     * @return the serializerAdapter value.
     */
    public SerializerAdapter getSerializerAdapter() {
        return this.serializerAdapter;
    }

    /**
     * Initializes an instance of RaiPolicyClient client.
     * 
     * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
     * https://&lt;resource-name&gt;.cognitiveservices.azure.com).
     * @param serviceVersion Service version.
     */
    public RaiPolicyClientImpl(String endpoint, ContentSafetyServiceVersion serviceVersion) {
        this(new HttpPipelineBuilder().policies(new UserAgentPolicy(), new RetryPolicy()).build(),
            JacksonAdapter.createDefaultSerializerAdapter(), endpoint, serviceVersion);
    }

    /**
     * Initializes an instance of RaiPolicyClient client.
     * 
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
     * https://&lt;resource-name&gt;.cognitiveservices.azure.com).
     * @param serviceVersion Service version.
     */
    public RaiPolicyClientImpl(HttpPipeline httpPipeline, String endpoint, ContentSafetyServiceVersion serviceVersion) {
        this(httpPipeline, JacksonAdapter.createDefaultSerializerAdapter(), endpoint, serviceVersion);
    }

    /**
     * Initializes an instance of RaiPolicyClient client.
     * 
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param serializerAdapter The serializer to serialize an object into a string.
     * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
     * https://&lt;resource-name&gt;.cognitiveservices.azure.com).
     * @param serviceVersion Service version.
     */
    public RaiPolicyClientImpl(HttpPipeline httpPipeline, SerializerAdapter serializerAdapter, String endpoint,
        ContentSafetyServiceVersion serviceVersion) {
        this.httpPipeline = httpPipeline;
        this.serializerAdapter = serializerAdapter;
        this.endpoint = endpoint;
        this.serviceVersion = serviceVersion;
        this.service = RestProxy.create(RaiPolicyClientService.class, this.httpPipeline, this.getSerializerAdapter());
    }

    /**
     * The interface defining all the services for RaiPolicyClient to be used by the proxy service to perform REST
     * calls.
     */
    @Host("{endpoint}/contentsafety")
    @ServiceInterface(name = "RaiPolicyClient")
    public interface RaiPolicyClientService {
        @Patch("/raiPolicies/{raiPolicyName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> createOrUpdateRaiPolicy(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("raiPolicyName") String raiPolicyName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/merge-patch+json") BinaryData options, RequestOptions requestOptions,
            Context context);

        @Patch("/raiPolicies/{raiPolicyName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> createOrUpdateRaiPolicySync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("raiPolicyName") String raiPolicyName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/merge-patch+json") BinaryData options, RequestOptions requestOptions,
            Context context);

        @Delete("/raiPolicies/{raiPolicyName}")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> deleteRaiPolicy(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("raiPolicyName") String raiPolicyName,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Delete("/raiPolicies/{raiPolicyName}")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> deleteRaiPolicySync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("raiPolicyName") String raiPolicyName,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/raiPolicies/{raiPolicyName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getRaiPolicy(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("raiPolicyName") String raiPolicyName,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/raiPolicies/{raiPolicyName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getRaiPolicySync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("raiPolicyName") String raiPolicyName,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/raiPolicies")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listRaiPolicies(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/raiPolicies")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listRaiPoliciesSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listRaiPoliciesNext(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("endpoint") String endpoint, @HeaderParam("Accept") String accept, RequestOptions requestOptions,
            Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listRaiPoliciesNextSync(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("endpoint") String endpoint, @HeaderParam("Accept") String accept, RequestOptions requestOptions,
            Context context);
    }

    /**
     * Create Or Update Rai Policy
     * 
     * Updates a rai policy. If the policyName does not exist, a new rai policy will be created.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     taskSettings (Optional, Required on create): [
     *          (Optional, Required on create){
     *             settingId: String (Optional, Required on create)
     *             settingEnabled: boolean (Optional, Required on create)
     *             appliedFor (Optional, Required on create): [
     *                  (Optional, Required on create){
     *                     role: String(all/user/system/assistant/tool) (Optional, Required on create)
     *                     source: String(messageToAI/messageFromAI) (Optional, Required on create)
     *                 }
     *             ]
     *             kind: String(harmCategory/blocklist/safetyIncident/customHarmCategory) (Optional, Required on create)
     *             harmCategoryTaskSetting (Optional): {
     *                 harmCategory: String(celebrity/drug/hate/promptInjection/protectedMaterial/sexual/selfHarm/violence) (Optional, Required on create)
     *                 harmConfigId: String (Optional, Required on create)
     *             }
     *             blocklistTaskSetting (Optional): {
     *                 name: String (Optional, Required on create)
     *             }
     *             safetyIncidentTaskSetting (Optional): {
     *                 name: String (Optional, Required on create)
     *             }
     *             customHarmCategoryTaskSetting (Optional): {
     *                 name: String (Optional, Required on create)
     *             }
     *             blockingCriteria (Optional, Required on create): {
     *                 enabled: boolean (Optional, Required on create)
     *                 kind: String(severity/riskLevel/isDetected) (Optional, Required on create)
     *                 allowedSeverity: int (Optional, Required on create)
     *                 isDetected: boolean (Optional, Required on create)
     *                 allowedRiskLevel: String(safe/low/medium/high) (Optional, Required on create)
     *             }
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     taskSettings (Optional, Required on create): [
     *          (Optional, Required on create){
     *             settingId: String (Optional, Required on create)
     *             settingEnabled: boolean (Optional, Required on create)
     *             appliedFor (Optional, Required on create): [
     *                  (Optional, Required on create){
     *                     role: String(all/user/system/assistant/tool) (Optional, Required on create)
     *                     source: String(messageToAI/messageFromAI) (Optional, Required on create)
     *                 }
     *             ]
     *             kind: String(harmCategory/blocklist/safetyIncident/customHarmCategory) (Optional, Required on create)
     *             harmCategoryTaskSetting (Optional): {
     *                 harmCategory: String(celebrity/drug/hate/promptInjection/protectedMaterial/sexual/selfHarm/violence) (Optional, Required on create)
     *                 harmConfigId: String (Optional, Required on create)
     *             }
     *             blocklistTaskSetting (Optional): {
     *                 name: String (Optional, Required on create)
     *             }
     *             safetyIncidentTaskSetting (Optional): {
     *                 name: String (Optional, Required on create)
     *             }
     *             customHarmCategoryTaskSetting (Optional): {
     *                 name: String (Optional, Required on create)
     *             }
     *             blockingCriteria (Optional, Required on create): {
     *                 enabled: boolean (Optional, Required on create)
     *                 kind: String(severity/riskLevel/isDetected) (Optional, Required on create)
     *                 allowedSeverity: int (Optional, Required on create)
     *                 isDetected: boolean (Optional, Required on create)
     *                 allowedRiskLevel: String(safe/low/medium/high) (Optional, Required on create)
     *             }
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param raiPolicyName The rai policy name.
     * @param options The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return rai policy model along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createOrUpdateRaiPolicyWithResponseAsync(String raiPolicyName, BinaryData options,
        RequestOptions requestOptions) {
        final String contentType = "application/merge-patch+json";
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.createOrUpdateRaiPolicy(this.getEndpoint(), this.getServiceVersion().getVersion(),
                raiPolicyName, contentType, accept, options, requestOptions, context));
    }

    /**
     * Create Or Update Rai Policy
     * 
     * Updates a rai policy. If the policyName does not exist, a new rai policy will be created.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     taskSettings (Optional, Required on create): [
     *          (Optional, Required on create){
     *             settingId: String (Optional, Required on create)
     *             settingEnabled: boolean (Optional, Required on create)
     *             appliedFor (Optional, Required on create): [
     *                  (Optional, Required on create){
     *                     role: String(all/user/system/assistant/tool) (Optional, Required on create)
     *                     source: String(messageToAI/messageFromAI) (Optional, Required on create)
     *                 }
     *             ]
     *             kind: String(harmCategory/blocklist/safetyIncident/customHarmCategory) (Optional, Required on create)
     *             harmCategoryTaskSetting (Optional): {
     *                 harmCategory: String(celebrity/drug/hate/promptInjection/protectedMaterial/sexual/selfHarm/violence) (Optional, Required on create)
     *                 harmConfigId: String (Optional, Required on create)
     *             }
     *             blocklistTaskSetting (Optional): {
     *                 name: String (Optional, Required on create)
     *             }
     *             safetyIncidentTaskSetting (Optional): {
     *                 name: String (Optional, Required on create)
     *             }
     *             customHarmCategoryTaskSetting (Optional): {
     *                 name: String (Optional, Required on create)
     *             }
     *             blockingCriteria (Optional, Required on create): {
     *                 enabled: boolean (Optional, Required on create)
     *                 kind: String(severity/riskLevel/isDetected) (Optional, Required on create)
     *                 allowedSeverity: int (Optional, Required on create)
     *                 isDetected: boolean (Optional, Required on create)
     *                 allowedRiskLevel: String(safe/low/medium/high) (Optional, Required on create)
     *             }
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     taskSettings (Optional, Required on create): [
     *          (Optional, Required on create){
     *             settingId: String (Optional, Required on create)
     *             settingEnabled: boolean (Optional, Required on create)
     *             appliedFor (Optional, Required on create): [
     *                  (Optional, Required on create){
     *                     role: String(all/user/system/assistant/tool) (Optional, Required on create)
     *                     source: String(messageToAI/messageFromAI) (Optional, Required on create)
     *                 }
     *             ]
     *             kind: String(harmCategory/blocklist/safetyIncident/customHarmCategory) (Optional, Required on create)
     *             harmCategoryTaskSetting (Optional): {
     *                 harmCategory: String(celebrity/drug/hate/promptInjection/protectedMaterial/sexual/selfHarm/violence) (Optional, Required on create)
     *                 harmConfigId: String (Optional, Required on create)
     *             }
     *             blocklistTaskSetting (Optional): {
     *                 name: String (Optional, Required on create)
     *             }
     *             safetyIncidentTaskSetting (Optional): {
     *                 name: String (Optional, Required on create)
     *             }
     *             customHarmCategoryTaskSetting (Optional): {
     *                 name: String (Optional, Required on create)
     *             }
     *             blockingCriteria (Optional, Required on create): {
     *                 enabled: boolean (Optional, Required on create)
     *                 kind: String(severity/riskLevel/isDetected) (Optional, Required on create)
     *                 allowedSeverity: int (Optional, Required on create)
     *                 isDetected: boolean (Optional, Required on create)
     *                 allowedRiskLevel: String(safe/low/medium/high) (Optional, Required on create)
     *             }
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param raiPolicyName The rai policy name.
     * @param options The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return rai policy model along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createOrUpdateRaiPolicyWithResponse(String raiPolicyName, BinaryData options,
        RequestOptions requestOptions) {
        final String contentType = "application/merge-patch+json";
        final String accept = "application/json";
        return service.createOrUpdateRaiPolicySync(this.getEndpoint(), this.getServiceVersion().getVersion(),
            raiPolicyName, contentType, accept, options, requestOptions, Context.NONE);
    }

    /**
     * Delete A Rai Policy By policyName
     * 
     * Deletes a rai policy.
     * 
     * @param raiPolicyName The rai policy name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteRaiPolicyWithResponseAsync(String raiPolicyName, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.deleteRaiPolicy(this.getEndpoint(),
            this.getServiceVersion().getVersion(), raiPolicyName, accept, requestOptions, context));
    }

    /**
     * Delete A Rai Policy By policyName
     * 
     * Deletes a rai policy.
     * 
     * @param raiPolicyName The rai policy name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteRaiPolicyWithResponse(String raiPolicyName, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.deleteRaiPolicySync(this.getEndpoint(), this.getServiceVersion().getVersion(), raiPolicyName,
            accept, requestOptions, Context.NONE);
    }

    /**
     * Get Rai Policy By policyName
     * 
     * Returns rai policy details.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     taskSettings (Optional, Required on create): [
     *          (Optional, Required on create){
     *             settingId: String (Optional, Required on create)
     *             settingEnabled: boolean (Optional, Required on create)
     *             appliedFor (Optional, Required on create): [
     *                  (Optional, Required on create){
     *                     role: String(all/user/system/assistant/tool) (Optional, Required on create)
     *                     source: String(messageToAI/messageFromAI) (Optional, Required on create)
     *                 }
     *             ]
     *             kind: String(harmCategory/blocklist/safetyIncident/customHarmCategory) (Optional, Required on create)
     *             harmCategoryTaskSetting (Optional): {
     *                 harmCategory: String(celebrity/drug/hate/promptInjection/protectedMaterial/sexual/selfHarm/violence) (Optional, Required on create)
     *                 harmConfigId: String (Optional, Required on create)
     *             }
     *             blocklistTaskSetting (Optional): {
     *                 name: String (Optional, Required on create)
     *             }
     *             safetyIncidentTaskSetting (Optional): {
     *                 name: String (Optional, Required on create)
     *             }
     *             customHarmCategoryTaskSetting (Optional): {
     *                 name: String (Optional, Required on create)
     *             }
     *             blockingCriteria (Optional, Required on create): {
     *                 enabled: boolean (Optional, Required on create)
     *                 kind: String(severity/riskLevel/isDetected) (Optional, Required on create)
     *                 allowedSeverity: int (Optional, Required on create)
     *                 isDetected: boolean (Optional, Required on create)
     *                 allowedRiskLevel: String(safe/low/medium/high) (Optional, Required on create)
     *             }
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param raiPolicyName The rai policy name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return rai Policy By policyName
     * 
     * Returns rai policy details along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getRaiPolicyWithResponseAsync(String raiPolicyName,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getRaiPolicy(this.getEndpoint(),
            this.getServiceVersion().getVersion(), raiPolicyName, accept, requestOptions, context));
    }

    /**
     * Get Rai Policy By policyName
     * 
     * Returns rai policy details.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     taskSettings (Optional, Required on create): [
     *          (Optional, Required on create){
     *             settingId: String (Optional, Required on create)
     *             settingEnabled: boolean (Optional, Required on create)
     *             appliedFor (Optional, Required on create): [
     *                  (Optional, Required on create){
     *                     role: String(all/user/system/assistant/tool) (Optional, Required on create)
     *                     source: String(messageToAI/messageFromAI) (Optional, Required on create)
     *                 }
     *             ]
     *             kind: String(harmCategory/blocklist/safetyIncident/customHarmCategory) (Optional, Required on create)
     *             harmCategoryTaskSetting (Optional): {
     *                 harmCategory: String(celebrity/drug/hate/promptInjection/protectedMaterial/sexual/selfHarm/violence) (Optional, Required on create)
     *                 harmConfigId: String (Optional, Required on create)
     *             }
     *             blocklistTaskSetting (Optional): {
     *                 name: String (Optional, Required on create)
     *             }
     *             safetyIncidentTaskSetting (Optional): {
     *                 name: String (Optional, Required on create)
     *             }
     *             customHarmCategoryTaskSetting (Optional): {
     *                 name: String (Optional, Required on create)
     *             }
     *             blockingCriteria (Optional, Required on create): {
     *                 enabled: boolean (Optional, Required on create)
     *                 kind: String(severity/riskLevel/isDetected) (Optional, Required on create)
     *                 allowedSeverity: int (Optional, Required on create)
     *                 isDetected: boolean (Optional, Required on create)
     *                 allowedRiskLevel: String(safe/low/medium/high) (Optional, Required on create)
     *             }
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param raiPolicyName The rai policy name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return rai Policy By policyName
     * 
     * Returns rai policy details along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getRaiPolicyWithResponse(String raiPolicyName, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getRaiPolicySync(this.getEndpoint(), this.getServiceVersion().getVersion(), raiPolicyName,
            accept, requestOptions, Context.NONE);
    }

    /**
     * Get All Rai Policies
     * 
     * Get all rai policies details.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     taskSettings (Optional, Required on create): [
     *          (Optional, Required on create){
     *             settingId: String (Optional, Required on create)
     *             settingEnabled: boolean (Optional, Required on create)
     *             appliedFor (Optional, Required on create): [
     *                  (Optional, Required on create){
     *                     role: String(all/user/system/assistant/tool) (Optional, Required on create)
     *                     source: String(messageToAI/messageFromAI) (Optional, Required on create)
     *                 }
     *             ]
     *             kind: String(harmCategory/blocklist/safetyIncident/customHarmCategory) (Optional, Required on create)
     *             harmCategoryTaskSetting (Optional): {
     *                 harmCategory: String(celebrity/drug/hate/promptInjection/protectedMaterial/sexual/selfHarm/violence) (Optional, Required on create)
     *                 harmConfigId: String (Optional, Required on create)
     *             }
     *             blocklistTaskSetting (Optional): {
     *                 name: String (Optional, Required on create)
     *             }
     *             safetyIncidentTaskSetting (Optional): {
     *                 name: String (Optional, Required on create)
     *             }
     *             customHarmCategoryTaskSetting (Optional): {
     *                 name: String (Optional, Required on create)
     *             }
     *             blockingCriteria (Optional, Required on create): {
     *                 enabled: boolean (Optional, Required on create)
     *                 kind: String(severity/riskLevel/isDetected) (Optional, Required on create)
     *                 allowedSeverity: int (Optional, Required on create)
     *                 isDetected: boolean (Optional, Required on create)
     *                 allowedRiskLevel: String(safe/low/medium/high) (Optional, Required on create)
     *             }
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return all Rai Policies
     * 
     * Get all rai policies details along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listRaiPoliciesSinglePageAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listRaiPolicies(this.getEndpoint(), this.getServiceVersion().getVersion(),
                accept, requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null));
    }

    /**
     * Get All Rai Policies
     * 
     * Get all rai policies details.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     taskSettings (Optional, Required on create): [
     *          (Optional, Required on create){
     *             settingId: String (Optional, Required on create)
     *             settingEnabled: boolean (Optional, Required on create)
     *             appliedFor (Optional, Required on create): [
     *                  (Optional, Required on create){
     *                     role: String(all/user/system/assistant/tool) (Optional, Required on create)
     *                     source: String(messageToAI/messageFromAI) (Optional, Required on create)
     *                 }
     *             ]
     *             kind: String(harmCategory/blocklist/safetyIncident/customHarmCategory) (Optional, Required on create)
     *             harmCategoryTaskSetting (Optional): {
     *                 harmCategory: String(celebrity/drug/hate/promptInjection/protectedMaterial/sexual/selfHarm/violence) (Optional, Required on create)
     *                 harmConfigId: String (Optional, Required on create)
     *             }
     *             blocklistTaskSetting (Optional): {
     *                 name: String (Optional, Required on create)
     *             }
     *             safetyIncidentTaskSetting (Optional): {
     *                 name: String (Optional, Required on create)
     *             }
     *             customHarmCategoryTaskSetting (Optional): {
     *                 name: String (Optional, Required on create)
     *             }
     *             blockingCriteria (Optional, Required on create): {
     *                 enabled: boolean (Optional, Required on create)
     *                 kind: String(severity/riskLevel/isDetected) (Optional, Required on create)
     *                 allowedSeverity: int (Optional, Required on create)
     *                 isDetected: boolean (Optional, Required on create)
     *                 allowedRiskLevel: String(safe/low/medium/high) (Optional, Required on create)
     *             }
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return all Rai Policies
     * 
     * Get all rai policies details as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listRaiPoliciesAsync(RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedFlux<>(() -> listRaiPoliciesSinglePageAsync(requestOptions),
            nextLink -> listRaiPoliciesNextSinglePageAsync(nextLink, requestOptionsForNextPage));
    }

    /**
     * Get All Rai Policies
     * 
     * Get all rai policies details.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     taskSettings (Optional, Required on create): [
     *          (Optional, Required on create){
     *             settingId: String (Optional, Required on create)
     *             settingEnabled: boolean (Optional, Required on create)
     *             appliedFor (Optional, Required on create): [
     *                  (Optional, Required on create){
     *                     role: String(all/user/system/assistant/tool) (Optional, Required on create)
     *                     source: String(messageToAI/messageFromAI) (Optional, Required on create)
     *                 }
     *             ]
     *             kind: String(harmCategory/blocklist/safetyIncident/customHarmCategory) (Optional, Required on create)
     *             harmCategoryTaskSetting (Optional): {
     *                 harmCategory: String(celebrity/drug/hate/promptInjection/protectedMaterial/sexual/selfHarm/violence) (Optional, Required on create)
     *                 harmConfigId: String (Optional, Required on create)
     *             }
     *             blocklistTaskSetting (Optional): {
     *                 name: String (Optional, Required on create)
     *             }
     *             safetyIncidentTaskSetting (Optional): {
     *                 name: String (Optional, Required on create)
     *             }
     *             customHarmCategoryTaskSetting (Optional): {
     *                 name: String (Optional, Required on create)
     *             }
     *             blockingCriteria (Optional, Required on create): {
     *                 enabled: boolean (Optional, Required on create)
     *                 kind: String(severity/riskLevel/isDetected) (Optional, Required on create)
     *                 allowedSeverity: int (Optional, Required on create)
     *                 isDetected: boolean (Optional, Required on create)
     *                 allowedRiskLevel: String(safe/low/medium/high) (Optional, Required on create)
     *             }
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return all Rai Policies
     * 
     * Get all rai policies details along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listRaiPoliciesSinglePage(RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res = service.listRaiPoliciesSync(this.getEndpoint(),
            this.getServiceVersion().getVersion(), accept, requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null);
    }

    /**
     * Get All Rai Policies
     * 
     * Get all rai policies details.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     taskSettings (Optional, Required on create): [
     *          (Optional, Required on create){
     *             settingId: String (Optional, Required on create)
     *             settingEnabled: boolean (Optional, Required on create)
     *             appliedFor (Optional, Required on create): [
     *                  (Optional, Required on create){
     *                     role: String(all/user/system/assistant/tool) (Optional, Required on create)
     *                     source: String(messageToAI/messageFromAI) (Optional, Required on create)
     *                 }
     *             ]
     *             kind: String(harmCategory/blocklist/safetyIncident/customHarmCategory) (Optional, Required on create)
     *             harmCategoryTaskSetting (Optional): {
     *                 harmCategory: String(celebrity/drug/hate/promptInjection/protectedMaterial/sexual/selfHarm/violence) (Optional, Required on create)
     *                 harmConfigId: String (Optional, Required on create)
     *             }
     *             blocklistTaskSetting (Optional): {
     *                 name: String (Optional, Required on create)
     *             }
     *             safetyIncidentTaskSetting (Optional): {
     *                 name: String (Optional, Required on create)
     *             }
     *             customHarmCategoryTaskSetting (Optional): {
     *                 name: String (Optional, Required on create)
     *             }
     *             blockingCriteria (Optional, Required on create): {
     *                 enabled: boolean (Optional, Required on create)
     *                 kind: String(severity/riskLevel/isDetected) (Optional, Required on create)
     *                 allowedSeverity: int (Optional, Required on create)
     *                 isDetected: boolean (Optional, Required on create)
     *                 allowedRiskLevel: String(safe/low/medium/high) (Optional, Required on create)
     *             }
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return all Rai Policies
     * 
     * Get all rai policies details as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listRaiPolicies(RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedIterable<>(() -> listRaiPoliciesSinglePage(requestOptions),
            nextLink -> listRaiPoliciesNextSinglePage(nextLink, requestOptionsForNextPage));
    }

    /**
     * Get All Rai Policies
     * 
     * Get the next page of items.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     taskSettings (Optional, Required on create): [
     *          (Optional, Required on create){
     *             settingId: String (Optional, Required on create)
     *             settingEnabled: boolean (Optional, Required on create)
     *             appliedFor (Optional, Required on create): [
     *                  (Optional, Required on create){
     *                     role: String(all/user/system/assistant/tool) (Optional, Required on create)
     *                     source: String(messageToAI/messageFromAI) (Optional, Required on create)
     *                 }
     *             ]
     *             kind: String(harmCategory/blocklist/safetyIncident/customHarmCategory) (Optional, Required on create)
     *             harmCategoryTaskSetting (Optional): {
     *                 harmCategory: String(celebrity/drug/hate/promptInjection/protectedMaterial/sexual/selfHarm/violence) (Optional, Required on create)
     *                 harmConfigId: String (Optional, Required on create)
     *             }
     *             blocklistTaskSetting (Optional): {
     *                 name: String (Optional, Required on create)
     *             }
     *             safetyIncidentTaskSetting (Optional): {
     *                 name: String (Optional, Required on create)
     *             }
     *             customHarmCategoryTaskSetting (Optional): {
     *                 name: String (Optional, Required on create)
     *             }
     *             blockingCriteria (Optional, Required on create): {
     *                 enabled: boolean (Optional, Required on create)
     *                 kind: String(severity/riskLevel/isDetected) (Optional, Required on create)
     *                 allowedSeverity: int (Optional, Required on create)
     *                 isDetected: boolean (Optional, Required on create)
     *                 allowedRiskLevel: String(safe/low/medium/high) (Optional, Required on create)
     *             }
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param nextLink The URL to get the next list of items.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of RaiPolicy items along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listRaiPoliciesNextSinglePageAsync(String nextLink,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listRaiPoliciesNext(nextLink, this.getEndpoint(), accept, requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null));
    }

    /**
     * Get All Rai Policies
     * 
     * Get the next page of items.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     taskSettings (Optional, Required on create): [
     *          (Optional, Required on create){
     *             settingId: String (Optional, Required on create)
     *             settingEnabled: boolean (Optional, Required on create)
     *             appliedFor (Optional, Required on create): [
     *                  (Optional, Required on create){
     *                     role: String(all/user/system/assistant/tool) (Optional, Required on create)
     *                     source: String(messageToAI/messageFromAI) (Optional, Required on create)
     *                 }
     *             ]
     *             kind: String(harmCategory/blocklist/safetyIncident/customHarmCategory) (Optional, Required on create)
     *             harmCategoryTaskSetting (Optional): {
     *                 harmCategory: String(celebrity/drug/hate/promptInjection/protectedMaterial/sexual/selfHarm/violence) (Optional, Required on create)
     *                 harmConfigId: String (Optional, Required on create)
     *             }
     *             blocklistTaskSetting (Optional): {
     *                 name: String (Optional, Required on create)
     *             }
     *             safetyIncidentTaskSetting (Optional): {
     *                 name: String (Optional, Required on create)
     *             }
     *             customHarmCategoryTaskSetting (Optional): {
     *                 name: String (Optional, Required on create)
     *             }
     *             blockingCriteria (Optional, Required on create): {
     *                 enabled: boolean (Optional, Required on create)
     *                 kind: String(severity/riskLevel/isDetected) (Optional, Required on create)
     *                 allowedSeverity: int (Optional, Required on create)
     *                 isDetected: boolean (Optional, Required on create)
     *                 allowedRiskLevel: String(safe/low/medium/high) (Optional, Required on create)
     *             }
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param nextLink The URL to get the next list of items.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of RaiPolicy items along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listRaiPoliciesNextSinglePage(String nextLink, RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res
            = service.listRaiPoliciesNextSync(nextLink, this.getEndpoint(), accept, requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null);
    }

    private List<BinaryData> getValues(BinaryData binaryData, String path) {
        try {
            Map<?, ?> obj = binaryData.toObject(Map.class);
            List<?> values = (List<?>) obj.get(path);
            return values.stream().map(BinaryData::fromObject).collect(Collectors.toList());
        } catch (RuntimeException e) {
            return null;
        }
    }

    private String getNextLink(BinaryData binaryData, String path) {
        try {
            Map<?, ?> obj = binaryData.toObject(Map.class);
            return (String) obj.get(path);
        } catch (RuntimeException e) {
            return null;
        }
    }
}
