// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.contentsafety;

import com.azure.ai.contentsafety.implementation.JsonMergePatchHelper;
import com.azure.ai.contentsafety.implementation.RaiPolicyClientImpl;
import com.azure.ai.contentsafety.models.RaiPolicy;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;

/**
 * Initializes a new instance of the synchronous RaiPolicyClient type.
 */
@ServiceClient(builder = RaiPolicyClientBuilder.class)
public final class RaiPolicyClient {
    @Generated
    private final RaiPolicyClientImpl serviceClient;

    /**
     * Initializes an instance of RaiPolicyClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    RaiPolicyClient(RaiPolicyClientImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Create Or Update Rai Policy
     * 
     * Updates a rai policy. If the policyName does not exist, a new rai policy will be created.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     taskSettings (Optional, Required on create): [
     *          (Optional, Required on create){
     *             settingId: String (Optional, Required on create)
     *             settingEnabled: boolean (Optional, Required on create)
     *             appliedFor (Optional, Required on create): [
     *                  (Optional, Required on create){
     *                     role: String(all/user/system/assistant/tool) (Optional, Required on create)
     *                     source: String(messageToAI/messageFromAI) (Optional, Required on create)
     *                 }
     *             ]
     *             kind: String(harmCategory/blocklist/safetyIncident/customHarmCategory) (Optional, Required on create)
     *             harmCategoryTaskSetting (Optional): {
     *                 harmCategory: String(celebrity/drug/hate/promptInjection/protectedMaterial/sexual/selfHarm/violence) (Optional, Required on create)
     *                 harmConfigId: String (Optional, Required on create)
     *             }
     *             blocklistTaskSetting (Optional): {
     *                 name: String (Optional, Required on create)
     *             }
     *             safetyIncidentTaskSetting (Optional): {
     *                 name: String (Optional, Required on create)
     *             }
     *             customHarmCategoryTaskSetting (Optional): {
     *                 name: String (Optional, Required on create)
     *             }
     *             blockingCriteria (Optional, Required on create): {
     *                 enabled: boolean (Optional, Required on create)
     *                 kind: String(severity/riskLevel/isDetected) (Optional, Required on create)
     *                 allowedSeverity: int (Optional, Required on create)
     *                 isDetected: boolean (Optional, Required on create)
     *                 allowedRiskLevel: String(safe/low/medium/high) (Optional, Required on create)
     *             }
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     taskSettings (Optional, Required on create): [
     *          (Optional, Required on create){
     *             settingId: String (Optional, Required on create)
     *             settingEnabled: boolean (Optional, Required on create)
     *             appliedFor (Optional, Required on create): [
     *                  (Optional, Required on create){
     *                     role: String(all/user/system/assistant/tool) (Optional, Required on create)
     *                     source: String(messageToAI/messageFromAI) (Optional, Required on create)
     *                 }
     *             ]
     *             kind: String(harmCategory/blocklist/safetyIncident/customHarmCategory) (Optional, Required on create)
     *             harmCategoryTaskSetting (Optional): {
     *                 harmCategory: String(celebrity/drug/hate/promptInjection/protectedMaterial/sexual/selfHarm/violence) (Optional, Required on create)
     *                 harmConfigId: String (Optional, Required on create)
     *             }
     *             blocklistTaskSetting (Optional): {
     *                 name: String (Optional, Required on create)
     *             }
     *             safetyIncidentTaskSetting (Optional): {
     *                 name: String (Optional, Required on create)
     *             }
     *             customHarmCategoryTaskSetting (Optional): {
     *                 name: String (Optional, Required on create)
     *             }
     *             blockingCriteria (Optional, Required on create): {
     *                 enabled: boolean (Optional, Required on create)
     *                 kind: String(severity/riskLevel/isDetected) (Optional, Required on create)
     *                 allowedSeverity: int (Optional, Required on create)
     *                 isDetected: boolean (Optional, Required on create)
     *                 allowedRiskLevel: String(safe/low/medium/high) (Optional, Required on create)
     *             }
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param raiPolicyName The rai policy name.
     * @param options The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return rai policy model along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createOrUpdateRaiPolicyWithResponse(String raiPolicyName, BinaryData options,
        RequestOptions requestOptions) {
        return this.serviceClient.createOrUpdateRaiPolicyWithResponse(raiPolicyName, options, requestOptions);
    }

    /**
     * Delete A Rai Policy By policyName
     * 
     * Deletes a rai policy.
     * 
     * @param raiPolicyName The rai policy name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteRaiPolicyWithResponse(String raiPolicyName, RequestOptions requestOptions) {
        return this.serviceClient.deleteRaiPolicyWithResponse(raiPolicyName, requestOptions);
    }

    /**
     * Get Rai Policy By policyName
     * 
     * Returns rai policy details.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     taskSettings (Optional, Required on create): [
     *          (Optional, Required on create){
     *             settingId: String (Optional, Required on create)
     *             settingEnabled: boolean (Optional, Required on create)
     *             appliedFor (Optional, Required on create): [
     *                  (Optional, Required on create){
     *                     role: String(all/user/system/assistant/tool) (Optional, Required on create)
     *                     source: String(messageToAI/messageFromAI) (Optional, Required on create)
     *                 }
     *             ]
     *             kind: String(harmCategory/blocklist/safetyIncident/customHarmCategory) (Optional, Required on create)
     *             harmCategoryTaskSetting (Optional): {
     *                 harmCategory: String(celebrity/drug/hate/promptInjection/protectedMaterial/sexual/selfHarm/violence) (Optional, Required on create)
     *                 harmConfigId: String (Optional, Required on create)
     *             }
     *             blocklistTaskSetting (Optional): {
     *                 name: String (Optional, Required on create)
     *             }
     *             safetyIncidentTaskSetting (Optional): {
     *                 name: String (Optional, Required on create)
     *             }
     *             customHarmCategoryTaskSetting (Optional): {
     *                 name: String (Optional, Required on create)
     *             }
     *             blockingCriteria (Optional, Required on create): {
     *                 enabled: boolean (Optional, Required on create)
     *                 kind: String(severity/riskLevel/isDetected) (Optional, Required on create)
     *                 allowedSeverity: int (Optional, Required on create)
     *                 isDetected: boolean (Optional, Required on create)
     *                 allowedRiskLevel: String(safe/low/medium/high) (Optional, Required on create)
     *             }
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param raiPolicyName The rai policy name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return rai Policy By policyName
     * 
     * Returns rai policy details along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getRaiPolicyWithResponse(String raiPolicyName, RequestOptions requestOptions) {
        return this.serviceClient.getRaiPolicyWithResponse(raiPolicyName, requestOptions);
    }

    /**
     * Get All Rai Policies
     * 
     * Get all rai policies details.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     taskSettings (Optional, Required on create): [
     *          (Optional, Required on create){
     *             settingId: String (Optional, Required on create)
     *             settingEnabled: boolean (Optional, Required on create)
     *             appliedFor (Optional, Required on create): [
     *                  (Optional, Required on create){
     *                     role: String(all/user/system/assistant/tool) (Optional, Required on create)
     *                     source: String(messageToAI/messageFromAI) (Optional, Required on create)
     *                 }
     *             ]
     *             kind: String(harmCategory/blocklist/safetyIncident/customHarmCategory) (Optional, Required on create)
     *             harmCategoryTaskSetting (Optional): {
     *                 harmCategory: String(celebrity/drug/hate/promptInjection/protectedMaterial/sexual/selfHarm/violence) (Optional, Required on create)
     *                 harmConfigId: String (Optional, Required on create)
     *             }
     *             blocklistTaskSetting (Optional): {
     *                 name: String (Optional, Required on create)
     *             }
     *             safetyIncidentTaskSetting (Optional): {
     *                 name: String (Optional, Required on create)
     *             }
     *             customHarmCategoryTaskSetting (Optional): {
     *                 name: String (Optional, Required on create)
     *             }
     *             blockingCriteria (Optional, Required on create): {
     *                 enabled: boolean (Optional, Required on create)
     *                 kind: String(severity/riskLevel/isDetected) (Optional, Required on create)
     *                 allowedSeverity: int (Optional, Required on create)
     *                 isDetected: boolean (Optional, Required on create)
     *                 allowedRiskLevel: String(safe/low/medium/high) (Optional, Required on create)
     *             }
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return all Rai Policies
     * 
     * Get all rai policies details as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listRaiPolicies(RequestOptions requestOptions) {
        return this.serviceClient.listRaiPolicies(requestOptions);
    }

    /**
     * Create Or Update Rai Policy
     * 
     * Updates a rai policy. If the policyName does not exist, a new rai policy will be created.
     * 
     * @param raiPolicyName The rai policy name.
     * @param options The resource instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return rai policy model.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RaiPolicy createOrUpdateRaiPolicy(String raiPolicyName, RaiPolicy options) {
        // Generated convenience method for createOrUpdateRaiPolicyWithResponse
        RequestOptions requestOptions = new RequestOptions();
        JsonMergePatchHelper.getRaiPolicyAccessor().prepareModelForJsonMergePatch(options, true);
        BinaryData optionsInBinaryData = BinaryData.fromObject(options);
        // BinaryData.fromObject() will not fire serialization, use getLength() to fire serialization.
        optionsInBinaryData.getLength();
        JsonMergePatchHelper.getRaiPolicyAccessor().prepareModelForJsonMergePatch(options, false);
        return createOrUpdateRaiPolicyWithResponse(raiPolicyName, optionsInBinaryData, requestOptions).getValue()
            .toObject(RaiPolicy.class);
    }

    /**
     * Delete A Rai Policy By policyName
     * 
     * Deletes a rai policy.
     * 
     * @param raiPolicyName The rai policy name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteRaiPolicy(String raiPolicyName) {
        // Generated convenience method for deleteRaiPolicyWithResponse
        RequestOptions requestOptions = new RequestOptions();
        deleteRaiPolicyWithResponse(raiPolicyName, requestOptions).getValue();
    }

    /**
     * Get Rai Policy By policyName
     * 
     * Returns rai policy details.
     * 
     * @param raiPolicyName The rai policy name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return rai Policy By policyName
     * 
     * Returns rai policy details.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RaiPolicy getRaiPolicy(String raiPolicyName) {
        // Generated convenience method for getRaiPolicyWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getRaiPolicyWithResponse(raiPolicyName, requestOptions).getValue().toObject(RaiPolicy.class);
    }

    /**
     * Get All Rai Policies
     * 
     * Get all rai policies details.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all Rai Policies
     * 
     * Get all rai policies details as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<RaiPolicy> listRaiPolicies() {
        // Generated convenience method for listRaiPolicies
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.listRaiPolicies(requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(RaiPolicy.class));
    }
}
