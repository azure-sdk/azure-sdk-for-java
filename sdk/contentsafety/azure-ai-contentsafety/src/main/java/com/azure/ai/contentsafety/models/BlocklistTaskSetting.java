// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.contentsafety.models;

import com.azure.ai.contentsafety.implementation.JsonMergePatchHelper;
import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.HashSet;
import java.util.Set;

/**
 * Blocklist task setting model.
 */
@Fluent
public final class BlocklistTaskSetting implements JsonSerializable<BlocklistTaskSetting> {
    /*
     * The name of the blocklist.
     */
    @Generated
    private String name;

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    @Generated
    private boolean jsonMergePatch;

    @Generated
    private void serializeAsJsonMergePatch(boolean jsonMergePatch) {
        this.jsonMergePatch = jsonMergePatch;
    }

    static {
        JsonMergePatchHelper.setBlocklistTaskSettingAccessor(new JsonMergePatchHelper.BlocklistTaskSettingAccessor() {
            @Override
            public BlocklistTaskSetting prepareModelForJsonMergePatch(BlocklistTaskSetting model,
                boolean jsonMergePatchEnabled) {
                model.serializeAsJsonMergePatch(jsonMergePatchEnabled);
                return model;
            }

            @Override
            public boolean isJsonMergePatch(BlocklistTaskSetting model) {
                return model.jsonMergePatch;
            }
        });
    }

    /**
     * Creates an instance of BlocklistTaskSetting class.
     */
    @Generated
    public BlocklistTaskSetting() {
    }

    /**
     * Get the name property: The name of the blocklist.
     * 
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Set the name property: The name of the blocklist.
     * <p>Required when create the resource.</p>
     * 
     * @param name the name value to set.
     * @return the BlocklistTaskSetting object itself.
     */
    @Generated
    public BlocklistTaskSetting setName(String name) {
        this.name = name;
        this.updatedProperties.add("name");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (jsonMergePatch) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeStringField("name", this.name);
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (updatedProperties.contains("name")) {
            if (this.name == null) {
                jsonWriter.writeNullField("name");
            } else {
                jsonWriter.writeStringField("name", this.name);
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BlocklistTaskSetting from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BlocklistTaskSetting if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the BlocklistTaskSetting.
     */
    @Generated
    public static BlocklistTaskSetting fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BlocklistTaskSetting deserializedBlocklistTaskSetting = new BlocklistTaskSetting();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedBlocklistTaskSetting.name = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBlocklistTaskSetting;
        });
    }
}
