// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.contentsafety.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The combined analysis results of potential direct or indirect injection attacks.
 */
@Immutable
public final class ShieldPromptResult implements JsonSerializable<ShieldPromptResult> {
    /*
     * Direct injection attacks analysis result for the given user prompt.
     */
    @Generated
    private UserPromptInjectionAnalysisResult userPromptAnalysis;

    /*
     * Direct and indirect injection attacks analysis result for the given documents.
     */
    @Generated
    private List<DocumentInjectionAnalysisResult> documentsAnalysis;

    /**
     * Creates an instance of ShieldPromptResult class.
     */
    @Generated
    private ShieldPromptResult() {
    }

    /**
     * Get the userPromptAnalysis property: Direct injection attacks analysis result for the given user prompt.
     * 
     * @return the userPromptAnalysis value.
     */
    @Generated
    public UserPromptInjectionAnalysisResult getUserPromptAnalysis() {
        return this.userPromptAnalysis;
    }

    /**
     * Get the documentsAnalysis property: Direct and indirect injection attacks analysis result for the given
     * documents.
     * 
     * @return the documentsAnalysis value.
     */
    @Generated
    public List<DocumentInjectionAnalysisResult> getDocumentsAnalysis() {
        return this.documentsAnalysis;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("userPromptAnalysis", this.userPromptAnalysis);
        jsonWriter.writeArrayField("documentsAnalysis", this.documentsAnalysis,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ShieldPromptResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ShieldPromptResult if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ShieldPromptResult.
     */
    @Generated
    public static ShieldPromptResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ShieldPromptResult deserializedShieldPromptResult = new ShieldPromptResult();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("userPromptAnalysis".equals(fieldName)) {
                    deserializedShieldPromptResult.userPromptAnalysis
                        = UserPromptInjectionAnalysisResult.fromJson(reader);
                } else if ("documentsAnalysis".equals(fieldName)) {
                    List<DocumentInjectionAnalysisResult> documentsAnalysis
                        = reader.readArray(reader1 -> DocumentInjectionAnalysisResult.fromJson(reader1));
                    deserializedShieldPromptResult.documentsAnalysis = documentsAnalysis;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedShieldPromptResult;
        });
    }
}
