// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.contentsafety.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Represents the analysis response obtained by applying a rai policy.
 */
@Immutable
public final class RaiPolicyAnalyzeResponse implements JsonSerializable<RaiPolicyAnalyzeResponse> {
    /*
     * The task results of the analysis.
     */
    @Generated
    private final List<TaskResult> taskResults;

    /**
     * Creates an instance of RaiPolicyAnalyzeResponse class.
     * 
     * @param taskResults the taskResults value to set.
     */
    @Generated
    private RaiPolicyAnalyzeResponse(List<TaskResult> taskResults) {
        this.taskResults = taskResults;
    }

    /**
     * Get the taskResults property: The task results of the analysis.
     * 
     * @return the taskResults value.
     */
    @Generated
    public List<TaskResult> getTaskResults() {
        return this.taskResults;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("taskResults", this.taskResults, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RaiPolicyAnalyzeResponse from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RaiPolicyAnalyzeResponse if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RaiPolicyAnalyzeResponse.
     */
    @Generated
    public static RaiPolicyAnalyzeResponse fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            List<TaskResult> taskResults = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("taskResults".equals(fieldName)) {
                    taskResults = reader.readArray(reader1 -> TaskResult.fromJson(reader1));
                } else {
                    reader.skipChildren();
                }
            }
            return new RaiPolicyAnalyzeResponse(taskResults);
        });
    }
}
