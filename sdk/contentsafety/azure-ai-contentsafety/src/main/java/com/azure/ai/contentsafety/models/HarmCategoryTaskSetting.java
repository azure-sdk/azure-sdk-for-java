// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.contentsafety.models;

import com.azure.ai.contentsafety.implementation.JsonMergePatchHelper;
import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.HashSet;
import java.util.Set;

/**
 * Harm category task setting model.
 */
@Fluent
public final class HarmCategoryTaskSetting implements JsonSerializable<HarmCategoryTaskSetting> {
    /*
     * The harm category.
     */
    @Generated
    private HarmCategory harmCategory;

    /*
     * The harm configuration ID.
     */
    @Generated
    private String harmConfigId;

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    @Generated
    private boolean jsonMergePatch;

    @Generated
    private void serializeAsJsonMergePatch(boolean jsonMergePatch) {
        this.jsonMergePatch = jsonMergePatch;
    }

    static {
        JsonMergePatchHelper
            .setHarmCategoryTaskSettingAccessor(new JsonMergePatchHelper.HarmCategoryTaskSettingAccessor() {
                @Override
                public HarmCategoryTaskSetting prepareModelForJsonMergePatch(HarmCategoryTaskSetting model,
                    boolean jsonMergePatchEnabled) {
                    model.serializeAsJsonMergePatch(jsonMergePatchEnabled);
                    return model;
                }

                @Override
                public boolean isJsonMergePatch(HarmCategoryTaskSetting model) {
                    return model.jsonMergePatch;
                }
            });
    }

    /**
     * Creates an instance of HarmCategoryTaskSetting class.
     */
    @Generated
    public HarmCategoryTaskSetting() {
    }

    /**
     * Get the harmCategory property: The harm category.
     * 
     * @return the harmCategory value.
     */
    @Generated
    public HarmCategory getHarmCategory() {
        return this.harmCategory;
    }

    /**
     * Set the harmCategory property: The harm category.
     * <p>Required when create the resource.</p>
     * 
     * @param harmCategory the harmCategory value to set.
     * @return the HarmCategoryTaskSetting object itself.
     */
    @Generated
    public HarmCategoryTaskSetting setHarmCategory(HarmCategory harmCategory) {
        this.harmCategory = harmCategory;
        this.updatedProperties.add("harmCategory");
        return this;
    }

    /**
     * Get the harmConfigId property: The harm configuration ID.
     * 
     * @return the harmConfigId value.
     */
    @Generated
    public String getHarmConfigId() {
        return this.harmConfigId;
    }

    /**
     * Set the harmConfigId property: The harm configuration ID.
     * <p>Required when create the resource.</p>
     * 
     * @param harmConfigId the harmConfigId value to set.
     * @return the HarmCategoryTaskSetting object itself.
     */
    @Generated
    public HarmCategoryTaskSetting setHarmConfigId(String harmConfigId) {
        this.harmConfigId = harmConfigId;
        this.updatedProperties.add("harmConfigId");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (jsonMergePatch) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeStringField("harmCategory",
                this.harmCategory == null ? null : this.harmCategory.toString());
            jsonWriter.writeStringField("harmConfigId", this.harmConfigId);
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (updatedProperties.contains("harmCategory")) {
            if (this.harmCategory == null) {
                jsonWriter.writeNullField("harmCategory");
            } else {
                jsonWriter.writeStringField("harmCategory", this.harmCategory.toString());
            }
        }
        if (updatedProperties.contains("harmConfigId")) {
            if (this.harmConfigId == null) {
                jsonWriter.writeNullField("harmConfigId");
            } else {
                jsonWriter.writeStringField("harmConfigId", this.harmConfigId);
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of HarmCategoryTaskSetting from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of HarmCategoryTaskSetting if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the HarmCategoryTaskSetting.
     */
    @Generated
    public static HarmCategoryTaskSetting fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            HarmCategoryTaskSetting deserializedHarmCategoryTaskSetting = new HarmCategoryTaskSetting();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("harmCategory".equals(fieldName)) {
                    deserializedHarmCategoryTaskSetting.harmCategory = HarmCategory.fromString(reader.getString());
                } else if ("harmConfigId".equals(fieldName)) {
                    deserializedHarmCategoryTaskSetting.harmConfigId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedHarmCategoryTaskSetting;
        });
    }
}
