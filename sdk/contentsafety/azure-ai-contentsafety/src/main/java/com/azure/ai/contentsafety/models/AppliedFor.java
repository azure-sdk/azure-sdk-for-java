// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.contentsafety.models;

import com.azure.ai.contentsafety.implementation.JsonMergePatchHelper;
import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.HashSet;
import java.util.Set;

/**
 * Applied for model.
 */
@Fluent
public final class AppliedFor implements JsonSerializable<AppliedFor> {
    /*
     * The role applied for.
     */
    @Generated
    private RoleType role;

    /*
     * The source type applied for.
     */
    @Generated
    private SourceType source;

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    @Generated
    private boolean jsonMergePatch;

    @Generated
    private void serializeAsJsonMergePatch(boolean jsonMergePatch) {
        this.jsonMergePatch = jsonMergePatch;
    }

    static {
        JsonMergePatchHelper.setAppliedForAccessor(new JsonMergePatchHelper.AppliedForAccessor() {
            @Override
            public AppliedFor prepareModelForJsonMergePatch(AppliedFor model, boolean jsonMergePatchEnabled) {
                model.serializeAsJsonMergePatch(jsonMergePatchEnabled);
                return model;
            }

            @Override
            public boolean isJsonMergePatch(AppliedFor model) {
                return model.jsonMergePatch;
            }
        });
    }

    /**
     * Creates an instance of AppliedFor class.
     */
    @Generated
    public AppliedFor() {
    }

    /**
     * Get the role property: The role applied for.
     * 
     * @return the role value.
     */
    @Generated
    public RoleType getRole() {
        return this.role;
    }

    /**
     * Set the role property: The role applied for.
     * <p>Required when create the resource.</p>
     * 
     * @param role the role value to set.
     * @return the AppliedFor object itself.
     */
    @Generated
    public AppliedFor setRole(RoleType role) {
        this.role = role;
        this.updatedProperties.add("role");
        return this;
    }

    /**
     * Get the source property: The source type applied for.
     * 
     * @return the source value.
     */
    @Generated
    public SourceType getSource() {
        return this.source;
    }

    /**
     * Set the source property: The source type applied for.
     * <p>Required when create the resource.</p>
     * 
     * @param source the source value to set.
     * @return the AppliedFor object itself.
     */
    @Generated
    public AppliedFor setSource(SourceType source) {
        this.source = source;
        this.updatedProperties.add("source");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (jsonMergePatch) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeStringField("role", this.role == null ? null : this.role.toString());
            jsonWriter.writeStringField("source", this.source == null ? null : this.source.toString());
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (updatedProperties.contains("role")) {
            if (this.role == null) {
                jsonWriter.writeNullField("role");
            } else {
                jsonWriter.writeStringField("role", this.role.toString());
            }
        }
        if (updatedProperties.contains("source")) {
            if (this.source == null) {
                jsonWriter.writeNullField("source");
            } else {
                jsonWriter.writeStringField("source", this.source.toString());
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AppliedFor from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AppliedFor if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the AppliedFor.
     */
    @Generated
    public static AppliedFor fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AppliedFor deserializedAppliedFor = new AppliedFor();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("role".equals(fieldName)) {
                    deserializedAppliedFor.role = RoleType.fromString(reader.getString());
                } else if ("source".equals(fieldName)) {
                    deserializedAppliedFor.source = SourceType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAppliedFor;
        });
    }
}
