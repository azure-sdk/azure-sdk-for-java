// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.contentsafety.models;

import com.azure.ai.contentsafety.implementation.JsonMergePatchHelper;
import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.HashSet;
import java.util.Set;

/**
 * Blocking criteria model.
 */
@Fluent
public final class BlockingCriteria implements JsonSerializable<BlockingCriteria> {
    /*
     * Indicates if blocking criteria is enabled.
     */
    @Generated
    private boolean enabled;

    /*
     * The blocking criteria kind.
     */
    @Generated
    private BlockingCriteriaKind kind;

    /*
     * The allowed severity level.
     */
    @Generated
    private int allowedSeverity;

    /*
     * Indicates if it is detected.
     */
    @Generated
    private boolean isDetected;

    /*
     * The risk level.
     */
    @Generated
    private RiskLevel allowedRiskLevel;

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    @Generated
    private boolean jsonMergePatch;

    @Generated
    private void serializeAsJsonMergePatch(boolean jsonMergePatch) {
        this.jsonMergePatch = jsonMergePatch;
    }

    static {
        JsonMergePatchHelper.setBlockingCriteriaAccessor(new JsonMergePatchHelper.BlockingCriteriaAccessor() {
            @Override
            public BlockingCriteria prepareModelForJsonMergePatch(BlockingCriteria model,
                boolean jsonMergePatchEnabled) {
                model.serializeAsJsonMergePatch(jsonMergePatchEnabled);
                return model;
            }

            @Override
            public boolean isJsonMergePatch(BlockingCriteria model) {
                return model.jsonMergePatch;
            }
        });
    }

    /**
     * Creates an instance of BlockingCriteria class.
     */
    @Generated
    public BlockingCriteria() {
    }

    /**
     * Get the enabled property: Indicates if blocking criteria is enabled.
     * 
     * @return the enabled value.
     */
    @Generated
    public boolean isEnabled() {
        return this.enabled;
    }

    /**
     * Set the enabled property: Indicates if blocking criteria is enabled.
     * <p>Required when create the resource.</p>
     * 
     * @param enabled the enabled value to set.
     * @return the BlockingCriteria object itself.
     */
    @Generated
    public BlockingCriteria setEnabled(boolean enabled) {
        this.enabled = enabled;
        this.updatedProperties.add("enabled");
        return this;
    }

    /**
     * Get the kind property: The blocking criteria kind.
     * 
     * @return the kind value.
     */
    @Generated
    public BlockingCriteriaKind getKind() {
        return this.kind;
    }

    /**
     * Set the kind property: The blocking criteria kind.
     * <p>Required when create the resource.</p>
     * 
     * @param kind the kind value to set.
     * @return the BlockingCriteria object itself.
     */
    @Generated
    public BlockingCriteria setKind(BlockingCriteriaKind kind) {
        this.kind = kind;
        this.updatedProperties.add("kind");
        return this;
    }

    /**
     * Get the allowedSeverity property: The allowed severity level.
     * 
     * @return the allowedSeverity value.
     */
    @Generated
    public int getAllowedSeverity() {
        return this.allowedSeverity;
    }

    /**
     * Set the allowedSeverity property: The allowed severity level.
     * <p>Required when create the resource.</p>
     * 
     * @param allowedSeverity the allowedSeverity value to set.
     * @return the BlockingCriteria object itself.
     */
    @Generated
    public BlockingCriteria setAllowedSeverity(int allowedSeverity) {
        this.allowedSeverity = allowedSeverity;
        this.updatedProperties.add("allowedSeverity");
        return this;
    }

    /**
     * Get the isDetected property: Indicates if it is detected.
     * 
     * @return the isDetected value.
     */
    @Generated
    public boolean isDetected() {
        return this.isDetected;
    }

    /**
     * Set the isDetected property: Indicates if it is detected.
     * <p>Required when create the resource.</p>
     * 
     * @param isDetected the isDetected value to set.
     * @return the BlockingCriteria object itself.
     */
    @Generated
    public BlockingCriteria setIsDetected(boolean isDetected) {
        this.isDetected = isDetected;
        this.updatedProperties.add("isDetected");
        return this;
    }

    /**
     * Get the allowedRiskLevel property: The risk level.
     * 
     * @return the allowedRiskLevel value.
     */
    @Generated
    public RiskLevel getAllowedRiskLevel() {
        return this.allowedRiskLevel;
    }

    /**
     * Set the allowedRiskLevel property: The risk level.
     * <p>Required when create the resource.</p>
     * 
     * @param allowedRiskLevel the allowedRiskLevel value to set.
     * @return the BlockingCriteria object itself.
     */
    @Generated
    public BlockingCriteria setAllowedRiskLevel(RiskLevel allowedRiskLevel) {
        this.allowedRiskLevel = allowedRiskLevel;
        this.updatedProperties.add("allowedRiskLevel");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (jsonMergePatch) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeBooleanField("enabled", this.enabled);
            jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
            jsonWriter.writeIntField("allowedSeverity", this.allowedSeverity);
            jsonWriter.writeBooleanField("isDetected", this.isDetected);
            jsonWriter.writeStringField("allowedRiskLevel",
                this.allowedRiskLevel == null ? null : this.allowedRiskLevel.toString());
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (updatedProperties.contains("enabled")) {
            jsonWriter.writeBooleanField("enabled", this.enabled);
        }
        if (updatedProperties.contains("kind")) {
            if (this.kind == null) {
                jsonWriter.writeNullField("kind");
            } else {
                jsonWriter.writeStringField("kind", this.kind.toString());
            }
        }
        if (updatedProperties.contains("allowedSeverity")) {
            jsonWriter.writeIntField("allowedSeverity", this.allowedSeverity);
        }
        if (updatedProperties.contains("isDetected")) {
            jsonWriter.writeBooleanField("isDetected", this.isDetected);
        }
        if (updatedProperties.contains("allowedRiskLevel")) {
            if (this.allowedRiskLevel == null) {
                jsonWriter.writeNullField("allowedRiskLevel");
            } else {
                jsonWriter.writeStringField("allowedRiskLevel", this.allowedRiskLevel.toString());
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BlockingCriteria from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BlockingCriteria if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the BlockingCriteria.
     */
    @Generated
    public static BlockingCriteria fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BlockingCriteria deserializedBlockingCriteria = new BlockingCriteria();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("enabled".equals(fieldName)) {
                    deserializedBlockingCriteria.enabled = reader.getBoolean();
                } else if ("kind".equals(fieldName)) {
                    deserializedBlockingCriteria.kind = BlockingCriteriaKind.fromString(reader.getString());
                } else if ("allowedSeverity".equals(fieldName)) {
                    deserializedBlockingCriteria.allowedSeverity = reader.getInt();
                } else if ("isDetected".equals(fieldName)) {
                    deserializedBlockingCriteria.isDetected = reader.getBoolean();
                } else if ("allowedRiskLevel".equals(fieldName)) {
                    deserializedBlockingCriteria.allowedRiskLevel = RiskLevel.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBlockingCriteria;
        });
    }
}
