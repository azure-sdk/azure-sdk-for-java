// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package microsoft.security.copilot.skillsetauthoring.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * Entity representing a Skillset.
 */
@Immutable
public final class SkillsetDescriptor {
    /*
     * Namespace for the skillset
     */
    @Generated
    @JsonProperty(value = "namespace")
    private String namespace;

    /*
     * The name of the Skillset
     */
    @Generated
    @JsonProperty(value = "name")
    private String name;

    /*
     * The description of the Skillset
     */
    @Generated
    @JsonProperty(value = "description")
    private String description;

    /*
     * The description of the skillset that's displayed TODO postman/dev figure out where this is displayed
     */
    @Generated
    @JsonProperty(value = "descriptionDisplay")
    private String descriptionDisplay;

    /*
     * The Skillset name that's displayed in the portal
     */
    @Generated
    @JsonProperty(value = "disaplyName")
    private String disaplyName;

    /*
     * The icon displayed for the skillset in the console
     */
    @Generated
    @JsonProperty(value = "icon")
    private String icon;

    /*
     * The category of the Skillset
     */
    @Generated
    @JsonProperty(value = "category")
    private SkillsetCategory category;

    /*
     * CatalogScope of the Skillset
     */
    @Generated
    @JsonProperty(value = "catalogScope")
    private SkillsetCatalogScope catalogScope;

    /*
     * Whether the skillset is enabled TODO how is this different than Hidden
     */
    @Generated
    @JsonProperty(value = "enabled")
    private boolean enabled;

    /*
     * Whether the skillset is hidden TODO how is this different than enabled
     */
    @Generated
    @JsonProperty(value = "hidden")
    private boolean hidden;

    /*
     * The prerequisites of a skillset TODO what does this mean
     */
    @Generated
    @JsonProperty(value = "prerequisites")
    private List<String> prerequisites;

    /*
     * The settings of a skillset
     */
    @Generated
    @JsonProperty(value = "settings")
    private List<SkillsetSetting> settings;

    /*
     * The settings of a skillset
     */
    @Generated
    @JsonProperty(value = "authorization")
    private SkillsetAuth authorization;

    /*
     * The types of authentication supported by the skillset
     */
    @Generated
    @JsonProperty(value = "supportedAuthTypes")
    private List<SkillsetAuthType> supportedAuthTypes;

    /*
     * A list of feature flags. At least one of the feature flags is required to enabled in the prompt context in order
     * for the skillset to be available
     */
    @Generated
    @JsonProperty(value = "userVisibilityFeatureFlags")
    private List<String> userVisibilityFeatureFlags;

    /*
     * Controls the conditions under which the users can see or use this skillset
     */
    @Generated
    @JsonProperty(value = "userVisibility")
    private SkillVisibility userVisibility;

    /*
     * Visibility flags required for the planner to user the skillset TODO confirm what this does
     */
    @Generated
    @JsonProperty(value = "plannerVisibilityFeatureFlags")
    private List<String> plannerVisibilityFeatureFlags;

    /*
     * Controls the conditions under a prompt can use this skillset
     */
    @Generated
    @JsonProperty(value = "plannerVisibility")
    private SkillVisibility plannerVisibility;

    /*
     * The user ID of the user who created this skillset.
     */
    @Generated
    @JsonProperty(value = "creatorUserId")
    private String creatorUserId;

    /*
     * The ID of an Entra group that contains the owners for this Skillset
     */
    @Generated
    @JsonProperty(value = "ownersGroupId")
    private String ownersGroupId;

    /**
     * Creates an instance of SkillsetDescriptor class.
     * 
     * @param namespace the namespace value to set.
     * @param name the name value to set.
     * @param description the description value to set.
     * @param descriptionDisplay the descriptionDisplay value to set.
     * @param disaplyName the disaplyName value to set.
     * @param icon the icon value to set.
     * @param category the category value to set.
     * @param catalogScope the catalogScope value to set.
     * @param enabled the enabled value to set.
     * @param hidden the hidden value to set.
     * @param prerequisites the prerequisites value to set.
     * @param settings the settings value to set.
     * @param authorization the authorization value to set.
     * @param supportedAuthTypes the supportedAuthTypes value to set.
     * @param userVisibilityFeatureFlags the userVisibilityFeatureFlags value to set.
     * @param userVisibility the userVisibility value to set.
     * @param plannerVisibilityFeatureFlags the plannerVisibilityFeatureFlags value to set.
     * @param plannerVisibility the plannerVisibility value to set.
     * @param creatorUserId the creatorUserId value to set.
     * @param ownersGroupId the ownersGroupId value to set.
     */
    @Generated
    @JsonCreator
    private SkillsetDescriptor(@JsonProperty(value = "namespace") String namespace,
        @JsonProperty(value = "name") String name, @JsonProperty(value = "description") String description,
        @JsonProperty(value = "descriptionDisplay") String descriptionDisplay,
        @JsonProperty(value = "disaplyName") String disaplyName, @JsonProperty(value = "icon") String icon,
        @JsonProperty(value = "category") SkillsetCategory category,
        @JsonProperty(value = "catalogScope") SkillsetCatalogScope catalogScope,
        @JsonProperty(value = "enabled") boolean enabled, @JsonProperty(value = "hidden") boolean hidden,
        @JsonProperty(value = "prerequisites") List<String> prerequisites,
        @JsonProperty(value = "settings") List<SkillsetSetting> settings,
        @JsonProperty(value = "authorization") SkillsetAuth authorization,
        @JsonProperty(value = "supportedAuthTypes") List<SkillsetAuthType> supportedAuthTypes,
        @JsonProperty(value = "userVisibilityFeatureFlags") List<String> userVisibilityFeatureFlags,
        @JsonProperty(value = "userVisibility") SkillVisibility userVisibility,
        @JsonProperty(value = "plannerVisibilityFeatureFlags") List<String> plannerVisibilityFeatureFlags,
        @JsonProperty(value = "plannerVisibility") SkillVisibility plannerVisibility,
        @JsonProperty(value = "creatorUserId") String creatorUserId,
        @JsonProperty(value = "ownersGroupId") String ownersGroupId) {
        this.namespace = namespace;
        this.name = name;
        this.description = description;
        this.descriptionDisplay = descriptionDisplay;
        this.disaplyName = disaplyName;
        this.icon = icon;
        this.category = category;
        this.catalogScope = catalogScope;
        this.enabled = enabled;
        this.hidden = hidden;
        this.prerequisites = prerequisites;
        this.settings = settings;
        this.authorization = authorization;
        this.supportedAuthTypes = supportedAuthTypes;
        this.userVisibilityFeatureFlags = userVisibilityFeatureFlags;
        this.userVisibility = userVisibility;
        this.plannerVisibilityFeatureFlags = plannerVisibilityFeatureFlags;
        this.plannerVisibility = plannerVisibility;
        this.creatorUserId = creatorUserId;
        this.ownersGroupId = ownersGroupId;
    }

    /**
     * Get the namespace property: Namespace for the skillset.
     * 
     * @return the namespace value.
     */
    @Generated
    public String getNamespace() {
        return this.namespace;
    }

    /**
     * Get the name property: The name of the Skillset.
     * 
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Get the description property: The description of the Skillset.
     * 
     * @return the description value.
     */
    @Generated
    public String getDescription() {
        return this.description;
    }

    /**
     * Get the descriptionDisplay property: The description of the skillset that's displayed TODO postman/dev figure
     * out where this is displayed.
     * 
     * @return the descriptionDisplay value.
     */
    @Generated
    public String getDescriptionDisplay() {
        return this.descriptionDisplay;
    }

    /**
     * Get the disaplyName property: The Skillset name that's displayed in the portal.
     * 
     * @return the disaplyName value.
     */
    @Generated
    public String getDisaplyName() {
        return this.disaplyName;
    }

    /**
     * Get the icon property: The icon displayed for the skillset in the console.
     * 
     * @return the icon value.
     */
    @Generated
    public String getIcon() {
        return this.icon;
    }

    /**
     * Get the category property: The category of the Skillset.
     * 
     * @return the category value.
     */
    @Generated
    public SkillsetCategory getCategory() {
        return this.category;
    }

    /**
     * Get the catalogScope property: CatalogScope of the Skillset.
     * 
     * @return the catalogScope value.
     */
    @Generated
    public SkillsetCatalogScope getCatalogScope() {
        return this.catalogScope;
    }

    /**
     * Get the enabled property: Whether the skillset is enabled TODO how is this different than Hidden.
     * 
     * @return the enabled value.
     */
    @Generated
    public boolean isEnabled() {
        return this.enabled;
    }

    /**
     * Get the hidden property: Whether the skillset is hidden TODO how is this different than enabled.
     * 
     * @return the hidden value.
     */
    @Generated
    public boolean isHidden() {
        return this.hidden;
    }

    /**
     * Get the prerequisites property: The prerequisites of a skillset TODO what does this mean.
     * 
     * @return the prerequisites value.
     */
    @Generated
    public List<String> getPrerequisites() {
        return this.prerequisites;
    }

    /**
     * Get the settings property: The settings of a skillset.
     * 
     * @return the settings value.
     */
    @Generated
    public List<SkillsetSetting> getSettings() {
        return this.settings;
    }

    /**
     * Get the authorization property: The settings of a skillset.
     * 
     * @return the authorization value.
     */
    @Generated
    public SkillsetAuth getAuthorization() {
        return this.authorization;
    }

    /**
     * Get the supportedAuthTypes property: The types of authentication supported by the skillset.
     * 
     * @return the supportedAuthTypes value.
     */
    @Generated
    public List<SkillsetAuthType> getSupportedAuthTypes() {
        return this.supportedAuthTypes;
    }

    /**
     * Get the userVisibilityFeatureFlags property: A list of feature flags. At least one of the feature flags is
     * required to enabled in the prompt context in order for the skillset to be available.
     * 
     * @return the userVisibilityFeatureFlags value.
     */
    @Generated
    public List<String> getUserVisibilityFeatureFlags() {
        return this.userVisibilityFeatureFlags;
    }

    /**
     * Get the userVisibility property: Controls the conditions under which the users can see or use this skillset.
     * 
     * @return the userVisibility value.
     */
    @Generated
    public SkillVisibility getUserVisibility() {
        return this.userVisibility;
    }

    /**
     * Get the plannerVisibilityFeatureFlags property: Visibility flags required for the planner to user the skillset
     * TODO confirm what this does.
     * 
     * @return the plannerVisibilityFeatureFlags value.
     */
    @Generated
    public List<String> getPlannerVisibilityFeatureFlags() {
        return this.plannerVisibilityFeatureFlags;
    }

    /**
     * Get the plannerVisibility property: Controls the conditions under a prompt can use this skillset.
     * 
     * @return the plannerVisibility value.
     */
    @Generated
    public SkillVisibility getPlannerVisibility() {
        return this.plannerVisibility;
    }

    /**
     * Get the creatorUserId property: The user ID of the user who created this skillset.
     * 
     * @return the creatorUserId value.
     */
    @Generated
    public String getCreatorUserId() {
        return this.creatorUserId;
    }

    /**
     * Get the ownersGroupId property: The ID of an Entra group that contains the owners for this Skillset.
     * 
     * @return the ownersGroupId value.
     */
    @Generated
    public String getOwnersGroupId() {
        return this.ownersGroupId;
    }
}
