// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package microsoft.security.copilot.skillsetauthoring.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.serializer.JacksonAdapter;
import com.azure.core.util.serializer.SerializerAdapter;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the SkillContextClient type.
 */
public final class SkillContextClientImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final SkillContextClientService service;

    /**
     * Supported Security Copilot API endpoints (protocol and host name, such as
     * https://api.medeina-dev.defender.microsoft.com).
     */
    private final String endpoint;

    /**
     * Gets Supported Security Copilot API endpoints (protocol and host name, such as
     * https://api.medeina-dev.defender.microsoft.com).
     * 
     * @return the endpoint value.
     */
    public String getEndpoint() {
        return this.endpoint;
    }

    /**
     * The HTTP pipeline to send requests through.
     */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     * 
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /**
     * The serializer to serialize an object into a string.
     */
    private final SerializerAdapter serializerAdapter;

    /**
     * Gets The serializer to serialize an object into a string.
     * 
     * @return the serializerAdapter value.
     */
    public SerializerAdapter getSerializerAdapter() {
        return this.serializerAdapter;
    }

    /**
     * Initializes an instance of SkillContextClient client.
     * 
     * @param endpoint Supported Security Copilot API endpoints (protocol and host name, such as
     * https://api.medeina-dev.defender.microsoft.com).
     */
    public SkillContextClientImpl(String endpoint) {
        this(new HttpPipelineBuilder().policies(new UserAgentPolicy(), new RetryPolicy()).build(),
            JacksonAdapter.createDefaultSerializerAdapter(), endpoint);
    }

    /**
     * Initializes an instance of SkillContextClient client.
     * 
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param endpoint Supported Security Copilot API endpoints (protocol and host name, such as
     * https://api.medeina-dev.defender.microsoft.com).
     */
    public SkillContextClientImpl(HttpPipeline httpPipeline, String endpoint) {
        this(httpPipeline, JacksonAdapter.createDefaultSerializerAdapter(), endpoint);
    }

    /**
     * Initializes an instance of SkillContextClient client.
     * 
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param serializerAdapter The serializer to serialize an object into a string.
     * @param endpoint Supported Security Copilot API endpoints (protocol and host name, such as
     * https://api.medeina-dev.defender.microsoft.com).
     */
    public SkillContextClientImpl(HttpPipeline httpPipeline, SerializerAdapter serializerAdapter, String endpoint) {
        this.httpPipeline = httpPipeline;
        this.serializerAdapter = serializerAdapter;
        this.endpoint = endpoint;
        this.service
            = RestProxy.create(SkillContextClientService.class, this.httpPipeline, this.getSerializerAdapter());
    }

    /**
     * The interface defining all the services for SkillContextClient to be used by the proxy service to perform REST
     * calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "SkillContextClient")
    public interface SkillContextClientService {
        @Get("/skillContext")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getSkillContext(@HostParam("endpoint") String endpoint,
            @HeaderParam("X-MS-SecurityCopilot-EvaluationToken") String evaluationToken,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/skillContext")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getSkillContextSync(@HostParam("endpoint") String endpoint,
            @HeaderParam("X-MS-SecurityCopilot-EvaluationToken") String evaluationToken,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Post("/skillContext/invokeSkill")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> invokeSkill(@HostParam("endpoint") String endpoint,
            @HeaderParam("X-MS-SecurityCopilot-EvaluationToken") String evaluationToken,
            @HeaderParam("accept") String accept, @BodyParam("application/json") BinaryData invokeSkill,
            RequestOptions requestOptions, Context context);

        @Post("/skillContext/invokeSkill")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> invokeSkillSync(@HostParam("endpoint") String endpoint,
            @HeaderParam("X-MS-SecurityCopilot-EvaluationToken") String evaluationToken,
            @HeaderParam("accept") String accept, @BodyParam("application/json") BinaryData invokeSkill,
            RequestOptions requestOptions, Context context);

        @Get("/skillContext/promptHistory")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getPromptHistory(@HostParam("endpoint") String endpoint,
            @HeaderParam("X-MS-SecurityCopilot-EvaluationToken") String evaluationToken,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/skillContext/promptHistory")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getPromptHistorySync(@HostParam("endpoint") String endpoint,
            @HeaderParam("X-MS-SecurityCopilot-EvaluationToken") String evaluationToken,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Post("/skillContext/logProgress")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> logProgress(@HostParam("endpoint") String endpoint,
            @HeaderParam("X-MS-SecurityCopilot-EvaluationToken") String evaluationToken,
            @HeaderParam("accept") String accept, @BodyParam("application/json") BinaryData logProgressRequest,
            RequestOptions requestOptions, Context context);

        @Post("/skillContext/logProgress")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> logProgressSync(@HostParam("endpoint") String endpoint,
            @HeaderParam("X-MS-SecurityCopilot-EvaluationToken") String evaluationToken,
            @HeaderParam("accept") String accept, @BodyParam("application/json") BinaryData logProgressRequest,
            RequestOptions requestOptions, Context context);

        @Post("/skillContext/setOutputAsync")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> setSkillOutput(@HostParam("endpoint") String endpoint,
            @HeaderParam("X-MS-SecurityCopilot-EvaluationToken") String evaluationToken,
            @HeaderParam("accept") String accept, @BodyParam("application/json") BinaryData outputSkillVariable,
            RequestOptions requestOptions, Context context);

        @Post("/skillContext/setOutputAsync")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> setSkillOutputSync(@HostParam("endpoint") String endpoint,
            @HeaderParam("X-MS-SecurityCopilot-EvaluationToken") String evaluationToken,
            @HeaderParam("accept") String accept, @BodyParam("application/json") BinaryData outputSkillVariable,
            RequestOptions requestOptions, Context context);

        @Get("/skillContext/skillsetSettings")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getSkillsetSettings(@HostParam("endpoint") String endpoint,
            @HeaderParam("X-MS-SecurityCopilot-EvaluationToken") String evaluationToken,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/skillContext/skillsetSettings")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getSkillsetSettingsSync(@HostParam("endpoint") String endpoint,
            @HeaderParam("X-MS-SecurityCopilot-EvaluationToken") String evaluationToken,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Post("/skillContext/setSkillInvocationStarted")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> setSkillInvocationStarted(@HostParam("endpoint") String endpoint,
            @HeaderParam("X-MS-SecurityCopilot-EvaluationToken") String evaluationToken,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Post("/skillContext/setSkillInvocationStarted")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> setSkillInvocationStartedSync(@HostParam("endpoint") String endpoint,
            @HeaderParam("X-MS-SecurityCopilot-EvaluationToken") String evaluationToken,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Post("/skillContext/setSkillInvocationCompleted")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> setSkillInvocationCompleted(@HostParam("endpoint") String endpoint,
            @HeaderParam("X-MS-SecurityCopilot-EvaluationToken") String evaluationToken,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Post("/skillContext/setSkillInvocationCompleted")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> setSkillInvocationCompletedSync(@HostParam("endpoint") String endpoint,
            @HeaderParam("X-MS-SecurityCopilot-EvaluationToken") String evaluationToken,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/skillContext/getSkillsetAuthInfoAsync")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getSkillsetAuthInfo(@HostParam("endpoint") String endpoint,
            @HeaderParam("X-MS-SecurityCopilot-EvaluationToken") String evaluationToken,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/skillContext/getSkillsetAuthInfoAsync")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getSkillsetAuthInfoSync(@HostParam("endpoint") String endpoint,
            @HeaderParam("X-MS-SecurityCopilot-EvaluationToken") String evaluationToken,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/skillContext/getTokenCredentialAsync")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getTokenCredential(@HostParam("endpoint") String endpoint,
            @HeaderParam("X-MS-SecurityCopilot-EvaluationToken") String evaluationToken,
            @HeaderParam("accept") String accept, @BodyParam("application/json") BinaryData getTokenCredentialRequest,
            RequestOptions requestOptions, Context context);

        @Get("/skillContext/getTokenCredentialAsync")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getTokenCredentialSync(@HostParam("endpoint") String endpoint,
            @HeaderParam("X-MS-SecurityCopilot-EvaluationToken") String evaluationToken,
            @HeaderParam("accept") String accept, @BodyParam("application/json") BinaryData getTokenCredentialRequest,
            RequestOptions requestOptions, Context context);

        @Get("/skillContext/getInputAsync")
        @ExpectedResponses({ 200, 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getInput(@HostParam("endpoint") String endpoint,
            @HeaderParam("X-MS-SecurityCopilot-EvaluationToken") String evaluationToken,
            @HeaderParam("accept") String accept, @BodyParam("application/json") BinaryData getInputRequest,
            RequestOptions requestOptions, Context context);

        @Get("/skillContext/getInputAsync")
        @ExpectedResponses({ 200, 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getInputSync(@HostParam("endpoint") String endpoint,
            @HeaderParam("X-MS-SecurityCopilot-EvaluationToken") String evaluationToken,
            @HeaderParam("accept") String accept, @BodyParam("application/json") BinaryData getInputRequest,
            RequestOptions requestOptions, Context context);

        @Post("/skillContext/setInputAsync")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> setInput(@HostParam("endpoint") String endpoint,
            @HeaderParam("X-MS-SecurityCopilot-EvaluationToken") String evaluationToken,
            @HeaderParam("accept") String accept, @BodyParam("application/json") BinaryData setInputRequest,
            RequestOptions requestOptions, Context context);

        @Post("/skillContext/setInputAsync")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> setInputSync(@HostParam("endpoint") String endpoint,
            @HeaderParam("X-MS-SecurityCopilot-EvaluationToken") String evaluationToken,
            @HeaderParam("accept") String accept, @BodyParam("application/json") BinaryData setInputRequest,
            RequestOptions requestOptions, Context context);

        @Post("/skillContext/AddSources")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> addSources(@HostParam("endpoint") String endpoint,
            @HeaderParam("X-MS-SecurityCopilot-EvaluationToken") String evaluationToken,
            @HeaderParam("accept") String accept, @BodyParam("application/json") BinaryData addSourcesRequest,
            RequestOptions requestOptions, Context context);

        @Post("/skillContext/AddSources")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> addSourcesSync(@HostParam("endpoint") String endpoint,
            @HeaderParam("X-MS-SecurityCopilot-EvaluationToken") String evaluationToken,
            @HeaderParam("accept") String accept, @BodyParam("application/json") BinaryData addSourcesRequest,
            RequestOptions requestOptions, Context context);
    }

    /**
     * Get the SkillContext for the current skill invocation.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     descriptor (Required): {
     *         skillset (Required): {
     *             namespace: String (Required)
     *             name: String (Required)
     *             description: String (Required)
     *             descriptionDisplay: String (Required)
     *             disaplyName: String (Required)
     *             icon: String (Required)
     *             category: String(Hidden/Microsoft/Other/Web/Testing/Plugin) (Required)
     *             catalogScope: String(None/User/Workspace/Tenant/Global) (Required)
     *             enabled: boolean (Required)
     *             hidden: boolean (Required)
     *             prerequisites (Required): [
     *                 String (Required)
     *             ]
     *             settings (Required): [
     *                  (Required){
     *                     name: String (Required)
     *                     label: String (Required)
     *                     description: String (Required)
     *                     hintText: String (Required)
     *                     settingType: String(SecretString/String) (Required)
     *                     required: boolean (Required)
     *                     defaultValue: String (Required)
     *                     value: String (Required)
     *                 }
     *             ]
     *             authorization (Required): {
     *                 type: String(None/Basic/ApiKey/OAuthAuthorizationCodeFlow/OAuthClientCredentialsFlow/AAD/ServiceHttp/AADDelegated) (Required)
     *             }
     *             supportedAuthTypes (Required): [
     *                 String(None/Basic/ApiKey/OAuthAuthorizationCodeFlow/OAuthClientCredentialsFlow/AAD/ServiceHttp/AADDelegated) (Required)
     *             ]
     *             userVisibilityFeatureFlags (Required): [
     *                 String (Required)
     *             ]
     *             userVisibility: String(Always/Never/IfFeatureFlagEnabled) (Required)
     *             plannerVisibilityFeatureFlags (Required): [
     *                 String (Required)
     *             ]
     *             plannerVisibility: String(Always/Never/IfFeatureFlagEnabled) (Required)
     *             creatorUserId: String (Required)
     *             ownersGroupId: String (Required)
     *         }
     *         name: String (Required)
     *         format: String (Required)
     *         displayName: String (Required)
     *         altName: String (Required)
     *         dependencies (Required): [
     *              (Required){
     *                 skillsetName: String (Required)
     *                 skillName: String (Required)
     *             }
     *         ]
     *         description: String (Required)
     *         examplePrompts (Required): [
     *             String (Required)
     *         ]
     *         hidden: boolean (Required)
     *         inputs (Required): [
     *              (Required){
     *                 name: String (Optional)
     *                 type (Required): {
     *                     name: String (Required)
     *                 }
     *                 description: String (Optional)
     *                 required: boolean (Required)
     *                 defaultValue: String (Optional)
     *                 placeholderValue: String (Required)
     *                 enum (Required): [
     *                     String (Required)
     *                 ]
     *             }
     *         ]
     *         outputs (Required): [
     *              (Required){
     *                 name: String (Optional)
     *                 type (Required): (recursive schema, see type above)
     *                 description: String (Optional)
     *             }
     *         ]
     *         promptAlignedName: String (Required)
     *         userVisibilityFeatureFlags (Required): [
     *             String (Required)
     *         ]
     *         userVisibility: String(Always/Never/IfFeatureFlagEnabled) (Required)
     *         plannerVisibilityFeatureFlags (Required): [
     *             String (Required)
     *         ]
     *         plannerVisibility: String(Always/Never/IfFeatureFlagEnabled) (Required)
     *         settings (Required): {
     *             String: String (Required)
     *         }
     *         skillSummaryMetadata (Required): {
     *             summaryStartMessage: String (Required)
     *             summaryEndMessage: String (Required)
     *         }
     *         enableVariableSubstitutionInCompose: boolean (Required)
     *     }
     *     id: String (Required)
     *     featureFlags (Required): [
     *         String (Required)
     *     ]
     *     inputs (Required): {
     *         String (Required): {
     *             type: String (Optional)
     *             value: String (Optional)
     *             valueStoredAsJson: boolean (Required)
     *         }
     *     }
     *     properties (Required): {
     *         String: String (Required)
     *     }
     *     startTime: OffsetDateTime (Required)
     *     tenantId: String (Required)
     *     userId: String (Required)
     * }
     * }</pre>
     * 
     * @param evaluationToken A sequence of textual characters.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the SkillContext for the current skill invocation along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getSkillContextWithResponseAsync(String evaluationToken,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.getSkillContext(this.getEndpoint(), evaluationToken, accept, requestOptions, context));
    }

    /**
     * Get the SkillContext for the current skill invocation.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     descriptor (Required): {
     *         skillset (Required): {
     *             namespace: String (Required)
     *             name: String (Required)
     *             description: String (Required)
     *             descriptionDisplay: String (Required)
     *             disaplyName: String (Required)
     *             icon: String (Required)
     *             category: String(Hidden/Microsoft/Other/Web/Testing/Plugin) (Required)
     *             catalogScope: String(None/User/Workspace/Tenant/Global) (Required)
     *             enabled: boolean (Required)
     *             hidden: boolean (Required)
     *             prerequisites (Required): [
     *                 String (Required)
     *             ]
     *             settings (Required): [
     *                  (Required){
     *                     name: String (Required)
     *                     label: String (Required)
     *                     description: String (Required)
     *                     hintText: String (Required)
     *                     settingType: String(SecretString/String) (Required)
     *                     required: boolean (Required)
     *                     defaultValue: String (Required)
     *                     value: String (Required)
     *                 }
     *             ]
     *             authorization (Required): {
     *                 type: String(None/Basic/ApiKey/OAuthAuthorizationCodeFlow/OAuthClientCredentialsFlow/AAD/ServiceHttp/AADDelegated) (Required)
     *             }
     *             supportedAuthTypes (Required): [
     *                 String(None/Basic/ApiKey/OAuthAuthorizationCodeFlow/OAuthClientCredentialsFlow/AAD/ServiceHttp/AADDelegated) (Required)
     *             ]
     *             userVisibilityFeatureFlags (Required): [
     *                 String (Required)
     *             ]
     *             userVisibility: String(Always/Never/IfFeatureFlagEnabled) (Required)
     *             plannerVisibilityFeatureFlags (Required): [
     *                 String (Required)
     *             ]
     *             plannerVisibility: String(Always/Never/IfFeatureFlagEnabled) (Required)
     *             creatorUserId: String (Required)
     *             ownersGroupId: String (Required)
     *         }
     *         name: String (Required)
     *         format: String (Required)
     *         displayName: String (Required)
     *         altName: String (Required)
     *         dependencies (Required): [
     *              (Required){
     *                 skillsetName: String (Required)
     *                 skillName: String (Required)
     *             }
     *         ]
     *         description: String (Required)
     *         examplePrompts (Required): [
     *             String (Required)
     *         ]
     *         hidden: boolean (Required)
     *         inputs (Required): [
     *              (Required){
     *                 name: String (Optional)
     *                 type (Required): {
     *                     name: String (Required)
     *                 }
     *                 description: String (Optional)
     *                 required: boolean (Required)
     *                 defaultValue: String (Optional)
     *                 placeholderValue: String (Required)
     *                 enum (Required): [
     *                     String (Required)
     *                 ]
     *             }
     *         ]
     *         outputs (Required): [
     *              (Required){
     *                 name: String (Optional)
     *                 type (Required): (recursive schema, see type above)
     *                 description: String (Optional)
     *             }
     *         ]
     *         promptAlignedName: String (Required)
     *         userVisibilityFeatureFlags (Required): [
     *             String (Required)
     *         ]
     *         userVisibility: String(Always/Never/IfFeatureFlagEnabled) (Required)
     *         plannerVisibilityFeatureFlags (Required): [
     *             String (Required)
     *         ]
     *         plannerVisibility: String(Always/Never/IfFeatureFlagEnabled) (Required)
     *         settings (Required): {
     *             String: String (Required)
     *         }
     *         skillSummaryMetadata (Required): {
     *             summaryStartMessage: String (Required)
     *             summaryEndMessage: String (Required)
     *         }
     *         enableVariableSubstitutionInCompose: boolean (Required)
     *     }
     *     id: String (Required)
     *     featureFlags (Required): [
     *         String (Required)
     *     ]
     *     inputs (Required): {
     *         String (Required): {
     *             type: String (Optional)
     *             value: String (Optional)
     *             valueStoredAsJson: boolean (Required)
     *         }
     *     }
     *     properties (Required): {
     *         String: String (Required)
     *     }
     *     startTime: OffsetDateTime (Required)
     *     tenantId: String (Required)
     *     userId: String (Required)
     * }
     * }</pre>
     * 
     * @param evaluationToken A sequence of textual characters.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the SkillContext for the current skill invocation along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getSkillContextWithResponse(String evaluationToken, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getSkillContextSync(this.getEndpoint(), evaluationToken, accept, requestOptions, Context.NONE);
    }

    /**
     * Invokes a skill. Allows current skill to invoke dependency skills.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     skillsetName: String (Optional)
     *     skillName: String (Required)
     *     inputs (Required): {
     *         String (Required): {
     *             type: String (Optional)
     *             value: String (Optional)
     *             valueStoredAsJson: boolean (Required)
     *         }
     *     }
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     type: String (Optional)
     *     value: String (Optional)
     *     valueStoredAsJson: boolean (Required)
     *     sources (Required): [
     *          (Required){
     *             displayName: String (Required)
     *             sourceContent: String (Required)
     *             sourceType: String(Uri/StringType) (Required)
     *             sourceSerializedData: String (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param evaluationToken A sequence of textual characters.
     * @param invokeSkill Invoke skill request including necessary inputs for invoking a skill.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return skill variable parent entity adding additional attribute 'skillsource' to provide visibility to users as
     * to what data/information was used in generating the output of a skill along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> invokeSkillWithResponseAsync(String evaluationToken, BinaryData invokeSkill,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.invokeSkill(this.getEndpoint(), evaluationToken, accept,
            invokeSkill, requestOptions, context));
    }

    /**
     * Invokes a skill. Allows current skill to invoke dependency skills.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     skillsetName: String (Optional)
     *     skillName: String (Required)
     *     inputs (Required): {
     *         String (Required): {
     *             type: String (Optional)
     *             value: String (Optional)
     *             valueStoredAsJson: boolean (Required)
     *         }
     *     }
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     type: String (Optional)
     *     value: String (Optional)
     *     valueStoredAsJson: boolean (Required)
     *     sources (Required): [
     *          (Required){
     *             displayName: String (Required)
     *             sourceContent: String (Required)
     *             sourceType: String(Uri/StringType) (Required)
     *             sourceSerializedData: String (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param evaluationToken A sequence of textual characters.
     * @param invokeSkill Invoke skill request including necessary inputs for invoking a skill.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return skill variable parent entity adding additional attribute 'skillsource' to provide visibility to users as
     * to what data/information was used in generating the output of a skill along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> invokeSkillWithResponse(String evaluationToken, BinaryData invokeSkill,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.invokeSkillSync(this.getEndpoint(), evaluationToken, accept, invokeSkill, requestOptions,
            Context.NONE);
    }

    /**
     * Get prompt history.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     prompts (Required): [
     *          (Required){
     *             prompt: String (Required)
     *             response: String (Required)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param evaluationToken A sequence of textual characters.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return prompt history along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getPromptHistoryWithResponseAsync(String evaluationToken,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.getPromptHistory(this.getEndpoint(), evaluationToken, accept, requestOptions, context));
    }

    /**
     * Get prompt history.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     prompts (Required): [
     *          (Required){
     *             prompt: String (Required)
     *             response: String (Required)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param evaluationToken A sequence of textual characters.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return prompt history along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getPromptHistoryWithResponse(String evaluationToken, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getPromptHistorySync(this.getEndpoint(), evaluationToken, accept, requestOptions, Context.NONE);
    }

    /**
     * Log a progress message for a skill invocation.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     level: String(Error/Warning/Information/Verbose) (Optional)
     *     message: String (Required)
     * }
     * }</pre>
     * 
     * @param evaluationToken A sequence of textual characters.
     * @param logProgressRequest The progress message to log during a skill invocation.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> logProgressWithResponseAsync(String evaluationToken, BinaryData logProgressRequest,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.logProgress(this.getEndpoint(), evaluationToken, accept,
            logProgressRequest, requestOptions, context));
    }

    /**
     * Log a progress message for a skill invocation.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     level: String(Error/Warning/Information/Verbose) (Optional)
     *     message: String (Required)
     * }
     * }</pre>
     * 
     * @param evaluationToken A sequence of textual characters.
     * @param logProgressRequest The progress message to log during a skill invocation.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> logProgressWithResponse(String evaluationToken, BinaryData logProgressRequest,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.logProgressSync(this.getEndpoint(), evaluationToken, accept, logProgressRequest, requestOptions,
            Context.NONE);
    }

    /**
     * Sets the skill output.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     type: String (Optional)
     *     value: String (Optional)
     *     valueStoredAsJson: boolean (Required)
     *     sources (Required): [
     *          (Required){
     *             displayName: String (Required)
     *             sourceContent: String (Required)
     *             sourceType: String(Uri/StringType) (Required)
     *             sourceSerializedData: String (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param evaluationToken A sequence of textual characters.
     * @param outputSkillVariable Skill variable parent entity adding additional attribute 'skillsource' to provide
     * visibility to users as to what data/information was used in generating the output of a skill.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> setSkillOutputWithResponseAsync(String evaluationToken, BinaryData outputSkillVariable,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.setSkillOutput(this.getEndpoint(), evaluationToken, accept,
            outputSkillVariable, requestOptions, context));
    }

    /**
     * Sets the skill output.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     type: String (Optional)
     *     value: String (Optional)
     *     valueStoredAsJson: boolean (Required)
     *     sources (Required): [
     *          (Required){
     *             displayName: String (Required)
     *             sourceContent: String (Required)
     *             sourceType: String(Uri/StringType) (Required)
     *             sourceSerializedData: String (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param evaluationToken A sequence of textual characters.
     * @param outputSkillVariable Skill variable parent entity adding additional attribute 'skillsource' to provide
     * visibility to users as to what data/information was used in generating the output of a skill.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> setSkillOutputWithResponse(String evaluationToken, BinaryData outputSkillVariable,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.setSkillOutputSync(this.getEndpoint(), evaluationToken, accept, outputSkillVariable,
            requestOptions, Context.NONE);
    }

    /**
     * Gets the skillset settings.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     String: String (Required)
     * }
     * }</pre>
     * 
     * @param evaluationToken A sequence of textual characters.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the skillset settings along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getSkillsetSettingsWithResponseAsync(String evaluationToken,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getSkillsetSettings(this.getEndpoint(), evaluationToken, accept,
            requestOptions, context));
    }

    /**
     * Gets the skillset settings.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     String: String (Required)
     * }
     * }</pre>
     * 
     * @param evaluationToken A sequence of textual characters.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the skillset settings along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getSkillsetSettingsWithResponse(String evaluationToken, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getSkillsetSettingsSync(this.getEndpoint(), evaluationToken, accept, requestOptions,
            Context.NONE);
    }

    /**
     * Notifies security copilot backend service that the skill has been invoked.
     * 
     * @param evaluationToken A sequence of textual characters.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> setSkillInvocationStartedWithResponseAsync(String evaluationToken,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.setSkillInvocationStarted(this.getEndpoint(), evaluationToken,
            accept, requestOptions, context));
    }

    /**
     * Notifies security copilot backend service that the skill has been invoked.
     * 
     * @param evaluationToken A sequence of textual characters.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> setSkillInvocationStartedWithResponse(String evaluationToken, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.setSkillInvocationStartedSync(this.getEndpoint(), evaluationToken, accept, requestOptions,
            Context.NONE);
    }

    /**
     * Notifies security copilot backend service that the skill invocation has completed.
     * 
     * @param evaluationToken A sequence of textual characters.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> setSkillInvocationCompletedWithResponseAsync(String evaluationToken,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.setSkillInvocationCompleted(this.getEndpoint(), evaluationToken,
            accept, requestOptions, context));
    }

    /**
     * Notifies security copilot backend service that the skill invocation has completed.
     * 
     * @param evaluationToken A sequence of textual characters.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> setSkillInvocationCompletedWithResponse(String evaluationToken,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.setSkillInvocationCompletedSync(this.getEndpoint(), evaluationToken, accept, requestOptions,
            Context.NONE);
    }

    /**
     * Gets the skillset auth related information.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     authLocation: String(Header/QueryParams) (Required)
     *     authInfo (Required): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param evaluationToken A sequence of textual characters.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the skillset auth related information along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getSkillsetAuthInfoWithResponseAsync(String evaluationToken,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getSkillsetAuthInfo(this.getEndpoint(), evaluationToken, accept,
            requestOptions, context));
    }

    /**
     * Gets the skillset auth related information.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     authLocation: String(Header/QueryParams) (Required)
     *     authInfo (Required): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param evaluationToken A sequence of textual characters.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the skillset auth related information along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getSkillsetAuthInfoWithResponse(String evaluationToken, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getSkillsetAuthInfoSync(this.getEndpoint(), evaluationToken, accept, requestOptions,
            Context.NONE);
    }

    /**
     * Gets the token credentials.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     scopes (Required): [
     *         String (Required)
     *     ]
     *     tokenCredentialType: String(None/UserTokenCredential/ServiceTokenCredential) (Required)
     *     tenantId: String (Optional)
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     token: String (Required)
     *     expiresOn: OffsetDateTime (Required)
     * }
     * }</pre>
     * 
     * @param evaluationToken A sequence of textual characters.
     * @param getTokenCredentialRequest TokenCredentialRequest.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the token credentials along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getTokenCredentialWithResponseAsync(String evaluationToken,
        BinaryData getTokenCredentialRequest, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getTokenCredential(this.getEndpoint(), evaluationToken, accept,
            getTokenCredentialRequest, requestOptions, context));
    }

    /**
     * Gets the token credentials.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     scopes (Required): [
     *         String (Required)
     *     ]
     *     tokenCredentialType: String(None/UserTokenCredential/ServiceTokenCredential) (Required)
     *     tenantId: String (Optional)
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     token: String (Required)
     *     expiresOn: OffsetDateTime (Required)
     * }
     * }</pre>
     * 
     * @param evaluationToken A sequence of textual characters.
     * @param getTokenCredentialRequest TokenCredentialRequest.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the token credentials along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getTokenCredentialWithResponse(String evaluationToken,
        BinaryData getTokenCredentialRequest, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getTokenCredentialSync(this.getEndpoint(), evaluationToken, accept, getTokenCredentialRequest,
            requestOptions, Context.NONE);
    }

    /**
     * Gets the skill input.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     inputName: String (Required)
     *     defaultValue (Optional): {
     *         type: String (Optional)
     *         value: String (Optional)
     *         valueStoredAsJson: boolean (Required)
     *     }
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     type: String (Optional)
     *     value: String (Optional)
     *     valueStoredAsJson: boolean (Required)
     * }
     * }</pre>
     * 
     * @param evaluationToken A sequence of textual characters.
     * @param getInputRequest GetInputRequest.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the skill input along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getInputWithResponseAsync(String evaluationToken, BinaryData getInputRequest,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getInput(this.getEndpoint(), evaluationToken, accept,
            getInputRequest, requestOptions, context));
    }

    /**
     * Gets the skill input.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     inputName: String (Required)
     *     defaultValue (Optional): {
     *         type: String (Optional)
     *         value: String (Optional)
     *         valueStoredAsJson: boolean (Required)
     *     }
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     type: String (Optional)
     *     value: String (Optional)
     *     valueStoredAsJson: boolean (Required)
     * }
     * }</pre>
     * 
     * @param evaluationToken A sequence of textual characters.
     * @param getInputRequest GetInputRequest.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the skill input along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getInputWithResponse(String evaluationToken, BinaryData getInputRequest,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getInputSync(this.getEndpoint(), evaluationToken, accept, getInputRequest, requestOptions,
            Context.NONE);
    }

    /**
     * Sets the input for the skill.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     inputName: String (Required)
     *     defaultValue (Optional): {
     *         type: String (Optional)
     *         value: String (Optional)
     *         valueStoredAsJson: boolean (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param evaluationToken A sequence of textual characters.
     * @param setInputRequest SetInputRequest.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> setInputWithResponseAsync(String evaluationToken, BinaryData setInputRequest,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.setInput(this.getEndpoint(), evaluationToken, accept,
            setInputRequest, requestOptions, context));
    }

    /**
     * Sets the input for the skill.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     inputName: String (Required)
     *     defaultValue (Optional): {
     *         type: String (Optional)
     *         value: String (Optional)
     *         valueStoredAsJson: boolean (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param evaluationToken A sequence of textual characters.
     * @param setInputRequest SetInputRequest.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> setInputWithResponse(String evaluationToken, BinaryData setInputRequest,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.setInputSync(this.getEndpoint(), evaluationToken, accept, setInputRequest, requestOptions,
            Context.NONE);
    }

    /**
     * Adds a list of sources to the output.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     sources (Required): [
     *          (Required){
     *             displayName: String (Required)
     *             sourceContent: String (Required)
     *             sourceType: String(Uri/StringType) (Required)
     *             sourceSerializedData: String (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param evaluationToken A sequence of textual characters.
     * @param addSourcesRequest AddSourcesRequest.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> addSourcesWithResponseAsync(String evaluationToken, BinaryData addSourcesRequest,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.addSources(this.getEndpoint(), evaluationToken, accept,
            addSourcesRequest, requestOptions, context));
    }

    /**
     * Adds a list of sources to the output.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     sources (Required): [
     *          (Required){
     *             displayName: String (Required)
     *             sourceContent: String (Required)
     *             sourceType: String(Uri/StringType) (Required)
     *             sourceSerializedData: String (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param evaluationToken A sequence of textual characters.
     * @param addSourcesRequest AddSourcesRequest.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> addSourcesWithResponse(String evaluationToken, BinaryData addSourcesRequest,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.addSourcesSync(this.getEndpoint(), evaluationToken, accept, addSourcesRequest, requestOptions,
            Context.NONE);
    }
}
