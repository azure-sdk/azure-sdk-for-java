// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package microsoft.security.copilot.skillsetauthoring.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/**
 * The desciptor of a skill.
 */
@Immutable
public final class SkillDescriptor {
    /*
     * The skillset descriptor
     */
    @Generated
    @JsonProperty(value = "skillset")
    private SkillsetDescriptor skillset;

    /*
     * The name of the skill
     */
    @Generated
    @JsonProperty(value = "name")
    private String name;

    /*
     * The format of the skill
     */
    @Generated
    @JsonProperty(value = "format")
    private String format;

    /*
     * The display name of the skill
     */
    @Generated
    @JsonProperty(value = "displayName")
    private String displayName;

    /*
     * An alternative name for the skill as some planners follow different naming convensions. This is set by the
     * planner to map the name back to the skill
     */
    @Generated
    @JsonProperty(value = "altName")
    private String altName;

    /*
     * The dependencies of the skill
     */
    @Generated
    @JsonProperty(value = "dependencies")
    private List<SkillDependencyDescriptor> dependencies;

    /*
     * The description of the skill
     */
    @Generated
    @JsonProperty(value = "description")
    private String description;

    /*
     * A list of example prompts for the skill
     */
    @Generated
    @JsonProperty(value = "examplePrompts")
    private List<String> examplePrompts;

    /*
     * Whether the skill is hidden TODO what does this mean
     */
    @Generated
    @JsonProperty(value = "hidden")
    private boolean hidden;

    /*
     * The inputs required for the skill
     */
    @Generated
    @JsonProperty(value = "inputs")
    private List<SkillInputDescriptor> inputs;

    /*
     * The outputs of the skill
     */
    @Generated
    @JsonProperty(value = "outputs")
    private List<SkillOutputDescriptor> outputs;

    /*
     * The prompt aligned name of the skill TODO what does this mean
     */
    @Generated
    @JsonProperty(value = "promptAlignedName")
    private String promptAlignedName;

    /*
     * A list of feature flags. At least one of the feature flags is required to enabled in the prompt context in order
     * for the skillset to be available
     */
    @Generated
    @JsonProperty(value = "userVisibilityFeatureFlags")
    private List<String> userVisibilityFeatureFlags;

    /*
     * Controls the conditions under which the users can see or use this skillset
     */
    @Generated
    @JsonProperty(value = "userVisibility")
    private SkillVisibility userVisibility;

    /*
     * Visibility flags required for the planner to user the skillset TODO confirm what this does
     */
    @Generated
    @JsonProperty(value = "plannerVisibilityFeatureFlags")
    private List<String> plannerVisibilityFeatureFlags;

    /*
     * Controls the conditions under a prompt can use this skillset
     */
    @Generated
    @JsonProperty(value = "plannerVisibility")
    private SkillVisibility plannerVisibility;

    /*
     * The settings of the skill
     */
    @Generated
    @JsonProperty(value = "settings")
    private Map<String, String> settings;

    /*
     * skillSummaryMetadata
     */
    @Generated
    @JsonProperty(value = "skillSummaryMetadata")
    private SkillSummaryDescriptor skillSummaryMetadata;

    /*
     * EnableVariableSubstitutionInCompose
     */
    @Generated
    @JsonProperty(value = "enableVariableSubstitutionInCompose")
    private boolean enableVariableSubstitutionInCompose;

    /**
     * Creates an instance of SkillDescriptor class.
     * 
     * @param skillset the skillset value to set.
     * @param name the name value to set.
     * @param format the format value to set.
     * @param displayName the displayName value to set.
     * @param altName the altName value to set.
     * @param dependencies the dependencies value to set.
     * @param description the description value to set.
     * @param examplePrompts the examplePrompts value to set.
     * @param hidden the hidden value to set.
     * @param inputs the inputs value to set.
     * @param outputs the outputs value to set.
     * @param promptAlignedName the promptAlignedName value to set.
     * @param userVisibilityFeatureFlags the userVisibilityFeatureFlags value to set.
     * @param userVisibility the userVisibility value to set.
     * @param plannerVisibilityFeatureFlags the plannerVisibilityFeatureFlags value to set.
     * @param plannerVisibility the plannerVisibility value to set.
     * @param settings the settings value to set.
     * @param skillSummaryMetadata the skillSummaryMetadata value to set.
     * @param enableVariableSubstitutionInCompose the enableVariableSubstitutionInCompose value to set.
     */
    @Generated
    @JsonCreator
    private SkillDescriptor(@JsonProperty(value = "skillset") SkillsetDescriptor skillset,
        @JsonProperty(value = "name") String name, @JsonProperty(value = "format") String format,
        @JsonProperty(value = "displayName") String displayName, @JsonProperty(value = "altName") String altName,
        @JsonProperty(value = "dependencies") List<SkillDependencyDescriptor> dependencies,
        @JsonProperty(value = "description") String description,
        @JsonProperty(value = "examplePrompts") List<String> examplePrompts,
        @JsonProperty(value = "hidden") boolean hidden,
        @JsonProperty(value = "inputs") List<SkillInputDescriptor> inputs,
        @JsonProperty(value = "outputs") List<SkillOutputDescriptor> outputs,
        @JsonProperty(value = "promptAlignedName") String promptAlignedName,
        @JsonProperty(value = "userVisibilityFeatureFlags") List<String> userVisibilityFeatureFlags,
        @JsonProperty(value = "userVisibility") SkillVisibility userVisibility,
        @JsonProperty(value = "plannerVisibilityFeatureFlags") List<String> plannerVisibilityFeatureFlags,
        @JsonProperty(value = "plannerVisibility") SkillVisibility plannerVisibility,
        @JsonProperty(value = "settings") Map<String, String> settings,
        @JsonProperty(value = "skillSummaryMetadata") SkillSummaryDescriptor skillSummaryMetadata,
        @JsonProperty(value = "enableVariableSubstitutionInCompose") boolean enableVariableSubstitutionInCompose) {
        this.skillset = skillset;
        this.name = name;
        this.format = format;
        this.displayName = displayName;
        this.altName = altName;
        this.dependencies = dependencies;
        this.description = description;
        this.examplePrompts = examplePrompts;
        this.hidden = hidden;
        this.inputs = inputs;
        this.outputs = outputs;
        this.promptAlignedName = promptAlignedName;
        this.userVisibilityFeatureFlags = userVisibilityFeatureFlags;
        this.userVisibility = userVisibility;
        this.plannerVisibilityFeatureFlags = plannerVisibilityFeatureFlags;
        this.plannerVisibility = plannerVisibility;
        this.settings = settings;
        this.skillSummaryMetadata = skillSummaryMetadata;
        this.enableVariableSubstitutionInCompose = enableVariableSubstitutionInCompose;
    }

    /**
     * Get the skillset property: The skillset descriptor.
     * 
     * @return the skillset value.
     */
    @Generated
    public SkillsetDescriptor getSkillset() {
        return this.skillset;
    }

    /**
     * Get the name property: The name of the skill.
     * 
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Get the format property: The format of the skill.
     * 
     * @return the format value.
     */
    @Generated
    public String getFormat() {
        return this.format;
    }

    /**
     * Get the displayName property: The display name of the skill.
     * 
     * @return the displayName value.
     */
    @Generated
    public String getDisplayName() {
        return this.displayName;
    }

    /**
     * Get the altName property: An alternative name for the skill as some planners follow different naming
     * convensions. This is set by the planner to map the name back to the skill.
     * 
     * @return the altName value.
     */
    @Generated
    public String getAltName() {
        return this.altName;
    }

    /**
     * Get the dependencies property: The dependencies of the skill.
     * 
     * @return the dependencies value.
     */
    @Generated
    public List<SkillDependencyDescriptor> getDependencies() {
        return this.dependencies;
    }

    /**
     * Get the description property: The description of the skill.
     * 
     * @return the description value.
     */
    @Generated
    public String getDescription() {
        return this.description;
    }

    /**
     * Get the examplePrompts property: A list of example prompts for the skill.
     * 
     * @return the examplePrompts value.
     */
    @Generated
    public List<String> getExamplePrompts() {
        return this.examplePrompts;
    }

    /**
     * Get the hidden property: Whether the skill is hidden TODO what does this mean.
     * 
     * @return the hidden value.
     */
    @Generated
    public boolean isHidden() {
        return this.hidden;
    }

    /**
     * Get the inputs property: The inputs required for the skill.
     * 
     * @return the inputs value.
     */
    @Generated
    public List<SkillInputDescriptor> getInputs() {
        return this.inputs;
    }

    /**
     * Get the outputs property: The outputs of the skill.
     * 
     * @return the outputs value.
     */
    @Generated
    public List<SkillOutputDescriptor> getOutputs() {
        return this.outputs;
    }

    /**
     * Get the promptAlignedName property: The prompt aligned name of the skill TODO what does this mean.
     * 
     * @return the promptAlignedName value.
     */
    @Generated
    public String getPromptAlignedName() {
        return this.promptAlignedName;
    }

    /**
     * Get the userVisibilityFeatureFlags property: A list of feature flags. At least one of the feature flags is
     * required to enabled in the prompt context in order for the skillset to be available.
     * 
     * @return the userVisibilityFeatureFlags value.
     */
    @Generated
    public List<String> getUserVisibilityFeatureFlags() {
        return this.userVisibilityFeatureFlags;
    }

    /**
     * Get the userVisibility property: Controls the conditions under which the users can see or use this skillset.
     * 
     * @return the userVisibility value.
     */
    @Generated
    public SkillVisibility getUserVisibility() {
        return this.userVisibility;
    }

    /**
     * Get the plannerVisibilityFeatureFlags property: Visibility flags required for the planner to user the skillset
     * TODO confirm what this does.
     * 
     * @return the plannerVisibilityFeatureFlags value.
     */
    @Generated
    public List<String> getPlannerVisibilityFeatureFlags() {
        return this.plannerVisibilityFeatureFlags;
    }

    /**
     * Get the plannerVisibility property: Controls the conditions under a prompt can use this skillset.
     * 
     * @return the plannerVisibility value.
     */
    @Generated
    public SkillVisibility getPlannerVisibility() {
        return this.plannerVisibility;
    }

    /**
     * Get the settings property: The settings of the skill.
     * 
     * @return the settings value.
     */
    @Generated
    public Map<String, String> getSettings() {
        return this.settings;
    }

    /**
     * Get the skillSummaryMetadata property: skillSummaryMetadata.
     * 
     * @return the skillSummaryMetadata value.
     */
    @Generated
    public SkillSummaryDescriptor getSkillSummaryMetadata() {
        return this.skillSummaryMetadata;
    }

    /**
     * Get the enableVariableSubstitutionInCompose property: EnableVariableSubstitutionInCompose.
     * 
     * @return the enableVariableSubstitutionInCompose value.
     */
    @Generated
    public boolean isEnableVariableSubstitutionInCompose() {
        return this.enableVariableSubstitutionInCompose;
    }
}
