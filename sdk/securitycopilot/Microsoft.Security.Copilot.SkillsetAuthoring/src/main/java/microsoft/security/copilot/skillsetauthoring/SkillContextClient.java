// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package microsoft.security.copilot.skillsetauthoring;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.serializer.TypeReference;
import java.util.Map;
import microsoft.security.copilot.skillsetauthoring.implementation.SkillContextClientImpl;
import microsoft.security.copilot.skillsetauthoring.models.AccessToken;
import microsoft.security.copilot.skillsetauthoring.models.AddSourcesRequest;
import microsoft.security.copilot.skillsetauthoring.models.AuthDetails;
import microsoft.security.copilot.skillsetauthoring.models.GetInputRequest;
import microsoft.security.copilot.skillsetauthoring.models.GetTokenCredentialRequest;
import microsoft.security.copilot.skillsetauthoring.models.InvokeSkillRequest;
import microsoft.security.copilot.skillsetauthoring.models.LogProgressRequest;
import microsoft.security.copilot.skillsetauthoring.models.OutputSkillVariable;
import microsoft.security.copilot.skillsetauthoring.models.PromptHistoryResponse;
import microsoft.security.copilot.skillsetauthoring.models.SetInputRequest;
import microsoft.security.copilot.skillsetauthoring.models.SkillContextResponse;
import microsoft.security.copilot.skillsetauthoring.models.SkillVariable;

/**
 * Initializes a new instance of the synchronous SkillContextClient type.
 */
@ServiceClient(builder = SkillContextClientBuilder.class)
public final class SkillContextClient {
    @Generated
    private final SkillContextClientImpl serviceClient;

    /**
     * Initializes an instance of SkillContextClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    SkillContextClient(SkillContextClientImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Get the SkillContext for the current skill invocation.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     descriptor (Required): {
     *         skillset (Required): {
     *             namespace: String (Required)
     *             name: String (Required)
     *             description: String (Required)
     *             descriptionDisplay: String (Required)
     *             disaplyName: String (Required)
     *             icon: String (Required)
     *             category: String(Hidden/Microsoft/Other/Web/Testing/Plugin) (Required)
     *             catalogScope: String(None/User/Workspace/Tenant/Global) (Required)
     *             enabled: boolean (Required)
     *             hidden: boolean (Required)
     *             prerequisites (Required): [
     *                 String (Required)
     *             ]
     *             settings (Required): [
     *                  (Required){
     *                     name: String (Required)
     *                     label: String (Required)
     *                     description: String (Required)
     *                     hintText: String (Required)
     *                     settingType: String(SecretString/String) (Required)
     *                     required: boolean (Required)
     *                     defaultValue: String (Required)
     *                     value: String (Required)
     *                 }
     *             ]
     *             authorization (Required): {
     *                 type: String(None/Basic/ApiKey/OAuthAuthorizationCodeFlow/OAuthClientCredentialsFlow/AAD/ServiceHttp/AADDelegated) (Required)
     *             }
     *             supportedAuthTypes (Required): [
     *                 String(None/Basic/ApiKey/OAuthAuthorizationCodeFlow/OAuthClientCredentialsFlow/AAD/ServiceHttp/AADDelegated) (Required)
     *             ]
     *             userVisibilityFeatureFlags (Required): [
     *                 String (Required)
     *             ]
     *             userVisibility: String(Always/Never/IfFeatureFlagEnabled) (Required)
     *             plannerVisibilityFeatureFlags (Required): [
     *                 String (Required)
     *             ]
     *             plannerVisibility: String(Always/Never/IfFeatureFlagEnabled) (Required)
     *             creatorUserId: String (Required)
     *             ownersGroupId: String (Required)
     *         }
     *         name: String (Required)
     *         format: String (Required)
     *         displayName: String (Required)
     *         altName: String (Required)
     *         dependencies (Required): [
     *              (Required){
     *                 skillsetName: String (Required)
     *                 skillName: String (Required)
     *             }
     *         ]
     *         description: String (Required)
     *         examplePrompts (Required): [
     *             String (Required)
     *         ]
     *         hidden: boolean (Required)
     *         inputs (Required): [
     *              (Required){
     *                 name: String (Optional)
     *                 type (Required): {
     *                     name: String (Required)
     *                 }
     *                 description: String (Optional)
     *                 required: boolean (Required)
     *                 defaultValue: String (Optional)
     *                 placeholderValue: String (Required)
     *                 enum (Required): [
     *                     String (Required)
     *                 ]
     *             }
     *         ]
     *         outputs (Required): [
     *              (Required){
     *                 name: String (Optional)
     *                 type (Required): (recursive schema, see type above)
     *                 description: String (Optional)
     *             }
     *         ]
     *         promptAlignedName: String (Required)
     *         userVisibilityFeatureFlags (Required): [
     *             String (Required)
     *         ]
     *         userVisibility: String(Always/Never/IfFeatureFlagEnabled) (Required)
     *         plannerVisibilityFeatureFlags (Required): [
     *             String (Required)
     *         ]
     *         plannerVisibility: String(Always/Never/IfFeatureFlagEnabled) (Required)
     *         settings (Required): {
     *             String: String (Required)
     *         }
     *         skillSummaryMetadata (Required): {
     *             summaryStartMessage: String (Required)
     *             summaryEndMessage: String (Required)
     *         }
     *         enableVariableSubstitutionInCompose: boolean (Required)
     *     }
     *     id: String (Required)
     *     featureFlags (Required): [
     *         String (Required)
     *     ]
     *     inputs (Required): {
     *         String (Required): {
     *             type: String (Optional)
     *             value: String (Optional)
     *             valueStoredAsJson: boolean (Required)
     *         }
     *     }
     *     properties (Required): {
     *         String: String (Required)
     *     }
     *     startTime: OffsetDateTime (Required)
     *     tenantId: String (Required)
     *     userId: String (Required)
     * }
     * }</pre>
     * 
     * @param evaluationToken A sequence of textual characters.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the SkillContext for the current skill invocation along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getSkillContextWithResponse(String evaluationToken, RequestOptions requestOptions) {
        return this.serviceClient.getSkillContextWithResponse(evaluationToken, requestOptions);
    }

    /**
     * Invokes a skill. Allows current skill to invoke dependency skills.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     skillsetName: String (Optional)
     *     skillName: String (Required)
     *     inputs (Required): {
     *         String (Required): {
     *             type: String (Optional)
     *             value: String (Optional)
     *             valueStoredAsJson: boolean (Required)
     *         }
     *     }
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     type: String (Optional)
     *     value: String (Optional)
     *     valueStoredAsJson: boolean (Required)
     *     sources (Required): [
     *          (Required){
     *             displayName: String (Required)
     *             sourceContent: String (Required)
     *             sourceType: String(Uri/StringType) (Required)
     *             sourceSerializedData: String (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param evaluationToken A sequence of textual characters.
     * @param invokeSkill Invoke skill request including necessary inputs for invoking a skill.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return skill variable parent entity adding additional attribute 'skillsource' to provide visibility to users as
     * to what data/information was used in generating the output of a skill along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> invokeSkillWithResponse(String evaluationToken, BinaryData invokeSkill,
        RequestOptions requestOptions) {
        return this.serviceClient.invokeSkillWithResponse(evaluationToken, invokeSkill, requestOptions);
    }

    /**
     * Get prompt history.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     prompts (Required): [
     *          (Required){
     *             prompt: String (Required)
     *             response: String (Required)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param evaluationToken A sequence of textual characters.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return prompt history along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getPromptHistoryWithResponse(String evaluationToken, RequestOptions requestOptions) {
        return this.serviceClient.getPromptHistoryWithResponse(evaluationToken, requestOptions);
    }

    /**
     * Log a progress message for a skill invocation.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     level: String(Error/Warning/Information/Verbose) (Optional)
     *     message: String (Required)
     * }
     * }</pre>
     * 
     * @param evaluationToken A sequence of textual characters.
     * @param logProgressRequest The progress message to log during a skill invocation.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> logProgressWithResponse(String evaluationToken, BinaryData logProgressRequest,
        RequestOptions requestOptions) {
        return this.serviceClient.logProgressWithResponse(evaluationToken, logProgressRequest, requestOptions);
    }

    /**
     * Sets the skill output.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     type: String (Optional)
     *     value: String (Optional)
     *     valueStoredAsJson: boolean (Required)
     *     sources (Required): [
     *          (Required){
     *             displayName: String (Required)
     *             sourceContent: String (Required)
     *             sourceType: String(Uri/StringType) (Required)
     *             sourceSerializedData: String (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param evaluationToken A sequence of textual characters.
     * @param outputSkillVariable Skill variable parent entity adding additional attribute 'skillsource' to provide
     * visibility to users as to what data/information was used in generating the output of a skill.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> setSkillOutputWithResponse(String evaluationToken, BinaryData outputSkillVariable,
        RequestOptions requestOptions) {
        return this.serviceClient.setSkillOutputWithResponse(evaluationToken, outputSkillVariable, requestOptions);
    }

    /**
     * Gets the skillset settings.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     String: String (Required)
     * }
     * }</pre>
     * 
     * @param evaluationToken A sequence of textual characters.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the skillset settings along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getSkillsetSettingsWithResponse(String evaluationToken, RequestOptions requestOptions) {
        return this.serviceClient.getSkillsetSettingsWithResponse(evaluationToken, requestOptions);
    }

    /**
     * Notifies security copilot backend service that the skill has been invoked.
     * 
     * @param evaluationToken A sequence of textual characters.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> setSkillInvocationStartedWithResponse(String evaluationToken, RequestOptions requestOptions) {
        return this.serviceClient.setSkillInvocationStartedWithResponse(evaluationToken, requestOptions);
    }

    /**
     * Notifies security copilot backend service that the skill invocation has completed.
     * 
     * @param evaluationToken A sequence of textual characters.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> setSkillInvocationCompletedWithResponse(String evaluationToken,
        RequestOptions requestOptions) {
        return this.serviceClient.setSkillInvocationCompletedWithResponse(evaluationToken, requestOptions);
    }

    /**
     * Gets the skillset auth related information.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     authLocation: String(Header/QueryParams) (Required)
     *     authInfo (Required): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param evaluationToken A sequence of textual characters.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the skillset auth related information along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getSkillsetAuthInfoWithResponse(String evaluationToken, RequestOptions requestOptions) {
        return this.serviceClient.getSkillsetAuthInfoWithResponse(evaluationToken, requestOptions);
    }

    /**
     * Gets the token credentials.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     scopes (Required): [
     *         String (Required)
     *     ]
     *     tokenCredentialType: String(None/UserTokenCredential/ServiceTokenCredential) (Required)
     *     tenantId: String (Optional)
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     token: String (Required)
     *     expiresOn: OffsetDateTime (Required)
     * }
     * }</pre>
     * 
     * @param evaluationToken A sequence of textual characters.
     * @param getTokenCredentialRequest TokenCredentialRequest.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the token credentials along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getTokenCredentialWithResponse(String evaluationToken,
        BinaryData getTokenCredentialRequest, RequestOptions requestOptions) {
        return this.serviceClient.getTokenCredentialWithResponse(evaluationToken, getTokenCredentialRequest,
            requestOptions);
    }

    /**
     * Gets the skill input.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     inputName: String (Required)
     *     defaultValue (Optional): {
     *         type: String (Optional)
     *         value: String (Optional)
     *         valueStoredAsJson: boolean (Required)
     *     }
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     type: String (Optional)
     *     value: String (Optional)
     *     valueStoredAsJson: boolean (Required)
     * }
     * }</pre>
     * 
     * @param evaluationToken A sequence of textual characters.
     * @param getInputRequest GetInputRequest.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the skill input along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getInputWithResponse(String evaluationToken, BinaryData getInputRequest,
        RequestOptions requestOptions) {
        return this.serviceClient.getInputWithResponse(evaluationToken, getInputRequest, requestOptions);
    }

    /**
     * Sets the input for the skill.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     inputName: String (Required)
     *     defaultValue (Optional): {
     *         type: String (Optional)
     *         value: String (Optional)
     *         valueStoredAsJson: boolean (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param evaluationToken A sequence of textual characters.
     * @param setInputRequest SetInputRequest.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> setInputWithResponse(String evaluationToken, BinaryData setInputRequest,
        RequestOptions requestOptions) {
        return this.serviceClient.setInputWithResponse(evaluationToken, setInputRequest, requestOptions);
    }

    /**
     * Adds a list of sources to the output.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     sources (Required): [
     *          (Required){
     *             displayName: String (Required)
     *             sourceContent: String (Required)
     *             sourceType: String(Uri/StringType) (Required)
     *             sourceSerializedData: String (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param evaluationToken A sequence of textual characters.
     * @param addSourcesRequest AddSourcesRequest.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> addSourcesWithResponse(String evaluationToken, BinaryData addSourcesRequest,
        RequestOptions requestOptions) {
        return this.serviceClient.addSourcesWithResponse(evaluationToken, addSourcesRequest, requestOptions);
    }

    /**
     * Get the SkillContext for the current skill invocation.
     * 
     * @param evaluationToken A sequence of textual characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the SkillContext for the current skill invocation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SkillContextResponse getSkillContext(String evaluationToken) {
        // Generated convenience method for getSkillContextWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getSkillContextWithResponse(evaluationToken, requestOptions).getValue()
            .toObject(SkillContextResponse.class);
    }

    /**
     * Invokes a skill. Allows current skill to invoke dependency skills.
     * 
     * @param evaluationToken A sequence of textual characters.
     * @param invokeSkill Invoke skill request including necessary inputs for invoking a skill.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return skill variable parent entity adding additional attribute 'skillsource' to provide visibility to users as
     * to what data/information was used in generating the output of a skill.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OutputSkillVariable invokeSkill(String evaluationToken, InvokeSkillRequest invokeSkill) {
        // Generated convenience method for invokeSkillWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return invokeSkillWithResponse(evaluationToken, BinaryData.fromObject(invokeSkill), requestOptions).getValue()
            .toObject(OutputSkillVariable.class);
    }

    /**
     * Get prompt history.
     * 
     * @param evaluationToken A sequence of textual characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return prompt history.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PromptHistoryResponse getPromptHistory(String evaluationToken) {
        // Generated convenience method for getPromptHistoryWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getPromptHistoryWithResponse(evaluationToken, requestOptions).getValue()
            .toObject(PromptHistoryResponse.class);
    }

    /**
     * Log a progress message for a skill invocation.
     * 
     * @param evaluationToken A sequence of textual characters.
     * @param logProgressRequest The progress message to log during a skill invocation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void logProgress(String evaluationToken, LogProgressRequest logProgressRequest) {
        // Generated convenience method for logProgressWithResponse
        RequestOptions requestOptions = new RequestOptions();
        logProgressWithResponse(evaluationToken, BinaryData.fromObject(logProgressRequest), requestOptions).getValue();
    }

    /**
     * Sets the skill output.
     * 
     * @param evaluationToken A sequence of textual characters.
     * @param outputSkillVariable Skill variable parent entity adding additional attribute 'skillsource' to provide
     * visibility to users as to what data/information was used in generating the output of a skill.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void setSkillOutput(String evaluationToken, OutputSkillVariable outputSkillVariable) {
        // Generated convenience method for setSkillOutputWithResponse
        RequestOptions requestOptions = new RequestOptions();
        setSkillOutputWithResponse(evaluationToken, BinaryData.fromObject(outputSkillVariable), requestOptions)
            .getValue();
    }

    /**
     * Gets the skillset settings.
     * 
     * @param evaluationToken A sequence of textual characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the skillset settings.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Map<String, String> getSkillsetSettings(String evaluationToken) {
        // Generated convenience method for getSkillsetSettingsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getSkillsetSettingsWithResponse(evaluationToken, requestOptions).getValue()
            .toObject(TYPE_REFERENCE_MAP_STRING_STRING);
    }

    /**
     * Notifies security copilot backend service that the skill has been invoked.
     * 
     * @param evaluationToken A sequence of textual characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void setSkillInvocationStarted(String evaluationToken) {
        // Generated convenience method for setSkillInvocationStartedWithResponse
        RequestOptions requestOptions = new RequestOptions();
        setSkillInvocationStartedWithResponse(evaluationToken, requestOptions).getValue();
    }

    /**
     * Notifies security copilot backend service that the skill invocation has completed.
     * 
     * @param evaluationToken A sequence of textual characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void setSkillInvocationCompleted(String evaluationToken) {
        // Generated convenience method for setSkillInvocationCompletedWithResponse
        RequestOptions requestOptions = new RequestOptions();
        setSkillInvocationCompletedWithResponse(evaluationToken, requestOptions).getValue();
    }

    /**
     * Gets the skillset auth related information.
     * 
     * @param evaluationToken A sequence of textual characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the skillset auth related information.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AuthDetails getSkillsetAuthInfo(String evaluationToken) {
        // Generated convenience method for getSkillsetAuthInfoWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getSkillsetAuthInfoWithResponse(evaluationToken, requestOptions).getValue().toObject(AuthDetails.class);
    }

    /**
     * Gets the token credentials.
     * 
     * @param evaluationToken A sequence of textual characters.
     * @param getTokenCredentialRequest TokenCredentialRequest.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the token credentials.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AccessToken getTokenCredential(String evaluationToken, GetTokenCredentialRequest getTokenCredentialRequest) {
        // Generated convenience method for getTokenCredentialWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getTokenCredentialWithResponse(evaluationToken, BinaryData.fromObject(getTokenCredentialRequest),
            requestOptions).getValue().toObject(AccessToken.class);
    }

    /**
     * Gets the skill input.
     * 
     * @param evaluationToken A sequence of textual characters.
     * @param getInputRequest GetInputRequest.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the skill input.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SkillVariable getInput(String evaluationToken, GetInputRequest getInputRequest) {
        // Generated convenience method for getInputWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getInputWithResponse(evaluationToken, BinaryData.fromObject(getInputRequest), requestOptions).getValue()
            .toObject(SkillVariable.class);
    }

    /**
     * Sets the input for the skill.
     * 
     * @param evaluationToken A sequence of textual characters.
     * @param setInputRequest SetInputRequest.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void setInput(String evaluationToken, SetInputRequest setInputRequest) {
        // Generated convenience method for setInputWithResponse
        RequestOptions requestOptions = new RequestOptions();
        setInputWithResponse(evaluationToken, BinaryData.fromObject(setInputRequest), requestOptions).getValue();
    }

    /**
     * Adds a list of sources to the output.
     * 
     * @param evaluationToken A sequence of textual characters.
     * @param addSourcesRequest AddSourcesRequest.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void addSources(String evaluationToken, AddSourcesRequest addSourcesRequest) {
        // Generated convenience method for addSourcesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        addSourcesWithResponse(evaluationToken, BinaryData.fromObject(addSourcesRequest), requestOptions).getValue();
    }

    @Generated
    private static final TypeReference<Map<String, String>> TYPE_REFERENCE_MAP_STRING_STRING
        = new TypeReference<Map<String, String>>() {
        };
}
