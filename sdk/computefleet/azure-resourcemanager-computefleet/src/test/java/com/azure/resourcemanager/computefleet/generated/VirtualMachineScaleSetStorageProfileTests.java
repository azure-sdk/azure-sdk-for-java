// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.computefleet.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.computefleet.models.CachingTypes;
import com.azure.resourcemanager.computefleet.models.DiffDiskOptions;
import com.azure.resourcemanager.computefleet.models.DiffDiskPlacement;
import com.azure.resourcemanager.computefleet.models.DiffDiskSettings;
import com.azure.resourcemanager.computefleet.models.DiskControllerTypes;
import com.azure.resourcemanager.computefleet.models.DiskCreateOptionTypes;
import com.azure.resourcemanager.computefleet.models.DiskDeleteOptionTypes;
import com.azure.resourcemanager.computefleet.models.DiskEncryptionSetParameters;
import com.azure.resourcemanager.computefleet.models.ImageReference;
import com.azure.resourcemanager.computefleet.models.OperatingSystemTypes;
import com.azure.resourcemanager.computefleet.models.SecurityEncryptionTypes;
import com.azure.resourcemanager.computefleet.models.StorageAccountTypes;
import com.azure.resourcemanager.computefleet.models.VirtualHardDisk;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetDataDisk;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetManagedDiskParameters;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetOSDisk;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetStorageProfile;
import com.azure.resourcemanager.computefleet.models.VMDiskSecurityProfile;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class VirtualMachineScaleSetStorageProfileTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VirtualMachineScaleSetStorageProfile model = BinaryData.fromString(
            "{\"imageReference\":{\"id\":\"zzd\",\"publisher\":\"qxhocdgeablgphut\",\"offer\":\"ndv\",\"sku\":\"ozwyiftyhxhuro\",\"version\":\"tyxolniwpwc\",\"exactVersion\":\"jfkgiawxk\",\"sharedGalleryImageId\":\"ypl\",\"communityGalleryImageId\":\"kbasyypn\"},\"osDisk\":{\"name\":\"sgcbac\",\"caching\":\"ReadWrite\",\"writeAcceleratorEnabled\":false,\"createOption\":\"Restore\",\"diffDiskSettings\":{\"option\":\"Local\",\"placement\":\"ResourceDisk\"},\"diskSizeGB\":942645397,\"osType\":\"Windows\",\"image\":{\"uri\":\"likwyqkgfgib\"},\"vhdContainers\":[\"gakeqsr\"],\"managedDisk\":{\"storageAccountType\":\"UltraSSD_LRS\",\"diskEncryptionSet\":{\"id\":\"e\"},\"securityProfile\":{\"securityEncryptionType\":\"VMGuestStateOnly\",\"diskEncryptionSet\":{\"id\":\"iqfouflmmnkz\"}}},\"deleteOption\":\"Delete\"},\"dataDisks\":[{\"name\":\"lougpbkw\",\"lun\":542784283,\"caching\":\"ReadWrite\",\"writeAcceleratorEnabled\":false,\"createOption\":\"Empty\",\"diskSizeGB\":289494577,\"managedDisk\":{\"storageAccountType\":\"Premium_LRS\",\"diskEncryptionSet\":{\"id\":\"gcue\"},\"securityProfile\":{\"securityEncryptionType\":\"NonPersistedTPM\",\"diskEncryptionSet\":{\"id\":\"o\"}}},\"diskIOPSReadWrite\":1712101311057870325,\"diskMBpsReadWrite\":4117897998779209947,\"deleteOption\":\"Detach\"},{\"name\":\"bjf\",\"lun\":914724830,\"caching\":\"ReadWrite\",\"writeAcceleratorEnabled\":false,\"createOption\":\"Copy\",\"diskSizeGB\":531991652,\"managedDisk\":{\"storageAccountType\":\"PremiumV2_LRS\",\"diskEncryptionSet\":{\"id\":\"q\"},\"securityProfile\":{\"securityEncryptionType\":\"VMGuestStateOnly\",\"diskEncryptionSet\":{\"id\":\"fpsalgbqu\"}}},\"diskIOPSReadWrite\":8329500561885071597,\"diskMBpsReadWrite\":3940628181525155930,\"deleteOption\":\"Detach\"},{\"name\":\"o\",\"lun\":2040036621,\"caching\":\"None\",\"writeAcceleratorEnabled\":false,\"createOption\":\"FromImage\",\"diskSizeGB\":239046622,\"managedDisk\":{\"storageAccountType\":\"StandardSSD_ZRS\",\"diskEncryptionSet\":{\"id\":\"ysvlejuvf\"},\"securityProfile\":{\"securityEncryptionType\":\"DiskWithVMGuestState\",\"diskEncryptionSet\":{\"id\":\"xwjkcprbnwbxg\"}}},\"diskIOPSReadWrite\":4370011452991457638,\"diskMBpsReadWrite\":412144661343643091,\"deleteOption\":\"Delete\"}],\"diskControllerType\":\"NVMe\"}")
            .toObject(VirtualMachineScaleSetStorageProfile.class);
        Assertions.assertEquals("zzd", model.imageReference().id());
        Assertions.assertEquals("qxhocdgeablgphut", model.imageReference().publisher());
        Assertions.assertEquals("ndv", model.imageReference().offer());
        Assertions.assertEquals("ozwyiftyhxhuro", model.imageReference().sku());
        Assertions.assertEquals("tyxolniwpwc", model.imageReference().version());
        Assertions.assertEquals("ypl", model.imageReference().sharedGalleryImageId());
        Assertions.assertEquals("kbasyypn", model.imageReference().communityGalleryImageId());
        Assertions.assertEquals("sgcbac", model.osDisk().name());
        Assertions.assertEquals(CachingTypes.READ_WRITE, model.osDisk().caching());
        Assertions.assertEquals(false, model.osDisk().writeAcceleratorEnabled());
        Assertions.assertEquals(DiskCreateOptionTypes.RESTORE, model.osDisk().createOption());
        Assertions.assertEquals(DiffDiskOptions.LOCAL, model.osDisk().diffDiskSettings().option());
        Assertions.assertEquals(DiffDiskPlacement.RESOURCE_DISK, model.osDisk().diffDiskSettings().placement());
        Assertions.assertEquals(942645397, model.osDisk().diskSizeGB());
        Assertions.assertEquals(OperatingSystemTypes.WINDOWS, model.osDisk().osType());
        Assertions.assertEquals("likwyqkgfgib", model.osDisk().image().uri());
        Assertions.assertEquals("gakeqsr", model.osDisk().vhdContainers().get(0));
        Assertions.assertEquals(StorageAccountTypes.ULTRA_SSD_LRS, model.osDisk().managedDisk().storageAccountType());
        Assertions.assertEquals("e", model.osDisk().managedDisk().diskEncryptionSet().id());
        Assertions.assertEquals(SecurityEncryptionTypes.VMGUEST_STATE_ONLY,
            model.osDisk().managedDisk().securityProfile().securityEncryptionType());
        Assertions.assertEquals("iqfouflmmnkz",
            model.osDisk().managedDisk().securityProfile().diskEncryptionSet().id());
        Assertions.assertEquals(DiskDeleteOptionTypes.DELETE, model.osDisk().deleteOption());
        Assertions.assertEquals("lougpbkw", model.dataDisks().get(0).name());
        Assertions.assertEquals(542784283, model.dataDisks().get(0).lun());
        Assertions.assertEquals(CachingTypes.READ_WRITE, model.dataDisks().get(0).caching());
        Assertions.assertEquals(false, model.dataDisks().get(0).writeAcceleratorEnabled());
        Assertions.assertEquals(DiskCreateOptionTypes.EMPTY, model.dataDisks().get(0).createOption());
        Assertions.assertEquals(289494577, model.dataDisks().get(0).diskSizeGB());
        Assertions.assertEquals(StorageAccountTypes.PREMIUM_LRS,
            model.dataDisks().get(0).managedDisk().storageAccountType());
        Assertions.assertEquals("gcue", model.dataDisks().get(0).managedDisk().diskEncryptionSet().id());
        Assertions.assertEquals(SecurityEncryptionTypes.NON_PERSISTED_TPM,
            model.dataDisks().get(0).managedDisk().securityProfile().securityEncryptionType());
        Assertions.assertEquals("o", model.dataDisks().get(0).managedDisk().securityProfile().diskEncryptionSet().id());
        Assertions.assertEquals(1712101311057870325L, model.dataDisks().get(0).diskIOPSReadWrite());
        Assertions.assertEquals(4117897998779209947L, model.dataDisks().get(0).diskMBpsReadWrite());
        Assertions.assertEquals(DiskDeleteOptionTypes.DETACH, model.dataDisks().get(0).deleteOption());
        Assertions.assertEquals(DiskControllerTypes.NVME, model.diskControllerType());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VirtualMachineScaleSetStorageProfile model = new VirtualMachineScaleSetStorageProfile()
            .withImageReference(new ImageReference().withId("zzd")
                .withPublisher("qxhocdgeablgphut")
                .withOffer("ndv")
                .withSku("ozwyiftyhxhuro")
                .withVersion("tyxolniwpwc")
                .withSharedGalleryImageId("ypl")
                .withCommunityGalleryImageId("kbasyypn"))
            .withOsDisk(new VirtualMachineScaleSetOSDisk().withName("sgcbac")
                .withCaching(CachingTypes.READ_WRITE)
                .withWriteAcceleratorEnabled(false)
                .withCreateOption(DiskCreateOptionTypes.RESTORE)
                .withDiffDiskSettings(new DiffDiskSettings().withOption(DiffDiskOptions.LOCAL)
                    .withPlacement(DiffDiskPlacement.RESOURCE_DISK))
                .withDiskSizeGB(942645397)
                .withOsType(OperatingSystemTypes.WINDOWS)
                .withImage(new VirtualHardDisk().withUri("likwyqkgfgib"))
                .withVhdContainers(Arrays.asList("gakeqsr"))
                .withManagedDisk(new VirtualMachineScaleSetManagedDiskParameters()
                    .withStorageAccountType(StorageAccountTypes.ULTRA_SSD_LRS)
                    .withDiskEncryptionSet(new DiskEncryptionSetParameters().withId("e"))
                    .withSecurityProfile(new VMDiskSecurityProfile()
                        .withSecurityEncryptionType(SecurityEncryptionTypes.VMGUEST_STATE_ONLY)
                        .withDiskEncryptionSet(new DiskEncryptionSetParameters().withId("iqfouflmmnkz"))))
                .withDeleteOption(DiskDeleteOptionTypes.DELETE))
            .withDataDisks(Arrays.asList(
                new VirtualMachineScaleSetDataDisk().withName("lougpbkw")
                    .withLun(542784283)
                    .withCaching(CachingTypes.READ_WRITE)
                    .withWriteAcceleratorEnabled(false)
                    .withCreateOption(DiskCreateOptionTypes.EMPTY)
                    .withDiskSizeGB(289494577)
                    .withManagedDisk(new VirtualMachineScaleSetManagedDiskParameters()
                        .withStorageAccountType(StorageAccountTypes.PREMIUM_LRS)
                        .withDiskEncryptionSet(new DiskEncryptionSetParameters().withId("gcue"))
                        .withSecurityProfile(new VMDiskSecurityProfile()
                            .withSecurityEncryptionType(SecurityEncryptionTypes.NON_PERSISTED_TPM)
                            .withDiskEncryptionSet(new DiskEncryptionSetParameters().withId("o"))))
                    .withDiskIOPSReadWrite(1712101311057870325L)
                    .withDiskMBpsReadWrite(4117897998779209947L)
                    .withDeleteOption(DiskDeleteOptionTypes.DETACH),
                new VirtualMachineScaleSetDataDisk().withName("bjf")
                    .withLun(914724830)
                    .withCaching(CachingTypes.READ_WRITE)
                    .withWriteAcceleratorEnabled(false)
                    .withCreateOption(DiskCreateOptionTypes.COPY)
                    .withDiskSizeGB(531991652)
                    .withManagedDisk(new VirtualMachineScaleSetManagedDiskParameters()
                        .withStorageAccountType(StorageAccountTypes.PREMIUM_V2_LRS)
                        .withDiskEncryptionSet(new DiskEncryptionSetParameters().withId("q"))
                        .withSecurityProfile(new VMDiskSecurityProfile()
                            .withSecurityEncryptionType(SecurityEncryptionTypes.VMGUEST_STATE_ONLY)
                            .withDiskEncryptionSet(new DiskEncryptionSetParameters().withId("fpsalgbqu"))))
                    .withDiskIOPSReadWrite(8329500561885071597L)
                    .withDiskMBpsReadWrite(3940628181525155930L)
                    .withDeleteOption(DiskDeleteOptionTypes.DETACH),
                new VirtualMachineScaleSetDataDisk().withName("o")
                    .withLun(2040036621)
                    .withCaching(CachingTypes.NONE)
                    .withWriteAcceleratorEnabled(false)
                    .withCreateOption(DiskCreateOptionTypes.FROM_IMAGE)
                    .withDiskSizeGB(239046622)
                    .withManagedDisk(new VirtualMachineScaleSetManagedDiskParameters()
                        .withStorageAccountType(StorageAccountTypes.STANDARD_SSD_ZRS)
                        .withDiskEncryptionSet(new DiskEncryptionSetParameters().withId("ysvlejuvf"))
                        .withSecurityProfile(new VMDiskSecurityProfile()
                            .withSecurityEncryptionType(SecurityEncryptionTypes.DISK_WITH_VMGUEST_STATE)
                            .withDiskEncryptionSet(new DiskEncryptionSetParameters().withId("xwjkcprbnwbxg"))))
                    .withDiskIOPSReadWrite(4370011452991457638L)
                    .withDiskMBpsReadWrite(412144661343643091L)
                    .withDeleteOption(DiskDeleteOptionTypes.DELETE)))
            .withDiskControllerType(DiskControllerTypes.NVME);
        model = BinaryData.fromObject(model).toObject(VirtualMachineScaleSetStorageProfile.class);
        Assertions.assertEquals("zzd", model.imageReference().id());
        Assertions.assertEquals("qxhocdgeablgphut", model.imageReference().publisher());
        Assertions.assertEquals("ndv", model.imageReference().offer());
        Assertions.assertEquals("ozwyiftyhxhuro", model.imageReference().sku());
        Assertions.assertEquals("tyxolniwpwc", model.imageReference().version());
        Assertions.assertEquals("ypl", model.imageReference().sharedGalleryImageId());
        Assertions.assertEquals("kbasyypn", model.imageReference().communityGalleryImageId());
        Assertions.assertEquals("sgcbac", model.osDisk().name());
        Assertions.assertEquals(CachingTypes.READ_WRITE, model.osDisk().caching());
        Assertions.assertEquals(false, model.osDisk().writeAcceleratorEnabled());
        Assertions.assertEquals(DiskCreateOptionTypes.RESTORE, model.osDisk().createOption());
        Assertions.assertEquals(DiffDiskOptions.LOCAL, model.osDisk().diffDiskSettings().option());
        Assertions.assertEquals(DiffDiskPlacement.RESOURCE_DISK, model.osDisk().diffDiskSettings().placement());
        Assertions.assertEquals(942645397, model.osDisk().diskSizeGB());
        Assertions.assertEquals(OperatingSystemTypes.WINDOWS, model.osDisk().osType());
        Assertions.assertEquals("likwyqkgfgib", model.osDisk().image().uri());
        Assertions.assertEquals("gakeqsr", model.osDisk().vhdContainers().get(0));
        Assertions.assertEquals(StorageAccountTypes.ULTRA_SSD_LRS, model.osDisk().managedDisk().storageAccountType());
        Assertions.assertEquals("e", model.osDisk().managedDisk().diskEncryptionSet().id());
        Assertions.assertEquals(SecurityEncryptionTypes.VMGUEST_STATE_ONLY,
            model.osDisk().managedDisk().securityProfile().securityEncryptionType());
        Assertions.assertEquals("iqfouflmmnkz",
            model.osDisk().managedDisk().securityProfile().diskEncryptionSet().id());
        Assertions.assertEquals(DiskDeleteOptionTypes.DELETE, model.osDisk().deleteOption());
        Assertions.assertEquals("lougpbkw", model.dataDisks().get(0).name());
        Assertions.assertEquals(542784283, model.dataDisks().get(0).lun());
        Assertions.assertEquals(CachingTypes.READ_WRITE, model.dataDisks().get(0).caching());
        Assertions.assertEquals(false, model.dataDisks().get(0).writeAcceleratorEnabled());
        Assertions.assertEquals(DiskCreateOptionTypes.EMPTY, model.dataDisks().get(0).createOption());
        Assertions.assertEquals(289494577, model.dataDisks().get(0).diskSizeGB());
        Assertions.assertEquals(StorageAccountTypes.PREMIUM_LRS,
            model.dataDisks().get(0).managedDisk().storageAccountType());
        Assertions.assertEquals("gcue", model.dataDisks().get(0).managedDisk().diskEncryptionSet().id());
        Assertions.assertEquals(SecurityEncryptionTypes.NON_PERSISTED_TPM,
            model.dataDisks().get(0).managedDisk().securityProfile().securityEncryptionType());
        Assertions.assertEquals("o", model.dataDisks().get(0).managedDisk().securityProfile().diskEncryptionSet().id());
        Assertions.assertEquals(1712101311057870325L, model.dataDisks().get(0).diskIOPSReadWrite());
        Assertions.assertEquals(4117897998779209947L, model.dataDisks().get(0).diskMBpsReadWrite());
        Assertions.assertEquals(DiskDeleteOptionTypes.DETACH, model.dataDisks().get(0).deleteOption());
        Assertions.assertEquals(DiskControllerTypes.NVME, model.diskControllerType());
    }
}
