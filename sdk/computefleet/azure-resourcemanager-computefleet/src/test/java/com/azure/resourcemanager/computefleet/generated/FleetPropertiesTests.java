// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.computefleet.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.computefleet.models.BaseVirtualMachineProfile;
import com.azure.resourcemanager.computefleet.models.ComputeProfile;
import com.azure.resourcemanager.computefleet.models.EvictionPolicy;
import com.azure.resourcemanager.computefleet.models.FleetProperties;
import com.azure.resourcemanager.computefleet.models.RegularPriorityAllocationStrategy;
import com.azure.resourcemanager.computefleet.models.RegularPriorityProfile;
import com.azure.resourcemanager.computefleet.models.SpotAllocationStrategy;
import com.azure.resourcemanager.computefleet.models.SpotPriorityProfile;
import com.azure.resourcemanager.computefleet.models.VmSizeProfile;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class FleetPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        FleetProperties model = BinaryData.fromString(
            "{\"provisioningState\":\"Updating\",\"spotPriorityProfile\":{\"capacity\":1651742779,\"minCapacity\":105374828,\"maxPricePerVM\":23.993490010833774,\"evictionPolicy\":\"Deallocate\",\"allocationStrategy\":\"CapacityOptimized\",\"maintain\":false},\"regularPriorityProfile\":{\"capacity\":1546333892,\"minCapacity\":1961045961,\"allocationStrategy\":\"Prioritized\"},\"vmSizesProfile\":[{\"name\":\"ozkrwfndiodjpslw\",\"rank\":1912467695},{\"name\":\"pvwryoqpsoacc\",\"rank\":429084685},{\"name\":\"akl\",\"rank\":1063449943}],\"computeProfile\":{\"baseVirtualMachineProfile\":{},\"computeApiVersion\":\"bcryffdfd\",\"platformFaultDomainCount\":1461689436}}")
            .toObject(FleetProperties.class);
        Assertions.assertEquals(1651742779, model.spotPriorityProfile().capacity());
        Assertions.assertEquals(105374828, model.spotPriorityProfile().minCapacity());
        Assertions.assertEquals(23.993490010833774D, model.spotPriorityProfile().maxPricePerVM());
        Assertions.assertEquals(EvictionPolicy.DEALLOCATE, model.spotPriorityProfile().evictionPolicy());
        Assertions.assertEquals(SpotAllocationStrategy.CAPACITY_OPTIMIZED,
            model.spotPriorityProfile().allocationStrategy());
        Assertions.assertEquals(false, model.spotPriorityProfile().maintain());
        Assertions.assertEquals(1546333892, model.regularPriorityProfile().capacity());
        Assertions.assertEquals(1961045961, model.regularPriorityProfile().minCapacity());
        Assertions.assertEquals(RegularPriorityAllocationStrategy.PRIORITIZED,
            model.regularPriorityProfile().allocationStrategy());
        Assertions.assertEquals("ozkrwfndiodjpslw", model.vmSizesProfile().get(0).name());
        Assertions.assertEquals(1912467695, model.vmSizesProfile().get(0).rank());
        Assertions.assertEquals("bcryffdfd", model.computeProfile().computeApiVersion());
        Assertions.assertEquals(1461689436, model.computeProfile().platformFaultDomainCount());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        FleetProperties model = new FleetProperties()
            .withSpotPriorityProfile(new SpotPriorityProfile().withCapacity(1651742779)
                .withMinCapacity(105374828)
                .withMaxPricePerVM(23.993490010833774D)
                .withEvictionPolicy(EvictionPolicy.DEALLOCATE)
                .withAllocationStrategy(SpotAllocationStrategy.CAPACITY_OPTIMIZED)
                .withMaintain(false))
            .withRegularPriorityProfile(new RegularPriorityProfile().withCapacity(1546333892)
                .withMinCapacity(1961045961)
                .withAllocationStrategy(RegularPriorityAllocationStrategy.PRIORITIZED))
            .withVmSizesProfile(Arrays.asList(new VmSizeProfile().withName("ozkrwfndiodjpslw").withRank(1912467695),
                new VmSizeProfile().withName("pvwryoqpsoacc").withRank(429084685),
                new VmSizeProfile().withName("akl").withRank(1063449943)))
            .withComputeProfile(new ComputeProfile().withBaseVirtualMachineProfile(new BaseVirtualMachineProfile())
                .withComputeApiVersion("bcryffdfd")
                .withPlatformFaultDomainCount(1461689436));
        model = BinaryData.fromObject(model).toObject(FleetProperties.class);
        Assertions.assertEquals(1651742779, model.spotPriorityProfile().capacity());
        Assertions.assertEquals(105374828, model.spotPriorityProfile().minCapacity());
        Assertions.assertEquals(23.993490010833774D, model.spotPriorityProfile().maxPricePerVM());
        Assertions.assertEquals(EvictionPolicy.DEALLOCATE, model.spotPriorityProfile().evictionPolicy());
        Assertions.assertEquals(SpotAllocationStrategy.CAPACITY_OPTIMIZED,
            model.spotPriorityProfile().allocationStrategy());
        Assertions.assertEquals(false, model.spotPriorityProfile().maintain());
        Assertions.assertEquals(1546333892, model.regularPriorityProfile().capacity());
        Assertions.assertEquals(1961045961, model.regularPriorityProfile().minCapacity());
        Assertions.assertEquals(RegularPriorityAllocationStrategy.PRIORITIZED,
            model.regularPriorityProfile().allocationStrategy());
        Assertions.assertEquals("ozkrwfndiodjpslw", model.vmSizesProfile().get(0).name());
        Assertions.assertEquals(1912467695, model.vmSizesProfile().get(0).rank());
        Assertions.assertEquals("bcryffdfd", model.computeProfile().computeApiVersion());
        Assertions.assertEquals(1461689436, model.computeProfile().platformFaultDomainCount());
    }
}
