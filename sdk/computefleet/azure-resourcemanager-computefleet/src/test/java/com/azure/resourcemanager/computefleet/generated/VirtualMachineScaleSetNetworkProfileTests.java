// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.computefleet.generated;

import com.azure.core.management.SubResource;
import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.computefleet.models.ApiEntityReference;
import com.azure.resourcemanager.computefleet.models.DeleteOptions;
import com.azure.resourcemanager.computefleet.models.NetworkApiVersion;
import com.azure.resourcemanager.computefleet.models.NetworkInterfaceAuxiliaryMode;
import com.azure.resourcemanager.computefleet.models.NetworkInterfaceAuxiliarySku;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetIPConfiguration;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetIPConfigurationProperties;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetNetworkConfiguration;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetNetworkConfigurationDnsSettings;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetNetworkConfigurationProperties;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetNetworkProfile;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class VirtualMachineScaleSetNetworkProfileTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VirtualMachineScaleSetNetworkProfile model = BinaryData.fromString(
            "{\"healthProbe\":{\"id\":\"zyulp\"},\"networkInterfaceConfigurations\":[{\"name\":\"jkrlkhbzhfepg\",\"properties\":{\"primary\":false,\"enableAcceleratedNetworking\":false,\"disableTcpStateTracking\":true,\"enableFpga\":true,\"networkSecurityGroup\":{\"id\":\"paierh\"},\"dnsSettings\":{\"dnsServers\":[\"glu\",\"majtjaod\"]},\"ipConfigurations\":[{\"name\":\"bnbdxkqpxokajion\",\"properties\":{}},{\"name\":\"mexgstxgcp\",\"properties\":{}},{\"name\":\"gmaajrm\",\"properties\":{}},{\"name\":\"jwzrl\",\"properties\":{}}],\"enableIPForwarding\":true,\"deleteOption\":\"Detach\",\"auxiliaryMode\":\"None\",\"auxiliarySku\":\"A1\"}}],\"networkApiVersion\":\"2020-11-01\"}")
            .toObject(VirtualMachineScaleSetNetworkProfile.class);
        Assertions.assertEquals("zyulp", model.healthProbe().id());
        Assertions.assertEquals("jkrlkhbzhfepg", model.networkInterfaceConfigurations().get(0).name());
        Assertions.assertEquals(false, model.networkInterfaceConfigurations().get(0).properties().primary());
        Assertions.assertEquals(false,
            model.networkInterfaceConfigurations().get(0).properties().enableAcceleratedNetworking());
        Assertions.assertEquals(true,
            model.networkInterfaceConfigurations().get(0).properties().disableTcpStateTracking());
        Assertions.assertEquals(true, model.networkInterfaceConfigurations().get(0).properties().enableFpga());
        Assertions.assertEquals("paierh",
            model.networkInterfaceConfigurations().get(0).properties().networkSecurityGroup().id());
        Assertions.assertEquals("glu",
            model.networkInterfaceConfigurations().get(0).properties().dnsSettings().dnsServers().get(0));
        Assertions.assertEquals("bnbdxkqpxokajion",
            model.networkInterfaceConfigurations().get(0).properties().ipConfigurations().get(0).name());
        Assertions.assertEquals(true, model.networkInterfaceConfigurations().get(0).properties().enableIPForwarding());
        Assertions.assertEquals(DeleteOptions.DETACH,
            model.networkInterfaceConfigurations().get(0).properties().deleteOption());
        Assertions.assertEquals(NetworkInterfaceAuxiliaryMode.NONE,
            model.networkInterfaceConfigurations().get(0).properties().auxiliaryMode());
        Assertions.assertEquals(NetworkInterfaceAuxiliarySku.A1,
            model.networkInterfaceConfigurations().get(0).properties().auxiliarySku());
        Assertions.assertEquals(NetworkApiVersion.TWO_ZERO_TWO_ZERO_ONE_ONE_ZERO_ONE, model.networkApiVersion());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VirtualMachineScaleSetNetworkProfile model
            = new VirtualMachineScaleSetNetworkProfile().withHealthProbe(new ApiEntityReference().withId("zyulp"))
                .withNetworkInterfaceConfigurations(
                    Arrays.asList(new VirtualMachineScaleSetNetworkConfiguration().withName("jkrlkhbzhfepg")
                        .withProperties(new VirtualMachineScaleSetNetworkConfigurationProperties().withPrimary(false)
                            .withEnableAcceleratedNetworking(false)
                            .withDisableTcpStateTracking(true)
                            .withEnableFpga(true)
                            .withNetworkSecurityGroup(new SubResource().withId("paierh"))
                            .withDnsSettings(new VirtualMachineScaleSetNetworkConfigurationDnsSettings()
                                .withDnsServers(Arrays.asList("glu", "majtjaod")))
                            .withIpConfigurations(Arrays.asList(
                                new VirtualMachineScaleSetIPConfiguration().withName("bnbdxkqpxokajion")
                                    .withProperties(new VirtualMachineScaleSetIPConfigurationProperties()),
                                new VirtualMachineScaleSetIPConfiguration().withName("mexgstxgcp")
                                    .withProperties(new VirtualMachineScaleSetIPConfigurationProperties()),
                                new VirtualMachineScaleSetIPConfiguration().withName("gmaajrm")
                                    .withProperties(new VirtualMachineScaleSetIPConfigurationProperties()),
                                new VirtualMachineScaleSetIPConfiguration().withName("jwzrl")
                                    .withProperties(new VirtualMachineScaleSetIPConfigurationProperties())))
                            .withEnableIPForwarding(true)
                            .withDeleteOption(DeleteOptions.DETACH)
                            .withAuxiliaryMode(NetworkInterfaceAuxiliaryMode.NONE)
                            .withAuxiliarySku(NetworkInterfaceAuxiliarySku.A1))))
                .withNetworkApiVersion(NetworkApiVersion.TWO_ZERO_TWO_ZERO_ONE_ONE_ZERO_ONE);
        model = BinaryData.fromObject(model).toObject(VirtualMachineScaleSetNetworkProfile.class);
        Assertions.assertEquals("zyulp", model.healthProbe().id());
        Assertions.assertEquals("jkrlkhbzhfepg", model.networkInterfaceConfigurations().get(0).name());
        Assertions.assertEquals(false, model.networkInterfaceConfigurations().get(0).properties().primary());
        Assertions.assertEquals(false,
            model.networkInterfaceConfigurations().get(0).properties().enableAcceleratedNetworking());
        Assertions.assertEquals(true,
            model.networkInterfaceConfigurations().get(0).properties().disableTcpStateTracking());
        Assertions.assertEquals(true, model.networkInterfaceConfigurations().get(0).properties().enableFpga());
        Assertions.assertEquals("paierh",
            model.networkInterfaceConfigurations().get(0).properties().networkSecurityGroup().id());
        Assertions.assertEquals("glu",
            model.networkInterfaceConfigurations().get(0).properties().dnsSettings().dnsServers().get(0));
        Assertions.assertEquals("bnbdxkqpxokajion",
            model.networkInterfaceConfigurations().get(0).properties().ipConfigurations().get(0).name());
        Assertions.assertEquals(true, model.networkInterfaceConfigurations().get(0).properties().enableIPForwarding());
        Assertions.assertEquals(DeleteOptions.DETACH,
            model.networkInterfaceConfigurations().get(0).properties().deleteOption());
        Assertions.assertEquals(NetworkInterfaceAuxiliaryMode.NONE,
            model.networkInterfaceConfigurations().get(0).properties().auxiliaryMode());
        Assertions.assertEquals(NetworkInterfaceAuxiliarySku.A1,
            model.networkInterfaceConfigurations().get(0).properties().auxiliarySku());
        Assertions.assertEquals(NetworkApiVersion.TWO_ZERO_TWO_ZERO_ONE_ONE_ZERO_ONE, model.networkApiVersion());
    }
}
