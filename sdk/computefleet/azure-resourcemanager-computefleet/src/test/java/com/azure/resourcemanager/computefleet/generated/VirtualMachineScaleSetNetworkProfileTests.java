// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.computefleet.generated;

import com.azure.core.management.SubResource;
import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.computefleet.models.ApiEntityReference;
import com.azure.resourcemanager.computefleet.models.DeleteOptions;
import com.azure.resourcemanager.computefleet.models.NetworkApiVersion;
import com.azure.resourcemanager.computefleet.models.NetworkInterfaceAuxiliaryMode;
import com.azure.resourcemanager.computefleet.models.NetworkInterfaceAuxiliarySku;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetIPConfiguration;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetIPConfigurationProperties;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetNetworkConfiguration;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetNetworkConfigurationDnsSettings;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetNetworkConfigurationProperties;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetNetworkProfile;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class VirtualMachineScaleSetNetworkProfileTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VirtualMachineScaleSetNetworkProfile model = BinaryData.fromString(
            "{\"healthProbe\":{\"id\":\"q\"},\"networkInterfaceConfigurations\":[{\"name\":\"refovgmkqsleyyvx\",\"properties\":{\"primary\":false,\"enableAcceleratedNetworking\":true,\"disableTcpStateTracking\":false,\"enableFpga\":true,\"networkSecurityGroup\":{\"id\":\"jcrcczsqpjhvmda\"},\"dnsSettings\":{\"dnsServers\":[\"sounqecanoaeu\"]},\"ipConfigurations\":[{\"name\":\"hy\",\"properties\":{}},{\"name\":\"trpmo\",\"properties\":{}},{\"name\":\"mcmatuokthfuiu\",\"properties\":{}},{\"name\":\"dsfcpkvxodpuoz\",\"properties\":{}}],\"enableIPForwarding\":true,\"deleteOption\":\"Detach\",\"auxiliaryMode\":\"None\",\"auxiliarySku\":\"A8\"}},{\"name\":\"xbezyiuokktwh\",\"properties\":{\"primary\":false,\"enableAcceleratedNetworking\":true,\"disableTcpStateTracking\":false,\"enableFpga\":true,\"networkSecurityGroup\":{\"id\":\"ureximoryocfs\"},\"dnsSettings\":{\"dnsServers\":[\"mddystkiiux\",\"qyud\"]},\"ipConfigurations\":[{\"name\":\"rrqnbpoczvyifqrv\",\"properties\":{}}],\"enableIPForwarding\":false,\"deleteOption\":\"Delete\",\"auxiliaryMode\":\"None\",\"auxiliarySku\":\"A1\"}},{\"name\":\"vdfwatkpn\",\"properties\":{\"primary\":true,\"enableAcceleratedNetworking\":true,\"disableTcpStateTracking\":true,\"enableFpga\":true,\"networkSecurityGroup\":{\"id\":\"uwiqzb\"},\"dnsSettings\":{\"dnsServers\":[\"ovm\",\"okacspk\",\"lhzdobp\",\"jmflbvvnch\"]},\"ipConfigurations\":[{\"name\":\"cciw\",\"properties\":{}},{\"name\":\"juqk\",\"properties\":{}},{\"name\":\"sa\",\"properties\":{}},{\"name\":\"wkuofoskghsauu\",\"properties\":{}}],\"enableIPForwarding\":false,\"deleteOption\":\"Detach\",\"auxiliaryMode\":\"AcceleratedConnections\",\"auxiliarySku\":\"A2\"}},{\"name\":\"ugidyjrr\",\"properties\":{\"primary\":false,\"enableAcceleratedNetworking\":true,\"disableTcpStateTracking\":false,\"enableFpga\":true,\"networkSecurityGroup\":{\"id\":\"npc\"},\"dnsSettings\":{\"dnsServers\":[\"ohslkevlegg\",\"fbuhfmvfaxkffe\"]},\"ipConfigurations\":[{\"name\":\"th\",\"properties\":{}},{\"name\":\"m\",\"properties\":{}},{\"name\":\"yvshxmz\",\"properties\":{}},{\"name\":\"bzoggigrx\",\"properties\":{}}],\"enableIPForwarding\":false,\"deleteOption\":\"Delete\",\"auxiliaryMode\":\"AcceleratedConnections\",\"auxiliarySku\":\"A2\"}}],\"networkApiVersion\":\"2020-11-01\"}")
            .toObject(VirtualMachineScaleSetNetworkProfile.class);
        Assertions.assertEquals("q", model.healthProbe().id());
        Assertions.assertEquals("refovgmkqsleyyvx", model.networkInterfaceConfigurations().get(0).name());
        Assertions.assertEquals(false, model.networkInterfaceConfigurations().get(0).properties().primary());
        Assertions.assertEquals(true,
            model.networkInterfaceConfigurations().get(0).properties().enableAcceleratedNetworking());
        Assertions.assertEquals(false,
            model.networkInterfaceConfigurations().get(0).properties().disableTcpStateTracking());
        Assertions.assertEquals(true, model.networkInterfaceConfigurations().get(0).properties().enableFpga());
        Assertions.assertEquals("jcrcczsqpjhvmda",
            model.networkInterfaceConfigurations().get(0).properties().networkSecurityGroup().id());
        Assertions.assertEquals("sounqecanoaeu",
            model.networkInterfaceConfigurations().get(0).properties().dnsSettings().dnsServers().get(0));
        Assertions.assertEquals("hy",
            model.networkInterfaceConfigurations().get(0).properties().ipConfigurations().get(0).name());
        Assertions.assertEquals(true, model.networkInterfaceConfigurations().get(0).properties().enableIPForwarding());
        Assertions.assertEquals(DeleteOptions.DETACH,
            model.networkInterfaceConfigurations().get(0).properties().deleteOption());
        Assertions.assertEquals(NetworkInterfaceAuxiliaryMode.NONE,
            model.networkInterfaceConfigurations().get(0).properties().auxiliaryMode());
        Assertions.assertEquals(NetworkInterfaceAuxiliarySku.A8,
            model.networkInterfaceConfigurations().get(0).properties().auxiliarySku());
        Assertions.assertEquals(NetworkApiVersion.V2020_11_01, model.networkApiVersion());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VirtualMachineScaleSetNetworkProfile model
            = new VirtualMachineScaleSetNetworkProfile().withHealthProbe(new ApiEntityReference().withId("q"))
                .withNetworkInterfaceConfigurations(Arrays.asList(
                    new VirtualMachineScaleSetNetworkConfiguration().withName("refovgmkqsleyyvx")
                        .withProperties(new VirtualMachineScaleSetNetworkConfigurationProperties().withPrimary(false)
                            .withEnableAcceleratedNetworking(true)
                            .withDisableTcpStateTracking(false)
                            .withEnableFpga(true)
                            .withNetworkSecurityGroup(new SubResource().withId("jcrcczsqpjhvmda"))
                            .withDnsSettings(new VirtualMachineScaleSetNetworkConfigurationDnsSettings()
                                .withDnsServers(Arrays.asList("sounqecanoaeu")))
                            .withIpConfigurations(Arrays.asList(
                                new VirtualMachineScaleSetIPConfiguration().withName("hy")
                                    .withProperties(new VirtualMachineScaleSetIPConfigurationProperties()),
                                new VirtualMachineScaleSetIPConfiguration().withName("trpmo")
                                    .withProperties(new VirtualMachineScaleSetIPConfigurationProperties()),
                                new VirtualMachineScaleSetIPConfiguration().withName("mcmatuokthfuiu")
                                    .withProperties(new VirtualMachineScaleSetIPConfigurationProperties()),
                                new VirtualMachineScaleSetIPConfiguration().withName("dsfcpkvxodpuoz")
                                    .withProperties(new VirtualMachineScaleSetIPConfigurationProperties())))
                            .withEnableIPForwarding(true)
                            .withDeleteOption(DeleteOptions.DETACH)
                            .withAuxiliaryMode(NetworkInterfaceAuxiliaryMode.NONE)
                            .withAuxiliarySku(NetworkInterfaceAuxiliarySku.A8)),
                    new VirtualMachineScaleSetNetworkConfiguration().withName("xbezyiuokktwh")
                        .withProperties(new VirtualMachineScaleSetNetworkConfigurationProperties().withPrimary(false)
                            .withEnableAcceleratedNetworking(true)
                            .withDisableTcpStateTracking(false)
                            .withEnableFpga(true)
                            .withNetworkSecurityGroup(new SubResource().withId("ureximoryocfs"))
                            .withDnsSettings(new VirtualMachineScaleSetNetworkConfigurationDnsSettings()
                                .withDnsServers(Arrays.asList("mddystkiiux", "qyud")))
                            .withIpConfigurations(
                                Arrays.asList(new VirtualMachineScaleSetIPConfiguration().withName("rrqnbpoczvyifqrv")
                                    .withProperties(new VirtualMachineScaleSetIPConfigurationProperties())))
                            .withEnableIPForwarding(false)
                            .withDeleteOption(DeleteOptions.DELETE)
                            .withAuxiliaryMode(NetworkInterfaceAuxiliaryMode.NONE)
                            .withAuxiliarySku(NetworkInterfaceAuxiliarySku.A1)),
                    new VirtualMachineScaleSetNetworkConfiguration().withName("vdfwatkpn")
                        .withProperties(new VirtualMachineScaleSetNetworkConfigurationProperties().withPrimary(true)
                            .withEnableAcceleratedNetworking(true)
                            .withDisableTcpStateTracking(true)
                            .withEnableFpga(true)
                            .withNetworkSecurityGroup(new SubResource().withId("uwiqzb"))
                            .withDnsSettings(new VirtualMachineScaleSetNetworkConfigurationDnsSettings()
                                .withDnsServers(Arrays.asList("ovm", "okacspk", "lhzdobp", "jmflbvvnch")))
                            .withIpConfigurations(Arrays.asList(
                                new VirtualMachineScaleSetIPConfiguration().withName("cciw")
                                    .withProperties(new VirtualMachineScaleSetIPConfigurationProperties()),
                                new VirtualMachineScaleSetIPConfiguration().withName("juqk")
                                    .withProperties(new VirtualMachineScaleSetIPConfigurationProperties()),
                                new VirtualMachineScaleSetIPConfiguration().withName("sa")
                                    .withProperties(new VirtualMachineScaleSetIPConfigurationProperties()),
                                new VirtualMachineScaleSetIPConfiguration().withName("wkuofoskghsauu")
                                    .withProperties(new VirtualMachineScaleSetIPConfigurationProperties())))
                            .withEnableIPForwarding(false)
                            .withDeleteOption(DeleteOptions.DETACH)
                            .withAuxiliaryMode(NetworkInterfaceAuxiliaryMode.ACCELERATED_CONNECTIONS)
                            .withAuxiliarySku(NetworkInterfaceAuxiliarySku.A2)),
                    new VirtualMachineScaleSetNetworkConfiguration().withName("ugidyjrr")
                        .withProperties(new VirtualMachineScaleSetNetworkConfigurationProperties().withPrimary(false)
                            .withEnableAcceleratedNetworking(true)
                            .withDisableTcpStateTracking(false)
                            .withEnableFpga(true)
                            .withNetworkSecurityGroup(new SubResource().withId("npc"))
                            .withDnsSettings(new VirtualMachineScaleSetNetworkConfigurationDnsSettings()
                                .withDnsServers(Arrays.asList("ohslkevlegg", "fbuhfmvfaxkffe")))
                            .withIpConfigurations(Arrays.asList(
                                new VirtualMachineScaleSetIPConfiguration().withName("th")
                                    .withProperties(new VirtualMachineScaleSetIPConfigurationProperties()),
                                new VirtualMachineScaleSetIPConfiguration().withName("m")
                                    .withProperties(new VirtualMachineScaleSetIPConfigurationProperties()),
                                new VirtualMachineScaleSetIPConfiguration().withName("yvshxmz")
                                    .withProperties(new VirtualMachineScaleSetIPConfigurationProperties()),
                                new VirtualMachineScaleSetIPConfiguration().withName("bzoggigrx")
                                    .withProperties(new VirtualMachineScaleSetIPConfigurationProperties())))
                            .withEnableIPForwarding(false)
                            .withDeleteOption(DeleteOptions.DELETE)
                            .withAuxiliaryMode(NetworkInterfaceAuxiliaryMode.ACCELERATED_CONNECTIONS)
                            .withAuxiliarySku(NetworkInterfaceAuxiliarySku.A2))))
                .withNetworkApiVersion(NetworkApiVersion.V2020_11_01);
        model = BinaryData.fromObject(model).toObject(VirtualMachineScaleSetNetworkProfile.class);
        Assertions.assertEquals("q", model.healthProbe().id());
        Assertions.assertEquals("refovgmkqsleyyvx", model.networkInterfaceConfigurations().get(0).name());
        Assertions.assertEquals(false, model.networkInterfaceConfigurations().get(0).properties().primary());
        Assertions.assertEquals(true,
            model.networkInterfaceConfigurations().get(0).properties().enableAcceleratedNetworking());
        Assertions.assertEquals(false,
            model.networkInterfaceConfigurations().get(0).properties().disableTcpStateTracking());
        Assertions.assertEquals(true, model.networkInterfaceConfigurations().get(0).properties().enableFpga());
        Assertions.assertEquals("jcrcczsqpjhvmda",
            model.networkInterfaceConfigurations().get(0).properties().networkSecurityGroup().id());
        Assertions.assertEquals("sounqecanoaeu",
            model.networkInterfaceConfigurations().get(0).properties().dnsSettings().dnsServers().get(0));
        Assertions.assertEquals("hy",
            model.networkInterfaceConfigurations().get(0).properties().ipConfigurations().get(0).name());
        Assertions.assertEquals(true, model.networkInterfaceConfigurations().get(0).properties().enableIPForwarding());
        Assertions.assertEquals(DeleteOptions.DETACH,
            model.networkInterfaceConfigurations().get(0).properties().deleteOption());
        Assertions.assertEquals(NetworkInterfaceAuxiliaryMode.NONE,
            model.networkInterfaceConfigurations().get(0).properties().auxiliaryMode());
        Assertions.assertEquals(NetworkInterfaceAuxiliarySku.A8,
            model.networkInterfaceConfigurations().get(0).properties().auxiliarySku());
        Assertions.assertEquals(NetworkApiVersion.V2020_11_01, model.networkApiVersion());
    }
}
