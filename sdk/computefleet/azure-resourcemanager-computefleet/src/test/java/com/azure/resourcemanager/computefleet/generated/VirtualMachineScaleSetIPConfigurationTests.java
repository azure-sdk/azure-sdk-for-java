// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.computefleet.generated;

import com.azure.core.management.SubResource;
import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.computefleet.models.ApiEntityReference;
import com.azure.resourcemanager.computefleet.models.DeleteOptions;
import com.azure.resourcemanager.computefleet.models.DomainNameLabelScopeTypes;
import com.azure.resourcemanager.computefleet.models.IPVersion;
import com.azure.resourcemanager.computefleet.models.PublicIPAddressSku;
import com.azure.resourcemanager.computefleet.models.PublicIPAddressSkuName;
import com.azure.resourcemanager.computefleet.models.PublicIPAddressSkuTier;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetIPConfiguration;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetIPConfigurationProperties;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetIpTag;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetPublicIPAddressConfiguration;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetPublicIPAddressConfigurationProperties;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class VirtualMachineScaleSetIPConfigurationTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VirtualMachineScaleSetIPConfiguration model = BinaryData.fromString(
            "{\"name\":\"ukkfplgmgs\",\"properties\":{\"subnet\":{\"id\":\"zkd\"},\"primary\":false,\"publicIPAddressConfiguration\":{\"name\":\"vlopwiyighx\",\"properties\":{\"idleTimeoutInMinutes\":1713070379,\"dnsSettings\":{\"domainNameLabel\":\"baiuebbaumny\",\"domainNameLabelScope\":\"TenantReuse\"},\"ipTags\":[{\"ipTagType\":\"ojnabckhsmtxpsie\",\"tag\":\"fhvpesaps\"}],\"publicIPPrefix\":{\"id\":\"qmhjjdhtld\"},\"publicIPAddressVersion\":\"IPv6\",\"deleteOption\":\"Detach\"},\"sku\":{\"name\":\"Basic\",\"tier\":\"Global\"}},\"privateIPAddressVersion\":\"IPv4\",\"applicationGatewayBackendAddressPools\":[{\"id\":\"svlxotogtwrup\"},{\"id\":\"xvnmicykvceov\"},{\"id\":\"lo\"}],\"applicationSecurityGroups\":[{\"id\":\"yfjfcnjbkcn\"}],\"loadBalancerBackendAddressPools\":[{\"id\":\"ttkphywpnvjtoqne\"},{\"id\":\"clfp\"},{\"id\":\"hoxus\"}],\"loadBalancerInboundNatPools\":[{\"id\":\"bgyepsbj\"},{\"id\":\"zq\"}]}}")
            .toObject(VirtualMachineScaleSetIPConfiguration.class);
        Assertions.assertEquals("ukkfplgmgs", model.name());
        Assertions.assertEquals("zkd", model.properties().subnet().id());
        Assertions.assertEquals(false, model.properties().primary());
        Assertions.assertEquals("vlopwiyighx", model.properties().publicIPAddressConfiguration().name());
        Assertions.assertEquals(1713070379,
            model.properties().publicIPAddressConfiguration().properties().idleTimeoutInMinutes());
        Assertions.assertEquals("baiuebbaumny",
            model.properties().publicIPAddressConfiguration().properties().dnsSettings().domainNameLabel());
        Assertions.assertEquals(DomainNameLabelScopeTypes.TENANT_REUSE,
            model.properties().publicIPAddressConfiguration().properties().dnsSettings().domainNameLabelScope());
        Assertions.assertEquals("ojnabckhsmtxpsie",
            model.properties().publicIPAddressConfiguration().properties().ipTags().get(0).ipTagType());
        Assertions.assertEquals("fhvpesaps",
            model.properties().publicIPAddressConfiguration().properties().ipTags().get(0).tag());
        Assertions.assertEquals("qmhjjdhtld",
            model.properties().publicIPAddressConfiguration().properties().publicIPPrefix().id());
        Assertions.assertEquals(IPVersion.IPV6,
            model.properties().publicIPAddressConfiguration().properties().publicIPAddressVersion());
        Assertions.assertEquals(DeleteOptions.DETACH,
            model.properties().publicIPAddressConfiguration().properties().deleteOption());
        Assertions.assertEquals(PublicIPAddressSkuName.BASIC,
            model.properties().publicIPAddressConfiguration().sku().name());
        Assertions.assertEquals(PublicIPAddressSkuTier.GLOBAL,
            model.properties().publicIPAddressConfiguration().sku().tier());
        Assertions.assertEquals(IPVersion.IPV4, model.properties().privateIPAddressVersion());
        Assertions.assertEquals("svlxotogtwrup",
            model.properties().applicationGatewayBackendAddressPools().get(0).id());
        Assertions.assertEquals("yfjfcnjbkcn", model.properties().applicationSecurityGroups().get(0).id());
        Assertions.assertEquals("ttkphywpnvjtoqne", model.properties().loadBalancerBackendAddressPools().get(0).id());
        Assertions.assertEquals("bgyepsbj", model.properties().loadBalancerInboundNatPools().get(0).id());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VirtualMachineScaleSetIPConfiguration model = new VirtualMachineScaleSetIPConfiguration().withName("ukkfplgmgs")
            .withProperties(new VirtualMachineScaleSetIPConfigurationProperties()
                .withSubnet(new ApiEntityReference().withId("zkd"))
                .withPrimary(false)
                .withPublicIPAddressConfiguration(new VirtualMachineScaleSetPublicIPAddressConfiguration()
                    .withName("vlopwiyighx")
                    .withProperties(new VirtualMachineScaleSetPublicIPAddressConfigurationProperties()
                        .withIdleTimeoutInMinutes(1713070379)
                        .withDnsSettings(new VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings()
                            .withDomainNameLabel("baiuebbaumny")
                            .withDomainNameLabelScope(DomainNameLabelScopeTypes.TENANT_REUSE))
                        .withIpTags(Arrays.asList(
                            new VirtualMachineScaleSetIpTag().withIpTagType("ojnabckhsmtxpsie").withTag("fhvpesaps")))
                        .withPublicIPPrefix(new SubResource().withId("qmhjjdhtld"))
                        .withPublicIPAddressVersion(IPVersion.IPV6)
                        .withDeleteOption(DeleteOptions.DETACH))
                    .withSku(new PublicIPAddressSku().withName(PublicIPAddressSkuName.BASIC)
                        .withTier(PublicIPAddressSkuTier.GLOBAL)))
                .withPrivateIPAddressVersion(IPVersion.IPV4)
                .withApplicationGatewayBackendAddressPools(Arrays.asList(new SubResource().withId("svlxotogtwrup"),
                    new SubResource().withId("xvnmicykvceov"), new SubResource().withId("lo")))
                .withApplicationSecurityGroups(Arrays.asList(new SubResource().withId("yfjfcnjbkcn")))
                .withLoadBalancerBackendAddressPools(Arrays.asList(new SubResource().withId("ttkphywpnvjtoqne"),
                    new SubResource().withId("clfp"), new SubResource().withId("hoxus")))
                .withLoadBalancerInboundNatPools(
                    Arrays.asList(new SubResource().withId("bgyepsbj"), new SubResource().withId("zq"))));
        model = BinaryData.fromObject(model).toObject(VirtualMachineScaleSetIPConfiguration.class);
        Assertions.assertEquals("ukkfplgmgs", model.name());
        Assertions.assertEquals("zkd", model.properties().subnet().id());
        Assertions.assertEquals(false, model.properties().primary());
        Assertions.assertEquals("vlopwiyighx", model.properties().publicIPAddressConfiguration().name());
        Assertions.assertEquals(1713070379,
            model.properties().publicIPAddressConfiguration().properties().idleTimeoutInMinutes());
        Assertions.assertEquals("baiuebbaumny",
            model.properties().publicIPAddressConfiguration().properties().dnsSettings().domainNameLabel());
        Assertions.assertEquals(DomainNameLabelScopeTypes.TENANT_REUSE,
            model.properties().publicIPAddressConfiguration().properties().dnsSettings().domainNameLabelScope());
        Assertions.assertEquals("ojnabckhsmtxpsie",
            model.properties().publicIPAddressConfiguration().properties().ipTags().get(0).ipTagType());
        Assertions.assertEquals("fhvpesaps",
            model.properties().publicIPAddressConfiguration().properties().ipTags().get(0).tag());
        Assertions.assertEquals("qmhjjdhtld",
            model.properties().publicIPAddressConfiguration().properties().publicIPPrefix().id());
        Assertions.assertEquals(IPVersion.IPV6,
            model.properties().publicIPAddressConfiguration().properties().publicIPAddressVersion());
        Assertions.assertEquals(DeleteOptions.DETACH,
            model.properties().publicIPAddressConfiguration().properties().deleteOption());
        Assertions.assertEquals(PublicIPAddressSkuName.BASIC,
            model.properties().publicIPAddressConfiguration().sku().name());
        Assertions.assertEquals(PublicIPAddressSkuTier.GLOBAL,
            model.properties().publicIPAddressConfiguration().sku().tier());
        Assertions.assertEquals(IPVersion.IPV4, model.properties().privateIPAddressVersion());
        Assertions.assertEquals("svlxotogtwrup",
            model.properties().applicationGatewayBackendAddressPools().get(0).id());
        Assertions.assertEquals("yfjfcnjbkcn", model.properties().applicationSecurityGroups().get(0).id());
        Assertions.assertEquals("ttkphywpnvjtoqne", model.properties().loadBalancerBackendAddressPools().get(0).id());
        Assertions.assertEquals("bgyepsbj", model.properties().loadBalancerInboundNatPools().get(0).id());
    }
}
