// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.computefleet.generated;

import com.azure.core.management.SubResource;
import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.computefleet.models.ApiEntityReference;
import com.azure.resourcemanager.computefleet.models.DeleteOptions;
import com.azure.resourcemanager.computefleet.models.DomainNameLabelScopeTypes;
import com.azure.resourcemanager.computefleet.models.IPVersion;
import com.azure.resourcemanager.computefleet.models.PublicIPAddressSku;
import com.azure.resourcemanager.computefleet.models.PublicIPAddressSkuName;
import com.azure.resourcemanager.computefleet.models.PublicIPAddressSkuTier;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetIPConfiguration;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetIPConfigurationProperties;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetIpTag;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetPublicIPAddressConfiguration;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetPublicIPAddressConfigurationProperties;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class VirtualMachineScaleSetIPConfigurationTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VirtualMachineScaleSetIPConfiguration model = BinaryData.fromString(
            "{\"name\":\"nxdhbt\",\"properties\":{\"subnet\":{\"id\":\"ywpnvjt\"},\"primary\":false,\"publicIPAddressConfiguration\":{\"name\":\"rmclfplphoxu\",\"properties\":{\"idleTimeoutInMinutes\":2041952882,\"dnsSettings\":{\"domainNameLabel\":\"bgyepsbj\",\"domainNameLabelScope\":\"TenantReuse\"},\"ipTags\":[{\"ipTagType\":\"xywpmueefjzwfqkq\",\"tag\":\"ids\"},{\"ipTagType\":\"onobglaocqx\",\"tag\":\"cmgyud\"},{\"ipTagType\":\"tlmoyrx\",\"tag\":\"fudwpznt\"}],\"publicIPPrefix\":{\"id\":\"zhlrqjb\"},\"publicIPAddressVersion\":\"IPv6\",\"deleteOption\":\"Delete\"},\"sku\":{\"name\":\"Basic\",\"tier\":\"Global\"}},\"privateIPAddressVersion\":\"IPv4\",\"applicationGatewayBackendAddressPools\":[{\"id\":\"ycanuzbpzkafku\"},{\"id\":\"crnwbmeh\"},{\"id\":\"eyvjusrtslhspkde\"}],\"applicationSecurityGroups\":[{\"id\":\"fm\"},{\"id\":\"gkvtmelmqkrhah\"},{\"id\":\"juahaquhcdhmdual\"}],\"loadBalancerBackendAddressPools\":[{\"id\":\"pvfadmwsrcr\"},{\"id\":\"xpvgo\"},{\"id\":\"lf\"}],\"loadBalancerInboundNatPools\":[{\"id\":\"wbnb\"},{\"id\":\"ldawkzbaliourqha\"},{\"id\":\"uhashsfwx\"}]}}")
            .toObject(VirtualMachineScaleSetIPConfiguration.class);
        Assertions.assertEquals("nxdhbt", model.name());
        Assertions.assertEquals("ywpnvjt", model.properties().subnet().id());
        Assertions.assertEquals(false, model.properties().primary());
        Assertions.assertEquals("rmclfplphoxu", model.properties().publicIPAddressConfiguration().name());
        Assertions.assertEquals(2041952882,
            model.properties().publicIPAddressConfiguration().properties().idleTimeoutInMinutes());
        Assertions.assertEquals("bgyepsbj",
            model.properties().publicIPAddressConfiguration().properties().dnsSettings().domainNameLabel());
        Assertions.assertEquals(DomainNameLabelScopeTypes.TENANT_REUSE,
            model.properties().publicIPAddressConfiguration().properties().dnsSettings().domainNameLabelScope());
        Assertions.assertEquals("xywpmueefjzwfqkq",
            model.properties().publicIPAddressConfiguration().properties().ipTags().get(0).ipTagType());
        Assertions.assertEquals("ids",
            model.properties().publicIPAddressConfiguration().properties().ipTags().get(0).tag());
        Assertions.assertEquals("zhlrqjb",
            model.properties().publicIPAddressConfiguration().properties().publicIPPrefix().id());
        Assertions.assertEquals(IPVersion.IPV6,
            model.properties().publicIPAddressConfiguration().properties().publicIPAddressVersion());
        Assertions.assertEquals(DeleteOptions.DELETE,
            model.properties().publicIPAddressConfiguration().properties().deleteOption());
        Assertions.assertEquals(PublicIPAddressSkuName.BASIC,
            model.properties().publicIPAddressConfiguration().sku().name());
        Assertions.assertEquals(PublicIPAddressSkuTier.GLOBAL,
            model.properties().publicIPAddressConfiguration().sku().tier());
        Assertions.assertEquals(IPVersion.IPV4, model.properties().privateIPAddressVersion());
        Assertions.assertEquals("ycanuzbpzkafku",
            model.properties().applicationGatewayBackendAddressPools().get(0).id());
        Assertions.assertEquals("fm", model.properties().applicationSecurityGroups().get(0).id());
        Assertions.assertEquals("pvfadmwsrcr", model.properties().loadBalancerBackendAddressPools().get(0).id());
        Assertions.assertEquals("wbnb", model.properties().loadBalancerInboundNatPools().get(0).id());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VirtualMachineScaleSetIPConfiguration model
            = new VirtualMachineScaleSetIPConfiguration().withName("nxdhbt")
                .withProperties(
                    new VirtualMachineScaleSetIPConfigurationProperties()
                        .withSubnet(new ApiEntityReference().withId("ywpnvjt"))
                        .withPrimary(false)
                        .withPublicIPAddressConfiguration(new VirtualMachineScaleSetPublicIPAddressConfiguration()
                            .withName("rmclfplphoxu")
                            .withProperties(new VirtualMachineScaleSetPublicIPAddressConfigurationProperties()
                                .withIdleTimeoutInMinutes(2041952882)
                                .withDnsSettings(new VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings()
                                    .withDomainNameLabel("bgyepsbj")
                                    .withDomainNameLabelScope(DomainNameLabelScopeTypes.TENANT_REUSE))
                                .withIpTags(Arrays.asList(
                                    new VirtualMachineScaleSetIpTag().withIpTagType("xywpmueefjzwfqkq").withTag("ids"),
                                    new VirtualMachineScaleSetIpTag().withIpTagType("onobglaocqx").withTag("cmgyud"),
                                    new VirtualMachineScaleSetIpTag().withIpTagType("tlmoyrx").withTag("fudwpznt")))
                                .withPublicIPPrefix(new SubResource().withId("zhlrqjb"))
                                .withPublicIPAddressVersion(IPVersion.IPV6)
                                .withDeleteOption(DeleteOptions.DELETE))
                            .withSku(new PublicIPAddressSku().withName(PublicIPAddressSkuName.BASIC)
                                .withTier(PublicIPAddressSkuTier.GLOBAL)))
                        .withPrivateIPAddressVersion(IPVersion.IPV4)
                        .withApplicationGatewayBackendAddressPools(
                            Arrays.asList(new SubResource().withId("ycanuzbpzkafku"),
                                new SubResource().withId("crnwbmeh"), new SubResource().withId("eyvjusrtslhspkde")))
                        .withApplicationSecurityGroups(Arrays.asList(new SubResource().withId("fm"),
                            new SubResource().withId("gkvtmelmqkrhah"), new SubResource().withId("juahaquhcdhmdual")))
                        .withLoadBalancerBackendAddressPools(Arrays.asList(new SubResource().withId("pvfadmwsrcr"),
                            new SubResource().withId("xpvgo"), new SubResource().withId("lf")))
                        .withLoadBalancerInboundNatPools(Arrays.asList(new SubResource().withId("wbnb"),
                            new SubResource().withId("ldawkzbaliourqha"), new SubResource().withId("uhashsfwx"))));
        model = BinaryData.fromObject(model).toObject(VirtualMachineScaleSetIPConfiguration.class);
        Assertions.assertEquals("nxdhbt", model.name());
        Assertions.assertEquals("ywpnvjt", model.properties().subnet().id());
        Assertions.assertEquals(false, model.properties().primary());
        Assertions.assertEquals("rmclfplphoxu", model.properties().publicIPAddressConfiguration().name());
        Assertions.assertEquals(2041952882,
            model.properties().publicIPAddressConfiguration().properties().idleTimeoutInMinutes());
        Assertions.assertEquals("bgyepsbj",
            model.properties().publicIPAddressConfiguration().properties().dnsSettings().domainNameLabel());
        Assertions.assertEquals(DomainNameLabelScopeTypes.TENANT_REUSE,
            model.properties().publicIPAddressConfiguration().properties().dnsSettings().domainNameLabelScope());
        Assertions.assertEquals("xywpmueefjzwfqkq",
            model.properties().publicIPAddressConfiguration().properties().ipTags().get(0).ipTagType());
        Assertions.assertEquals("ids",
            model.properties().publicIPAddressConfiguration().properties().ipTags().get(0).tag());
        Assertions.assertEquals("zhlrqjb",
            model.properties().publicIPAddressConfiguration().properties().publicIPPrefix().id());
        Assertions.assertEquals(IPVersion.IPV6,
            model.properties().publicIPAddressConfiguration().properties().publicIPAddressVersion());
        Assertions.assertEquals(DeleteOptions.DELETE,
            model.properties().publicIPAddressConfiguration().properties().deleteOption());
        Assertions.assertEquals(PublicIPAddressSkuName.BASIC,
            model.properties().publicIPAddressConfiguration().sku().name());
        Assertions.assertEquals(PublicIPAddressSkuTier.GLOBAL,
            model.properties().publicIPAddressConfiguration().sku().tier());
        Assertions.assertEquals(IPVersion.IPV4, model.properties().privateIPAddressVersion());
        Assertions.assertEquals("ycanuzbpzkafku",
            model.properties().applicationGatewayBackendAddressPools().get(0).id());
        Assertions.assertEquals("fm", model.properties().applicationSecurityGroups().get(0).id());
        Assertions.assertEquals("pvfadmwsrcr", model.properties().loadBalancerBackendAddressPools().get(0).id());
        Assertions.assertEquals("wbnb", model.properties().loadBalancerInboundNatPools().get(0).id());
    }
}
