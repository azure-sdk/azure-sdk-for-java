// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.computefleet.generated;

import com.azure.core.management.SubResource;
import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.computefleet.models.ApiEntityReference;
import com.azure.resourcemanager.computefleet.models.DeleteOptions;
import com.azure.resourcemanager.computefleet.models.DomainNameLabelScopeTypes;
import com.azure.resourcemanager.computefleet.models.IPVersion;
import com.azure.resourcemanager.computefleet.models.PublicIPAddressSku;
import com.azure.resourcemanager.computefleet.models.PublicIPAddressSkuName;
import com.azure.resourcemanager.computefleet.models.PublicIPAddressSkuTier;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetIPConfiguration;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetIPConfigurationProperties;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetIpTag;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetPublicIPAddressConfiguration;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetPublicIPAddressConfigurationProperties;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class VirtualMachineScaleSetIPConfigurationTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VirtualMachineScaleSetIPConfiguration model = BinaryData.fromString(
            "{\"name\":\"hfmvfaxkffe\",\"properties\":{\"subnet\":{\"id\":\"lvmezyvshxmzsbbz\"},\"primary\":false,\"publicIPAddressConfiguration\":{\"name\":\"grxwbu\",\"properties\":{\"idleTimeoutInMinutes\":714524610,\"dnsSettings\":{\"domainNameLabel\":\"jnspydp\",\"domainNameLabelScope\":\"NoReuse\"},\"ipTags\":[{\"ipTagType\":\"ou\",\"tag\":\"vudwtiukbldng\"},{\"ipTagType\":\"ocipazyxoeg\",\"tag\":\"g\"}],\"publicIPPrefix\":{\"id\":\"iucgygevqzn\"},\"publicIPAddressVersion\":\"IPv4\",\"deleteOption\":\"Delete\"},\"sku\":{\"name\":\"Standard\",\"tier\":\"Regional\"}},\"privateIPAddressVersion\":\"IPv4\",\"applicationGatewayBackendAddressPools\":[{\"id\":\"dpydn\"}],\"applicationSecurityGroups\":[{\"id\":\"de\"},{\"id\":\"jzicwifsjt\"}],\"loadBalancerBackendAddressPools\":[{\"id\":\"bishcbkhajdeyea\"},{\"id\":\"p\"},{\"id\":\"g\"}],\"loadBalancerInboundNatPools\":[{\"id\":\"uxwgipwho\"},{\"id\":\"wkgshwa\"},{\"id\":\"ixzbinjeputtmryw\"}]}}")
            .toObject(VirtualMachineScaleSetIPConfiguration.class);
        Assertions.assertEquals("hfmvfaxkffe", model.name());
        Assertions.assertEquals("lvmezyvshxmzsbbz", model.properties().subnet().id());
        Assertions.assertEquals(false, model.properties().primary());
        Assertions.assertEquals("grxwbu", model.properties().publicIPAddressConfiguration().name());
        Assertions.assertEquals(714524610,
            model.properties().publicIPAddressConfiguration().properties().idleTimeoutInMinutes());
        Assertions.assertEquals("jnspydp",
            model.properties().publicIPAddressConfiguration().properties().dnsSettings().domainNameLabel());
        Assertions.assertEquals(DomainNameLabelScopeTypes.NO_REUSE,
            model.properties().publicIPAddressConfiguration().properties().dnsSettings().domainNameLabelScope());
        Assertions.assertEquals("ou",
            model.properties().publicIPAddressConfiguration().properties().ipTags().get(0).ipTagType());
        Assertions.assertEquals("vudwtiukbldng",
            model.properties().publicIPAddressConfiguration().properties().ipTags().get(0).tag());
        Assertions.assertEquals("iucgygevqzn",
            model.properties().publicIPAddressConfiguration().properties().publicIPPrefix().id());
        Assertions.assertEquals(IPVersion.IPV4,
            model.properties().publicIPAddressConfiguration().properties().publicIPAddressVersion());
        Assertions.assertEquals(DeleteOptions.DELETE,
            model.properties().publicIPAddressConfiguration().properties().deleteOption());
        Assertions.assertEquals(PublicIPAddressSkuName.STANDARD,
            model.properties().publicIPAddressConfiguration().sku().name());
        Assertions.assertEquals(PublicIPAddressSkuTier.REGIONAL,
            model.properties().publicIPAddressConfiguration().sku().tier());
        Assertions.assertEquals(IPVersion.IPV4, model.properties().privateIPAddressVersion());
        Assertions.assertEquals("dpydn", model.properties().applicationGatewayBackendAddressPools().get(0).id());
        Assertions.assertEquals("de", model.properties().applicationSecurityGroups().get(0).id());
        Assertions.assertEquals("bishcbkhajdeyea", model.properties().loadBalancerBackendAddressPools().get(0).id());
        Assertions.assertEquals("uxwgipwho", model.properties().loadBalancerInboundNatPools().get(0).id());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VirtualMachineScaleSetIPConfiguration model
            = new VirtualMachineScaleSetIPConfiguration().withName("hfmvfaxkffe")
                .withProperties(new VirtualMachineScaleSetIPConfigurationProperties()
                    .withSubnet(new ApiEntityReference().withId("lvmezyvshxmzsbbz"))
                    .withPrimary(false)
                    .withPublicIPAddressConfiguration(
                        new VirtualMachineScaleSetPublicIPAddressConfiguration().withName("grxwbu")
                            .withProperties(new VirtualMachineScaleSetPublicIPAddressConfigurationProperties()
                                .withIdleTimeoutInMinutes(714524610)
                                .withDnsSettings(new VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings()
                                    .withDomainNameLabel("jnspydp")
                                    .withDomainNameLabelScope(DomainNameLabelScopeTypes.NO_REUSE))
                                .withIpTags(Arrays.asList(
                                    new VirtualMachineScaleSetIpTag().withIpTagType("ou").withTag("vudwtiukbldng"),
                                    new VirtualMachineScaleSetIpTag().withIpTagType("ocipazyxoeg").withTag("g")))
                                .withPublicIPPrefix(new SubResource().withId("iucgygevqzn"))
                                .withPublicIPAddressVersion(IPVersion.IPV4)
                                .withDeleteOption(DeleteOptions.DELETE))
                            .withSku(new PublicIPAddressSku().withName(PublicIPAddressSkuName.STANDARD)
                                .withTier(PublicIPAddressSkuTier.REGIONAL)))
                    .withPrivateIPAddressVersion(IPVersion.IPV4)
                    .withApplicationGatewayBackendAddressPools(Arrays.asList(new SubResource().withId("dpydn")))
                    .withApplicationSecurityGroups(
                        Arrays.asList(new SubResource().withId("de"), new SubResource().withId("jzicwifsjt")))
                    .withLoadBalancerBackendAddressPools(Arrays.asList(new SubResource().withId("bishcbkhajdeyea"),
                        new SubResource().withId("p"), new SubResource().withId("g")))
                    .withLoadBalancerInboundNatPools(Arrays.asList(new SubResource().withId("uxwgipwho"),
                        new SubResource().withId("wkgshwa"), new SubResource().withId("ixzbinjeputtmryw"))));
        model = BinaryData.fromObject(model).toObject(VirtualMachineScaleSetIPConfiguration.class);
        Assertions.assertEquals("hfmvfaxkffe", model.name());
        Assertions.assertEquals("lvmezyvshxmzsbbz", model.properties().subnet().id());
        Assertions.assertEquals(false, model.properties().primary());
        Assertions.assertEquals("grxwbu", model.properties().publicIPAddressConfiguration().name());
        Assertions.assertEquals(714524610,
            model.properties().publicIPAddressConfiguration().properties().idleTimeoutInMinutes());
        Assertions.assertEquals("jnspydp",
            model.properties().publicIPAddressConfiguration().properties().dnsSettings().domainNameLabel());
        Assertions.assertEquals(DomainNameLabelScopeTypes.NO_REUSE,
            model.properties().publicIPAddressConfiguration().properties().dnsSettings().domainNameLabelScope());
        Assertions.assertEquals("ou",
            model.properties().publicIPAddressConfiguration().properties().ipTags().get(0).ipTagType());
        Assertions.assertEquals("vudwtiukbldng",
            model.properties().publicIPAddressConfiguration().properties().ipTags().get(0).tag());
        Assertions.assertEquals("iucgygevqzn",
            model.properties().publicIPAddressConfiguration().properties().publicIPPrefix().id());
        Assertions.assertEquals(IPVersion.IPV4,
            model.properties().publicIPAddressConfiguration().properties().publicIPAddressVersion());
        Assertions.assertEquals(DeleteOptions.DELETE,
            model.properties().publicIPAddressConfiguration().properties().deleteOption());
        Assertions.assertEquals(PublicIPAddressSkuName.STANDARD,
            model.properties().publicIPAddressConfiguration().sku().name());
        Assertions.assertEquals(PublicIPAddressSkuTier.REGIONAL,
            model.properties().publicIPAddressConfiguration().sku().tier());
        Assertions.assertEquals(IPVersion.IPV4, model.properties().privateIPAddressVersion());
        Assertions.assertEquals("dpydn", model.properties().applicationGatewayBackendAddressPools().get(0).id());
        Assertions.assertEquals("de", model.properties().applicationSecurityGroups().get(0).id());
        Assertions.assertEquals("bishcbkhajdeyea", model.properties().loadBalancerBackendAddressPools().get(0).id());
        Assertions.assertEquals("uxwgipwho", model.properties().loadBalancerInboundNatPools().get(0).id());
    }
}
