// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.computefleet.generated;

import com.azure.core.management.SubResource;
import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.computefleet.models.ApiEntityReference;
import com.azure.resourcemanager.computefleet.models.DeleteOptions;
import com.azure.resourcemanager.computefleet.models.IPVersion;
import com.azure.resourcemanager.computefleet.models.NetworkInterfaceAuxiliaryMode;
import com.azure.resourcemanager.computefleet.models.NetworkInterfaceAuxiliarySku;
import com.azure.resourcemanager.computefleet.models.PublicIPAddressSku;
import com.azure.resourcemanager.computefleet.models.PublicIPAddressSkuName;
import com.azure.resourcemanager.computefleet.models.PublicIPAddressSkuTier;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetIPConfiguration;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetIPConfigurationProperties;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetIpTag;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetNetworkConfigurationDnsSettings;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetNetworkConfigurationProperties;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetPublicIPAddressConfiguration;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetPublicIPAddressConfigurationProperties;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class VirtualMachineScaleSetNetworkConfigurationPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VirtualMachineScaleSetNetworkConfigurationProperties model = BinaryData.fromString(
            "{\"primary\":false,\"enableAcceleratedNetworking\":false,\"disableTcpStateTracking\":false,\"enableFpga\":false,\"networkSecurityGroup\":{\"id\":\"hrzayvvtpgvdf\"},\"dnsSettings\":{\"dnsServers\":[\"kftutqxlngxlefg\",\"gnxkrxdqmidtth\",\"rvqdra\"]},\"ipConfigurations\":[{\"name\":\"jybige\",\"properties\":{\"subnet\":{\"id\":\"bowsk\"},\"primary\":false,\"publicIPAddressConfiguration\":{\"name\":\"tzlcuiywgqywgn\",\"properties\":{\"idleTimeoutInMinutes\":1043685699,\"dnsSettings\":{\"domainNameLabel\":\"hzgpphrcgyncocpe\"},\"ipTags\":[{},{}],\"publicIPPrefix\":{},\"publicIPAddressVersion\":\"IPv6\",\"deleteOption\":\"Delete\"},\"sku\":{\"name\":\"Standard\",\"tier\":\"Regional\"}},\"privateIPAddressVersion\":\"IPv4\",\"applicationGatewayBackendAddressPools\":[{\"id\":\"qjqabcypmivkwl\"}],\"applicationSecurityGroups\":[{\"id\":\"c\"},{\"id\":\"nfnbacfionlebxe\"}],\"loadBalancerBackendAddressPools\":[{\"id\":\"zxdpnqbqqw\"},{\"id\":\"jfeallnwsub\"}],\"loadBalancerInboundNatPools\":[{\"id\":\"ampmngnz\"},{\"id\":\"xaqwoochcbonqv\"}]}},{\"name\":\"kvlrxnj\",\"properties\":{\"subnet\":{\"id\":\"ipheoflokeyyien\"},\"primary\":true,\"publicIPAddressConfiguration\":{\"name\":\"wtgrhpdjpj\",\"properties\":{\"idleTimeoutInMinutes\":1786348929,\"dnsSettings\":{\"domainNameLabel\":\"azjpqyegualhbxxh\"},\"ipTags\":[{},{}],\"publicIPPrefix\":{},\"publicIPAddressVersion\":\"IPv4\",\"deleteOption\":\"Detach\"},\"sku\":{\"name\":\"Standard\",\"tier\":\"Regional\"}},\"privateIPAddressVersion\":\"IPv4\",\"applicationGatewayBackendAddressPools\":[{\"id\":\"wmc\"},{\"id\":\"pwlbjnpg\"}],\"applicationSecurityGroups\":[{\"id\":\"adehxnltyfsopp\"},{\"id\":\"uesnzwdejbavo\"},{\"id\":\"zdmohctbqvu\"},{\"id\":\"xdn\"}],\"loadBalancerBackendAddressPools\":[{\"id\":\"w\"}],\"loadBalancerInboundNatPools\":[{\"id\":\"ugw\"},{\"id\":\"cglhslazjdyggdt\"},{\"id\":\"xhbkuofq\"},{\"id\":\"yk\"}]}},{\"name\":\"menevfyexfwh\",\"properties\":{\"subnet\":{\"id\":\"bvyvdcsity\"},\"primary\":false,\"publicIPAddressConfiguration\":{\"name\":\"mdectehfiqscjey\",\"properties\":{\"idleTimeoutInMinutes\":1237692135,\"dnsSettings\":{\"domainNameLabel\":\"rkgqhcjrefo\"},\"ipTags\":[{},{},{}],\"publicIPPrefix\":{},\"publicIPAddressVersion\":\"IPv4\",\"deleteOption\":\"Detach\"},\"sku\":{\"name\":\"Standard\",\"tier\":\"Global\"}},\"privateIPAddressVersion\":\"IPv6\",\"applicationGatewayBackendAddressPools\":[{\"id\":\"attpngjcrcczsq\"}],\"applicationSecurityGroups\":[{\"id\":\"mdajv\"},{\"id\":\"sounqecanoaeu\"},{\"id\":\"hy\"},{\"id\":\"trpmo\"}],\"loadBalancerBackendAddressPools\":[{\"id\":\"matuok\"},{\"id\":\"fu\"},{\"id\":\"aodsfcpkv\"},{\"id\":\"dpuozmyz\"}],\"loadBalancerInboundNatPools\":[{\"id\":\"fuaxbe\"},{\"id\":\"iu\"},{\"id\":\"ktwh\"}]}},{\"name\":\"dxwzywqsmbsurexi\",\"properties\":{\"subnet\":{\"id\":\"ocfs\"},\"primary\":false,\"publicIPAddressConfiguration\":{\"name\":\"mddystkiiux\",\"properties\":{\"idleTimeoutInMinutes\":2028632264,\"dnsSettings\":{\"domainNameLabel\":\"xorrqnb\"},\"ipTags\":[{},{}],\"publicIPPrefix\":{},\"publicIPAddressVersion\":\"IPv6\",\"deleteOption\":\"Detach\"},\"sku\":{\"name\":\"Basic\",\"tier\":\"Global\"}},\"privateIPAddressVersion\":\"IPv4\",\"applicationGatewayBackendAddressPools\":[{\"id\":\"rm\"}],\"applicationSecurityGroups\":[{\"id\":\"watkpnpulexxb\"}],\"loadBalancerBackendAddressPools\":[{\"id\":\"ruwiqzbqjvsov\"},{\"id\":\"okacspk\"},{\"id\":\"hzdobpxjmflbvvnc\"},{\"id\":\"kcciwwzjuqkhr\"}],\"loadBalancerInboundNatPools\":[{\"id\":\"wkuofoskghsauu\"},{\"id\":\"jmvxie\"},{\"id\":\"ugidyjrr\"},{\"id\":\"y\"}]}}],\"enableIPForwarding\":true,\"deleteOption\":\"Delete\",\"auxiliaryMode\":\"Floating\",\"auxiliarySku\":\"A2\"}")
            .toObject(VirtualMachineScaleSetNetworkConfigurationProperties.class);
        Assertions.assertEquals(false, model.primary());
        Assertions.assertEquals(false, model.enableAcceleratedNetworking());
        Assertions.assertEquals(false, model.disableTcpStateTracking());
        Assertions.assertEquals(false, model.enableFpga());
        Assertions.assertEquals("hrzayvvtpgvdf", model.networkSecurityGroup().id());
        Assertions.assertEquals("kftutqxlngxlefg", model.dnsSettings().dnsServers().get(0));
        Assertions.assertEquals("jybige", model.ipConfigurations().get(0).name());
        Assertions.assertEquals("bowsk", model.ipConfigurations().get(0).properties().subnet().id());
        Assertions.assertEquals(false, model.ipConfigurations().get(0).properties().primary());
        Assertions.assertEquals("tzlcuiywgqywgn",
            model.ipConfigurations().get(0).properties().publicIPAddressConfiguration().name());
        Assertions.assertEquals(1043685699,
            model.ipConfigurations()
                .get(0)
                .properties()
                .publicIPAddressConfiguration()
                .properties()
                .idleTimeoutInMinutes());
        Assertions.assertEquals("hzgpphrcgyncocpe",
            model.ipConfigurations()
                .get(0)
                .properties()
                .publicIPAddressConfiguration()
                .properties()
                .dnsSettings()
                .domainNameLabel());
        Assertions.assertEquals(IPVersion.IPV6,
            model.ipConfigurations()
                .get(0)
                .properties()
                .publicIPAddressConfiguration()
                .properties()
                .publicIPAddressVersion());
        Assertions.assertEquals(DeleteOptions.DELETE,
            model.ipConfigurations().get(0).properties().publicIPAddressConfiguration().properties().deleteOption());
        Assertions.assertEquals(PublicIPAddressSkuName.STANDARD,
            model.ipConfigurations().get(0).properties().publicIPAddressConfiguration().sku().name());
        Assertions.assertEquals(PublicIPAddressSkuTier.REGIONAL,
            model.ipConfigurations().get(0).properties().publicIPAddressConfiguration().sku().tier());
        Assertions.assertEquals(IPVersion.IPV4, model.ipConfigurations().get(0).properties().privateIPAddressVersion());
        Assertions.assertEquals("qjqabcypmivkwl",
            model.ipConfigurations().get(0).properties().applicationGatewayBackendAddressPools().get(0).id());
        Assertions.assertEquals("c",
            model.ipConfigurations().get(0).properties().applicationSecurityGroups().get(0).id());
        Assertions.assertEquals("zxdpnqbqqw",
            model.ipConfigurations().get(0).properties().loadBalancerBackendAddressPools().get(0).id());
        Assertions.assertEquals("ampmngnz",
            model.ipConfigurations().get(0).properties().loadBalancerInboundNatPools().get(0).id());
        Assertions.assertEquals(true, model.enableIPForwarding());
        Assertions.assertEquals(DeleteOptions.DELETE, model.deleteOption());
        Assertions.assertEquals(NetworkInterfaceAuxiliaryMode.FLOATING, model.auxiliaryMode());
        Assertions.assertEquals(NetworkInterfaceAuxiliarySku.A2, model.auxiliarySku());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VirtualMachineScaleSetNetworkConfigurationProperties model
            = new VirtualMachineScaleSetNetworkConfigurationProperties().withPrimary(false)
                .withEnableAcceleratedNetworking(false)
                .withDisableTcpStateTracking(false)
                .withEnableFpga(false)
                .withNetworkSecurityGroup(new SubResource().withId("hrzayvvtpgvdf"))
                .withDnsSettings(new VirtualMachineScaleSetNetworkConfigurationDnsSettings()
                    .withDnsServers(Arrays.asList("kftutqxlngxlefg", "gnxkrxdqmidtth", "rvqdra")))
                .withIpConfigurations(Arrays.asList(
                    new VirtualMachineScaleSetIPConfiguration().withName("jybige")
                        .withProperties(new VirtualMachineScaleSetIPConfigurationProperties()
                            .withSubnet(new ApiEntityReference().withId("bowsk"))
                            .withPrimary(false)
                            .withPublicIPAddressConfiguration(new VirtualMachineScaleSetPublicIPAddressConfiguration()
                                .withName("tzlcuiywgqywgn")
                                .withProperties(new VirtualMachineScaleSetPublicIPAddressConfigurationProperties()
                                    .withIdleTimeoutInMinutes(1043685699)
                                    .withDnsSettings(new VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings()
                                        .withDomainNameLabel("hzgpphrcgyncocpe"))
                                    .withIpTags(Arrays
                                        .asList(new VirtualMachineScaleSetIpTag(), new VirtualMachineScaleSetIpTag()))
                                    .withPublicIPPrefix(new SubResource())
                                    .withPublicIPAddressVersion(IPVersion.IPV6)
                                    .withDeleteOption(DeleteOptions.DELETE))
                                .withSku(new PublicIPAddressSku().withName(PublicIPAddressSkuName.STANDARD)
                                    .withTier(PublicIPAddressSkuTier.REGIONAL)))
                            .withPrivateIPAddressVersion(IPVersion.IPV4)
                            .withApplicationGatewayBackendAddressPools(
                                Arrays.asList(new SubResource().withId("qjqabcypmivkwl")))
                            .withApplicationSecurityGroups(Arrays.asList(new SubResource().withId("c"),
                                new SubResource().withId("nfnbacfionlebxe")))
                            .withLoadBalancerBackendAddressPools(Arrays.asList(new SubResource().withId("zxdpnqbqqw"),
                                new SubResource().withId("jfeallnwsub")))
                            .withLoadBalancerInboundNatPools(Arrays.asList(new SubResource().withId("ampmngnz"),
                                new SubResource().withId("xaqwoochcbonqv")))),
                    new VirtualMachineScaleSetIPConfiguration().withName("kvlrxnj")
                        .withProperties(new VirtualMachineScaleSetIPConfigurationProperties()
                            .withSubnet(new ApiEntityReference().withId("ipheoflokeyyien"))
                            .withPrimary(true)
                            .withPublicIPAddressConfiguration(new VirtualMachineScaleSetPublicIPAddressConfiguration()
                                .withName("wtgrhpdjpj")
                                .withProperties(new VirtualMachineScaleSetPublicIPAddressConfigurationProperties()
                                    .withIdleTimeoutInMinutes(1786348929)
                                    .withDnsSettings(new VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings()
                                        .withDomainNameLabel("azjpqyegualhbxxh"))
                                    .withIpTags(Arrays.asList(new VirtualMachineScaleSetIpTag(),
                                        new VirtualMachineScaleSetIpTag()))
                                    .withPublicIPPrefix(new SubResource())
                                    .withPublicIPAddressVersion(IPVersion.IPV4)
                                    .withDeleteOption(DeleteOptions.DETACH))
                                .withSku(new PublicIPAddressSku().withName(PublicIPAddressSkuName.STANDARD)
                                    .withTier(PublicIPAddressSkuTier.REGIONAL)))
                            .withPrivateIPAddressVersion(IPVersion.IPV4)
                            .withApplicationGatewayBackendAddressPools(
                                Arrays.asList(new SubResource().withId("wmc"), new SubResource().withId("pwlbjnpg")))
                            .withApplicationSecurityGroups(Arrays.asList(new SubResource().withId("adehxnltyfsopp"),
                                new SubResource().withId("uesnzwdejbavo"), new SubResource().withId("zdmohctbqvu"),
                                new SubResource().withId("xdn")))
                            .withLoadBalancerBackendAddressPools(Arrays.asList(new SubResource().withId("w")))
                            .withLoadBalancerInboundNatPools(Arrays.asList(new SubResource().withId("ugw"),
                                new SubResource().withId("cglhslazjdyggdt"), new SubResource().withId("xhbkuofq"),
                                new SubResource().withId("yk")))),
                    new VirtualMachineScaleSetIPConfiguration().withName("menevfyexfwh")
                        .withProperties(new VirtualMachineScaleSetIPConfigurationProperties()
                            .withSubnet(new ApiEntityReference().withId("bvyvdcsity"))
                            .withPrimary(false)
                            .withPublicIPAddressConfiguration(new VirtualMachineScaleSetPublicIPAddressConfiguration()
                                .withName("mdectehfiqscjey")
                                .withProperties(new VirtualMachineScaleSetPublicIPAddressConfigurationProperties()
                                    .withIdleTimeoutInMinutes(1237692135)
                                    .withDnsSettings(new VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings()
                                        .withDomainNameLabel("rkgqhcjrefo"))
                                    .withIpTags(Arrays.asList(new VirtualMachineScaleSetIpTag(),
                                        new VirtualMachineScaleSetIpTag(), new VirtualMachineScaleSetIpTag()))
                                    .withPublicIPPrefix(new SubResource())
                                    .withPublicIPAddressVersion(IPVersion.IPV4)
                                    .withDeleteOption(DeleteOptions.DETACH))
                                .withSku(new PublicIPAddressSku().withName(PublicIPAddressSkuName.STANDARD)
                                    .withTier(PublicIPAddressSkuTier.GLOBAL)))
                            .withPrivateIPAddressVersion(IPVersion.IPV6)
                            .withApplicationGatewayBackendAddressPools(
                                Arrays.asList(new SubResource().withId("attpngjcrcczsq")))
                            .withApplicationSecurityGroups(Arrays.asList(new SubResource().withId("mdajv"),
                                new SubResource().withId("sounqecanoaeu"), new SubResource().withId("hy"),
                                new SubResource().withId("trpmo")))
                            .withLoadBalancerBackendAddressPools(
                                Arrays.asList(new SubResource().withId("matuok"), new SubResource().withId("fu"),
                                    new SubResource().withId("aodsfcpkv"), new SubResource().withId("dpuozmyz")))
                            .withLoadBalancerInboundNatPools(Arrays.asList(new SubResource().withId("fuaxbe"),
                                new SubResource().withId("iu"), new SubResource().withId("ktwh")))),
                    new VirtualMachineScaleSetIPConfiguration().withName("dxwzywqsmbsurexi")
                        .withProperties(new VirtualMachineScaleSetIPConfigurationProperties()
                            .withSubnet(new ApiEntityReference().withId("ocfs"))
                            .withPrimary(false)
                            .withPublicIPAddressConfiguration(new VirtualMachineScaleSetPublicIPAddressConfiguration()
                                .withName("mddystkiiux")
                                .withProperties(new VirtualMachineScaleSetPublicIPAddressConfigurationProperties()
                                    .withIdleTimeoutInMinutes(2028632264)
                                    .withDnsSettings(new VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings()
                                        .withDomainNameLabel("xorrqnb"))
                                    .withIpTags(Arrays.asList(new VirtualMachineScaleSetIpTag(),
                                        new VirtualMachineScaleSetIpTag()))
                                    .withPublicIPPrefix(new SubResource())
                                    .withPublicIPAddressVersion(IPVersion.IPV6)
                                    .withDeleteOption(DeleteOptions.DETACH))
                                .withSku(new PublicIPAddressSku().withName(PublicIPAddressSkuName.BASIC)
                                    .withTier(PublicIPAddressSkuTier.GLOBAL)))
                            .withPrivateIPAddressVersion(IPVersion.IPV4)
                            .withApplicationGatewayBackendAddressPools(Arrays.asList(new SubResource().withId("rm")))
                            .withApplicationSecurityGroups(Arrays.asList(new SubResource().withId("watkpnpulexxb")))
                            .withLoadBalancerBackendAddressPools(
                                Arrays.asList(new SubResource().withId("ruwiqzbqjvsov"),
                                    new SubResource().withId("okacspk"), new SubResource().withId("hzdobpxjmflbvvnc"),
                                    new SubResource().withId("kcciwwzjuqkhr")))
                            .withLoadBalancerInboundNatPools(Arrays.asList(new SubResource().withId("wkuofoskghsauu"),
                                new SubResource().withId("jmvxie"), new SubResource().withId("ugidyjrr"),
                                new SubResource().withId("y"))))))
                .withEnableIPForwarding(true)
                .withDeleteOption(DeleteOptions.DELETE)
                .withAuxiliaryMode(NetworkInterfaceAuxiliaryMode.FLOATING)
                .withAuxiliarySku(NetworkInterfaceAuxiliarySku.A2);
        model = BinaryData.fromObject(model).toObject(VirtualMachineScaleSetNetworkConfigurationProperties.class);
        Assertions.assertEquals(false, model.primary());
        Assertions.assertEquals(false, model.enableAcceleratedNetworking());
        Assertions.assertEquals(false, model.disableTcpStateTracking());
        Assertions.assertEquals(false, model.enableFpga());
        Assertions.assertEquals("hrzayvvtpgvdf", model.networkSecurityGroup().id());
        Assertions.assertEquals("kftutqxlngxlefg", model.dnsSettings().dnsServers().get(0));
        Assertions.assertEquals("jybige", model.ipConfigurations().get(0).name());
        Assertions.assertEquals("bowsk", model.ipConfigurations().get(0).properties().subnet().id());
        Assertions.assertEquals(false, model.ipConfigurations().get(0).properties().primary());
        Assertions.assertEquals("tzlcuiywgqywgn",
            model.ipConfigurations().get(0).properties().publicIPAddressConfiguration().name());
        Assertions.assertEquals(1043685699,
            model.ipConfigurations()
                .get(0)
                .properties()
                .publicIPAddressConfiguration()
                .properties()
                .idleTimeoutInMinutes());
        Assertions.assertEquals("hzgpphrcgyncocpe",
            model.ipConfigurations()
                .get(0)
                .properties()
                .publicIPAddressConfiguration()
                .properties()
                .dnsSettings()
                .domainNameLabel());
        Assertions.assertEquals(IPVersion.IPV6,
            model.ipConfigurations()
                .get(0)
                .properties()
                .publicIPAddressConfiguration()
                .properties()
                .publicIPAddressVersion());
        Assertions.assertEquals(DeleteOptions.DELETE,
            model.ipConfigurations().get(0).properties().publicIPAddressConfiguration().properties().deleteOption());
        Assertions.assertEquals(PublicIPAddressSkuName.STANDARD,
            model.ipConfigurations().get(0).properties().publicIPAddressConfiguration().sku().name());
        Assertions.assertEquals(PublicIPAddressSkuTier.REGIONAL,
            model.ipConfigurations().get(0).properties().publicIPAddressConfiguration().sku().tier());
        Assertions.assertEquals(IPVersion.IPV4, model.ipConfigurations().get(0).properties().privateIPAddressVersion());
        Assertions.assertEquals("qjqabcypmivkwl",
            model.ipConfigurations().get(0).properties().applicationGatewayBackendAddressPools().get(0).id());
        Assertions.assertEquals("c",
            model.ipConfigurations().get(0).properties().applicationSecurityGroups().get(0).id());
        Assertions.assertEquals("zxdpnqbqqw",
            model.ipConfigurations().get(0).properties().loadBalancerBackendAddressPools().get(0).id());
        Assertions.assertEquals("ampmngnz",
            model.ipConfigurations().get(0).properties().loadBalancerInboundNatPools().get(0).id());
        Assertions.assertEquals(true, model.enableIPForwarding());
        Assertions.assertEquals(DeleteOptions.DELETE, model.deleteOption());
        Assertions.assertEquals(NetworkInterfaceAuxiliaryMode.FLOATING, model.auxiliaryMode());
        Assertions.assertEquals(NetworkInterfaceAuxiliarySku.A2, model.auxiliarySku());
    }
}
