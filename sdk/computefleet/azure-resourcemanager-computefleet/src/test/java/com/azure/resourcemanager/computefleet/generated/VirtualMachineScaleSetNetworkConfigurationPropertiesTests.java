// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.computefleet.generated;

import com.azure.core.management.SubResource;
import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.computefleet.models.ApiEntityReference;
import com.azure.resourcemanager.computefleet.models.DeleteOptions;
import com.azure.resourcemanager.computefleet.models.IPVersion;
import com.azure.resourcemanager.computefleet.models.NetworkInterfaceAuxiliaryMode;
import com.azure.resourcemanager.computefleet.models.NetworkInterfaceAuxiliarySku;
import com.azure.resourcemanager.computefleet.models.PublicIPAddressSku;
import com.azure.resourcemanager.computefleet.models.PublicIPAddressSkuName;
import com.azure.resourcemanager.computefleet.models.PublicIPAddressSkuTier;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetIPConfiguration;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetIPConfigurationProperties;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetIpTag;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetNetworkConfigurationDnsSettings;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetNetworkConfigurationProperties;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetPublicIPAddressConfiguration;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetPublicIPAddressConfigurationProperties;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class VirtualMachineScaleSetNetworkConfigurationPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VirtualMachineScaleSetNetworkConfigurationProperties model = BinaryData.fromString(
            "{\"primary\":false,\"enableAcceleratedNetworking\":false,\"disableTcpStateTracking\":true,\"enableFpga\":false,\"networkSecurityGroup\":{\"id\":\"pydptko\"},\"dnsSettings\":{\"dnsServers\":[\"uknvudwti\"]},\"ipConfigurations\":[{\"name\":\"bldngkpoc\",\"properties\":{\"subnet\":{\"id\":\"yxoegukgjnp\"},\"primary\":false,\"publicIPAddressConfiguration\":{\"name\":\"ygevqzntypmrbpiz\",\"properties\":{\"idleTimeoutInMinutes\":1616487247,\"dnsSettings\":{\"domainNameLabel\":\"sdpydnfyhxdeoejz\"},\"ipTags\":[{}],\"publicIPPrefix\":{},\"publicIPAddressVersion\":\"IPv6\",\"deleteOption\":\"Delete\"},\"sku\":{\"name\":\"Standard\",\"tier\":\"Global\"}},\"privateIPAddressVersion\":\"IPv6\",\"applicationGatewayBackendAddressPools\":[{\"id\":\"khaj\"},{\"id\":\"yeamdphagalpb\"},{\"id\":\"wgipwhono\"},{\"id\":\"gshwankixz\"}],\"applicationSecurityGroups\":[{\"id\":\"eputtmrywnuzoqf\"},{\"id\":\"yqzrnkcqvyxlw\"},{\"id\":\"lsicohoqqnwv\"}],\"loadBalancerBackendAddressPools\":[{\"id\":\"vwhheunmmqhgyx\"}],\"loadBalancerInboundNatPools\":[{\"id\":\"ocukoklyax\"},{\"id\":\"onuq\"}]}},{\"name\":\"zf\",\"properties\":{\"subnet\":{\"id\":\"pewr\"},\"primary\":true,\"publicIPAddressConfiguration\":{\"name\":\"vvjektcxsenhwlrs\",\"properties\":{\"idleTimeoutInMinutes\":842863771,\"dnsSettings\":{\"domainNameLabel\":\"wvlqdqgb\"},\"ipTags\":[{},{},{}],\"publicIPPrefix\":{},\"publicIPAddressVersion\":\"IPv6\",\"deleteOption\":\"Detach\"},\"sku\":{\"name\":\"Standard\",\"tier\":\"Global\"}},\"privateIPAddressVersion\":\"IPv6\",\"applicationGatewayBackendAddressPools\":[{\"id\":\"fsnkymuctq\"},{\"id\":\"fbebrjcxer\"}],\"applicationSecurityGroups\":[{\"id\":\"tttxfvjrb\"},{\"id\":\"phxepcyvahf\"},{\"id\":\"jky\"}],\"loadBalancerBackendAddressPools\":[{\"id\":\"uujqgidokgjljyo\"}],\"loadBalancerInboundNatPools\":[{\"id\":\"ltbgsncghkj\"},{\"id\":\"zz\"},{\"id\":\"ijhtxf\"}]}},{\"name\":\"gx\",\"properties\":{\"subnet\":{\"id\":\"xnehmpvec\"},\"primary\":true,\"publicIPAddressConfiguration\":{\"name\":\"ebfqkkrbm\",\"properties\":{\"idleTimeoutInMinutes\":525812320,\"dnsSettings\":{\"domainNameLabel\":\"iw\"},\"ipTags\":[{},{},{},{}],\"publicIPPrefix\":{},\"publicIPAddressVersion\":\"IPv6\",\"deleteOption\":\"Detach\"},\"sku\":{\"name\":\"Basic\",\"tier\":\"Global\"}},\"privateIPAddressVersion\":\"IPv6\",\"applicationGatewayBackendAddressPools\":[{\"id\":\"zahmgkbrpyydhibn\"},{\"id\":\"qkpikadrgvtqagnb\"},{\"id\":\"nhijggmebfsi\"},{\"id\":\"butr\"}],\"applicationSecurityGroups\":[{\"id\":\"azzmhjrunmpxt\"},{\"id\":\"bh\"}],\"loadBalancerBackendAddressPools\":[{\"id\":\"ankxmyskpbhenb\"},{\"id\":\"cxy\"},{\"id\":\"y\"}],\"loadBalancerInboundNatPools\":[{\"id\":\"yn\"}]}},{\"name\":\"qidybyx\",\"properties\":{\"subnet\":{\"id\":\"lhaaxdbabp\"},\"primary\":true,\"publicIPAddressConfiguration\":{\"name\":\"qlfktsths\",\"properties\":{\"idleTimeoutInMinutes\":296949281,\"dnsSettings\":{\"domainNameLabel\":\"nyyazttbtwwrqpue\"},\"ipTags\":[{},{}],\"publicIPPrefix\":{},\"publicIPAddressVersion\":\"IPv6\",\"deleteOption\":\"Detach\"},\"sku\":{\"name\":\"Standard\",\"tier\":\"Global\"}},\"privateIPAddressVersion\":\"IPv4\",\"applicationGatewayBackendAddressPools\":[{\"id\":\"ibx\"},{\"id\":\"wbhqwal\"}],\"applicationSecurityGroups\":[{\"id\":\"oxaepd\"},{\"id\":\"jancu\"},{\"id\":\"hdwbavxbniwdjs\"},{\"id\":\"tsdbpgn\"}],\"loadBalancerBackendAddressPools\":[{\"id\":\"hpzxbzpfzab\"}],\"loadBalancerInboundNatPools\":[{\"id\":\"hxw\"}]}}],\"enableIPForwarding\":false,\"deleteOption\":\"Delete\",\"auxiliaryMode\":\"None\",\"auxiliarySku\":\"None\"}")
            .toObject(VirtualMachineScaleSetNetworkConfigurationProperties.class);
        Assertions.assertEquals(false, model.primary());
        Assertions.assertEquals(false, model.enableAcceleratedNetworking());
        Assertions.assertEquals(true, model.disableTcpStateTracking());
        Assertions.assertEquals(false, model.enableFpga());
        Assertions.assertEquals("pydptko", model.networkSecurityGroup().id());
        Assertions.assertEquals("uknvudwti", model.dnsSettings().dnsServers().get(0));
        Assertions.assertEquals("bldngkpoc", model.ipConfigurations().get(0).name());
        Assertions.assertEquals("yxoegukgjnp", model.ipConfigurations().get(0).properties().subnet().id());
        Assertions.assertEquals(false, model.ipConfigurations().get(0).properties().primary());
        Assertions.assertEquals("ygevqzntypmrbpiz",
            model.ipConfigurations().get(0).properties().publicIPAddressConfiguration().name());
        Assertions.assertEquals(1616487247,
            model.ipConfigurations()
                .get(0)
                .properties()
                .publicIPAddressConfiguration()
                .properties()
                .idleTimeoutInMinutes());
        Assertions.assertEquals("sdpydnfyhxdeoejz",
            model.ipConfigurations()
                .get(0)
                .properties()
                .publicIPAddressConfiguration()
                .properties()
                .dnsSettings()
                .domainNameLabel());
        Assertions.assertEquals(IPVersion.IPV6,
            model.ipConfigurations()
                .get(0)
                .properties()
                .publicIPAddressConfiguration()
                .properties()
                .publicIPAddressVersion());
        Assertions.assertEquals(DeleteOptions.DELETE,
            model.ipConfigurations().get(0).properties().publicIPAddressConfiguration().properties().deleteOption());
        Assertions.assertEquals(PublicIPAddressSkuName.STANDARD,
            model.ipConfigurations().get(0).properties().publicIPAddressConfiguration().sku().name());
        Assertions.assertEquals(PublicIPAddressSkuTier.GLOBAL,
            model.ipConfigurations().get(0).properties().publicIPAddressConfiguration().sku().tier());
        Assertions.assertEquals(IPVersion.IPV6, model.ipConfigurations().get(0).properties().privateIPAddressVersion());
        Assertions.assertEquals("khaj",
            model.ipConfigurations().get(0).properties().applicationGatewayBackendAddressPools().get(0).id());
        Assertions.assertEquals("eputtmrywnuzoqf",
            model.ipConfigurations().get(0).properties().applicationSecurityGroups().get(0).id());
        Assertions.assertEquals("vwhheunmmqhgyx",
            model.ipConfigurations().get(0).properties().loadBalancerBackendAddressPools().get(0).id());
        Assertions.assertEquals("ocukoklyax",
            model.ipConfigurations().get(0).properties().loadBalancerInboundNatPools().get(0).id());
        Assertions.assertEquals(false, model.enableIPForwarding());
        Assertions.assertEquals(DeleteOptions.DELETE, model.deleteOption());
        Assertions.assertEquals(NetworkInterfaceAuxiliaryMode.NONE, model.auxiliaryMode());
        Assertions.assertEquals(NetworkInterfaceAuxiliarySku.NONE, model.auxiliarySku());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VirtualMachineScaleSetNetworkConfigurationProperties model
            = new VirtualMachineScaleSetNetworkConfigurationProperties().withPrimary(false)
                .withEnableAcceleratedNetworking(false)
                .withDisableTcpStateTracking(true)
                .withEnableFpga(false)
                .withNetworkSecurityGroup(new SubResource().withId("pydptko"))
                .withDnsSettings(new VirtualMachineScaleSetNetworkConfigurationDnsSettings()
                    .withDnsServers(Arrays.asList("uknvudwti")))
                .withIpConfigurations(Arrays.asList(
                    new VirtualMachineScaleSetIPConfiguration().withName("bldngkpoc")
                        .withProperties(new VirtualMachineScaleSetIPConfigurationProperties()
                            .withSubnet(new ApiEntityReference().withId("yxoegukgjnp"))
                            .withPrimary(false)
                            .withPublicIPAddressConfiguration(new VirtualMachineScaleSetPublicIPAddressConfiguration()
                                .withName("ygevqzntypmrbpiz")
                                .withProperties(new VirtualMachineScaleSetPublicIPAddressConfigurationProperties()
                                    .withIdleTimeoutInMinutes(1616487247)
                                    .withDnsSettings(new VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings()
                                        .withDomainNameLabel("sdpydnfyhxdeoejz"))
                                    .withIpTags(Arrays.asList(new VirtualMachineScaleSetIpTag()))
                                    .withPublicIPPrefix(new SubResource())
                                    .withPublicIPAddressVersion(IPVersion.IPV6)
                                    .withDeleteOption(DeleteOptions.DELETE))
                                .withSku(new PublicIPAddressSku().withName(PublicIPAddressSkuName.STANDARD)
                                    .withTier(PublicIPAddressSkuTier.GLOBAL)))
                            .withPrivateIPAddressVersion(IPVersion.IPV6)
                            .withApplicationGatewayBackendAddressPools(Arrays.asList(new SubResource().withId("khaj"),
                                new SubResource().withId("yeamdphagalpb"), new SubResource().withId("wgipwhono"),
                                new SubResource().withId("gshwankixz")))
                            .withApplicationSecurityGroups(Arrays.asList(new SubResource().withId("eputtmrywnuzoqf"),
                                new SubResource().withId("yqzrnkcqvyxlw"), new SubResource().withId("lsicohoqqnwv")))
                            .withLoadBalancerBackendAddressPools(
                                Arrays.asList(new SubResource().withId("vwhheunmmqhgyx")))
                            .withLoadBalancerInboundNatPools(Arrays.asList(new SubResource().withId("ocukoklyax"),
                                new SubResource().withId("onuq")))),
                    new VirtualMachineScaleSetIPConfiguration().withName("zf")
                        .withProperties(new VirtualMachineScaleSetIPConfigurationProperties()
                            .withSubnet(new ApiEntityReference().withId("pewr"))
                            .withPrimary(true)
                            .withPublicIPAddressConfiguration(new VirtualMachineScaleSetPublicIPAddressConfiguration()
                                .withName("vvjektcxsenhwlrs")
                                .withProperties(new VirtualMachineScaleSetPublicIPAddressConfigurationProperties()
                                    .withIdleTimeoutInMinutes(842863771)
                                    .withDnsSettings(new VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings()
                                        .withDomainNameLabel("wvlqdqgb"))
                                    .withIpTags(Arrays.asList(new VirtualMachineScaleSetIpTag(),
                                        new VirtualMachineScaleSetIpTag(), new VirtualMachineScaleSetIpTag()))
                                    .withPublicIPPrefix(new SubResource())
                                    .withPublicIPAddressVersion(IPVersion.IPV6)
                                    .withDeleteOption(DeleteOptions.DETACH))
                                .withSku(new PublicIPAddressSku().withName(PublicIPAddressSkuName.STANDARD)
                                    .withTier(PublicIPAddressSkuTier.GLOBAL)))
                            .withPrivateIPAddressVersion(IPVersion.IPV6)
                            .withApplicationGatewayBackendAddressPools(Arrays
                                .asList(new SubResource().withId("fsnkymuctq"), new SubResource().withId("fbebrjcxer")))
                            .withApplicationSecurityGroups(Arrays.asList(new SubResource().withId("tttxfvjrb"),
                                new SubResource().withId("phxepcyvahf"), new SubResource().withId("jky")))
                            .withLoadBalancerBackendAddressPools(
                                Arrays.asList(new SubResource().withId("uujqgidokgjljyo")))
                            .withLoadBalancerInboundNatPools(Arrays.asList(new SubResource().withId("ltbgsncghkj"),
                                new SubResource().withId("zz"), new SubResource().withId("ijhtxf")))),
                    new VirtualMachineScaleSetIPConfiguration().withName("gx")
                        .withProperties(new VirtualMachineScaleSetIPConfigurationProperties()
                            .withSubnet(new ApiEntityReference().withId("xnehmpvec"))
                            .withPrimary(true)
                            .withPublicIPAddressConfiguration(new VirtualMachineScaleSetPublicIPAddressConfiguration()
                                .withName("ebfqkkrbm")
                                .withProperties(new VirtualMachineScaleSetPublicIPAddressConfigurationProperties()
                                    .withIdleTimeoutInMinutes(525812320)
                                    .withDnsSettings(new VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings()
                                        .withDomainNameLabel("iw"))
                                    .withIpTags(Arrays.asList(new VirtualMachineScaleSetIpTag(),
                                        new VirtualMachineScaleSetIpTag(), new VirtualMachineScaleSetIpTag(),
                                        new VirtualMachineScaleSetIpTag()))
                                    .withPublicIPPrefix(new SubResource())
                                    .withPublicIPAddressVersion(IPVersion.IPV6)
                                    .withDeleteOption(DeleteOptions.DETACH))
                                .withSku(new PublicIPAddressSku().withName(PublicIPAddressSkuName.BASIC)
                                    .withTier(PublicIPAddressSkuTier.GLOBAL)))
                            .withPrivateIPAddressVersion(IPVersion.IPV6)
                            .withApplicationGatewayBackendAddressPools(
                                Arrays.asList(new SubResource().withId("zahmgkbrpyydhibn"),
                                    new SubResource().withId("qkpikadrgvtqagnb"),
                                    new SubResource().withId("nhijggmebfsi"), new SubResource().withId("butr")))
                            .withApplicationSecurityGroups(Arrays.asList(new SubResource().withId("azzmhjrunmpxt"),
                                new SubResource().withId("bh")))
                            .withLoadBalancerBackendAddressPools(
                                Arrays.asList(new SubResource().withId("ankxmyskpbhenb"),
                                    new SubResource().withId("cxy"), new SubResource().withId("y")))
                            .withLoadBalancerInboundNatPools(Arrays.asList(new SubResource().withId("yn")))),
                    new VirtualMachineScaleSetIPConfiguration().withName("qidybyx")
                        .withProperties(new VirtualMachineScaleSetIPConfigurationProperties()
                            .withSubnet(new ApiEntityReference().withId("lhaaxdbabp"))
                            .withPrimary(true)
                            .withPublicIPAddressConfiguration(new VirtualMachineScaleSetPublicIPAddressConfiguration()
                                .withName("qlfktsths")
                                .withProperties(new VirtualMachineScaleSetPublicIPAddressConfigurationProperties()
                                    .withIdleTimeoutInMinutes(296949281)
                                    .withDnsSettings(new VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings()
                                        .withDomainNameLabel("nyyazttbtwwrqpue"))
                                    .withIpTags(Arrays.asList(new VirtualMachineScaleSetIpTag(),
                                        new VirtualMachineScaleSetIpTag()))
                                    .withPublicIPPrefix(new SubResource())
                                    .withPublicIPAddressVersion(IPVersion.IPV6)
                                    .withDeleteOption(DeleteOptions.DETACH))
                                .withSku(new PublicIPAddressSku().withName(PublicIPAddressSkuName.STANDARD)
                                    .withTier(PublicIPAddressSkuTier.GLOBAL)))
                            .withPrivateIPAddressVersion(IPVersion.IPV4)
                            .withApplicationGatewayBackendAddressPools(
                                Arrays.asList(new SubResource().withId("ibx"), new SubResource().withId("wbhqwal")))
                            .withApplicationSecurityGroups(
                                Arrays.asList(new SubResource().withId("oxaepd"), new SubResource().withId("jancu"),
                                    new SubResource().withId("hdwbavxbniwdjs"), new SubResource().withId("tsdbpgn")))
                            .withLoadBalancerBackendAddressPools(Arrays.asList(new SubResource().withId("hpzxbzpfzab")))
                            .withLoadBalancerInboundNatPools(Arrays.asList(new SubResource().withId("hxw"))))))
                .withEnableIPForwarding(false)
                .withDeleteOption(DeleteOptions.DELETE)
                .withAuxiliaryMode(NetworkInterfaceAuxiliaryMode.NONE)
                .withAuxiliarySku(NetworkInterfaceAuxiliarySku.NONE);
        model = BinaryData.fromObject(model).toObject(VirtualMachineScaleSetNetworkConfigurationProperties.class);
        Assertions.assertEquals(false, model.primary());
        Assertions.assertEquals(false, model.enableAcceleratedNetworking());
        Assertions.assertEquals(true, model.disableTcpStateTracking());
        Assertions.assertEquals(false, model.enableFpga());
        Assertions.assertEquals("pydptko", model.networkSecurityGroup().id());
        Assertions.assertEquals("uknvudwti", model.dnsSettings().dnsServers().get(0));
        Assertions.assertEquals("bldngkpoc", model.ipConfigurations().get(0).name());
        Assertions.assertEquals("yxoegukgjnp", model.ipConfigurations().get(0).properties().subnet().id());
        Assertions.assertEquals(false, model.ipConfigurations().get(0).properties().primary());
        Assertions.assertEquals("ygevqzntypmrbpiz",
            model.ipConfigurations().get(0).properties().publicIPAddressConfiguration().name());
        Assertions.assertEquals(1616487247,
            model.ipConfigurations()
                .get(0)
                .properties()
                .publicIPAddressConfiguration()
                .properties()
                .idleTimeoutInMinutes());
        Assertions.assertEquals("sdpydnfyhxdeoejz",
            model.ipConfigurations()
                .get(0)
                .properties()
                .publicIPAddressConfiguration()
                .properties()
                .dnsSettings()
                .domainNameLabel());
        Assertions.assertEquals(IPVersion.IPV6,
            model.ipConfigurations()
                .get(0)
                .properties()
                .publicIPAddressConfiguration()
                .properties()
                .publicIPAddressVersion());
        Assertions.assertEquals(DeleteOptions.DELETE,
            model.ipConfigurations().get(0).properties().publicIPAddressConfiguration().properties().deleteOption());
        Assertions.assertEquals(PublicIPAddressSkuName.STANDARD,
            model.ipConfigurations().get(0).properties().publicIPAddressConfiguration().sku().name());
        Assertions.assertEquals(PublicIPAddressSkuTier.GLOBAL,
            model.ipConfigurations().get(0).properties().publicIPAddressConfiguration().sku().tier());
        Assertions.assertEquals(IPVersion.IPV6, model.ipConfigurations().get(0).properties().privateIPAddressVersion());
        Assertions.assertEquals("khaj",
            model.ipConfigurations().get(0).properties().applicationGatewayBackendAddressPools().get(0).id());
        Assertions.assertEquals("eputtmrywnuzoqf",
            model.ipConfigurations().get(0).properties().applicationSecurityGroups().get(0).id());
        Assertions.assertEquals("vwhheunmmqhgyx",
            model.ipConfigurations().get(0).properties().loadBalancerBackendAddressPools().get(0).id());
        Assertions.assertEquals("ocukoklyax",
            model.ipConfigurations().get(0).properties().loadBalancerInboundNatPools().get(0).id());
        Assertions.assertEquals(false, model.enableIPForwarding());
        Assertions.assertEquals(DeleteOptions.DELETE, model.deleteOption());
        Assertions.assertEquals(NetworkInterfaceAuxiliaryMode.NONE, model.auxiliaryMode());
        Assertions.assertEquals(NetworkInterfaceAuxiliarySku.NONE, model.auxiliarySku());
    }
}
