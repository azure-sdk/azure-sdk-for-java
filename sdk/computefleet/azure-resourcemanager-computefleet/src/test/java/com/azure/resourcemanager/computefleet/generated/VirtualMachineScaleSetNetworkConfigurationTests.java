// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.computefleet.generated;

import com.azure.core.management.SubResource;
import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.computefleet.models.ApiEntityReference;
import com.azure.resourcemanager.computefleet.models.DeleteOptions;
import com.azure.resourcemanager.computefleet.models.IPVersion;
import com.azure.resourcemanager.computefleet.models.NetworkInterfaceAuxiliaryMode;
import com.azure.resourcemanager.computefleet.models.NetworkInterfaceAuxiliarySku;
import com.azure.resourcemanager.computefleet.models.PublicIPAddressSku;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetIPConfiguration;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetIPConfigurationProperties;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetNetworkConfiguration;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetNetworkConfigurationDnsSettings;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetNetworkConfigurationProperties;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetPublicIPAddressConfiguration;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetPublicIPAddressConfigurationProperties;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class VirtualMachineScaleSetNetworkConfigurationTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VirtualMachineScaleSetNetworkConfiguration model = BinaryData.fromString(
            "{\"name\":\"vudwtiukbldng\",\"properties\":{\"primary\":true,\"enableAcceleratedNetworking\":true,\"disableTcpStateTracking\":false,\"enableFpga\":true,\"networkSecurityGroup\":{\"id\":\"gukgjnpiucgygevq\"},\"dnsSettings\":{\"dnsServers\":[\"pmr\"]},\"ipConfigurations\":[{\"name\":\"izcdrqjsd\",\"properties\":{\"subnet\":{\"id\":\"fyhxde\"},\"primary\":true,\"publicIPAddressConfiguration\":{\"name\":\"icwifsjtt\",\"properties\":{},\"sku\":{}},\"privateIPAddressVersion\":\"IPv4\",\"applicationGatewayBackendAddressPools\":[{},{},{}],\"applicationSecurityGroups\":[{}],\"loadBalancerBackendAddressPools\":[{},{},{},{}],\"loadBalancerInboundNatPools\":[{},{},{}]}}],\"enableIPForwarding\":false,\"deleteOption\":\"Delete\",\"auxiliaryMode\":\"AcceleratedConnections\",\"auxiliarySku\":\"A2\"}}")
            .toObject(VirtualMachineScaleSetNetworkConfiguration.class);
        Assertions.assertEquals("vudwtiukbldng", model.name());
        Assertions.assertEquals(true, model.properties().primary());
        Assertions.assertEquals(true, model.properties().enableAcceleratedNetworking());
        Assertions.assertEquals(false, model.properties().disableTcpStateTracking());
        Assertions.assertEquals(true, model.properties().enableFpga());
        Assertions.assertEquals("gukgjnpiucgygevq", model.properties().networkSecurityGroup().id());
        Assertions.assertEquals("pmr", model.properties().dnsSettings().dnsServers().get(0));
        Assertions.assertEquals("izcdrqjsd", model.properties().ipConfigurations().get(0).name());
        Assertions.assertEquals("fyhxde", model.properties().ipConfigurations().get(0).properties().subnet().id());
        Assertions.assertEquals(true, model.properties().ipConfigurations().get(0).properties().primary());
        Assertions.assertEquals("icwifsjtt",
            model.properties().ipConfigurations().get(0).properties().publicIPAddressConfiguration().name());
        Assertions.assertEquals(IPVersion.IPV4,
            model.properties().ipConfigurations().get(0).properties().privateIPAddressVersion());
        Assertions.assertEquals(false, model.properties().enableIPForwarding());
        Assertions.assertEquals(DeleteOptions.DELETE, model.properties().deleteOption());
        Assertions.assertEquals(NetworkInterfaceAuxiliaryMode.ACCELERATED_CONNECTIONS,
            model.properties().auxiliaryMode());
        Assertions.assertEquals(NetworkInterfaceAuxiliarySku.A2, model.properties().auxiliarySku());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VirtualMachineScaleSetNetworkConfiguration model = new VirtualMachineScaleSetNetworkConfiguration()
            .withName("vudwtiukbldng")
            .withProperties(new VirtualMachineScaleSetNetworkConfigurationProperties().withPrimary(true)
                .withEnableAcceleratedNetworking(true)
                .withDisableTcpStateTracking(false)
                .withEnableFpga(true)
                .withNetworkSecurityGroup(new SubResource().withId("gukgjnpiucgygevq"))
                .withDnsSettings(
                    new VirtualMachineScaleSetNetworkConfigurationDnsSettings().withDnsServers(Arrays.asList("pmr")))
                .withIpConfigurations(Arrays.asList(new VirtualMachineScaleSetIPConfiguration().withName("izcdrqjsd")
                    .withProperties(new VirtualMachineScaleSetIPConfigurationProperties()
                        .withSubnet(new ApiEntityReference().withId("fyhxde"))
                        .withPrimary(true)
                        .withPublicIPAddressConfiguration(
                            new VirtualMachineScaleSetPublicIPAddressConfiguration().withName("icwifsjtt")
                                .withProperties(new VirtualMachineScaleSetPublicIPAddressConfigurationProperties())
                                .withSku(new PublicIPAddressSku()))
                        .withPrivateIPAddressVersion(IPVersion.IPV4)
                        .withApplicationGatewayBackendAddressPools(
                            Arrays.asList(new SubResource(), new SubResource(), new SubResource()))
                        .withApplicationSecurityGroups(Arrays.asList(new SubResource()))
                        .withLoadBalancerBackendAddressPools(
                            Arrays.asList(new SubResource(), new SubResource(), new SubResource(), new SubResource()))
                        .withLoadBalancerInboundNatPools(
                            Arrays.asList(new SubResource(), new SubResource(), new SubResource())))))
                .withEnableIPForwarding(false)
                .withDeleteOption(DeleteOptions.DELETE)
                .withAuxiliaryMode(NetworkInterfaceAuxiliaryMode.ACCELERATED_CONNECTIONS)
                .withAuxiliarySku(NetworkInterfaceAuxiliarySku.A2));
        model = BinaryData.fromObject(model).toObject(VirtualMachineScaleSetNetworkConfiguration.class);
        Assertions.assertEquals("vudwtiukbldng", model.name());
        Assertions.assertEquals(true, model.properties().primary());
        Assertions.assertEquals(true, model.properties().enableAcceleratedNetworking());
        Assertions.assertEquals(false, model.properties().disableTcpStateTracking());
        Assertions.assertEquals(true, model.properties().enableFpga());
        Assertions.assertEquals("gukgjnpiucgygevq", model.properties().networkSecurityGroup().id());
        Assertions.assertEquals("pmr", model.properties().dnsSettings().dnsServers().get(0));
        Assertions.assertEquals("izcdrqjsd", model.properties().ipConfigurations().get(0).name());
        Assertions.assertEquals("fyhxde", model.properties().ipConfigurations().get(0).properties().subnet().id());
        Assertions.assertEquals(true, model.properties().ipConfigurations().get(0).properties().primary());
        Assertions.assertEquals("icwifsjtt",
            model.properties().ipConfigurations().get(0).properties().publicIPAddressConfiguration().name());
        Assertions.assertEquals(IPVersion.IPV4,
            model.properties().ipConfigurations().get(0).properties().privateIPAddressVersion());
        Assertions.assertEquals(false, model.properties().enableIPForwarding());
        Assertions.assertEquals(DeleteOptions.DELETE, model.properties().deleteOption());
        Assertions.assertEquals(NetworkInterfaceAuxiliaryMode.ACCELERATED_CONNECTIONS,
            model.properties().auxiliaryMode());
        Assertions.assertEquals(NetworkInterfaceAuxiliarySku.A2, model.properties().auxiliarySku());
    }
}
