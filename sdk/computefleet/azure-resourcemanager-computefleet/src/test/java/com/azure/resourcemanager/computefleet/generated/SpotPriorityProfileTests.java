// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.computefleet.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.computefleet.models.EvictionPolicy;
import com.azure.resourcemanager.computefleet.models.SpotAllocationStrategy;
import com.azure.resourcemanager.computefleet.models.SpotPriorityProfile;
import org.junit.jupiter.api.Assertions;

public final class SpotPriorityProfileTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SpotPriorityProfile model = BinaryData.fromString(
            "{\"capacity\":1173503063,\"minCapacity\":863181749,\"maxPricePerVM\":30.00180250560771,\"evictionPolicy\":\"Deallocate\",\"allocationStrategy\":\"CapacityOptimized\",\"maintain\":false}")
            .toObject(SpotPriorityProfile.class);
        Assertions.assertEquals(1173503063, model.capacity());
        Assertions.assertEquals(863181749, model.minCapacity());
        Assertions.assertEquals(30.00180250560771D, model.maxPricePerVM());
        Assertions.assertEquals(EvictionPolicy.DEALLOCATE, model.evictionPolicy());
        Assertions.assertEquals(SpotAllocationStrategy.CAPACITY_OPTIMIZED, model.allocationStrategy());
        Assertions.assertEquals(false, model.maintain());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SpotPriorityProfile model = new SpotPriorityProfile().withCapacity(1173503063)
            .withMinCapacity(863181749)
            .withMaxPricePerVM(30.00180250560771D)
            .withEvictionPolicy(EvictionPolicy.DEALLOCATE)
            .withAllocationStrategy(SpotAllocationStrategy.CAPACITY_OPTIMIZED)
            .withMaintain(false);
        model = BinaryData.fromObject(model).toObject(SpotPriorityProfile.class);
        Assertions.assertEquals(1173503063, model.capacity());
        Assertions.assertEquals(863181749, model.minCapacity());
        Assertions.assertEquals(30.00180250560771D, model.maxPricePerVM());
        Assertions.assertEquals(EvictionPolicy.DEALLOCATE, model.evictionPolicy());
        Assertions.assertEquals(SpotAllocationStrategy.CAPACITY_OPTIMIZED, model.allocationStrategy());
        Assertions.assertEquals(false, model.maintain());
    }
}
