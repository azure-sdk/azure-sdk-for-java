// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.computefleet.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.computefleet.models.EvictionPolicy;
import com.azure.resourcemanager.computefleet.models.SpotAllocationStrategy;
import com.azure.resourcemanager.computefleet.models.SpotPriorityProfile;
import org.junit.jupiter.api.Assertions;

public final class SpotPriorityProfileTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SpotPriorityProfile model = BinaryData.fromString(
            "{\"capacity\":186394728,\"minCapacity\":1665801665,\"maxPricePerVM\":81.97977027741722,\"evictionPolicy\":\"Deallocate\",\"allocationStrategy\":\"CapacityOptimized\",\"maintain\":false}")
            .toObject(SpotPriorityProfile.class);
        Assertions.assertEquals(186394728, model.capacity());
        Assertions.assertEquals(1665801665, model.minCapacity());
        Assertions.assertEquals(81.97977027741722D, model.maxPricePerVM());
        Assertions.assertEquals(EvictionPolicy.DEALLOCATE, model.evictionPolicy());
        Assertions.assertEquals(SpotAllocationStrategy.CAPACITY_OPTIMIZED, model.allocationStrategy());
        Assertions.assertEquals(false, model.maintain());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SpotPriorityProfile model = new SpotPriorityProfile().withCapacity(186394728)
            .withMinCapacity(1665801665)
            .withMaxPricePerVM(81.97977027741722D)
            .withEvictionPolicy(EvictionPolicy.DEALLOCATE)
            .withAllocationStrategy(SpotAllocationStrategy.CAPACITY_OPTIMIZED)
            .withMaintain(false);
        model = BinaryData.fromObject(model).toObject(SpotPriorityProfile.class);
        Assertions.assertEquals(186394728, model.capacity());
        Assertions.assertEquals(1665801665, model.minCapacity());
        Assertions.assertEquals(81.97977027741722D, model.maxPricePerVM());
        Assertions.assertEquals(EvictionPolicy.DEALLOCATE, model.evictionPolicy());
        Assertions.assertEquals(SpotAllocationStrategy.CAPACITY_OPTIMIZED, model.allocationStrategy());
        Assertions.assertEquals(false, model.maintain());
    }
}
