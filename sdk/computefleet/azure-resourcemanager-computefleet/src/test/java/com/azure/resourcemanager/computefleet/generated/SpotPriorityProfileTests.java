// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.computefleet.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.computefleet.models.EvictionPolicy;
import com.azure.resourcemanager.computefleet.models.SpotAllocationStrategy;
import com.azure.resourcemanager.computefleet.models.SpotPriorityProfile;
import org.junit.jupiter.api.Assertions;

public final class SpotPriorityProfileTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SpotPriorityProfile model = BinaryData.fromString(
            "{\"capacity\":962942512,\"minCapacity\":1094512246,\"maxPricePerVM\":89.07041488190907,\"evictionPolicy\":\"Delete\",\"allocationStrategy\":\"CapacityOptimized\",\"maintain\":true}")
            .toObject(SpotPriorityProfile.class);
        Assertions.assertEquals(962942512, model.capacity());
        Assertions.assertEquals(1094512246, model.minCapacity());
        Assertions.assertEquals(89.07041488190907D, model.maxPricePerVM());
        Assertions.assertEquals(EvictionPolicy.DELETE, model.evictionPolicy());
        Assertions.assertEquals(SpotAllocationStrategy.CAPACITY_OPTIMIZED, model.allocationStrategy());
        Assertions.assertEquals(true, model.maintain());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SpotPriorityProfile model = new SpotPriorityProfile().withCapacity(962942512)
            .withMinCapacity(1094512246)
            .withMaxPricePerVM(89.07041488190907D)
            .withEvictionPolicy(EvictionPolicy.DELETE)
            .withAllocationStrategy(SpotAllocationStrategy.CAPACITY_OPTIMIZED)
            .withMaintain(true);
        model = BinaryData.fromObject(model).toObject(SpotPriorityProfile.class);
        Assertions.assertEquals(962942512, model.capacity());
        Assertions.assertEquals(1094512246, model.minCapacity());
        Assertions.assertEquals(89.07041488190907D, model.maxPricePerVM());
        Assertions.assertEquals(EvictionPolicy.DELETE, model.evictionPolicy());
        Assertions.assertEquals(SpotAllocationStrategy.CAPACITY_OPTIMIZED, model.allocationStrategy());
        Assertions.assertEquals(true, model.maintain());
    }
}
