// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.computefleet.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.computefleet.models.CachingTypes;
import com.azure.resourcemanager.computefleet.models.DiffDiskOptions;
import com.azure.resourcemanager.computefleet.models.DiffDiskPlacement;
import com.azure.resourcemanager.computefleet.models.DiffDiskSettings;
import com.azure.resourcemanager.computefleet.models.DiskCreateOptionTypes;
import com.azure.resourcemanager.computefleet.models.DiskDeleteOptionTypes;
import com.azure.resourcemanager.computefleet.models.DiskEncryptionSetParameters;
import com.azure.resourcemanager.computefleet.models.OperatingSystemTypes;
import com.azure.resourcemanager.computefleet.models.SecurityEncryptionTypes;
import com.azure.resourcemanager.computefleet.models.StorageAccountTypes;
import com.azure.resourcemanager.computefleet.models.VirtualHardDisk;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetManagedDiskParameters;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetOSDisk;
import com.azure.resourcemanager.computefleet.models.VMDiskSecurityProfile;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class VirtualMachineScaleSetOSDiskTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VirtualMachineScaleSetOSDisk model = BinaryData.fromString(
            "{\"name\":\"tymw\",\"caching\":\"ReadOnly\",\"writeAcceleratorEnabled\":true,\"createOption\":\"Attach\",\"diffDiskSettings\":{\"option\":\"Local\",\"placement\":\"NvmeDisk\"},\"diskSizeGB\":270329607,\"osType\":\"Linux\",\"image\":{\"uri\":\"pvkmijcmmxdcuf\"},\"vhdContainers\":[\"rpymzidnsez\"],\"managedDisk\":{\"storageAccountType\":\"Premium_ZRS\",\"diskEncryptionSet\":{\"id\":\"gfycc\"},\"securityProfile\":{\"securityEncryptionType\":\"VMGuestStateOnly\",\"diskEncryptionSet\":{\"id\":\"wzjeiach\"}}},\"deleteOption\":\"Delete\"}")
            .toObject(VirtualMachineScaleSetOSDisk.class);
        Assertions.assertEquals("tymw", model.name());
        Assertions.assertEquals(CachingTypes.READ_ONLY, model.caching());
        Assertions.assertEquals(true, model.writeAcceleratorEnabled());
        Assertions.assertEquals(DiskCreateOptionTypes.ATTACH, model.createOption());
        Assertions.assertEquals(DiffDiskOptions.LOCAL, model.diffDiskSettings().option());
        Assertions.assertEquals(DiffDiskPlacement.NVME_DISK, model.diffDiskSettings().placement());
        Assertions.assertEquals(270329607, model.diskSizeGB());
        Assertions.assertEquals(OperatingSystemTypes.LINUX, model.osType());
        Assertions.assertEquals("pvkmijcmmxdcuf", model.image().uri());
        Assertions.assertEquals("rpymzidnsez", model.vhdContainers().get(0));
        Assertions.assertEquals(StorageAccountTypes.PREMIUM_ZRS, model.managedDisk().storageAccountType());
        Assertions.assertEquals("gfycc", model.managedDisk().diskEncryptionSet().id());
        Assertions.assertEquals(SecurityEncryptionTypes.VMGUEST_STATE_ONLY,
            model.managedDisk().securityProfile().securityEncryptionType());
        Assertions.assertEquals("wzjeiach", model.managedDisk().securityProfile().diskEncryptionSet().id());
        Assertions.assertEquals(DiskDeleteOptionTypes.DELETE, model.deleteOption());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VirtualMachineScaleSetOSDisk model
            = new VirtualMachineScaleSetOSDisk().withName("tymw")
                .withCaching(CachingTypes.READ_ONLY)
                .withWriteAcceleratorEnabled(true)
                .withCreateOption(DiskCreateOptionTypes.ATTACH)
                .withDiffDiskSettings(
                    new DiffDiskSettings().withOption(DiffDiskOptions.LOCAL).withPlacement(DiffDiskPlacement.NVME_DISK))
                .withDiskSizeGB(270329607)
                .withOsType(OperatingSystemTypes.LINUX)
                .withImage(new VirtualHardDisk().withUri("pvkmijcmmxdcuf"))
                .withVhdContainers(Arrays.asList("rpymzidnsez"))
                .withManagedDisk(new VirtualMachineScaleSetManagedDiskParameters()
                    .withStorageAccountType(StorageAccountTypes.PREMIUM_ZRS)
                    .withDiskEncryptionSet(new DiskEncryptionSetParameters().withId("gfycc"))
                    .withSecurityProfile(new VMDiskSecurityProfile()
                        .withSecurityEncryptionType(SecurityEncryptionTypes.VMGUEST_STATE_ONLY)
                        .withDiskEncryptionSet(new DiskEncryptionSetParameters().withId("wzjeiach"))))
                .withDeleteOption(DiskDeleteOptionTypes.DELETE);
        model = BinaryData.fromObject(model).toObject(VirtualMachineScaleSetOSDisk.class);
        Assertions.assertEquals("tymw", model.name());
        Assertions.assertEquals(CachingTypes.READ_ONLY, model.caching());
        Assertions.assertEquals(true, model.writeAcceleratorEnabled());
        Assertions.assertEquals(DiskCreateOptionTypes.ATTACH, model.createOption());
        Assertions.assertEquals(DiffDiskOptions.LOCAL, model.diffDiskSettings().option());
        Assertions.assertEquals(DiffDiskPlacement.NVME_DISK, model.diffDiskSettings().placement());
        Assertions.assertEquals(270329607, model.diskSizeGB());
        Assertions.assertEquals(OperatingSystemTypes.LINUX, model.osType());
        Assertions.assertEquals("pvkmijcmmxdcuf", model.image().uri());
        Assertions.assertEquals("rpymzidnsez", model.vhdContainers().get(0));
        Assertions.assertEquals(StorageAccountTypes.PREMIUM_ZRS, model.managedDisk().storageAccountType());
        Assertions.assertEquals("gfycc", model.managedDisk().diskEncryptionSet().id());
        Assertions.assertEquals(SecurityEncryptionTypes.VMGUEST_STATE_ONLY,
            model.managedDisk().securityProfile().securityEncryptionType());
        Assertions.assertEquals("wzjeiach", model.managedDisk().securityProfile().diskEncryptionSet().id());
        Assertions.assertEquals(DiskDeleteOptionTypes.DELETE, model.deleteOption());
    }
}
