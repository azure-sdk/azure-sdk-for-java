// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.computefleet.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.computefleet.models.CachingTypes;
import com.azure.resourcemanager.computefleet.models.DiffDiskOptions;
import com.azure.resourcemanager.computefleet.models.DiffDiskPlacement;
import com.azure.resourcemanager.computefleet.models.DiffDiskSettings;
import com.azure.resourcemanager.computefleet.models.DiskCreateOptionTypes;
import com.azure.resourcemanager.computefleet.models.DiskDeleteOptionTypes;
import com.azure.resourcemanager.computefleet.models.DiskEncryptionSetParameters;
import com.azure.resourcemanager.computefleet.models.OperatingSystemTypes;
import com.azure.resourcemanager.computefleet.models.SecurityEncryptionTypes;
import com.azure.resourcemanager.computefleet.models.StorageAccountTypes;
import com.azure.resourcemanager.computefleet.models.VMDiskSecurityProfile;
import com.azure.resourcemanager.computefleet.models.VirtualHardDisk;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetManagedDiskParameters;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetOSDisk;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class VirtualMachineScaleSetOSDiskTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VirtualMachineScaleSetOSDisk model = BinaryData.fromString(
            "{\"name\":\"x\",\"caching\":\"ReadOnly\",\"writeAcceleratorEnabled\":true,\"createOption\":\"Attach\",\"diffDiskSettings\":{\"option\":\"Local\",\"placement\":\"CacheDisk\"},\"diskSizeGB\":847580815,\"osType\":\"Linux\",\"image\":{\"uri\":\"jfeallnwsub\"},\"vhdContainers\":[\"jampmngnzscxaqw\",\"ochcbonqvpkvl\"],\"managedDisk\":{\"storageAccountType\":\"Premium_LRS\",\"diskEncryptionSet\":{\"id\":\"seiphe\"},\"securityProfile\":{\"securityEncryptionType\":\"NonPersistedTPM\",\"diskEncryptionSet\":{\"id\":\"yyien\"}}},\"deleteOption\":\"Detach\"}")
            .toObject(VirtualMachineScaleSetOSDisk.class);
        Assertions.assertEquals("x", model.name());
        Assertions.assertEquals(CachingTypes.READ_ONLY, model.caching());
        Assertions.assertEquals(true, model.writeAcceleratorEnabled());
        Assertions.assertEquals(DiskCreateOptionTypes.ATTACH, model.createOption());
        Assertions.assertEquals(DiffDiskOptions.LOCAL, model.diffDiskSettings().option());
        Assertions.assertEquals(DiffDiskPlacement.CACHE_DISK, model.diffDiskSettings().placement());
        Assertions.assertEquals(847580815, model.diskSizeGB());
        Assertions.assertEquals(OperatingSystemTypes.LINUX, model.osType());
        Assertions.assertEquals("jfeallnwsub", model.image().uri());
        Assertions.assertEquals("jampmngnzscxaqw", model.vhdContainers().get(0));
        Assertions.assertEquals(StorageAccountTypes.PREMIUM_LRS, model.managedDisk().storageAccountType());
        Assertions.assertEquals("seiphe", model.managedDisk().diskEncryptionSet().id());
        Assertions.assertEquals(SecurityEncryptionTypes.NON_PERSISTED_TPM,
            model.managedDisk().securityProfile().securityEncryptionType());
        Assertions.assertEquals("yyien", model.managedDisk().securityProfile().diskEncryptionSet().id());
        Assertions.assertEquals(DiskDeleteOptionTypes.DETACH, model.deleteOption());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VirtualMachineScaleSetOSDisk model = new VirtualMachineScaleSetOSDisk().withName("x")
            .withCaching(CachingTypes.READ_ONLY)
            .withWriteAcceleratorEnabled(true)
            .withCreateOption(DiskCreateOptionTypes.ATTACH)
            .withDiffDiskSettings(
                new DiffDiskSettings().withOption(DiffDiskOptions.LOCAL).withPlacement(DiffDiskPlacement.CACHE_DISK))
            .withDiskSizeGB(847580815)
            .withOsType(OperatingSystemTypes.LINUX)
            .withImage(new VirtualHardDisk().withUri("jfeallnwsub"))
            .withVhdContainers(Arrays.asList("jampmngnzscxaqw", "ochcbonqvpkvl"))
            .withManagedDisk(
                new VirtualMachineScaleSetManagedDiskParameters()
                    .withStorageAccountType(StorageAccountTypes.PREMIUM_LRS)
                    .withDiskEncryptionSet(new DiskEncryptionSetParameters().withId("seiphe"))
                    .withSecurityProfile(new VMDiskSecurityProfile()
                        .withSecurityEncryptionType(SecurityEncryptionTypes.NON_PERSISTED_TPM)
                        .withDiskEncryptionSet(new DiskEncryptionSetParameters().withId("yyien"))))
            .withDeleteOption(DiskDeleteOptionTypes.DETACH);
        model = BinaryData.fromObject(model).toObject(VirtualMachineScaleSetOSDisk.class);
        Assertions.assertEquals("x", model.name());
        Assertions.assertEquals(CachingTypes.READ_ONLY, model.caching());
        Assertions.assertEquals(true, model.writeAcceleratorEnabled());
        Assertions.assertEquals(DiskCreateOptionTypes.ATTACH, model.createOption());
        Assertions.assertEquals(DiffDiskOptions.LOCAL, model.diffDiskSettings().option());
        Assertions.assertEquals(DiffDiskPlacement.CACHE_DISK, model.diffDiskSettings().placement());
        Assertions.assertEquals(847580815, model.diskSizeGB());
        Assertions.assertEquals(OperatingSystemTypes.LINUX, model.osType());
        Assertions.assertEquals("jfeallnwsub", model.image().uri());
        Assertions.assertEquals("jampmngnzscxaqw", model.vhdContainers().get(0));
        Assertions.assertEquals(StorageAccountTypes.PREMIUM_LRS, model.managedDisk().storageAccountType());
        Assertions.assertEquals("seiphe", model.managedDisk().diskEncryptionSet().id());
        Assertions.assertEquals(SecurityEncryptionTypes.NON_PERSISTED_TPM,
            model.managedDisk().securityProfile().securityEncryptionType());
        Assertions.assertEquals("yyien", model.managedDisk().securityProfile().diskEncryptionSet().id());
        Assertions.assertEquals(DiskDeleteOptionTypes.DETACH, model.deleteOption());
    }
}
