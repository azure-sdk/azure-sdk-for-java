// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.computefleet.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.computefleet.models.CachingTypes;
import com.azure.resourcemanager.computefleet.models.DiffDiskOptions;
import com.azure.resourcemanager.computefleet.models.DiffDiskPlacement;
import com.azure.resourcemanager.computefleet.models.DiffDiskSettings;
import com.azure.resourcemanager.computefleet.models.DiskCreateOptionTypes;
import com.azure.resourcemanager.computefleet.models.DiskDeleteOptionTypes;
import com.azure.resourcemanager.computefleet.models.DiskEncryptionSetParameters;
import com.azure.resourcemanager.computefleet.models.OperatingSystemTypes;
import com.azure.resourcemanager.computefleet.models.SecurityEncryptionTypes;
import com.azure.resourcemanager.computefleet.models.StorageAccountTypes;
import com.azure.resourcemanager.computefleet.models.VMDiskSecurityProfile;
import com.azure.resourcemanager.computefleet.models.VirtualHardDisk;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetManagedDiskParameters;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetOSDisk;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class VirtualMachineScaleSetOSDiskTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VirtualMachineScaleSetOSDisk model = BinaryData.fromString(
            "{\"name\":\"cbonqvpk\",\"caching\":\"ReadOnly\",\"writeAcceleratorEnabled\":true,\"createOption\":\"FromImage\",\"diffDiskSettings\":{\"option\":\"Local\",\"placement\":\"CacheDisk\"},\"diskSizeGB\":1902616098,\"osType\":\"Windows\",\"image\":{\"uri\":\"okeyyienj\"},\"vhdContainers\":[\"wtgrhpdjpj\",\"masxazjpqyegu\",\"lhbxxhejjzzvdud\"],\"managedDisk\":{\"storageAccountType\":\"Premium_ZRS\",\"diskEncryptionSet\":{\"id\":\"hotwmcynpwlbjnp\"},\"securityProfile\":{\"securityEncryptionType\":\"NonPersistedTPM\",\"diskEncryptionSet\":{\"id\":\"dehxnltyfsoppu\"}}},\"deleteOption\":\"Delete\"}")
            .toObject(VirtualMachineScaleSetOSDisk.class);
        Assertions.assertEquals("cbonqvpk", model.name());
        Assertions.assertEquals(CachingTypes.READ_ONLY, model.caching());
        Assertions.assertEquals(true, model.writeAcceleratorEnabled());
        Assertions.assertEquals(DiskCreateOptionTypes.FROM_IMAGE, model.createOption());
        Assertions.assertEquals(DiffDiskOptions.LOCAL, model.diffDiskSettings().option());
        Assertions.assertEquals(DiffDiskPlacement.CACHE_DISK, model.diffDiskSettings().placement());
        Assertions.assertEquals(1902616098, model.diskSizeGB());
        Assertions.assertEquals(OperatingSystemTypes.WINDOWS, model.osType());
        Assertions.assertEquals("okeyyienj", model.image().uri());
        Assertions.assertEquals("wtgrhpdjpj", model.vhdContainers().get(0));
        Assertions.assertEquals(StorageAccountTypes.PREMIUM_ZRS, model.managedDisk().storageAccountType());
        Assertions.assertEquals("hotwmcynpwlbjnp", model.managedDisk().diskEncryptionSet().id());
        Assertions.assertEquals(SecurityEncryptionTypes.NON_PERSISTED_TPM,
            model.managedDisk().securityProfile().securityEncryptionType());
        Assertions.assertEquals("dehxnltyfsoppu", model.managedDisk().securityProfile().diskEncryptionSet().id());
        Assertions.assertEquals(DiskDeleteOptionTypes.DELETE, model.deleteOption());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VirtualMachineScaleSetOSDisk model = new VirtualMachineScaleSetOSDisk().withName("cbonqvpk")
            .withCaching(CachingTypes.READ_ONLY)
            .withWriteAcceleratorEnabled(true)
            .withCreateOption(DiskCreateOptionTypes.FROM_IMAGE)
            .withDiffDiskSettings(
                new DiffDiskSettings().withOption(DiffDiskOptions.LOCAL).withPlacement(DiffDiskPlacement.CACHE_DISK))
            .withDiskSizeGB(1902616098)
            .withOsType(OperatingSystemTypes.WINDOWS)
            .withImage(new VirtualHardDisk().withUri("okeyyienj"))
            .withVhdContainers(Arrays.asList("wtgrhpdjpj", "masxazjpqyegu", "lhbxxhejjzzvdud"))
            .withManagedDisk(
                new VirtualMachineScaleSetManagedDiskParameters()
                    .withStorageAccountType(StorageAccountTypes.PREMIUM_ZRS)
                    .withDiskEncryptionSet(new DiskEncryptionSetParameters().withId("hotwmcynpwlbjnp"))
                    .withSecurityProfile(new VMDiskSecurityProfile()
                        .withSecurityEncryptionType(SecurityEncryptionTypes.NON_PERSISTED_TPM)
                        .withDiskEncryptionSet(new DiskEncryptionSetParameters().withId("dehxnltyfsoppu"))))
            .withDeleteOption(DiskDeleteOptionTypes.DELETE);
        model = BinaryData.fromObject(model).toObject(VirtualMachineScaleSetOSDisk.class);
        Assertions.assertEquals("cbonqvpk", model.name());
        Assertions.assertEquals(CachingTypes.READ_ONLY, model.caching());
        Assertions.assertEquals(true, model.writeAcceleratorEnabled());
        Assertions.assertEquals(DiskCreateOptionTypes.FROM_IMAGE, model.createOption());
        Assertions.assertEquals(DiffDiskOptions.LOCAL, model.diffDiskSettings().option());
        Assertions.assertEquals(DiffDiskPlacement.CACHE_DISK, model.diffDiskSettings().placement());
        Assertions.assertEquals(1902616098, model.diskSizeGB());
        Assertions.assertEquals(OperatingSystemTypes.WINDOWS, model.osType());
        Assertions.assertEquals("okeyyienj", model.image().uri());
        Assertions.assertEquals("wtgrhpdjpj", model.vhdContainers().get(0));
        Assertions.assertEquals(StorageAccountTypes.PREMIUM_ZRS, model.managedDisk().storageAccountType());
        Assertions.assertEquals("hotwmcynpwlbjnp", model.managedDisk().diskEncryptionSet().id());
        Assertions.assertEquals(SecurityEncryptionTypes.NON_PERSISTED_TPM,
            model.managedDisk().securityProfile().securityEncryptionType());
        Assertions.assertEquals("dehxnltyfsoppu", model.managedDisk().securityProfile().diskEncryptionSet().id());
        Assertions.assertEquals(DiskDeleteOptionTypes.DELETE, model.deleteOption());
    }
}
