// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.computefleet.generated;

import com.azure.core.management.SubResource;
import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.computefleet.models.ApiEntityReference;
import com.azure.resourcemanager.computefleet.models.DeleteOptions;
import com.azure.resourcemanager.computefleet.models.DomainNameLabelScopeTypes;
import com.azure.resourcemanager.computefleet.models.IPVersion;
import com.azure.resourcemanager.computefleet.models.PublicIPAddressSku;
import com.azure.resourcemanager.computefleet.models.PublicIPAddressSkuName;
import com.azure.resourcemanager.computefleet.models.PublicIPAddressSkuTier;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetIPConfigurationProperties;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetIpTag;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetPublicIPAddressConfiguration;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetPublicIPAddressConfigurationProperties;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class VirtualMachineScaleSetIPConfigurationPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VirtualMachineScaleSetIPConfigurationProperties model = BinaryData.fromString(
            "{\"subnet\":{\"id\":\"w\"},\"primary\":true,\"publicIPAddressConfiguration\":{\"name\":\"gicjooxdjeb\",\"properties\":{\"idleTimeoutInMinutes\":741000017,\"dnsSettings\":{\"domainNameLabel\":\"wfvovbv\",\"domainNameLabelScope\":\"SubscriptionReuse\"},\"ipTags\":[{\"ipTagType\":\"vyhzceuojgjrwj\",\"tag\":\"iotwmcdytdxwit\"},{\"ipTagType\":\"rjaw\",\"tag\":\"wgxhn\"},{\"ipTagType\":\"kxfbkpycgklwndn\",\"tag\":\"dauwhvylwzbtd\"}],\"publicIPPrefix\":{\"id\":\"jznb\"},\"publicIPAddressVersion\":\"IPv4\",\"deleteOption\":\"Delete\"},\"sku\":{\"name\":\"Basic\",\"tier\":\"Global\"}},\"privateIPAddressVersion\":\"IPv4\",\"applicationGatewayBackendAddressPools\":[{\"id\":\"lupj\"},{\"id\":\"hfxobbcswsrtj\"},{\"id\":\"plrbpbewtghf\"}],\"applicationSecurityGroups\":[{\"id\":\"gw\"},{\"id\":\"vlvqhjkbegi\"},{\"id\":\"nmxiebwwaloayqc\"}],\"loadBalancerBackendAddressPools\":[{\"id\":\"zjuzgwyz\"},{\"id\":\"txon\"}],\"loadBalancerInboundNatPools\":[{\"id\":\"avjcbpwx\"}]}")
            .toObject(VirtualMachineScaleSetIPConfigurationProperties.class);
        Assertions.assertEquals("w", model.subnet().id());
        Assertions.assertEquals(true, model.primary());
        Assertions.assertEquals("gicjooxdjeb", model.publicIPAddressConfiguration().name());
        Assertions.assertEquals(741000017, model.publicIPAddressConfiguration().properties().idleTimeoutInMinutes());
        Assertions.assertEquals("wfvovbv",
            model.publicIPAddressConfiguration().properties().dnsSettings().domainNameLabel());
        Assertions.assertEquals(DomainNameLabelScopeTypes.SUBSCRIPTION_REUSE,
            model.publicIPAddressConfiguration().properties().dnsSettings().domainNameLabelScope());
        Assertions.assertEquals("vyhzceuojgjrwj",
            model.publicIPAddressConfiguration().properties().ipTags().get(0).ipTagType());
        Assertions.assertEquals("iotwmcdytdxwit",
            model.publicIPAddressConfiguration().properties().ipTags().get(0).tag());
        Assertions.assertEquals("jznb", model.publicIPAddressConfiguration().properties().publicIPPrefix().id());
        Assertions.assertEquals(IPVersion.IPV4,
            model.publicIPAddressConfiguration().properties().publicIPAddressVersion());
        Assertions.assertEquals(DeleteOptions.DELETE, model.publicIPAddressConfiguration().properties().deleteOption());
        Assertions.assertEquals(PublicIPAddressSkuName.BASIC, model.publicIPAddressConfiguration().sku().name());
        Assertions.assertEquals(PublicIPAddressSkuTier.GLOBAL, model.publicIPAddressConfiguration().sku().tier());
        Assertions.assertEquals(IPVersion.IPV4, model.privateIPAddressVersion());
        Assertions.assertEquals("lupj", model.applicationGatewayBackendAddressPools().get(0).id());
        Assertions.assertEquals("gw", model.applicationSecurityGroups().get(0).id());
        Assertions.assertEquals("zjuzgwyz", model.loadBalancerBackendAddressPools().get(0).id());
        Assertions.assertEquals("avjcbpwx", model.loadBalancerInboundNatPools().get(0).id());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VirtualMachineScaleSetIPConfigurationProperties model = new VirtualMachineScaleSetIPConfigurationProperties()
            .withSubnet(new ApiEntityReference().withId("w"))
            .withPrimary(true)
            .withPublicIPAddressConfiguration(new VirtualMachineScaleSetPublicIPAddressConfiguration()
                .withName("gicjooxdjeb")
                .withProperties(new VirtualMachineScaleSetPublicIPAddressConfigurationProperties()
                    .withIdleTimeoutInMinutes(741000017)
                    .withDnsSettings(new VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings()
                        .withDomainNameLabel("wfvovbv")
                        .withDomainNameLabelScope(DomainNameLabelScopeTypes.SUBSCRIPTION_REUSE))
                    .withIpTags(Arrays.asList(
                        new VirtualMachineScaleSetIpTag().withIpTagType("vyhzceuojgjrwj").withTag("iotwmcdytdxwit"),
                        new VirtualMachineScaleSetIpTag().withIpTagType("rjaw").withTag("wgxhn"),
                        new VirtualMachineScaleSetIpTag().withIpTagType("kxfbkpycgklwndn").withTag("dauwhvylwzbtd")))
                    .withPublicIPPrefix(new SubResource().withId("jznb"))
                    .withPublicIPAddressVersion(IPVersion.IPV4)
                    .withDeleteOption(DeleteOptions.DELETE))
                .withSku(new PublicIPAddressSku().withName(PublicIPAddressSkuName.BASIC)
                    .withTier(PublicIPAddressSkuTier.GLOBAL)))
            .withPrivateIPAddressVersion(IPVersion.IPV4)
            .withApplicationGatewayBackendAddressPools(Arrays.asList(new SubResource().withId("lupj"),
                new SubResource().withId("hfxobbcswsrtj"), new SubResource().withId("plrbpbewtghf")))
            .withApplicationSecurityGroups(Arrays.asList(new SubResource().withId("gw"),
                new SubResource().withId("vlvqhjkbegi"), new SubResource().withId("nmxiebwwaloayqc")))
            .withLoadBalancerBackendAddressPools(
                Arrays.asList(new SubResource().withId("zjuzgwyz"), new SubResource().withId("txon")))
            .withLoadBalancerInboundNatPools(Arrays.asList(new SubResource().withId("avjcbpwx")));
        model = BinaryData.fromObject(model).toObject(VirtualMachineScaleSetIPConfigurationProperties.class);
        Assertions.assertEquals("w", model.subnet().id());
        Assertions.assertEquals(true, model.primary());
        Assertions.assertEquals("gicjooxdjeb", model.publicIPAddressConfiguration().name());
        Assertions.assertEquals(741000017, model.publicIPAddressConfiguration().properties().idleTimeoutInMinutes());
        Assertions.assertEquals("wfvovbv",
            model.publicIPAddressConfiguration().properties().dnsSettings().domainNameLabel());
        Assertions.assertEquals(DomainNameLabelScopeTypes.SUBSCRIPTION_REUSE,
            model.publicIPAddressConfiguration().properties().dnsSettings().domainNameLabelScope());
        Assertions.assertEquals("vyhzceuojgjrwj",
            model.publicIPAddressConfiguration().properties().ipTags().get(0).ipTagType());
        Assertions.assertEquals("iotwmcdytdxwit",
            model.publicIPAddressConfiguration().properties().ipTags().get(0).tag());
        Assertions.assertEquals("jznb", model.publicIPAddressConfiguration().properties().publicIPPrefix().id());
        Assertions.assertEquals(IPVersion.IPV4,
            model.publicIPAddressConfiguration().properties().publicIPAddressVersion());
        Assertions.assertEquals(DeleteOptions.DELETE, model.publicIPAddressConfiguration().properties().deleteOption());
        Assertions.assertEquals(PublicIPAddressSkuName.BASIC, model.publicIPAddressConfiguration().sku().name());
        Assertions.assertEquals(PublicIPAddressSkuTier.GLOBAL, model.publicIPAddressConfiguration().sku().tier());
        Assertions.assertEquals(IPVersion.IPV4, model.privateIPAddressVersion());
        Assertions.assertEquals("lupj", model.applicationGatewayBackendAddressPools().get(0).id());
        Assertions.assertEquals("gw", model.applicationSecurityGroups().get(0).id());
        Assertions.assertEquals("zjuzgwyz", model.loadBalancerBackendAddressPools().get(0).id());
        Assertions.assertEquals("avjcbpwx", model.loadBalancerInboundNatPools().get(0).id());
    }
}
