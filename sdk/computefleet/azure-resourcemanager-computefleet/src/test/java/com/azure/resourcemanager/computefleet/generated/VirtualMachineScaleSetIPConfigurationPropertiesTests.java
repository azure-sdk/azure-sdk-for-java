// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.computefleet.generated;

import com.azure.core.management.SubResource;
import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.computefleet.models.ApiEntityReference;
import com.azure.resourcemanager.computefleet.models.DeleteOptions;
import com.azure.resourcemanager.computefleet.models.DomainNameLabelScopeTypes;
import com.azure.resourcemanager.computefleet.models.IPVersion;
import com.azure.resourcemanager.computefleet.models.PublicIPAddressSku;
import com.azure.resourcemanager.computefleet.models.PublicIPAddressSkuName;
import com.azure.resourcemanager.computefleet.models.PublicIPAddressSkuTier;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetIPConfigurationProperties;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetIpTag;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetPublicIPAddressConfiguration;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetPublicIPAddressConfigurationProperties;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class VirtualMachineScaleSetIPConfigurationPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VirtualMachineScaleSetIPConfigurationProperties model = BinaryData.fromString(
            "{\"subnet\":{\"id\":\"oqftiyqzrnkcq\"},\"primary\":true,\"publicIPAddressConfiguration\":{\"name\":\"whzlsicohoq\",\"properties\":{\"idleTimeoutInMinutes\":1797950253,\"dnsSettings\":{\"domainNameLabel\":\"ryavwhheunmmqh\",\"domainNameLabelScope\":\"TenantReuse\"},\"ipTags\":[{\"ipTagType\":\"noc\",\"tag\":\"oklyaxuconuq\"},{\"ipTagType\":\"fkbey\",\"tag\":\"wrmjmwvvjektc\"}],\"publicIPPrefix\":{\"id\":\"nhwlrsffrzpwvl\"},\"publicIPAddressVersion\":\"IPv4\",\"deleteOption\":\"Detach\"},\"sku\":{\"name\":\"Standard\",\"tier\":\"Global\"}},\"privateIPAddressVersion\":\"IPv4\",\"applicationGatewayBackendAddressPools\":[{\"id\":\"cktvfcivfsnkymuc\"},{\"id\":\"hjfbebrjcxe\"},{\"id\":\"uwutttxfvjrbi\"},{\"id\":\"hxepcyvahfnlj\"}],\"applicationSecurityGroups\":[{\"id\":\"j\"}],\"loadBalancerBackendAddressPools\":[{\"id\":\"qgidokgjljyo\"},{\"id\":\"vcltbgsncgh\"}],\"loadBalancerInboundNatPools\":[{\"id\":\"zz\"}]}")
            .toObject(VirtualMachineScaleSetIPConfigurationProperties.class);
        Assertions.assertEquals("oqftiyqzrnkcq", model.subnet().id());
        Assertions.assertEquals(true, model.primary());
        Assertions.assertEquals("whzlsicohoq", model.publicIPAddressConfiguration().name());
        Assertions.assertEquals(1797950253, model.publicIPAddressConfiguration().properties().idleTimeoutInMinutes());
        Assertions.assertEquals("ryavwhheunmmqh",
            model.publicIPAddressConfiguration().properties().dnsSettings().domainNameLabel());
        Assertions.assertEquals(DomainNameLabelScopeTypes.TENANT_REUSE,
            model.publicIPAddressConfiguration().properties().dnsSettings().domainNameLabelScope());
        Assertions.assertEquals("noc", model.publicIPAddressConfiguration().properties().ipTags().get(0).ipTagType());
        Assertions.assertEquals("oklyaxuconuq",
            model.publicIPAddressConfiguration().properties().ipTags().get(0).tag());
        Assertions.assertEquals("nhwlrsffrzpwvl",
            model.publicIPAddressConfiguration().properties().publicIPPrefix().id());
        Assertions.assertEquals(IPVersion.IPV4,
            model.publicIPAddressConfiguration().properties().publicIPAddressVersion());
        Assertions.assertEquals(DeleteOptions.DETACH, model.publicIPAddressConfiguration().properties().deleteOption());
        Assertions.assertEquals(PublicIPAddressSkuName.STANDARD, model.publicIPAddressConfiguration().sku().name());
        Assertions.assertEquals(PublicIPAddressSkuTier.GLOBAL, model.publicIPAddressConfiguration().sku().tier());
        Assertions.assertEquals(IPVersion.IPV4, model.privateIPAddressVersion());
        Assertions.assertEquals("cktvfcivfsnkymuc", model.applicationGatewayBackendAddressPools().get(0).id());
        Assertions.assertEquals("j", model.applicationSecurityGroups().get(0).id());
        Assertions.assertEquals("qgidokgjljyo", model.loadBalancerBackendAddressPools().get(0).id());
        Assertions.assertEquals("zz", model.loadBalancerInboundNatPools().get(0).id());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VirtualMachineScaleSetIPConfigurationProperties model = new VirtualMachineScaleSetIPConfigurationProperties()
            .withSubnet(new ApiEntityReference().withId("oqftiyqzrnkcq"))
            .withPrimary(true)
            .withPublicIPAddressConfiguration(new VirtualMachineScaleSetPublicIPAddressConfiguration()
                .withName("whzlsicohoq")
                .withProperties(new VirtualMachineScaleSetPublicIPAddressConfigurationProperties()
                    .withIdleTimeoutInMinutes(1797950253)
                    .withDnsSettings(new VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings()
                        .withDomainNameLabel("ryavwhheunmmqh")
                        .withDomainNameLabelScope(DomainNameLabelScopeTypes.TENANT_REUSE))
                    .withIpTags(
                        Arrays.asList(new VirtualMachineScaleSetIpTag().withIpTagType("noc").withTag("oklyaxuconuq"),
                            new VirtualMachineScaleSetIpTag().withIpTagType("fkbey").withTag("wrmjmwvvjektc")))
                    .withPublicIPPrefix(new SubResource().withId("nhwlrsffrzpwvl"))
                    .withPublicIPAddressVersion(IPVersion.IPV4)
                    .withDeleteOption(DeleteOptions.DETACH))
                .withSku(new PublicIPAddressSku().withName(PublicIPAddressSkuName.STANDARD)
                    .withTier(PublicIPAddressSkuTier.GLOBAL)))
            .withPrivateIPAddressVersion(IPVersion.IPV4)
            .withApplicationGatewayBackendAddressPools(
                Arrays.asList(new SubResource().withId("cktvfcivfsnkymuc"), new SubResource().withId("hjfbebrjcxe"),
                    new SubResource().withId("uwutttxfvjrbi"), new SubResource().withId("hxepcyvahfnlj")))
            .withApplicationSecurityGroups(Arrays.asList(new SubResource().withId("j")))
            .withLoadBalancerBackendAddressPools(
                Arrays.asList(new SubResource().withId("qgidokgjljyo"), new SubResource().withId("vcltbgsncgh")))
            .withLoadBalancerInboundNatPools(Arrays.asList(new SubResource().withId("zz")));
        model = BinaryData.fromObject(model).toObject(VirtualMachineScaleSetIPConfigurationProperties.class);
        Assertions.assertEquals("oqftiyqzrnkcq", model.subnet().id());
        Assertions.assertEquals(true, model.primary());
        Assertions.assertEquals("whzlsicohoq", model.publicIPAddressConfiguration().name());
        Assertions.assertEquals(1797950253, model.publicIPAddressConfiguration().properties().idleTimeoutInMinutes());
        Assertions.assertEquals("ryavwhheunmmqh",
            model.publicIPAddressConfiguration().properties().dnsSettings().domainNameLabel());
        Assertions.assertEquals(DomainNameLabelScopeTypes.TENANT_REUSE,
            model.publicIPAddressConfiguration().properties().dnsSettings().domainNameLabelScope());
        Assertions.assertEquals("noc", model.publicIPAddressConfiguration().properties().ipTags().get(0).ipTagType());
        Assertions.assertEquals("oklyaxuconuq",
            model.publicIPAddressConfiguration().properties().ipTags().get(0).tag());
        Assertions.assertEquals("nhwlrsffrzpwvl",
            model.publicIPAddressConfiguration().properties().publicIPPrefix().id());
        Assertions.assertEquals(IPVersion.IPV4,
            model.publicIPAddressConfiguration().properties().publicIPAddressVersion());
        Assertions.assertEquals(DeleteOptions.DETACH, model.publicIPAddressConfiguration().properties().deleteOption());
        Assertions.assertEquals(PublicIPAddressSkuName.STANDARD, model.publicIPAddressConfiguration().sku().name());
        Assertions.assertEquals(PublicIPAddressSkuTier.GLOBAL, model.publicIPAddressConfiguration().sku().tier());
        Assertions.assertEquals(IPVersion.IPV4, model.privateIPAddressVersion());
        Assertions.assertEquals("cktvfcivfsnkymuc", model.applicationGatewayBackendAddressPools().get(0).id());
        Assertions.assertEquals("j", model.applicationSecurityGroups().get(0).id());
        Assertions.assertEquals("qgidokgjljyo", model.loadBalancerBackendAddressPools().get(0).id());
        Assertions.assertEquals("zz", model.loadBalancerInboundNatPools().get(0).id());
    }
}
