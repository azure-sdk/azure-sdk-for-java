// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.computefleet.generated;

import com.azure.core.management.SubResource;
import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.computefleet.models.ApiEntityReference;
import com.azure.resourcemanager.computefleet.models.DeleteOptions;
import com.azure.resourcemanager.computefleet.models.DomainNameLabelScopeTypes;
import com.azure.resourcemanager.computefleet.models.IPVersion;
import com.azure.resourcemanager.computefleet.models.PublicIPAddressSku;
import com.azure.resourcemanager.computefleet.models.PublicIPAddressSkuName;
import com.azure.resourcemanager.computefleet.models.PublicIPAddressSkuTier;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetIPConfigurationProperties;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetIpTag;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetPublicIPAddressConfiguration;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetPublicIPAddressConfigurationProperties;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class VirtualMachineScaleSetIPConfigurationPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VirtualMachineScaleSetIPConfigurationProperties model = BinaryData.fromString(
            "{\"subnet\":{\"id\":\"ywpmueefjzwfqkq\"},\"primary\":false,\"publicIPAddressConfiguration\":{\"name\":\"suyonobglaocq\",\"properties\":{\"idleTimeoutInMinutes\":1581079817,\"dnsSettings\":{\"domainNameLabel\":\"g\",\"domainNameLabelScope\":\"TenantReuse\"},\"ipTags\":[{\"ipTagType\":\"lmoyrx\",\"tag\":\"fudwpznt\"},{\"ipTagType\":\"dzhlrq\",\"tag\":\"hckfrlhrx\"},{\"ipTagType\":\"kyv\",\"tag\":\"ca\"},{\"ipTagType\":\"z\",\"tag\":\"zka\"}],\"publicIPPrefix\":{\"id\":\"wbcrnwbmehhseyv\"},\"publicIPAddressVersion\":\"IPv6\",\"deleteOption\":\"Detach\"},\"sku\":{\"name\":\"Standard\",\"tier\":\"Global\"}},\"privateIPAddressVersion\":\"IPv4\",\"applicationGatewayBackendAddressPools\":[{\"id\":\"aofmxagkvtme\"},{\"id\":\"qkrhahvljua\"},{\"id\":\"quhcdhmduala\"}],\"applicationSecurityGroups\":[{\"id\":\"vfadmws\"}],\"loadBalancerBackendAddressPools\":[{\"id\":\"vxpvgomz\"}],\"loadBalancerInboundNatPools\":[{\"id\":\"sgwbnbbeld\"},{\"id\":\"k\"}]}")
            .toObject(VirtualMachineScaleSetIPConfigurationProperties.class);
        Assertions.assertEquals("ywpmueefjzwfqkq", model.subnet().id());
        Assertions.assertEquals(false, model.primary());
        Assertions.assertEquals("suyonobglaocq", model.publicIPAddressConfiguration().name());
        Assertions.assertEquals(1581079817, model.publicIPAddressConfiguration().properties().idleTimeoutInMinutes());
        Assertions.assertEquals("g", model.publicIPAddressConfiguration().properties().dnsSettings().domainNameLabel());
        Assertions.assertEquals(DomainNameLabelScopeTypes.TENANT_REUSE,
            model.publicIPAddressConfiguration().properties().dnsSettings().domainNameLabelScope());
        Assertions.assertEquals("lmoyrx",
            model.publicIPAddressConfiguration().properties().ipTags().get(0).ipTagType());
        Assertions.assertEquals("fudwpznt", model.publicIPAddressConfiguration().properties().ipTags().get(0).tag());
        Assertions.assertEquals("wbcrnwbmehhseyv",
            model.publicIPAddressConfiguration().properties().publicIPPrefix().id());
        Assertions.assertEquals(IPVersion.IPV6,
            model.publicIPAddressConfiguration().properties().publicIPAddressVersion());
        Assertions.assertEquals(DeleteOptions.DETACH, model.publicIPAddressConfiguration().properties().deleteOption());
        Assertions.assertEquals(PublicIPAddressSkuName.STANDARD, model.publicIPAddressConfiguration().sku().name());
        Assertions.assertEquals(PublicIPAddressSkuTier.GLOBAL, model.publicIPAddressConfiguration().sku().tier());
        Assertions.assertEquals(IPVersion.IPV4, model.privateIPAddressVersion());
        Assertions.assertEquals("aofmxagkvtme", model.applicationGatewayBackendAddressPools().get(0).id());
        Assertions.assertEquals("vfadmws", model.applicationSecurityGroups().get(0).id());
        Assertions.assertEquals("vxpvgomz", model.loadBalancerBackendAddressPools().get(0).id());
        Assertions.assertEquals("sgwbnbbeld", model.loadBalancerInboundNatPools().get(0).id());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VirtualMachineScaleSetIPConfigurationProperties model
            = new VirtualMachineScaleSetIPConfigurationProperties()
                .withSubnet(new ApiEntityReference().withId("ywpmueefjzwfqkq"))
                .withPrimary(false)
                .withPublicIPAddressConfiguration(new VirtualMachineScaleSetPublicIPAddressConfiguration()
                    .withName("suyonobglaocq")
                    .withProperties(new VirtualMachineScaleSetPublicIPAddressConfigurationProperties()
                        .withIdleTimeoutInMinutes(1581079817)
                        .withDnsSettings(
                            new VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings().withDomainNameLabel("g")
                                .withDomainNameLabelScope(DomainNameLabelScopeTypes.TENANT_REUSE))
                        .withIpTags(
                            Arrays.asList(new VirtualMachineScaleSetIpTag().withIpTagType("lmoyrx").withTag("fudwpznt"),
                                new VirtualMachineScaleSetIpTag().withIpTagType("dzhlrq").withTag("hckfrlhrx"),
                                new VirtualMachineScaleSetIpTag().withIpTagType("kyv").withTag("ca"),
                                new VirtualMachineScaleSetIpTag().withIpTagType("z").withTag("zka")))
                        .withPublicIPPrefix(new SubResource().withId("wbcrnwbmehhseyv"))
                        .withPublicIPAddressVersion(IPVersion.IPV6)
                        .withDeleteOption(DeleteOptions.DETACH))
                    .withSku(new PublicIPAddressSku().withName(PublicIPAddressSkuName.STANDARD)
                        .withTier(PublicIPAddressSkuTier.GLOBAL)))
                .withPrivateIPAddressVersion(IPVersion.IPV4)
                .withApplicationGatewayBackendAddressPools(Arrays.asList(new SubResource().withId("aofmxagkvtme"),
                    new SubResource().withId("qkrhahvljua"), new SubResource().withId("quhcdhmduala")))
                .withApplicationSecurityGroups(Arrays.asList(new SubResource().withId("vfadmws")))
                .withLoadBalancerBackendAddressPools(Arrays.asList(new SubResource().withId("vxpvgomz")))
                .withLoadBalancerInboundNatPools(
                    Arrays.asList(new SubResource().withId("sgwbnbbeld"), new SubResource().withId("k")));
        model = BinaryData.fromObject(model).toObject(VirtualMachineScaleSetIPConfigurationProperties.class);
        Assertions.assertEquals("ywpmueefjzwfqkq", model.subnet().id());
        Assertions.assertEquals(false, model.primary());
        Assertions.assertEquals("suyonobglaocq", model.publicIPAddressConfiguration().name());
        Assertions.assertEquals(1581079817, model.publicIPAddressConfiguration().properties().idleTimeoutInMinutes());
        Assertions.assertEquals("g", model.publicIPAddressConfiguration().properties().dnsSettings().domainNameLabel());
        Assertions.assertEquals(DomainNameLabelScopeTypes.TENANT_REUSE,
            model.publicIPAddressConfiguration().properties().dnsSettings().domainNameLabelScope());
        Assertions.assertEquals("lmoyrx",
            model.publicIPAddressConfiguration().properties().ipTags().get(0).ipTagType());
        Assertions.assertEquals("fudwpznt", model.publicIPAddressConfiguration().properties().ipTags().get(0).tag());
        Assertions.assertEquals("wbcrnwbmehhseyv",
            model.publicIPAddressConfiguration().properties().publicIPPrefix().id());
        Assertions.assertEquals(IPVersion.IPV6,
            model.publicIPAddressConfiguration().properties().publicIPAddressVersion());
        Assertions.assertEquals(DeleteOptions.DETACH, model.publicIPAddressConfiguration().properties().deleteOption());
        Assertions.assertEquals(PublicIPAddressSkuName.STANDARD, model.publicIPAddressConfiguration().sku().name());
        Assertions.assertEquals(PublicIPAddressSkuTier.GLOBAL, model.publicIPAddressConfiguration().sku().tier());
        Assertions.assertEquals(IPVersion.IPV4, model.privateIPAddressVersion());
        Assertions.assertEquals("aofmxagkvtme", model.applicationGatewayBackendAddressPools().get(0).id());
        Assertions.assertEquals("vfadmws", model.applicationSecurityGroups().get(0).id());
        Assertions.assertEquals("vxpvgomz", model.loadBalancerBackendAddressPools().get(0).id());
        Assertions.assertEquals("sgwbnbbeld", model.loadBalancerInboundNatPools().get(0).id());
    }
}
