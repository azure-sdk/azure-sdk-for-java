// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.computefleet.generated;

import com.azure.core.management.SubResource;
import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.computefleet.models.DeleteOptions;
import com.azure.resourcemanager.computefleet.models.DomainNameLabelScopeTypes;
import com.azure.resourcemanager.computefleet.models.IPVersion;
import com.azure.resourcemanager.computefleet.models.PublicIPAddressSku;
import com.azure.resourcemanager.computefleet.models.PublicIPAddressSkuName;
import com.azure.resourcemanager.computefleet.models.PublicIPAddressSkuTier;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetIpTag;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetPublicIPAddressConfiguration;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetPublicIPAddressConfigurationProperties;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class VirtualMachineScaleSetPublicIPAddressConfigurationTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VirtualMachineScaleSetPublicIPAddressConfiguration model = BinaryData.fromString(
            "{\"name\":\"baliourqhakauha\",\"properties\":{\"idleTimeoutInMinutes\":661923872,\"dnsSettings\":{\"domainNameLabel\":\"xosow\",\"domainNameLabelScope\":\"ResourceGroupReuse\"},\"ipTags\":[{\"ipTagType\":\"cjooxdjebwpucwwf\",\"tag\":\"vbvmeu\"},{\"ipTagType\":\"ivyhzceuojgjrwju\",\"tag\":\"otwmcdyt\"},{\"ipTagType\":\"wit\",\"tag\":\"rjaw\"}],\"publicIPPrefix\":{\"id\":\"gxhnisk\"},\"publicIPAddressVersion\":\"IPv4\",\"deleteOption\":\"Delete\"},\"sku\":{\"name\":\"Basic\",\"tier\":\"Regional\"}}")
            .toObject(VirtualMachineScaleSetPublicIPAddressConfiguration.class);
        Assertions.assertEquals("baliourqhakauha", model.name());
        Assertions.assertEquals(661923872, model.properties().idleTimeoutInMinutes());
        Assertions.assertEquals("xosow", model.properties().dnsSettings().domainNameLabel());
        Assertions.assertEquals(DomainNameLabelScopeTypes.RESOURCE_GROUP_REUSE,
            model.properties().dnsSettings().domainNameLabelScope());
        Assertions.assertEquals("cjooxdjebwpucwwf", model.properties().ipTags().get(0).ipTagType());
        Assertions.assertEquals("vbvmeu", model.properties().ipTags().get(0).tag());
        Assertions.assertEquals("gxhnisk", model.properties().publicIPPrefix().id());
        Assertions.assertEquals(IPVersion.IPV4, model.properties().publicIPAddressVersion());
        Assertions.assertEquals(DeleteOptions.DELETE, model.properties().deleteOption());
        Assertions.assertEquals(PublicIPAddressSkuName.BASIC, model.sku().name());
        Assertions.assertEquals(PublicIPAddressSkuTier.REGIONAL, model.sku().tier());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VirtualMachineScaleSetPublicIPAddressConfiguration model
            = new VirtualMachineScaleSetPublicIPAddressConfiguration().withName("baliourqhakauha")
                .withProperties(
                    new VirtualMachineScaleSetPublicIPAddressConfigurationProperties()
                        .withIdleTimeoutInMinutes(661923872)
                        .withDnsSettings(new VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings()
                            .withDomainNameLabel("xosow")
                            .withDomainNameLabelScope(DomainNameLabelScopeTypes.RESOURCE_GROUP_REUSE))
                        .withIpTags(Arrays.asList(
                            new VirtualMachineScaleSetIpTag().withIpTagType("cjooxdjebwpucwwf").withTag("vbvmeu"),
                            new VirtualMachineScaleSetIpTag().withIpTagType("ivyhzceuojgjrwju").withTag("otwmcdyt"),
                            new VirtualMachineScaleSetIpTag().withIpTagType("wit").withTag("rjaw")))
                        .withPublicIPPrefix(new SubResource().withId("gxhnisk"))
                        .withPublicIPAddressVersion(IPVersion.IPV4)
                        .withDeleteOption(DeleteOptions.DELETE))
                .withSku(new PublicIPAddressSku().withName(PublicIPAddressSkuName.BASIC)
                    .withTier(PublicIPAddressSkuTier.REGIONAL));
        model = BinaryData.fromObject(model).toObject(VirtualMachineScaleSetPublicIPAddressConfiguration.class);
        Assertions.assertEquals("baliourqhakauha", model.name());
        Assertions.assertEquals(661923872, model.properties().idleTimeoutInMinutes());
        Assertions.assertEquals("xosow", model.properties().dnsSettings().domainNameLabel());
        Assertions.assertEquals(DomainNameLabelScopeTypes.RESOURCE_GROUP_REUSE,
            model.properties().dnsSettings().domainNameLabelScope());
        Assertions.assertEquals("cjooxdjebwpucwwf", model.properties().ipTags().get(0).ipTagType());
        Assertions.assertEquals("vbvmeu", model.properties().ipTags().get(0).tag());
        Assertions.assertEquals("gxhnisk", model.properties().publicIPPrefix().id());
        Assertions.assertEquals(IPVersion.IPV4, model.properties().publicIPAddressVersion());
        Assertions.assertEquals(DeleteOptions.DELETE, model.properties().deleteOption());
        Assertions.assertEquals(PublicIPAddressSkuName.BASIC, model.sku().name());
        Assertions.assertEquals(PublicIPAddressSkuTier.REGIONAL, model.sku().tier());
    }
}
