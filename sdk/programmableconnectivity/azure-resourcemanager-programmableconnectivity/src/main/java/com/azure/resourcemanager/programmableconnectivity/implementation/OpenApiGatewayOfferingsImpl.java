// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.programmableconnectivity.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.programmableconnectivity.fluent.OpenApiGatewayOfferingsClient;
import com.azure.resourcemanager.programmableconnectivity.fluent.models.OpenApiGatewayOfferingInner;
import com.azure.resourcemanager.programmableconnectivity.models.OpenApiGatewayOffering;
import com.azure.resourcemanager.programmableconnectivity.models.OpenApiGatewayOfferings;

public final class OpenApiGatewayOfferingsImpl implements OpenApiGatewayOfferings {
    private static final ClientLogger LOGGER = new ClientLogger(OpenApiGatewayOfferingsImpl.class);

    private final OpenApiGatewayOfferingsClient innerClient;

    private final com.azure.resourcemanager.programmableconnectivity.ProgrammableConnectivityManager serviceManager;

    public OpenApiGatewayOfferingsImpl(
        OpenApiGatewayOfferingsClient innerClient,
        com.azure.resourcemanager.programmableconnectivity.ProgrammableConnectivityManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<OpenApiGatewayOffering> listByTenant() {
        PagedIterable<OpenApiGatewayOfferingInner> inner = this.serviceClient().listByTenant();
        return Utils.mapPage(inner, inner1 -> new OpenApiGatewayOfferingImpl(inner1, this.manager()));
    }

    public PagedIterable<OpenApiGatewayOffering> listByTenant(Context context) {
        PagedIterable<OpenApiGatewayOfferingInner> inner = this.serviceClient().listByTenant(context);
        return Utils.mapPage(inner, inner1 -> new OpenApiGatewayOfferingImpl(inner1, this.manager()));
    }

    public Response<OpenApiGatewayOffering> getWithResponse(String name, Context context) {
        Response<OpenApiGatewayOfferingInner> inner = this.serviceClient().getWithResponse(name, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new OpenApiGatewayOfferingImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public OpenApiGatewayOffering get(String name) {
        OpenApiGatewayOfferingInner inner = this.serviceClient().get(name);
        if (inner != null) {
            return new OpenApiGatewayOfferingImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<OpenApiGatewayOffering> list() {
        PagedIterable<OpenApiGatewayOfferingInner> inner = this.serviceClient().list();
        return Utils.mapPage(inner, inner1 -> new OpenApiGatewayOfferingImpl(inner1, this.manager()));
    }

    public PagedIterable<OpenApiGatewayOffering> list(Context context) {
        PagedIterable<OpenApiGatewayOfferingInner> inner = this.serviceClient().list(context);
        return Utils.mapPage(inner, inner1 -> new OpenApiGatewayOfferingImpl(inner1, this.manager()));
    }

    private OpenApiGatewayOfferingsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.programmableconnectivity.ProgrammableConnectivityManager manager() {
        return this.serviceManager;
    }
}
