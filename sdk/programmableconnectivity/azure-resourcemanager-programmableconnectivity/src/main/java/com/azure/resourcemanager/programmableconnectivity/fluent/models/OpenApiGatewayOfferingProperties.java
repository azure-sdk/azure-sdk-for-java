// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.programmableconnectivity.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.programmableconnectivity.models.ResourceProvisioningState;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** OpenAPI Gateway Offering properties. */
@Fluent
public final class OpenApiGatewayOfferingProperties {
    /*
     * Open Gateway Offering Display Name
     */
    @JsonProperty(value = "offerName", required = true)
    private String offerName;

    /*
     * Name of the Operator this offering belongs to.
     */
    @JsonProperty(value = "operatorName", required = true)
    private String operatorName;

    /*
     * Endpoint (Base URL) for the Operator's Network API in current region/country.
     */
    @JsonProperty(value = "endpoint", required = true)
    private String endpoint;

    /*
     * Name of the country where this offering is being supported.
     */
    @JsonProperty(value = "country", required = true)
    private String country;

    /*
     * List of Network API features supported in this offering. The features are specific to a country/region.
     */
    @JsonProperty(value = "features", required = true)
    private List<String> features;

    /*
     * The provisioning state of the resource.
     */
    @JsonProperty(value = "provisioningState", required = true, access = JsonProperty.Access.WRITE_ONLY)
    private ResourceProvisioningState provisioningState;

    /** Creates an instance of OpenApiGatewayOfferingProperties class. */
    public OpenApiGatewayOfferingProperties() {
    }

    /**
     * Get the offerName property: Open Gateway Offering Display Name.
     *
     * @return the offerName value.
     */
    public String offerName() {
        return this.offerName;
    }

    /**
     * Set the offerName property: Open Gateway Offering Display Name.
     *
     * @param offerName the offerName value to set.
     * @return the OpenApiGatewayOfferingProperties object itself.
     */
    public OpenApiGatewayOfferingProperties withOfferName(String offerName) {
        this.offerName = offerName;
        return this;
    }

    /**
     * Get the operatorName property: Name of the Operator this offering belongs to.
     *
     * @return the operatorName value.
     */
    public String operatorName() {
        return this.operatorName;
    }

    /**
     * Set the operatorName property: Name of the Operator this offering belongs to.
     *
     * @param operatorName the operatorName value to set.
     * @return the OpenApiGatewayOfferingProperties object itself.
     */
    public OpenApiGatewayOfferingProperties withOperatorName(String operatorName) {
        this.operatorName = operatorName;
        return this;
    }

    /**
     * Get the endpoint property: Endpoint (Base URL) for the Operator's Network API in current region/country.
     *
     * @return the endpoint value.
     */
    public String endpoint() {
        return this.endpoint;
    }

    /**
     * Set the endpoint property: Endpoint (Base URL) for the Operator's Network API in current region/country.
     *
     * @param endpoint the endpoint value to set.
     * @return the OpenApiGatewayOfferingProperties object itself.
     */
    public OpenApiGatewayOfferingProperties withEndpoint(String endpoint) {
        this.endpoint = endpoint;
        return this;
    }

    /**
     * Get the country property: Name of the country where this offering is being supported.
     *
     * @return the country value.
     */
    public String country() {
        return this.country;
    }

    /**
     * Set the country property: Name of the country where this offering is being supported.
     *
     * @param country the country value to set.
     * @return the OpenApiGatewayOfferingProperties object itself.
     */
    public OpenApiGatewayOfferingProperties withCountry(String country) {
        this.country = country;
        return this;
    }

    /**
     * Get the features property: List of Network API features supported in this offering. The features are specific to
     * a country/region.
     *
     * @return the features value.
     */
    public List<String> features() {
        return this.features;
    }

    /**
     * Set the features property: List of Network API features supported in this offering. The features are specific to
     * a country/region.
     *
     * @param features the features value to set.
     * @return the OpenApiGatewayOfferingProperties object itself.
     */
    public OpenApiGatewayOfferingProperties withFeatures(List<String> features) {
        this.features = features;
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning state of the resource.
     *
     * @return the provisioningState value.
     */
    public ResourceProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (offerName() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property offerName in model OpenApiGatewayOfferingProperties"));
        }
        if (operatorName() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property operatorName in model OpenApiGatewayOfferingProperties"));
        }
        if (endpoint() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property endpoint in model OpenApiGatewayOfferingProperties"));
        }
        if (country() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property country in model OpenApiGatewayOfferingProperties"));
        }
        if (features() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property features in model OpenApiGatewayOfferingProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(OpenApiGatewayOfferingProperties.class);
}
