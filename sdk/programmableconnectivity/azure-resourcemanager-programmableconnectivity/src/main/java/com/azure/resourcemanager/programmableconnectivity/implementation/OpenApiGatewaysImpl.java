// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.programmableconnectivity.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.programmableconnectivity.fluent.OpenApiGatewaysClient;
import com.azure.resourcemanager.programmableconnectivity.fluent.models.OpenApiGatewayInner;
import com.azure.resourcemanager.programmableconnectivity.models.AppCredentials;
import com.azure.resourcemanager.programmableconnectivity.models.OpenApiGateway;
import com.azure.resourcemanager.programmableconnectivity.models.OpenApiGateways;

public final class OpenApiGatewaysImpl implements OpenApiGateways {
    private static final ClientLogger LOGGER = new ClientLogger(OpenApiGatewaysImpl.class);

    private final OpenApiGatewaysClient innerClient;

    private final com.azure.resourcemanager.programmableconnectivity.ProgrammableConnectivityManager serviceManager;

    public OpenApiGatewaysImpl(
        OpenApiGatewaysClient innerClient,
        com.azure.resourcemanager.programmableconnectivity.ProgrammableConnectivityManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<OpenApiGateway> list() {
        PagedIterable<OpenApiGatewayInner> inner = this.serviceClient().list();
        return Utils.mapPage(inner, inner1 -> new OpenApiGatewayImpl(inner1, this.manager()));
    }

    public PagedIterable<OpenApiGateway> list(Context context) {
        PagedIterable<OpenApiGatewayInner> inner = this.serviceClient().list(context);
        return Utils.mapPage(inner, inner1 -> new OpenApiGatewayImpl(inner1, this.manager()));
    }

    public PagedIterable<OpenApiGateway> listByResourceGroup(String resourceGroupName) {
        PagedIterable<OpenApiGatewayInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return Utils.mapPage(inner, inner1 -> new OpenApiGatewayImpl(inner1, this.manager()));
    }

    public PagedIterable<OpenApiGateway> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<OpenApiGatewayInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return Utils.mapPage(inner, inner1 -> new OpenApiGatewayImpl(inner1, this.manager()));
    }

    public Response<OpenApiGateway> getByResourceGroupWithResponse(
        String resourceGroupName, String name, Context context) {
        Response<OpenApiGatewayInner> inner =
            this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, name, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new OpenApiGatewayImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public OpenApiGateway getByResourceGroup(String resourceGroupName, String name) {
        OpenApiGatewayInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, name);
        if (inner != null) {
            return new OpenApiGatewayImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceGroupName, String name) {
        this.serviceClient().delete(resourceGroupName, name);
    }

    public void delete(String resourceGroupName, String name, Context context) {
        this.serviceClient().delete(resourceGroupName, name, context);
    }

    public void resetConnection(String resourceGroupName, String name, OpenApiGatewayInner body) {
        this.serviceClient().resetConnection(resourceGroupName, name, body);
    }

    public void resetConnection(String resourceGroupName, String name, OpenApiGatewayInner body, Context context) {
        this.serviceClient().resetConnection(resourceGroupName, name, body, context);
    }

    public void updateCredentials(String resourceGroupName, String name, AppCredentials body) {
        this.serviceClient().updateCredentials(resourceGroupName, name, body);
    }

    public void updateCredentials(String resourceGroupName, String name, AppCredentials body, Context context) {
        this.serviceClient().updateCredentials(resourceGroupName, name, body, context);
    }

    public OpenApiGateway getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "openApiGateways");
        if (name == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'openApiGateways'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, name, Context.NONE).getValue();
    }

    public Response<OpenApiGateway> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "openApiGateways");
        if (name == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'openApiGateways'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, name, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "openApiGateways");
        if (name == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'openApiGateways'.", id)));
        }
        this.delete(resourceGroupName, name, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "openApiGateways");
        if (name == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'openApiGateways'.", id)));
        }
        this.delete(resourceGroupName, name, context);
    }

    private OpenApiGatewaysClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.programmableconnectivity.ProgrammableConnectivityManager manager() {
        return this.serviceManager;
    }

    public OpenApiGatewayImpl define(String name) {
        return new OpenApiGatewayImpl(name, this.manager());
    }
}
