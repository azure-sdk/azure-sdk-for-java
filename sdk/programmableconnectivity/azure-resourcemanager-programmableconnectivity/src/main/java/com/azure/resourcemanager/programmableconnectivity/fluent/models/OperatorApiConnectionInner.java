// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.programmableconnectivity.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.core.management.SystemData;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.programmableconnectivity.models.DataProcessing;
import com.azure.resourcemanager.programmableconnectivity.models.ProvisioningState;
import com.azure.resourcemanager.programmableconnectivity.models.Purpose;
import com.azure.resourcemanager.programmableconnectivity.models.SaasProperties;
import com.azure.resourcemanager.programmableconnectivity.models.Status;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * A Programmable Connectivity Operator API Connection resource.
 */
@Fluent
public final class OperatorApiConnectionInner extends Resource {
    /*
     * The resource-specific properties for this resource.
     */
    private OperatorApiConnectionProperties innerProperties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of OperatorApiConnectionInner class.
     */
    public OperatorApiConnectionInner() {
    }

    /**
     * Get the innerProperties property: The resource-specific properties for this resource.
     * 
     * @return the innerProperties value.
     */
    private OperatorApiConnectionProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OperatorApiConnectionInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OperatorApiConnectionInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the operatorApiPlanId property: Reference to the Operator API Plan Resource ID.
     * 
     * @return the operatorApiPlanId value.
     */
    public String operatorApiPlanId() {
        return this.innerProperties() == null ? null : this.innerProperties().operatorApiPlanId();
    }

    /**
     * Set the operatorApiPlanId property: Reference to the Operator API Plan Resource ID.
     * 
     * @param operatorApiPlanId the operatorApiPlanId value to set.
     * @return the OperatorApiConnectionInner object itself.
     */
    public OperatorApiConnectionInner withOperatorApiPlanId(String operatorApiPlanId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new OperatorApiConnectionProperties();
        }
        this.innerProperties().withOperatorApiPlanId(operatorApiPlanId);
        return this;
    }

    /**
     * Get the marketplaceSaasProperties property: Details about the SaaS offer purchased from the Azure Marketplace.
     * 
     * @return the marketplaceSaasProperties value.
     */
    public SaasProperties marketplaceSaasProperties() {
        return this.innerProperties() == null ? null : this.innerProperties().marketplaceSaasProperties();
    }

    /**
     * Get the gatewayId property: Reference to the APC Gateway resource ID.
     * 
     * @return the gatewayId value.
     */
    public String gatewayId() {
        return this.innerProperties() == null ? null : this.innerProperties().gatewayId();
    }

    /**
     * Set the gatewayId property: Reference to the APC Gateway resource ID.
     * 
     * @param gatewayId the gatewayId value to set.
     * @return the OperatorApiConnectionInner object itself.
     */
    public OperatorApiConnectionInner withGatewayId(String gatewayId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new OperatorApiConnectionProperties();
        }
        this.innerProperties().withGatewayId(gatewayId);
        return this;
    }

    /**
     * Get the operatorName property: Name of the Operator in the linked Operator API Plan belongs to.
     * 
     * @return the operatorName value.
     */
    public String operatorName() {
        return this.innerProperties() == null ? null : this.innerProperties().operatorName();
    }

    /**
     * Get the camaraApiName property: The Network API for the current operator in the country/region provided in the
     * linked Operator API Plan.
     * 
     * @return the camaraApiName value.
     */
    public String camaraApiName() {
        return this.innerProperties() == null ? null : this.innerProperties().camaraApiName();
    }

    /**
     * Get the provisioningState property: The status of the last operation.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the status property: The status of the OperatorApiConnection resource.
     * 
     * @return the status value.
     */
    public Status status() {
        return this.innerProperties() == null ? null : this.innerProperties().status();
    }

    /**
     * Get the purposes property: The purpose for which the Application will use the API. Max Items 1 currently as
     * Operators do not support multiple.
     * 
     * @return the purposes value.
     */
    public List<Purpose> purposes() {
        return this.innerProperties() == null ? null : this.innerProperties().purposes();
    }

    /**
     * Set the purposes property: The purpose for which the Application will use the API. Max Items 1 currently as
     * Operators do not support multiple.
     * 
     * @param purposes the purposes value to set.
     * @return the OperatorApiConnectionInner object itself.
     */
    public OperatorApiConnectionInner withPurposes(List<Purpose> purposes) {
        if (this.innerProperties() == null) {
            this.innerProperties = new OperatorApiConnectionProperties();
        }
        this.innerProperties().withPurposes(purposes);
        return this;
    }

    /**
     * Get the purposeReason property: Explanation of the reason that justifies the purpose: specifically why is the API
     * used for the application's use case.
     * 
     * @return the purposeReason value.
     */
    public String purposeReason() {
        return this.innerProperties() == null ? null : this.innerProperties().purposeReason();
    }

    /**
     * Set the purposeReason property: Explanation of the reason that justifies the purpose: specifically why is the API
     * used for the application's use case.
     * 
     * @param purposeReason the purposeReason value to set.
     * @return the OperatorApiConnectionInner object itself.
     */
    public OperatorApiConnectionInner withPurposeReason(String purposeReason) {
        if (this.innerProperties() == null) {
            this.innerProperties = new OperatorApiConnectionProperties();
        }
        this.innerProperties().withPurposeReason(purposeReason);
        return this;
    }

    /**
     * Get the dataProcessingList property: List of ways the data returned on this API is processed.
     * 
     * @return the dataProcessingList value.
     */
    public List<DataProcessing> dataProcessingList() {
        return this.innerProperties() == null ? null : this.innerProperties().dataProcessingList();
    }

    /**
     * Set the dataProcessingList property: List of ways the data returned on this API is processed.
     * 
     * @param dataProcessingList the dataProcessingList value to set.
     * @return the OperatorApiConnectionInner object itself.
     */
    public OperatorApiConnectionInner withDataProcessingList(List<DataProcessing> dataProcessingList) {
        if (this.innerProperties() == null) {
            this.innerProperties = new OperatorApiConnectionProperties();
        }
        this.innerProperties().withDataProcessingList(dataProcessingList);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("location", location());
        jsonWriter.writeMapField("tags", tags(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OperatorApiConnectionInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OperatorApiConnectionInner if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the OperatorApiConnectionInner.
     */
    public static OperatorApiConnectionInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OperatorApiConnectionInner deserializedOperatorApiConnectionInner = new OperatorApiConnectionInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedOperatorApiConnectionInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedOperatorApiConnectionInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedOperatorApiConnectionInner.type = reader.getString();
                } else if ("location".equals(fieldName)) {
                    deserializedOperatorApiConnectionInner.withLocation(reader.getString());
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedOperatorApiConnectionInner.withTags(tags);
                } else if ("properties".equals(fieldName)) {
                    deserializedOperatorApiConnectionInner.innerProperties
                        = OperatorApiConnectionProperties.fromJson(reader);
                } else if ("systemData".equals(fieldName)) {
                    deserializedOperatorApiConnectionInner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOperatorApiConnectionInner;
        });
    }
}
