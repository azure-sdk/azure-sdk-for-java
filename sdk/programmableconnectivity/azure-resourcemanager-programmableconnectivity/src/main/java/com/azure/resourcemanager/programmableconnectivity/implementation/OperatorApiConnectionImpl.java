// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.programmableconnectivity.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.programmableconnectivity.fluent.models.OperatorApiConnectionInner;
import com.azure.resourcemanager.programmableconnectivity.models.DataProcessing;
import com.azure.resourcemanager.programmableconnectivity.models.OperatorApiConnection;
import com.azure.resourcemanager.programmableconnectivity.models.OperatorApiConnectionUpdate;
import com.azure.resourcemanager.programmableconnectivity.models.ProvisioningState;
import com.azure.resourcemanager.programmableconnectivity.models.Purpose;
import com.azure.resourcemanager.programmableconnectivity.models.SaasProperties;
import com.azure.resourcemanager.programmableconnectivity.models.Status;
import java.util.Collections;
import java.util.List;
import java.util.Map;

public final class OperatorApiConnectionImpl
    implements OperatorApiConnection, OperatorApiConnection.Definition, OperatorApiConnection.Update {
    private OperatorApiConnectionInner innerObject;

    private final com.azure.resourcemanager.programmableconnectivity.ProgrammableConnectivityManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public String operatorApiPlanId() {
        return this.innerModel().operatorApiPlanId();
    }

    public SaasProperties marketplaceSaasProperties() {
        return this.innerModel().marketplaceSaasProperties();
    }

    public String gatewayId() {
        return this.innerModel().gatewayId();
    }

    public String operatorName() {
        return this.innerModel().operatorName();
    }

    public String camaraApiName() {
        return this.innerModel().camaraApiName();
    }

    public ProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public Status status() {
        return this.innerModel().status();
    }

    public List<Purpose> purposes() {
        List<Purpose> inner = this.innerModel().purposes();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public String purposeReason() {
        return this.innerModel().purposeReason();
    }

    public List<DataProcessing> dataProcessingList() {
        List<DataProcessing> inner = this.innerModel().dataProcessingList();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public OperatorApiConnectionInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.programmableconnectivity.ProgrammableConnectivityManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String operatorApiConnectionName;

    private OperatorApiConnectionUpdate updateProperties;

    public OperatorApiConnectionImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public OperatorApiConnection create() {
        this.innerObject = serviceManager.serviceClient()
            .getOperatorApiConnections()
            .create(resourceGroupName, operatorApiConnectionName, this.innerModel(), Context.NONE);
        return this;
    }

    public OperatorApiConnection create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getOperatorApiConnections()
            .create(resourceGroupName, operatorApiConnectionName, this.innerModel(), context);
        return this;
    }

    OperatorApiConnectionImpl(String name,
        com.azure.resourcemanager.programmableconnectivity.ProgrammableConnectivityManager serviceManager) {
        this.innerObject = new OperatorApiConnectionInner();
        this.serviceManager = serviceManager;
        this.operatorApiConnectionName = name;
    }

    public OperatorApiConnectionImpl update() {
        this.updateProperties = new OperatorApiConnectionUpdate();
        return this;
    }

    public OperatorApiConnection apply() {
        this.innerObject = serviceManager.serviceClient()
            .getOperatorApiConnections()
            .update(resourceGroupName, operatorApiConnectionName, updateProperties, Context.NONE);
        return this;
    }

    public OperatorApiConnection apply(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getOperatorApiConnections()
            .update(resourceGroupName, operatorApiConnectionName, updateProperties, context);
        return this;
    }

    OperatorApiConnectionImpl(OperatorApiConnectionInner innerObject,
        com.azure.resourcemanager.programmableconnectivity.ProgrammableConnectivityManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.operatorApiConnectionName
            = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "operatorApiConnections");
    }

    public OperatorApiConnection refresh() {
        this.innerObject = serviceManager.serviceClient()
            .getOperatorApiConnections()
            .getByResourceGroupWithResponse(resourceGroupName, operatorApiConnectionName, Context.NONE)
            .getValue();
        return this;
    }

    public OperatorApiConnection refresh(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getOperatorApiConnections()
            .getByResourceGroupWithResponse(resourceGroupName, operatorApiConnectionName, context)
            .getValue();
        return this;
    }

    public OperatorApiConnectionImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public OperatorApiConnectionImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public OperatorApiConnectionImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateProperties.withTags(tags);
            return this;
        }
    }

    public OperatorApiConnectionImpl withOperatorApiPlanId(String operatorApiPlanId) {
        if (isInCreateMode()) {
            this.innerModel().withOperatorApiPlanId(operatorApiPlanId);
            return this;
        } else {
            this.updateProperties.withOperatorApiPlanId(operatorApiPlanId);
            return this;
        }
    }

    public OperatorApiConnectionImpl withGatewayId(String gatewayId) {
        this.innerModel().withGatewayId(gatewayId);
        return this;
    }

    public OperatorApiConnectionImpl withPurposes(List<Purpose> purposes) {
        if (isInCreateMode()) {
            this.innerModel().withPurposes(purposes);
            return this;
        } else {
            this.updateProperties.withPurposes(purposes);
            return this;
        }
    }

    public OperatorApiConnectionImpl withPurposeReason(String purposeReason) {
        if (isInCreateMode()) {
            this.innerModel().withPurposeReason(purposeReason);
            return this;
        } else {
            this.updateProperties.withPurposeReason(purposeReason);
            return this;
        }
    }

    public OperatorApiConnectionImpl withDataProcessingList(List<DataProcessing> dataProcessingList) {
        if (isInCreateMode()) {
            this.innerModel().withDataProcessingList(dataProcessingList);
            return this;
        } else {
            this.updateProperties.withDataProcessingList(dataProcessingList);
            return this;
        }
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
