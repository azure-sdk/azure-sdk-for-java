// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.programmableconnectivity.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.programmableconnectivity.fluent.models.GatewayInner;
import com.azure.resourcemanager.programmableconnectivity.models.Gateway;
import com.azure.resourcemanager.programmableconnectivity.models.GatewayListKeysResult;
import com.azure.resourcemanager.programmableconnectivity.models.GatewayRegenerateKeyRequest;
import com.azure.resourcemanager.programmableconnectivity.models.GatewayUpdate;
import com.azure.resourcemanager.programmableconnectivity.models.ProvisioningState;
import java.util.Collections;
import java.util.List;
import java.util.Map;

public final class GatewayImpl implements Gateway, Gateway.Definition, Gateway.Update {
    private GatewayInner innerObject;

    private final com.azure.resourcemanager.programmableconnectivity.ProgrammableConnectivityManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public String sku() {
        return this.innerModel().sku();
    }

    public List<String> openApiGateways() {
        List<String> inner = this.innerModel().openApiGateways();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public String gatewayBaseUrl() {
        return this.innerModel().gatewayBaseUrl();
    }

    public ProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public GatewayInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.programmableconnectivity.ProgrammableConnectivityManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String name;

    private GatewayUpdate updateProperties;

    public GatewayImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public Gateway create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getGateways()
                .createOrUpdate(resourceGroupName, name, this.innerModel(), Context.NONE);
        return this;
    }

    public Gateway create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getGateways()
                .createOrUpdate(resourceGroupName, name, this.innerModel(), context);
        return this;
    }

    GatewayImpl(
        String name,
        com.azure.resourcemanager.programmableconnectivity.ProgrammableConnectivityManager serviceManager) {
        this.innerObject = new GatewayInner();
        this.serviceManager = serviceManager;
        this.name = name;
    }

    public GatewayImpl update() {
        this.updateProperties = new GatewayUpdate();
        return this;
    }

    public Gateway apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getGateways()
                .update(resourceGroupName, name, updateProperties, Context.NONE);
        return this;
    }

    public Gateway apply(Context context) {
        this.innerObject =
            serviceManager.serviceClient().getGateways().update(resourceGroupName, name, updateProperties, context);
        return this;
    }

    GatewayImpl(
        GatewayInner innerObject,
        com.azure.resourcemanager.programmableconnectivity.ProgrammableConnectivityManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.name = Utils.getValueFromIdByName(innerObject.id(), "gateways");
    }

    public Gateway refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getGateways()
                .getByResourceGroupWithResponse(resourceGroupName, name, Context.NONE)
                .getValue();
        return this;
    }

    public Gateway refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getGateways()
                .getByResourceGroupWithResponse(resourceGroupName, name, context)
                .getValue();
        return this;
    }

    public Response<GatewayListKeysResult> listKeysWithResponse(GatewayRegenerateKeyRequest body, Context context) {
        return serviceManager.gateways().listKeysWithResponse(resourceGroupName, name, body, context);
    }

    public GatewayListKeysResult listKeys(GatewayRegenerateKeyRequest body) {
        return serviceManager.gateways().listKeys(resourceGroupName, name, body);
    }

    public void regenerateKey(GatewayRegenerateKeyRequest body) {
        serviceManager.gateways().regenerateKey(resourceGroupName, name, body);
    }

    public void regenerateKey(GatewayRegenerateKeyRequest body, Context context) {
        serviceManager.gateways().regenerateKey(resourceGroupName, name, body, context);
    }

    public GatewayImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public GatewayImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public GatewayImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateProperties.withTags(tags);
            return this;
        }
    }

    public GatewayImpl withSku(String sku) {
        if (isInCreateMode()) {
            this.innerModel().withSku(sku);
            return this;
        } else {
            this.updateProperties.withSku(sku);
            return this;
        }
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
