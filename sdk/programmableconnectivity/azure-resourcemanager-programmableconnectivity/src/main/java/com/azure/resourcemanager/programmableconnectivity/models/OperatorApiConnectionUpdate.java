// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.programmableconnectivity.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.programmableconnectivity.fluent.models.OperatorApiConnectionUpdateProperties;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * The type used for update operations of the OperatorApiConnection.
 */
@Fluent
public final class OperatorApiConnectionUpdate implements JsonSerializable<OperatorApiConnectionUpdate> {
    /*
     * Resource tags.
     */
    private Map<String, String> tags;

    /*
     * The resource-specific properties for this resource.
     */
    private OperatorApiConnectionUpdateProperties innerProperties;

    /**
     * Creates an instance of OperatorApiConnectionUpdate class.
     */
    public OperatorApiConnectionUpdate() {
    }

    /**
     * Get the tags property: Resource tags.
     * 
     * @return the tags value.
     */
    public Map<String, String> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: Resource tags.
     * 
     * @param tags the tags value to set.
     * @return the OperatorApiConnectionUpdate object itself.
     */
    public OperatorApiConnectionUpdate withTags(Map<String, String> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the innerProperties property: The resource-specific properties for this resource.
     * 
     * @return the innerProperties value.
     */
    private OperatorApiConnectionUpdateProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the operatorApiPlanId property: Reference to the Operator API Plan Resource ID.
     * 
     * @return the operatorApiPlanId value.
     */
    public String operatorApiPlanId() {
        return this.innerProperties() == null ? null : this.innerProperties().operatorApiPlanId();
    }

    /**
     * Set the operatorApiPlanId property: Reference to the Operator API Plan Resource ID.
     * 
     * @param operatorApiPlanId the operatorApiPlanId value to set.
     * @return the OperatorApiConnectionUpdate object itself.
     */
    public OperatorApiConnectionUpdate withOperatorApiPlanId(String operatorApiPlanId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new OperatorApiConnectionUpdateProperties();
        }
        this.innerProperties().withOperatorApiPlanId(operatorApiPlanId);
        return this;
    }

    /**
     * Get the purposes property: The purpose for which the Application will use the API. Max Items 1 currently as
     * Operators do not support multiple.
     * 
     * @return the purposes value.
     */
    public List<Purpose> purposes() {
        return this.innerProperties() == null ? null : this.innerProperties().purposes();
    }

    /**
     * Set the purposes property: The purpose for which the Application will use the API. Max Items 1 currently as
     * Operators do not support multiple.
     * 
     * @param purposes the purposes value to set.
     * @return the OperatorApiConnectionUpdate object itself.
     */
    public OperatorApiConnectionUpdate withPurposes(List<Purpose> purposes) {
        if (this.innerProperties() == null) {
            this.innerProperties = new OperatorApiConnectionUpdateProperties();
        }
        this.innerProperties().withPurposes(purposes);
        return this;
    }

    /**
     * Get the purposeReason property: Explanation of the reason that justifies the purpose: specifically why is the API
     * used for the application's use case.
     * 
     * @return the purposeReason value.
     */
    public String purposeReason() {
        return this.innerProperties() == null ? null : this.innerProperties().purposeReason();
    }

    /**
     * Set the purposeReason property: Explanation of the reason that justifies the purpose: specifically why is the API
     * used for the application's use case.
     * 
     * @param purposeReason the purposeReason value to set.
     * @return the OperatorApiConnectionUpdate object itself.
     */
    public OperatorApiConnectionUpdate withPurposeReason(String purposeReason) {
        if (this.innerProperties() == null) {
            this.innerProperties = new OperatorApiConnectionUpdateProperties();
        }
        this.innerProperties().withPurposeReason(purposeReason);
        return this;
    }

    /**
     * Get the dataProcessingList property: List of ways the data returned on this API is processed.
     * 
     * @return the dataProcessingList value.
     */
    public List<DataProcessing> dataProcessingList() {
        return this.innerProperties() == null ? null : this.innerProperties().dataProcessingList();
    }

    /**
     * Set the dataProcessingList property: List of ways the data returned on this API is processed.
     * 
     * @param dataProcessingList the dataProcessingList value to set.
     * @return the OperatorApiConnectionUpdate object itself.
     */
    public OperatorApiConnectionUpdate withDataProcessingList(List<DataProcessing> dataProcessingList) {
        if (this.innerProperties() == null) {
            this.innerProperties = new OperatorApiConnectionUpdateProperties();
        }
        this.innerProperties().withDataProcessingList(dataProcessingList);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeMapField("tags", this.tags, (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OperatorApiConnectionUpdate from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OperatorApiConnectionUpdate if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the OperatorApiConnectionUpdate.
     */
    public static OperatorApiConnectionUpdate fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OperatorApiConnectionUpdate deserializedOperatorApiConnectionUpdate = new OperatorApiConnectionUpdate();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedOperatorApiConnectionUpdate.tags = tags;
                } else if ("properties".equals(fieldName)) {
                    deserializedOperatorApiConnectionUpdate.innerProperties
                        = OperatorApiConnectionUpdateProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOperatorApiConnectionUpdate;
        });
    }
}
