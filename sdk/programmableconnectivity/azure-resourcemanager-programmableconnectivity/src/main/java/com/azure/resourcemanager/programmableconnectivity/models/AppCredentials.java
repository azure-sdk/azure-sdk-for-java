// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.programmableconnectivity.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Application credentials used to call the operator's Network APIs. */
@Fluent
public final class AppCredentials {
    /*
     * Application ID
     */
    @JsonProperty(value = "appId", required = true)
    private String appId;

    /*
     * Application Secret
     */
    @JsonProperty(value = "appSecret")
    private String appSecret;

    /** Creates an instance of AppCredentials class. */
    public AppCredentials() {
    }

    /**
     * Get the appId property: Application ID.
     *
     * @return the appId value.
     */
    public String appId() {
        return this.appId;
    }

    /**
     * Set the appId property: Application ID.
     *
     * @param appId the appId value to set.
     * @return the AppCredentials object itself.
     */
    public AppCredentials withAppId(String appId) {
        this.appId = appId;
        return this;
    }

    /**
     * Get the appSecret property: Application Secret.
     *
     * @return the appSecret value.
     */
    public String appSecret() {
        return this.appSecret;
    }

    /**
     * Set the appSecret property: Application Secret.
     *
     * @param appSecret the appSecret value to set.
     * @return the AppCredentials object itself.
     */
    public AppCredentials withAppSecret(String appSecret) {
        this.appSecret = appSecret;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (appId() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property appId in model AppCredentials"));
        }
        if (appSecret() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property appSecret in model AppCredentials"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(AppCredentials.class);
}
