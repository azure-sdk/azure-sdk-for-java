// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.programmableconnectivity.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.programmableconnectivity.fluent.models.OpenApiGatewayInner;
import com.azure.resourcemanager.programmableconnectivity.models.AccountType;
import com.azure.resourcemanager.programmableconnectivity.models.AppCredentials;
import com.azure.resourcemanager.programmableconnectivity.models.OpenApiGateway;
import com.azure.resourcemanager.programmableconnectivity.models.OpenApiGatewayUpdate;
import com.azure.resourcemanager.programmableconnectivity.models.ProvisioningState;
import java.util.Collections;
import java.util.List;
import java.util.Map;

public final class OpenApiGatewayImpl implements OpenApiGateway, OpenApiGateway.Definition, OpenApiGateway.Update {
    private OpenApiGatewayInner innerObject;

    private final com.azure.resourcemanager.programmableconnectivity.ProgrammableConnectivityManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public String gatewayId() {
        return this.innerModel().gatewayId();
    }

    public String openApiGatewayOfferingId() {
        return this.innerModel().openApiGatewayOfferingId();
    }

    public List<String> features() {
        List<String> inner = this.innerModel().features();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public AccountType accountType() {
        return this.innerModel().accountType();
    }

    public ProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public OpenApiGatewayInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.programmableconnectivity.ProgrammableConnectivityManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String name;

    private OpenApiGatewayUpdate updateProperties;

    public OpenApiGatewayImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public OpenApiGateway create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getOpenApiGateways()
                .createOrUpdate(resourceGroupName, name, this.innerModel(), Context.NONE);
        return this;
    }

    public OpenApiGateway create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getOpenApiGateways()
                .createOrUpdate(resourceGroupName, name, this.innerModel(), context);
        return this;
    }

    OpenApiGatewayImpl(
        String name,
        com.azure.resourcemanager.programmableconnectivity.ProgrammableConnectivityManager serviceManager) {
        this.innerObject = new OpenApiGatewayInner();
        this.serviceManager = serviceManager;
        this.name = name;
    }

    public OpenApiGatewayImpl update() {
        this.updateProperties = new OpenApiGatewayUpdate();
        return this;
    }

    public OpenApiGateway apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getOpenApiGateways()
                .update(resourceGroupName, name, updateProperties, Context.NONE);
        return this;
    }

    public OpenApiGateway apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getOpenApiGateways()
                .update(resourceGroupName, name, updateProperties, context);
        return this;
    }

    OpenApiGatewayImpl(
        OpenApiGatewayInner innerObject,
        com.azure.resourcemanager.programmableconnectivity.ProgrammableConnectivityManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.name = Utils.getValueFromIdByName(innerObject.id(), "openApiGateways");
    }

    public OpenApiGateway refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getOpenApiGateways()
                .getByResourceGroupWithResponse(resourceGroupName, name, Context.NONE)
                .getValue();
        return this;
    }

    public OpenApiGateway refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getOpenApiGateways()
                .getByResourceGroupWithResponse(resourceGroupName, name, context)
                .getValue();
        return this;
    }

    public void resetConnection(OpenApiGatewayInner body) {
        serviceManager.openApiGateways().resetConnection(resourceGroupName, name, body);
    }

    public void resetConnection(OpenApiGatewayInner body, Context context) {
        serviceManager.openApiGateways().resetConnection(resourceGroupName, name, body, context);
    }

    public void updateCredentials(AppCredentials body) {
        serviceManager.openApiGateways().updateCredentials(resourceGroupName, name, body);
    }

    public void updateCredentials(AppCredentials body, Context context) {
        serviceManager.openApiGateways().updateCredentials(resourceGroupName, name, body, context);
    }

    public OpenApiGatewayImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public OpenApiGatewayImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public OpenApiGatewayImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateProperties.withTags(tags);
            return this;
        }
    }

    public OpenApiGatewayImpl withGatewayId(String gatewayId) {
        if (isInCreateMode()) {
            this.innerModel().withGatewayId(gatewayId);
            return this;
        } else {
            this.updateProperties.withGatewayId(gatewayId);
            return this;
        }
    }

    public OpenApiGatewayImpl withOpenApiGatewayOfferingId(String openApiGatewayOfferingId) {
        if (isInCreateMode()) {
            this.innerModel().withOpenApiGatewayOfferingId(openApiGatewayOfferingId);
            return this;
        } else {
            this.updateProperties.withOpenApiGatewayOfferingId(openApiGatewayOfferingId);
            return this;
        }
    }

    public OpenApiGatewayImpl withFeatures(List<String> features) {
        if (isInCreateMode()) {
            this.innerModel().withFeatures(features);
            return this;
        } else {
            this.updateProperties.withFeatures(features);
            return this;
        }
    }

    public OpenApiGatewayImpl withAccountType(AccountType accountType) {
        if (isInCreateMode()) {
            this.innerModel().withAccountType(accountType);
            return this;
        } else {
            this.updateProperties.withAccountType(accountType);
            return this;
        }
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
