// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.programmableconnectivity.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.programmableconnectivity.models.MarketplaceProperties;
import com.azure.resourcemanager.programmableconnectivity.models.ProvisioningState;
import java.io.IOException;
import java.util.List;

/**
 * A Programmable Connectivity Operator API Plans resource. This is a readonly resource that indicates which Operator
 * Network APIs are available in the user's subscription.
 */
@Fluent
public final class OperatorApiPlanInner extends ProxyResource {
    /*
     * The resource-specific properties for this resource.
     */
    private OperatorApiPlanProperties innerProperties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of OperatorApiPlanInner class.
     */
    public OperatorApiPlanInner() {
    }

    /**
     * Get the innerProperties property: The resource-specific properties for this resource.
     * 
     * @return the innerProperties value.
     */
    private OperatorApiPlanProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the operatorName property: Name of the Operator this plan belongs to.
     * 
     * @return the operatorName value.
     */
    public String operatorName() {
        return this.innerProperties() == null ? null : this.innerProperties().operatorName();
    }

    /**
     * Set the operatorName property: Name of the Operator this plan belongs to.
     * 
     * @param operatorName the operatorName value to set.
     * @return the OperatorApiPlanInner object itself.
     */
    public OperatorApiPlanInner withOperatorName(String operatorName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new OperatorApiPlanProperties();
        }
        this.innerProperties().withOperatorName(operatorName);
        return this;
    }

    /**
     * Get the camaraApiName property: Standardized Network API name defined by CAMARA specifications.
     * 
     * @return the camaraApiName value.
     */
    public String camaraApiName() {
        return this.innerProperties() == null ? null : this.innerProperties().camaraApiName();
    }

    /**
     * Set the camaraApiName property: Standardized Network API name defined by CAMARA specifications.
     * 
     * @param camaraApiName the camaraApiName value to set.
     * @return the OperatorApiPlanInner object itself.
     */
    public OperatorApiPlanInner withCamaraApiName(String camaraApiName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new OperatorApiPlanProperties();
        }
        this.innerProperties().withCamaraApiName(camaraApiName);
        return this;
    }

    /**
     * Get the supportedLocations property: List of Azure regions where this offer is supported.
     * 
     * @return the supportedLocations value.
     */
    public List<String> supportedLocations() {
        return this.innerProperties() == null ? null : this.innerProperties().supportedLocations();
    }

    /**
     * Set the supportedLocations property: List of Azure regions where this offer is supported.
     * 
     * @param supportedLocations the supportedLocations value to set.
     * @return the OperatorApiPlanInner object itself.
     */
    public OperatorApiPlanInner withSupportedLocations(List<String> supportedLocations) {
        if (this.innerProperties() == null) {
            this.innerProperties = new OperatorApiPlanProperties();
        }
        this.innerProperties().withSupportedLocations(supportedLocations);
        return this;
    }

    /**
     * Get the operatorRegions property: List of country/region names where this plan is being supported by the
     * Operator.
     * 
     * @return the operatorRegions value.
     */
    public List<String> operatorRegions() {
        return this.innerProperties() == null ? null : this.innerProperties().operatorRegions();
    }

    /**
     * Set the operatorRegions property: List of country/region names where this plan is being supported by the
     * Operator.
     * 
     * @param operatorRegions the operatorRegions value to set.
     * @return the OperatorApiPlanInner object itself.
     */
    public OperatorApiPlanInner withOperatorRegions(List<String> operatorRegions) {
        if (this.innerProperties() == null) {
            this.innerProperties = new OperatorApiPlanProperties();
        }
        this.innerProperties().withOperatorRegions(operatorRegions);
        return this;
    }

    /**
     * Get the markets property: List of country/region names where this plan is being supported by Azure Marketplace.
     * 
     * @return the markets value.
     */
    public List<String> markets() {
        return this.innerProperties() == null ? null : this.innerProperties().markets();
    }

    /**
     * Set the markets property: List of country/region names where this plan is being supported by Azure Marketplace.
     * 
     * @param markets the markets value to set.
     * @return the OperatorApiPlanInner object itself.
     */
    public OperatorApiPlanInner withMarkets(List<String> markets) {
        if (this.innerProperties() == null) {
            this.innerProperties = new OperatorApiPlanProperties();
        }
        this.innerProperties().withMarkets(markets);
        return this;
    }

    /**
     * Get the limits property: The limits, if any, will be imposed by the operator.
     * 
     * @return the limits value.
     */
    public String limits() {
        return this.innerProperties() == null ? null : this.innerProperties().limits();
    }

    /**
     * Set the limits property: The limits, if any, will be imposed by the operator.
     * 
     * @param limits the limits value to set.
     * @return the OperatorApiPlanInner object itself.
     */
    public OperatorApiPlanInner withLimits(String limits) {
        if (this.innerProperties() == null) {
            this.innerProperties = new OperatorApiPlanProperties();
        }
        this.innerProperties().withLimits(limits);
        return this;
    }

    /**
     * Get the marketplaceProperties property: Azure marketplace properties for this plan.
     * 
     * @return the marketplaceProperties value.
     */
    public MarketplaceProperties marketplaceProperties() {
        return this.innerProperties() == null ? null : this.innerProperties().marketplaceProperties();
    }

    /**
     * Set the marketplaceProperties property: Azure marketplace properties for this plan.
     * 
     * @param marketplaceProperties the marketplaceProperties value to set.
     * @return the OperatorApiPlanInner object itself.
     */
    public OperatorApiPlanInner withMarketplaceProperties(MarketplaceProperties marketplaceProperties) {
        if (this.innerProperties() == null) {
            this.innerProperties = new OperatorApiPlanProperties();
        }
        this.innerProperties().withMarketplaceProperties(marketplaceProperties);
        return this;
    }

    /**
     * Get the provisioningState property: The status of the last operation on the Gateway resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OperatorApiPlanInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OperatorApiPlanInner if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the OperatorApiPlanInner.
     */
    public static OperatorApiPlanInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OperatorApiPlanInner deserializedOperatorApiPlanInner = new OperatorApiPlanInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedOperatorApiPlanInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedOperatorApiPlanInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedOperatorApiPlanInner.type = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedOperatorApiPlanInner.innerProperties = OperatorApiPlanProperties.fromJson(reader);
                } else if ("systemData".equals(fieldName)) {
                    deserializedOperatorApiPlanInner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOperatorApiPlanInner;
        });
    }
}
