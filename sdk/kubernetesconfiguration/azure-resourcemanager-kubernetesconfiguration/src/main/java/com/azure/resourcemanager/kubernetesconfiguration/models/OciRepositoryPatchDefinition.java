// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kubernetesconfiguration.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Parameters to reconcile to the OCIRepository source kind type.
 */
@Fluent
public final class OciRepositoryPatchDefinition {
    /*
     * The URL to sync for the flux configuration OCI repository.
     */
    @JsonProperty(value = "url")
    private String url;

    /*
     * The maximum time to attempt to reconcile the cluster OCI repository source with the remote.
     */
    @JsonProperty(value = "timeoutInSeconds")
    private Long timeoutInSeconds;

    /*
     * The interval at which to re-reconcile the cluster OCI repository source with the remote.
     */
    @JsonProperty(value = "syncIntervalInSeconds")
    private Long syncIntervalInSeconds;

    /*
     * The source reference for the OCIRepository object.
     */
    @JsonProperty(value = "repositoryRef")
    private OciRepositoryRefPatchDefinition repositoryRef;

    /*
     * The layer to be pulled from the OCI artifact.
     */
    @JsonProperty(value = "layerSelector")
    private LayerSelectorPatchDefinition layerSelector;

    /*
     * Verification of the authenticity of an OCI Artifact.
     */
    @JsonProperty(value = "verify")
    private VerifyPatchDefinition verify;

    /*
     * Specify whether to allow connecting to a non-TLS HTTP container registry.
     */
    @JsonProperty(value = "insecure")
    private Boolean insecure;

    /*
     * Specifies whether to use Workload Identity to authenticate with the OCI repository.
     */
    @JsonProperty(value = "useWorkloadIdentity")
    private Boolean useWorkloadIdentity;

    /*
     * The service account name to authenticate with the OCI repository.
     */
    @JsonProperty(value = "serviceAccountName")
    private String serviceAccountName;

    /*
     * Parameters to authenticate using TLS config for OCI repository.
     */
    @JsonProperty(value = "tlsConfig")
    private TlsConfigPatchDefinition tlsConfig;

    /*
     * Name of a local secret on the Kubernetes cluster to use as the authentication secret rather than the managed or
     * user-provided configuration secrets.
     */
    @JsonProperty(value = "localAuthRef")
    private String localAuthRef;

    /**
     * Creates an instance of OciRepositoryPatchDefinition class.
     */
    public OciRepositoryPatchDefinition() {
    }

    /**
     * Get the url property: The URL to sync for the flux configuration OCI repository.
     * 
     * @return the url value.
     */
    public String url() {
        return this.url;
    }

    /**
     * Set the url property: The URL to sync for the flux configuration OCI repository.
     * 
     * @param url the url value to set.
     * @return the OciRepositoryPatchDefinition object itself.
     */
    public OciRepositoryPatchDefinition withUrl(String url) {
        this.url = url;
        return this;
    }

    /**
     * Get the timeoutInSeconds property: The maximum time to attempt to reconcile the cluster OCI repository source
     * with the remote.
     * 
     * @return the timeoutInSeconds value.
     */
    public Long timeoutInSeconds() {
        return this.timeoutInSeconds;
    }

    /**
     * Set the timeoutInSeconds property: The maximum time to attempt to reconcile the cluster OCI repository source
     * with the remote.
     * 
     * @param timeoutInSeconds the timeoutInSeconds value to set.
     * @return the OciRepositoryPatchDefinition object itself.
     */
    public OciRepositoryPatchDefinition withTimeoutInSeconds(Long timeoutInSeconds) {
        this.timeoutInSeconds = timeoutInSeconds;
        return this;
    }

    /**
     * Get the syncIntervalInSeconds property: The interval at which to re-reconcile the cluster OCI repository source
     * with the remote.
     * 
     * @return the syncIntervalInSeconds value.
     */
    public Long syncIntervalInSeconds() {
        return this.syncIntervalInSeconds;
    }

    /**
     * Set the syncIntervalInSeconds property: The interval at which to re-reconcile the cluster OCI repository source
     * with the remote.
     * 
     * @param syncIntervalInSeconds the syncIntervalInSeconds value to set.
     * @return the OciRepositoryPatchDefinition object itself.
     */
    public OciRepositoryPatchDefinition withSyncIntervalInSeconds(Long syncIntervalInSeconds) {
        this.syncIntervalInSeconds = syncIntervalInSeconds;
        return this;
    }

    /**
     * Get the repositoryRef property: The source reference for the OCIRepository object.
     * 
     * @return the repositoryRef value.
     */
    public OciRepositoryRefPatchDefinition repositoryRef() {
        return this.repositoryRef;
    }

    /**
     * Set the repositoryRef property: The source reference for the OCIRepository object.
     * 
     * @param repositoryRef the repositoryRef value to set.
     * @return the OciRepositoryPatchDefinition object itself.
     */
    public OciRepositoryPatchDefinition withRepositoryRef(OciRepositoryRefPatchDefinition repositoryRef) {
        this.repositoryRef = repositoryRef;
        return this;
    }

    /**
     * Get the layerSelector property: The layer to be pulled from the OCI artifact.
     * 
     * @return the layerSelector value.
     */
    public LayerSelectorPatchDefinition layerSelector() {
        return this.layerSelector;
    }

    /**
     * Set the layerSelector property: The layer to be pulled from the OCI artifact.
     * 
     * @param layerSelector the layerSelector value to set.
     * @return the OciRepositoryPatchDefinition object itself.
     */
    public OciRepositoryPatchDefinition withLayerSelector(LayerSelectorPatchDefinition layerSelector) {
        this.layerSelector = layerSelector;
        return this;
    }

    /**
     * Get the verify property: Verification of the authenticity of an OCI Artifact.
     * 
     * @return the verify value.
     */
    public VerifyPatchDefinition verify() {
        return this.verify;
    }

    /**
     * Set the verify property: Verification of the authenticity of an OCI Artifact.
     * 
     * @param verify the verify value to set.
     * @return the OciRepositoryPatchDefinition object itself.
     */
    public OciRepositoryPatchDefinition withVerify(VerifyPatchDefinition verify) {
        this.verify = verify;
        return this;
    }

    /**
     * Get the insecure property: Specify whether to allow connecting to a non-TLS HTTP container registry.
     * 
     * @return the insecure value.
     */
    public Boolean insecure() {
        return this.insecure;
    }

    /**
     * Set the insecure property: Specify whether to allow connecting to a non-TLS HTTP container registry.
     * 
     * @param insecure the insecure value to set.
     * @return the OciRepositoryPatchDefinition object itself.
     */
    public OciRepositoryPatchDefinition withInsecure(Boolean insecure) {
        this.insecure = insecure;
        return this;
    }

    /**
     * Get the useWorkloadIdentity property: Specifies whether to use Workload Identity to authenticate with the OCI
     * repository.
     * 
     * @return the useWorkloadIdentity value.
     */
    public Boolean useWorkloadIdentity() {
        return this.useWorkloadIdentity;
    }

    /**
     * Set the useWorkloadIdentity property: Specifies whether to use Workload Identity to authenticate with the OCI
     * repository.
     * 
     * @param useWorkloadIdentity the useWorkloadIdentity value to set.
     * @return the OciRepositoryPatchDefinition object itself.
     */
    public OciRepositoryPatchDefinition withUseWorkloadIdentity(Boolean useWorkloadIdentity) {
        this.useWorkloadIdentity = useWorkloadIdentity;
        return this;
    }

    /**
     * Get the serviceAccountName property: The service account name to authenticate with the OCI repository.
     * 
     * @return the serviceAccountName value.
     */
    public String serviceAccountName() {
        return this.serviceAccountName;
    }

    /**
     * Set the serviceAccountName property: The service account name to authenticate with the OCI repository.
     * 
     * @param serviceAccountName the serviceAccountName value to set.
     * @return the OciRepositoryPatchDefinition object itself.
     */
    public OciRepositoryPatchDefinition withServiceAccountName(String serviceAccountName) {
        this.serviceAccountName = serviceAccountName;
        return this;
    }

    /**
     * Get the tlsConfig property: Parameters to authenticate using TLS config for OCI repository.
     * 
     * @return the tlsConfig value.
     */
    public TlsConfigPatchDefinition tlsConfig() {
        return this.tlsConfig;
    }

    /**
     * Set the tlsConfig property: Parameters to authenticate using TLS config for OCI repository.
     * 
     * @param tlsConfig the tlsConfig value to set.
     * @return the OciRepositoryPatchDefinition object itself.
     */
    public OciRepositoryPatchDefinition withTlsConfig(TlsConfigPatchDefinition tlsConfig) {
        this.tlsConfig = tlsConfig;
        return this;
    }

    /**
     * Get the localAuthRef property: Name of a local secret on the Kubernetes cluster to use as the authentication
     * secret rather than the managed or user-provided configuration secrets.
     * 
     * @return the localAuthRef value.
     */
    public String localAuthRef() {
        return this.localAuthRef;
    }

    /**
     * Set the localAuthRef property: Name of a local secret on the Kubernetes cluster to use as the authentication
     * secret rather than the managed or user-provided configuration secrets.
     * 
     * @param localAuthRef the localAuthRef value to set.
     * @return the OciRepositoryPatchDefinition object itself.
     */
    public OciRepositoryPatchDefinition withLocalAuthRef(String localAuthRef) {
        this.localAuthRef = localAuthRef;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (repositoryRef() != null) {
            repositoryRef().validate();
        }
        if (layerSelector() != null) {
            layerSelector().validate();
        }
        if (verify() != null) {
            verify().validate();
        }
        if (tlsConfig() != null) {
            tlsConfig().validate();
        }
    }
}
