// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kubernetesconfiguration.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/**
 * Parameters to verify the authenticity of an OCI Artifact.
 */
@Fluent
public final class VerifyPatchDefinition {
    /*
     * Verification provider name.
     */
    @JsonProperty(value = "provider")
    private String provider;

    /*
     * An object containing trusted public keys of trusted authors.
     */
    @JsonProperty(value = "verificationConfig")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, String> verificationConfig;

    /*
     * Array defining the criteria for matching the OIDC identity while verifying an OCI artifact.
     */
    @JsonProperty(value = "matchOidcIdentity")
    private List<MatchOidcIdentityPatchDefinition> matchOidcIdentity;

    /**
     * Creates an instance of VerifyPatchDefinition class.
     */
    public VerifyPatchDefinition() {
    }

    /**
     * Get the provider property: Verification provider name.
     * 
     * @return the provider value.
     */
    public String provider() {
        return this.provider;
    }

    /**
     * Set the provider property: Verification provider name.
     * 
     * @param provider the provider value to set.
     * @return the VerifyPatchDefinition object itself.
     */
    public VerifyPatchDefinition withProvider(String provider) {
        this.provider = provider;
        return this;
    }

    /**
     * Get the verificationConfig property: An object containing trusted public keys of trusted authors.
     * 
     * @return the verificationConfig value.
     */
    public Map<String, String> verificationConfig() {
        return this.verificationConfig;
    }

    /**
     * Set the verificationConfig property: An object containing trusted public keys of trusted authors.
     * 
     * @param verificationConfig the verificationConfig value to set.
     * @return the VerifyPatchDefinition object itself.
     */
    public VerifyPatchDefinition withVerificationConfig(Map<String, String> verificationConfig) {
        this.verificationConfig = verificationConfig;
        return this;
    }

    /**
     * Get the matchOidcIdentity property: Array defining the criteria for matching the OIDC identity while verifying an
     * OCI artifact.
     * 
     * @return the matchOidcIdentity value.
     */
    public List<MatchOidcIdentityPatchDefinition> matchOidcIdentity() {
        return this.matchOidcIdentity;
    }

    /**
     * Set the matchOidcIdentity property: Array defining the criteria for matching the OIDC identity while verifying an
     * OCI artifact.
     * 
     * @param matchOidcIdentity the matchOidcIdentity value to set.
     * @return the VerifyPatchDefinition object itself.
     */
    public VerifyPatchDefinition withMatchOidcIdentity(List<MatchOidcIdentityPatchDefinition> matchOidcIdentity) {
        this.matchOidcIdentity = matchOidcIdentity;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (matchOidcIdentity() != null) {
            matchOidcIdentity().forEach(e -> e.validate());
        }
    }
}
