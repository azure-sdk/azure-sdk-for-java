// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.servicenetworking.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.servicenetworking.fluent.models.TrafficControllerInner;
import com.azure.resourcemanager.servicenetworking.models.SecurityPolicyConfigurations;
import com.azure.resourcemanager.servicenetworking.models.TrafficControllerProperties;
import com.azure.resourcemanager.servicenetworking.models.WafSecurityPolicy;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class TrafficControllerInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        TrafficControllerInner model = BinaryData.fromString(
            "{\"properties\":{\"configurationEndpoints\":[\"ol\",\"p\"],\"frontends\":[{\"id\":\"algbquxigjyjg\"}],\"associations\":[{\"id\":\"o\"},{\"id\":\"fhrtxilnerkujysv\"},{\"id\":\"eju\"},{\"id\":\"fqawrlyxw\"}],\"securityPolicies\":[{\"id\":\"prbnwbxgjvtbv\"}],\"securityPolicyConfigurations\":{\"wafSecurityPolicy\":{\"id\":\"szdnr\"}},\"provisioningState\":\"Canceled\"},\"location\":\"uhmuouqfprwzwbn\",\"tags\":{\"zga\":\"tnwu\",\"fizuckyf\":\"x\",\"idf\":\"hr\",\"ymwisdkft\":\"zwdzuh\"},\"id\":\"wxmnteiwao\",\"name\":\"vkmijcmmxdcuf\",\"type\":\"fsrpymzidnse\"}")
            .toObject(TrafficControllerInner.class);
        Assertions.assertEquals("uhmuouqfprwzwbn", model.location());
        Assertions.assertEquals("tnwu", model.tags().get("zga"));
        Assertions.assertEquals("szdnr", model.properties().securityPolicyConfigurations().wafSecurityPolicy().id());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        TrafficControllerInner model = new TrafficControllerInner().withLocation("uhmuouqfprwzwbn")
            .withTags(mapOf("zga", "tnwu", "fizuckyf", "x", "idf", "hr", "ymwisdkft", "zwdzuh"))
            .withProperties(new TrafficControllerProperties().withSecurityPolicyConfigurations(
                new SecurityPolicyConfigurations().withWafSecurityPolicy(new WafSecurityPolicy().withId("szdnr"))));
        model = BinaryData.fromObject(model).toObject(TrafficControllerInner.class);
        Assertions.assertEquals("uhmuouqfprwzwbn", model.location());
        Assertions.assertEquals("tnwu", model.tags().get("zga"));
        Assertions.assertEquals("szdnr", model.properties().securityPolicyConfigurations().wafSecurityPolicy().id());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
