// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.servicenetworking.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.servicenetworking.TrafficControllerManager;
import com.azure.resourcemanager.servicenetworking.models.SecurityPolicyConfigurations;
import com.azure.resourcemanager.servicenetworking.models.TrafficController;
import com.azure.resourcemanager.servicenetworking.models.TrafficControllerProperties;
import com.azure.resourcemanager.servicenetworking.models.WafSecurityPolicy;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class TrafficControllerInterfacesCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"configurationEndpoints\":[\"jvp\",\"jqg\"],\"frontends\":[{\"id\":\"mocmbqfqvmk\"},{\"id\":\"xozap\"}],\"associations\":[{\"id\":\"lxprglyatddckcbc\"},{\"id\":\"ejrjxgciqibrho\"},{\"id\":\"xsdqrhzoymibmrqy\"},{\"id\":\"bahwfl\"}],\"securityPolicies\":[{\"id\":\"dtmhrkwofyyvoqa\"},{\"id\":\"piexpbtgiw\"},{\"id\":\"wo\"}],\"securityPolicyConfigurations\":{\"wafSecurityPolicy\":{\"id\":\"ashrt\"}},\"provisioningState\":\"Succeeded\"},\"location\":\"nqxwbp\",\"tags\":{\"ipqiiobyuqerpq\":\"lpiujwaa\",\"fbtkuwhhmhyk\":\"pqwcciuqgbdbutau\"},\"id\":\"joxafnndlpi\",\"name\":\"hkoymkcdyhbp\",\"type\":\"kpw\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        TrafficControllerManager manager = TrafficControllerManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        TrafficController response = manager.trafficControllerInterfaces()
            .define("lvpnpp")
            .withRegion("wuoegrpk")
            .withExistingResourceGroup("a")
            .withTags(mapOf("pdggkzzlvm", "niyqslui", "fvmwy", "mpaxmodfvuefywsb", "yzvqt", "rfouyftaakcpw"))
            .withProperties(new TrafficControllerProperties().withSecurityPolicyConfigurations(
                new SecurityPolicyConfigurations().withWafSecurityPolicy(new WafSecurityPolicy().withId("xcxrsl"))))
            .create();

        Assertions.assertEquals("nqxwbp", response.location());
        Assertions.assertEquals("lpiujwaa", response.tags().get("ipqiiobyuqerpq"));
        Assertions.assertEquals("ashrt", response.properties().securityPolicyConfigurations().wafSecurityPolicy().id());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
