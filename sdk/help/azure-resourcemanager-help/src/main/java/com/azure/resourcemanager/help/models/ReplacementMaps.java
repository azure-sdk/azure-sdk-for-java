// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.help.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Solution replacement maps.
 */
@Immutable
public final class ReplacementMaps implements JsonSerializable<ReplacementMaps> {
    /*
     * Solution AzureKB results
     */
    private List<WebResult> webResults;

    /*
     * Solution diagnostics results.
     */
    private List<SolutionsDiagnostic> diagnostics;

    /*
     * Solutions Troubleshooters
     */
    private List<SolutionsTroubleshooters> troubleshooters;

    /*
     * Solution metrics based charts
     */
    private List<MetricsBasedChart> metricsBasedCharts;

    /*
     * Video solutions, which have the power to engage the customer by stimulating their senses
     */
    private List<Video> videos;

    /*
     * Group of Videos
     */
    private List<VideoGroup> videoGroups;

    /**
     * Creates an instance of ReplacementMaps class.
     */
    private ReplacementMaps() {
    }

    /**
     * Get the webResults property: Solution AzureKB results.
     * 
     * @return the webResults value.
     */
    public List<WebResult> webResults() {
        return this.webResults;
    }

    /**
     * Get the diagnostics property: Solution diagnostics results.
     * 
     * @return the diagnostics value.
     */
    public List<SolutionsDiagnostic> diagnostics() {
        return this.diagnostics;
    }

    /**
     * Get the troubleshooters property: Solutions Troubleshooters.
     * 
     * @return the troubleshooters value.
     */
    public List<SolutionsTroubleshooters> troubleshooters() {
        return this.troubleshooters;
    }

    /**
     * Get the metricsBasedCharts property: Solution metrics based charts.
     * 
     * @return the metricsBasedCharts value.
     */
    public List<MetricsBasedChart> metricsBasedCharts() {
        return this.metricsBasedCharts;
    }

    /**
     * Get the videos property: Video solutions, which have the power to engage the customer by stimulating their
     * senses.
     * 
     * @return the videos value.
     */
    public List<Video> videos() {
        return this.videos;
    }

    /**
     * Get the videoGroups property: Group of Videos.
     * 
     * @return the videoGroups value.
     */
    public List<VideoGroup> videoGroups() {
        return this.videoGroups;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (webResults() != null) {
            webResults().forEach(e -> e.validate());
        }
        if (diagnostics() != null) {
            diagnostics().forEach(e -> e.validate());
        }
        if (troubleshooters() != null) {
            troubleshooters().forEach(e -> e.validate());
        }
        if (metricsBasedCharts() != null) {
            metricsBasedCharts().forEach(e -> e.validate());
        }
        if (videos() != null) {
            videos().forEach(e -> e.validate());
        }
        if (videoGroups() != null) {
            videoGroups().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("webResults", this.webResults, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("diagnostics", this.diagnostics, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("troubleshooters", this.troubleshooters,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("metricsBasedCharts", this.metricsBasedCharts,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("videos", this.videos, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("videoGroups", this.videoGroups, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ReplacementMaps from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ReplacementMaps if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ReplacementMaps.
     */
    public static ReplacementMaps fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ReplacementMaps deserializedReplacementMaps = new ReplacementMaps();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("webResults".equals(fieldName)) {
                    List<WebResult> webResults = reader.readArray(reader1 -> WebResult.fromJson(reader1));
                    deserializedReplacementMaps.webResults = webResults;
                } else if ("diagnostics".equals(fieldName)) {
                    List<SolutionsDiagnostic> diagnostics
                        = reader.readArray(reader1 -> SolutionsDiagnostic.fromJson(reader1));
                    deserializedReplacementMaps.diagnostics = diagnostics;
                } else if ("troubleshooters".equals(fieldName)) {
                    List<SolutionsTroubleshooters> troubleshooters
                        = reader.readArray(reader1 -> SolutionsTroubleshooters.fromJson(reader1));
                    deserializedReplacementMaps.troubleshooters = troubleshooters;
                } else if ("metricsBasedCharts".equals(fieldName)) {
                    List<MetricsBasedChart> metricsBasedCharts
                        = reader.readArray(reader1 -> MetricsBasedChart.fromJson(reader1));
                    deserializedReplacementMaps.metricsBasedCharts = metricsBasedCharts;
                } else if ("videos".equals(fieldName)) {
                    List<Video> videos = reader.readArray(reader1 -> Video.fromJson(reader1));
                    deserializedReplacementMaps.videos = videos;
                } else if ("videoGroups".equals(fieldName)) {
                    List<VideoGroup> videoGroups = reader.readArray(reader1 -> VideoGroup.fromJson(reader1));
                    deserializedReplacementMaps.videoGroups = videoGroups;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedReplacementMaps;
        });
    }
}
