// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.help.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.help.fluent.DiagnosticResourcesClient;
import com.azure.resourcemanager.help.fluent.models.DiagnosticResourceInner;
import com.azure.resourcemanager.help.models.DiagnosticResource;
import com.azure.resourcemanager.help.models.DiagnosticResources;

public final class DiagnosticResourcesImpl implements DiagnosticResources {
    private static final ClientLogger LOGGER = new ClientLogger(DiagnosticResourcesImpl.class);

    private final DiagnosticResourcesClient innerClient;

    private final com.azure.resourcemanager.help.HelpManager serviceManager;

    public DiagnosticResourcesImpl(DiagnosticResourcesClient innerClient,
        com.azure.resourcemanager.help.HelpManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<DiagnosticResource> getWithResponse(String scope, String diagnosticsResourceName, Context context) {
        Response<DiagnosticResourceInner> inner
            = this.serviceClient().getWithResponse(scope, diagnosticsResourceName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new DiagnosticResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public DiagnosticResource get(String scope, String diagnosticsResourceName) {
        DiagnosticResourceInner inner = this.serviceClient().get(scope, diagnosticsResourceName);
        if (inner != null) {
            return new DiagnosticResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public DiagnosticResource getById(String id) {
        String scope = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{scope}/providers/Microsoft.Help/diagnostics/{diagnosticsResourceName}", "scope");
        if (scope == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'scope'.", id)));
        }
        String diagnosticsResourceName = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{scope}/providers/Microsoft.Help/diagnostics/{diagnosticsResourceName}", "diagnosticsResourceName");
        if (diagnosticsResourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'diagnostics'.", id)));
        }
        return this.getWithResponse(scope, diagnosticsResourceName, Context.NONE).getValue();
    }

    public Response<DiagnosticResource> getByIdWithResponse(String id, Context context) {
        String scope = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{scope}/providers/Microsoft.Help/diagnostics/{diagnosticsResourceName}", "scope");
        if (scope == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'scope'.", id)));
        }
        String diagnosticsResourceName = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{scope}/providers/Microsoft.Help/diagnostics/{diagnosticsResourceName}", "diagnosticsResourceName");
        if (diagnosticsResourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'diagnostics'.", id)));
        }
        return this.getWithResponse(scope, diagnosticsResourceName, context);
    }

    private DiagnosticResourcesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.help.HelpManager manager() {
        return this.serviceManager;
    }

    public DiagnosticResourceImpl define(String name) {
        return new DiagnosticResourceImpl(name, this.manager());
    }
}
