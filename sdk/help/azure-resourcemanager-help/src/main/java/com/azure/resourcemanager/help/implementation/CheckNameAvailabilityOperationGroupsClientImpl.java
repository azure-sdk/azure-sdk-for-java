// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.help.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.help.fluent.CheckNameAvailabilityOperationGroupsClient;
import com.azure.resourcemanager.help.fluent.models.CheckNameAvailabilityResponseInner;
import com.azure.resourcemanager.help.models.CheckNameAvailabilityRequest;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in
 * CheckNameAvailabilityOperationGroupsClient.
 */
public final class CheckNameAvailabilityOperationGroupsClientImpl
    implements CheckNameAvailabilityOperationGroupsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final CheckNameAvailabilityOperationGroupsService service;

    /**
     * The service client containing this operation class.
     */
    private final HelpClientImpl client;

    /**
     * Initializes an instance of CheckNameAvailabilityOperationGroupsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    CheckNameAvailabilityOperationGroupsClientImpl(HelpClientImpl client) {
        this.service = RestProxy.create(CheckNameAvailabilityOperationGroupsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for HelpClientCheckNameAvailabilityOperationGroups to be used by the
     * proxy service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "HelpClientCheckNameA")
    public interface CheckNameAvailabilityOperationGroupsService {
        @Headers({ "Content-Type: application/json" })
        @Post("/{scope}/providers/Microsoft.Help/checkNameAvailability")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<CheckNameAvailabilityResponseInner>> checkAvailability(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam(value = "scope", encoded = true) String scope,
            @HeaderParam("Accept") String accept,
            @BodyParam("application/json") CheckNameAvailabilityRequest checkNameAvailabilityRequest, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/{scope}/providers/Microsoft.Help/checkNameAvailability")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<CheckNameAvailabilityResponseInner> checkAvailabilitySync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam(value = "scope", encoded = true) String scope,
            @HeaderParam("Accept") String accept,
            @BodyParam("application/json") CheckNameAvailabilityRequest checkNameAvailabilityRequest, Context context);
    }

    /**
     * This API is used to check the uniqueness of a resource name used for a diagnostic, troubleshooter or solutions.
     * 
     * @param scope The fully qualified Azure Resource manager identifier of the resource.
     * @param checkNameAvailabilityRequest The required parameters for availability check.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for whether the requested resource name is available or not along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<CheckNameAvailabilityResponseInner>> checkAvailabilityWithResponseAsync(String scope,
        CheckNameAvailabilityRequest checkNameAvailabilityRequest) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (checkNameAvailabilityRequest != null) {
            checkNameAvailabilityRequest.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.checkAvailability(this.client.getEndpoint(), this.client.getApiVersion(),
                scope, accept, checkNameAvailabilityRequest, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * This API is used to check the uniqueness of a resource name used for a diagnostic, troubleshooter or solutions.
     * 
     * @param scope The fully qualified Azure Resource manager identifier of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for whether the requested resource name is available or not on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<CheckNameAvailabilityResponseInner> checkAvailabilityAsync(String scope) {
        final CheckNameAvailabilityRequest checkNameAvailabilityRequest = null;
        return checkAvailabilityWithResponseAsync(scope, checkNameAvailabilityRequest)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * This API is used to check the uniqueness of a resource name used for a diagnostic, troubleshooter or solutions.
     * 
     * @param scope The fully qualified Azure Resource manager identifier of the resource.
     * @param checkNameAvailabilityRequest The required parameters for availability check.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for whether the requested resource name is available or not along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<CheckNameAvailabilityResponseInner> checkAvailabilityWithResponse(String scope,
        CheckNameAvailabilityRequest checkNameAvailabilityRequest, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            throw LOGGER.atError().log(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (checkNameAvailabilityRequest != null) {
            checkNameAvailabilityRequest.validate();
        }
        final String accept = "application/json";
        return service.checkAvailabilitySync(this.client.getEndpoint(), this.client.getApiVersion(), scope, accept,
            checkNameAvailabilityRequest, context);
    }

    /**
     * This API is used to check the uniqueness of a resource name used for a diagnostic, troubleshooter or solutions.
     * 
     * @param scope The fully qualified Azure Resource manager identifier of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for whether the requested resource name is available or not.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CheckNameAvailabilityResponseInner checkAvailability(String scope) {
        final CheckNameAvailabilityRequest checkNameAvailabilityRequest = null;
        return checkAvailabilityWithResponse(scope, checkNameAvailabilityRequest, Context.NONE).getValue();
    }

    private static final ClientLogger LOGGER = new ClientLogger(CheckNameAvailabilityOperationGroupsClientImpl.class);
}
