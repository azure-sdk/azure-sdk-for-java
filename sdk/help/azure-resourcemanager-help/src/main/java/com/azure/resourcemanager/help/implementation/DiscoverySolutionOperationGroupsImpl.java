// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.help.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.help.fluent.DiscoverySolutionOperationGroupsClient;
import com.azure.resourcemanager.help.fluent.models.SolutionMetadataResourceInner;
import com.azure.resourcemanager.help.models.DiscoverySolutionOperationGroups;
import com.azure.resourcemanager.help.models.SolutionMetadataResource;

public final class DiscoverySolutionOperationGroupsImpl implements DiscoverySolutionOperationGroups {
    private static final ClientLogger LOGGER = new ClientLogger(DiscoverySolutionOperationGroupsImpl.class);

    private final DiscoverySolutionOperationGroupsClient innerClient;

    private final com.azure.resourcemanager.help.HelpManager serviceManager;

    public DiscoverySolutionOperationGroupsImpl(DiscoverySolutionOperationGroupsClient innerClient,
        com.azure.resourcemanager.help.HelpManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<SolutionMetadataResource> list() {
        PagedIterable<SolutionMetadataResourceInner> inner = this.serviceClient().list();
        return ResourceManagerUtils.mapPage(inner, inner1 -> new SolutionMetadataResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<SolutionMetadataResource> list(String filter, String skiptoken, Context context) {
        PagedIterable<SolutionMetadataResourceInner> inner = this.serviceClient().list(filter, skiptoken, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new SolutionMetadataResourceImpl(inner1, this.manager()));
    }

    private DiscoverySolutionOperationGroupsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.help.HelpManager manager() {
        return this.serviceManager;
    }
}
