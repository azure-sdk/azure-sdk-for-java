// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.help.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.help.fluent.SolutionResourcesClient;
import com.azure.resourcemanager.help.fluent.models.SolutionResourceInner;
import com.azure.resourcemanager.help.models.SolutionPatchRequestBody;
import com.azure.resourcemanager.help.models.SolutionWarmUpRequestBody;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in SolutionResourcesClient.
 */
public final class SolutionResourcesClientImpl implements SolutionResourcesClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final SolutionResourcesService service;

    /**
     * The service client containing this operation class.
     */
    private final HelpClientImpl client;

    /**
     * Initializes an instance of SolutionResourcesClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    SolutionResourcesClientImpl(HelpClientImpl client) {
        this.service
            = RestProxy.create(SolutionResourcesService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for HelpClientSolutionResources to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "HelpClientSolutionRe")
    public interface SolutionResourcesService {
        @Headers({ "Content-Type: application/json" })
        @Get("/{scope}/providers/Microsoft.Help/solutions/{solutionResourceName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SolutionResourceInner>> get(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam(value = "scope", encoded = true) String scope,
            @PathParam("solutionResourceName") String solutionResourceName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/{scope}/providers/Microsoft.Help/solutions/{solutionResourceName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<SolutionResourceInner> getSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam(value = "scope", encoded = true) String scope,
            @PathParam("solutionResourceName") String solutionResourceName, @HeaderParam("Accept") String accept,
            Context context);

        @Put("/{scope}/providers/Microsoft.Help/solutions/{solutionResourceName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> create(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam(value = "scope", encoded = true) String scope,
            @PathParam("solutionResourceName") String solutionResourceName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") SolutionResourceInner solutionRequestBody, Context context);

        @Put("/{scope}/providers/Microsoft.Help/solutions/{solutionResourceName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> createSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam(value = "scope", encoded = true) String scope,
            @PathParam("solutionResourceName") String solutionResourceName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") SolutionResourceInner solutionRequestBody, Context context);

        @Patch("/{scope}/providers/Microsoft.Help/solutions/{solutionResourceName}")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> update(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam(value = "scope", encoded = true) String scope,
            @PathParam("solutionResourceName") String solutionResourceName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") SolutionPatchRequestBody solutionPatchRequestBody, Context context);

        @Patch("/{scope}/providers/Microsoft.Help/solutions/{solutionResourceName}")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> updateSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam(value = "scope", encoded = true) String scope,
            @PathParam("solutionResourceName") String solutionResourceName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") SolutionPatchRequestBody solutionPatchRequestBody, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/{scope}/providers/Microsoft.Help/solutions/{solutionResourceName}/warmup")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> warmUp(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam(value = "scope", encoded = true) String scope,
            @PathParam("solutionResourceName") String solutionResourceName, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") SolutionWarmUpRequestBody solutionWarmUpRequestBody, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/{scope}/providers/Microsoft.Help/solutions/{solutionResourceName}/warmup")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<Void> warmUpSync(@HostParam("endpoint") String endpoint, @QueryParam("api-version") String apiVersion,
            @PathParam(value = "scope", encoded = true) String scope,
            @PathParam("solutionResourceName") String solutionResourceName, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") SolutionWarmUpRequestBody solutionWarmUpRequestBody, Context context);
    }

    /**
     * Get the solution using the applicable solutionResourceName while creating the solution.
     * 
     * @param scope The fully qualified Azure Resource manager identifier of the resource.
     * @param solutionResourceName Solution resource Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the solution using the applicable solutionResourceName while creating the solution along with
     * {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SolutionResourceInner>> getWithResponseAsync(String scope, String solutionResourceName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (solutionResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter solutionResourceName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), this.client.getApiVersion(), scope,
                solutionResourceName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the solution using the applicable solutionResourceName while creating the solution.
     * 
     * @param scope The fully qualified Azure Resource manager identifier of the resource.
     * @param solutionResourceName Solution resource Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the solution using the applicable solutionResourceName while creating the solution on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SolutionResourceInner> getAsync(String scope, String solutionResourceName) {
        return getWithResponseAsync(scope, solutionResourceName).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get the solution using the applicable solutionResourceName while creating the solution.
     * 
     * @param scope The fully qualified Azure Resource manager identifier of the resource.
     * @param solutionResourceName Solution resource Name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the solution using the applicable solutionResourceName while creating the solution along with
     * {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SolutionResourceInner> getWithResponse(String scope, String solutionResourceName, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            throw LOGGER.atError().log(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (solutionResourceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter solutionResourceName is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.getSync(this.client.getEndpoint(), this.client.getApiVersion(), scope, solutionResourceName,
            accept, context);
    }

    /**
     * Get the solution using the applicable solutionResourceName while creating the solution.
     * 
     * @param scope The fully qualified Azure Resource manager identifier of the resource.
     * @param solutionResourceName Solution resource Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the solution using the applicable solutionResourceName while creating the solution.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SolutionResourceInner get(String scope, String solutionResourceName) {
        return getWithResponse(scope, solutionResourceName, Context.NONE).getValue();
    }

    /**
     * Creates a solution for the specific Azure resource or subscription using the inputs ‘solutionId and
     * requiredInputs’ from discovery solutions. &lt;br/&gt; Azure solutions comprise a comprehensive library of
     * self-help resources that have been thoughtfully curated by Azure engineers to aid customers in resolving typical
     * troubleshooting issues. These solutions encompass: &lt;br/&gt; (1.) Dynamic and context-aware diagnostics, guided
     * troubleshooting wizards, and data visualizations. &lt;br/&gt; (2.) Rich instructional video tutorials and
     * illustrative diagrams and images. &lt;br/&gt; (3.) Thoughtfully assembled textual troubleshooting instructions.
     * &lt;br/&gt; All these components are seamlessly converged into unified solutions tailored to address a specific
     * support problem area.
     * 
     * @param scope The fully qualified Azure Resource manager identifier of the resource.
     * @param solutionResourceName Solution resource Name.
     * @param solutionRequestBody The required request body for this solution resource creation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return solution response along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createWithResponseAsync(String scope, String solutionResourceName,
        SolutionResourceInner solutionRequestBody) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (solutionResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter solutionResourceName is required and cannot be null."));
        }
        if (solutionRequestBody == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter solutionRequestBody is required and cannot be null."));
        } else {
            solutionRequestBody.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.create(this.client.getEndpoint(), this.client.getApiVersion(), scope,
                solutionResourceName, contentType, accept, solutionRequestBody, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Creates a solution for the specific Azure resource or subscription using the inputs ‘solutionId and
     * requiredInputs’ from discovery solutions. &lt;br/&gt; Azure solutions comprise a comprehensive library of
     * self-help resources that have been thoughtfully curated by Azure engineers to aid customers in resolving typical
     * troubleshooting issues. These solutions encompass: &lt;br/&gt; (1.) Dynamic and context-aware diagnostics, guided
     * troubleshooting wizards, and data visualizations. &lt;br/&gt; (2.) Rich instructional video tutorials and
     * illustrative diagrams and images. &lt;br/&gt; (3.) Thoughtfully assembled textual troubleshooting instructions.
     * &lt;br/&gt; All these components are seamlessly converged into unified solutions tailored to address a specific
     * support problem area.
     * 
     * @param scope The fully qualified Azure Resource manager identifier of the resource.
     * @param solutionResourceName Solution resource Name.
     * @param solutionRequestBody The required request body for this solution resource creation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return solution response along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> createWithResponse(String scope, String solutionResourceName,
        SolutionResourceInner solutionRequestBody) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            throw LOGGER.atError().log(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (solutionResourceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter solutionResourceName is required and cannot be null."));
        }
        if (solutionRequestBody == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter solutionRequestBody is required and cannot be null."));
        } else {
            solutionRequestBody.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.createSync(this.client.getEndpoint(), this.client.getApiVersion(), scope, solutionResourceName,
            contentType, accept, solutionRequestBody, Context.NONE);
    }

    /**
     * Creates a solution for the specific Azure resource or subscription using the inputs ‘solutionId and
     * requiredInputs’ from discovery solutions. &lt;br/&gt; Azure solutions comprise a comprehensive library of
     * self-help resources that have been thoughtfully curated by Azure engineers to aid customers in resolving typical
     * troubleshooting issues. These solutions encompass: &lt;br/&gt; (1.) Dynamic and context-aware diagnostics, guided
     * troubleshooting wizards, and data visualizations. &lt;br/&gt; (2.) Rich instructional video tutorials and
     * illustrative diagrams and images. &lt;br/&gt; (3.) Thoughtfully assembled textual troubleshooting instructions.
     * &lt;br/&gt; All these components are seamlessly converged into unified solutions tailored to address a specific
     * support problem area.
     * 
     * @param scope The fully qualified Azure Resource manager identifier of the resource.
     * @param solutionResourceName Solution resource Name.
     * @param solutionRequestBody The required request body for this solution resource creation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return solution response along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> createWithResponse(String scope, String solutionResourceName,
        SolutionResourceInner solutionRequestBody, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            throw LOGGER.atError().log(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (solutionResourceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter solutionResourceName is required and cannot be null."));
        }
        if (solutionRequestBody == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter solutionRequestBody is required and cannot be null."));
        } else {
            solutionRequestBody.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.createSync(this.client.getEndpoint(), this.client.getApiVersion(), scope, solutionResourceName,
            contentType, accept, solutionRequestBody, context);
    }

    /**
     * Creates a solution for the specific Azure resource or subscription using the inputs ‘solutionId and
     * requiredInputs’ from discovery solutions. &lt;br/&gt; Azure solutions comprise a comprehensive library of
     * self-help resources that have been thoughtfully curated by Azure engineers to aid customers in resolving typical
     * troubleshooting issues. These solutions encompass: &lt;br/&gt; (1.) Dynamic and context-aware diagnostics, guided
     * troubleshooting wizards, and data visualizations. &lt;br/&gt; (2.) Rich instructional video tutorials and
     * illustrative diagrams and images. &lt;br/&gt; (3.) Thoughtfully assembled textual troubleshooting instructions.
     * &lt;br/&gt; All these components are seamlessly converged into unified solutions tailored to address a specific
     * support problem area.
     * 
     * @param scope The fully qualified Azure Resource manager identifier of the resource.
     * @param solutionResourceName Solution resource Name.
     * @param solutionRequestBody The required request body for this solution resource creation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of solution response.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<SolutionResourceInner>, SolutionResourceInner> beginCreateAsync(String scope,
        String solutionResourceName, SolutionResourceInner solutionRequestBody) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = createWithResponseAsync(scope, solutionResourceName, solutionRequestBody);
        return this.client.<SolutionResourceInner, SolutionResourceInner>getLroResult(mono,
            this.client.getHttpPipeline(), SolutionResourceInner.class, SolutionResourceInner.class,
            this.client.getContext());
    }

    /**
     * Creates a solution for the specific Azure resource or subscription using the inputs ‘solutionId and
     * requiredInputs’ from discovery solutions. &lt;br/&gt; Azure solutions comprise a comprehensive library of
     * self-help resources that have been thoughtfully curated by Azure engineers to aid customers in resolving typical
     * troubleshooting issues. These solutions encompass: &lt;br/&gt; (1.) Dynamic and context-aware diagnostics, guided
     * troubleshooting wizards, and data visualizations. &lt;br/&gt; (2.) Rich instructional video tutorials and
     * illustrative diagrams and images. &lt;br/&gt; (3.) Thoughtfully assembled textual troubleshooting instructions.
     * &lt;br/&gt; All these components are seamlessly converged into unified solutions tailored to address a specific
     * support problem area.
     * 
     * @param scope The fully qualified Azure Resource manager identifier of the resource.
     * @param solutionResourceName Solution resource Name.
     * @param solutionRequestBody The required request body for this solution resource creation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of solution response.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<SolutionResourceInner>, SolutionResourceInner> beginCreate(String scope,
        String solutionResourceName, SolutionResourceInner solutionRequestBody) {
        Response<BinaryData> response = createWithResponse(scope, solutionResourceName, solutionRequestBody);
        return this.client.<SolutionResourceInner, SolutionResourceInner>getLroResult(response,
            SolutionResourceInner.class, SolutionResourceInner.class, Context.NONE);
    }

    /**
     * Creates a solution for the specific Azure resource or subscription using the inputs ‘solutionId and
     * requiredInputs’ from discovery solutions. &lt;br/&gt; Azure solutions comprise a comprehensive library of
     * self-help resources that have been thoughtfully curated by Azure engineers to aid customers in resolving typical
     * troubleshooting issues. These solutions encompass: &lt;br/&gt; (1.) Dynamic and context-aware diagnostics, guided
     * troubleshooting wizards, and data visualizations. &lt;br/&gt; (2.) Rich instructional video tutorials and
     * illustrative diagrams and images. &lt;br/&gt; (3.) Thoughtfully assembled textual troubleshooting instructions.
     * &lt;br/&gt; All these components are seamlessly converged into unified solutions tailored to address a specific
     * support problem area.
     * 
     * @param scope The fully qualified Azure Resource manager identifier of the resource.
     * @param solutionResourceName Solution resource Name.
     * @param solutionRequestBody The required request body for this solution resource creation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of solution response.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<SolutionResourceInner>, SolutionResourceInner> beginCreate(String scope,
        String solutionResourceName, SolutionResourceInner solutionRequestBody, Context context) {
        Response<BinaryData> response = createWithResponse(scope, solutionResourceName, solutionRequestBody, context);
        return this.client.<SolutionResourceInner, SolutionResourceInner>getLroResult(response,
            SolutionResourceInner.class, SolutionResourceInner.class, context);
    }

    /**
     * Creates a solution for the specific Azure resource or subscription using the inputs ‘solutionId and
     * requiredInputs’ from discovery solutions. &lt;br/&gt; Azure solutions comprise a comprehensive library of
     * self-help resources that have been thoughtfully curated by Azure engineers to aid customers in resolving typical
     * troubleshooting issues. These solutions encompass: &lt;br/&gt; (1.) Dynamic and context-aware diagnostics, guided
     * troubleshooting wizards, and data visualizations. &lt;br/&gt; (2.) Rich instructional video tutorials and
     * illustrative diagrams and images. &lt;br/&gt; (3.) Thoughtfully assembled textual troubleshooting instructions.
     * &lt;br/&gt; All these components are seamlessly converged into unified solutions tailored to address a specific
     * support problem area.
     * 
     * @param scope The fully qualified Azure Resource manager identifier of the resource.
     * @param solutionResourceName Solution resource Name.
     * @param solutionRequestBody The required request body for this solution resource creation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return solution response on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SolutionResourceInner> createAsync(String scope, String solutionResourceName,
        SolutionResourceInner solutionRequestBody) {
        return beginCreateAsync(scope, solutionResourceName, solutionRequestBody).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates a solution for the specific Azure resource or subscription using the inputs ‘solutionId and
     * requiredInputs’ from discovery solutions. &lt;br/&gt; Azure solutions comprise a comprehensive library of
     * self-help resources that have been thoughtfully curated by Azure engineers to aid customers in resolving typical
     * troubleshooting issues. These solutions encompass: &lt;br/&gt; (1.) Dynamic and context-aware diagnostics, guided
     * troubleshooting wizards, and data visualizations. &lt;br/&gt; (2.) Rich instructional video tutorials and
     * illustrative diagrams and images. &lt;br/&gt; (3.) Thoughtfully assembled textual troubleshooting instructions.
     * &lt;br/&gt; All these components are seamlessly converged into unified solutions tailored to address a specific
     * support problem area.
     * 
     * @param scope The fully qualified Azure Resource manager identifier of the resource.
     * @param solutionResourceName Solution resource Name.
     * @param solutionRequestBody The required request body for this solution resource creation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return solution response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SolutionResourceInner create(String scope, String solutionResourceName,
        SolutionResourceInner solutionRequestBody) {
        return beginCreate(scope, solutionResourceName, solutionRequestBody).getFinalResult();
    }

    /**
     * Creates a solution for the specific Azure resource or subscription using the inputs ‘solutionId and
     * requiredInputs’ from discovery solutions. &lt;br/&gt; Azure solutions comprise a comprehensive library of
     * self-help resources that have been thoughtfully curated by Azure engineers to aid customers in resolving typical
     * troubleshooting issues. These solutions encompass: &lt;br/&gt; (1.) Dynamic and context-aware diagnostics, guided
     * troubleshooting wizards, and data visualizations. &lt;br/&gt; (2.) Rich instructional video tutorials and
     * illustrative diagrams and images. &lt;br/&gt; (3.) Thoughtfully assembled textual troubleshooting instructions.
     * &lt;br/&gt; All these components are seamlessly converged into unified solutions tailored to address a specific
     * support problem area.
     * 
     * @param scope The fully qualified Azure Resource manager identifier of the resource.
     * @param solutionResourceName Solution resource Name.
     * @param solutionRequestBody The required request body for this solution resource creation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return solution response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SolutionResourceInner create(String scope, String solutionResourceName,
        SolutionResourceInner solutionRequestBody, Context context) {
        return beginCreate(scope, solutionResourceName, solutionRequestBody, context).getFinalResult();
    }

    /**
     * Update the requiredInputs or additional information needed to execute the solution.
     * 
     * @param scope The fully qualified Azure Resource manager identifier of the resource.
     * @param solutionResourceName Solution resource Name.
     * @param solutionPatchRequestBody The required request body for updating a solution resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return solution response along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(String scope, String solutionResourceName,
        SolutionPatchRequestBody solutionPatchRequestBody) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (solutionResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter solutionResourceName is required and cannot be null."));
        }
        if (solutionPatchRequestBody == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter solutionPatchRequestBody is required and cannot be null."));
        } else {
            solutionPatchRequestBody.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.update(this.client.getEndpoint(), this.client.getApiVersion(), scope,
                solutionResourceName, contentType, accept, solutionPatchRequestBody, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Update the requiredInputs or additional information needed to execute the solution.
     * 
     * @param scope The fully qualified Azure Resource manager identifier of the resource.
     * @param solutionResourceName Solution resource Name.
     * @param solutionPatchRequestBody The required request body for updating a solution resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return solution response along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> updateWithResponse(String scope, String solutionResourceName,
        SolutionPatchRequestBody solutionPatchRequestBody) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            throw LOGGER.atError().log(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (solutionResourceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter solutionResourceName is required and cannot be null."));
        }
        if (solutionPatchRequestBody == null) {
            throw LOGGER.atError()
                .log(
                    new IllegalArgumentException("Parameter solutionPatchRequestBody is required and cannot be null."));
        } else {
            solutionPatchRequestBody.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.updateSync(this.client.getEndpoint(), this.client.getApiVersion(), scope, solutionResourceName,
            contentType, accept, solutionPatchRequestBody, Context.NONE);
    }

    /**
     * Update the requiredInputs or additional information needed to execute the solution.
     * 
     * @param scope The fully qualified Azure Resource manager identifier of the resource.
     * @param solutionResourceName Solution resource Name.
     * @param solutionPatchRequestBody The required request body for updating a solution resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return solution response along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> updateWithResponse(String scope, String solutionResourceName,
        SolutionPatchRequestBody solutionPatchRequestBody, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            throw LOGGER.atError().log(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (solutionResourceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter solutionResourceName is required and cannot be null."));
        }
        if (solutionPatchRequestBody == null) {
            throw LOGGER.atError()
                .log(
                    new IllegalArgumentException("Parameter solutionPatchRequestBody is required and cannot be null."));
        } else {
            solutionPatchRequestBody.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.updateSync(this.client.getEndpoint(), this.client.getApiVersion(), scope, solutionResourceName,
            contentType, accept, solutionPatchRequestBody, context);
    }

    /**
     * Update the requiredInputs or additional information needed to execute the solution.
     * 
     * @param scope The fully qualified Azure Resource manager identifier of the resource.
     * @param solutionResourceName Solution resource Name.
     * @param solutionPatchRequestBody The required request body for updating a solution resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of solution response.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<SolutionResourceInner>, SolutionResourceInner> beginUpdateAsync(String scope,
        String solutionResourceName, SolutionPatchRequestBody solutionPatchRequestBody) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = updateWithResponseAsync(scope, solutionResourceName, solutionPatchRequestBody);
        return this.client.<SolutionResourceInner, SolutionResourceInner>getLroResult(mono,
            this.client.getHttpPipeline(), SolutionResourceInner.class, SolutionResourceInner.class,
            this.client.getContext());
    }

    /**
     * Update the requiredInputs or additional information needed to execute the solution.
     * 
     * @param scope The fully qualified Azure Resource manager identifier of the resource.
     * @param solutionResourceName Solution resource Name.
     * @param solutionPatchRequestBody The required request body for updating a solution resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of solution response.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<SolutionResourceInner>, SolutionResourceInner> beginUpdate(String scope,
        String solutionResourceName, SolutionPatchRequestBody solutionPatchRequestBody) {
        Response<BinaryData> response = updateWithResponse(scope, solutionResourceName, solutionPatchRequestBody);
        return this.client.<SolutionResourceInner, SolutionResourceInner>getLroResult(response,
            SolutionResourceInner.class, SolutionResourceInner.class, Context.NONE);
    }

    /**
     * Update the requiredInputs or additional information needed to execute the solution.
     * 
     * @param scope The fully qualified Azure Resource manager identifier of the resource.
     * @param solutionResourceName Solution resource Name.
     * @param solutionPatchRequestBody The required request body for updating a solution resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of solution response.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<SolutionResourceInner>, SolutionResourceInner> beginUpdate(String scope,
        String solutionResourceName, SolutionPatchRequestBody solutionPatchRequestBody, Context context) {
        Response<BinaryData> response
            = updateWithResponse(scope, solutionResourceName, solutionPatchRequestBody, context);
        return this.client.<SolutionResourceInner, SolutionResourceInner>getLroResult(response,
            SolutionResourceInner.class, SolutionResourceInner.class, context);
    }

    /**
     * Update the requiredInputs or additional information needed to execute the solution.
     * 
     * @param scope The fully qualified Azure Resource manager identifier of the resource.
     * @param solutionResourceName Solution resource Name.
     * @param solutionPatchRequestBody The required request body for updating a solution resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return solution response on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SolutionResourceInner> updateAsync(String scope, String solutionResourceName,
        SolutionPatchRequestBody solutionPatchRequestBody) {
        return beginUpdateAsync(scope, solutionResourceName, solutionPatchRequestBody).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Update the requiredInputs or additional information needed to execute the solution.
     * 
     * @param scope The fully qualified Azure Resource manager identifier of the resource.
     * @param solutionResourceName Solution resource Name.
     * @param solutionPatchRequestBody The required request body for updating a solution resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return solution response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SolutionResourceInner update(String scope, String solutionResourceName,
        SolutionPatchRequestBody solutionPatchRequestBody) {
        return beginUpdate(scope, solutionResourceName, solutionPatchRequestBody).getFinalResult();
    }

    /**
     * Update the requiredInputs or additional information needed to execute the solution.
     * 
     * @param scope The fully qualified Azure Resource manager identifier of the resource.
     * @param solutionResourceName Solution resource Name.
     * @param solutionPatchRequestBody The required request body for updating a solution resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return solution response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SolutionResourceInner update(String scope, String solutionResourceName,
        SolutionPatchRequestBody solutionPatchRequestBody, Context context) {
        return beginUpdate(scope, solutionResourceName, solutionPatchRequestBody, context).getFinalResult();
    }

    /**
     * Warm up the solution resource by preloading asynchronous diagnostics results into cache.
     * 
     * @param scope The fully qualified Azure Resource manager identifier of the resource.
     * @param solutionResourceName Solution resource Name.
     * @param solutionWarmUpRequestBody The required request body for warming up a solution resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> warmUpWithResponseAsync(String scope, String solutionResourceName,
        SolutionWarmUpRequestBody solutionWarmUpRequestBody) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (solutionResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter solutionResourceName is required and cannot be null."));
        }
        if (solutionWarmUpRequestBody != null) {
            solutionWarmUpRequestBody.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.warmUp(this.client.getEndpoint(), this.client.getApiVersion(), scope,
                solutionResourceName, accept, solutionWarmUpRequestBody, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Warm up the solution resource by preloading asynchronous diagnostics results into cache.
     * 
     * @param scope The fully qualified Azure Resource manager identifier of the resource.
     * @param solutionResourceName Solution resource Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> warmUpAsync(String scope, String solutionResourceName) {
        final SolutionWarmUpRequestBody solutionWarmUpRequestBody = null;
        return warmUpWithResponseAsync(scope, solutionResourceName, solutionWarmUpRequestBody)
            .flatMap(ignored -> Mono.empty());
    }

    /**
     * Warm up the solution resource by preloading asynchronous diagnostics results into cache.
     * 
     * @param scope The fully qualified Azure Resource manager identifier of the resource.
     * @param solutionResourceName Solution resource Name.
     * @param solutionWarmUpRequestBody The required request body for warming up a solution resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> warmUpWithResponse(String scope, String solutionResourceName,
        SolutionWarmUpRequestBody solutionWarmUpRequestBody, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            throw LOGGER.atError().log(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (solutionResourceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter solutionResourceName is required and cannot be null."));
        }
        if (solutionWarmUpRequestBody != null) {
            solutionWarmUpRequestBody.validate();
        }
        final String accept = "application/json";
        return service.warmUpSync(this.client.getEndpoint(), this.client.getApiVersion(), scope, solutionResourceName,
            accept, solutionWarmUpRequestBody, context);
    }

    /**
     * Warm up the solution resource by preloading asynchronous diagnostics results into cache.
     * 
     * @param scope The fully qualified Azure Resource manager identifier of the resource.
     * @param solutionResourceName Solution resource Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void warmUp(String scope, String solutionResourceName) {
        final SolutionWarmUpRequestBody solutionWarmUpRequestBody = null;
        warmUpWithResponse(scope, solutionResourceName, solutionWarmUpRequestBody, Context.NONE);
    }

    private static final ClientLogger LOGGER = new ClientLogger(SolutionResourcesClientImpl.class);
}
