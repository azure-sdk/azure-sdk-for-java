// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.help.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.help.fluent.DiagnosticResourcesClient;
import com.azure.resourcemanager.help.fluent.models.DiagnosticResourceInner;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in DiagnosticResourcesClient.
 */
public final class DiagnosticResourcesClientImpl implements DiagnosticResourcesClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final DiagnosticResourcesService service;

    /**
     * The service client containing this operation class.
     */
    private final HelpClientImpl client;

    /**
     * Initializes an instance of DiagnosticResourcesClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    DiagnosticResourcesClientImpl(HelpClientImpl client) {
        this.service = RestProxy.create(DiagnosticResourcesService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for HelpClientDiagnosticResources to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "HelpClientDiagnostic")
    public interface DiagnosticResourcesService {
        @Headers({ "Content-Type: application/json" })
        @Get("/{scope}/providers/Microsoft.Help/diagnostics/{diagnosticsResourceName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DiagnosticResourceInner>> get(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam(value = "scope", encoded = true) String scope,
            @PathParam("diagnosticsResourceName") String diagnosticsResourceName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/{scope}/providers/Microsoft.Help/diagnostics/{diagnosticsResourceName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<DiagnosticResourceInner> getSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam(value = "scope", encoded = true) String scope,
            @PathParam("diagnosticsResourceName") String diagnosticsResourceName, @HeaderParam("Accept") String accept,
            Context context);

        @Put("/{scope}/providers/Microsoft.Help/diagnostics/{diagnosticsResourceName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> create(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam(value = "scope", encoded = true) String scope,
            @PathParam("diagnosticsResourceName") String diagnosticsResourceName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") DiagnosticResourceInner diagnosticResourceRequest, Context context);

        @Put("/{scope}/providers/Microsoft.Help/diagnostics/{diagnosticsResourceName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> createSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam(value = "scope", encoded = true) String scope,
            @PathParam("diagnosticsResourceName") String diagnosticsResourceName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") DiagnosticResourceInner diagnosticResourceRequest, Context context);
    }

    /**
     * Get the diagnostics using the 'diagnosticsResourceName' you chose while creating the diagnostic.
     * 
     * @param scope The fully qualified Azure Resource manager identifier of the resource.
     * @param diagnosticsResourceName Unique resource name for insight resources.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the diagnostics using the 'diagnosticsResourceName' you chose while creating the diagnostic along with
     * {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DiagnosticResourceInner>> getWithResponseAsync(String scope, String diagnosticsResourceName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (diagnosticsResourceName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter diagnosticsResourceName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), this.client.getApiVersion(), scope,
                diagnosticsResourceName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the diagnostics using the 'diagnosticsResourceName' you chose while creating the diagnostic.
     * 
     * @param scope The fully qualified Azure Resource manager identifier of the resource.
     * @param diagnosticsResourceName Unique resource name for insight resources.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the diagnostics using the 'diagnosticsResourceName' you chose while creating the diagnostic on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DiagnosticResourceInner> getAsync(String scope, String diagnosticsResourceName) {
        return getWithResponseAsync(scope, diagnosticsResourceName).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get the diagnostics using the 'diagnosticsResourceName' you chose while creating the diagnostic.
     * 
     * @param scope The fully qualified Azure Resource manager identifier of the resource.
     * @param diagnosticsResourceName Unique resource name for insight resources.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the diagnostics using the 'diagnosticsResourceName' you chose while creating the diagnostic along with
     * {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<DiagnosticResourceInner> getWithResponse(String scope, String diagnosticsResourceName,
        Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            throw LOGGER.atError().log(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (diagnosticsResourceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter diagnosticsResourceName is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.getSync(this.client.getEndpoint(), this.client.getApiVersion(), scope, diagnosticsResourceName,
            accept, context);
    }

    /**
     * Get the diagnostics using the 'diagnosticsResourceName' you chose while creating the diagnostic.
     * 
     * @param scope The fully qualified Azure Resource manager identifier of the resource.
     * @param diagnosticsResourceName Unique resource name for insight resources.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the diagnostics using the 'diagnosticsResourceName' you chose while creating the diagnostic.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DiagnosticResourceInner get(String scope, String diagnosticsResourceName) {
        return getWithResponse(scope, diagnosticsResourceName, Context.NONE).getValue();
    }

    /**
     * Creates a diagnostic for the specific resource using solutionId from discovery solutions. &lt;br/&gt;Diagnostics
     * are powerful solutions that access product resources or other relevant data and provide the root cause of the
     * issue and the steps to address the issue.&lt;br/&gt;&lt;br/&gt;.
     * 
     * @param scope The fully qualified Azure Resource manager identifier of the resource.
     * @param diagnosticsResourceName Unique resource name for insight resources.
     * @param diagnosticResourceRequest The required request body for this insightResource invocation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return diagnostic resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createWithResponseAsync(String scope, String diagnosticsResourceName,
        DiagnosticResourceInner diagnosticResourceRequest) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (diagnosticsResourceName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter diagnosticsResourceName is required and cannot be null."));
        }
        if (diagnosticResourceRequest == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter diagnosticResourceRequest is required and cannot be null."));
        } else {
            diagnosticResourceRequest.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.create(this.client.getEndpoint(), this.client.getApiVersion(), scope,
                diagnosticsResourceName, contentType, accept, diagnosticResourceRequest, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Creates a diagnostic for the specific resource using solutionId from discovery solutions. &lt;br/&gt;Diagnostics
     * are powerful solutions that access product resources or other relevant data and provide the root cause of the
     * issue and the steps to address the issue.&lt;br/&gt;&lt;br/&gt;.
     * 
     * @param scope The fully qualified Azure Resource manager identifier of the resource.
     * @param diagnosticsResourceName Unique resource name for insight resources.
     * @param diagnosticResourceRequest The required request body for this insightResource invocation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return diagnostic resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> createWithResponse(String scope, String diagnosticsResourceName,
        DiagnosticResourceInner diagnosticResourceRequest) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            throw LOGGER.atError().log(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (diagnosticsResourceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter diagnosticsResourceName is required and cannot be null."));
        }
        if (diagnosticResourceRequest == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter diagnosticResourceRequest is required and cannot be null."));
        } else {
            diagnosticResourceRequest.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.createSync(this.client.getEndpoint(), this.client.getApiVersion(), scope,
            diagnosticsResourceName, contentType, accept, diagnosticResourceRequest, Context.NONE);
    }

    /**
     * Creates a diagnostic for the specific resource using solutionId from discovery solutions. &lt;br/&gt;Diagnostics
     * are powerful solutions that access product resources or other relevant data and provide the root cause of the
     * issue and the steps to address the issue.&lt;br/&gt;&lt;br/&gt;.
     * 
     * @param scope The fully qualified Azure Resource manager identifier of the resource.
     * @param diagnosticsResourceName Unique resource name for insight resources.
     * @param diagnosticResourceRequest The required request body for this insightResource invocation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return diagnostic resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> createWithResponse(String scope, String diagnosticsResourceName,
        DiagnosticResourceInner diagnosticResourceRequest, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            throw LOGGER.atError().log(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (diagnosticsResourceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter diagnosticsResourceName is required and cannot be null."));
        }
        if (diagnosticResourceRequest == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter diagnosticResourceRequest is required and cannot be null."));
        } else {
            diagnosticResourceRequest.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.createSync(this.client.getEndpoint(), this.client.getApiVersion(), scope,
            diagnosticsResourceName, contentType, accept, diagnosticResourceRequest, context);
    }

    /**
     * Creates a diagnostic for the specific resource using solutionId from discovery solutions. &lt;br/&gt;Diagnostics
     * are powerful solutions that access product resources or other relevant data and provide the root cause of the
     * issue and the steps to address the issue.&lt;br/&gt;&lt;br/&gt;.
     * 
     * @param scope The fully qualified Azure Resource manager identifier of the resource.
     * @param diagnosticsResourceName Unique resource name for insight resources.
     * @param diagnosticResourceRequest The required request body for this insightResource invocation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of diagnostic resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<DiagnosticResourceInner>, DiagnosticResourceInner> beginCreateAsync(String scope,
        String diagnosticsResourceName, DiagnosticResourceInner diagnosticResourceRequest) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = createWithResponseAsync(scope, diagnosticsResourceName, diagnosticResourceRequest);
        return this.client.<DiagnosticResourceInner, DiagnosticResourceInner>getLroResult(mono,
            this.client.getHttpPipeline(), DiagnosticResourceInner.class, DiagnosticResourceInner.class,
            this.client.getContext());
    }

    /**
     * Creates a diagnostic for the specific resource using solutionId from discovery solutions. &lt;br/&gt;Diagnostics
     * are powerful solutions that access product resources or other relevant data and provide the root cause of the
     * issue and the steps to address the issue.&lt;br/&gt;&lt;br/&gt;.
     * 
     * @param scope The fully qualified Azure Resource manager identifier of the resource.
     * @param diagnosticsResourceName Unique resource name for insight resources.
     * @param diagnosticResourceRequest The required request body for this insightResource invocation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of diagnostic resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<DiagnosticResourceInner>, DiagnosticResourceInner> beginCreate(String scope,
        String diagnosticsResourceName, DiagnosticResourceInner diagnosticResourceRequest) {
        Response<BinaryData> response = createWithResponse(scope, diagnosticsResourceName, diagnosticResourceRequest);
        return this.client.<DiagnosticResourceInner, DiagnosticResourceInner>getLroResult(response,
            DiagnosticResourceInner.class, DiagnosticResourceInner.class, Context.NONE);
    }

    /**
     * Creates a diagnostic for the specific resource using solutionId from discovery solutions. &lt;br/&gt;Diagnostics
     * are powerful solutions that access product resources or other relevant data and provide the root cause of the
     * issue and the steps to address the issue.&lt;br/&gt;&lt;br/&gt;.
     * 
     * @param scope The fully qualified Azure Resource manager identifier of the resource.
     * @param diagnosticsResourceName Unique resource name for insight resources.
     * @param diagnosticResourceRequest The required request body for this insightResource invocation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of diagnostic resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<DiagnosticResourceInner>, DiagnosticResourceInner> beginCreate(String scope,
        String diagnosticsResourceName, DiagnosticResourceInner diagnosticResourceRequest, Context context) {
        Response<BinaryData> response
            = createWithResponse(scope, diagnosticsResourceName, diagnosticResourceRequest, context);
        return this.client.<DiagnosticResourceInner, DiagnosticResourceInner>getLroResult(response,
            DiagnosticResourceInner.class, DiagnosticResourceInner.class, context);
    }

    /**
     * Creates a diagnostic for the specific resource using solutionId from discovery solutions. &lt;br/&gt;Diagnostics
     * are powerful solutions that access product resources or other relevant data and provide the root cause of the
     * issue and the steps to address the issue.&lt;br/&gt;&lt;br/&gt;.
     * 
     * @param scope The fully qualified Azure Resource manager identifier of the resource.
     * @param diagnosticsResourceName Unique resource name for insight resources.
     * @param diagnosticResourceRequest The required request body for this insightResource invocation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return diagnostic resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DiagnosticResourceInner> createAsync(String scope, String diagnosticsResourceName,
        DiagnosticResourceInner diagnosticResourceRequest) {
        return beginCreateAsync(scope, diagnosticsResourceName, diagnosticResourceRequest).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates a diagnostic for the specific resource using solutionId from discovery solutions. &lt;br/&gt;Diagnostics
     * are powerful solutions that access product resources or other relevant data and provide the root cause of the
     * issue and the steps to address the issue.&lt;br/&gt;&lt;br/&gt;.
     * 
     * @param scope The fully qualified Azure Resource manager identifier of the resource.
     * @param diagnosticsResourceName Unique resource name for insight resources.
     * @param diagnosticResourceRequest The required request body for this insightResource invocation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return diagnostic resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DiagnosticResourceInner create(String scope, String diagnosticsResourceName,
        DiagnosticResourceInner diagnosticResourceRequest) {
        return beginCreate(scope, diagnosticsResourceName, diagnosticResourceRequest).getFinalResult();
    }

    /**
     * Creates a diagnostic for the specific resource using solutionId from discovery solutions. &lt;br/&gt;Diagnostics
     * are powerful solutions that access product resources or other relevant data and provide the root cause of the
     * issue and the steps to address the issue.&lt;br/&gt;&lt;br/&gt;.
     * 
     * @param scope The fully qualified Azure Resource manager identifier of the resource.
     * @param diagnosticsResourceName Unique resource name for insight resources.
     * @param diagnosticResourceRequest The required request body for this insightResource invocation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return diagnostic resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DiagnosticResourceInner create(String scope, String diagnosticsResourceName,
        DiagnosticResourceInner diagnosticResourceRequest, Context context) {
        return beginCreate(scope, diagnosticsResourceName, diagnosticResourceRequest, context).getFinalResult();
    }

    private static final ClientLogger LOGGER = new ClientLogger(DiagnosticResourcesClientImpl.class);
}
