// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.help.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Video detail.
 */
@Immutable
public final class Video extends VideoGroupVideo {
    /*
     * Place holder used in HTML Content replace control with the insight content
     */
    private String replacementKey;

    /*
     * Title of the video
     */
    private String title;

    /*
     * Link to the video
     */
    private String src;

    /**
     * Creates an instance of Video class.
     */
    private Video() {
    }

    /**
     * Get the replacementKey property: Place holder used in HTML Content replace control with the insight content.
     * 
     * @return the replacementKey value.
     */
    public String replacementKey() {
        return this.replacementKey;
    }

    /**
     * Get the title property: Title of the video.
     * 
     * @return the title value.
     */
    @Override
    public String title() {
        return this.title;
    }

    /**
     * Get the src property: Link to the video.
     * 
     * @return the src value.
     */
    @Override
    public String src() {
        return this.src;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("src", src());
        jsonWriter.writeStringField("title", title());
        jsonWriter.writeStringField("replacementKey", this.replacementKey);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Video from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Video if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the Video.
     */
    public static Video fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Video deserializedVideo = new Video();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("src".equals(fieldName)) {
                    deserializedVideo.src = reader.getString();
                } else if ("title".equals(fieldName)) {
                    deserializedVideo.title = reader.getString();
                } else if ("replacementKey".equals(fieldName)) {
                    deserializedVideo.replacementKey = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVideo;
        });
    }
}
