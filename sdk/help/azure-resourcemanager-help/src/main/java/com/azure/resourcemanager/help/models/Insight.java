// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.help.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Detailed insights(s) obtained via the invocation of an insight diagnostic.
 */
@Immutable
public final class Insight implements JsonSerializable<Insight> {
    /*
     * Article id.
     */
    private String id;

    /*
     * This insight's title.
     */
    private String title;

    /*
     * Detailed result content.
     */
    private String results;

    /*
     * Importance level of the insight.
     */
    private ImportanceLevel importanceLevel;

    /**
     * Creates an instance of Insight class.
     */
    private Insight() {
    }

    /**
     * Get the id property: Article id.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Get the title property: This insight's title.
     * 
     * @return the title value.
     */
    public String title() {
        return this.title;
    }

    /**
     * Get the results property: Detailed result content.
     * 
     * @return the results value.
     */
    public String results() {
        return this.results;
    }

    /**
     * Get the importanceLevel property: Importance level of the insight.
     * 
     * @return the importanceLevel value.
     */
    public ImportanceLevel importanceLevel() {
        return this.importanceLevel;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("title", this.title);
        jsonWriter.writeStringField("results", this.results);
        jsonWriter.writeStringField("importanceLevel",
            this.importanceLevel == null ? null : this.importanceLevel.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Insight from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Insight if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the Insight.
     */
    public static Insight fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Insight deserializedInsight = new Insight();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedInsight.id = reader.getString();
                } else if ("title".equals(fieldName)) {
                    deserializedInsight.title = reader.getString();
                } else if ("results".equals(fieldName)) {
                    deserializedInsight.results = reader.getString();
                } else if ("importanceLevel".equals(fieldName)) {
                    deserializedInsight.importanceLevel = ImportanceLevel.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedInsight;
        });
    }
}
