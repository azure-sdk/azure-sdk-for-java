// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azuredata.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The SQL server Registration properties.
 */
@Fluent
public final class SqlServerRegistrationProperties implements JsonSerializable<SqlServerRegistrationProperties> {
    /*
     * Subscription Id
     */
    private String subscriptionId;

    /*
     * Resource Group Name
     */
    private String resourceGroup;

    /*
     * Optional Properties as JSON string
     */
    private String propertyBag;

    /**
     * Creates an instance of SqlServerRegistrationProperties class.
     */
    public SqlServerRegistrationProperties() {
    }

    /**
     * Get the subscriptionId property: Subscription Id.
     * 
     * @return the subscriptionId value.
     */
    public String subscriptionId() {
        return this.subscriptionId;
    }

    /**
     * Set the subscriptionId property: Subscription Id.
     * 
     * @param subscriptionId the subscriptionId value to set.
     * @return the SqlServerRegistrationProperties object itself.
     */
    public SqlServerRegistrationProperties withSubscriptionId(String subscriptionId) {
        this.subscriptionId = subscriptionId;
        return this;
    }

    /**
     * Get the resourceGroup property: Resource Group Name.
     * 
     * @return the resourceGroup value.
     */
    public String resourceGroup() {
        return this.resourceGroup;
    }

    /**
     * Set the resourceGroup property: Resource Group Name.
     * 
     * @param resourceGroup the resourceGroup value to set.
     * @return the SqlServerRegistrationProperties object itself.
     */
    public SqlServerRegistrationProperties withResourceGroup(String resourceGroup) {
        this.resourceGroup = resourceGroup;
        return this;
    }

    /**
     * Get the propertyBag property: Optional Properties as JSON string.
     * 
     * @return the propertyBag value.
     */
    public String propertyBag() {
        return this.propertyBag;
    }

    /**
     * Set the propertyBag property: Optional Properties as JSON string.
     * 
     * @param propertyBag the propertyBag value to set.
     * @return the SqlServerRegistrationProperties object itself.
     */
    public SqlServerRegistrationProperties withPropertyBag(String propertyBag) {
        this.propertyBag = propertyBag;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("subscriptionId", this.subscriptionId);
        jsonWriter.writeStringField("resourceGroup", this.resourceGroup);
        jsonWriter.writeStringField("propertyBag", this.propertyBag);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SqlServerRegistrationProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SqlServerRegistrationProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SqlServerRegistrationProperties.
     */
    public static SqlServerRegistrationProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SqlServerRegistrationProperties deserializedSqlServerRegistrationProperties
                = new SqlServerRegistrationProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("subscriptionId".equals(fieldName)) {
                    deserializedSqlServerRegistrationProperties.subscriptionId = reader.getString();
                } else if ("resourceGroup".equals(fieldName)) {
                    deserializedSqlServerRegistrationProperties.resourceGroup = reader.getString();
                } else if ("propertyBag".equals(fieldName)) {
                    deserializedSqlServerRegistrationProperties.propertyBag = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSqlServerRegistrationProperties;
        });
    }
}
