// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azuredata.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The SQL server properties.
 */
@Fluent
public final class SqlServerProperties implements JsonSerializable<SqlServerProperties> {
    /*
     * Cores of the Sql Server.
     */
    private Integer cores;

    /*
     * Version of the Sql Server.
     */
    private String version;

    /*
     * Sql Server Edition.
     */
    private String edition;

    /*
     * ID for Parent Sql Server Registration.
     */
    private String registrationId;

    /*
     * Sql Server Json Property Bag.
     */
    private String propertyBag;

    /**
     * Creates an instance of SqlServerProperties class.
     */
    public SqlServerProperties() {
    }

    /**
     * Get the cores property: Cores of the Sql Server.
     * 
     * @return the cores value.
     */
    public Integer cores() {
        return this.cores;
    }

    /**
     * Set the cores property: Cores of the Sql Server.
     * 
     * @param cores the cores value to set.
     * @return the SqlServerProperties object itself.
     */
    public SqlServerProperties withCores(Integer cores) {
        this.cores = cores;
        return this;
    }

    /**
     * Get the version property: Version of the Sql Server.
     * 
     * @return the version value.
     */
    public String version() {
        return this.version;
    }

    /**
     * Set the version property: Version of the Sql Server.
     * 
     * @param version the version value to set.
     * @return the SqlServerProperties object itself.
     */
    public SqlServerProperties withVersion(String version) {
        this.version = version;
        return this;
    }

    /**
     * Get the edition property: Sql Server Edition.
     * 
     * @return the edition value.
     */
    public String edition() {
        return this.edition;
    }

    /**
     * Set the edition property: Sql Server Edition.
     * 
     * @param edition the edition value to set.
     * @return the SqlServerProperties object itself.
     */
    public SqlServerProperties withEdition(String edition) {
        this.edition = edition;
        return this;
    }

    /**
     * Get the registrationId property: ID for Parent Sql Server Registration.
     * 
     * @return the registrationId value.
     */
    public String registrationId() {
        return this.registrationId;
    }

    /**
     * Set the registrationId property: ID for Parent Sql Server Registration.
     * 
     * @param registrationId the registrationId value to set.
     * @return the SqlServerProperties object itself.
     */
    public SqlServerProperties withRegistrationId(String registrationId) {
        this.registrationId = registrationId;
        return this;
    }

    /**
     * Get the propertyBag property: Sql Server Json Property Bag.
     * 
     * @return the propertyBag value.
     */
    public String propertyBag() {
        return this.propertyBag;
    }

    /**
     * Set the propertyBag property: Sql Server Json Property Bag.
     * 
     * @param propertyBag the propertyBag value to set.
     * @return the SqlServerProperties object itself.
     */
    public SqlServerProperties withPropertyBag(String propertyBag) {
        this.propertyBag = propertyBag;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("cores", this.cores);
        jsonWriter.writeStringField("version", this.version);
        jsonWriter.writeStringField("edition", this.edition);
        jsonWriter.writeStringField("registrationID", this.registrationId);
        jsonWriter.writeStringField("propertyBag", this.propertyBag);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SqlServerProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SqlServerProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the SqlServerProperties.
     */
    public static SqlServerProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SqlServerProperties deserializedSqlServerProperties = new SqlServerProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("cores".equals(fieldName)) {
                    deserializedSqlServerProperties.cores = reader.getNullable(JsonReader::getInt);
                } else if ("version".equals(fieldName)) {
                    deserializedSqlServerProperties.version = reader.getString();
                } else if ("edition".equals(fieldName)) {
                    deserializedSqlServerProperties.edition = reader.getString();
                } else if ("registrationID".equals(fieldName)) {
                    deserializedSqlServerProperties.registrationId = reader.getString();
                } else if ("propertyBag".equals(fieldName)) {
                    deserializedSqlServerProperties.propertyBag = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSqlServerProperties;
        });
    }
}
