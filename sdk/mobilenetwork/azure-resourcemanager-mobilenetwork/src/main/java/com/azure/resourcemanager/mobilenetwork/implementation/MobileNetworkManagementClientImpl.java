// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.implementation;

import com.azure.core.annotation.ServiceClient;
import com.azure.core.http.HttpHeaderName;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.Response;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.exception.ManagementError;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollerFactory;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.core.util.polling.AsyncPollResponse;
import com.azure.core.util.polling.LongRunningOperationStatus;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.serializer.SerializerAdapter;
import com.azure.core.util.serializer.SerializerEncoding;
import com.azure.resourcemanager.mobilenetwork.fluent.AmfDeploymentsClient;
import com.azure.resourcemanager.mobilenetwork.fluent.AttachedDataNetworksClient;
import com.azure.resourcemanager.mobilenetwork.fluent.ClusterServicesClient;
import com.azure.resourcemanager.mobilenetwork.fluent.DataNetworksClient;
import com.azure.resourcemanager.mobilenetwork.fluent.DiagnosticsPackagesClient;
import com.azure.resourcemanager.mobilenetwork.fluent.ExtendedUeInfosClient;
import com.azure.resourcemanager.mobilenetwork.fluent.MobileNetworkManagementClient;
import com.azure.resourcemanager.mobilenetwork.fluent.MobileNetworksClient;
import com.azure.resourcemanager.mobilenetwork.fluent.NrfDeploymentsClient;
import com.azure.resourcemanager.mobilenetwork.fluent.NssfDeploymentsClient;
import com.azure.resourcemanager.mobilenetwork.fluent.ObservabilityServicesClient;
import com.azure.resourcemanager.mobilenetwork.fluent.OperationsClient;
import com.azure.resourcemanager.mobilenetwork.fluent.PacketCapturesClient;
import com.azure.resourcemanager.mobilenetwork.fluent.PacketCoreControlPlanesClient;
import com.azure.resourcemanager.mobilenetwork.fluent.PacketCoreControlPlaneVersionsClient;
import com.azure.resourcemanager.mobilenetwork.fluent.PacketCoreControlPlaneVersionsTenantResourcesClient;
import com.azure.resourcemanager.mobilenetwork.fluent.PacketCoreDataPlanesClient;
import com.azure.resourcemanager.mobilenetwork.fluent.RoutingInfoModelsClient;
import com.azure.resourcemanager.mobilenetwork.fluent.ServicesClient;
import com.azure.resourcemanager.mobilenetwork.fluent.SimGroupsClient;
import com.azure.resourcemanager.mobilenetwork.fluent.SimPoliciesClient;
import com.azure.resourcemanager.mobilenetwork.fluent.SimsClient;
import com.azure.resourcemanager.mobilenetwork.fluent.SitesClient;
import com.azure.resourcemanager.mobilenetwork.fluent.SlicesClient;
import com.azure.resourcemanager.mobilenetwork.fluent.SmfDeploymentsClient;
import com.azure.resourcemanager.mobilenetwork.fluent.UesClient;
import com.azure.resourcemanager.mobilenetwork.fluent.UpfDeploymentsClient;
import java.io.IOException;
import java.lang.reflect.Type;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.time.Duration;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the MobileNetworkManagementClientImpl type.
 */
@ServiceClient(builder = MobileNetworkManagementClientBuilder.class)
public final class MobileNetworkManagementClientImpl implements MobileNetworkManagementClient {
    /**
     * The ID of the target subscription. The value must be an UUID.
     */
    private final String subscriptionId;

    /**
     * Gets The ID of the target subscription. The value must be an UUID.
     * 
     * @return the subscriptionId value.
     */
    public String getSubscriptionId() {
        return this.subscriptionId;
    }

    /**
     * server parameter.
     */
    private final String endpoint;

    /**
     * Gets server parameter.
     * 
     * @return the endpoint value.
     */
    public String getEndpoint() {
        return this.endpoint;
    }

    /**
     * Api Version.
     */
    private final String apiVersion;

    /**
     * Gets Api Version.
     * 
     * @return the apiVersion value.
     */
    public String getApiVersion() {
        return this.apiVersion;
    }

    /**
     * The HTTP pipeline to send requests through.
     */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     * 
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /**
     * The serializer to serialize an object into a string.
     */
    private final SerializerAdapter serializerAdapter;

    /**
     * Gets The serializer to serialize an object into a string.
     * 
     * @return the serializerAdapter value.
     */
    SerializerAdapter getSerializerAdapter() {
        return this.serializerAdapter;
    }

    /**
     * The default poll interval for long-running operation.
     */
    private final Duration defaultPollInterval;

    /**
     * Gets The default poll interval for long-running operation.
     * 
     * @return the defaultPollInterval value.
     */
    public Duration getDefaultPollInterval() {
        return this.defaultPollInterval;
    }

    /**
     * The OperationsClient object to access its operations.
     */
    private final OperationsClient operations;

    /**
     * Gets the OperationsClient object to access its operations.
     * 
     * @return the OperationsClient object.
     */
    public OperationsClient getOperations() {
        return this.operations;
    }

    /**
     * The PacketCoreControlPlaneVersionsTenantResourcesClient object to access its operations.
     */
    private final PacketCoreControlPlaneVersionsTenantResourcesClient packetCoreControlPlaneVersionsTenantResources;

    /**
     * Gets the PacketCoreControlPlaneVersionsTenantResourcesClient object to access its operations.
     * 
     * @return the PacketCoreControlPlaneVersionsTenantResourcesClient object.
     */
    public PacketCoreControlPlaneVersionsTenantResourcesClient getPacketCoreControlPlaneVersionsTenantResources() {
        return this.packetCoreControlPlaneVersionsTenantResources;
    }

    /**
     * The AmfDeploymentsClient object to access its operations.
     */
    private final AmfDeploymentsClient amfDeployments;

    /**
     * Gets the AmfDeploymentsClient object to access its operations.
     * 
     * @return the AmfDeploymentsClient object.
     */
    public AmfDeploymentsClient getAmfDeployments() {
        return this.amfDeployments;
    }

    /**
     * The ClusterServicesClient object to access its operations.
     */
    private final ClusterServicesClient clusterServices;

    /**
     * Gets the ClusterServicesClient object to access its operations.
     * 
     * @return the ClusterServicesClient object.
     */
    public ClusterServicesClient getClusterServices() {
        return this.clusterServices;
    }

    /**
     * The MobileNetworksClient object to access its operations.
     */
    private final MobileNetworksClient mobileNetworks;

    /**
     * Gets the MobileNetworksClient object to access its operations.
     * 
     * @return the MobileNetworksClient object.
     */
    public MobileNetworksClient getMobileNetworks() {
        return this.mobileNetworks;
    }

    /**
     * The NrfDeploymentsClient object to access its operations.
     */
    private final NrfDeploymentsClient nrfDeployments;

    /**
     * Gets the NrfDeploymentsClient object to access its operations.
     * 
     * @return the NrfDeploymentsClient object.
     */
    public NrfDeploymentsClient getNrfDeployments() {
        return this.nrfDeployments;
    }

    /**
     * The NssfDeploymentsClient object to access its operations.
     */
    private final NssfDeploymentsClient nssfDeployments;

    /**
     * Gets the NssfDeploymentsClient object to access its operations.
     * 
     * @return the NssfDeploymentsClient object.
     */
    public NssfDeploymentsClient getNssfDeployments() {
        return this.nssfDeployments;
    }

    /**
     * The ObservabilityServicesClient object to access its operations.
     */
    private final ObservabilityServicesClient observabilityServices;

    /**
     * Gets the ObservabilityServicesClient object to access its operations.
     * 
     * @return the ObservabilityServicesClient object.
     */
    public ObservabilityServicesClient getObservabilityServices() {
        return this.observabilityServices;
    }

    /**
     * The PacketCoreControlPlaneVersionsClient object to access its operations.
     */
    private final PacketCoreControlPlaneVersionsClient packetCoreControlPlaneVersions;

    /**
     * Gets the PacketCoreControlPlaneVersionsClient object to access its operations.
     * 
     * @return the PacketCoreControlPlaneVersionsClient object.
     */
    public PacketCoreControlPlaneVersionsClient getPacketCoreControlPlaneVersions() {
        return this.packetCoreControlPlaneVersions;
    }

    /**
     * The PacketCoreControlPlanesClient object to access its operations.
     */
    private final PacketCoreControlPlanesClient packetCoreControlPlanes;

    /**
     * Gets the PacketCoreControlPlanesClient object to access its operations.
     * 
     * @return the PacketCoreControlPlanesClient object.
     */
    public PacketCoreControlPlanesClient getPacketCoreControlPlanes() {
        return this.packetCoreControlPlanes;
    }

    /**
     * The SimGroupsClient object to access its operations.
     */
    private final SimGroupsClient simGroups;

    /**
     * Gets the SimGroupsClient object to access its operations.
     * 
     * @return the SimGroupsClient object.
     */
    public SimGroupsClient getSimGroups() {
        return this.simGroups;
    }

    /**
     * The SmfDeploymentsClient object to access its operations.
     */
    private final SmfDeploymentsClient smfDeployments;

    /**
     * Gets the SmfDeploymentsClient object to access its operations.
     * 
     * @return the SmfDeploymentsClient object.
     */
    public SmfDeploymentsClient getSmfDeployments() {
        return this.smfDeployments;
    }

    /**
     * The UpfDeploymentsClient object to access its operations.
     */
    private final UpfDeploymentsClient upfDeployments;

    /**
     * Gets the UpfDeploymentsClient object to access its operations.
     * 
     * @return the UpfDeploymentsClient object.
     */
    public UpfDeploymentsClient getUpfDeployments() {
        return this.upfDeployments;
    }

    /**
     * The DataNetworksClient object to access its operations.
     */
    private final DataNetworksClient dataNetworks;

    /**
     * Gets the DataNetworksClient object to access its operations.
     * 
     * @return the DataNetworksClient object.
     */
    public DataNetworksClient getDataNetworks() {
        return this.dataNetworks;
    }

    /**
     * The ServicesClient object to access its operations.
     */
    private final ServicesClient services;

    /**
     * Gets the ServicesClient object to access its operations.
     * 
     * @return the ServicesClient object.
     */
    public ServicesClient getServices() {
        return this.services;
    }

    /**
     * The SimPoliciesClient object to access its operations.
     */
    private final SimPoliciesClient simPolicies;

    /**
     * Gets the SimPoliciesClient object to access its operations.
     * 
     * @return the SimPoliciesClient object.
     */
    public SimPoliciesClient getSimPolicies() {
        return this.simPolicies;
    }

    /**
     * The SitesClient object to access its operations.
     */
    private final SitesClient sites;

    /**
     * Gets the SitesClient object to access its operations.
     * 
     * @return the SitesClient object.
     */
    public SitesClient getSites() {
        return this.sites;
    }

    /**
     * The SlicesClient object to access its operations.
     */
    private final SlicesClient slices;

    /**
     * Gets the SlicesClient object to access its operations.
     * 
     * @return the SlicesClient object.
     */
    public SlicesClient getSlices() {
        return this.slices;
    }

    /**
     * The DiagnosticsPackagesClient object to access its operations.
     */
    private final DiagnosticsPackagesClient diagnosticsPackages;

    /**
     * Gets the DiagnosticsPackagesClient object to access its operations.
     * 
     * @return the DiagnosticsPackagesClient object.
     */
    public DiagnosticsPackagesClient getDiagnosticsPackages() {
        return this.diagnosticsPackages;
    }

    /**
     * The PacketCapturesClient object to access its operations.
     */
    private final PacketCapturesClient packetCaptures;

    /**
     * Gets the PacketCapturesClient object to access its operations.
     * 
     * @return the PacketCapturesClient object.
     */
    public PacketCapturesClient getPacketCaptures() {
        return this.packetCaptures;
    }

    /**
     * The PacketCoreDataPlanesClient object to access its operations.
     */
    private final PacketCoreDataPlanesClient packetCoreDataPlanes;

    /**
     * Gets the PacketCoreDataPlanesClient object to access its operations.
     * 
     * @return the PacketCoreDataPlanesClient object.
     */
    public PacketCoreDataPlanesClient getPacketCoreDataPlanes() {
        return this.packetCoreDataPlanes;
    }

    /**
     * The AttachedDataNetworksClient object to access its operations.
     */
    private final AttachedDataNetworksClient attachedDataNetworks;

    /**
     * Gets the AttachedDataNetworksClient object to access its operations.
     * 
     * @return the AttachedDataNetworksClient object.
     */
    public AttachedDataNetworksClient getAttachedDataNetworks() {
        return this.attachedDataNetworks;
    }

    /**
     * The RoutingInfoModelsClient object to access its operations.
     */
    private final RoutingInfoModelsClient routingInfoModels;

    /**
     * Gets the RoutingInfoModelsClient object to access its operations.
     * 
     * @return the RoutingInfoModelsClient object.
     */
    public RoutingInfoModelsClient getRoutingInfoModels() {
        return this.routingInfoModels;
    }

    /**
     * The UesClient object to access its operations.
     */
    private final UesClient ues;

    /**
     * Gets the UesClient object to access its operations.
     * 
     * @return the UesClient object.
     */
    public UesClient getUes() {
        return this.ues;
    }

    /**
     * The ExtendedUeInfosClient object to access its operations.
     */
    private final ExtendedUeInfosClient extendedUeInfos;

    /**
     * Gets the ExtendedUeInfosClient object to access its operations.
     * 
     * @return the ExtendedUeInfosClient object.
     */
    public ExtendedUeInfosClient getExtendedUeInfos() {
        return this.extendedUeInfos;
    }

    /**
     * The SimsClient object to access its operations.
     */
    private final SimsClient sims;

    /**
     * Gets the SimsClient object to access its operations.
     * 
     * @return the SimsClient object.
     */
    public SimsClient getSims() {
        return this.sims;
    }

    /**
     * Initializes an instance of MobileNetworkManagementClient client.
     * 
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param serializerAdapter The serializer to serialize an object into a string.
     * @param defaultPollInterval The default poll interval for long-running operation.
     * @param environment The Azure environment.
     * @param subscriptionId The ID of the target subscription. The value must be an UUID.
     * @param endpoint server parameter.
     */
    MobileNetworkManagementClientImpl(HttpPipeline httpPipeline, SerializerAdapter serializerAdapter,
        Duration defaultPollInterval, AzureEnvironment environment, String subscriptionId, String endpoint) {
        this.httpPipeline = httpPipeline;
        this.serializerAdapter = serializerAdapter;
        this.defaultPollInterval = defaultPollInterval;
        this.subscriptionId = subscriptionId;
        this.endpoint = endpoint;
        this.apiVersion = "2024-06-01";
        this.operations = new OperationsClientImpl(this);
        this.packetCoreControlPlaneVersionsTenantResources
            = new PacketCoreControlPlaneVersionsTenantResourcesClientImpl(this);
        this.amfDeployments = new AmfDeploymentsClientImpl(this);
        this.clusterServices = new ClusterServicesClientImpl(this);
        this.mobileNetworks = new MobileNetworksClientImpl(this);
        this.nrfDeployments = new NrfDeploymentsClientImpl(this);
        this.nssfDeployments = new NssfDeploymentsClientImpl(this);
        this.observabilityServices = new ObservabilityServicesClientImpl(this);
        this.packetCoreControlPlaneVersions = new PacketCoreControlPlaneVersionsClientImpl(this);
        this.packetCoreControlPlanes = new PacketCoreControlPlanesClientImpl(this);
        this.simGroups = new SimGroupsClientImpl(this);
        this.smfDeployments = new SmfDeploymentsClientImpl(this);
        this.upfDeployments = new UpfDeploymentsClientImpl(this);
        this.dataNetworks = new DataNetworksClientImpl(this);
        this.services = new ServicesClientImpl(this);
        this.simPolicies = new SimPoliciesClientImpl(this);
        this.sites = new SitesClientImpl(this);
        this.slices = new SlicesClientImpl(this);
        this.diagnosticsPackages = new DiagnosticsPackagesClientImpl(this);
        this.packetCaptures = new PacketCapturesClientImpl(this);
        this.packetCoreDataPlanes = new PacketCoreDataPlanesClientImpl(this);
        this.attachedDataNetworks = new AttachedDataNetworksClientImpl(this);
        this.routingInfoModels = new RoutingInfoModelsClientImpl(this);
        this.ues = new UesClientImpl(this);
        this.extendedUeInfos = new ExtendedUeInfosClientImpl(this);
        this.sims = new SimsClientImpl(this);
    }

    /**
     * Gets default client context.
     * 
     * @return the default client context.
     */
    public Context getContext() {
        return Context.NONE;
    }

    /**
     * Merges default client context with provided context.
     * 
     * @param context the context to be merged with default client context.
     * @return the merged context.
     */
    public Context mergeContext(Context context) {
        return CoreUtils.mergeContexts(this.getContext(), context);
    }

    /**
     * Gets long running operation result.
     * 
     * @param activationResponse the response of activation operation.
     * @param httpPipeline the http pipeline.
     * @param pollResultType type of poll result.
     * @param finalResultType type of final result.
     * @param context the context shared by all requests.
     * @param <T> type of poll result.
     * @param <U> type of final result.
     * @return poller flux for poll result and final result.
     */
    public <T, U> PollerFlux<PollResult<T>, U> getLroResult(Mono<Response<Flux<ByteBuffer>>> activationResponse,
        HttpPipeline httpPipeline, Type pollResultType, Type finalResultType, Context context) {
        return PollerFactory.create(serializerAdapter, httpPipeline, pollResultType, finalResultType,
            defaultPollInterval, activationResponse, context);
    }

    /**
     * Gets the final result, or an error, based on last async poll response.
     * 
     * @param response the last async poll response.
     * @param <T> type of poll result.
     * @param <U> type of final result.
     * @return the final result, or an error.
     */
    public <T, U> Mono<U> getLroFinalResultOrError(AsyncPollResponse<PollResult<T>, U> response) {
        if (response.getStatus() != LongRunningOperationStatus.SUCCESSFULLY_COMPLETED) {
            String errorMessage;
            ManagementError managementError = null;
            HttpResponse errorResponse = null;
            PollResult.Error lroError = response.getValue().getError();
            if (lroError != null) {
                errorResponse = new HttpResponseImpl(lroError.getResponseStatusCode(), lroError.getResponseHeaders(),
                    lroError.getResponseBody());

                errorMessage = response.getValue().getError().getMessage();
                String errorBody = response.getValue().getError().getResponseBody();
                if (errorBody != null) {
                    // try to deserialize error body to ManagementError
                    try {
                        managementError = this.getSerializerAdapter()
                            .deserialize(errorBody, ManagementError.class, SerializerEncoding.JSON);
                        if (managementError.getCode() == null || managementError.getMessage() == null) {
                            managementError = null;
                        }
                    } catch (IOException | RuntimeException ioe) {
                        LOGGER.logThrowableAsWarning(ioe);
                    }
                }
            } else {
                // fallback to default error message
                errorMessage = "Long running operation failed.";
            }
            if (managementError == null) {
                // fallback to default ManagementError
                managementError = new ManagementError(response.getStatus().toString(), errorMessage);
            }
            return Mono.error(new ManagementException(errorMessage, errorResponse, managementError));
        } else {
            return response.getFinalResult();
        }
    }

    private static final class HttpResponseImpl extends HttpResponse {
        private final int statusCode;

        private final byte[] responseBody;

        private final HttpHeaders httpHeaders;

        HttpResponseImpl(int statusCode, HttpHeaders httpHeaders, String responseBody) {
            super(null);
            this.statusCode = statusCode;
            this.httpHeaders = httpHeaders;
            this.responseBody = responseBody == null ? null : responseBody.getBytes(StandardCharsets.UTF_8);
        }

        public int getStatusCode() {
            return statusCode;
        }

        public String getHeaderValue(String s) {
            return httpHeaders.getValue(HttpHeaderName.fromString(s));
        }

        public HttpHeaders getHeaders() {
            return httpHeaders;
        }

        public Flux<ByteBuffer> getBody() {
            return Flux.just(ByteBuffer.wrap(responseBody));
        }

        public Mono<byte[]> getBodyAsByteArray() {
            return Mono.just(responseBody);
        }

        public Mono<String> getBodyAsString() {
            return Mono.just(new String(responseBody, StandardCharsets.UTF_8));
        }

        public Mono<String> getBodyAsString(Charset charset) {
            return Mono.just(new String(responseBody, charset));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(MobileNetworkManagementClientImpl.class);
}
