// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.mobilenetwork.fluent.models.ObservabilityServiceResourceInner;
import com.azure.resourcemanager.mobilenetwork.models.ObservabilityServiceResourceTagsUpdate;

/**
 * An instance of this class provides access to all the operations defined in ObservabilityServicesClient.
 */
public interface ObservabilityServicesClient {
    /**
     * List all Observability Services by Subscription ID.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ObservabilityServiceResource list operation as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ObservabilityServiceResourceInner> list();

    /**
     * List all Observability Services by Subscription ID.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ObservabilityServiceResource list operation as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ObservabilityServiceResourceInner> list(Context context);

    /**
     * List all Observability Services by Resource Group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ObservabilityServiceResource list operation as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ObservabilityServiceResourceInner> listByResourceGroup(String resourceGroupName);

    /**
     * List all Observability Services by Resource Group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ObservabilityServiceResource list operation as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ObservabilityServiceResourceInner> listByResourceGroup(String resourceGroupName, Context context);

    /**
     * Get a ObservabilityServiceResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param observabilityServiceName The name of the Observability Service.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a ObservabilityServiceResource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<ObservabilityServiceResourceInner> getByResourceGroupWithResponse(String resourceGroupName,
        String observabilityServiceName, Context context);

    /**
     * Get a ObservabilityServiceResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param observabilityServiceName The name of the Observability Service.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a ObservabilityServiceResource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ObservabilityServiceResourceInner getByResourceGroup(String resourceGroupName, String observabilityServiceName);

    /**
     * Create a ObservabilityServiceResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param observabilityServiceName The name of the Observability Service.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of azure for Operators 5G Core Observability Service Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ObservabilityServiceResourceInner>, ObservabilityServiceResourceInner> beginCreateOrUpdate(
        String resourceGroupName, String observabilityServiceName, ObservabilityServiceResourceInner resource);

    /**
     * Create a ObservabilityServiceResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param observabilityServiceName The name of the Observability Service.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of azure for Operators 5G Core Observability Service Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ObservabilityServiceResourceInner>, ObservabilityServiceResourceInner> beginCreateOrUpdate(
        String resourceGroupName, String observabilityServiceName, ObservabilityServiceResourceInner resource,
        Context context);

    /**
     * Create a ObservabilityServiceResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param observabilityServiceName The name of the Observability Service.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return azure for Operators 5G Core Observability Service Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ObservabilityServiceResourceInner createOrUpdate(String resourceGroupName, String observabilityServiceName,
        ObservabilityServiceResourceInner resource);

    /**
     * Create a ObservabilityServiceResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param observabilityServiceName The name of the Observability Service.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return azure for Operators 5G Core Observability Service Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ObservabilityServiceResourceInner createOrUpdate(String resourceGroupName, String observabilityServiceName,
        ObservabilityServiceResourceInner resource, Context context);

    /**
     * Update a ObservabilityServiceResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param observabilityServiceName The name of the Observability Service.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return azure for Operators 5G Core Observability Service Resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<ObservabilityServiceResourceInner> updateTagsWithResponse(String resourceGroupName,
        String observabilityServiceName, ObservabilityServiceResourceTagsUpdate properties, Context context);

    /**
     * Update a ObservabilityServiceResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param observabilityServiceName The name of the Observability Service.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return azure for Operators 5G Core Observability Service Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ObservabilityServiceResourceInner updateTags(String resourceGroupName, String observabilityServiceName,
        ObservabilityServiceResourceTagsUpdate properties);

    /**
     * Delete a ObservabilityServiceResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param observabilityServiceName The name of the Observability Service.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String observabilityServiceName);

    /**
     * Delete a ObservabilityServiceResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param observabilityServiceName The name of the Observability Service.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String observabilityServiceName,
        Context context);

    /**
     * Delete a ObservabilityServiceResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param observabilityServiceName The name of the Observability Service.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String observabilityServiceName);

    /**
     * Delete a ObservabilityServiceResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param observabilityServiceName The name of the Observability Service.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String observabilityServiceName, Context context);
}
