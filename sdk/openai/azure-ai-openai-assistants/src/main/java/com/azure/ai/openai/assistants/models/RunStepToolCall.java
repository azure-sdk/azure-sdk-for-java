// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.openai.assistants.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeId;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import java.io.IOException;

/**
 * An abstract representation of a detailed tool call as recorded within a run step for an existing run.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = "type", defaultImpl = RunStepToolCall.class, visible = true)
@JsonTypeName("RunStepToolCall")
@JsonSubTypes({
    @JsonSubTypes.Type(name = "code_interpreter", value = RunStepCodeInterpreterToolCall.class),
    @JsonSubTypes.Type(name = "retrieval", value = RunStepRetrievalToolCall.class),
    @JsonSubTypes.Type(name = "function", value = RunStepFunctionToolCall.class) })
@Immutable
public class RunStepToolCall {

    /*
     * The ID of the tool call. This ID must be referenced when you submit tool outputs.
     */
    @Generated
    @JsonProperty(value = "id")
    private final String id;

    /**
     * Creates an instance of RunStepToolCall class.
     *
     * @param id the id value to set.
     */
    @Generated
    @JsonCreator
    protected RunStepToolCall(@JsonProperty(value = "id") String id) {
        this.type = "RunStepToolCall";
        this.id = id;
    }

    /**
     * Get the id property: The ID of the tool call. This ID must be referenced when you submit tool outputs.
     *
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    static RunStepToolCall fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String id = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return new RunStepToolCall(id);
        });
    }

    /*
     * The object type.
     */
    @Generated
    @JsonTypeId
    @JsonProperty(value = "type")
    private String type;

    /**
     * Get the type property: The object type.
     *
     * @return the type value.
     */
    @Generated
    public String getType() {
        return this.type;
    }
}
