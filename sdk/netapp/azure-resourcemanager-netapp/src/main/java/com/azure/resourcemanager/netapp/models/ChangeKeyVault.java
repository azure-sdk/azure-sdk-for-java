// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * Change key vault request.
 */
@Fluent
public final class ChangeKeyVault {
    /*
     * keyVaultUri
     * 
     * The URI of the key vault/managed HSM that should be used for encryption.
     */
    @JsonProperty(value = "keyVaultUri", required = true)
    private String keyVaultUri;

    /*
     * keyName
     * 
     * The name of the key that should be used for encryption.
     */
    @JsonProperty(value = "keyName", required = true)
    private String keyName;

    /*
     * keyVaultResourceId
     * 
     * Azure resource ID of the key vault/managed HSM that should be used for encryption.
     */
    @JsonProperty(value = "keyVaultResourceId", required = true)
    private String keyVaultResourceId;

    /*
     * keyVaultPrivateEndpoints
     * 
     * Pairs of virtual network ID and private endpoint ID. Every virtual network that has volumes encrypted with customer-managed keys needs its own key vault private endpoint.
     */
    @JsonProperty(value = "keyVaultPrivateEndpoints", required = true)
    private List<KeyVaultPrivateEndpoint> keyVaultPrivateEndpoints;

    /**
     * Creates an instance of ChangeKeyVault class.
     */
    public ChangeKeyVault() {
    }

    /**
     * Get the keyVaultUri property: keyVaultUri
     * 
     * The URI of the key vault/managed HSM that should be used for encryption.
     * 
     * @return the keyVaultUri value.
     */
    public String keyVaultUri() {
        return this.keyVaultUri;
    }

    /**
     * Set the keyVaultUri property: keyVaultUri
     * 
     * The URI of the key vault/managed HSM that should be used for encryption.
     * 
     * @param keyVaultUri the keyVaultUri value to set.
     * @return the ChangeKeyVault object itself.
     */
    public ChangeKeyVault withKeyVaultUri(String keyVaultUri) {
        this.keyVaultUri = keyVaultUri;
        return this;
    }

    /**
     * Get the keyName property: keyName
     * 
     * The name of the key that should be used for encryption.
     * 
     * @return the keyName value.
     */
    public String keyName() {
        return this.keyName;
    }

    /**
     * Set the keyName property: keyName
     * 
     * The name of the key that should be used for encryption.
     * 
     * @param keyName the keyName value to set.
     * @return the ChangeKeyVault object itself.
     */
    public ChangeKeyVault withKeyName(String keyName) {
        this.keyName = keyName;
        return this;
    }

    /**
     * Get the keyVaultResourceId property: keyVaultResourceId
     * 
     * Azure resource ID of the key vault/managed HSM that should be used for encryption.
     * 
     * @return the keyVaultResourceId value.
     */
    public String keyVaultResourceId() {
        return this.keyVaultResourceId;
    }

    /**
     * Set the keyVaultResourceId property: keyVaultResourceId
     * 
     * Azure resource ID of the key vault/managed HSM that should be used for encryption.
     * 
     * @param keyVaultResourceId the keyVaultResourceId value to set.
     * @return the ChangeKeyVault object itself.
     */
    public ChangeKeyVault withKeyVaultResourceId(String keyVaultResourceId) {
        this.keyVaultResourceId = keyVaultResourceId;
        return this;
    }

    /**
     * Get the keyVaultPrivateEndpoints property: keyVaultPrivateEndpoints
     * 
     * Pairs of virtual network ID and private endpoint ID. Every virtual network that has volumes encrypted with
     * customer-managed keys needs its own key vault private endpoint.
     * 
     * @return the keyVaultPrivateEndpoints value.
     */
    public List<KeyVaultPrivateEndpoint> keyVaultPrivateEndpoints() {
        return this.keyVaultPrivateEndpoints;
    }

    /**
     * Set the keyVaultPrivateEndpoints property: keyVaultPrivateEndpoints
     * 
     * Pairs of virtual network ID and private endpoint ID. Every virtual network that has volumes encrypted with
     * customer-managed keys needs its own key vault private endpoint.
     * 
     * @param keyVaultPrivateEndpoints the keyVaultPrivateEndpoints value to set.
     * @return the ChangeKeyVault object itself.
     */
    public ChangeKeyVault withKeyVaultPrivateEndpoints(List<KeyVaultPrivateEndpoint> keyVaultPrivateEndpoints) {
        this.keyVaultPrivateEndpoints = keyVaultPrivateEndpoints;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (keyVaultUri() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property keyVaultUri in model ChangeKeyVault"));
        }
        if (keyName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property keyName in model ChangeKeyVault"));
        }
        if (keyVaultResourceId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property keyVaultResourceId in model ChangeKeyVault"));
        }
        if (keyVaultPrivateEndpoints() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property keyVaultPrivateEndpoints in model ChangeKeyVault"));
        } else {
            keyVaultPrivateEndpoints().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ChangeKeyVault.class);
}
