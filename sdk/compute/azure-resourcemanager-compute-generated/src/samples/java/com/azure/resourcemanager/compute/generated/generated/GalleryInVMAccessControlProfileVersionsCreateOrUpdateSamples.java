// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.compute.generated.generated;

import com.azure.resourcemanager.compute.generated.models.AccessControlRules;
import com.azure.resourcemanager.compute.generated.models.AccessControlRulesIdentity;
import com.azure.resourcemanager.compute.generated.models.AccessControlRulesMode;
import com.azure.resourcemanager.compute.generated.models.AccessControlRulesPrivilege;
import com.azure.resourcemanager.compute.generated.models.AccessControlRulesRole;
import com.azure.resourcemanager.compute.generated.models.AccessControlRulesRoleAssignment;
import com.azure.resourcemanager.compute.generated.models.EndpointAccess;
import com.azure.resourcemanager.compute.generated.models.TargetRegion;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for GalleryInVMAccessControlProfileVersions CreateOrUpdate.
 */
public final class GalleryInVMAccessControlProfileVersionsCreateOrUpdateSamples {
    /*
     * x-ms-original-file:
     * specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2024-03-03/examples/
     * galleryResourceProfileExamples/GalleryInVMAccessControlProfileVersion_Create.json
     */
    /**
     * Sample code: Create or update a Gallery InVMAccessControlProfile Version.
     * 
     * @param manager Entry point to ComputeManager.
     */
    public static void createOrUpdateAGalleryInVMAccessControlProfileVersion(
        com.azure.resourcemanager.compute.generated.ComputeManager manager) {
        manager.galleryInVMAccessControlProfileVersions()
            .define("1.0.0")
            .withRegion("West US")
            .withExistingInVMAccessControlProfile("myResourceGroup", "myGalleryName", "myInVMAccessControlProfileName")
            .withMode(AccessControlRulesMode.AUDIT)
            .withDefaultAccess(EndpointAccess.ALLOW)
            .withRules(new AccessControlRules()
                .withPrivileges(Arrays.asList(new AccessControlRulesPrivilege().withName("GoalState")
                    .withPath("/machine")
                    .withQueryParameters(mapOf("comp", "goalstate"))))
                .withRoles(Arrays.asList(
                    new AccessControlRulesRole().withName("Provisioning").withPrivileges(Arrays.asList("GoalState"))))
                .withIdentities(Arrays.asList(new AccessControlRulesIdentity().withName("WinPA")
                    .withUsername("SYSTEM")
                    .withGroupName("Administrators")
                    .withExePath("C:\\Windows\\System32\\cscript.exe")
                    .withProcessName("cscript")))
                .withRoleAssignments(Arrays.asList(new AccessControlRulesRoleAssignment().withRole("Provisioning")
                    .withIdentities(Arrays.asList("WinPA")))))
            .withTargetLocations(
                Arrays.asList(new TargetRegion().withName("West US"), new TargetRegion().withName("South Central US")))
            .withExcludeFromLatest(false)
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
