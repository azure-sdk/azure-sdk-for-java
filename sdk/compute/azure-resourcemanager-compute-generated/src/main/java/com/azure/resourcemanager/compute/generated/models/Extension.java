// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.compute.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.compute.generated.fluent.models.CloudServiceExtensionProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Describes a cloud service Extension. */
@Fluent
public final class Extension {
    /*
     * The name of the extension.
     */
    @JsonProperty(value = "name")
    private String name;

    /*
     * Extension Properties.
     */
    @JsonProperty(value = "properties")
    private CloudServiceExtensionProperties innerProperties;

    /** Creates an instance of Extension class. */
    public Extension() {
    }

    /**
     * Get the name property: The name of the extension.
     *
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The name of the extension.
     *
     * @param name the name value to set.
     * @return the Extension object itself.
     */
    public Extension withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the innerProperties property: Extension Properties.
     *
     * @return the innerProperties value.
     */
    private CloudServiceExtensionProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the publisher property: The name of the extension handler publisher.
     *
     * @return the publisher value.
     */
    public String publisher() {
        return this.innerProperties() == null ? null : this.innerProperties().publisher();
    }

    /**
     * Set the publisher property: The name of the extension handler publisher.
     *
     * @param publisher the publisher value to set.
     * @return the Extension object itself.
     */
    public Extension withPublisher(String publisher) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CloudServiceExtensionProperties();
        }
        this.innerProperties().withPublisher(publisher);
        return this;
    }

    /**
     * Get the type property: Specifies the type of the extension.
     *
     * @return the type value.
     */
    public String type() {
        return this.innerProperties() == null ? null : this.innerProperties().type();
    }

    /**
     * Set the type property: Specifies the type of the extension.
     *
     * @param type the type value to set.
     * @return the Extension object itself.
     */
    public Extension withType(String type) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CloudServiceExtensionProperties();
        }
        this.innerProperties().withType(type);
        return this;
    }

    /**
     * Get the typeHandlerVersion property: Specifies the version of the extension. Specifies the version of the
     * extension. If this element is not specified or an asterisk (*) is used as the value, the latest version of the
     * extension is used. If the value is specified with a major version number and an asterisk as the minor version
     * number (X.), the latest minor version of the specified major version is selected. If a major version number and a
     * minor version number are specified (X.Y), the specific extension version is selected. If a version is specified,
     * an auto-upgrade is performed on the role instance.
     *
     * @return the typeHandlerVersion value.
     */
    public String typeHandlerVersion() {
        return this.innerProperties() == null ? null : this.innerProperties().typeHandlerVersion();
    }

    /**
     * Set the typeHandlerVersion property: Specifies the version of the extension. Specifies the version of the
     * extension. If this element is not specified or an asterisk (*) is used as the value, the latest version of the
     * extension is used. If the value is specified with a major version number and an asterisk as the minor version
     * number (X.), the latest minor version of the specified major version is selected. If a major version number and a
     * minor version number are specified (X.Y), the specific extension version is selected. If a version is specified,
     * an auto-upgrade is performed on the role instance.
     *
     * @param typeHandlerVersion the typeHandlerVersion value to set.
     * @return the Extension object itself.
     */
    public Extension withTypeHandlerVersion(String typeHandlerVersion) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CloudServiceExtensionProperties();
        }
        this.innerProperties().withTypeHandlerVersion(typeHandlerVersion);
        return this;
    }

    /**
     * Get the autoUpgradeMinorVersion property: Explicitly specify whether platform can automatically upgrade
     * typeHandlerVersion to higher minor versions when they become available.
     *
     * @return the autoUpgradeMinorVersion value.
     */
    public Boolean autoUpgradeMinorVersion() {
        return this.innerProperties() == null ? null : this.innerProperties().autoUpgradeMinorVersion();
    }

    /**
     * Set the autoUpgradeMinorVersion property: Explicitly specify whether platform can automatically upgrade
     * typeHandlerVersion to higher minor versions when they become available.
     *
     * @param autoUpgradeMinorVersion the autoUpgradeMinorVersion value to set.
     * @return the Extension object itself.
     */
    public Extension withAutoUpgradeMinorVersion(Boolean autoUpgradeMinorVersion) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CloudServiceExtensionProperties();
        }
        this.innerProperties().withAutoUpgradeMinorVersion(autoUpgradeMinorVersion);
        return this;
    }

    /**
     * Get the settings property: Public settings for the extension. For JSON extensions, this is the JSON settings for
     * the extension. For XML Extension (like RDP), this is the XML setting for the extension.
     *
     * @return the settings value.
     */
    public Object settings() {
        return this.innerProperties() == null ? null : this.innerProperties().settings();
    }

    /**
     * Set the settings property: Public settings for the extension. For JSON extensions, this is the JSON settings for
     * the extension. For XML Extension (like RDP), this is the XML setting for the extension.
     *
     * @param settings the settings value to set.
     * @return the Extension object itself.
     */
    public Extension withSettings(Object settings) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CloudServiceExtensionProperties();
        }
        this.innerProperties().withSettings(settings);
        return this;
    }

    /**
     * Get the protectedSettings property: Protected settings for the extension which are encrypted before sent to the
     * role instance.
     *
     * @return the protectedSettings value.
     */
    public Object protectedSettings() {
        return this.innerProperties() == null ? null : this.innerProperties().protectedSettings();
    }

    /**
     * Set the protectedSettings property: Protected settings for the extension which are encrypted before sent to the
     * role instance.
     *
     * @param protectedSettings the protectedSettings value to set.
     * @return the Extension object itself.
     */
    public Extension withProtectedSettings(Object protectedSettings) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CloudServiceExtensionProperties();
        }
        this.innerProperties().withProtectedSettings(protectedSettings);
        return this;
    }

    /**
     * Get the protectedSettingsFromKeyVault property: Protected settings for the extension, referenced using KeyVault
     * which are encrypted before sent to the role instance.
     *
     * @return the protectedSettingsFromKeyVault value.
     */
    public CloudServiceVaultAndSecretReference protectedSettingsFromKeyVault() {
        return this.innerProperties() == null ? null : this.innerProperties().protectedSettingsFromKeyVault();
    }

    /**
     * Set the protectedSettingsFromKeyVault property: Protected settings for the extension, referenced using KeyVault
     * which are encrypted before sent to the role instance.
     *
     * @param protectedSettingsFromKeyVault the protectedSettingsFromKeyVault value to set.
     * @return the Extension object itself.
     */
    public Extension withProtectedSettingsFromKeyVault(
        CloudServiceVaultAndSecretReference protectedSettingsFromKeyVault) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CloudServiceExtensionProperties();
        }
        this.innerProperties().withProtectedSettingsFromKeyVault(protectedSettingsFromKeyVault);
        return this;
    }

    /**
     * Get the forceUpdateTag property: Tag to force apply the provided public and protected settings. Changing the tag
     * value allows for re-running the extension without changing any of the public or protected settings. If
     * forceUpdateTag is not changed, updates to public or protected settings would still be applied by the handler. If
     * neither forceUpdateTag nor any of public or protected settings change, extension would flow to the role instance
     * with the same sequence-number, and it is up to handler implementation whether to re-run it or not.
     *
     * @return the forceUpdateTag value.
     */
    public String forceUpdateTag() {
        return this.innerProperties() == null ? null : this.innerProperties().forceUpdateTag();
    }

    /**
     * Set the forceUpdateTag property: Tag to force apply the provided public and protected settings. Changing the tag
     * value allows for re-running the extension without changing any of the public or protected settings. If
     * forceUpdateTag is not changed, updates to public or protected settings would still be applied by the handler. If
     * neither forceUpdateTag nor any of public or protected settings change, extension would flow to the role instance
     * with the same sequence-number, and it is up to handler implementation whether to re-run it or not.
     *
     * @param forceUpdateTag the forceUpdateTag value to set.
     * @return the Extension object itself.
     */
    public Extension withForceUpdateTag(String forceUpdateTag) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CloudServiceExtensionProperties();
        }
        this.innerProperties().withForceUpdateTag(forceUpdateTag);
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning state, which only appears in the response.
     *
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the rolesAppliedTo property: Optional list of roles to apply this extension. If property is not specified or
     * '*' is specified, extension is applied to all roles in the cloud service.
     *
     * @return the rolesAppliedTo value.
     */
    public List<String> rolesAppliedTo() {
        return this.innerProperties() == null ? null : this.innerProperties().rolesAppliedTo();
    }

    /**
     * Set the rolesAppliedTo property: Optional list of roles to apply this extension. If property is not specified or
     * '*' is specified, extension is applied to all roles in the cloud service.
     *
     * @param rolesAppliedTo the rolesAppliedTo value to set.
     * @return the Extension object itself.
     */
    public Extension withRolesAppliedTo(List<String> rolesAppliedTo) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CloudServiceExtensionProperties();
        }
        this.innerProperties().withRolesAppliedTo(rolesAppliedTo);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
