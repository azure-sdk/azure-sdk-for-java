// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.compute.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.compute.generated.models.PlacementScore;
import com.azure.resourcemanager.compute.generated.models.ResourceSize;
import java.io.IOException;
import java.util.List;

/**
 * SpotPlacementScores API response.
 */
@Fluent
public final class SpotPlacementScoresResponseInner implements JsonSerializable<SpotPlacementScoresResponseInner> {
    /*
     * The desired regions
     */
    private List<String> desiredLocations;

    /*
     * The desired virtual machine SKU sizes.
     */
    private List<ResourceSize> desiredSizes;

    /*
     * Desired instance count per region/zone based on the scope.
     */
    private Integer desiredCount;

    /*
     * Defines if the scope is zonal or regional.
     */
    private Boolean availabilityZones;

    /*
     * A placement score indicating the likelihood of successfully allocating the specified Spot VM(s), as well as the
     * expected lifetimes of the Spot VM(s) after allocation.
     */
    private List<PlacementScore> placementScores;

    /**
     * Creates an instance of SpotPlacementScoresResponseInner class.
     */
    public SpotPlacementScoresResponseInner() {
    }

    /**
     * Get the desiredLocations property: The desired regions.
     * 
     * @return the desiredLocations value.
     */
    public List<String> desiredLocations() {
        return this.desiredLocations;
    }

    /**
     * Set the desiredLocations property: The desired regions.
     * 
     * @param desiredLocations the desiredLocations value to set.
     * @return the SpotPlacementScoresResponseInner object itself.
     */
    public SpotPlacementScoresResponseInner withDesiredLocations(List<String> desiredLocations) {
        this.desiredLocations = desiredLocations;
        return this;
    }

    /**
     * Get the desiredSizes property: The desired virtual machine SKU sizes.
     * 
     * @return the desiredSizes value.
     */
    public List<ResourceSize> desiredSizes() {
        return this.desiredSizes;
    }

    /**
     * Set the desiredSizes property: The desired virtual machine SKU sizes.
     * 
     * @param desiredSizes the desiredSizes value to set.
     * @return the SpotPlacementScoresResponseInner object itself.
     */
    public SpotPlacementScoresResponseInner withDesiredSizes(List<ResourceSize> desiredSizes) {
        this.desiredSizes = desiredSizes;
        return this;
    }

    /**
     * Get the desiredCount property: Desired instance count per region/zone based on the scope.
     * 
     * @return the desiredCount value.
     */
    public Integer desiredCount() {
        return this.desiredCount;
    }

    /**
     * Set the desiredCount property: Desired instance count per region/zone based on the scope.
     * 
     * @param desiredCount the desiredCount value to set.
     * @return the SpotPlacementScoresResponseInner object itself.
     */
    public SpotPlacementScoresResponseInner withDesiredCount(Integer desiredCount) {
        this.desiredCount = desiredCount;
        return this;
    }

    /**
     * Get the availabilityZones property: Defines if the scope is zonal or regional.
     * 
     * @return the availabilityZones value.
     */
    public Boolean availabilityZones() {
        return this.availabilityZones;
    }

    /**
     * Set the availabilityZones property: Defines if the scope is zonal or regional.
     * 
     * @param availabilityZones the availabilityZones value to set.
     * @return the SpotPlacementScoresResponseInner object itself.
     */
    public SpotPlacementScoresResponseInner withAvailabilityZones(Boolean availabilityZones) {
        this.availabilityZones = availabilityZones;
        return this;
    }

    /**
     * Get the placementScores property: A placement score indicating the likelihood of successfully allocating the
     * specified Spot VM(s), as well as the expected lifetimes of the Spot VM(s) after allocation.
     * 
     * @return the placementScores value.
     */
    public List<PlacementScore> placementScores() {
        return this.placementScores;
    }

    /**
     * Set the placementScores property: A placement score indicating the likelihood of successfully allocating the
     * specified Spot VM(s), as well as the expected lifetimes of the Spot VM(s) after allocation.
     * 
     * @param placementScores the placementScores value to set.
     * @return the SpotPlacementScoresResponseInner object itself.
     */
    public SpotPlacementScoresResponseInner withPlacementScores(List<PlacementScore> placementScores) {
        this.placementScores = placementScores;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (desiredSizes() != null) {
            desiredSizes().forEach(e -> e.validate());
        }
        if (placementScores() != null) {
            placementScores().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("desiredLocations", this.desiredLocations,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("desiredSizes", this.desiredSizes, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeNumberField("desiredCount", this.desiredCount);
        jsonWriter.writeBooleanField("availabilityZones", this.availabilityZones);
        jsonWriter.writeArrayField("placementScores", this.placementScores,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SpotPlacementScoresResponseInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SpotPlacementScoresResponseInner if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SpotPlacementScoresResponseInner.
     */
    public static SpotPlacementScoresResponseInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SpotPlacementScoresResponseInner deserializedSpotPlacementScoresResponseInner
                = new SpotPlacementScoresResponseInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("desiredLocations".equals(fieldName)) {
                    List<String> desiredLocations = reader.readArray(reader1 -> reader1.getString());
                    deserializedSpotPlacementScoresResponseInner.desiredLocations = desiredLocations;
                } else if ("desiredSizes".equals(fieldName)) {
                    List<ResourceSize> desiredSizes = reader.readArray(reader1 -> ResourceSize.fromJson(reader1));
                    deserializedSpotPlacementScoresResponseInner.desiredSizes = desiredSizes;
                } else if ("desiredCount".equals(fieldName)) {
                    deserializedSpotPlacementScoresResponseInner.desiredCount = reader.getNullable(JsonReader::getInt);
                } else if ("availabilityZones".equals(fieldName)) {
                    deserializedSpotPlacementScoresResponseInner.availabilityZones
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("placementScores".equals(fieldName)) {
                    List<PlacementScore> placementScores
                        = reader.readArray(reader1 -> PlacementScore.fromJson(reader1));
                    deserializedSpotPlacementScoresResponseInner.placementScores = placementScores;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSpotPlacementScoresResponseInner;
        });
    }
}
