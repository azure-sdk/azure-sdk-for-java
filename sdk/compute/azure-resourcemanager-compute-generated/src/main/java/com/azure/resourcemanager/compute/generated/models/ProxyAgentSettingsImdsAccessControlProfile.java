// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.compute.generated.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/**
 * Specify access control profile for IMDS endpoint.
 */
@Fluent
public final class ProxyAgentSettingsImdsAccessControlProfile {
    /*
     * Specifies the mode that ProxyAgent will execute on. ProxyAgent will start to simulate and log access control
     * over requests to IMDS endpoints in Audit mode, while in Enforce mode it will enforce access control. The default
     * value is Disabled mode.
     */
    @JsonProperty(value = "mode")
    private Mode mode;

    /*
     * Specify a dictionary of rules, key is URL path, value is an array of allowed list
     */
    @JsonProperty(value = "rules")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, List<RuleDefinition>> rules;

    /**
     * Creates an instance of ProxyAgentSettingsImdsAccessControlProfile class.
     */
    public ProxyAgentSettingsImdsAccessControlProfile() {
    }

    /**
     * Get the mode property: Specifies the mode that ProxyAgent will execute on. ProxyAgent will start to simulate and
     * log access control over requests to IMDS endpoints in Audit mode, while in Enforce mode it will enforce access
     * control. The default value is Disabled mode.
     * 
     * @return the mode value.
     */
    public Mode mode() {
        return this.mode;
    }

    /**
     * Set the mode property: Specifies the mode that ProxyAgent will execute on. ProxyAgent will start to simulate and
     * log access control over requests to IMDS endpoints in Audit mode, while in Enforce mode it will enforce access
     * control. The default value is Disabled mode.
     * 
     * @param mode the mode value to set.
     * @return the ProxyAgentSettingsImdsAccessControlProfile object itself.
     */
    public ProxyAgentSettingsImdsAccessControlProfile withMode(Mode mode) {
        this.mode = mode;
        return this;
    }

    /**
     * Get the rules property: Specify a dictionary of rules, key is URL path, value is an array of allowed list.
     * 
     * @return the rules value.
     */
    public Map<String, List<RuleDefinition>> rules() {
        return this.rules;
    }

    /**
     * Set the rules property: Specify a dictionary of rules, key is URL path, value is an array of allowed list.
     * 
     * @param rules the rules value to set.
     * @return the ProxyAgentSettingsImdsAccessControlProfile object itself.
     */
    public ProxyAgentSettingsImdsAccessControlProfile withRules(Map<String, List<RuleDefinition>> rules) {
        this.rules = rules;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (rules() != null) {
            rules().values().forEach(e -> {
                if (e != null) {
                    e.forEach(e1 -> e1.validate());
                }
            });
        }
    }
}
