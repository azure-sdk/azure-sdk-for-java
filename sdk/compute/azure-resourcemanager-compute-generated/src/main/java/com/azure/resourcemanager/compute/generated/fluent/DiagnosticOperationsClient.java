// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.compute.generated.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/**
 * An instance of this class provides access to all the operations defined in DiagnosticOperationsClient.
 */
public interface DiagnosticOperationsClient {
    /**
     * Gets status of a Diagnostic operation issued for Disk Inspection.
     * 
     * @param location The location used to execute the diagnostic operation.
     * @param operationId The identifier pointing to a request for Disk Inspection. This is used for polling result of
     * the request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.compute.generated.models.ErrorDetailException thrown if the request is rejected
     * by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return status of a Diagnostic operation issued for Disk Inspection along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> readWithResponse(String location, String operationId, Context context);

    /**
     * Gets status of a Diagnostic operation issued for Disk Inspection.
     * 
     * @param location The location used to execute the diagnostic operation.
     * @param operationId The identifier pointing to a request for Disk Inspection. This is used for polling result of
     * the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.compute.generated.models.ErrorDetailException thrown if the request is rejected
     * by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void read(String location, String operationId);
}
