// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.compute.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.compute.generated.models.Architecture;
import com.azure.resourcemanager.compute.generated.models.CommunityGalleryImageIdentifier;
import com.azure.resourcemanager.compute.generated.models.Disallowed;
import com.azure.resourcemanager.compute.generated.models.GalleryImageFeature;
import com.azure.resourcemanager.compute.generated.models.HyperVGeneration;
import com.azure.resourcemanager.compute.generated.models.ImagePurchasePlan;
import com.azure.resourcemanager.compute.generated.models.OperatingSystemStateTypes;
import com.azure.resourcemanager.compute.generated.models.OperatingSystemTypes;
import com.azure.resourcemanager.compute.generated.models.RecommendedMachineConfiguration;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;

/**
 * Describes the properties of a gallery image definition.
 */
@Fluent
public final class CommunityGalleryImageProperties implements JsonSerializable<CommunityGalleryImageProperties> {
    /*
     * This property allows you to specify the type of the OS that is included in the disk when creating a VM from a
     * managed image. Possible values are: **Windows,** **Linux.**
     */
    private OperatingSystemTypes osType;

    /*
     * This property allows the user to specify whether the virtual machines created under this image are 'Generalized'
     * or 'Specialized'.
     */
    private OperatingSystemStateTypes osState;

    /*
     * The end of life date of the gallery image definition. This property can be used for decommissioning purposes.
     * This property is updatable.
     */
    private OffsetDateTime endOfLifeDate;

    /*
     * This is the community gallery image definition identifier.
     */
    private CommunityGalleryImageIdentifier identifier;

    /*
     * The properties describe the recommended machine configuration for this Image Definition. These properties are
     * updatable.
     */
    private RecommendedMachineConfiguration recommended;

    /*
     * Describes the disallowed disk types.
     */
    private Disallowed disallowed;

    /*
     * The hypervisor generation of the Virtual Machine. Applicable to OS disks only.
     */
    private HyperVGeneration hyperVGeneration;

    /*
     * A list of gallery image features.
     */
    private List<GalleryImageFeature> features;

    /*
     * Describes the gallery image definition purchase plan. This is used by marketplace images.
     */
    private ImagePurchasePlan purchasePlan;

    /*
     * The architecture of the image. Applicable to OS disks only.
     */
    private Architecture architecture;

    /*
     * Privacy statement URI for the current community gallery image.
     */
    private String privacyStatementUri;

    /*
     * The end-user license agreement for the current community gallery image.
     */
    private String eula;

    /*
     * The disclaimer for a community gallery resource.
     */
    private String disclaimer;

    /*
     * The artifact tags of a community gallery resource.
     */
    private Map<String, String> artifactTags;

    /**
     * Creates an instance of CommunityGalleryImageProperties class.
     */
    public CommunityGalleryImageProperties() {
    }

    /**
     * Get the osType property: This property allows you to specify the type of the OS that is included in the disk when
     * creating a VM from a managed image. Possible values are: **Windows,** **Linux.**.
     * 
     * @return the osType value.
     */
    public OperatingSystemTypes osType() {
        return this.osType;
    }

    /**
     * Get the osState property: This property allows the user to specify whether the virtual machines created under
     * this image are 'Generalized' or 'Specialized'.
     * 
     * @return the osState value.
     */
    public OperatingSystemStateTypes osState() {
        return this.osState;
    }

    /**
     * Get the endOfLifeDate property: The end of life date of the gallery image definition. This property can be used
     * for decommissioning purposes. This property is updatable.
     * 
     * @return the endOfLifeDate value.
     */
    public OffsetDateTime endOfLifeDate() {
        return this.endOfLifeDate;
    }

    /**
     * Get the identifier property: This is the community gallery image definition identifier.
     * 
     * @return the identifier value.
     */
    public CommunityGalleryImageIdentifier identifier() {
        return this.identifier;
    }

    /**
     * Get the recommended property: The properties describe the recommended machine configuration for this Image
     * Definition. These properties are updatable.
     * 
     * @return the recommended value.
     */
    public RecommendedMachineConfiguration recommended() {
        return this.recommended;
    }

    /**
     * Get the disallowed property: Describes the disallowed disk types.
     * 
     * @return the disallowed value.
     */
    public Disallowed disallowed() {
        return this.disallowed;
    }

    /**
     * Set the disallowed property: Describes the disallowed disk types.
     * 
     * @param disallowed the disallowed value to set.
     * @return the CommunityGalleryImageProperties object itself.
     */
    public CommunityGalleryImageProperties withDisallowed(Disallowed disallowed) {
        this.disallowed = disallowed;
        return this;
    }

    /**
     * Get the hyperVGeneration property: The hypervisor generation of the Virtual Machine. Applicable to OS disks only.
     * 
     * @return the hyperVGeneration value.
     */
    public HyperVGeneration hyperVGeneration() {
        return this.hyperVGeneration;
    }

    /**
     * Get the features property: A list of gallery image features.
     * 
     * @return the features value.
     */
    public List<GalleryImageFeature> features() {
        return this.features;
    }

    /**
     * Get the purchasePlan property: Describes the gallery image definition purchase plan. This is used by marketplace
     * images.
     * 
     * @return the purchasePlan value.
     */
    public ImagePurchasePlan purchasePlan() {
        return this.purchasePlan;
    }

    /**
     * Get the architecture property: The architecture of the image. Applicable to OS disks only.
     * 
     * @return the architecture value.
     */
    public Architecture architecture() {
        return this.architecture;
    }

    /**
     * Get the privacyStatementUri property: Privacy statement URI for the current community gallery image.
     * 
     * @return the privacyStatementUri value.
     */
    public String privacyStatementUri() {
        return this.privacyStatementUri;
    }

    /**
     * Get the eula property: The end-user license agreement for the current community gallery image.
     * 
     * @return the eula value.
     */
    public String eula() {
        return this.eula;
    }

    /**
     * Get the disclaimer property: The disclaimer for a community gallery resource.
     * 
     * @return the disclaimer value.
     */
    public String disclaimer() {
        return this.disclaimer;
    }

    /**
     * Get the artifactTags property: The artifact tags of a community gallery resource.
     * 
     * @return the artifactTags value.
     */
    public Map<String, String> artifactTags() {
        return this.artifactTags;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (identifier() != null) {
            identifier().validate();
        }
        if (recommended() != null) {
            recommended().validate();
        }
        if (disallowed() != null) {
            disallowed().validate();
        }
        if (features() != null) {
            features().forEach(e -> e.validate());
        }
        if (purchasePlan() != null) {
            purchasePlan().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("disallowed", this.disallowed);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CommunityGalleryImageProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CommunityGalleryImageProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CommunityGalleryImageProperties.
     */
    public static CommunityGalleryImageProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CommunityGalleryImageProperties deserializedCommunityGalleryImageProperties
                = new CommunityGalleryImageProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("osType".equals(fieldName)) {
                    deserializedCommunityGalleryImageProperties.osType
                        = OperatingSystemTypes.fromString(reader.getString());
                } else if ("osState".equals(fieldName)) {
                    deserializedCommunityGalleryImageProperties.osState
                        = OperatingSystemStateTypes.fromString(reader.getString());
                } else if ("identifier".equals(fieldName)) {
                    deserializedCommunityGalleryImageProperties.identifier
                        = CommunityGalleryImageIdentifier.fromJson(reader);
                } else if ("endOfLifeDate".equals(fieldName)) {
                    deserializedCommunityGalleryImageProperties.endOfLifeDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("recommended".equals(fieldName)) {
                    deserializedCommunityGalleryImageProperties.recommended
                        = RecommendedMachineConfiguration.fromJson(reader);
                } else if ("disallowed".equals(fieldName)) {
                    deserializedCommunityGalleryImageProperties.disallowed = Disallowed.fromJson(reader);
                } else if ("hyperVGeneration".equals(fieldName)) {
                    deserializedCommunityGalleryImageProperties.hyperVGeneration
                        = HyperVGeneration.fromString(reader.getString());
                } else if ("features".equals(fieldName)) {
                    List<GalleryImageFeature> features
                        = reader.readArray(reader1 -> GalleryImageFeature.fromJson(reader1));
                    deserializedCommunityGalleryImageProperties.features = features;
                } else if ("purchasePlan".equals(fieldName)) {
                    deserializedCommunityGalleryImageProperties.purchasePlan = ImagePurchasePlan.fromJson(reader);
                } else if ("architecture".equals(fieldName)) {
                    deserializedCommunityGalleryImageProperties.architecture
                        = Architecture.fromString(reader.getString());
                } else if ("privacyStatementUri".equals(fieldName)) {
                    deserializedCommunityGalleryImageProperties.privacyStatementUri = reader.getString();
                } else if ("eula".equals(fieldName)) {
                    deserializedCommunityGalleryImageProperties.eula = reader.getString();
                } else if ("disclaimer".equals(fieldName)) {
                    deserializedCommunityGalleryImageProperties.disclaimer = reader.getString();
                } else if ("artifactTags".equals(fieldName)) {
                    Map<String, String> artifactTags = reader.readMap(reader1 -> reader1.getString());
                    deserializedCommunityGalleryImageProperties.artifactTags = artifactTags;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCommunityGalleryImageProperties;
        });
    }
}
