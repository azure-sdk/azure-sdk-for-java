// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.compute.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.compute.generated.fluent.models.GallerySecurityPostureVersionProperties;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;

/**
 * Specifies information about the gallery security posture version that you want to update.
 */
@Fluent
public final class GallerySecurityPostureVersionUpdate extends UpdateResourceDefinition {
    /*
     * Describes the properties of a gallery security posture version.
     */
    private GallerySecurityPostureVersionProperties innerProperties;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * The type of the resource.
     */
    private String type;

    /**
     * Creates an instance of GallerySecurityPostureVersionUpdate class.
     */
    public GallerySecurityPostureVersionUpdate() {
    }

    /**
     * Get the innerProperties property: Describes the properties of a gallery security posture version.
     * 
     * @return the innerProperties value.
     */
    private GallerySecurityPostureVersionProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public GallerySecurityPostureVersionUpdate withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the excludeFromLatest property: If set to true, virtual machines deployed from the latest version of the
     * security posture won't use this version.
     * 
     * @return the excludeFromLatest value.
     */
    public Boolean excludeFromLatest() {
        return this.innerProperties() == null ? null : this.innerProperties().excludeFromLatest();
    }

    /**
     * Set the excludeFromLatest property: If set to true, virtual machines deployed from the latest version of the
     * security posture won't use this version.
     * 
     * @param excludeFromLatest the excludeFromLatest value to set.
     * @return the GallerySecurityPostureVersionUpdate object itself.
     */
    public GallerySecurityPostureVersionUpdate withExcludeFromLatest(Boolean excludeFromLatest) {
        if (this.innerProperties() == null) {
            this.innerProperties = new GallerySecurityPostureVersionProperties();
        }
        this.innerProperties().withExcludeFromLatest(excludeFromLatest);
        return this;
    }

    /**
     * Get the publishedDate property: The timestamp for when the gallery security posture version is published.
     * 
     * @return the publishedDate value.
     */
    public OffsetDateTime publishedDate() {
        return this.innerProperties() == null ? null : this.innerProperties().publishedDate();
    }

    /**
     * Get the endOfLifeDate property: The end of life date of the gallery security posture version. This property can
     * be used for decommissioning purposes. This property is updatable.
     * 
     * @return the endOfLifeDate value.
     */
    public OffsetDateTime endOfLifeDate() {
        return this.innerProperties() == null ? null : this.innerProperties().endOfLifeDate();
    }

    /**
     * Set the endOfLifeDate property: The end of life date of the gallery security posture version. This property can
     * be used for decommissioning purposes. This property is updatable.
     * 
     * @param endOfLifeDate the endOfLifeDate value to set.
     * @return the GallerySecurityPostureVersionUpdate object itself.
     */
    public GallerySecurityPostureVersionUpdate withEndOfLifeDate(OffsetDateTime endOfLifeDate) {
        if (this.innerProperties() == null) {
            this.innerProperties = new GallerySecurityPostureVersionProperties();
        }
        this.innerProperties().withEndOfLifeDate(endOfLifeDate);
        return this;
    }

    /**
     * Get the settings property: A list of security posture settings, in key-value pair.
     * 
     * @return the settings value.
     */
    public List<PostureSetting> settings() {
        return this.innerProperties() == null ? null : this.innerProperties().settings();
    }

    /**
     * Set the settings property: A list of security posture settings, in key-value pair.
     * 
     * @param settings the settings value to set.
     * @return the GallerySecurityPostureVersionUpdate object itself.
     */
    public GallerySecurityPostureVersionUpdate withSettings(List<PostureSetting> settings) {
        if (this.innerProperties() == null) {
            this.innerProperties = new GallerySecurityPostureVersionProperties();
        }
        this.innerProperties().withSettings(settings);
        return this;
    }

    /**
     * Get the targetLocations property: The target regions where the security posture version is going to be replicated
     * to. This property is updatable.
     * 
     * @return the targetLocations value.
     */
    public List<TargetRegion> targetLocations() {
        return this.innerProperties() == null ? null : this.innerProperties().targetLocations();
    }

    /**
     * Set the targetLocations property: The target regions where the security posture version is going to be replicated
     * to. This property is updatable.
     * 
     * @param targetLocations the targetLocations value to set.
     * @return the GallerySecurityPostureVersionUpdate object itself.
     */
    public GallerySecurityPostureVersionUpdate withTargetLocations(List<TargetRegion> targetLocations) {
        if (this.innerProperties() == null) {
            this.innerProperties = new GallerySecurityPostureVersionProperties();
        }
        this.innerProperties().withTargetLocations(targetLocations);
        return this;
    }

    /**
     * Get the virtualMachineExtensions property: A setting for gallery security posture.
     * 
     * @return the virtualMachineExtensions value.
     */
    public VirtualMachineExtensionAutoGenerated virtualMachineExtensions() {
        return this.innerProperties() == null ? null : this.innerProperties().virtualMachineExtensions();
    }

    /**
     * Set the virtualMachineExtensions property: A setting for gallery security posture.
     * 
     * @param virtualMachineExtensions the virtualMachineExtensions value to set.
     * @return the GallerySecurityPostureVersionUpdate object itself.
     */
    public GallerySecurityPostureVersionUpdate
        withVirtualMachineExtensions(VirtualMachineExtensionAutoGenerated virtualMachineExtensions) {
        if (this.innerProperties() == null) {
            this.innerProperties = new GallerySecurityPostureVersionProperties();
        }
        this.innerProperties().withVirtualMachineExtensions(virtualMachineExtensions);
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning state, which only appears in the response.
     * 
     * @return the provisioningState value.
     */
    public GalleryProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the replicationStatus property: This is the replication status of the gallery image version.
     * 
     * @return the replicationStatus value.
     */
    public ReplicationStatus replicationStatus() {
        return this.innerProperties() == null ? null : this.innerProperties().replicationStatus();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeMapField("tags", tags(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GallerySecurityPostureVersionUpdate from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GallerySecurityPostureVersionUpdate if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the GallerySecurityPostureVersionUpdate.
     */
    public static GallerySecurityPostureVersionUpdate fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GallerySecurityPostureVersionUpdate deserializedGallerySecurityPostureVersionUpdate
                = new GallerySecurityPostureVersionUpdate();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedGallerySecurityPostureVersionUpdate.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedGallerySecurityPostureVersionUpdate.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedGallerySecurityPostureVersionUpdate.type = reader.getString();
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedGallerySecurityPostureVersionUpdate.withTags(tags);
                } else if ("properties".equals(fieldName)) {
                    deserializedGallerySecurityPostureVersionUpdate.innerProperties
                        = GallerySecurityPostureVersionProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedGallerySecurityPostureVersionUpdate;
        });
    }
}
