// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.compute.generated.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/**
 * Specifies one rule.
 */
@Fluent
public final class RuleDefinition {
    /*
     * Dictionary of <string>
     */
    @JsonProperty(value = "queryParameters")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, String> queryParameters;

    /*
     * Specifies an array of principals that be allow to access the path
     */
    @JsonProperty(value = "filters")
    private List<FilterDefinition> filters;

    /**
     * Creates an instance of RuleDefinition class.
     */
    public RuleDefinition() {
    }

    /**
     * Get the queryParameters property: Dictionary of &lt;string&gt;.
     * 
     * @return the queryParameters value.
     */
    public Map<String, String> queryParameters() {
        return this.queryParameters;
    }

    /**
     * Set the queryParameters property: Dictionary of &lt;string&gt;.
     * 
     * @param queryParameters the queryParameters value to set.
     * @return the RuleDefinition object itself.
     */
    public RuleDefinition withQueryParameters(Map<String, String> queryParameters) {
        this.queryParameters = queryParameters;
        return this;
    }

    /**
     * Get the filters property: Specifies an array of principals that be allow to access the path.
     * 
     * @return the filters value.
     */
    public List<FilterDefinition> filters() {
        return this.filters;
    }

    /**
     * Set the filters property: Specifies an array of principals that be allow to access the path.
     * 
     * @param filters the filters value to set.
     * @return the RuleDefinition object itself.
     */
    public RuleDefinition withFilters(List<FilterDefinition> filters) {
        this.filters = filters;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (filters() != null) {
            filters().forEach(e -> e.validate());
        }
    }
}
