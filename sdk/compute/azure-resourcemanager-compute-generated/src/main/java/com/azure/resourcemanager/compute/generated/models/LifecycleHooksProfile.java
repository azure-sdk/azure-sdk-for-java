// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.compute.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Specifies the lifecycle hooks profile for the virtual machine scale set.
 */
@Fluent
public final class LifecycleHooksProfile implements JsonSerializable<LifecycleHooksProfile> {
    /*
     * Specifies the lifecycle hooks for the virtual machine scale set.
     */
    private List<LifecycleHook> lifecycleHooks;

    /**
     * Creates an instance of LifecycleHooksProfile class.
     */
    public LifecycleHooksProfile() {
    }

    /**
     * Get the lifecycleHooks property: Specifies the lifecycle hooks for the virtual machine scale set.
     * 
     * @return the lifecycleHooks value.
     */
    public List<LifecycleHook> lifecycleHooks() {
        return this.lifecycleHooks;
    }

    /**
     * Set the lifecycleHooks property: Specifies the lifecycle hooks for the virtual machine scale set.
     * 
     * @param lifecycleHooks the lifecycleHooks value to set.
     * @return the LifecycleHooksProfile object itself.
     */
    public LifecycleHooksProfile withLifecycleHooks(List<LifecycleHook> lifecycleHooks) {
        this.lifecycleHooks = lifecycleHooks;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (lifecycleHooks() != null) {
            lifecycleHooks().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("lifecycleHooks", this.lifecycleHooks,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LifecycleHooksProfile from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LifecycleHooksProfile if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the LifecycleHooksProfile.
     */
    public static LifecycleHooksProfile fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LifecycleHooksProfile deserializedLifecycleHooksProfile = new LifecycleHooksProfile();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("lifecycleHooks".equals(fieldName)) {
                    List<LifecycleHook> lifecycleHooks = reader.readArray(reader1 -> LifecycleHook.fromJson(reader1));
                    deserializedLifecycleHooksProfile.lifecycleHooks = lifecycleHooks;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLifecycleHooksProfile;
        });
    }
}
