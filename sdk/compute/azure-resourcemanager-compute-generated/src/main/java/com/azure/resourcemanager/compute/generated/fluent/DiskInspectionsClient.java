// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.compute.generated.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.compute.generated.fluent.models.ComputeDiagnosticBaseInner;
import com.azure.resourcemanager.compute.generated.models.RunDiskInspectionInput;

/**
 * An instance of this class provides access to all the operations defined in DiskInspectionsClient.
 */
public interface DiskInspectionsClient {
    /**
     * Creates a request for executing disk Inspection.
     * 
     * @param location The location used to execute the diagnostic operation.
     * @param runDiskInspectionInput RunDiskInspection object supplied in the body of the Post run disk inspection
     * operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.compute.generated.models.ErrorDetailException thrown if the request is rejected
     * by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<String>, String> beginCreate(String location, RunDiskInspectionInput runDiskInspectionInput);

    /**
     * Creates a request for executing disk Inspection.
     * 
     * @param location The location used to execute the diagnostic operation.
     * @param runDiskInspectionInput RunDiskInspection object supplied in the body of the Post run disk inspection
     * operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.compute.generated.models.ErrorDetailException thrown if the request is rejected
     * by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<String>, String> beginCreate(String location, RunDiskInspectionInput runDiskInspectionInput,
        Context context);

    /**
     * Creates a request for executing disk Inspection.
     * 
     * @param location The location used to execute the diagnostic operation.
     * @param runDiskInspectionInput RunDiskInspection object supplied in the body of the Post run disk inspection
     * operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.compute.generated.models.ErrorDetailException thrown if the request is rejected
     * by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    String create(String location, RunDiskInspectionInput runDiskInspectionInput);

    /**
     * Creates a request for executing disk Inspection.
     * 
     * @param location The location used to execute the diagnostic operation.
     * @param runDiskInspectionInput RunDiskInspection object supplied in the body of the Post run disk inspection
     * operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.compute.generated.models.ErrorDetailException thrown if the request is rejected
     * by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    String create(String location, RunDiskInspectionInput runDiskInspectionInput, Context context);

    /**
     * Gets a specific Compute diagnostic for a subscription in a location.
     * 
     * @param location The location used to execute the diagnostic operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.compute.generated.models.ErrorDetailException thrown if the request is rejected
     * by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specific Compute diagnostic for a subscription in a location along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<ComputeDiagnosticBaseInner> getWithResponse(String location, Context context);

    /**
     * Gets a specific Compute diagnostic for a subscription in a location.
     * 
     * @param location The location used to execute the diagnostic operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.compute.generated.models.ErrorDetailException thrown if the request is rejected
     * by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specific Compute diagnostic for a subscription in a location.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ComputeDiagnosticBaseInner get(String location);
}
