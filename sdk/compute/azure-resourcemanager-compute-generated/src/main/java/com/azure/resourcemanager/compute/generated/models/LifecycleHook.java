// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.compute.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Describes a lifecycle hook.
 */
@Fluent
public final class LifecycleHook implements JsonSerializable<LifecycleHook> {
    /*
     * Specifies the type of the lifecycle hook.
     */
    private String type;

    /*
     * Specifies the wait duration for the lifecycle hook.
     */
    private String waitDuration;

    /*
     * Specifies the default action for the lifecycle hook.
     */
    private LifecycleHookAction defaultAction;

    /**
     * Creates an instance of LifecycleHook class.
     */
    public LifecycleHook() {
    }

    /**
     * Get the type property: Specifies the type of the lifecycle hook.
     * 
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Set the type property: Specifies the type of the lifecycle hook.
     * 
     * @param type the type value to set.
     * @return the LifecycleHook object itself.
     */
    public LifecycleHook withType(String type) {
        this.type = type;
        return this;
    }

    /**
     * Get the waitDuration property: Specifies the wait duration for the lifecycle hook.
     * 
     * @return the waitDuration value.
     */
    public String waitDuration() {
        return this.waitDuration;
    }

    /**
     * Set the waitDuration property: Specifies the wait duration for the lifecycle hook.
     * 
     * @param waitDuration the waitDuration value to set.
     * @return the LifecycleHook object itself.
     */
    public LifecycleHook withWaitDuration(String waitDuration) {
        this.waitDuration = waitDuration;
        return this;
    }

    /**
     * Get the defaultAction property: Specifies the default action for the lifecycle hook.
     * 
     * @return the defaultAction value.
     */
    public LifecycleHookAction defaultAction() {
        return this.defaultAction;
    }

    /**
     * Set the defaultAction property: Specifies the default action for the lifecycle hook.
     * 
     * @param defaultAction the defaultAction value to set.
     * @return the LifecycleHook object itself.
     */
    public LifecycleHook withDefaultAction(LifecycleHookAction defaultAction) {
        this.defaultAction = defaultAction;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeStringField("waitDuration", this.waitDuration);
        jsonWriter.writeStringField("defaultAction", this.defaultAction == null ? null : this.defaultAction.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LifecycleHook from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LifecycleHook if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the LifecycleHook.
     */
    public static LifecycleHook fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LifecycleHook deserializedLifecycleHook = new LifecycleHook();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedLifecycleHook.type = reader.getString();
                } else if ("waitDuration".equals(fieldName)) {
                    deserializedLifecycleHook.waitDuration = reader.getString();
                } else if ("defaultAction".equals(fieldName)) {
                    deserializedLifecycleHook.defaultAction = LifecycleHookAction.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLifecycleHook;
        });
    }
}
