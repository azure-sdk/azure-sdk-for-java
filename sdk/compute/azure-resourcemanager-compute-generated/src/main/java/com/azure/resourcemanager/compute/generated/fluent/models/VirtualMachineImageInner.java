// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.compute.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.compute.generated.models.ExtendedLocation;
import com.azure.resourcemanager.compute.generated.models.VirtualMachineImageProperties;
import java.io.IOException;
import java.util.Map;

/**
 * Describes a Virtual Machine Image.
 */
@Fluent
public final class VirtualMachineImageInner extends VirtualMachineImageResourceInner {
    /**
     * Creates an instance of VirtualMachineImageInner class.
     */
    public VirtualMachineImageInner() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public VirtualMachineImageInner withName(String name) {
        super.withName(name);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public VirtualMachineImageInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public VirtualMachineImageInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public VirtualMachineImageInner withExtendedLocation(ExtendedLocation extendedLocation) {
        super.withExtendedLocation(extendedLocation);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public VirtualMachineImageInner withProperties(VirtualMachineImageProperties properties) {
        super.withProperties(properties);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public VirtualMachineImageInner withId(String id) {
        super.withId(id);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (name() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property name in model VirtualMachineImageInner"));
        }
        if (location() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property location in model VirtualMachineImageInner"));
        }
        if (extendedLocation() != null) {
            extendedLocation().validate();
        }
        if (properties() != null) {
            properties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(VirtualMachineImageInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", name());
        jsonWriter.writeStringField("location", location());
        jsonWriter.writeStringField("id", id());
        jsonWriter.writeMapField("tags", tags(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("extendedLocation", extendedLocation());
        jsonWriter.writeJsonField("properties", properties());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VirtualMachineImageInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VirtualMachineImageInner if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the VirtualMachineImageInner.
     */
    public static VirtualMachineImageInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VirtualMachineImageInner deserializedVirtualMachineImageInner = new VirtualMachineImageInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedVirtualMachineImageInner.withName(reader.getString());
                } else if ("location".equals(fieldName)) {
                    deserializedVirtualMachineImageInner.withLocation(reader.getString());
                } else if ("id".equals(fieldName)) {
                    deserializedVirtualMachineImageInner.withId(reader.getString());
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedVirtualMachineImageInner.withTags(tags);
                } else if ("extendedLocation".equals(fieldName)) {
                    deserializedVirtualMachineImageInner.withExtendedLocation(ExtendedLocation.fromJson(reader));
                } else if ("properties".equals(fieldName)) {
                    deserializedVirtualMachineImageInner.withProperties(VirtualMachineImageProperties.fromJson(reader));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVirtualMachineImageInner;
        });
    }
}
