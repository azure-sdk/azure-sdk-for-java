// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.compute.generated.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;

/** This specifies the executedValidation property of ValidationsProfile. */
@Fluent
public final class ExecutedValidation {
    /*
     * This property specifies the type of image version validation. This field cannot be empty if providing version.
     */
    @JsonProperty(value = "type")
    private String type;

    /*
     * This property specifies the status of the validationProfile of the image version that is succeeded or failed.
     */
    @JsonProperty(value = "status")
    private String status;

    /*
     * This property specifies the valid version of the validation type. It defined the current version of the type.
     */
    @JsonProperty(value = "version")
    private String version;

    /*
     * This property specifies the timestamp of the validation when the image version was created.
     */
    @JsonProperty(value = "executionTime")
    private OffsetDateTime executionTime;

    /** Creates an instance of ExecutedValidation class. */
    public ExecutedValidation() {
    }

    /**
     * Get the type property: This property specifies the type of image version validation. This field cannot be empty
     * if providing version.
     *
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Set the type property: This property specifies the type of image version validation. This field cannot be empty
     * if providing version.
     *
     * @param type the type value to set.
     * @return the ExecutedValidation object itself.
     */
    public ExecutedValidation withType(String type) {
        this.type = type;
        return this;
    }

    /**
     * Get the status property: This property specifies the status of the validationProfile of the image version that is
     * succeeded or failed.
     *
     * @return the status value.
     */
    public String status() {
        return this.status;
    }

    /**
     * Set the status property: This property specifies the status of the validationProfile of the image version that is
     * succeeded or failed.
     *
     * @param status the status value to set.
     * @return the ExecutedValidation object itself.
     */
    public ExecutedValidation withStatus(String status) {
        this.status = status;
        return this;
    }

    /**
     * Get the version property: This property specifies the valid version of the validation type. It defined the
     * current version of the type.
     *
     * @return the version value.
     */
    public String version() {
        return this.version;
    }

    /**
     * Set the version property: This property specifies the valid version of the validation type. It defined the
     * current version of the type.
     *
     * @param version the version value to set.
     * @return the ExecutedValidation object itself.
     */
    public ExecutedValidation withVersion(String version) {
        this.version = version;
        return this;
    }

    /**
     * Get the executionTime property: This property specifies the timestamp of the validation when the image version
     * was created.
     *
     * @return the executionTime value.
     */
    public OffsetDateTime executionTime() {
        return this.executionTime;
    }

    /**
     * Set the executionTime property: This property specifies the timestamp of the validation when the image version
     * was created.
     *
     * @param executionTime the executionTime value to set.
     * @return the ExecutedValidation object itself.
     */
    public ExecutedValidation withExecutionTime(OffsetDateTime executionTime) {
        this.executionTime = executionTime;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
