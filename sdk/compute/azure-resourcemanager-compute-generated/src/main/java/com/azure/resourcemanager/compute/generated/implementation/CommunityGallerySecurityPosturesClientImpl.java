// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.compute.generated.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.compute.generated.fluent.CommunityGallerySecurityPosturesClient;
import com.azure.resourcemanager.compute.generated.fluent.models.CommunitySecurityPostureInner;
import com.azure.resourcemanager.compute.generated.models.ApiErrorException;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in CommunityGallerySecurityPosturesClient.
 */
public final class CommunityGallerySecurityPosturesClientImpl implements CommunityGallerySecurityPosturesClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final CommunityGallerySecurityPosturesService service;

    /**
     * The service client containing this operation class.
     */
    private final ComputeManagementClientImpl client;

    /**
     * Initializes an instance of CommunityGallerySecurityPosturesClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    CommunityGallerySecurityPosturesClientImpl(ComputeManagementClientImpl client) {
        this.service = RestProxy.create(CommunityGallerySecurityPosturesService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for ComputeManagementClientCommunityGallerySecurityPostures to be used
     * by the proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "ComputeManagementCli")
    public interface CommunityGallerySecurityPosturesService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/communityGalleries/{publicGalleryName}/SecurityPostures/{securityPostureName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ApiErrorException.class)
        Mono<Response<CommunitySecurityPostureInner>> get(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId, @PathParam("location") String location,
            @QueryParam("api-version") String apiVersion, @PathParam("publicGalleryName") String publicGalleryName,
            @PathParam("securityPostureName") String securityPostureName, @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Get a community gallery security posture.
     * 
     * @param location Resource location.
     * @param publicGalleryName The public name of the community gallery.
     * @param securityPostureName The name of the community gallery security posture definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a community gallery security posture along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<CommunitySecurityPostureInner>> getWithResponseAsync(String location,
        String publicGalleryName, String securityPostureName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (location == null) {
            return Mono.error(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        if (publicGalleryName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter publicGalleryName is required and cannot be null."));
        }
        if (securityPostureName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter securityPostureName is required and cannot be null."));
        }
        final String apiVersion = "2024-03-03";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), this.client.getSubscriptionId(), location,
                apiVersion, publicGalleryName, securityPostureName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get a community gallery security posture.
     * 
     * @param location Resource location.
     * @param publicGalleryName The public name of the community gallery.
     * @param securityPostureName The name of the community gallery security posture definition.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a community gallery security posture along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<CommunitySecurityPostureInner>> getWithResponseAsync(String location,
        String publicGalleryName, String securityPostureName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (location == null) {
            return Mono.error(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        if (publicGalleryName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter publicGalleryName is required and cannot be null."));
        }
        if (securityPostureName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter securityPostureName is required and cannot be null."));
        }
        final String apiVersion = "2024-03-03";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), this.client.getSubscriptionId(), location, apiVersion,
            publicGalleryName, securityPostureName, accept, context);
    }

    /**
     * Get a community gallery security posture.
     * 
     * @param location Resource location.
     * @param publicGalleryName The public name of the community gallery.
     * @param securityPostureName The name of the community gallery security posture definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a community gallery security posture on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<CommunitySecurityPostureInner> getAsync(String location, String publicGalleryName,
        String securityPostureName) {
        return getWithResponseAsync(location, publicGalleryName, securityPostureName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get a community gallery security posture.
     * 
     * @param location Resource location.
     * @param publicGalleryName The public name of the community gallery.
     * @param securityPostureName The name of the community gallery security posture definition.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a community gallery security posture along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<CommunitySecurityPostureInner> getWithResponse(String location, String publicGalleryName,
        String securityPostureName, Context context) {
        return getWithResponseAsync(location, publicGalleryName, securityPostureName, context).block();
    }

    /**
     * Get a community gallery security posture.
     * 
     * @param location Resource location.
     * @param publicGalleryName The public name of the community gallery.
     * @param securityPostureName The name of the community gallery security posture definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a community gallery security posture.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CommunitySecurityPostureInner get(String location, String publicGalleryName, String securityPostureName) {
        return getWithResponse(location, publicGalleryName, securityPostureName, Context.NONE).getValue();
    }
}
