// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.compute.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Describes the data disk to be detached. */
@Fluent
public final class DetachDataDisk {
    /*
     * ID of the managed data disk.
     */
    @JsonProperty(value = "id", required = true)
    private String id;

    /*
     * Supported options available for Detach of a disk from a VM. Refer to DetachOption object reference for more
     * details.
     */
    @JsonProperty(value = "detachOption")
    private DiskDetachOptionTypes detachOption;

    /** Creates an instance of DetachDataDisk class. */
    public DetachDataDisk() {
    }

    /**
     * Get the id property: ID of the managed data disk.
     *
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: ID of the managed data disk.
     *
     * @param id the id value to set.
     * @return the DetachDataDisk object itself.
     */
    public DetachDataDisk withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the detachOption property: Supported options available for Detach of a disk from a VM. Refer to DetachOption
     * object reference for more details.
     *
     * @return the detachOption value.
     */
    public DiskDetachOptionTypes detachOption() {
        return this.detachOption;
    }

    /**
     * Set the detachOption property: Supported options available for Detach of a disk from a VM. Refer to DetachOption
     * object reference for more details.
     *
     * @param detachOption the detachOption value to set.
     * @return the DetachDataDisk object itself.
     */
    public DetachDataDisk withDetachOption(DiskDetachOptionTypes detachOption) {
        this.detachOption = detachOption;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (id() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property id in model DetachDataDisk"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DetachDataDisk.class);
}
