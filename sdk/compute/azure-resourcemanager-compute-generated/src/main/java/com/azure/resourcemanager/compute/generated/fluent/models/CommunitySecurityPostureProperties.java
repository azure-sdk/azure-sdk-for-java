// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.compute.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.compute.generated.models.OperatingSystemTypes;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Map;

/**
 * Describes the properties of a gallery security posture.
 */
@Fluent
public final class CommunitySecurityPostureProperties implements JsonSerializable<CommunitySecurityPostureProperties> {
    /*
     * This property allows you to specify the type of the OS that is included in the disk when creating a VM from a
     * managed image. Possible values are: **Windows,** **Linux.**
     */
    private OperatingSystemTypes osType;

    /*
     * Applicable resource types, like virtual machine scale set, of this posture setting.
     */
    private List<String> applicableResourceTypes;

    /*
     * Description for the current community security posture.
     */
    private String description;

    /*
     * Release notes URI for the current community gallery security posture.
     */
    private String releaseNotesUri;

    /*
     * The end of life date of the gallery security posture. This property can be used for decommissioning purposes.
     * This property is updatable.
     */
    private OffsetDateTime endOfLifeDate;

    /*
     * Privacy statement URI for the current community gallery security posture.
     */
    private String privacyStatementUri;

    /*
     * The end-user license agreement for the current community gallery security posture.
     */
    private String eula;

    /*
     * The disclaimer for a community gallery resource.
     */
    private String disclaimer;

    /*
     * The artifact tags of a community gallery resource.
     */
    private Map<String, String> artifactTags;

    /**
     * Creates an instance of CommunitySecurityPostureProperties class.
     */
    public CommunitySecurityPostureProperties() {
    }

    /**
     * Get the osType property: This property allows you to specify the type of the OS that is included in the disk when
     * creating a VM from a managed image. Possible values are: **Windows,** **Linux.**.
     * 
     * @return the osType value.
     */
    public OperatingSystemTypes osType() {
        return this.osType;
    }

    /**
     * Set the osType property: This property allows you to specify the type of the OS that is included in the disk when
     * creating a VM from a managed image. Possible values are: **Windows,** **Linux.**.
     * 
     * @param osType the osType value to set.
     * @return the CommunitySecurityPostureProperties object itself.
     */
    public CommunitySecurityPostureProperties withOsType(OperatingSystemTypes osType) {
        this.osType = osType;
        return this;
    }

    /**
     * Get the applicableResourceTypes property: Applicable resource types, like virtual machine scale set, of this
     * posture setting.
     * 
     * @return the applicableResourceTypes value.
     */
    public List<String> applicableResourceTypes() {
        return this.applicableResourceTypes;
    }

    /**
     * Set the applicableResourceTypes property: Applicable resource types, like virtual machine scale set, of this
     * posture setting.
     * 
     * @param applicableResourceTypes the applicableResourceTypes value to set.
     * @return the CommunitySecurityPostureProperties object itself.
     */
    public CommunitySecurityPostureProperties withApplicableResourceTypes(List<String> applicableResourceTypes) {
        this.applicableResourceTypes = applicableResourceTypes;
        return this;
    }

    /**
     * Get the description property: Description for the current community security posture.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: Description for the current community security posture.
     * 
     * @param description the description value to set.
     * @return the CommunitySecurityPostureProperties object itself.
     */
    public CommunitySecurityPostureProperties withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the releaseNotesUri property: Release notes URI for the current community gallery security posture.
     * 
     * @return the releaseNotesUri value.
     */
    public String releaseNotesUri() {
        return this.releaseNotesUri;
    }

    /**
     * Set the releaseNotesUri property: Release notes URI for the current community gallery security posture.
     * 
     * @param releaseNotesUri the releaseNotesUri value to set.
     * @return the CommunitySecurityPostureProperties object itself.
     */
    public CommunitySecurityPostureProperties withReleaseNotesUri(String releaseNotesUri) {
        this.releaseNotesUri = releaseNotesUri;
        return this;
    }

    /**
     * Get the endOfLifeDate property: The end of life date of the gallery security posture. This property can be used
     * for decommissioning purposes. This property is updatable.
     * 
     * @return the endOfLifeDate value.
     */
    public OffsetDateTime endOfLifeDate() {
        return this.endOfLifeDate;
    }

    /**
     * Set the endOfLifeDate property: The end of life date of the gallery security posture. This property can be used
     * for decommissioning purposes. This property is updatable.
     * 
     * @param endOfLifeDate the endOfLifeDate value to set.
     * @return the CommunitySecurityPostureProperties object itself.
     */
    public CommunitySecurityPostureProperties withEndOfLifeDate(OffsetDateTime endOfLifeDate) {
        this.endOfLifeDate = endOfLifeDate;
        return this;
    }

    /**
     * Get the privacyStatementUri property: Privacy statement URI for the current community gallery security posture.
     * 
     * @return the privacyStatementUri value.
     */
    public String privacyStatementUri() {
        return this.privacyStatementUri;
    }

    /**
     * Set the privacyStatementUri property: Privacy statement URI for the current community gallery security posture.
     * 
     * @param privacyStatementUri the privacyStatementUri value to set.
     * @return the CommunitySecurityPostureProperties object itself.
     */
    public CommunitySecurityPostureProperties withPrivacyStatementUri(String privacyStatementUri) {
        this.privacyStatementUri = privacyStatementUri;
        return this;
    }

    /**
     * Get the eula property: The end-user license agreement for the current community gallery security posture.
     * 
     * @return the eula value.
     */
    public String eula() {
        return this.eula;
    }

    /**
     * Set the eula property: The end-user license agreement for the current community gallery security posture.
     * 
     * @param eula the eula value to set.
     * @return the CommunitySecurityPostureProperties object itself.
     */
    public CommunitySecurityPostureProperties withEula(String eula) {
        this.eula = eula;
        return this;
    }

    /**
     * Get the disclaimer property: The disclaimer for a community gallery resource.
     * 
     * @return the disclaimer value.
     */
    public String disclaimer() {
        return this.disclaimer;
    }

    /**
     * Set the disclaimer property: The disclaimer for a community gallery resource.
     * 
     * @param disclaimer the disclaimer value to set.
     * @return the CommunitySecurityPostureProperties object itself.
     */
    public CommunitySecurityPostureProperties withDisclaimer(String disclaimer) {
        this.disclaimer = disclaimer;
        return this;
    }

    /**
     * Get the artifactTags property: The artifact tags of a community gallery resource.
     * 
     * @return the artifactTags value.
     */
    public Map<String, String> artifactTags() {
        return this.artifactTags;
    }

    /**
     * Set the artifactTags property: The artifact tags of a community gallery resource.
     * 
     * @param artifactTags the artifactTags value to set.
     * @return the CommunitySecurityPostureProperties object itself.
     */
    public CommunitySecurityPostureProperties withArtifactTags(Map<String, String> artifactTags) {
        this.artifactTags = artifactTags;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (osType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property osType in model CommunitySecurityPostureProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(CommunitySecurityPostureProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("osType", this.osType == null ? null : this.osType.toString());
        jsonWriter.writeArrayField("applicableResourceTypes", this.applicableResourceTypes,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeStringField("releaseNotesUri", this.releaseNotesUri);
        jsonWriter.writeStringField("endOfLifeDate",
            this.endOfLifeDate == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.endOfLifeDate));
        jsonWriter.writeStringField("privacyStatementUri", this.privacyStatementUri);
        jsonWriter.writeStringField("eula", this.eula);
        jsonWriter.writeStringField("disclaimer", this.disclaimer);
        jsonWriter.writeMapField("artifactTags", this.artifactTags, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CommunitySecurityPostureProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CommunitySecurityPostureProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CommunitySecurityPostureProperties.
     */
    public static CommunitySecurityPostureProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CommunitySecurityPostureProperties deserializedCommunitySecurityPostureProperties
                = new CommunitySecurityPostureProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("osType".equals(fieldName)) {
                    deserializedCommunitySecurityPostureProperties.osType
                        = OperatingSystemTypes.fromString(reader.getString());
                } else if ("applicableResourceTypes".equals(fieldName)) {
                    List<String> applicableResourceTypes = reader.readArray(reader1 -> reader1.getString());
                    deserializedCommunitySecurityPostureProperties.applicableResourceTypes = applicableResourceTypes;
                } else if ("description".equals(fieldName)) {
                    deserializedCommunitySecurityPostureProperties.description = reader.getString();
                } else if ("releaseNotesUri".equals(fieldName)) {
                    deserializedCommunitySecurityPostureProperties.releaseNotesUri = reader.getString();
                } else if ("endOfLifeDate".equals(fieldName)) {
                    deserializedCommunitySecurityPostureProperties.endOfLifeDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("privacyStatementUri".equals(fieldName)) {
                    deserializedCommunitySecurityPostureProperties.privacyStatementUri = reader.getString();
                } else if ("eula".equals(fieldName)) {
                    deserializedCommunitySecurityPostureProperties.eula = reader.getString();
                } else if ("disclaimer".equals(fieldName)) {
                    deserializedCommunitySecurityPostureProperties.disclaimer = reader.getString();
                } else if ("artifactTags".equals(fieldName)) {
                    Map<String, String> artifactTags = reader.readMap(reader1 -> reader1.getString());
                    deserializedCommunitySecurityPostureProperties.artifactTags = artifactTags;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCommunitySecurityPostureProperties;
        });
    }
}
