// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.compute.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The spot placement score for sku/region/zone combination.
 */
@Fluent
public final class PlacementScore implements JsonSerializable<PlacementScore> {
    /*
     * The resource's CRP virtual machine SKU size.
     */
    private String sku;

    /*
     * The region.
     */
    private String region;

    /*
     * The availability region.
     */
    private String availabilityZone;

    /*
     * The placement score.
     */
    private String score;

    /*
     * Whether the desired quota is available.
     */
    private Boolean isQuotaAvailable;

    /**
     * Creates an instance of PlacementScore class.
     */
    public PlacementScore() {
    }

    /**
     * Get the sku property: The resource's CRP virtual machine SKU size.
     * 
     * @return the sku value.
     */
    public String sku() {
        return this.sku;
    }

    /**
     * Set the sku property: The resource's CRP virtual machine SKU size.
     * 
     * @param sku the sku value to set.
     * @return the PlacementScore object itself.
     */
    public PlacementScore withSku(String sku) {
        this.sku = sku;
        return this;
    }

    /**
     * Get the region property: The region.
     * 
     * @return the region value.
     */
    public String region() {
        return this.region;
    }

    /**
     * Set the region property: The region.
     * 
     * @param region the region value to set.
     * @return the PlacementScore object itself.
     */
    public PlacementScore withRegion(String region) {
        this.region = region;
        return this;
    }

    /**
     * Get the availabilityZone property: The availability region.
     * 
     * @return the availabilityZone value.
     */
    public String availabilityZone() {
        return this.availabilityZone;
    }

    /**
     * Set the availabilityZone property: The availability region.
     * 
     * @param availabilityZone the availabilityZone value to set.
     * @return the PlacementScore object itself.
     */
    public PlacementScore withAvailabilityZone(String availabilityZone) {
        this.availabilityZone = availabilityZone;
        return this;
    }

    /**
     * Get the score property: The placement score.
     * 
     * @return the score value.
     */
    public String score() {
        return this.score;
    }

    /**
     * Set the score property: The placement score.
     * 
     * @param score the score value to set.
     * @return the PlacementScore object itself.
     */
    public PlacementScore withScore(String score) {
        this.score = score;
        return this;
    }

    /**
     * Get the isQuotaAvailable property: Whether the desired quota is available.
     * 
     * @return the isQuotaAvailable value.
     */
    public Boolean isQuotaAvailable() {
        return this.isQuotaAvailable;
    }

    /**
     * Set the isQuotaAvailable property: Whether the desired quota is available.
     * 
     * @param isQuotaAvailable the isQuotaAvailable value to set.
     * @return the PlacementScore object itself.
     */
    public PlacementScore withIsQuotaAvailable(Boolean isQuotaAvailable) {
        this.isQuotaAvailable = isQuotaAvailable;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("sku", this.sku);
        jsonWriter.writeStringField("region", this.region);
        jsonWriter.writeStringField("availabilityZone", this.availabilityZone);
        jsonWriter.writeStringField("score", this.score);
        jsonWriter.writeBooleanField("isQuotaAvailable", this.isQuotaAvailable);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PlacementScore from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PlacementScore if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the PlacementScore.
     */
    public static PlacementScore fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PlacementScore deserializedPlacementScore = new PlacementScore();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sku".equals(fieldName)) {
                    deserializedPlacementScore.sku = reader.getString();
                } else if ("region".equals(fieldName)) {
                    deserializedPlacementScore.region = reader.getString();
                } else if ("availabilityZone".equals(fieldName)) {
                    deserializedPlacementScore.availabilityZone = reader.getString();
                } else if ("score".equals(fieldName)) {
                    deserializedPlacementScore.score = reader.getString();
                } else if ("isQuotaAvailable".equals(fieldName)) {
                    deserializedPlacementScore.isQuotaAvailable = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPlacementScore;
        });
    }
}
