// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.compute.generated.models;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.compute.generated.fluent.models.CloudServiceInner;
import java.util.List;
import java.util.Map;

/** An immutable client-side representation of CloudService. */
public interface CloudService {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the location property: The geo-location where the resource lives.
     *
     * @return the location value.
     */
    String location();

    /**
     * Gets the tags property: Resource tags.
     *
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the systemData property: The system meta data relating to this resource.
     *
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * Gets the zones property: List of logical availability zone of the resource. List should contain only 1 zone where
     * cloud service should be provisioned. This field is optional.
     *
     * @return the zones value.
     */
    List<String> zones();

    /**
     * Gets the packageUrl property: Specifies a URL that refers to the location of the service package in the Blob
     * service. The service package URL can be Shared Access Signature (SAS) URI from any storage account. This is a
     * write-only property and is not returned in GET calls.
     *
     * @return the packageUrl value.
     */
    String packageUrl();

    /**
     * Gets the configuration property: Specifies the XML service configuration (.cscfg) for the cloud service.
     *
     * @return the configuration value.
     */
    String configuration();

    /**
     * Gets the configurationUrl property: Specifies a URL that refers to the location of the service configuration in
     * the Blob service. The service package URL can be Shared Access Signature (SAS) URI from any storage account. This
     * is a write-only property and is not returned in GET calls.
     *
     * @return the configurationUrl value.
     */
    String configurationUrl();

    /**
     * Gets the startCloudService property: (Optional) Indicates whether to start the cloud service immediately after it
     * is created. The default value is `true`. If false, the service model is still deployed, but the code is not run
     * immediately. Instead, the service is PoweredOff until you call Start, at which time the service will be started.
     * A deployed service still incurs charges, even if it is poweredoff.
     *
     * @return the startCloudService value.
     */
    Boolean startCloudService();

    /**
     * Gets the allowModelOverride property: (Optional) Indicates whether the role sku properties
     * (roleProfile.roles.sku) specified in the model/template should override the role instance count and vm size
     * specified in the .cscfg and .csdef respectively. The default value is `false`.
     *
     * @return the allowModelOverride value.
     */
    Boolean allowModelOverride();

    /**
     * Gets the upgradeMode property: Update mode for the cloud service. Role instances are allocated to update domains
     * when the service is deployed. Updates can be initiated manually in each update domain or initiated automatically
     * in all update domains. Possible Values are &lt;br /&gt;&lt;br /&gt;**Auto**&lt;br /&gt;&lt;br /&gt;**Manual**
     * &lt;br /&gt;&lt;br /&gt;**Simultaneous**&lt;br /&gt;&lt;br /&gt; If not specified, the default value is Auto. If
     * set to Manual, PUT UpdateDomain must be called to apply the update. If set to Auto, the update is automatically
     * applied to each update domain in sequence.
     *
     * @return the upgradeMode value.
     */
    CloudServiceUpgradeMode upgradeMode();

    /**
     * Gets the roleProfile property: Describes the role profile for the cloud service.
     *
     * @return the roleProfile value.
     */
    CloudServiceRoleProfile roleProfile();

    /**
     * Gets the osProfile property: Describes the OS profile for the cloud service.
     *
     * @return the osProfile value.
     */
    CloudServiceOsProfile osProfile();

    /**
     * Gets the networkProfile property: Network Profile for the cloud service.
     *
     * @return the networkProfile value.
     */
    CloudServiceNetworkProfile networkProfile();

    /**
     * Gets the extensionProfile property: Describes a cloud service extension profile.
     *
     * @return the extensionProfile value.
     */
    CloudServiceExtensionProfile extensionProfile();

    /**
     * Gets the provisioningState property: The provisioning state, which only appears in the response.
     *
     * @return the provisioningState value.
     */
    String provisioningState();

    /**
     * Gets the uniqueId property: The unique identifier for the cloud service.
     *
     * @return the uniqueId value.
     */
    String uniqueId();

    /**
     * Gets the region of the resource.
     *
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     *
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the name of the resource group.
     *
     * @return the name of the resource group.
     */
    String resourceGroupName();

    /**
     * Gets the inner com.azure.resourcemanager.compute.generated.fluent.models.CloudServiceInner object.
     *
     * @return the inner object.
     */
    CloudServiceInner innerModel();

    /** The entirety of the CloudService definition. */
    interface Definition
        extends DefinitionStages.Blank,
            DefinitionStages.WithLocation,
            DefinitionStages.WithResourceGroup,
            DefinitionStages.WithCreate {
    }
    /** The CloudService definition stages. */
    interface DefinitionStages {
        /** The first stage of the CloudService definition. */
        interface Blank extends WithLocation {
        }
        /** The stage of the CloudService definition allowing to specify location. */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(Region location);

            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(String location);
        }
        /** The stage of the CloudService definition allowing to specify parent resource. */
        interface WithResourceGroup {
            /**
             * Specifies resourceGroupName.
             *
             * @param resourceGroupName Name of the resource group.
             * @return the next definition stage.
             */
            WithCreate withExistingResourceGroup(String resourceGroupName);
        }
        /**
         * The stage of the CloudService definition which contains all the minimum required properties for the resource
         * to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithTags,
                DefinitionStages.WithSystemData,
                DefinitionStages.WithZones,
                DefinitionStages.WithPackageUrl,
                DefinitionStages.WithConfiguration,
                DefinitionStages.WithConfigurationUrl,
                DefinitionStages.WithStartCloudService,
                DefinitionStages.WithAllowModelOverride,
                DefinitionStages.WithUpgradeMode,
                DefinitionStages.WithRoleProfile,
                DefinitionStages.WithOsProfile,
                DefinitionStages.WithNetworkProfile,
                DefinitionStages.WithExtensionProfile {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            CloudService create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            CloudService create(Context context);
        }
        /** The stage of the CloudService definition allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }
        /** The stage of the CloudService definition allowing to specify systemData. */
        interface WithSystemData {
            /**
             * Specifies the systemData property: The system meta data relating to this resource..
             *
             * @param systemData The system meta data relating to this resource.
             * @return the next definition stage.
             */
            WithCreate withSystemData(SystemData systemData);
        }
        /** The stage of the CloudService definition allowing to specify zones. */
        interface WithZones {
            /**
             * Specifies the zones property: List of logical availability zone of the resource. List should contain only
             * 1 zone where cloud service should be provisioned. This field is optional..
             *
             * @param zones List of logical availability zone of the resource. List should contain only 1 zone where
             *     cloud service should be provisioned. This field is optional.
             * @return the next definition stage.
             */
            WithCreate withZones(List<String> zones);
        }
        /** The stage of the CloudService definition allowing to specify packageUrl. */
        interface WithPackageUrl {
            /**
             * Specifies the packageUrl property: Specifies a URL that refers to the location of the service package in
             * the Blob service. The service package URL can be Shared Access Signature (SAS) URI from any storage
             * account. This is a write-only property and is not returned in GET calls..
             *
             * @param packageUrl Specifies a URL that refers to the location of the service package in the Blob service.
             *     The service package URL can be Shared Access Signature (SAS) URI from any storage account. This is a
             *     write-only property and is not returned in GET calls.
             * @return the next definition stage.
             */
            WithCreate withPackageUrl(String packageUrl);
        }
        /** The stage of the CloudService definition allowing to specify configuration. */
        interface WithConfiguration {
            /**
             * Specifies the configuration property: Specifies the XML service configuration (.cscfg) for the cloud
             * service..
             *
             * @param configuration Specifies the XML service configuration (.cscfg) for the cloud service.
             * @return the next definition stage.
             */
            WithCreate withConfiguration(String configuration);
        }
        /** The stage of the CloudService definition allowing to specify configurationUrl. */
        interface WithConfigurationUrl {
            /**
             * Specifies the configurationUrl property: Specifies a URL that refers to the location of the service
             * configuration in the Blob service. The service package URL can be Shared Access Signature (SAS) URI from
             * any storage account. This is a write-only property and is not returned in GET calls..
             *
             * @param configurationUrl Specifies a URL that refers to the location of the service configuration in the
             *     Blob service. The service package URL can be Shared Access Signature (SAS) URI from any storage
             *     account. This is a write-only property and is not returned in GET calls.
             * @return the next definition stage.
             */
            WithCreate withConfigurationUrl(String configurationUrl);
        }
        /** The stage of the CloudService definition allowing to specify startCloudService. */
        interface WithStartCloudService {
            /**
             * Specifies the startCloudService property: (Optional) Indicates whether to start the cloud service
             * immediately after it is created. The default value is `true`. If false, the service model is still
             * deployed, but the code is not run immediately. Instead, the service is PoweredOff until you call Start,
             * at which time the service will be started. A deployed service still incurs charges, even if it is
             * poweredoff..
             *
             * @param startCloudService (Optional) Indicates whether to start the cloud service immediately after it is
             *     created. The default value is `true`. If false, the service model is still deployed, but the code is
             *     not run immediately. Instead, the service is PoweredOff until you call Start, at which time the
             *     service will be started. A deployed service still incurs charges, even if it is poweredoff.
             * @return the next definition stage.
             */
            WithCreate withStartCloudService(Boolean startCloudService);
        }
        /** The stage of the CloudService definition allowing to specify allowModelOverride. */
        interface WithAllowModelOverride {
            /**
             * Specifies the allowModelOverride property: (Optional) Indicates whether the role sku properties
             * (roleProfile.roles.sku) specified in the model/template should override the role instance count and vm
             * size specified in the .cscfg and .csdef respectively. The default value is `false`..
             *
             * @param allowModelOverride (Optional) Indicates whether the role sku properties (roleProfile.roles.sku)
             *     specified in the model/template should override the role instance count and vm size specified in the
             *     .cscfg and .csdef respectively. The default value is `false`.
             * @return the next definition stage.
             */
            WithCreate withAllowModelOverride(Boolean allowModelOverride);
        }
        /** The stage of the CloudService definition allowing to specify upgradeMode. */
        interface WithUpgradeMode {
            /**
             * Specifies the upgradeMode property: Update mode for the cloud service. Role instances are allocated to
             * update domains when the service is deployed. Updates can be initiated manually in each update domain or
             * initiated automatically in all update domains. Possible Values are &lt;br /&gt;&lt;br /&gt;**Auto**&lt;br
             * /&gt;&lt;br /&gt;**Manual** &lt;br /&gt;&lt;br /&gt;**Simultaneous**&lt;br /&gt;&lt;br /&gt; If not
             * specified, the default value is Auto. If set to Manual, PUT UpdateDomain must be called to apply the
             * update. If set to Auto, the update is automatically applied to each update domain in sequence..
             *
             * @param upgradeMode Update mode for the cloud service. Role instances are allocated to update domains when
             *     the service is deployed. Updates can be initiated manually in each update domain or initiated
             *     automatically in all update domains. Possible Values are &lt;br /&gt;&lt;br /&gt;**Auto**&lt;br
             *     /&gt;&lt;br /&gt;**Manual** &lt;br /&gt;&lt;br /&gt;**Simultaneous**&lt;br /&gt;&lt;br /&gt; If not
             *     specified, the default value is Auto. If set to Manual, PUT UpdateDomain must be called to apply the
             *     update. If set to Auto, the update is automatically applied to each update domain in sequence.
             * @return the next definition stage.
             */
            WithCreate withUpgradeMode(CloudServiceUpgradeMode upgradeMode);
        }
        /** The stage of the CloudService definition allowing to specify roleProfile. */
        interface WithRoleProfile {
            /**
             * Specifies the roleProfile property: Describes the role profile for the cloud service..
             *
             * @param roleProfile Describes the role profile for the cloud service.
             * @return the next definition stage.
             */
            WithCreate withRoleProfile(CloudServiceRoleProfile roleProfile);
        }
        /** The stage of the CloudService definition allowing to specify osProfile. */
        interface WithOsProfile {
            /**
             * Specifies the osProfile property: Describes the OS profile for the cloud service..
             *
             * @param osProfile Describes the OS profile for the cloud service.
             * @return the next definition stage.
             */
            WithCreate withOsProfile(CloudServiceOsProfile osProfile);
        }
        /** The stage of the CloudService definition allowing to specify networkProfile. */
        interface WithNetworkProfile {
            /**
             * Specifies the networkProfile property: Network Profile for the cloud service..
             *
             * @param networkProfile Network Profile for the cloud service.
             * @return the next definition stage.
             */
            WithCreate withNetworkProfile(CloudServiceNetworkProfile networkProfile);
        }
        /** The stage of the CloudService definition allowing to specify extensionProfile. */
        interface WithExtensionProfile {
            /**
             * Specifies the extensionProfile property: Describes a cloud service extension profile..
             *
             * @param extensionProfile Describes a cloud service extension profile.
             * @return the next definition stage.
             */
            WithCreate withExtensionProfile(CloudServiceExtensionProfile extensionProfile);
        }
    }
    /**
     * Begins update for the CloudService resource.
     *
     * @return the stage of resource update.
     */
    CloudService.Update update();

    /** The template for CloudService update. */
    interface Update extends UpdateStages.WithTags {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        CloudService apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        CloudService apply(Context context);
    }
    /** The CloudService update stages. */
    interface UpdateStages {
        /** The stage of the CloudService update allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags.
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    CloudService refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    CloudService refresh(Context context);

    /**
     * Starts the cloud service.
     *
     * @throws com.azure.resourcemanager.compute.generated.models.ApiErrorException thrown if the request is rejected by
     *     server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void start();

    /**
     * Starts the cloud service.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.compute.generated.models.ApiErrorException thrown if the request is rejected by
     *     server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void start(Context context);

    /**
     * Power off the cloud service. Note that resources are still attached and you are getting charged for the
     * resources.
     *
     * @throws com.azure.resourcemanager.compute.generated.models.ApiErrorException thrown if the request is rejected by
     *     server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void powerOff();

    /**
     * Power off the cloud service. Note that resources are still attached and you are getting charged for the
     * resources.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.compute.generated.models.ApiErrorException thrown if the request is rejected by
     *     server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void powerOff(Context context);

    /**
     * Restarts one or more role instances in a cloud service.
     *
     * @throws com.azure.resourcemanager.compute.generated.models.ApiErrorException thrown if the request is rejected by
     *     server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void restart();

    /**
     * Restarts one or more role instances in a cloud service.
     *
     * @param parameters List of cloud service role instance names.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.compute.generated.models.ApiErrorException thrown if the request is rejected by
     *     server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void restart(RoleInstances parameters, Context context);

    /**
     * Reimage asynchronous operation reinstalls the operating system on instances of web roles or worker roles.
     *
     * @throws com.azure.resourcemanager.compute.generated.models.ApiErrorException thrown if the request is rejected by
     *     server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void reimage();

    /**
     * Reimage asynchronous operation reinstalls the operating system on instances of web roles or worker roles.
     *
     * @param parameters List of cloud service role instance names.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.compute.generated.models.ApiErrorException thrown if the request is rejected by
     *     server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void reimage(RoleInstances parameters, Context context);

    /**
     * Rebuild Role Instances reinstalls the operating system on instances of web roles or worker roles and initializes
     * the storage resources that are used by them. If you do not want to initialize storage resources, you can use
     * Reimage Role Instances.
     *
     * @throws com.azure.resourcemanager.compute.generated.models.ApiErrorException thrown if the request is rejected by
     *     server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void rebuild();

    /**
     * Rebuild Role Instances reinstalls the operating system on instances of web roles or worker roles and initializes
     * the storage resources that are used by them. If you do not want to initialize storage resources, you can use
     * Reimage Role Instances.
     *
     * @param parameters List of cloud service role instance names.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.compute.generated.models.ApiErrorException thrown if the request is rejected by
     *     server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void rebuild(RoleInstances parameters, Context context);

    /**
     * Deletes role instances in a cloud service.
     *
     * @throws com.azure.resourcemanager.compute.generated.models.ApiErrorException thrown if the request is rejected by
     *     server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteInstances();

    /**
     * Deletes role instances in a cloud service.
     *
     * @param parameters List of cloud service role instance names.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.compute.generated.models.ApiErrorException thrown if the request is rejected by
     *     server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteInstances(RoleInstances parameters, Context context);
}
