// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.compute.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Data used for requesting a Disk Inspection execution.
 */
@Fluent
public final class RunDiskInspectionInput {
    /*
     * Qualified name of the resource.
     */
    @JsonProperty(value = "resourceId", required = true)
    private String resourceId;

    /*
     * Name of manifest in order to trigger Disk Inspection.
     */
    @JsonProperty(value = "manifest", required = true)
    private String manifest;

    /*
     * SAS uri to the blob where results will be uploaded.
     */
    @JsonProperty(value = "uploadSasUri")
    private String uploadSasUri;

    /**
     * Creates an instance of RunDiskInspectionInput class.
     */
    public RunDiskInspectionInput() {
    }

    /**
     * Get the resourceId property: Qualified name of the resource.
     * 
     * @return the resourceId value.
     */
    public String resourceId() {
        return this.resourceId;
    }

    /**
     * Set the resourceId property: Qualified name of the resource.
     * 
     * @param resourceId the resourceId value to set.
     * @return the RunDiskInspectionInput object itself.
     */
    public RunDiskInspectionInput withResourceId(String resourceId) {
        this.resourceId = resourceId;
        return this;
    }

    /**
     * Get the manifest property: Name of manifest in order to trigger Disk Inspection.
     * 
     * @return the manifest value.
     */
    public String manifest() {
        return this.manifest;
    }

    /**
     * Set the manifest property: Name of manifest in order to trigger Disk Inspection.
     * 
     * @param manifest the manifest value to set.
     * @return the RunDiskInspectionInput object itself.
     */
    public RunDiskInspectionInput withManifest(String manifest) {
        this.manifest = manifest;
        return this;
    }

    /**
     * Get the uploadSasUri property: SAS uri to the blob where results will be uploaded.
     * 
     * @return the uploadSasUri value.
     */
    public String uploadSasUri() {
        return this.uploadSasUri;
    }

    /**
     * Set the uploadSasUri property: SAS uri to the blob where results will be uploaded.
     * 
     * @param uploadSasUri the uploadSasUri value to set.
     * @return the RunDiskInspectionInput object itself.
     */
    public RunDiskInspectionInput withUploadSasUri(String uploadSasUri) {
        this.uploadSasUri = uploadSasUri;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (resourceId() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property resourceId in model RunDiskInspectionInput"));
        }
        if (manifest() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property manifest in model RunDiskInspectionInput"));
        }
        if (uploadSasUri() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property uploadSasUri in model RunDiskInspectionInput"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(RunDiskInspectionInput.class);
}
