// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.compute.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Data used for requesting a Disk Inspection execution.
 */
@Fluent
public final class RunDiskInspectionInput implements JsonSerializable<RunDiskInspectionInput> {
    /*
     * Qualified ID of the resource.
     */
    private String resourceId;

    /*
     * Name of manifest in order to trigger Disk Inspection.
     */
    private String manifest;

    /*
     * SAS uri to the blob where results will be uploaded.
     */
    private String uploadSasUri;

    /**
     * Creates an instance of RunDiskInspectionInput class.
     */
    public RunDiskInspectionInput() {
    }

    /**
     * Get the resourceId property: Qualified ID of the resource.
     * 
     * @return the resourceId value.
     */
    public String resourceId() {
        return this.resourceId;
    }

    /**
     * Set the resourceId property: Qualified ID of the resource.
     * 
     * @param resourceId the resourceId value to set.
     * @return the RunDiskInspectionInput object itself.
     */
    public RunDiskInspectionInput withResourceId(String resourceId) {
        this.resourceId = resourceId;
        return this;
    }

    /**
     * Get the manifest property: Name of manifest in order to trigger Disk Inspection.
     * 
     * @return the manifest value.
     */
    public String manifest() {
        return this.manifest;
    }

    /**
     * Set the manifest property: Name of manifest in order to trigger Disk Inspection.
     * 
     * @param manifest the manifest value to set.
     * @return the RunDiskInspectionInput object itself.
     */
    public RunDiskInspectionInput withManifest(String manifest) {
        this.manifest = manifest;
        return this;
    }

    /**
     * Get the uploadSasUri property: SAS uri to the blob where results will be uploaded.
     * 
     * @return the uploadSasUri value.
     */
    public String uploadSasUri() {
        return this.uploadSasUri;
    }

    /**
     * Set the uploadSasUri property: SAS uri to the blob where results will be uploaded.
     * 
     * @param uploadSasUri the uploadSasUri value to set.
     * @return the RunDiskInspectionInput object itself.
     */
    public RunDiskInspectionInput withUploadSasUri(String uploadSasUri) {
        this.uploadSasUri = uploadSasUri;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (resourceId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property resourceId in model RunDiskInspectionInput"));
        }
        if (manifest() == null) {
            throw LOGGER.atError()
                .log(
                    new IllegalArgumentException("Missing required property manifest in model RunDiskInspectionInput"));
        }
        if (uploadSasUri() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property uploadSasUri in model RunDiskInspectionInput"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(RunDiskInspectionInput.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("resourceId", this.resourceId);
        jsonWriter.writeStringField("manifest", this.manifest);
        jsonWriter.writeStringField("uploadSasUri", this.uploadSasUri);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RunDiskInspectionInput from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RunDiskInspectionInput if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RunDiskInspectionInput.
     */
    public static RunDiskInspectionInput fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RunDiskInspectionInput deserializedRunDiskInspectionInput = new RunDiskInspectionInput();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("resourceId".equals(fieldName)) {
                    deserializedRunDiskInspectionInput.resourceId = reader.getString();
                } else if ("manifest".equals(fieldName)) {
                    deserializedRunDiskInspectionInput.manifest = reader.getString();
                } else if ("uploadSasUri".equals(fieldName)) {
                    deserializedRunDiskInspectionInput.uploadSasUri = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRunDiskInspectionInput;
        });
    }
}
