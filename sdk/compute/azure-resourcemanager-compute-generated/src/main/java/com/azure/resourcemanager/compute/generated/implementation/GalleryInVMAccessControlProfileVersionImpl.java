// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.compute.generated.implementation;

import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.compute.generated.fluent.models.GalleryInVMAccessControlProfileVersionInner;
import com.azure.resourcemanager.compute.generated.models.AccessControlRules;
import com.azure.resourcemanager.compute.generated.models.AccessControlRulesMode;
import com.azure.resourcemanager.compute.generated.models.EndpointAccess;
import com.azure.resourcemanager.compute.generated.models.GalleryInVMAccessControlProfileVersion;
import com.azure.resourcemanager.compute.generated.models.GalleryInVMAccessControlProfileVersionUpdate;
import com.azure.resourcemanager.compute.generated.models.GalleryProvisioningState;
import com.azure.resourcemanager.compute.generated.models.ReplicationStatus;
import com.azure.resourcemanager.compute.generated.models.TargetRegion;
import java.time.OffsetDateTime;
import java.util.Collections;
import java.util.List;
import java.util.Map;

public final class GalleryInVMAccessControlProfileVersionImpl implements GalleryInVMAccessControlProfileVersion,
    GalleryInVMAccessControlProfileVersion.Definition, GalleryInVMAccessControlProfileVersion.Update {
    private GalleryInVMAccessControlProfileVersionInner innerObject;

    private final com.azure.resourcemanager.compute.generated.ComputeManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public AccessControlRulesMode mode() {
        return this.innerModel().mode();
    }

    public EndpointAccess defaultAccess() {
        return this.innerModel().defaultAccess();
    }

    public AccessControlRules rules() {
        return this.innerModel().rules();
    }

    public List<TargetRegion> targetLocations() {
        List<TargetRegion> inner = this.innerModel().targetLocations();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public Boolean excludeFromLatest() {
        return this.innerModel().excludeFromLatest();
    }

    public OffsetDateTime publishedDate() {
        return this.innerModel().publishedDate();
    }

    public GalleryProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public ReplicationStatus replicationStatus() {
        return this.innerModel().replicationStatus();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public GalleryInVMAccessControlProfileVersionInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.compute.generated.ComputeManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String galleryName;

    private String inVMAccessControlProfileName;

    private String inVMAccessControlProfileVersionName;

    private GalleryInVMAccessControlProfileVersionUpdate updateGalleryInVMAccessControlProfileVersion;

    public GalleryInVMAccessControlProfileVersionImpl withExistingInVMAccessControlProfile(String resourceGroupName,
        String galleryName, String inVMAccessControlProfileName) {
        this.resourceGroupName = resourceGroupName;
        this.galleryName = galleryName;
        this.inVMAccessControlProfileName = inVMAccessControlProfileName;
        return this;
    }

    public GalleryInVMAccessControlProfileVersion create() {
        this.innerObject = serviceManager.serviceClient()
            .getGalleryInVMAccessControlProfileVersions()
            .createOrUpdate(resourceGroupName, galleryName, inVMAccessControlProfileName,
                inVMAccessControlProfileVersionName, this.innerModel(), Context.NONE);
        return this;
    }

    public GalleryInVMAccessControlProfileVersion create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getGalleryInVMAccessControlProfileVersions()
            .createOrUpdate(resourceGroupName, galleryName, inVMAccessControlProfileName,
                inVMAccessControlProfileVersionName, this.innerModel(), context);
        return this;
    }

    GalleryInVMAccessControlProfileVersionImpl(String name,
        com.azure.resourcemanager.compute.generated.ComputeManager serviceManager) {
        this.innerObject = new GalleryInVMAccessControlProfileVersionInner();
        this.serviceManager = serviceManager;
        this.inVMAccessControlProfileVersionName = name;
    }

    public GalleryInVMAccessControlProfileVersionImpl update() {
        this.updateGalleryInVMAccessControlProfileVersion = new GalleryInVMAccessControlProfileVersionUpdate();
        return this;
    }

    public GalleryInVMAccessControlProfileVersion apply() {
        this.innerObject = serviceManager.serviceClient()
            .getGalleryInVMAccessControlProfileVersions()
            .update(resourceGroupName, galleryName, inVMAccessControlProfileName, inVMAccessControlProfileVersionName,
                updateGalleryInVMAccessControlProfileVersion, Context.NONE);
        return this;
    }

    public GalleryInVMAccessControlProfileVersion apply(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getGalleryInVMAccessControlProfileVersions()
            .update(resourceGroupName, galleryName, inVMAccessControlProfileName, inVMAccessControlProfileVersionName,
                updateGalleryInVMAccessControlProfileVersion, context);
        return this;
    }

    GalleryInVMAccessControlProfileVersionImpl(GalleryInVMAccessControlProfileVersionInner innerObject,
        com.azure.resourcemanager.compute.generated.ComputeManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.galleryName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "galleries");
        this.inVMAccessControlProfileName
            = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "inVMAccessControlProfiles");
        this.inVMAccessControlProfileVersionName
            = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "versions");
    }

    public GalleryInVMAccessControlProfileVersion refresh() {
        this.innerObject = serviceManager.serviceClient()
            .getGalleryInVMAccessControlProfileVersions()
            .getWithResponse(resourceGroupName, galleryName, inVMAccessControlProfileName,
                inVMAccessControlProfileVersionName, Context.NONE)
            .getValue();
        return this;
    }

    public GalleryInVMAccessControlProfileVersion refresh(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getGalleryInVMAccessControlProfileVersions()
            .getWithResponse(resourceGroupName, galleryName, inVMAccessControlProfileName,
                inVMAccessControlProfileVersionName, context)
            .getValue();
        return this;
    }

    public GalleryInVMAccessControlProfileVersionImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public GalleryInVMAccessControlProfileVersionImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public GalleryInVMAccessControlProfileVersionImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateGalleryInVMAccessControlProfileVersion.withTags(tags);
            return this;
        }
    }

    public GalleryInVMAccessControlProfileVersionImpl withMode(AccessControlRulesMode mode) {
        if (isInCreateMode()) {
            this.innerModel().withMode(mode);
            return this;
        } else {
            this.updateGalleryInVMAccessControlProfileVersion.withMode(mode);
            return this;
        }
    }

    public GalleryInVMAccessControlProfileVersionImpl withDefaultAccess(EndpointAccess defaultAccess) {
        if (isInCreateMode()) {
            this.innerModel().withDefaultAccess(defaultAccess);
            return this;
        } else {
            this.updateGalleryInVMAccessControlProfileVersion.withDefaultAccess(defaultAccess);
            return this;
        }
    }

    public GalleryInVMAccessControlProfileVersionImpl withRules(AccessControlRules rules) {
        if (isInCreateMode()) {
            this.innerModel().withRules(rules);
            return this;
        } else {
            this.updateGalleryInVMAccessControlProfileVersion.withRules(rules);
            return this;
        }
    }

    public GalleryInVMAccessControlProfileVersionImpl withTargetLocations(List<TargetRegion> targetLocations) {
        if (isInCreateMode()) {
            this.innerModel().withTargetLocations(targetLocations);
            return this;
        } else {
            this.updateGalleryInVMAccessControlProfileVersion.withTargetLocations(targetLocations);
            return this;
        }
    }

    public GalleryInVMAccessControlProfileVersionImpl withExcludeFromLatest(Boolean excludeFromLatest) {
        if (isInCreateMode()) {
            this.innerModel().withExcludeFromLatest(excludeFromLatest);
            return this;
        } else {
            this.updateGalleryInVMAccessControlProfileVersion.withExcludeFromLatest(excludeFromLatest);
            return this;
        }
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
