// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.compute.generated.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.compute.generated.fluent.models.StorageConfigurationResponseInner;
import com.azure.resourcemanager.compute.generated.models.StorageConfigurationInput;

/**
 * An instance of this class provides access to all the operations defined in DiskInspectionStorageConfigurationsClient.
 */
public interface DiskInspectionStorageConfigurationsClient {
    /**
     * Register a storageAccount for a subscription used for DiskInspection.
     * 
     * @param location The name of the Azure region.
     * @param storageConfigurationInput Storage Configuration object supplied in the body of the Post to cache
     * storageAccount for a given subscription.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> registerWithResponse(String location, StorageConfigurationInput storageConfigurationInput,
        Context context);

    /**
     * Register a storageAccount for a subscription used for DiskInspection.
     * 
     * @param location The name of the Azure region.
     * @param storageConfigurationInput Storage Configuration object supplied in the body of the Post to cache
     * storageAccount for a given subscription.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void register(String location, StorageConfigurationInput storageConfigurationInput);

    /**
     * Validate if a storageAccount configuration exists for a subscription used for DiskInspection.
     * 
     * @param location The name of the Azure region.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return api output result when there is an existing storage configuration entry along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<StorageConfigurationResponseInner> validateWithResponse(String location, Context context);

    /**
     * Validate if a storageAccount configuration exists for a subscription used for DiskInspection.
     * 
     * @param location The name of the Azure region.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return api output result when there is an existing storage configuration entry.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    StorageConfigurationResponseInner validate(String location);
}
