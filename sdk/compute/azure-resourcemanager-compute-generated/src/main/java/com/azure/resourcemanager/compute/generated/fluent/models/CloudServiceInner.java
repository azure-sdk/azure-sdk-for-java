// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.compute.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.core.management.SystemData;
import com.azure.resourcemanager.compute.generated.models.CloudServiceExtensionProfile;
import com.azure.resourcemanager.compute.generated.models.CloudServiceNetworkProfile;
import com.azure.resourcemanager.compute.generated.models.CloudServiceOsProfile;
import com.azure.resourcemanager.compute.generated.models.CloudServiceRoleProfile;
import com.azure.resourcemanager.compute.generated.models.CloudServiceUpgradeMode;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/** Describes the cloud service. */
@Fluent
public final class CloudServiceInner extends Resource {
    /*
     * Cloud service properties
     */
    @JsonProperty(value = "properties")
    private CloudServiceProperties innerProperties;

    /*
     * The system meta data relating to this resource.
     */
    @JsonProperty(value = "systemData")
    private SystemData systemData;

    /*
     * List of logical availability zone of the resource. List should contain only 1 zone where cloud service should be
     * provisioned. This field is optional.
     */
    @JsonProperty(value = "zones")
    private List<String> zones;

    /** Creates an instance of CloudServiceInner class. */
    public CloudServiceInner() {
    }

    /**
     * Get the innerProperties property: Cloud service properties.
     *
     * @return the innerProperties value.
     */
    private CloudServiceProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: The system meta data relating to this resource.
     *
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Set the systemData property: The system meta data relating to this resource.
     *
     * @param systemData the systemData value to set.
     * @return the CloudServiceInner object itself.
     */
    public CloudServiceInner withSystemData(SystemData systemData) {
        this.systemData = systemData;
        return this;
    }

    /**
     * Get the zones property: List of logical availability zone of the resource. List should contain only 1 zone where
     * cloud service should be provisioned. This field is optional.
     *
     * @return the zones value.
     */
    public List<String> zones() {
        return this.zones;
    }

    /**
     * Set the zones property: List of logical availability zone of the resource. List should contain only 1 zone where
     * cloud service should be provisioned. This field is optional.
     *
     * @param zones the zones value to set.
     * @return the CloudServiceInner object itself.
     */
    public CloudServiceInner withZones(List<String> zones) {
        this.zones = zones;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public CloudServiceInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public CloudServiceInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the packageUrl property: Specifies a URL that refers to the location of the service package in the Blob
     * service. The service package URL can be Shared Access Signature (SAS) URI from any storage account. This is a
     * write-only property and is not returned in GET calls.
     *
     * @return the packageUrl value.
     */
    public String packageUrl() {
        return this.innerProperties() == null ? null : this.innerProperties().packageUrl();
    }

    /**
     * Set the packageUrl property: Specifies a URL that refers to the location of the service package in the Blob
     * service. The service package URL can be Shared Access Signature (SAS) URI from any storage account. This is a
     * write-only property and is not returned in GET calls.
     *
     * @param packageUrl the packageUrl value to set.
     * @return the CloudServiceInner object itself.
     */
    public CloudServiceInner withPackageUrl(String packageUrl) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CloudServiceProperties();
        }
        this.innerProperties().withPackageUrl(packageUrl);
        return this;
    }

    /**
     * Get the configuration property: Specifies the XML service configuration (.cscfg) for the cloud service.
     *
     * @return the configuration value.
     */
    public String configuration() {
        return this.innerProperties() == null ? null : this.innerProperties().configuration();
    }

    /**
     * Set the configuration property: Specifies the XML service configuration (.cscfg) for the cloud service.
     *
     * @param configuration the configuration value to set.
     * @return the CloudServiceInner object itself.
     */
    public CloudServiceInner withConfiguration(String configuration) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CloudServiceProperties();
        }
        this.innerProperties().withConfiguration(configuration);
        return this;
    }

    /**
     * Get the configurationUrl property: Specifies a URL that refers to the location of the service configuration in
     * the Blob service. The service package URL can be Shared Access Signature (SAS) URI from any storage account. This
     * is a write-only property and is not returned in GET calls.
     *
     * @return the configurationUrl value.
     */
    public String configurationUrl() {
        return this.innerProperties() == null ? null : this.innerProperties().configurationUrl();
    }

    /**
     * Set the configurationUrl property: Specifies a URL that refers to the location of the service configuration in
     * the Blob service. The service package URL can be Shared Access Signature (SAS) URI from any storage account. This
     * is a write-only property and is not returned in GET calls.
     *
     * @param configurationUrl the configurationUrl value to set.
     * @return the CloudServiceInner object itself.
     */
    public CloudServiceInner withConfigurationUrl(String configurationUrl) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CloudServiceProperties();
        }
        this.innerProperties().withConfigurationUrl(configurationUrl);
        return this;
    }

    /**
     * Get the startCloudService property: (Optional) Indicates whether to start the cloud service immediately after it
     * is created. The default value is `true`. If false, the service model is still deployed, but the code is not run
     * immediately. Instead, the service is PoweredOff until you call Start, at which time the service will be started.
     * A deployed service still incurs charges, even if it is poweredoff.
     *
     * @return the startCloudService value.
     */
    public Boolean startCloudService() {
        return this.innerProperties() == null ? null : this.innerProperties().startCloudService();
    }

    /**
     * Set the startCloudService property: (Optional) Indicates whether to start the cloud service immediately after it
     * is created. The default value is `true`. If false, the service model is still deployed, but the code is not run
     * immediately. Instead, the service is PoweredOff until you call Start, at which time the service will be started.
     * A deployed service still incurs charges, even if it is poweredoff.
     *
     * @param startCloudService the startCloudService value to set.
     * @return the CloudServiceInner object itself.
     */
    public CloudServiceInner withStartCloudService(Boolean startCloudService) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CloudServiceProperties();
        }
        this.innerProperties().withStartCloudService(startCloudService);
        return this;
    }

    /**
     * Get the allowModelOverride property: (Optional) Indicates whether the role sku properties (roleProfile.roles.sku)
     * specified in the model/template should override the role instance count and vm size specified in the .cscfg and
     * .csdef respectively. The default value is `false`.
     *
     * @return the allowModelOverride value.
     */
    public Boolean allowModelOverride() {
        return this.innerProperties() == null ? null : this.innerProperties().allowModelOverride();
    }

    /**
     * Set the allowModelOverride property: (Optional) Indicates whether the role sku properties (roleProfile.roles.sku)
     * specified in the model/template should override the role instance count and vm size specified in the .cscfg and
     * .csdef respectively. The default value is `false`.
     *
     * @param allowModelOverride the allowModelOverride value to set.
     * @return the CloudServiceInner object itself.
     */
    public CloudServiceInner withAllowModelOverride(Boolean allowModelOverride) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CloudServiceProperties();
        }
        this.innerProperties().withAllowModelOverride(allowModelOverride);
        return this;
    }

    /**
     * Get the upgradeMode property: Update mode for the cloud service. Role instances are allocated to update domains
     * when the service is deployed. Updates can be initiated manually in each update domain or initiated automatically
     * in all update domains. Possible Values are &lt;br /&gt;&lt;br /&gt;**Auto**&lt;br /&gt;&lt;br /&gt;**Manual**
     * &lt;br /&gt;&lt;br /&gt;**Simultaneous**&lt;br /&gt;&lt;br /&gt; If not specified, the default value is Auto. If
     * set to Manual, PUT UpdateDomain must be called to apply the update. If set to Auto, the update is automatically
     * applied to each update domain in sequence.
     *
     * @return the upgradeMode value.
     */
    public CloudServiceUpgradeMode upgradeMode() {
        return this.innerProperties() == null ? null : this.innerProperties().upgradeMode();
    }

    /**
     * Set the upgradeMode property: Update mode for the cloud service. Role instances are allocated to update domains
     * when the service is deployed. Updates can be initiated manually in each update domain or initiated automatically
     * in all update domains. Possible Values are &lt;br /&gt;&lt;br /&gt;**Auto**&lt;br /&gt;&lt;br /&gt;**Manual**
     * &lt;br /&gt;&lt;br /&gt;**Simultaneous**&lt;br /&gt;&lt;br /&gt; If not specified, the default value is Auto. If
     * set to Manual, PUT UpdateDomain must be called to apply the update. If set to Auto, the update is automatically
     * applied to each update domain in sequence.
     *
     * @param upgradeMode the upgradeMode value to set.
     * @return the CloudServiceInner object itself.
     */
    public CloudServiceInner withUpgradeMode(CloudServiceUpgradeMode upgradeMode) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CloudServiceProperties();
        }
        this.innerProperties().withUpgradeMode(upgradeMode);
        return this;
    }

    /**
     * Get the roleProfile property: Describes the role profile for the cloud service.
     *
     * @return the roleProfile value.
     */
    public CloudServiceRoleProfile roleProfile() {
        return this.innerProperties() == null ? null : this.innerProperties().roleProfile();
    }

    /**
     * Set the roleProfile property: Describes the role profile for the cloud service.
     *
     * @param roleProfile the roleProfile value to set.
     * @return the CloudServiceInner object itself.
     */
    public CloudServiceInner withRoleProfile(CloudServiceRoleProfile roleProfile) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CloudServiceProperties();
        }
        this.innerProperties().withRoleProfile(roleProfile);
        return this;
    }

    /**
     * Get the osProfile property: Describes the OS profile for the cloud service.
     *
     * @return the osProfile value.
     */
    public CloudServiceOsProfile osProfile() {
        return this.innerProperties() == null ? null : this.innerProperties().osProfile();
    }

    /**
     * Set the osProfile property: Describes the OS profile for the cloud service.
     *
     * @param osProfile the osProfile value to set.
     * @return the CloudServiceInner object itself.
     */
    public CloudServiceInner withOsProfile(CloudServiceOsProfile osProfile) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CloudServiceProperties();
        }
        this.innerProperties().withOsProfile(osProfile);
        return this;
    }

    /**
     * Get the networkProfile property: Network Profile for the cloud service.
     *
     * @return the networkProfile value.
     */
    public CloudServiceNetworkProfile networkProfile() {
        return this.innerProperties() == null ? null : this.innerProperties().networkProfile();
    }

    /**
     * Set the networkProfile property: Network Profile for the cloud service.
     *
     * @param networkProfile the networkProfile value to set.
     * @return the CloudServiceInner object itself.
     */
    public CloudServiceInner withNetworkProfile(CloudServiceNetworkProfile networkProfile) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CloudServiceProperties();
        }
        this.innerProperties().withNetworkProfile(networkProfile);
        return this;
    }

    /**
     * Get the extensionProfile property: Describes a cloud service extension profile.
     *
     * @return the extensionProfile value.
     */
    public CloudServiceExtensionProfile extensionProfile() {
        return this.innerProperties() == null ? null : this.innerProperties().extensionProfile();
    }

    /**
     * Set the extensionProfile property: Describes a cloud service extension profile.
     *
     * @param extensionProfile the extensionProfile value to set.
     * @return the CloudServiceInner object itself.
     */
    public CloudServiceInner withExtensionProfile(CloudServiceExtensionProfile extensionProfile) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CloudServiceProperties();
        }
        this.innerProperties().withExtensionProfile(extensionProfile);
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning state, which only appears in the response.
     *
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the uniqueId property: The unique identifier for the cloud service.
     *
     * @return the uniqueId value.
     */
    public String uniqueId() {
        return this.innerProperties() == null ? null : this.innerProperties().uniqueId();
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
