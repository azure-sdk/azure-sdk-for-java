// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.compute.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.compute.generated.fluent.CloudServiceRoleInstancesClient;
import com.azure.resourcemanager.compute.generated.fluent.models.RoleInstanceInner;
import com.azure.resourcemanager.compute.generated.fluent.models.RoleInstanceViewInner;
import com.azure.resourcemanager.compute.generated.models.CloudServiceRoleInstances;
import com.azure.resourcemanager.compute.generated.models.InstanceViewTypes;
import com.azure.resourcemanager.compute.generated.models.RoleInstance;
import com.azure.resourcemanager.compute.generated.models.RoleInstanceView;
import java.io.InputStream;

public final class CloudServiceRoleInstancesImpl implements CloudServiceRoleInstances {
    private static final ClientLogger LOGGER = new ClientLogger(CloudServiceRoleInstancesImpl.class);

    private final CloudServiceRoleInstancesClient innerClient;

    private final com.azure.resourcemanager.compute.generated.ComputeManager serviceManager;

    public CloudServiceRoleInstancesImpl(
        CloudServiceRoleInstancesClient innerClient,
        com.azure.resourcemanager.compute.generated.ComputeManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public void delete(String resourceGroupName, String cloudServiceName, String roleInstanceName) {
        this.serviceClient().delete(resourceGroupName, cloudServiceName, roleInstanceName);
    }

    public void delete(String resourceGroupName, String cloudServiceName, String roleInstanceName, Context context) {
        this.serviceClient().delete(resourceGroupName, cloudServiceName, roleInstanceName, context);
    }

    public Response<RoleInstance> getWithResponse(
        String resourceGroupName,
        String cloudServiceName,
        String roleInstanceName,
        InstanceViewTypes expand,
        Context context) {
        Response<RoleInstanceInner> inner =
            this
                .serviceClient()
                .getWithResponse(resourceGroupName, cloudServiceName, roleInstanceName, expand, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new RoleInstanceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public RoleInstance get(String resourceGroupName, String cloudServiceName, String roleInstanceName) {
        RoleInstanceInner inner = this.serviceClient().get(resourceGroupName, cloudServiceName, roleInstanceName);
        if (inner != null) {
            return new RoleInstanceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<RoleInstanceView> getInstanceViewWithResponse(
        String resourceGroupName, String cloudServiceName, String roleInstanceName, Context context) {
        Response<RoleInstanceViewInner> inner =
            this
                .serviceClient()
                .getInstanceViewWithResponse(resourceGroupName, cloudServiceName, roleInstanceName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new RoleInstanceViewImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public RoleInstanceView getInstanceView(
        String resourceGroupName, String cloudServiceName, String roleInstanceName) {
        RoleInstanceViewInner inner =
            this.serviceClient().getInstanceView(resourceGroupName, cloudServiceName, roleInstanceName);
        if (inner != null) {
            return new RoleInstanceViewImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<RoleInstance> list(String resourceGroupName, String cloudServiceName) {
        PagedIterable<RoleInstanceInner> inner = this.serviceClient().list(resourceGroupName, cloudServiceName);
        return Utils.mapPage(inner, inner1 -> new RoleInstanceImpl(inner1, this.manager()));
    }

    public PagedIterable<RoleInstance> list(
        String resourceGroupName, String cloudServiceName, InstanceViewTypes expand, Context context) {
        PagedIterable<RoleInstanceInner> inner =
            this.serviceClient().list(resourceGroupName, cloudServiceName, expand, context);
        return Utils.mapPage(inner, inner1 -> new RoleInstanceImpl(inner1, this.manager()));
    }

    public void restart(String resourceGroupName, String cloudServiceName, String roleInstanceName) {
        this.serviceClient().restart(resourceGroupName, cloudServiceName, roleInstanceName);
    }

    public void restart(String resourceGroupName, String cloudServiceName, String roleInstanceName, Context context) {
        this.serviceClient().restart(resourceGroupName, cloudServiceName, roleInstanceName, context);
    }

    public void reimage(String resourceGroupName, String cloudServiceName, String roleInstanceName) {
        this.serviceClient().reimage(resourceGroupName, cloudServiceName, roleInstanceName);
    }

    public void reimage(String resourceGroupName, String cloudServiceName, String roleInstanceName, Context context) {
        this.serviceClient().reimage(resourceGroupName, cloudServiceName, roleInstanceName, context);
    }

    public void rebuild(String resourceGroupName, String cloudServiceName, String roleInstanceName) {
        this.serviceClient().rebuild(resourceGroupName, cloudServiceName, roleInstanceName);
    }

    public void rebuild(String resourceGroupName, String cloudServiceName, String roleInstanceName, Context context) {
        this.serviceClient().rebuild(resourceGroupName, cloudServiceName, roleInstanceName, context);
    }

    public Response<InputStream> getRemoteDesktopFileWithResponse(
        String resourceGroupName, String cloudServiceName, String roleInstanceName, Context context) {
        return this
            .serviceClient()
            .getRemoteDesktopFileWithResponse(resourceGroupName, cloudServiceName, roleInstanceName, context);
    }

    public InputStream getRemoteDesktopFile(
        String resourceGroupName, String cloudServiceName, String roleInstanceName) {
        return this.serviceClient().getRemoteDesktopFile(resourceGroupName, cloudServiceName, roleInstanceName);
    }

    private CloudServiceRoleInstancesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.compute.generated.ComputeManager manager() {
        return this.serviceManager;
    }
}
