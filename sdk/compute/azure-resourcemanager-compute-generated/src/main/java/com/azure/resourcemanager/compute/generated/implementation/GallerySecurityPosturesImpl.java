// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.compute.generated.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.compute.generated.fluent.GallerySecurityPosturesClient;
import com.azure.resourcemanager.compute.generated.fluent.models.GallerySecurityPostureInner;
import com.azure.resourcemanager.compute.generated.models.GallerySecurityPosture;
import com.azure.resourcemanager.compute.generated.models.GallerySecurityPostures;

public final class GallerySecurityPosturesImpl implements GallerySecurityPostures {
    private static final ClientLogger LOGGER = new ClientLogger(GallerySecurityPosturesImpl.class);

    private final GallerySecurityPosturesClient innerClient;

    private final com.azure.resourcemanager.compute.generated.ComputeManager serviceManager;

    public GallerySecurityPosturesImpl(GallerySecurityPosturesClient innerClient,
        com.azure.resourcemanager.compute.generated.ComputeManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<GallerySecurityPosture> getWithResponse(String resourceGroupName, String galleryName,
        String securityPostureName, Context context) {
        Response<GallerySecurityPostureInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, galleryName, securityPostureName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new GallerySecurityPostureImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public GallerySecurityPosture get(String resourceGroupName, String galleryName, String securityPostureName) {
        GallerySecurityPostureInner inner
            = this.serviceClient().get(resourceGroupName, galleryName, securityPostureName);
        if (inner != null) {
            return new GallerySecurityPostureImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String galleryName, String securityPostureName) {
        this.serviceClient().delete(resourceGroupName, galleryName, securityPostureName);
    }

    public void delete(String resourceGroupName, String galleryName, String securityPostureName, Context context) {
        this.serviceClient().delete(resourceGroupName, galleryName, securityPostureName, context);
    }

    public GallerySecurityPosture getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String galleryName = ResourceManagerUtils.getValueFromIdByName(id, "galleries");
        if (galleryName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'galleries'.", id)));
        }
        String securityPostureName = ResourceManagerUtils.getValueFromIdByName(id, "securityPostures");
        if (securityPostureName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'securityPostures'.", id)));
        }
        return this.getWithResponse(resourceGroupName, galleryName, securityPostureName, Context.NONE).getValue();
    }

    public Response<GallerySecurityPosture> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String galleryName = ResourceManagerUtils.getValueFromIdByName(id, "galleries");
        if (galleryName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'galleries'.", id)));
        }
        String securityPostureName = ResourceManagerUtils.getValueFromIdByName(id, "securityPostures");
        if (securityPostureName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'securityPostures'.", id)));
        }
        return this.getWithResponse(resourceGroupName, galleryName, securityPostureName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String galleryName = ResourceManagerUtils.getValueFromIdByName(id, "galleries");
        if (galleryName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'galleries'.", id)));
        }
        String securityPostureName = ResourceManagerUtils.getValueFromIdByName(id, "securityPostures");
        if (securityPostureName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'securityPostures'.", id)));
        }
        this.delete(resourceGroupName, galleryName, securityPostureName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String galleryName = ResourceManagerUtils.getValueFromIdByName(id, "galleries");
        if (galleryName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'galleries'.", id)));
        }
        String securityPostureName = ResourceManagerUtils.getValueFromIdByName(id, "securityPostures");
        if (securityPostureName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'securityPostures'.", id)));
        }
        this.delete(resourceGroupName, galleryName, securityPostureName, context);
    }

    private GallerySecurityPosturesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.compute.generated.ComputeManager manager() {
        return this.serviceManager;
    }

    public GallerySecurityPostureImpl define(String name) {
        return new GallerySecurityPostureImpl(name, this.manager());
    }
}
