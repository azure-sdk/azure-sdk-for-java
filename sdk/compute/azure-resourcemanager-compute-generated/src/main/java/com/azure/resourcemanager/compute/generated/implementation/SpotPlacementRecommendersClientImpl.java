// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.compute.generated.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.compute.generated.fluent.SpotPlacementRecommendersClient;
import com.azure.resourcemanager.compute.generated.fluent.models.ComputeDiagnosticBaseInner;
import com.azure.resourcemanager.compute.generated.fluent.models.SpotPlacementRecommenderResponseInner;
import com.azure.resourcemanager.compute.generated.models.SpotPlacementRecommenderInput;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in SpotPlacementRecommendersClient.
 */
public final class SpotPlacementRecommendersClientImpl implements SpotPlacementRecommendersClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final SpotPlacementRecommendersService service;

    /**
     * The service client containing this operation class.
     */
    private final ComputeManagementClientImpl client;

    /**
     * Initializes an instance of SpotPlacementRecommendersClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    SpotPlacementRecommendersClientImpl(ComputeManagementClientImpl client) {
        this.service = RestProxy.create(SpotPlacementRecommendersService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for ComputeManagementClientSpotPlacementRecommenders to be used by the
     * proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "ComputeManagementCli")
    public interface SpotPlacementRecommendersService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/diagnostics/spotPlacementRecommender")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ComputeDiagnosticBaseInner>> get(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId, @PathParam("location") String location,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/diagnostics/spotPlacementRecommender/generate")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SpotPlacementRecommenderResponseInner>> post(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId, @PathParam("location") String location,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") SpotPlacementRecommenderInput spotPlacementRecommenderInput,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * [SOON TO BE DEPRECATED] Gets Spot Placement Recommender diagnostic metadata.
     * 
     * @param location The name of the Azure region.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return contains metadata of a diagnostic type along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ComputeDiagnosticBaseInner>> getWithResponseAsync(String location) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (location == null) {
            return Mono.error(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        final String apiVersion = "2025-02-01-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), this.client.getSubscriptionId(), location,
                apiVersion, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * [SOON TO BE DEPRECATED] Gets Spot Placement Recommender diagnostic metadata.
     * 
     * @param location The name of the Azure region.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return contains metadata of a diagnostic type along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ComputeDiagnosticBaseInner>> getWithResponseAsync(String location, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (location == null) {
            return Mono.error(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        final String apiVersion = "2025-02-01-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), this.client.getSubscriptionId(), location, apiVersion, accept,
            context);
    }

    /**
     * [SOON TO BE DEPRECATED] Gets Spot Placement Recommender diagnostic metadata.
     * 
     * @param location The name of the Azure region.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return contains metadata of a diagnostic type on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ComputeDiagnosticBaseInner> getAsync(String location) {
        return getWithResponseAsync(location).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * [SOON TO BE DEPRECATED] Gets Spot Placement Recommender diagnostic metadata.
     * 
     * @param location The name of the Azure region.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return contains metadata of a diagnostic type along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ComputeDiagnosticBaseInner> getWithResponse(String location, Context context) {
        return getWithResponseAsync(location, context).block();
    }

    /**
     * [SOON TO BE DEPRECATED] Gets Spot Placement Recommender diagnostic metadata.
     * 
     * @param location The name of the Azure region.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return contains metadata of a diagnostic type.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ComputeDiagnosticBaseInner get(String location) {
        return getWithResponse(location, Context.NONE).getValue();
    }

    /**
     * [SOON TO BE DEPRECATED] Generates placement scores for Spot VM skus.
     * 
     * @param location The name of the Azure region.
     * @param spotPlacementRecommenderInput SpotPlacementRecommender object supplied in the body of the Post spot
     * placement recommender operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return spotPlacementRecommender API response along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SpotPlacementRecommenderResponseInner>> postWithResponseAsync(String location,
        SpotPlacementRecommenderInput spotPlacementRecommenderInput) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (location == null) {
            return Mono.error(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        if (spotPlacementRecommenderInput == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter spotPlacementRecommenderInput is required and cannot be null."));
        } else {
            spotPlacementRecommenderInput.validate();
        }
        final String apiVersion = "2025-02-01-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.post(this.client.getEndpoint(), this.client.getSubscriptionId(), location,
                apiVersion, spotPlacementRecommenderInput, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * [SOON TO BE DEPRECATED] Generates placement scores for Spot VM skus.
     * 
     * @param location The name of the Azure region.
     * @param spotPlacementRecommenderInput SpotPlacementRecommender object supplied in the body of the Post spot
     * placement recommender operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return spotPlacementRecommender API response along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SpotPlacementRecommenderResponseInner>> postWithResponseAsync(String location,
        SpotPlacementRecommenderInput spotPlacementRecommenderInput, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (location == null) {
            return Mono.error(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        if (spotPlacementRecommenderInput == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter spotPlacementRecommenderInput is required and cannot be null."));
        } else {
            spotPlacementRecommenderInput.validate();
        }
        final String apiVersion = "2025-02-01-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.post(this.client.getEndpoint(), this.client.getSubscriptionId(), location, apiVersion,
            spotPlacementRecommenderInput, accept, context);
    }

    /**
     * [SOON TO BE DEPRECATED] Generates placement scores for Spot VM skus.
     * 
     * @param location The name of the Azure region.
     * @param spotPlacementRecommenderInput SpotPlacementRecommender object supplied in the body of the Post spot
     * placement recommender operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return spotPlacementRecommender API response on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SpotPlacementRecommenderResponseInner> postAsync(String location,
        SpotPlacementRecommenderInput spotPlacementRecommenderInput) {
        return postWithResponseAsync(location, spotPlacementRecommenderInput)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * [SOON TO BE DEPRECATED] Generates placement scores for Spot VM skus.
     * 
     * @param location The name of the Azure region.
     * @param spotPlacementRecommenderInput SpotPlacementRecommender object supplied in the body of the Post spot
     * placement recommender operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return spotPlacementRecommender API response along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SpotPlacementRecommenderResponseInner> postWithResponse(String location,
        SpotPlacementRecommenderInput spotPlacementRecommenderInput, Context context) {
        return postWithResponseAsync(location, spotPlacementRecommenderInput, context).block();
    }

    /**
     * [SOON TO BE DEPRECATED] Generates placement scores for Spot VM skus.
     * 
     * @param location The name of the Azure region.
     * @param spotPlacementRecommenderInput SpotPlacementRecommender object supplied in the body of the Post spot
     * placement recommender operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return spotPlacementRecommender API response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SpotPlacementRecommenderResponseInner post(String location,
        SpotPlacementRecommenderInput spotPlacementRecommenderInput) {
        return postWithResponse(location, spotPlacementRecommenderInput, Context.NONE).getValue();
    }
}
