// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.compute.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.compute.generated.models.GalleryProvisioningState;
import com.azure.resourcemanager.compute.generated.models.PostureSetting;
import com.azure.resourcemanager.compute.generated.models.ReplicationStatus;
import com.azure.resourcemanager.compute.generated.models.TargetRegion;
import com.azure.resourcemanager.compute.generated.models.VirtualMachineExtensionAutoGenerated;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * Describes the properties of a gallery security posture version.
 */
@Fluent
public final class GallerySecurityPostureVersionProperties {
    /*
     * If set to true, virtual machines deployed from the latest version of the security posture won't use this
     * version.
     */
    @JsonProperty(value = "excludeFromLatest")
    private Boolean excludeFromLatest;

    /*
     * The timestamp for when the gallery security posture version is published.
     */
    @JsonProperty(value = "publishedDate", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime publishedDate;

    /*
     * The end of life date of the gallery security posture version. This property can be used for decommissioning
     * purposes. This property is updatable.
     */
    @JsonProperty(value = "endOfLifeDate")
    private OffsetDateTime endOfLifeDate;

    /*
     * A list of security posture settings, in key-value pair.
     */
    @JsonProperty(value = "settings")
    private List<PostureSetting> settings;

    /*
     * The target regions where the security posture version is going to be replicated to. This property is updatable.
     */
    @JsonProperty(value = "targetLocations")
    private List<TargetRegion> targetLocations;

    /*
     * A setting for gallery security posture.
     */
    @JsonProperty(value = "virtualMachineExtensions")
    private VirtualMachineExtensionAutoGenerated virtualMachineExtensions;

    /*
     * The current state of the gallery or gallery artifact.
     * 
     * The provisioning state, which only appears in the response.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private GalleryProvisioningState provisioningState;

    /*
     * This is the replication status of the gallery image version.
     */
    @JsonProperty(value = "replicationStatus", access = JsonProperty.Access.WRITE_ONLY)
    private ReplicationStatus replicationStatus;

    /**
     * Creates an instance of GallerySecurityPostureVersionProperties class.
     */
    public GallerySecurityPostureVersionProperties() {
    }

    /**
     * Get the excludeFromLatest property: If set to true, virtual machines deployed from the latest version of the
     * security posture won't use this version.
     * 
     * @return the excludeFromLatest value.
     */
    public Boolean excludeFromLatest() {
        return this.excludeFromLatest;
    }

    /**
     * Set the excludeFromLatest property: If set to true, virtual machines deployed from the latest version of the
     * security posture won't use this version.
     * 
     * @param excludeFromLatest the excludeFromLatest value to set.
     * @return the GallerySecurityPostureVersionProperties object itself.
     */
    public GallerySecurityPostureVersionProperties withExcludeFromLatest(Boolean excludeFromLatest) {
        this.excludeFromLatest = excludeFromLatest;
        return this;
    }

    /**
     * Get the publishedDate property: The timestamp for when the gallery security posture version is published.
     * 
     * @return the publishedDate value.
     */
    public OffsetDateTime publishedDate() {
        return this.publishedDate;
    }

    /**
     * Get the endOfLifeDate property: The end of life date of the gallery security posture version. This property can
     * be used for decommissioning purposes. This property is updatable.
     * 
     * @return the endOfLifeDate value.
     */
    public OffsetDateTime endOfLifeDate() {
        return this.endOfLifeDate;
    }

    /**
     * Set the endOfLifeDate property: The end of life date of the gallery security posture version. This property can
     * be used for decommissioning purposes. This property is updatable.
     * 
     * @param endOfLifeDate the endOfLifeDate value to set.
     * @return the GallerySecurityPostureVersionProperties object itself.
     */
    public GallerySecurityPostureVersionProperties withEndOfLifeDate(OffsetDateTime endOfLifeDate) {
        this.endOfLifeDate = endOfLifeDate;
        return this;
    }

    /**
     * Get the settings property: A list of security posture settings, in key-value pair.
     * 
     * @return the settings value.
     */
    public List<PostureSetting> settings() {
        return this.settings;
    }

    /**
     * Set the settings property: A list of security posture settings, in key-value pair.
     * 
     * @param settings the settings value to set.
     * @return the GallerySecurityPostureVersionProperties object itself.
     */
    public GallerySecurityPostureVersionProperties withSettings(List<PostureSetting> settings) {
        this.settings = settings;
        return this;
    }

    /**
     * Get the targetLocations property: The target regions where the security posture version is going to be
     * replicated to. This property is updatable.
     * 
     * @return the targetLocations value.
     */
    public List<TargetRegion> targetLocations() {
        return this.targetLocations;
    }

    /**
     * Set the targetLocations property: The target regions where the security posture version is going to be
     * replicated to. This property is updatable.
     * 
     * @param targetLocations the targetLocations value to set.
     * @return the GallerySecurityPostureVersionProperties object itself.
     */
    public GallerySecurityPostureVersionProperties withTargetLocations(List<TargetRegion> targetLocations) {
        this.targetLocations = targetLocations;
        return this;
    }

    /**
     * Get the virtualMachineExtensions property: A setting for gallery security posture.
     * 
     * @return the virtualMachineExtensions value.
     */
    public VirtualMachineExtensionAutoGenerated virtualMachineExtensions() {
        return this.virtualMachineExtensions;
    }

    /**
     * Set the virtualMachineExtensions property: A setting for gallery security posture.
     * 
     * @param virtualMachineExtensions the virtualMachineExtensions value to set.
     * @return the GallerySecurityPostureVersionProperties object itself.
     */
    public GallerySecurityPostureVersionProperties
        withVirtualMachineExtensions(VirtualMachineExtensionAutoGenerated virtualMachineExtensions) {
        this.virtualMachineExtensions = virtualMachineExtensions;
        return this;
    }

    /**
     * Get the provisioningState property: The current state of the gallery or gallery artifact.
     * 
     * The provisioning state, which only appears in the response.
     * 
     * @return the provisioningState value.
     */
    public GalleryProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the replicationStatus property: This is the replication status of the gallery image version.
     * 
     * @return the replicationStatus value.
     */
    public ReplicationStatus replicationStatus() {
        return this.replicationStatus;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (settings() != null) {
            settings().forEach(e -> e.validate());
        }
        if (targetLocations() != null) {
            targetLocations().forEach(e -> e.validate());
        }
        if (virtualMachineExtensions() != null) {
            virtualMachineExtensions().validate();
        }
        if (replicationStatus() != null) {
            replicationStatus().validate();
        }
    }
}
