// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.compute.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.compute.generated.fluent.GalleryScriptVersionsClient;
import com.azure.resourcemanager.compute.generated.fluent.models.GalleryScriptVersionInner;
import com.azure.resourcemanager.compute.generated.models.GalleryScriptVersion;
import com.azure.resourcemanager.compute.generated.models.GalleryScriptVersions;

public final class GalleryScriptVersionsImpl implements GalleryScriptVersions {
    private static final ClientLogger LOGGER = new ClientLogger(GalleryScriptVersionsImpl.class);

    private final GalleryScriptVersionsClient innerClient;

    private final com.azure.resourcemanager.compute.generated.ComputeManager serviceManager;

    public GalleryScriptVersionsImpl(GalleryScriptVersionsClient innerClient,
        com.azure.resourcemanager.compute.generated.ComputeManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<GalleryScriptVersion> getWithResponse(String resourceGroupName, String galleryName,
        String galleryScriptName, String galleryScriptVersionName, Context context) {
        Response<GalleryScriptVersionInner> inner = this.serviceClient()
            .getWithResponse(resourceGroupName, galleryName, galleryScriptName, galleryScriptVersionName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new GalleryScriptVersionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public GalleryScriptVersion get(String resourceGroupName, String galleryName, String galleryScriptName,
        String galleryScriptVersionName) {
        GalleryScriptVersionInner inner
            = this.serviceClient().get(resourceGroupName, galleryName, galleryScriptName, galleryScriptVersionName);
        if (inner != null) {
            return new GalleryScriptVersionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String galleryName, String galleryScriptName,
        String galleryScriptVersionName) {
        this.serviceClient().delete(resourceGroupName, galleryName, galleryScriptName, galleryScriptVersionName);
    }

    public void delete(String resourceGroupName, String galleryName, String galleryScriptName,
        String galleryScriptVersionName, Context context) {
        this.serviceClient()
            .delete(resourceGroupName, galleryName, galleryScriptName, galleryScriptVersionName, context);
    }

    public PagedIterable<GalleryScriptVersion> listByGalleryScript(String resourceGroupName, String galleryName,
        String galleryScriptName) {
        PagedIterable<GalleryScriptVersionInner> inner
            = this.serviceClient().listByGalleryScript(resourceGroupName, galleryName, galleryScriptName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new GalleryScriptVersionImpl(inner1, this.manager()));
    }

    public PagedIterable<GalleryScriptVersion> listByGalleryScript(String resourceGroupName, String galleryName,
        String galleryScriptName, Context context) {
        PagedIterable<GalleryScriptVersionInner> inner
            = this.serviceClient().listByGalleryScript(resourceGroupName, galleryName, galleryScriptName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new GalleryScriptVersionImpl(inner1, this.manager()));
    }

    public GalleryScriptVersion getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String galleryName = ResourceManagerUtils.getValueFromIdByName(id, "galleries");
        if (galleryName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'galleries'.", id)));
        }
        String galleryScriptName = ResourceManagerUtils.getValueFromIdByName(id, "scripts");
        if (galleryScriptName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'scripts'.", id)));
        }
        String galleryScriptVersionName = ResourceManagerUtils.getValueFromIdByName(id, "versions");
        if (galleryScriptVersionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'versions'.", id)));
        }
        return this
            .getWithResponse(resourceGroupName, galleryName, galleryScriptName, galleryScriptVersionName, Context.NONE)
            .getValue();
    }

    public Response<GalleryScriptVersion> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String galleryName = ResourceManagerUtils.getValueFromIdByName(id, "galleries");
        if (galleryName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'galleries'.", id)));
        }
        String galleryScriptName = ResourceManagerUtils.getValueFromIdByName(id, "scripts");
        if (galleryScriptName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'scripts'.", id)));
        }
        String galleryScriptVersionName = ResourceManagerUtils.getValueFromIdByName(id, "versions");
        if (galleryScriptVersionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'versions'.", id)));
        }
        return this.getWithResponse(resourceGroupName, galleryName, galleryScriptName, galleryScriptVersionName,
            context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String galleryName = ResourceManagerUtils.getValueFromIdByName(id, "galleries");
        if (galleryName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'galleries'.", id)));
        }
        String galleryScriptName = ResourceManagerUtils.getValueFromIdByName(id, "scripts");
        if (galleryScriptName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'scripts'.", id)));
        }
        String galleryScriptVersionName = ResourceManagerUtils.getValueFromIdByName(id, "versions");
        if (galleryScriptVersionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'versions'.", id)));
        }
        this.delete(resourceGroupName, galleryName, galleryScriptName, galleryScriptVersionName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String galleryName = ResourceManagerUtils.getValueFromIdByName(id, "galleries");
        if (galleryName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'galleries'.", id)));
        }
        String galleryScriptName = ResourceManagerUtils.getValueFromIdByName(id, "scripts");
        if (galleryScriptName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'scripts'.", id)));
        }
        String galleryScriptVersionName = ResourceManagerUtils.getValueFromIdByName(id, "versions");
        if (galleryScriptVersionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'versions'.", id)));
        }
        this.delete(resourceGroupName, galleryName, galleryScriptName, galleryScriptVersionName, context);
    }

    private GalleryScriptVersionsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.compute.generated.ComputeManager manager() {
        return this.serviceManager;
    }

    public GalleryScriptVersionImpl define(String name) {
        return new GalleryScriptVersionImpl(name, this.manager());
    }
}
