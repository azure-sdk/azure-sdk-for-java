// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.compute.generated.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.compute.generated.fluent.DiskInspectionStorageConfigurationsClient;
import com.azure.resourcemanager.compute.generated.fluent.models.StorageConfigurationResponseInner;
import com.azure.resourcemanager.compute.generated.models.StorageConfigurationInput;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in DiskInspectionStorageConfigurationsClient.
 */
public final class DiskInspectionStorageConfigurationsClientImpl implements DiskInspectionStorageConfigurationsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final DiskInspectionStorageConfigurationsService service;

    /**
     * The service client containing this operation class.
     */
    private final ComputeManagementClientImpl client;

    /**
     * Initializes an instance of DiskInspectionStorageConfigurationsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    DiskInspectionStorageConfigurationsClientImpl(ComputeManagementClientImpl client) {
        this.service = RestProxy.create(DiskInspectionStorageConfigurationsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for ComputeManagementClientDiskInspectionStorageConfigurations to be used
     * by the proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "ComputeManagementCli")
    public interface DiskInspectionStorageConfigurationsService {
        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/diagnostics/diskInspection/registerStorageConfiguration")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> register(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId, @PathParam("location") String location,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") StorageConfigurationInput storageConfigurationInput,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/diagnostics/diskInspection/validateStorageConfiguration")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<StorageConfigurationResponseInner>> validate(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId, @PathParam("location") String location,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Register a storageAccount for a subscription used for DiskInspection.
     * 
     * @param location The name of the Azure region.
     * @param storageConfigurationInput Storage Configuration object supplied in the body of the Post to cache
     * storageAccount for a given subscription.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> registerWithResponseAsync(String location,
        StorageConfigurationInput storageConfigurationInput) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (location == null) {
            return Mono.error(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        if (storageConfigurationInput == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter storageConfigurationInput is required and cannot be null."));
        } else {
            storageConfigurationInput.validate();
        }
        final String apiVersion = "2025-02-01-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.register(this.client.getEndpoint(), this.client.getSubscriptionId(),
                location, apiVersion, storageConfigurationInput, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Register a storageAccount for a subscription used for DiskInspection.
     * 
     * @param location The name of the Azure region.
     * @param storageConfigurationInput Storage Configuration object supplied in the body of the Post to cache
     * storageAccount for a given subscription.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> registerWithResponseAsync(String location,
        StorageConfigurationInput storageConfigurationInput, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (location == null) {
            return Mono.error(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        if (storageConfigurationInput == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter storageConfigurationInput is required and cannot be null."));
        } else {
            storageConfigurationInput.validate();
        }
        final String apiVersion = "2025-02-01-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.register(this.client.getEndpoint(), this.client.getSubscriptionId(), location, apiVersion,
            storageConfigurationInput, accept, context);
    }

    /**
     * Register a storageAccount for a subscription used for DiskInspection.
     * 
     * @param location The name of the Azure region.
     * @param storageConfigurationInput Storage Configuration object supplied in the body of the Post to cache
     * storageAccount for a given subscription.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> registerAsync(String location, StorageConfigurationInput storageConfigurationInput) {
        return registerWithResponseAsync(location, storageConfigurationInput).flatMap(ignored -> Mono.empty());
    }

    /**
     * Register a storageAccount for a subscription used for DiskInspection.
     * 
     * @param location The name of the Azure region.
     * @param storageConfigurationInput Storage Configuration object supplied in the body of the Post to cache
     * storageAccount for a given subscription.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> registerWithResponse(String location, StorageConfigurationInput storageConfigurationInput,
        Context context) {
        return registerWithResponseAsync(location, storageConfigurationInput, context).block();
    }

    /**
     * Register a storageAccount for a subscription used for DiskInspection.
     * 
     * @param location The name of the Azure region.
     * @param storageConfigurationInput Storage Configuration object supplied in the body of the Post to cache
     * storageAccount for a given subscription.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void register(String location, StorageConfigurationInput storageConfigurationInput) {
        registerWithResponse(location, storageConfigurationInput, Context.NONE);
    }

    /**
     * Validate if a storageAccount configuration exists for a subscription used for DiskInspection.
     * 
     * @param location The name of the Azure region.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return api output result when there is an existing storage configuration entry along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<StorageConfigurationResponseInner>> validateWithResponseAsync(String location) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (location == null) {
            return Mono.error(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        final String apiVersion = "2025-02-01-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.validate(this.client.getEndpoint(), this.client.getSubscriptionId(),
                location, apiVersion, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Validate if a storageAccount configuration exists for a subscription used for DiskInspection.
     * 
     * @param location The name of the Azure region.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return api output result when there is an existing storage configuration entry along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<StorageConfigurationResponseInner>> validateWithResponseAsync(String location,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (location == null) {
            return Mono.error(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        final String apiVersion = "2025-02-01-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.validate(this.client.getEndpoint(), this.client.getSubscriptionId(), location, apiVersion,
            accept, context);
    }

    /**
     * Validate if a storageAccount configuration exists for a subscription used for DiskInspection.
     * 
     * @param location The name of the Azure region.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return api output result when there is an existing storage configuration entry on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<StorageConfigurationResponseInner> validateAsync(String location) {
        return validateWithResponseAsync(location).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Validate if a storageAccount configuration exists for a subscription used for DiskInspection.
     * 
     * @param location The name of the Azure region.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return api output result when there is an existing storage configuration entry along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<StorageConfigurationResponseInner> validateWithResponse(String location, Context context) {
        return validateWithResponseAsync(location, context).block();
    }

    /**
     * Validate if a storageAccount configuration exists for a subscription used for DiskInspection.
     * 
     * @param location The name of the Azure region.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return api output result when there is an existing storage configuration entry.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public StorageConfigurationResponseInner validate(String location) {
        return validateWithResponse(location, Context.NONE).getValue();
    }
}
