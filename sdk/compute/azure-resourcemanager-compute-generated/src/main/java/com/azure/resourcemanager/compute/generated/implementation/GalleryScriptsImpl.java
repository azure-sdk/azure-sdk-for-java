// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.compute.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.compute.generated.fluent.GalleryScriptsClient;
import com.azure.resourcemanager.compute.generated.fluent.models.GalleryScriptInner;
import com.azure.resourcemanager.compute.generated.models.GalleryScript;
import com.azure.resourcemanager.compute.generated.models.GalleryScripts;

public final class GalleryScriptsImpl implements GalleryScripts {
    private static final ClientLogger LOGGER = new ClientLogger(GalleryScriptsImpl.class);

    private final GalleryScriptsClient innerClient;

    private final com.azure.resourcemanager.compute.generated.ComputeManager serviceManager;

    public GalleryScriptsImpl(GalleryScriptsClient innerClient,
        com.azure.resourcemanager.compute.generated.ComputeManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<GalleryScript> getWithResponse(String resourceGroupName, String galleryName,
        String galleryScriptName, Context context) {
        Response<GalleryScriptInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, galleryName, galleryScriptName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new GalleryScriptImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public GalleryScript get(String resourceGroupName, String galleryName, String galleryScriptName) {
        GalleryScriptInner inner = this.serviceClient().get(resourceGroupName, galleryName, galleryScriptName);
        if (inner != null) {
            return new GalleryScriptImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String galleryName, String galleryScriptName) {
        this.serviceClient().delete(resourceGroupName, galleryName, galleryScriptName);
    }

    public void delete(String resourceGroupName, String galleryName, String galleryScriptName, Context context) {
        this.serviceClient().delete(resourceGroupName, galleryName, galleryScriptName, context);
    }

    public PagedIterable<GalleryScript> listByGallery(String resourceGroupName, String galleryName) {
        PagedIterable<GalleryScriptInner> inner = this.serviceClient().listByGallery(resourceGroupName, galleryName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new GalleryScriptImpl(inner1, this.manager()));
    }

    public PagedIterable<GalleryScript> listByGallery(String resourceGroupName, String galleryName, Context context) {
        PagedIterable<GalleryScriptInner> inner
            = this.serviceClient().listByGallery(resourceGroupName, galleryName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new GalleryScriptImpl(inner1, this.manager()));
    }

    public GalleryScript getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String galleryName = ResourceManagerUtils.getValueFromIdByName(id, "galleries");
        if (galleryName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'galleries'.", id)));
        }
        String galleryScriptName = ResourceManagerUtils.getValueFromIdByName(id, "scripts");
        if (galleryScriptName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'scripts'.", id)));
        }
        return this.getWithResponse(resourceGroupName, galleryName, galleryScriptName, Context.NONE).getValue();
    }

    public Response<GalleryScript> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String galleryName = ResourceManagerUtils.getValueFromIdByName(id, "galleries");
        if (galleryName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'galleries'.", id)));
        }
        String galleryScriptName = ResourceManagerUtils.getValueFromIdByName(id, "scripts");
        if (galleryScriptName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'scripts'.", id)));
        }
        return this.getWithResponse(resourceGroupName, galleryName, galleryScriptName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String galleryName = ResourceManagerUtils.getValueFromIdByName(id, "galleries");
        if (galleryName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'galleries'.", id)));
        }
        String galleryScriptName = ResourceManagerUtils.getValueFromIdByName(id, "scripts");
        if (galleryScriptName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'scripts'.", id)));
        }
        this.delete(resourceGroupName, galleryName, galleryScriptName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String galleryName = ResourceManagerUtils.getValueFromIdByName(id, "galleries");
        if (galleryName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'galleries'.", id)));
        }
        String galleryScriptName = ResourceManagerUtils.getValueFromIdByName(id, "scripts");
        if (galleryScriptName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'scripts'.", id)));
        }
        this.delete(resourceGroupName, galleryName, galleryScriptName, context);
    }

    private GalleryScriptsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.compute.generated.ComputeManager manager() {
        return this.serviceManager;
    }

    public GalleryScriptImpl define(String name) {
        return new GalleryScriptImpl(name, this.manager());
    }
}
