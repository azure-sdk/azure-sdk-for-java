// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.compute.generated.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.compute.generated.fluent.GallerySecurityPostureVersionsClient;
import com.azure.resourcemanager.compute.generated.fluent.models.GallerySecurityPostureVersionInner;
import com.azure.resourcemanager.compute.generated.models.ApiErrorException;
import com.azure.resourcemanager.compute.generated.models.GallerySecurityPostureVersionUpdate;
import com.azure.resourcemanager.compute.generated.models.ReplicationStatusTypes;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in GallerySecurityPostureVersionsClient.
 */
public final class GallerySecurityPostureVersionsClientImpl implements GallerySecurityPostureVersionsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final GallerySecurityPostureVersionsService service;

    /**
     * The service client containing this operation class.
     */
    private final ComputeManagementClientImpl client;

    /**
     * Initializes an instance of GallerySecurityPostureVersionsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    GallerySecurityPostureVersionsClientImpl(ComputeManagementClientImpl client) {
        this.service = RestProxy.create(GallerySecurityPostureVersionsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for ComputeManagementClientGallerySecurityPostureVersions to be used by
     * the proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "ComputeManagementCli")
    public interface GallerySecurityPostureVersionsService {
        @Headers({ "Content-Type: application/json" })
        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/securityPostures/{securityPostureName}/versions/{securityPostureVersionName}")
        @ExpectedResponses({ 200, 201, 202 })
        @UnexpectedResponseExceptionType(ApiErrorException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdate(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("galleryName") String galleryName,
            @PathParam("securityPostureName") String securityPostureName,
            @PathParam("securityPostureVersionName") String securityPostureVersionName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") GallerySecurityPostureVersionInner gallerySecurityPostureVersion,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/securityPostures/{securityPostureName}/versions/{securityPostureVersionName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ApiErrorException.class)
        Mono<Response<Flux<ByteBuffer>>> update(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("galleryName") String galleryName,
            @PathParam("securityPostureName") String securityPostureName,
            @PathParam("securityPostureVersionName") String securityPostureVersionName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") GallerySecurityPostureVersionUpdate gallerySecurityPostureVersion,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/securityPostures/{securityPostureName}/versions/{securityPostureVersionName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ApiErrorException.class)
        Mono<Response<GallerySecurityPostureVersionInner>> get(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("galleryName") String galleryName,
            @PathParam("securityPostureName") String securityPostureName,
            @PathParam("securityPostureVersionName") String securityPostureVersionName,
            @QueryParam("$expand") ReplicationStatusTypes expand, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/securityPostures/{securityPostureName}/versions/{securityPostureVersionName}")
        @ExpectedResponses({ 200, 202, 204 })
        @UnexpectedResponseExceptionType(ApiErrorException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("galleryName") String galleryName,
            @PathParam("securityPostureName") String securityPostureName,
            @PathParam("securityPostureVersionName") String securityPostureVersionName,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Create or update a gallery security posture version.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the gallery in which the security posture definition resides.
     * @param securityPostureName The name of the gallery security posture definition in which the security posture
     * version is to be created.
     * @param securityPostureVersionName The name of the gallery security posture Version to be created. Needs to follow
     * semantic version name pattern: The allowed characters are digit and period. Digits must be within the range of a
     * 32-bit integer. Format: &lt;MajorVersion&gt;.&lt;MinorVersion&gt;.&lt;Patch&gt;.
     * @param gallerySecurityPostureVersion Parameters supplied to the create or update gallery security posture version
     * operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specifies information about the gallery security posture version that you want to create or update along
     * with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String resourceGroupName,
        String galleryName, String securityPostureName, String securityPostureVersionName,
        GallerySecurityPostureVersionInner gallerySecurityPostureVersion) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (galleryName == null) {
            return Mono.error(new IllegalArgumentException("Parameter galleryName is required and cannot be null."));
        }
        if (securityPostureName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter securityPostureName is required and cannot be null."));
        }
        if (securityPostureVersionName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter securityPostureVersionName is required and cannot be null."));
        }
        if (gallerySecurityPostureVersion == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter gallerySecurityPostureVersion is required and cannot be null."));
        } else {
            gallerySecurityPostureVersion.validate();
        }
        final String apiVersion = "2024-03-03";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.createOrUpdate(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, galleryName, securityPostureName, securityPostureVersionName, apiVersion,
                gallerySecurityPostureVersion, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create or update a gallery security posture version.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the gallery in which the security posture definition resides.
     * @param securityPostureName The name of the gallery security posture definition in which the security posture
     * version is to be created.
     * @param securityPostureVersionName The name of the gallery security posture Version to be created. Needs to follow
     * semantic version name pattern: The allowed characters are digit and period. Digits must be within the range of a
     * 32-bit integer. Format: &lt;MajorVersion&gt;.&lt;MinorVersion&gt;.&lt;Patch&gt;.
     * @param gallerySecurityPostureVersion Parameters supplied to the create or update gallery security posture version
     * operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specifies information about the gallery security posture version that you want to create or update along
     * with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String resourceGroupName,
        String galleryName, String securityPostureName, String securityPostureVersionName,
        GallerySecurityPostureVersionInner gallerySecurityPostureVersion, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (galleryName == null) {
            return Mono.error(new IllegalArgumentException("Parameter galleryName is required and cannot be null."));
        }
        if (securityPostureName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter securityPostureName is required and cannot be null."));
        }
        if (securityPostureVersionName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter securityPostureVersionName is required and cannot be null."));
        }
        if (gallerySecurityPostureVersion == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter gallerySecurityPostureVersion is required and cannot be null."));
        } else {
            gallerySecurityPostureVersion.validate();
        }
        final String apiVersion = "2024-03-03";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.createOrUpdate(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            galleryName, securityPostureName, securityPostureVersionName, apiVersion, gallerySecurityPostureVersion,
            accept, context);
    }

    /**
     * Create or update a gallery security posture version.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the gallery in which the security posture definition resides.
     * @param securityPostureName The name of the gallery security posture definition in which the security posture
     * version is to be created.
     * @param securityPostureVersionName The name of the gallery security posture Version to be created. Needs to follow
     * semantic version name pattern: The allowed characters are digit and period. Digits must be within the range of a
     * 32-bit integer. Format: &lt;MajorVersion&gt;.&lt;MinorVersion&gt;.&lt;Patch&gt;.
     * @param gallerySecurityPostureVersion Parameters supplied to the create or update gallery security posture version
     * operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of specifies information about the gallery security posture version
     * that you want to create or update.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<GallerySecurityPostureVersionInner>, GallerySecurityPostureVersionInner>
        beginCreateOrUpdateAsync(String resourceGroupName, String galleryName, String securityPostureName,
            String securityPostureVersionName, GallerySecurityPostureVersionInner gallerySecurityPostureVersion) {
        Mono<Response<Flux<ByteBuffer>>> mono = createOrUpdateWithResponseAsync(resourceGroupName, galleryName,
            securityPostureName, securityPostureVersionName, gallerySecurityPostureVersion);
        return this.client.<GallerySecurityPostureVersionInner, GallerySecurityPostureVersionInner>getLroResult(mono,
            this.client.getHttpPipeline(), GallerySecurityPostureVersionInner.class,
            GallerySecurityPostureVersionInner.class, this.client.getContext());
    }

    /**
     * Create or update a gallery security posture version.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the gallery in which the security posture definition resides.
     * @param securityPostureName The name of the gallery security posture definition in which the security posture
     * version is to be created.
     * @param securityPostureVersionName The name of the gallery security posture Version to be created. Needs to follow
     * semantic version name pattern: The allowed characters are digit and period. Digits must be within the range of a
     * 32-bit integer. Format: &lt;MajorVersion&gt;.&lt;MinorVersion&gt;.&lt;Patch&gt;.
     * @param gallerySecurityPostureVersion Parameters supplied to the create or update gallery security posture version
     * operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of specifies information about the gallery security posture version
     * that you want to create or update.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<GallerySecurityPostureVersionInner>, GallerySecurityPostureVersionInner>
        beginCreateOrUpdateAsync(String resourceGroupName, String galleryName, String securityPostureName,
            String securityPostureVersionName, GallerySecurityPostureVersionInner gallerySecurityPostureVersion,
            Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = createOrUpdateWithResponseAsync(resourceGroupName, galleryName,
            securityPostureName, securityPostureVersionName, gallerySecurityPostureVersion, context);
        return this.client.<GallerySecurityPostureVersionInner, GallerySecurityPostureVersionInner>getLroResult(mono,
            this.client.getHttpPipeline(), GallerySecurityPostureVersionInner.class,
            GallerySecurityPostureVersionInner.class, context);
    }

    /**
     * Create or update a gallery security posture version.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the gallery in which the security posture definition resides.
     * @param securityPostureName The name of the gallery security posture definition in which the security posture
     * version is to be created.
     * @param securityPostureVersionName The name of the gallery security posture Version to be created. Needs to follow
     * semantic version name pattern: The allowed characters are digit and period. Digits must be within the range of a
     * 32-bit integer. Format: &lt;MajorVersion&gt;.&lt;MinorVersion&gt;.&lt;Patch&gt;.
     * @param gallerySecurityPostureVersion Parameters supplied to the create or update gallery security posture version
     * operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of specifies information about the gallery security posture version
     * that you want to create or update.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<GallerySecurityPostureVersionInner>, GallerySecurityPostureVersionInner>
        beginCreateOrUpdate(String resourceGroupName, String galleryName, String securityPostureName,
            String securityPostureVersionName, GallerySecurityPostureVersionInner gallerySecurityPostureVersion) {
        return this
            .beginCreateOrUpdateAsync(resourceGroupName, galleryName, securityPostureName, securityPostureVersionName,
                gallerySecurityPostureVersion)
            .getSyncPoller();
    }

    /**
     * Create or update a gallery security posture version.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the gallery in which the security posture definition resides.
     * @param securityPostureName The name of the gallery security posture definition in which the security posture
     * version is to be created.
     * @param securityPostureVersionName The name of the gallery security posture Version to be created. Needs to follow
     * semantic version name pattern: The allowed characters are digit and period. Digits must be within the range of a
     * 32-bit integer. Format: &lt;MajorVersion&gt;.&lt;MinorVersion&gt;.&lt;Patch&gt;.
     * @param gallerySecurityPostureVersion Parameters supplied to the create or update gallery security posture version
     * operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of specifies information about the gallery security posture version
     * that you want to create or update.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<GallerySecurityPostureVersionInner>, GallerySecurityPostureVersionInner>
        beginCreateOrUpdate(String resourceGroupName, String galleryName, String securityPostureName,
            String securityPostureVersionName, GallerySecurityPostureVersionInner gallerySecurityPostureVersion,
            Context context) {
        return this
            .beginCreateOrUpdateAsync(resourceGroupName, galleryName, securityPostureName, securityPostureVersionName,
                gallerySecurityPostureVersion, context)
            .getSyncPoller();
    }

    /**
     * Create or update a gallery security posture version.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the gallery in which the security posture definition resides.
     * @param securityPostureName The name of the gallery security posture definition in which the security posture
     * version is to be created.
     * @param securityPostureVersionName The name of the gallery security posture Version to be created. Needs to follow
     * semantic version name pattern: The allowed characters are digit and period. Digits must be within the range of a
     * 32-bit integer. Format: &lt;MajorVersion&gt;.&lt;MinorVersion&gt;.&lt;Patch&gt;.
     * @param gallerySecurityPostureVersion Parameters supplied to the create or update gallery security posture version
     * operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specifies information about the gallery security posture version that you want to create or update on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<GallerySecurityPostureVersionInner> createOrUpdateAsync(String resourceGroupName, String galleryName,
        String securityPostureName, String securityPostureVersionName,
        GallerySecurityPostureVersionInner gallerySecurityPostureVersion) {
        return beginCreateOrUpdateAsync(resourceGroupName, galleryName, securityPostureName, securityPostureVersionName,
            gallerySecurityPostureVersion).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create or update a gallery security posture version.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the gallery in which the security posture definition resides.
     * @param securityPostureName The name of the gallery security posture definition in which the security posture
     * version is to be created.
     * @param securityPostureVersionName The name of the gallery security posture Version to be created. Needs to follow
     * semantic version name pattern: The allowed characters are digit and period. Digits must be within the range of a
     * 32-bit integer. Format: &lt;MajorVersion&gt;.&lt;MinorVersion&gt;.&lt;Patch&gt;.
     * @param gallerySecurityPostureVersion Parameters supplied to the create or update gallery security posture version
     * operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specifies information about the gallery security posture version that you want to create or update on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<GallerySecurityPostureVersionInner> createOrUpdateAsync(String resourceGroupName, String galleryName,
        String securityPostureName, String securityPostureVersionName,
        GallerySecurityPostureVersionInner gallerySecurityPostureVersion, Context context) {
        return beginCreateOrUpdateAsync(resourceGroupName, galleryName, securityPostureName, securityPostureVersionName,
            gallerySecurityPostureVersion, context).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create or update a gallery security posture version.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the gallery in which the security posture definition resides.
     * @param securityPostureName The name of the gallery security posture definition in which the security posture
     * version is to be created.
     * @param securityPostureVersionName The name of the gallery security posture Version to be created. Needs to follow
     * semantic version name pattern: The allowed characters are digit and period. Digits must be within the range of a
     * 32-bit integer. Format: &lt;MajorVersion&gt;.&lt;MinorVersion&gt;.&lt;Patch&gt;.
     * @param gallerySecurityPostureVersion Parameters supplied to the create or update gallery security posture version
     * operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specifies information about the gallery security posture version that you want to create or update.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public GallerySecurityPostureVersionInner createOrUpdate(String resourceGroupName, String galleryName,
        String securityPostureName, String securityPostureVersionName,
        GallerySecurityPostureVersionInner gallerySecurityPostureVersion) {
        return createOrUpdateAsync(resourceGroupName, galleryName, securityPostureName, securityPostureVersionName,
            gallerySecurityPostureVersion).block();
    }

    /**
     * Create or update a gallery security posture version.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the gallery in which the security posture definition resides.
     * @param securityPostureName The name of the gallery security posture definition in which the security posture
     * version is to be created.
     * @param securityPostureVersionName The name of the gallery security posture Version to be created. Needs to follow
     * semantic version name pattern: The allowed characters are digit and period. Digits must be within the range of a
     * 32-bit integer. Format: &lt;MajorVersion&gt;.&lt;MinorVersion&gt;.&lt;Patch&gt;.
     * @param gallerySecurityPostureVersion Parameters supplied to the create or update gallery security posture version
     * operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specifies information about the gallery security posture version that you want to create or update.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public GallerySecurityPostureVersionInner createOrUpdate(String resourceGroupName, String galleryName,
        String securityPostureName, String securityPostureVersionName,
        GallerySecurityPostureVersionInner gallerySecurityPostureVersion, Context context) {
        return createOrUpdateAsync(resourceGroupName, galleryName, securityPostureName, securityPostureVersionName,
            gallerySecurityPostureVersion, context).block();
    }

    /**
     * Update a gallery security posture version.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the gallery in which the security posture definition resides.
     * @param securityPostureName The name of the gallery security posture definition in which the version is to be
     * updated.
     * @param securityPostureVersionName The name of the gallery security posture version to be updated. Needs to follow
     * semantic version name pattern: The allowed characters are digit and period. Digits must be within the range of a
     * 32-bit integer. Format: &lt;MajorVersion&gt;.&lt;MinorVersion&gt;.&lt;Patch&gt;.
     * @param gallerySecurityPostureVersion Parameters supplied to the update gallery security posture version
     * operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specifies information about the gallery security posture version that you want to create or update along
     * with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(String resourceGroupName, String galleryName,
        String securityPostureName, String securityPostureVersionName,
        GallerySecurityPostureVersionUpdate gallerySecurityPostureVersion) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (galleryName == null) {
            return Mono.error(new IllegalArgumentException("Parameter galleryName is required and cannot be null."));
        }
        if (securityPostureName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter securityPostureName is required and cannot be null."));
        }
        if (securityPostureVersionName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter securityPostureVersionName is required and cannot be null."));
        }
        if (gallerySecurityPostureVersion == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter gallerySecurityPostureVersion is required and cannot be null."));
        } else {
            gallerySecurityPostureVersion.validate();
        }
        final String apiVersion = "2024-03-03";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.update(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, galleryName, securityPostureName, securityPostureVersionName, apiVersion,
                gallerySecurityPostureVersion, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Update a gallery security posture version.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the gallery in which the security posture definition resides.
     * @param securityPostureName The name of the gallery security posture definition in which the version is to be
     * updated.
     * @param securityPostureVersionName The name of the gallery security posture version to be updated. Needs to follow
     * semantic version name pattern: The allowed characters are digit and period. Digits must be within the range of a
     * 32-bit integer. Format: &lt;MajorVersion&gt;.&lt;MinorVersion&gt;.&lt;Patch&gt;.
     * @param gallerySecurityPostureVersion Parameters supplied to the update gallery security posture version
     * operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specifies information about the gallery security posture version that you want to create or update along
     * with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(String resourceGroupName, String galleryName,
        String securityPostureName, String securityPostureVersionName,
        GallerySecurityPostureVersionUpdate gallerySecurityPostureVersion, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (galleryName == null) {
            return Mono.error(new IllegalArgumentException("Parameter galleryName is required and cannot be null."));
        }
        if (securityPostureName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter securityPostureName is required and cannot be null."));
        }
        if (securityPostureVersionName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter securityPostureVersionName is required and cannot be null."));
        }
        if (gallerySecurityPostureVersion == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter gallerySecurityPostureVersion is required and cannot be null."));
        } else {
            gallerySecurityPostureVersion.validate();
        }
        final String apiVersion = "2024-03-03";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.update(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            galleryName, securityPostureName, securityPostureVersionName, apiVersion, gallerySecurityPostureVersion,
            accept, context);
    }

    /**
     * Update a gallery security posture version.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the gallery in which the security posture definition resides.
     * @param securityPostureName The name of the gallery security posture definition in which the version is to be
     * updated.
     * @param securityPostureVersionName The name of the gallery security posture version to be updated. Needs to follow
     * semantic version name pattern: The allowed characters are digit and period. Digits must be within the range of a
     * 32-bit integer. Format: &lt;MajorVersion&gt;.&lt;MinorVersion&gt;.&lt;Patch&gt;.
     * @param gallerySecurityPostureVersion Parameters supplied to the update gallery security posture version
     * operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of specifies information about the gallery security posture version
     * that you want to create or update.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<GallerySecurityPostureVersionInner>, GallerySecurityPostureVersionInner>
        beginUpdateAsync(String resourceGroupName, String galleryName, String securityPostureName,
            String securityPostureVersionName, GallerySecurityPostureVersionUpdate gallerySecurityPostureVersion) {
        Mono<Response<Flux<ByteBuffer>>> mono = updateWithResponseAsync(resourceGroupName, galleryName,
            securityPostureName, securityPostureVersionName, gallerySecurityPostureVersion);
        return this.client.<GallerySecurityPostureVersionInner, GallerySecurityPostureVersionInner>getLroResult(mono,
            this.client.getHttpPipeline(), GallerySecurityPostureVersionInner.class,
            GallerySecurityPostureVersionInner.class, this.client.getContext());
    }

    /**
     * Update a gallery security posture version.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the gallery in which the security posture definition resides.
     * @param securityPostureName The name of the gallery security posture definition in which the version is to be
     * updated.
     * @param securityPostureVersionName The name of the gallery security posture version to be updated. Needs to follow
     * semantic version name pattern: The allowed characters are digit and period. Digits must be within the range of a
     * 32-bit integer. Format: &lt;MajorVersion&gt;.&lt;MinorVersion&gt;.&lt;Patch&gt;.
     * @param gallerySecurityPostureVersion Parameters supplied to the update gallery security posture version
     * operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of specifies information about the gallery security posture version
     * that you want to create or update.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<GallerySecurityPostureVersionInner>, GallerySecurityPostureVersionInner>
        beginUpdateAsync(String resourceGroupName, String galleryName, String securityPostureName,
            String securityPostureVersionName, GallerySecurityPostureVersionUpdate gallerySecurityPostureVersion,
            Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = updateWithResponseAsync(resourceGroupName, galleryName,
            securityPostureName, securityPostureVersionName, gallerySecurityPostureVersion, context);
        return this.client.<GallerySecurityPostureVersionInner, GallerySecurityPostureVersionInner>getLroResult(mono,
            this.client.getHttpPipeline(), GallerySecurityPostureVersionInner.class,
            GallerySecurityPostureVersionInner.class, context);
    }

    /**
     * Update a gallery security posture version.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the gallery in which the security posture definition resides.
     * @param securityPostureName The name of the gallery security posture definition in which the version is to be
     * updated.
     * @param securityPostureVersionName The name of the gallery security posture version to be updated. Needs to follow
     * semantic version name pattern: The allowed characters are digit and period. Digits must be within the range of a
     * 32-bit integer. Format: &lt;MajorVersion&gt;.&lt;MinorVersion&gt;.&lt;Patch&gt;.
     * @param gallerySecurityPostureVersion Parameters supplied to the update gallery security posture version
     * operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of specifies information about the gallery security posture version
     * that you want to create or update.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<GallerySecurityPostureVersionInner>, GallerySecurityPostureVersionInner> beginUpdate(
        String resourceGroupName, String galleryName, String securityPostureName, String securityPostureVersionName,
        GallerySecurityPostureVersionUpdate gallerySecurityPostureVersion) {
        return this
            .beginUpdateAsync(resourceGroupName, galleryName, securityPostureName, securityPostureVersionName,
                gallerySecurityPostureVersion)
            .getSyncPoller();
    }

    /**
     * Update a gallery security posture version.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the gallery in which the security posture definition resides.
     * @param securityPostureName The name of the gallery security posture definition in which the version is to be
     * updated.
     * @param securityPostureVersionName The name of the gallery security posture version to be updated. Needs to follow
     * semantic version name pattern: The allowed characters are digit and period. Digits must be within the range of a
     * 32-bit integer. Format: &lt;MajorVersion&gt;.&lt;MinorVersion&gt;.&lt;Patch&gt;.
     * @param gallerySecurityPostureVersion Parameters supplied to the update gallery security posture version
     * operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of specifies information about the gallery security posture version
     * that you want to create or update.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<GallerySecurityPostureVersionInner>, GallerySecurityPostureVersionInner> beginUpdate(
        String resourceGroupName, String galleryName, String securityPostureName, String securityPostureVersionName,
        GallerySecurityPostureVersionUpdate gallerySecurityPostureVersion, Context context) {
        return this
            .beginUpdateAsync(resourceGroupName, galleryName, securityPostureName, securityPostureVersionName,
                gallerySecurityPostureVersion, context)
            .getSyncPoller();
    }

    /**
     * Update a gallery security posture version.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the gallery in which the security posture definition resides.
     * @param securityPostureName The name of the gallery security posture definition in which the version is to be
     * updated.
     * @param securityPostureVersionName The name of the gallery security posture version to be updated. Needs to follow
     * semantic version name pattern: The allowed characters are digit and period. Digits must be within the range of a
     * 32-bit integer. Format: &lt;MajorVersion&gt;.&lt;MinorVersion&gt;.&lt;Patch&gt;.
     * @param gallerySecurityPostureVersion Parameters supplied to the update gallery security posture version
     * operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specifies information about the gallery security posture version that you want to create or update on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<GallerySecurityPostureVersionInner> updateAsync(String resourceGroupName, String galleryName,
        String securityPostureName, String securityPostureVersionName,
        GallerySecurityPostureVersionUpdate gallerySecurityPostureVersion) {
        return beginUpdateAsync(resourceGroupName, galleryName, securityPostureName, securityPostureVersionName,
            gallerySecurityPostureVersion).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Update a gallery security posture version.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the gallery in which the security posture definition resides.
     * @param securityPostureName The name of the gallery security posture definition in which the version is to be
     * updated.
     * @param securityPostureVersionName The name of the gallery security posture version to be updated. Needs to follow
     * semantic version name pattern: The allowed characters are digit and period. Digits must be within the range of a
     * 32-bit integer. Format: &lt;MajorVersion&gt;.&lt;MinorVersion&gt;.&lt;Patch&gt;.
     * @param gallerySecurityPostureVersion Parameters supplied to the update gallery security posture version
     * operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specifies information about the gallery security posture version that you want to create or update on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<GallerySecurityPostureVersionInner> updateAsync(String resourceGroupName, String galleryName,
        String securityPostureName, String securityPostureVersionName,
        GallerySecurityPostureVersionUpdate gallerySecurityPostureVersion, Context context) {
        return beginUpdateAsync(resourceGroupName, galleryName, securityPostureName, securityPostureVersionName,
            gallerySecurityPostureVersion, context).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Update a gallery security posture version.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the gallery in which the security posture definition resides.
     * @param securityPostureName The name of the gallery security posture definition in which the version is to be
     * updated.
     * @param securityPostureVersionName The name of the gallery security posture version to be updated. Needs to follow
     * semantic version name pattern: The allowed characters are digit and period. Digits must be within the range of a
     * 32-bit integer. Format: &lt;MajorVersion&gt;.&lt;MinorVersion&gt;.&lt;Patch&gt;.
     * @param gallerySecurityPostureVersion Parameters supplied to the update gallery security posture version
     * operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specifies information about the gallery security posture version that you want to create or update.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public GallerySecurityPostureVersionInner update(String resourceGroupName, String galleryName,
        String securityPostureName, String securityPostureVersionName,
        GallerySecurityPostureVersionUpdate gallerySecurityPostureVersion) {
        return updateAsync(resourceGroupName, galleryName, securityPostureName, securityPostureVersionName,
            gallerySecurityPostureVersion).block();
    }

    /**
     * Update a gallery security posture version.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the gallery in which the security posture definition resides.
     * @param securityPostureName The name of the gallery security posture definition in which the version is to be
     * updated.
     * @param securityPostureVersionName The name of the gallery security posture version to be updated. Needs to follow
     * semantic version name pattern: The allowed characters are digit and period. Digits must be within the range of a
     * 32-bit integer. Format: &lt;MajorVersion&gt;.&lt;MinorVersion&gt;.&lt;Patch&gt;.
     * @param gallerySecurityPostureVersion Parameters supplied to the update gallery security posture version
     * operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specifies information about the gallery security posture version that you want to create or update.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public GallerySecurityPostureVersionInner update(String resourceGroupName, String galleryName,
        String securityPostureName, String securityPostureVersionName,
        GallerySecurityPostureVersionUpdate gallerySecurityPostureVersion, Context context) {
        return updateAsync(resourceGroupName, galleryName, securityPostureName, securityPostureVersionName,
            gallerySecurityPostureVersion, context).block();
    }

    /**
     * Retrieves information about a gallery security posture version.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition resides.
     * @param securityPostureName The name of the gallery security posture definition in which the version resides.
     * @param securityPostureVersionName The name of the gallery security posture version to be retrieved.
     * @param expand The expand expression to apply on the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specifies information about the gallery security posture version that you want to create or update along
     * with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<GallerySecurityPostureVersionInner>> getWithResponseAsync(String resourceGroupName,
        String galleryName, String securityPostureName, String securityPostureVersionName,
        ReplicationStatusTypes expand) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (galleryName == null) {
            return Mono.error(new IllegalArgumentException("Parameter galleryName is required and cannot be null."));
        }
        if (securityPostureName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter securityPostureName is required and cannot be null."));
        }
        if (securityPostureVersionName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter securityPostureVersionName is required and cannot be null."));
        }
        final String apiVersion = "2024-03-03";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.get(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
                    galleryName, securityPostureName, securityPostureVersionName, expand, apiVersion, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Retrieves information about a gallery security posture version.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition resides.
     * @param securityPostureName The name of the gallery security posture definition in which the version resides.
     * @param securityPostureVersionName The name of the gallery security posture version to be retrieved.
     * @param expand The expand expression to apply on the operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specifies information about the gallery security posture version that you want to create or update along
     * with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<GallerySecurityPostureVersionInner>> getWithResponseAsync(String resourceGroupName,
        String galleryName, String securityPostureName, String securityPostureVersionName,
        ReplicationStatusTypes expand, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (galleryName == null) {
            return Mono.error(new IllegalArgumentException("Parameter galleryName is required and cannot be null."));
        }
        if (securityPostureName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter securityPostureName is required and cannot be null."));
        }
        if (securityPostureVersionName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter securityPostureVersionName is required and cannot be null."));
        }
        final String apiVersion = "2024-03-03";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName, galleryName,
            securityPostureName, securityPostureVersionName, expand, apiVersion, accept, context);
    }

    /**
     * Retrieves information about a gallery security posture version.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition resides.
     * @param securityPostureName The name of the gallery security posture definition in which the version resides.
     * @param securityPostureVersionName The name of the gallery security posture version to be retrieved.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specifies information about the gallery security posture version that you want to create or update on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<GallerySecurityPostureVersionInner> getAsync(String resourceGroupName, String galleryName,
        String securityPostureName, String securityPostureVersionName) {
        final ReplicationStatusTypes expand = null;
        return getWithResponseAsync(resourceGroupName, galleryName, securityPostureName, securityPostureVersionName,
            expand).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Retrieves information about a gallery security posture version.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition resides.
     * @param securityPostureName The name of the gallery security posture definition in which the version resides.
     * @param securityPostureVersionName The name of the gallery security posture version to be retrieved.
     * @param expand The expand expression to apply on the operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specifies information about the gallery security posture version that you want to create or update along
     * with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<GallerySecurityPostureVersionInner> getWithResponse(String resourceGroupName, String galleryName,
        String securityPostureName, String securityPostureVersionName, ReplicationStatusTypes expand, Context context) {
        return getWithResponseAsync(resourceGroupName, galleryName, securityPostureName, securityPostureVersionName,
            expand, context).block();
    }

    /**
     * Retrieves information about a gallery security posture version.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition resides.
     * @param securityPostureName The name of the gallery security posture definition in which the version resides.
     * @param securityPostureVersionName The name of the gallery security posture version to be retrieved.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specifies information about the gallery security posture version that you want to create or update.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public GallerySecurityPostureVersionInner get(String resourceGroupName, String galleryName,
        String securityPostureName, String securityPostureVersionName) {
        final ReplicationStatusTypes expand = null;
        return getWithResponse(resourceGroupName, galleryName, securityPostureName, securityPostureVersionName, expand,
            Context.NONE).getValue();
    }

    /**
     * Delete a gallery security posture version.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition resides.
     * @param securityPostureName The name of the gallery security posture definition in which the version resides.
     * @param securityPostureVersionName The name of the gallery security posture version to be deleted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName, String galleryName,
        String securityPostureName, String securityPostureVersionName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (galleryName == null) {
            return Mono.error(new IllegalArgumentException("Parameter galleryName is required and cannot be null."));
        }
        if (securityPostureName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter securityPostureName is required and cannot be null."));
        }
        if (securityPostureVersionName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter securityPostureVersionName is required and cannot be null."));
        }
        final String apiVersion = "2024-03-03";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.delete(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
                    galleryName, securityPostureName, securityPostureVersionName, apiVersion, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Delete a gallery security posture version.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition resides.
     * @param securityPostureName The name of the gallery security posture definition in which the version resides.
     * @param securityPostureVersionName The name of the gallery security posture version to be deleted.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName, String galleryName,
        String securityPostureName, String securityPostureVersionName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (galleryName == null) {
            return Mono.error(new IllegalArgumentException("Parameter galleryName is required and cannot be null."));
        }
        if (securityPostureName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter securityPostureName is required and cannot be null."));
        }
        if (securityPostureVersionName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter securityPostureVersionName is required and cannot be null."));
        }
        final String apiVersion = "2024-03-03";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.delete(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            galleryName, securityPostureName, securityPostureVersionName, apiVersion, accept, context);
    }

    /**
     * Delete a gallery security posture version.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition resides.
     * @param securityPostureName The name of the gallery security posture definition in which the version resides.
     * @param securityPostureVersionName The name of the gallery security posture version to be deleted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceGroupName, String galleryName,
        String securityPostureName, String securityPostureVersionName) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = deleteWithResponseAsync(resourceGroupName, galleryName, securityPostureName, securityPostureVersionName);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            this.client.getContext());
    }

    /**
     * Delete a gallery security posture version.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition resides.
     * @param securityPostureName The name of the gallery security posture definition in which the version resides.
     * @param securityPostureVersionName The name of the gallery security posture version to be deleted.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceGroupName, String galleryName,
        String securityPostureName, String securityPostureVersionName, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(resourceGroupName, galleryName,
            securityPostureName, securityPostureVersionName, context);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            context);
    }

    /**
     * Delete a gallery security posture version.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition resides.
     * @param securityPostureName The name of the gallery security posture definition in which the version resides.
     * @param securityPostureVersionName The name of the gallery security posture version to be deleted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String galleryName,
        String securityPostureName, String securityPostureVersionName) {
        return this.beginDeleteAsync(resourceGroupName, galleryName, securityPostureName, securityPostureVersionName)
            .getSyncPoller();
    }

    /**
     * Delete a gallery security posture version.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition resides.
     * @param securityPostureName The name of the gallery security posture definition in which the version resides.
     * @param securityPostureVersionName The name of the gallery security posture version to be deleted.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String galleryName,
        String securityPostureName, String securityPostureVersionName, Context context) {
        return this
            .beginDeleteAsync(resourceGroupName, galleryName, securityPostureName, securityPostureVersionName, context)
            .getSyncPoller();
    }

    /**
     * Delete a gallery security posture version.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition resides.
     * @param securityPostureName The name of the gallery security posture definition in which the version resides.
     * @param securityPostureVersionName The name of the gallery security posture version to be deleted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String galleryName, String securityPostureName,
        String securityPostureVersionName) {
        return beginDeleteAsync(resourceGroupName, galleryName, securityPostureName, securityPostureVersionName).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete a gallery security posture version.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition resides.
     * @param securityPostureName The name of the gallery security posture definition in which the version resides.
     * @param securityPostureVersionName The name of the gallery security posture version to be deleted.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String galleryName, String securityPostureName,
        String securityPostureVersionName, Context context) {
        return beginDeleteAsync(resourceGroupName, galleryName, securityPostureName, securityPostureVersionName,
            context).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete a gallery security posture version.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition resides.
     * @param securityPostureName The name of the gallery security posture definition in which the version resides.
     * @param securityPostureVersionName The name of the gallery security posture version to be deleted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String galleryName, String securityPostureName,
        String securityPostureVersionName) {
        deleteAsync(resourceGroupName, galleryName, securityPostureName, securityPostureVersionName).block();
    }

    /**
     * Delete a gallery security posture version.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition resides.
     * @param securityPostureName The name of the gallery security posture definition in which the version resides.
     * @param securityPostureVersionName The name of the gallery security posture version to be deleted.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String galleryName, String securityPostureName,
        String securityPostureVersionName, Context context) {
        deleteAsync(resourceGroupName, galleryName, securityPostureName, securityPostureVersionName, context).block();
    }
}
