// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.compute.generated.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.compute.generated.fluent.DiskInspectionsClient;
import com.azure.resourcemanager.compute.generated.fluent.models.ComputeDiagnosticBaseInner;
import com.azure.resourcemanager.compute.generated.models.ErrorDetailException;
import com.azure.resourcemanager.compute.generated.models.RunDiskInspectionInput;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in DiskInspectionsClient.
 */
public final class DiskInspectionsClientImpl implements DiskInspectionsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final DiskInspectionsService service;

    /**
     * The service client containing this operation class.
     */
    private final ComputeManagementClientImpl client;

    /**
     * Initializes an instance of DiskInspectionsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    DiskInspectionsClientImpl(ComputeManagementClientImpl client) {
        this.service
            = RestProxy.create(DiskInspectionsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for ComputeManagementClientDiskInspections to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "ComputeManagementCli")
    public interface DiskInspectionsService {
        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/diagnostics/diskInspection/run")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(ErrorDetailException.class)
        Mono<Response<Flux<ByteBuffer>>> create(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId, @PathParam("location") String location,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") RunDiskInspectionInput runDiskInspectionInput,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/diagnostics/diskInspection")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ErrorDetailException.class)
        Mono<Response<ComputeDiagnosticBaseInner>> get(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId, @PathParam("location") String location,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Creates a request for executing disk Inspection.
     * 
     * @param location The location used to execute the diagnostic operation.
     * @param runDiskInspectionInput RunDiskInspection object supplied in the body of the Post run disk inspection
     * operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorDetailException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createWithResponseAsync(String location,
        RunDiskInspectionInput runDiskInspectionInput) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (location == null) {
            return Mono.error(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        if (runDiskInspectionInput == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter runDiskInspectionInput is required and cannot be null."));
        } else {
            runDiskInspectionInput.validate();
        }
        final String apiVersion = "2021-06-01-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.create(this.client.getEndpoint(), this.client.getSubscriptionId(), location,
                apiVersion, runDiskInspectionInput, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Creates a request for executing disk Inspection.
     * 
     * @param location The location used to execute the diagnostic operation.
     * @param runDiskInspectionInput RunDiskInspection object supplied in the body of the Post run disk inspection
     * operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorDetailException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createWithResponseAsync(String location,
        RunDiskInspectionInput runDiskInspectionInput, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (location == null) {
            return Mono.error(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        if (runDiskInspectionInput == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter runDiskInspectionInput is required and cannot be null."));
        } else {
            runDiskInspectionInput.validate();
        }
        final String apiVersion = "2021-06-01-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.create(this.client.getEndpoint(), this.client.getSubscriptionId(), location, apiVersion,
            runDiskInspectionInput, accept, context);
    }

    /**
     * Creates a request for executing disk Inspection.
     * 
     * @param location The location used to execute the diagnostic operation.
     * @param runDiskInspectionInput RunDiskInspection object supplied in the body of the Post run disk inspection
     * operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorDetailException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<String>, String> beginCreateAsync(String location,
        RunDiskInspectionInput runDiskInspectionInput) {
        Mono<Response<Flux<ByteBuffer>>> mono = createWithResponseAsync(location, runDiskInspectionInput);
        return this.client.<String, String>getLroResult(mono, this.client.getHttpPipeline(), String.class, String.class,
            this.client.getContext());
    }

    /**
     * Creates a request for executing disk Inspection.
     * 
     * @param location The location used to execute the diagnostic operation.
     * @param runDiskInspectionInput RunDiskInspection object supplied in the body of the Post run disk inspection
     * operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorDetailException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<String>, String> beginCreateAsync(String location,
        RunDiskInspectionInput runDiskInspectionInput, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = createWithResponseAsync(location, runDiskInspectionInput, context);
        return this.client.<String, String>getLroResult(mono, this.client.getHttpPipeline(), String.class, String.class,
            context);
    }

    /**
     * Creates a request for executing disk Inspection.
     * 
     * @param location The location used to execute the diagnostic operation.
     * @param runDiskInspectionInput RunDiskInspection object supplied in the body of the Post run disk inspection
     * operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorDetailException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<String>, String> beginCreate(String location,
        RunDiskInspectionInput runDiskInspectionInput) {
        return this.beginCreateAsync(location, runDiskInspectionInput).getSyncPoller();
    }

    /**
     * Creates a request for executing disk Inspection.
     * 
     * @param location The location used to execute the diagnostic operation.
     * @param runDiskInspectionInput RunDiskInspection object supplied in the body of the Post run disk inspection
     * operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorDetailException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<String>, String> beginCreate(String location,
        RunDiskInspectionInput runDiskInspectionInput, Context context) {
        return this.beginCreateAsync(location, runDiskInspectionInput, context).getSyncPoller();
    }

    /**
     * Creates a request for executing disk Inspection.
     * 
     * @param location The location used to execute the diagnostic operation.
     * @param runDiskInspectionInput RunDiskInspection object supplied in the body of the Post run disk inspection
     * operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorDetailException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<String> createAsync(String location, RunDiskInspectionInput runDiskInspectionInput) {
        return beginCreateAsync(location, runDiskInspectionInput).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates a request for executing disk Inspection.
     * 
     * @param location The location used to execute the diagnostic operation.
     * @param runDiskInspectionInput RunDiskInspection object supplied in the body of the Post run disk inspection
     * operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorDetailException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<String> createAsync(String location, RunDiskInspectionInput runDiskInspectionInput, Context context) {
        return beginCreateAsync(location, runDiskInspectionInput, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates a request for executing disk Inspection.
     * 
     * @param location The location used to execute the diagnostic operation.
     * @param runDiskInspectionInput RunDiskInspection object supplied in the body of the Post run disk inspection
     * operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorDetailException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public String create(String location, RunDiskInspectionInput runDiskInspectionInput) {
        return createAsync(location, runDiskInspectionInput).block();
    }

    /**
     * Creates a request for executing disk Inspection.
     * 
     * @param location The location used to execute the diagnostic operation.
     * @param runDiskInspectionInput RunDiskInspection object supplied in the body of the Post run disk inspection
     * operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorDetailException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public String create(String location, RunDiskInspectionInput runDiskInspectionInput, Context context) {
        return createAsync(location, runDiskInspectionInput, context).block();
    }

    /**
     * Gets a specific Compute diagnostic for a subscription in a location.
     * 
     * @param location The location used to execute the diagnostic operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorDetailException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specific Compute diagnostic for a subscription in a location along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ComputeDiagnosticBaseInner>> getWithResponseAsync(String location) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (location == null) {
            return Mono.error(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), this.client.getSubscriptionId(), location,
                accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets a specific Compute diagnostic for a subscription in a location.
     * 
     * @param location The location used to execute the diagnostic operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorDetailException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specific Compute diagnostic for a subscription in a location along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ComputeDiagnosticBaseInner>> getWithResponseAsync(String location, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (location == null) {
            return Mono.error(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), this.client.getSubscriptionId(), location, accept, context);
    }

    /**
     * Gets a specific Compute diagnostic for a subscription in a location.
     * 
     * @param location The location used to execute the diagnostic operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorDetailException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specific Compute diagnostic for a subscription in a location on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ComputeDiagnosticBaseInner> getAsync(String location) {
        return getWithResponseAsync(location).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets a specific Compute diagnostic for a subscription in a location.
     * 
     * @param location The location used to execute the diagnostic operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorDetailException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specific Compute diagnostic for a subscription in a location along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ComputeDiagnosticBaseInner> getWithResponse(String location, Context context) {
        return getWithResponseAsync(location, context).block();
    }

    /**
     * Gets a specific Compute diagnostic for a subscription in a location.
     * 
     * @param location The location used to execute the diagnostic operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorDetailException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specific Compute diagnostic for a subscription in a location.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ComputeDiagnosticBaseInner get(String location) {
        return getWithResponse(location, Context.NONE).getValue();
    }
}
