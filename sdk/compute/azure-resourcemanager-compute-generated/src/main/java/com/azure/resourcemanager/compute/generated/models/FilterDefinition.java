// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.compute.generated.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Specifies the principal that can access the path, it's AND logic.
 */
@Fluent
public final class FilterDefinition {
    /*
     * Specifies the user name that can access the resource
     */
    @JsonProperty(value = "userName")
    private String username;

    /*
     * Specifies the user id that can access the resource
     */
    @JsonProperty(value = "userId")
    private String userId;

    /*
     * Specifies the user group name that can access the resource
     */
    @JsonProperty(value = "userGroupName")
    private String userGroupName;

    /*
     * Specifies the user group id that can access the resource
     */
    @JsonProperty(value = "userGroupId")
    private String userGroupId;

    /*
     * Specifies whether only run as elevated process that can access the resource
     */
    @JsonProperty(value = "runAsElevated")
    private String runAsElevated;

    /*
     * Specifies the process name that can access the resource
     */
    @JsonProperty(value = "processName")
    private String processName;

    /*
     * Specifies the process path that can access the resource
     */
    @JsonProperty(value = "commandLine")
    private String commandLine;

    /**
     * Creates an instance of FilterDefinition class.
     */
    public FilterDefinition() {
    }

    /**
     * Get the username property: Specifies the user name that can access the resource.
     * 
     * @return the username value.
     */
    public String username() {
        return this.username;
    }

    /**
     * Set the username property: Specifies the user name that can access the resource.
     * 
     * @param username the username value to set.
     * @return the FilterDefinition object itself.
     */
    public FilterDefinition withUsername(String username) {
        this.username = username;
        return this;
    }

    /**
     * Get the userId property: Specifies the user id that can access the resource.
     * 
     * @return the userId value.
     */
    public String userId() {
        return this.userId;
    }

    /**
     * Set the userId property: Specifies the user id that can access the resource.
     * 
     * @param userId the userId value to set.
     * @return the FilterDefinition object itself.
     */
    public FilterDefinition withUserId(String userId) {
        this.userId = userId;
        return this;
    }

    /**
     * Get the userGroupName property: Specifies the user group name that can access the resource.
     * 
     * @return the userGroupName value.
     */
    public String userGroupName() {
        return this.userGroupName;
    }

    /**
     * Set the userGroupName property: Specifies the user group name that can access the resource.
     * 
     * @param userGroupName the userGroupName value to set.
     * @return the FilterDefinition object itself.
     */
    public FilterDefinition withUserGroupName(String userGroupName) {
        this.userGroupName = userGroupName;
        return this;
    }

    /**
     * Get the userGroupId property: Specifies the user group id that can access the resource.
     * 
     * @return the userGroupId value.
     */
    public String userGroupId() {
        return this.userGroupId;
    }

    /**
     * Set the userGroupId property: Specifies the user group id that can access the resource.
     * 
     * @param userGroupId the userGroupId value to set.
     * @return the FilterDefinition object itself.
     */
    public FilterDefinition withUserGroupId(String userGroupId) {
        this.userGroupId = userGroupId;
        return this;
    }

    /**
     * Get the runAsElevated property: Specifies whether only run as elevated process that can access the resource.
     * 
     * @return the runAsElevated value.
     */
    public String runAsElevated() {
        return this.runAsElevated;
    }

    /**
     * Set the runAsElevated property: Specifies whether only run as elevated process that can access the resource.
     * 
     * @param runAsElevated the runAsElevated value to set.
     * @return the FilterDefinition object itself.
     */
    public FilterDefinition withRunAsElevated(String runAsElevated) {
        this.runAsElevated = runAsElevated;
        return this;
    }

    /**
     * Get the processName property: Specifies the process name that can access the resource.
     * 
     * @return the processName value.
     */
    public String processName() {
        return this.processName;
    }

    /**
     * Set the processName property: Specifies the process name that can access the resource.
     * 
     * @param processName the processName value to set.
     * @return the FilterDefinition object itself.
     */
    public FilterDefinition withProcessName(String processName) {
        this.processName = processName;
        return this;
    }

    /**
     * Get the commandLine property: Specifies the process path that can access the resource.
     * 
     * @return the commandLine value.
     */
    public String commandLine() {
        return this.commandLine;
    }

    /**
     * Set the commandLine property: Specifies the process path that can access the resource.
     * 
     * @param commandLine the commandLine value to set.
     * @return the FilterDefinition object itself.
     */
    public FilterDefinition withCommandLine(String commandLine) {
        this.commandLine = commandLine;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
