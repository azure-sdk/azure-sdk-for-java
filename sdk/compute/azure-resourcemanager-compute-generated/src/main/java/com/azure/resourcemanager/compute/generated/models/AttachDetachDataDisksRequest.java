// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.compute.generated.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Specifies the input for attaching and detaching a list of managed data disks. */
@Fluent
public final class AttachDetachDataDisksRequest {
    /*
     * The list of managed data disks to be attached.
     */
    @JsonProperty(value = "attachDataDisks")
    private List<AttachDataDisk> attachDataDisks;

    /*
     * The list of managed data disks to be detached.
     */
    @JsonProperty(value = "detachDataDisks")
    private List<DetachDataDisk> detachDataDisks;

    /** Creates an instance of AttachDetachDataDisksRequest class. */
    public AttachDetachDataDisksRequest() {
    }

    /**
     * Get the attachDataDisks property: The list of managed data disks to be attached.
     *
     * @return the attachDataDisks value.
     */
    public List<AttachDataDisk> attachDataDisks() {
        return this.attachDataDisks;
    }

    /**
     * Set the attachDataDisks property: The list of managed data disks to be attached.
     *
     * @param attachDataDisks the attachDataDisks value to set.
     * @return the AttachDetachDataDisksRequest object itself.
     */
    public AttachDetachDataDisksRequest withAttachDataDisks(List<AttachDataDisk> attachDataDisks) {
        this.attachDataDisks = attachDataDisks;
        return this;
    }

    /**
     * Get the detachDataDisks property: The list of managed data disks to be detached.
     *
     * @return the detachDataDisks value.
     */
    public List<DetachDataDisk> detachDataDisks() {
        return this.detachDataDisks;
    }

    /**
     * Set the detachDataDisks property: The list of managed data disks to be detached.
     *
     * @param detachDataDisks the detachDataDisks value to set.
     * @return the AttachDetachDataDisksRequest object itself.
     */
    public AttachDetachDataDisksRequest withDetachDataDisks(List<DetachDataDisk> detachDataDisks) {
        this.detachDataDisks = detachDataDisks;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (attachDataDisks() != null) {
            attachDataDisks().forEach(e -> e.validate());
        }
        if (detachDataDisks() != null) {
            detachDataDisks().forEach(e -> e.validate());
        }
    }
}
