// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.compute.generated.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.compute.generated.fluent.VirtualMachineApplicationsClient;
import com.azure.resourcemanager.compute.generated.fluent.models.VMApplicationProxyResourceWithInstanceViewInner;
import com.azure.resourcemanager.compute.generated.fluent.models.VirtualMachineApplicationsProxyResourceListResultInner;
import com.azure.resourcemanager.compute.generated.models.ApplicationInstanceView;
import com.azure.resourcemanager.compute.generated.models.VMApplicationProxyResourceWithInstanceView;
import com.azure.resourcemanager.compute.generated.models.VirtualMachineApplications;
import com.azure.resourcemanager.compute.generated.models.VirtualMachineApplicationsProxyResourceListResult;

public final class VirtualMachineApplicationsImpl implements VirtualMachineApplications {
    private static final ClientLogger LOGGER = new ClientLogger(VirtualMachineApplicationsImpl.class);

    private final VirtualMachineApplicationsClient innerClient;

    private final com.azure.resourcemanager.compute.generated.ComputeManager serviceManager;

    public VirtualMachineApplicationsImpl(
        VirtualMachineApplicationsClient innerClient,
        com.azure.resourcemanager.compute.generated.ComputeManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<VirtualMachineApplicationsProxyResourceListResult> listWithResponse(
        String resourceGroupName, String vmName, Context context) {
        Response<VirtualMachineApplicationsProxyResourceListResultInner> inner =
            this.serviceClient().listWithResponse(resourceGroupName, vmName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new VirtualMachineApplicationsProxyResourceListResultImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public VirtualMachineApplicationsProxyResourceListResult list(String resourceGroupName, String vmName) {
        VirtualMachineApplicationsProxyResourceListResultInner inner =
            this.serviceClient().list(resourceGroupName, vmName);
        if (inner != null) {
            return new VirtualMachineApplicationsProxyResourceListResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<VMApplicationProxyResourceWithInstanceView> getWithResponse(
        String resourceGroupName,
        String vmName,
        String applicationName,
        ApplicationInstanceView expand,
        Context context) {
        Response<VMApplicationProxyResourceWithInstanceViewInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, vmName, applicationName, expand, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new VMApplicationProxyResourceWithInstanceViewImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public VMApplicationProxyResourceWithInstanceView get(
        String resourceGroupName, String vmName, String applicationName) {
        VMApplicationProxyResourceWithInstanceViewInner inner =
            this.serviceClient().get(resourceGroupName, vmName, applicationName);
        if (inner != null) {
            return new VMApplicationProxyResourceWithInstanceViewImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String vmName, String applicationName) {
        this.serviceClient().delete(resourceGroupName, vmName, applicationName);
    }

    public void delete(String resourceGroupName, String vmName, String applicationName, Context context) {
        this.serviceClient().delete(resourceGroupName, vmName, applicationName, context);
    }

    public Response<VMApplicationProxyResourceWithInstanceView> getInstanceViewWithResponse(
        String resourceGroupName, String vmName, String applicationName, Context context) {
        Response<VMApplicationProxyResourceWithInstanceViewInner> inner =
            this.serviceClient().getInstanceViewWithResponse(resourceGroupName, vmName, applicationName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new VMApplicationProxyResourceWithInstanceViewImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public VMApplicationProxyResourceWithInstanceView getInstanceView(
        String resourceGroupName, String vmName, String applicationName) {
        VMApplicationProxyResourceWithInstanceViewInner inner =
            this.serviceClient().getInstanceView(resourceGroupName, vmName, applicationName);
        if (inner != null) {
            return new VMApplicationProxyResourceWithInstanceViewImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public VMApplicationProxyResourceWithInstanceView getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String vmName = Utils.getValueFromIdByName(id, "virtualMachines");
        if (vmName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'virtualMachines'.", id)));
        }
        String applicationName = Utils.getValueFromIdByName(id, "VMApplications");
        if (applicationName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'VMApplications'.", id)));
        }
        ApplicationInstanceView localExpand = null;
        return this.getWithResponse(resourceGroupName, vmName, applicationName, localExpand, Context.NONE).getValue();
    }

    public Response<VMApplicationProxyResourceWithInstanceView> getByIdWithResponse(
        String id, ApplicationInstanceView expand, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String vmName = Utils.getValueFromIdByName(id, "virtualMachines");
        if (vmName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'virtualMachines'.", id)));
        }
        String applicationName = Utils.getValueFromIdByName(id, "VMApplications");
        if (applicationName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'VMApplications'.", id)));
        }
        return this.getWithResponse(resourceGroupName, vmName, applicationName, expand, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String vmName = Utils.getValueFromIdByName(id, "virtualMachines");
        if (vmName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'virtualMachines'.", id)));
        }
        String applicationName = Utils.getValueFromIdByName(id, "VMApplications");
        if (applicationName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'VMApplications'.", id)));
        }
        this.delete(resourceGroupName, vmName, applicationName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String vmName = Utils.getValueFromIdByName(id, "virtualMachines");
        if (vmName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'virtualMachines'.", id)));
        }
        String applicationName = Utils.getValueFromIdByName(id, "VMApplications");
        if (applicationName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'VMApplications'.", id)));
        }
        this.delete(resourceGroupName, vmName, applicationName, context);
    }

    private VirtualMachineApplicationsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.compute.generated.ComputeManager manager() {
        return this.serviceManager;
    }

    public VMApplicationProxyResourceWithInstanceViewImpl define(String name) {
        return new VMApplicationProxyResourceWithInstanceViewImpl(name, this.manager());
    }
}
