// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azureactivedirectory.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.azureactivedirectory.models.AzureResourceBase;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * PrivateLink Policy configuration object.
 */
@Fluent
public final class PrivateLinkPolicyInner extends AzureResourceBase {
    /*
     * Guid of the owner tenant
     */
    private String ownerTenantId;

    /*
     * Flag indicating whether all tenants are allowed
     */
    private Boolean allTenants;

    /*
     * The list of tenantIds.
     */
    private List<String> tenants;

    /*
     * Name of the private link policy resource
     */
    private String resourceName;

    /*
     * Subscription Identifier
     */
    private String subscriptionId;

    /*
     * Name of the resource group
     */
    private String resourceGroup;

    /*
     * Resource tags.
     */
    private Map<String, String> tags;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of PrivateLinkPolicyInner class.
     */
    public PrivateLinkPolicyInner() {
    }

    /**
     * Get the ownerTenantId property: Guid of the owner tenant.
     * 
     * @return the ownerTenantId value.
     */
    public String ownerTenantId() {
        return this.ownerTenantId;
    }

    /**
     * Set the ownerTenantId property: Guid of the owner tenant.
     * 
     * @param ownerTenantId the ownerTenantId value to set.
     * @return the PrivateLinkPolicyInner object itself.
     */
    public PrivateLinkPolicyInner withOwnerTenantId(String ownerTenantId) {
        this.ownerTenantId = ownerTenantId;
        return this;
    }

    /**
     * Get the allTenants property: Flag indicating whether all tenants are allowed.
     * 
     * @return the allTenants value.
     */
    public Boolean allTenants() {
        return this.allTenants;
    }

    /**
     * Set the allTenants property: Flag indicating whether all tenants are allowed.
     * 
     * @param allTenants the allTenants value to set.
     * @return the PrivateLinkPolicyInner object itself.
     */
    public PrivateLinkPolicyInner withAllTenants(Boolean allTenants) {
        this.allTenants = allTenants;
        return this;
    }

    /**
     * Get the tenants property: The list of tenantIds.
     * 
     * @return the tenants value.
     */
    public List<String> tenants() {
        return this.tenants;
    }

    /**
     * Set the tenants property: The list of tenantIds.
     * 
     * @param tenants the tenants value to set.
     * @return the PrivateLinkPolicyInner object itself.
     */
    public PrivateLinkPolicyInner withTenants(List<String> tenants) {
        this.tenants = tenants;
        return this;
    }

    /**
     * Get the resourceName property: Name of the private link policy resource.
     * 
     * @return the resourceName value.
     */
    public String resourceName() {
        return this.resourceName;
    }

    /**
     * Set the resourceName property: Name of the private link policy resource.
     * 
     * @param resourceName the resourceName value to set.
     * @return the PrivateLinkPolicyInner object itself.
     */
    public PrivateLinkPolicyInner withResourceName(String resourceName) {
        this.resourceName = resourceName;
        return this;
    }

    /**
     * Get the subscriptionId property: Subscription Identifier.
     * 
     * @return the subscriptionId value.
     */
    public String subscriptionId() {
        return this.subscriptionId;
    }

    /**
     * Set the subscriptionId property: Subscription Identifier.
     * 
     * @param subscriptionId the subscriptionId value to set.
     * @return the PrivateLinkPolicyInner object itself.
     */
    public PrivateLinkPolicyInner withSubscriptionId(String subscriptionId) {
        this.subscriptionId = subscriptionId;
        return this;
    }

    /**
     * Get the resourceGroup property: Name of the resource group.
     * 
     * @return the resourceGroup value.
     */
    public String resourceGroup() {
        return this.resourceGroup;
    }

    /**
     * Set the resourceGroup property: Name of the resource group.
     * 
     * @param resourceGroup the resourceGroup value to set.
     * @return the PrivateLinkPolicyInner object itself.
     */
    public PrivateLinkPolicyInner withResourceGroup(String resourceGroup) {
        this.resourceGroup = resourceGroup;
        return this;
    }

    /**
     * Get the tags property: Resource tags.
     * 
     * @return the tags value.
     */
    public Map<String, String> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: Resource tags.
     * 
     * @param tags the tags value to set.
     * @return the PrivateLinkPolicyInner object itself.
     */
    public PrivateLinkPolicyInner withTags(Map<String, String> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PrivateLinkPolicyInner withName(String name) {
        super.withName(name);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", name());
        jsonWriter.writeStringField("ownerTenantId", this.ownerTenantId);
        jsonWriter.writeBooleanField("allTenants", this.allTenants);
        jsonWriter.writeArrayField("tenants", this.tenants, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("resourceName", this.resourceName);
        jsonWriter.writeStringField("subscriptionId", this.subscriptionId);
        jsonWriter.writeStringField("resourceGroup", this.resourceGroup);
        jsonWriter.writeMapField("tags", this.tags, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PrivateLinkPolicyInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PrivateLinkPolicyInner if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the PrivateLinkPolicyInner.
     */
    public static PrivateLinkPolicyInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PrivateLinkPolicyInner deserializedPrivateLinkPolicyInner = new PrivateLinkPolicyInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedPrivateLinkPolicyInner.id = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedPrivateLinkPolicyInner.type = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedPrivateLinkPolicyInner.withName(reader.getString());
                } else if ("ownerTenantId".equals(fieldName)) {
                    deserializedPrivateLinkPolicyInner.ownerTenantId = reader.getString();
                } else if ("allTenants".equals(fieldName)) {
                    deserializedPrivateLinkPolicyInner.allTenants = reader.getNullable(JsonReader::getBoolean);
                } else if ("tenants".equals(fieldName)) {
                    List<String> tenants = reader.readArray(reader1 -> reader1.getString());
                    deserializedPrivateLinkPolicyInner.tenants = tenants;
                } else if ("resourceName".equals(fieldName)) {
                    deserializedPrivateLinkPolicyInner.resourceName = reader.getString();
                } else if ("subscriptionId".equals(fieldName)) {
                    deserializedPrivateLinkPolicyInner.subscriptionId = reader.getString();
                } else if ("resourceGroup".equals(fieldName)) {
                    deserializedPrivateLinkPolicyInner.resourceGroup = reader.getString();
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedPrivateLinkPolicyInner.tags = tags;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPrivateLinkPolicyInner;
        });
    }
}
