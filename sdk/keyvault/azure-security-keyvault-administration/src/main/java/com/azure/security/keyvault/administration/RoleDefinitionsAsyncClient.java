// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.security.keyvault.administration;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.FluxUtil;
import com.azure.security.keyvault.administration.implementation.RoleDefinitionsImpl;
import com.azure.security.keyvault.administration.implementation.models.RoleDefinition;
import com.azure.security.keyvault.administration.implementation.models.RoleDefinitionCreateParameters;
import java.util.stream.Collectors;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the asynchronous KeyVaultClient type.
 */
@ServiceClient(builder = KeyVaultClientBuilder.class, isAsync = true)
public final class RoleDefinitionsAsyncClient {
    @Generated
    private final RoleDefinitionsImpl serviceClient;

    /**
     * Initializes an instance of RoleDefinitionsAsyncClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    RoleDefinitionsAsyncClient(RoleDefinitionsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Deletes a custom role definition.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Optional)
     *     name: String (Optional)
     *     type: String(Microsoft.Authorization/roleDefinitions) (Optional)
     *     properties (Optional): {
     *         roleName: String (Optional)
     *         description: String (Optional)
     *         type: String(AKVBuiltInRole/CustomRole) (Optional)
     *         permissions (Optional): [
     *              (Optional){
     *                 actions (Optional): [
     *                     String (Optional)
     *                 ]
     *                 notActions (Optional): [
     *                     String (Optional)
     *                 ]
     *                 dataActions (Optional): [
     *                     String(Microsoft.KeyVault/managedHsm/keys/read/action/Microsoft.KeyVault/managedHsm/keys/write/action/Microsoft.KeyVault/managedHsm/keys/deletedKeys/read/action/Microsoft.KeyVault/managedHsm/keys/deletedKeys/recover/action/Microsoft.KeyVault/managedHsm/keys/backup/action/Microsoft.KeyVault/managedHsm/keys/restore/action/Microsoft.KeyVault/managedHsm/roleAssignments/delete/action/Microsoft.KeyVault/managedHsm/roleAssignments/read/action/Microsoft.KeyVault/managedHsm/roleAssignments/write/action/Microsoft.KeyVault/managedHsm/roleDefinitions/read/action/Microsoft.KeyVault/managedHsm/roleDefinitions/write/action/Microsoft.KeyVault/managedHsm/roleDefinitions/delete/action/Microsoft.KeyVault/managedHsm/keys/encrypt/action/Microsoft.KeyVault/managedHsm/keys/decrypt/action/Microsoft.KeyVault/managedHsm/keys/wrap/action/Microsoft.KeyVault/managedHsm/keys/unwrap/action/Microsoft.KeyVault/managedHsm/keys/sign/action/Microsoft.KeyVault/managedHsm/keys/verify/action/Microsoft.KeyVault/managedHsm/keys/create/Microsoft.KeyVault/managedHsm/keys/delete/Microsoft.KeyVault/managedHsm/keys/export/action/Microsoft.KeyVault/managedHsm/keys/release/action/Microsoft.KeyVault/managedHsm/keys/import/action/Microsoft.KeyVault/managedHsm/keys/deletedKeys/delete/Microsoft.KeyVault/managedHsm/securitydomain/download/action/Microsoft.KeyVault/managedHsm/securitydomain/download/read/Microsoft.KeyVault/managedHsm/securitydomain/upload/action/Microsoft.KeyVault/managedHsm/securitydomain/upload/read/Microsoft.KeyVault/managedHsm/securitydomain/transferkey/read/Microsoft.KeyVault/managedHsm/backup/start/action/Microsoft.KeyVault/managedHsm/restore/start/action/Microsoft.KeyVault/managedHsm/backup/status/action/Microsoft.KeyVault/managedHsm/restore/status/action/Microsoft.KeyVault/managedHsm/rng/action) (Optional)
     *                 ]
     *                 notDataActions (Optional): [
     *                     String(Microsoft.KeyVault/managedHsm/keys/read/action/Microsoft.KeyVault/managedHsm/keys/write/action/Microsoft.KeyVault/managedHsm/keys/deletedKeys/read/action/Microsoft.KeyVault/managedHsm/keys/deletedKeys/recover/action/Microsoft.KeyVault/managedHsm/keys/backup/action/Microsoft.KeyVault/managedHsm/keys/restore/action/Microsoft.KeyVault/managedHsm/roleAssignments/delete/action/Microsoft.KeyVault/managedHsm/roleAssignments/read/action/Microsoft.KeyVault/managedHsm/roleAssignments/write/action/Microsoft.KeyVault/managedHsm/roleDefinitions/read/action/Microsoft.KeyVault/managedHsm/roleDefinitions/write/action/Microsoft.KeyVault/managedHsm/roleDefinitions/delete/action/Microsoft.KeyVault/managedHsm/keys/encrypt/action/Microsoft.KeyVault/managedHsm/keys/decrypt/action/Microsoft.KeyVault/managedHsm/keys/wrap/action/Microsoft.KeyVault/managedHsm/keys/unwrap/action/Microsoft.KeyVault/managedHsm/keys/sign/action/Microsoft.KeyVault/managedHsm/keys/verify/action/Microsoft.KeyVault/managedHsm/keys/create/Microsoft.KeyVault/managedHsm/keys/delete/Microsoft.KeyVault/managedHsm/keys/export/action/Microsoft.KeyVault/managedHsm/keys/release/action/Microsoft.KeyVault/managedHsm/keys/import/action/Microsoft.KeyVault/managedHsm/keys/deletedKeys/delete/Microsoft.KeyVault/managedHsm/securitydomain/download/action/Microsoft.KeyVault/managedHsm/securitydomain/download/read/Microsoft.KeyVault/managedHsm/securitydomain/upload/action/Microsoft.KeyVault/managedHsm/securitydomain/upload/read/Microsoft.KeyVault/managedHsm/securitydomain/transferkey/read/Microsoft.KeyVault/managedHsm/backup/start/action/Microsoft.KeyVault/managedHsm/restore/start/action/Microsoft.KeyVault/managedHsm/backup/status/action/Microsoft.KeyVault/managedHsm/restore/status/action/Microsoft.KeyVault/managedHsm/rng/action) (Optional)
     *                 ]
     *             }
     *         ]
     *         assignableScopes (Optional): [
     *             String(///keys) (Optional)
     *         ]
     *     }
     * }
     * }
     * </pre>
     * 
     * @param scope The scope of the role definition to delete. Managed HSM only supports '/'.
     * @param roleDefinitionName The name (GUID) of the role definition to delete.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return role definition along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> deleteWithResponse(String scope, String roleDefinitionName,
        RequestOptions requestOptions) {
        return this.serviceClient.deleteWithResponseAsync(scope, roleDefinitionName, requestOptions);
    }

    /**
     * Creates or updates a custom role definition.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     properties (Required): {
     *         roleName: String (Optional)
     *         description: String (Optional)
     *         type: String(AKVBuiltInRole/CustomRole) (Optional)
     *         permissions (Optional): [
     *              (Optional){
     *                 actions (Optional): [
     *                     String (Optional)
     *                 ]
     *                 notActions (Optional): [
     *                     String (Optional)
     *                 ]
     *                 dataActions (Optional): [
     *                     String(Microsoft.KeyVault/managedHsm/keys/read/action/Microsoft.KeyVault/managedHsm/keys/write/action/Microsoft.KeyVault/managedHsm/keys/deletedKeys/read/action/Microsoft.KeyVault/managedHsm/keys/deletedKeys/recover/action/Microsoft.KeyVault/managedHsm/keys/backup/action/Microsoft.KeyVault/managedHsm/keys/restore/action/Microsoft.KeyVault/managedHsm/roleAssignments/delete/action/Microsoft.KeyVault/managedHsm/roleAssignments/read/action/Microsoft.KeyVault/managedHsm/roleAssignments/write/action/Microsoft.KeyVault/managedHsm/roleDefinitions/read/action/Microsoft.KeyVault/managedHsm/roleDefinitions/write/action/Microsoft.KeyVault/managedHsm/roleDefinitions/delete/action/Microsoft.KeyVault/managedHsm/keys/encrypt/action/Microsoft.KeyVault/managedHsm/keys/decrypt/action/Microsoft.KeyVault/managedHsm/keys/wrap/action/Microsoft.KeyVault/managedHsm/keys/unwrap/action/Microsoft.KeyVault/managedHsm/keys/sign/action/Microsoft.KeyVault/managedHsm/keys/verify/action/Microsoft.KeyVault/managedHsm/keys/create/Microsoft.KeyVault/managedHsm/keys/delete/Microsoft.KeyVault/managedHsm/keys/export/action/Microsoft.KeyVault/managedHsm/keys/release/action/Microsoft.KeyVault/managedHsm/keys/import/action/Microsoft.KeyVault/managedHsm/keys/deletedKeys/delete/Microsoft.KeyVault/managedHsm/securitydomain/download/action/Microsoft.KeyVault/managedHsm/securitydomain/download/read/Microsoft.KeyVault/managedHsm/securitydomain/upload/action/Microsoft.KeyVault/managedHsm/securitydomain/upload/read/Microsoft.KeyVault/managedHsm/securitydomain/transferkey/read/Microsoft.KeyVault/managedHsm/backup/start/action/Microsoft.KeyVault/managedHsm/restore/start/action/Microsoft.KeyVault/managedHsm/backup/status/action/Microsoft.KeyVault/managedHsm/restore/status/action/Microsoft.KeyVault/managedHsm/rng/action) (Optional)
     *                 ]
     *                 notDataActions (Optional): [
     *                     String(Microsoft.KeyVault/managedHsm/keys/read/action/Microsoft.KeyVault/managedHsm/keys/write/action/Microsoft.KeyVault/managedHsm/keys/deletedKeys/read/action/Microsoft.KeyVault/managedHsm/keys/deletedKeys/recover/action/Microsoft.KeyVault/managedHsm/keys/backup/action/Microsoft.KeyVault/managedHsm/keys/restore/action/Microsoft.KeyVault/managedHsm/roleAssignments/delete/action/Microsoft.KeyVault/managedHsm/roleAssignments/read/action/Microsoft.KeyVault/managedHsm/roleAssignments/write/action/Microsoft.KeyVault/managedHsm/roleDefinitions/read/action/Microsoft.KeyVault/managedHsm/roleDefinitions/write/action/Microsoft.KeyVault/managedHsm/roleDefinitions/delete/action/Microsoft.KeyVault/managedHsm/keys/encrypt/action/Microsoft.KeyVault/managedHsm/keys/decrypt/action/Microsoft.KeyVault/managedHsm/keys/wrap/action/Microsoft.KeyVault/managedHsm/keys/unwrap/action/Microsoft.KeyVault/managedHsm/keys/sign/action/Microsoft.KeyVault/managedHsm/keys/verify/action/Microsoft.KeyVault/managedHsm/keys/create/Microsoft.KeyVault/managedHsm/keys/delete/Microsoft.KeyVault/managedHsm/keys/export/action/Microsoft.KeyVault/managedHsm/keys/release/action/Microsoft.KeyVault/managedHsm/keys/import/action/Microsoft.KeyVault/managedHsm/keys/deletedKeys/delete/Microsoft.KeyVault/managedHsm/securitydomain/download/action/Microsoft.KeyVault/managedHsm/securitydomain/download/read/Microsoft.KeyVault/managedHsm/securitydomain/upload/action/Microsoft.KeyVault/managedHsm/securitydomain/upload/read/Microsoft.KeyVault/managedHsm/securitydomain/transferkey/read/Microsoft.KeyVault/managedHsm/backup/start/action/Microsoft.KeyVault/managedHsm/restore/start/action/Microsoft.KeyVault/managedHsm/backup/status/action/Microsoft.KeyVault/managedHsm/restore/status/action/Microsoft.KeyVault/managedHsm/rng/action) (Optional)
     *                 ]
     *             }
     *         ]
     *         assignableScopes (Optional): [
     *             String(///keys) (Optional)
     *         ]
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Optional)
     *     name: String (Optional)
     *     type: String(Microsoft.Authorization/roleDefinitions) (Optional)
     *     properties (Optional): {
     *         roleName: String (Optional)
     *         description: String (Optional)
     *         type: String(AKVBuiltInRole/CustomRole) (Optional)
     *         permissions (Optional): [
     *              (Optional){
     *                 actions (Optional): [
     *                     String (Optional)
     *                 ]
     *                 notActions (Optional): [
     *                     String (Optional)
     *                 ]
     *                 dataActions (Optional): [
     *                     String(Microsoft.KeyVault/managedHsm/keys/read/action/Microsoft.KeyVault/managedHsm/keys/write/action/Microsoft.KeyVault/managedHsm/keys/deletedKeys/read/action/Microsoft.KeyVault/managedHsm/keys/deletedKeys/recover/action/Microsoft.KeyVault/managedHsm/keys/backup/action/Microsoft.KeyVault/managedHsm/keys/restore/action/Microsoft.KeyVault/managedHsm/roleAssignments/delete/action/Microsoft.KeyVault/managedHsm/roleAssignments/read/action/Microsoft.KeyVault/managedHsm/roleAssignments/write/action/Microsoft.KeyVault/managedHsm/roleDefinitions/read/action/Microsoft.KeyVault/managedHsm/roleDefinitions/write/action/Microsoft.KeyVault/managedHsm/roleDefinitions/delete/action/Microsoft.KeyVault/managedHsm/keys/encrypt/action/Microsoft.KeyVault/managedHsm/keys/decrypt/action/Microsoft.KeyVault/managedHsm/keys/wrap/action/Microsoft.KeyVault/managedHsm/keys/unwrap/action/Microsoft.KeyVault/managedHsm/keys/sign/action/Microsoft.KeyVault/managedHsm/keys/verify/action/Microsoft.KeyVault/managedHsm/keys/create/Microsoft.KeyVault/managedHsm/keys/delete/Microsoft.KeyVault/managedHsm/keys/export/action/Microsoft.KeyVault/managedHsm/keys/release/action/Microsoft.KeyVault/managedHsm/keys/import/action/Microsoft.KeyVault/managedHsm/keys/deletedKeys/delete/Microsoft.KeyVault/managedHsm/securitydomain/download/action/Microsoft.KeyVault/managedHsm/securitydomain/download/read/Microsoft.KeyVault/managedHsm/securitydomain/upload/action/Microsoft.KeyVault/managedHsm/securitydomain/upload/read/Microsoft.KeyVault/managedHsm/securitydomain/transferkey/read/Microsoft.KeyVault/managedHsm/backup/start/action/Microsoft.KeyVault/managedHsm/restore/start/action/Microsoft.KeyVault/managedHsm/backup/status/action/Microsoft.KeyVault/managedHsm/restore/status/action/Microsoft.KeyVault/managedHsm/rng/action) (Optional)
     *                 ]
     *                 notDataActions (Optional): [
     *                     String(Microsoft.KeyVault/managedHsm/keys/read/action/Microsoft.KeyVault/managedHsm/keys/write/action/Microsoft.KeyVault/managedHsm/keys/deletedKeys/read/action/Microsoft.KeyVault/managedHsm/keys/deletedKeys/recover/action/Microsoft.KeyVault/managedHsm/keys/backup/action/Microsoft.KeyVault/managedHsm/keys/restore/action/Microsoft.KeyVault/managedHsm/roleAssignments/delete/action/Microsoft.KeyVault/managedHsm/roleAssignments/read/action/Microsoft.KeyVault/managedHsm/roleAssignments/write/action/Microsoft.KeyVault/managedHsm/roleDefinitions/read/action/Microsoft.KeyVault/managedHsm/roleDefinitions/write/action/Microsoft.KeyVault/managedHsm/roleDefinitions/delete/action/Microsoft.KeyVault/managedHsm/keys/encrypt/action/Microsoft.KeyVault/managedHsm/keys/decrypt/action/Microsoft.KeyVault/managedHsm/keys/wrap/action/Microsoft.KeyVault/managedHsm/keys/unwrap/action/Microsoft.KeyVault/managedHsm/keys/sign/action/Microsoft.KeyVault/managedHsm/keys/verify/action/Microsoft.KeyVault/managedHsm/keys/create/Microsoft.KeyVault/managedHsm/keys/delete/Microsoft.KeyVault/managedHsm/keys/export/action/Microsoft.KeyVault/managedHsm/keys/release/action/Microsoft.KeyVault/managedHsm/keys/import/action/Microsoft.KeyVault/managedHsm/keys/deletedKeys/delete/Microsoft.KeyVault/managedHsm/securitydomain/download/action/Microsoft.KeyVault/managedHsm/securitydomain/download/read/Microsoft.KeyVault/managedHsm/securitydomain/upload/action/Microsoft.KeyVault/managedHsm/securitydomain/upload/read/Microsoft.KeyVault/managedHsm/securitydomain/transferkey/read/Microsoft.KeyVault/managedHsm/backup/start/action/Microsoft.KeyVault/managedHsm/restore/start/action/Microsoft.KeyVault/managedHsm/backup/status/action/Microsoft.KeyVault/managedHsm/restore/status/action/Microsoft.KeyVault/managedHsm/rng/action) (Optional)
     *                 ]
     *             }
     *         ]
     *         assignableScopes (Optional): [
     *             String(///keys) (Optional)
     *         ]
     *     }
     * }
     * }
     * </pre>
     * 
     * @param scope The scope of the role definition to create or update. Managed HSM only supports '/'.
     * @param roleDefinitionName The name of the role definition to create or update. It can be any valid GUID.
     * @param parameters Parameters for the role definition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return role definition along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createOrUpdateWithResponse(String scope, String roleDefinitionName,
        BinaryData parameters, RequestOptions requestOptions) {
        return this.serviceClient.createOrUpdateWithResponseAsync(scope, roleDefinitionName, parameters,
            requestOptions);
    }

    /**
     * Get the specified role definition.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Optional)
     *     name: String (Optional)
     *     type: String(Microsoft.Authorization/roleDefinitions) (Optional)
     *     properties (Optional): {
     *         roleName: String (Optional)
     *         description: String (Optional)
     *         type: String(AKVBuiltInRole/CustomRole) (Optional)
     *         permissions (Optional): [
     *              (Optional){
     *                 actions (Optional): [
     *                     String (Optional)
     *                 ]
     *                 notActions (Optional): [
     *                     String (Optional)
     *                 ]
     *                 dataActions (Optional): [
     *                     String(Microsoft.KeyVault/managedHsm/keys/read/action/Microsoft.KeyVault/managedHsm/keys/write/action/Microsoft.KeyVault/managedHsm/keys/deletedKeys/read/action/Microsoft.KeyVault/managedHsm/keys/deletedKeys/recover/action/Microsoft.KeyVault/managedHsm/keys/backup/action/Microsoft.KeyVault/managedHsm/keys/restore/action/Microsoft.KeyVault/managedHsm/roleAssignments/delete/action/Microsoft.KeyVault/managedHsm/roleAssignments/read/action/Microsoft.KeyVault/managedHsm/roleAssignments/write/action/Microsoft.KeyVault/managedHsm/roleDefinitions/read/action/Microsoft.KeyVault/managedHsm/roleDefinitions/write/action/Microsoft.KeyVault/managedHsm/roleDefinitions/delete/action/Microsoft.KeyVault/managedHsm/keys/encrypt/action/Microsoft.KeyVault/managedHsm/keys/decrypt/action/Microsoft.KeyVault/managedHsm/keys/wrap/action/Microsoft.KeyVault/managedHsm/keys/unwrap/action/Microsoft.KeyVault/managedHsm/keys/sign/action/Microsoft.KeyVault/managedHsm/keys/verify/action/Microsoft.KeyVault/managedHsm/keys/create/Microsoft.KeyVault/managedHsm/keys/delete/Microsoft.KeyVault/managedHsm/keys/export/action/Microsoft.KeyVault/managedHsm/keys/release/action/Microsoft.KeyVault/managedHsm/keys/import/action/Microsoft.KeyVault/managedHsm/keys/deletedKeys/delete/Microsoft.KeyVault/managedHsm/securitydomain/download/action/Microsoft.KeyVault/managedHsm/securitydomain/download/read/Microsoft.KeyVault/managedHsm/securitydomain/upload/action/Microsoft.KeyVault/managedHsm/securitydomain/upload/read/Microsoft.KeyVault/managedHsm/securitydomain/transferkey/read/Microsoft.KeyVault/managedHsm/backup/start/action/Microsoft.KeyVault/managedHsm/restore/start/action/Microsoft.KeyVault/managedHsm/backup/status/action/Microsoft.KeyVault/managedHsm/restore/status/action/Microsoft.KeyVault/managedHsm/rng/action) (Optional)
     *                 ]
     *                 notDataActions (Optional): [
     *                     String(Microsoft.KeyVault/managedHsm/keys/read/action/Microsoft.KeyVault/managedHsm/keys/write/action/Microsoft.KeyVault/managedHsm/keys/deletedKeys/read/action/Microsoft.KeyVault/managedHsm/keys/deletedKeys/recover/action/Microsoft.KeyVault/managedHsm/keys/backup/action/Microsoft.KeyVault/managedHsm/keys/restore/action/Microsoft.KeyVault/managedHsm/roleAssignments/delete/action/Microsoft.KeyVault/managedHsm/roleAssignments/read/action/Microsoft.KeyVault/managedHsm/roleAssignments/write/action/Microsoft.KeyVault/managedHsm/roleDefinitions/read/action/Microsoft.KeyVault/managedHsm/roleDefinitions/write/action/Microsoft.KeyVault/managedHsm/roleDefinitions/delete/action/Microsoft.KeyVault/managedHsm/keys/encrypt/action/Microsoft.KeyVault/managedHsm/keys/decrypt/action/Microsoft.KeyVault/managedHsm/keys/wrap/action/Microsoft.KeyVault/managedHsm/keys/unwrap/action/Microsoft.KeyVault/managedHsm/keys/sign/action/Microsoft.KeyVault/managedHsm/keys/verify/action/Microsoft.KeyVault/managedHsm/keys/create/Microsoft.KeyVault/managedHsm/keys/delete/Microsoft.KeyVault/managedHsm/keys/export/action/Microsoft.KeyVault/managedHsm/keys/release/action/Microsoft.KeyVault/managedHsm/keys/import/action/Microsoft.KeyVault/managedHsm/keys/deletedKeys/delete/Microsoft.KeyVault/managedHsm/securitydomain/download/action/Microsoft.KeyVault/managedHsm/securitydomain/download/read/Microsoft.KeyVault/managedHsm/securitydomain/upload/action/Microsoft.KeyVault/managedHsm/securitydomain/upload/read/Microsoft.KeyVault/managedHsm/securitydomain/transferkey/read/Microsoft.KeyVault/managedHsm/backup/start/action/Microsoft.KeyVault/managedHsm/restore/start/action/Microsoft.KeyVault/managedHsm/backup/status/action/Microsoft.KeyVault/managedHsm/restore/status/action/Microsoft.KeyVault/managedHsm/rng/action) (Optional)
     *                 ]
     *             }
     *         ]
     *         assignableScopes (Optional): [
     *             String(///keys) (Optional)
     *         ]
     *     }
     * }
     * }
     * </pre>
     * 
     * @param scope The scope of the role definition to get. Managed HSM only supports '/'.
     * @param roleDefinitionName The name of the role definition to get.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the specified role definition along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getWithResponse(String scope, String roleDefinitionName,
        RequestOptions requestOptions) {
        return this.serviceClient.getWithResponseAsync(scope, roleDefinitionName, requestOptions);
    }

    /**
     * Get all role definitions that are applicable at scope and above.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>$filter</td><td>String</td><td>No</td><td>The filter to apply on the operation. Use atScopeAndBelow
     * filter to search below the given scope as well.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Optional)
     *     name: String (Optional)
     *     type: String(Microsoft.Authorization/roleDefinitions) (Optional)
     *     properties (Optional): {
     *         roleName: String (Optional)
     *         description: String (Optional)
     *         type: String(AKVBuiltInRole/CustomRole) (Optional)
     *         permissions (Optional): [
     *              (Optional){
     *                 actions (Optional): [
     *                     String (Optional)
     *                 ]
     *                 notActions (Optional): [
     *                     String (Optional)
     *                 ]
     *                 dataActions (Optional): [
     *                     String(Microsoft.KeyVault/managedHsm/keys/read/action/Microsoft.KeyVault/managedHsm/keys/write/action/Microsoft.KeyVault/managedHsm/keys/deletedKeys/read/action/Microsoft.KeyVault/managedHsm/keys/deletedKeys/recover/action/Microsoft.KeyVault/managedHsm/keys/backup/action/Microsoft.KeyVault/managedHsm/keys/restore/action/Microsoft.KeyVault/managedHsm/roleAssignments/delete/action/Microsoft.KeyVault/managedHsm/roleAssignments/read/action/Microsoft.KeyVault/managedHsm/roleAssignments/write/action/Microsoft.KeyVault/managedHsm/roleDefinitions/read/action/Microsoft.KeyVault/managedHsm/roleDefinitions/write/action/Microsoft.KeyVault/managedHsm/roleDefinitions/delete/action/Microsoft.KeyVault/managedHsm/keys/encrypt/action/Microsoft.KeyVault/managedHsm/keys/decrypt/action/Microsoft.KeyVault/managedHsm/keys/wrap/action/Microsoft.KeyVault/managedHsm/keys/unwrap/action/Microsoft.KeyVault/managedHsm/keys/sign/action/Microsoft.KeyVault/managedHsm/keys/verify/action/Microsoft.KeyVault/managedHsm/keys/create/Microsoft.KeyVault/managedHsm/keys/delete/Microsoft.KeyVault/managedHsm/keys/export/action/Microsoft.KeyVault/managedHsm/keys/release/action/Microsoft.KeyVault/managedHsm/keys/import/action/Microsoft.KeyVault/managedHsm/keys/deletedKeys/delete/Microsoft.KeyVault/managedHsm/securitydomain/download/action/Microsoft.KeyVault/managedHsm/securitydomain/download/read/Microsoft.KeyVault/managedHsm/securitydomain/upload/action/Microsoft.KeyVault/managedHsm/securitydomain/upload/read/Microsoft.KeyVault/managedHsm/securitydomain/transferkey/read/Microsoft.KeyVault/managedHsm/backup/start/action/Microsoft.KeyVault/managedHsm/restore/start/action/Microsoft.KeyVault/managedHsm/backup/status/action/Microsoft.KeyVault/managedHsm/restore/status/action/Microsoft.KeyVault/managedHsm/rng/action) (Optional)
     *                 ]
     *                 notDataActions (Optional): [
     *                     String(Microsoft.KeyVault/managedHsm/keys/read/action/Microsoft.KeyVault/managedHsm/keys/write/action/Microsoft.KeyVault/managedHsm/keys/deletedKeys/read/action/Microsoft.KeyVault/managedHsm/keys/deletedKeys/recover/action/Microsoft.KeyVault/managedHsm/keys/backup/action/Microsoft.KeyVault/managedHsm/keys/restore/action/Microsoft.KeyVault/managedHsm/roleAssignments/delete/action/Microsoft.KeyVault/managedHsm/roleAssignments/read/action/Microsoft.KeyVault/managedHsm/roleAssignments/write/action/Microsoft.KeyVault/managedHsm/roleDefinitions/read/action/Microsoft.KeyVault/managedHsm/roleDefinitions/write/action/Microsoft.KeyVault/managedHsm/roleDefinitions/delete/action/Microsoft.KeyVault/managedHsm/keys/encrypt/action/Microsoft.KeyVault/managedHsm/keys/decrypt/action/Microsoft.KeyVault/managedHsm/keys/wrap/action/Microsoft.KeyVault/managedHsm/keys/unwrap/action/Microsoft.KeyVault/managedHsm/keys/sign/action/Microsoft.KeyVault/managedHsm/keys/verify/action/Microsoft.KeyVault/managedHsm/keys/create/Microsoft.KeyVault/managedHsm/keys/delete/Microsoft.KeyVault/managedHsm/keys/export/action/Microsoft.KeyVault/managedHsm/keys/release/action/Microsoft.KeyVault/managedHsm/keys/import/action/Microsoft.KeyVault/managedHsm/keys/deletedKeys/delete/Microsoft.KeyVault/managedHsm/securitydomain/download/action/Microsoft.KeyVault/managedHsm/securitydomain/download/read/Microsoft.KeyVault/managedHsm/securitydomain/upload/action/Microsoft.KeyVault/managedHsm/securitydomain/upload/read/Microsoft.KeyVault/managedHsm/securitydomain/transferkey/read/Microsoft.KeyVault/managedHsm/backup/start/action/Microsoft.KeyVault/managedHsm/restore/start/action/Microsoft.KeyVault/managedHsm/backup/status/action/Microsoft.KeyVault/managedHsm/restore/status/action/Microsoft.KeyVault/managedHsm/rng/action) (Optional)
     *                 ]
     *             }
     *         ]
     *         assignableScopes (Optional): [
     *             String(///keys) (Optional)
     *         ]
     *     }
     * }
     * }
     * </pre>
     * 
     * @param scope The scope of the role definition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return all role definitions that are applicable at scope and above as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> list(String scope, RequestOptions requestOptions) {
        return this.serviceClient.listAsync(scope, requestOptions);
    }

    /**
     * Deletes a custom role definition.
     * 
     * @param scope The scope of the role definition to delete. Managed HSM only supports '/'.
     * @param roleDefinitionName The name (GUID) of the role definition to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return role definition on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RoleDefinition> delete(String scope, String roleDefinitionName) {
        // Generated convenience method for deleteWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return deleteWithResponse(scope, roleDefinitionName, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(RoleDefinition.class));
    }

    /**
     * Creates or updates a custom role definition.
     * 
     * @param scope The scope of the role definition to create or update. Managed HSM only supports '/'.
     * @param roleDefinitionName The name of the role definition to create or update. It can be any valid GUID.
     * @param parameters Parameters for the role definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return role definition on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RoleDefinition> createOrUpdate(String scope, String roleDefinitionName,
        RoleDefinitionCreateParameters parameters) {
        // Generated convenience method for createOrUpdateWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createOrUpdateWithResponse(scope, roleDefinitionName, BinaryData.fromObject(parameters), requestOptions)
            .flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(RoleDefinition.class));
    }

    /**
     * Get the specified role definition.
     * 
     * @param scope The scope of the role definition to get. Managed HSM only supports '/'.
     * @param roleDefinitionName The name of the role definition to get.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specified role definition on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RoleDefinition> get(String scope, String roleDefinitionName) {
        // Generated convenience method for getWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getWithResponse(scope, roleDefinitionName, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(RoleDefinition.class));
    }

    /**
     * Get all role definitions that are applicable at scope and above.
     * 
     * @param scope The scope of the role definition.
     * @param filter The filter to apply on the operation. Use atScopeAndBelow filter to search below the given scope as
     * well.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all role definitions that are applicable at scope and above as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<RoleDefinition> list(String scope, String filter) {
        // Generated convenience method for list
        RequestOptions requestOptions = new RequestOptions();
        if (filter != null) {
            requestOptions.addQueryParam("$filter", filter, false);
        }
        PagedFlux<BinaryData> pagedFluxResponse = list(scope, requestOptions);
        return PagedFlux.create(() -> (continuationTokenParam, pageSizeParam) -> {
            Flux<PagedResponse<BinaryData>> flux = (continuationTokenParam == null)
                ? pagedFluxResponse.byPage().take(1)
                : pagedFluxResponse.byPage(continuationTokenParam).take(1);
            return flux.map(pagedResponse -> new PagedResponseBase<Void, RoleDefinition>(pagedResponse.getRequest(),
                pagedResponse.getStatusCode(), pagedResponse.getHeaders(),
                pagedResponse.getValue()
                    .stream()
                    .map(protocolMethodData -> protocolMethodData.toObject(RoleDefinition.class))
                    .collect(Collectors.toList()),
                pagedResponse.getContinuationToken(), null));
        });
    }

    /**
     * Get all role definitions that are applicable at scope and above.
     * 
     * @param scope The scope of the role definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all role definitions that are applicable at scope and above as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<RoleDefinition> list(String scope) {
        // Generated convenience method for list
        RequestOptions requestOptions = new RequestOptions();
        PagedFlux<BinaryData> pagedFluxResponse = list(scope, requestOptions);
        return PagedFlux.create(() -> (continuationTokenParam, pageSizeParam) -> {
            Flux<PagedResponse<BinaryData>> flux = (continuationTokenParam == null)
                ? pagedFluxResponse.byPage().take(1)
                : pagedFluxResponse.byPage(continuationTokenParam).take(1);
            return flux.map(pagedResponse -> new PagedResponseBase<Void, RoleDefinition>(pagedResponse.getRequest(),
                pagedResponse.getStatusCode(), pagedResponse.getHeaders(),
                pagedResponse.getValue()
                    .stream()
                    .map(protocolMethodData -> protocolMethodData.toObject(RoleDefinition.class))
                    .collect(Collectors.toList()),
                pagedResponse.getContinuationToken(), null));
        });
    }
}
