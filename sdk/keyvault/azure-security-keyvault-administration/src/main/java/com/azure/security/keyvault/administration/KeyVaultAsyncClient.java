// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.security.keyvault.administration;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.security.keyvault.administration.implementation.KeyVaultClientImpl;
import com.azure.security.keyvault.administration.implementation.models.FullBackupOperation;
import com.azure.security.keyvault.administration.implementation.models.PreBackupOperationParameters;
import com.azure.security.keyvault.administration.implementation.models.PreRestoreOperationParameters;
import com.azure.security.keyvault.administration.implementation.models.RestoreOperation;
import com.azure.security.keyvault.administration.implementation.models.RestoreOperationParameters;
import com.azure.security.keyvault.administration.implementation.models.SASTokenParameter;
import com.azure.security.keyvault.administration.implementation.models.SelectiveKeyRestoreOperation;
import com.azure.security.keyvault.administration.implementation.models.SelectiveKeyRestoreOperationParameters;
import com.azure.security.keyvault.administration.implementation.models.Setting;
import com.azure.security.keyvault.administration.implementation.models.SettingsListResult;
import com.azure.security.keyvault.administration.implementation.models.UpdateSettingRequest;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the asynchronous KeyVaultClient type.
 */
@ServiceClient(builder = KeyVaultClientBuilder.class, isAsync = true)
public final class KeyVaultAsyncClient {
    @Generated
    private final KeyVaultClientImpl serviceClient;

    /**
     * Initializes an instance of KeyVaultAsyncClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    KeyVaultAsyncClient(KeyVaultClientImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Returns the status of full backup operation.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     status: String(InProgress/Succeeded/Canceled/Failed) (Optional)
     *     statusDetails: String (Optional)
     *     error (Optional): {
     *         code: String (Optional)
     *         message: String (Optional)
     *         innererror (Optional): (recursive schema, see innererror above)
     *     }
     *     startTime: Long (Optional)
     *     endTime: Long (Optional)
     *     jobId: String (Optional)
     *     azureStorageBlobContainerUri: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param jobId The id returned as part of the backup request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return full backup operation along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> fullBackupStatusWithResponse(String jobId, RequestOptions requestOptions) {
        return this.serviceClient.fullBackupStatusWithResponseAsync(jobId, requestOptions);
    }

    /**
     * Creates a full backup using a user-provided SAS token to an Azure blob storage container.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     storageResourceUri: String (Required)
     *     token: String (Optional)
     *     useManagedIdentity: Boolean (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     status: String(InProgress/Succeeded/Canceled/Failed) (Optional)
     *     statusDetails: String (Optional)
     *     error (Optional): {
     *         code: String (Optional)
     *         message: String (Optional)
     *         innererror (Optional): (recursive schema, see innererror above)
     *     }
     *     startTime: Long (Optional)
     *     endTime: Long (Optional)
     *     jobId: String (Optional)
     *     azureStorageBlobContainerUri: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param azureStorageBlobContainerUri Azure blob shared access signature token pointing to a valid Azure blob
     * container where full backup needs to be stored. This token needs to be valid for at least next 24 hours from the
     * time of making this call.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of full backup operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, BinaryData> beginFullBackup(BinaryData azureStorageBlobContainerUri,
        RequestOptions requestOptions) {
        return this.serviceClient.beginFullBackupAsync(azureStorageBlobContainerUri, requestOptions);
    }

    /**
     * Pre-backup operation for checking whether the customer can perform a full backup operation.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     storageResourceUri: String (Optional)
     *     token: String (Optional)
     *     useManagedIdentity: Boolean (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     status: String(InProgress/Succeeded/Canceled/Failed) (Optional)
     *     statusDetails: String (Optional)
     *     error (Optional): {
     *         code: String (Optional)
     *         message: String (Optional)
     *         innererror (Optional): (recursive schema, see innererror above)
     *     }
     *     startTime: Long (Optional)
     *     endTime: Long (Optional)
     *     jobId: String (Optional)
     *     azureStorageBlobContainerUri: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param preBackupOperationParameters Optional parameters to validate prior to performing a full backup operation.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of full backup operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, BinaryData> beginPreFullBackup(BinaryData preBackupOperationParameters,
        RequestOptions requestOptions) {
        return this.serviceClient.beginPreFullBackupAsync(preBackupOperationParameters, requestOptions);
    }

    /**
     * Returns the status of restore operation.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     status: String(InProgress/Succeeded/Canceled/Failed) (Optional)
     *     statusDetails: String (Optional)
     *     error (Optional): {
     *         code: String (Optional)
     *         message: String (Optional)
     *         innererror (Optional): (recursive schema, see innererror above)
     *     }
     *     jobId: String (Optional)
     *     startTime: Long (Optional)
     *     endTime: Long (Optional)
     * }
     * }
     * </pre>
     * 
     * @param jobId The Job Id returned part of the restore operation.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return restore operation along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> restoreStatusWithResponse(String jobId, RequestOptions requestOptions) {
        return this.serviceClient.restoreStatusWithResponseAsync(jobId, requestOptions);
    }

    /**
     * Pre-restore operation for checking whether the customer can perform a full restore operation.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     sasTokenParameters (Optional): {
     *         storageResourceUri: String (Required)
     *         token: String (Optional)
     *         useManagedIdentity: Boolean (Optional)
     *     }
     *     folderToRestore: String (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     status: String(InProgress/Succeeded/Canceled/Failed) (Optional)
     *     statusDetails: String (Optional)
     *     error (Optional): {
     *         code: String (Optional)
     *         message: String (Optional)
     *         innererror (Optional): (recursive schema, see innererror above)
     *     }
     *     jobId: String (Optional)
     *     startTime: Long (Optional)
     *     endTime: Long (Optional)
     * }
     * }
     * </pre>
     * 
     * @param preRestoreOperationParameters Optional pre restore parameters to validate prior to performing a full
     * restore operation.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of restore operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, BinaryData> beginPreFullRestoreOperation(BinaryData preRestoreOperationParameters,
        RequestOptions requestOptions) {
        return this.serviceClient.beginPreFullRestoreOperationAsync(preRestoreOperationParameters, requestOptions);
    }

    /**
     * Restores all key materials using the SAS token pointing to a previously stored Azure Blob storage backup folder.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     sasTokenParameters (Required): {
     *         storageResourceUri: String (Required)
     *         token: String (Optional)
     *         useManagedIdentity: Boolean (Optional)
     *     }
     *     folderToRestore: String (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     status: String(InProgress/Succeeded/Canceled/Failed) (Optional)
     *     statusDetails: String (Optional)
     *     error (Optional): {
     *         code: String (Optional)
     *         message: String (Optional)
     *         innererror (Optional): (recursive schema, see innererror above)
     *     }
     *     jobId: String (Optional)
     *     startTime: Long (Optional)
     *     endTime: Long (Optional)
     * }
     * }
     * </pre>
     * 
     * @param restoreBlobDetails The Azure blob SAS token pointing to a folder where the previous successful full backup
     * was stored.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of restore operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, BinaryData> beginFullRestoreOperation(BinaryData restoreBlobDetails,
        RequestOptions requestOptions) {
        return this.serviceClient.beginFullRestoreOperationAsync(restoreBlobDetails, requestOptions);
    }

    /**
     * Returns the status of the selective key restore operation.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     status: String(InProgress/Succeeded/Canceled/Failed) (Optional)
     *     statusDetails: String (Optional)
     *     error (Optional): {
     *         code: String (Optional)
     *         message: String (Optional)
     *         innererror (Optional): (recursive schema, see innererror above)
     *     }
     *     jobId: String (Optional)
     *     startTime: Long (Optional)
     *     endTime: Long (Optional)
     * }
     * }
     * </pre>
     * 
     * @param jobId The Job Id returned part of the restore operation.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return selective Key Restore operation along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> selectiveKeyRestoreStatusWithResponse(String jobId,
        RequestOptions requestOptions) {
        return this.serviceClient.selectiveKeyRestoreStatusWithResponseAsync(jobId, requestOptions);
    }

    /**
     * Restores all key versions of a given key using user supplied SAS token pointing to a previously stored Azure Blob
     * storage backup folder.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     sasTokenParameters (Required): {
     *         storageResourceUri: String (Required)
     *         token: String (Optional)
     *         useManagedIdentity: Boolean (Optional)
     *     }
     *     folder: String (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     status: String(InProgress/Succeeded/Canceled/Failed) (Optional)
     *     statusDetails: String (Optional)
     *     error (Optional): {
     *         code: String (Optional)
     *         message: String (Optional)
     *         innererror (Optional): (recursive schema, see innererror above)
     *     }
     *     jobId: String (Optional)
     *     startTime: Long (Optional)
     *     endTime: Long (Optional)
     * }
     * }
     * </pre>
     * 
     * @param keyName The name of the key to be restored from the user supplied backup.
     * @param restoreBlobDetails The Azure blob SAS token pointing to a folder where the previous successful full backup
     * was stored.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of selective Key Restore operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, BinaryData> beginSelectiveKeyRestoreOperation(String keyName,
        BinaryData restoreBlobDetails, RequestOptions requestOptions) {
        return this.serviceClient.beginSelectiveKeyRestoreOperationAsync(keyName, restoreBlobDetails, requestOptions);
    }

    /**
     * Updates key vault account setting, stores it, then returns the setting name and value to the client.
     * 
     * Description of the pool setting to be updated.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     value: String (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     value: String (Required)
     *     type: String(boolean) (Optional)
     * }
     * }
     * </pre>
     * 
     * @param settingName The name of the account setting. Must be a valid settings option.
     * @param parameters The parameters to update an account setting.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a Key Vault account setting along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> updateSettingWithResponse(String settingName, BinaryData parameters,
        RequestOptions requestOptions) {
        return this.serviceClient.updateSettingWithResponseAsync(settingName, parameters, requestOptions);
    }

    /**
     * Get specified account setting object.
     * 
     * Retrieves the setting object of a specified setting name.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     value: String (Required)
     *     type: String(boolean) (Optional)
     * }
     * }
     * </pre>
     * 
     * @param settingName The name of the account setting. Must be a valid settings option.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return specified account setting object.
     * 
     * Retrieves the setting object of a specified setting name along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getSettingWithResponse(String settingName, RequestOptions requestOptions) {
        return this.serviceClient.getSettingWithResponseAsync(settingName, requestOptions);
    }

    /**
     * List account settings.
     * 
     * Retrieves a list of all the available account settings that can be configured.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     settings (Optional): [
     *          (Optional){
     *             name: String (Required)
     *             value: String (Required)
     *             type: String(boolean) (Optional)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the settings list result along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getSettingsWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.getSettingsWithResponseAsync(requestOptions);
    }

    /**
     * Returns the status of full backup operation.
     * 
     * @param jobId The id returned as part of the backup request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return full backup operation on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<FullBackupOperation> fullBackupStatus(String jobId) {
        // Generated convenience method for fullBackupStatusWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return fullBackupStatusWithResponse(jobId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(FullBackupOperation.class));
    }

    /**
     * Creates a full backup using a user-provided SAS token to an Azure blob storage container.
     * 
     * @param azureStorageBlobContainerUri Azure blob shared access signature token pointing to a valid Azure blob
     * container where full backup needs to be stored. This token needs to be valid for at least next 24 hours from the
     * time of making this call.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of full backup operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<FullBackupOperation, FullBackupOperation>
        beginFullBackup(SASTokenParameter azureStorageBlobContainerUri) {
        // Generated convenience method for beginFullBackupWithModel
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.beginFullBackupWithModelAsync(BinaryData.fromObject(azureStorageBlobContainerUri),
            requestOptions);
    }

    /**
     * Pre-backup operation for checking whether the customer can perform a full backup operation.
     * 
     * @param preBackupOperationParameters Optional parameters to validate prior to performing a full backup operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of full backup operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<FullBackupOperation, FullBackupOperation>
        beginPreFullBackup(PreBackupOperationParameters preBackupOperationParameters) {
        // Generated convenience method for beginPreFullBackupWithModel
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.beginPreFullBackupWithModelAsync(BinaryData.fromObject(preBackupOperationParameters),
            requestOptions);
    }

    /**
     * Returns the status of restore operation.
     * 
     * @param jobId The Job Id returned part of the restore operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return restore operation on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RestoreOperation> restoreStatus(String jobId) {
        // Generated convenience method for restoreStatusWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return restoreStatusWithResponse(jobId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(RestoreOperation.class));
    }

    /**
     * Pre-restore operation for checking whether the customer can perform a full restore operation.
     * 
     * @param preRestoreOperationParameters Optional pre restore parameters to validate prior to performing a full
     * restore operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of restore operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<RestoreOperation, RestoreOperation>
        beginPreFullRestoreOperation(PreRestoreOperationParameters preRestoreOperationParameters) {
        // Generated convenience method for beginPreFullRestoreOperationWithModel
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.beginPreFullRestoreOperationWithModelAsync(
            BinaryData.fromObject(preRestoreOperationParameters), requestOptions);
    }

    /**
     * Restores all key materials using the SAS token pointing to a previously stored Azure Blob storage backup folder.
     * 
     * @param restoreBlobDetails The Azure blob SAS token pointing to a folder where the previous successful full backup
     * was stored.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of restore operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<RestoreOperation, RestoreOperation>
        beginFullRestoreOperation(RestoreOperationParameters restoreBlobDetails) {
        // Generated convenience method for beginFullRestoreOperationWithModel
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.beginFullRestoreOperationWithModelAsync(BinaryData.fromObject(restoreBlobDetails),
            requestOptions);
    }

    /**
     * Returns the status of the selective key restore operation.
     * 
     * @param jobId The Job Id returned part of the restore operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return selective Key Restore operation on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SelectiveKeyRestoreOperation> selectiveKeyRestoreStatus(String jobId) {
        // Generated convenience method for selectiveKeyRestoreStatusWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return selectiveKeyRestoreStatusWithResponse(jobId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(SelectiveKeyRestoreOperation.class));
    }

    /**
     * Restores all key versions of a given key using user supplied SAS token pointing to a previously stored Azure Blob
     * storage backup folder.
     * 
     * @param keyName The name of the key to be restored from the user supplied backup.
     * @param restoreBlobDetails The Azure blob SAS token pointing to a folder where the previous successful full backup
     * was stored.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of selective Key Restore operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<SelectiveKeyRestoreOperation, SelectiveKeyRestoreOperation>
        beginSelectiveKeyRestoreOperation(String keyName, SelectiveKeyRestoreOperationParameters restoreBlobDetails) {
        // Generated convenience method for beginSelectiveKeyRestoreOperationWithModel
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.beginSelectiveKeyRestoreOperationWithModelAsync(keyName,
            BinaryData.fromObject(restoreBlobDetails), requestOptions);
    }

    /**
     * Updates key vault account setting, stores it, then returns the setting name and value to the client.
     * 
     * Description of the pool setting to be updated.
     * 
     * @param settingName The name of the account setting. Must be a valid settings option.
     * @param parameters The parameters to update an account setting.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Key Vault account setting on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Setting> updateSetting(String settingName, UpdateSettingRequest parameters) {
        // Generated convenience method for updateSettingWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return updateSettingWithResponse(settingName, BinaryData.fromObject(parameters), requestOptions)
            .flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(Setting.class));
    }

    /**
     * Get specified account setting object.
     * 
     * Retrieves the setting object of a specified setting name.
     * 
     * @param settingName The name of the account setting. Must be a valid settings option.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specified account setting object.
     * 
     * Retrieves the setting object of a specified setting name on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Setting> getSetting(String settingName) {
        // Generated convenience method for getSettingWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getSettingWithResponse(settingName, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(Setting.class));
    }

    /**
     * List account settings.
     * 
     * Retrieves a list of all the available account settings that can be configured.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the settings list result on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SettingsListResult> getSettings() {
        // Generated convenience method for getSettingsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getSettingsWithResponse(requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(SettingsListResult.class));
    }
}
