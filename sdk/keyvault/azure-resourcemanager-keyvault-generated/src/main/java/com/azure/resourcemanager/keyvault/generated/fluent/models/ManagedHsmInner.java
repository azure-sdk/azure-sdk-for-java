// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.keyvault.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.core.management.SystemData;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.keyvault.generated.models.CreateMode;
import com.azure.resourcemanager.keyvault.generated.models.ManagedHsmProvisioningState;
import com.azure.resourcemanager.keyvault.generated.models.ManagedHsmSecurityDomainProperties;
import com.azure.resourcemanager.keyvault.generated.models.MhsmNetworkRuleSet;
import com.azure.resourcemanager.keyvault.generated.models.MhsmPrivateEndpointConnectionItem;
import com.azure.resourcemanager.keyvault.generated.models.PublicNetworkAccess;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import java.util.UUID;

/**
 * Resource information with extended details.
 */
@Fluent
public final class ManagedHsmInner extends Resource {
    /*
     * Properties of the managed HSM
     */
    private ManagedHsmProperties innerProperties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of ManagedHsmInner class.
     */
    public ManagedHsmInner() {
    }

    /**
     * Get the innerProperties property: Properties of the managed HSM.
     * 
     * @return the innerProperties value.
     */
    private ManagedHsmProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ManagedHsmInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ManagedHsmInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the tenantId property: The Azure Active Directory tenant ID that should be used for authenticating requests
     * to the managed HSM pool.
     * 
     * @return the tenantId value.
     */
    public UUID tenantId() {
        return this.innerProperties() == null ? null : this.innerProperties().tenantId();
    }

    /**
     * Set the tenantId property: The Azure Active Directory tenant ID that should be used for authenticating requests
     * to the managed HSM pool.
     * 
     * @param tenantId the tenantId value to set.
     * @return the ManagedHsmInner object itself.
     */
    public ManagedHsmInner withTenantId(UUID tenantId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ManagedHsmProperties();
        }
        this.innerProperties().withTenantId(tenantId);
        return this;
    }

    /**
     * Get the initialAdminObjectIds property: Array of initial administrators object ids for this managed hsm pool.
     * 
     * @return the initialAdminObjectIds value.
     */
    public List<String> initialAdminObjectIds() {
        return this.innerProperties() == null ? null : this.innerProperties().initialAdminObjectIds();
    }

    /**
     * Set the initialAdminObjectIds property: Array of initial administrators object ids for this managed hsm pool.
     * 
     * @param initialAdminObjectIds the initialAdminObjectIds value to set.
     * @return the ManagedHsmInner object itself.
     */
    public ManagedHsmInner withInitialAdminObjectIds(List<String> initialAdminObjectIds) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ManagedHsmProperties();
        }
        this.innerProperties().withInitialAdminObjectIds(initialAdminObjectIds);
        return this;
    }

    /**
     * Get the hsmUri property: The URI of the managed hsm pool for performing operations on keys.
     * 
     * @return the hsmUri value.
     */
    public String hsmUri() {
        return this.innerProperties() == null ? null : this.innerProperties().hsmUri();
    }

    /**
     * Get the enableSoftDelete property: Property to specify whether the 'soft delete' functionality is enabled for
     * this managed HSM pool. Soft delete is enabled by default for all managed HSMs and is immutable.
     * 
     * @return the enableSoftDelete value.
     */
    public Boolean enableSoftDelete() {
        return this.innerProperties() == null ? null : this.innerProperties().enableSoftDelete();
    }

    /**
     * Set the enableSoftDelete property: Property to specify whether the 'soft delete' functionality is enabled for
     * this managed HSM pool. Soft delete is enabled by default for all managed HSMs and is immutable.
     * 
     * @param enableSoftDelete the enableSoftDelete value to set.
     * @return the ManagedHsmInner object itself.
     */
    public ManagedHsmInner withEnableSoftDelete(Boolean enableSoftDelete) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ManagedHsmProperties();
        }
        this.innerProperties().withEnableSoftDelete(enableSoftDelete);
        return this;
    }

    /**
     * Get the softDeleteRetentionInDays property: Soft deleted data retention days. When you delete an HSM or a key, it
     * will remain recoverable for the configured retention period or for a default period of 90 days. It accepts values
     * between 7 and 90.
     * 
     * @return the softDeleteRetentionInDays value.
     */
    public Integer softDeleteRetentionInDays() {
        return this.innerProperties() == null ? null : this.innerProperties().softDeleteRetentionInDays();
    }

    /**
     * Set the softDeleteRetentionInDays property: Soft deleted data retention days. When you delete an HSM or a key, it
     * will remain recoverable for the configured retention period or for a default period of 90 days. It accepts values
     * between 7 and 90.
     * 
     * @param softDeleteRetentionInDays the softDeleteRetentionInDays value to set.
     * @return the ManagedHsmInner object itself.
     */
    public ManagedHsmInner withSoftDeleteRetentionInDays(Integer softDeleteRetentionInDays) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ManagedHsmProperties();
        }
        this.innerProperties().withSoftDeleteRetentionInDays(softDeleteRetentionInDays);
        return this;
    }

    /**
     * Get the enablePurgeProtection property: Property specifying whether protection against purge is enabled for this
     * managed HSM pool. Setting this property to true activates protection against purge for this managed HSM pool and
     * its content - only the Managed HSM service may initiate a hard, irrecoverable deletion. Enabling this
     * functionality is irreversible.
     * 
     * @return the enablePurgeProtection value.
     */
    public Boolean enablePurgeProtection() {
        return this.innerProperties() == null ? null : this.innerProperties().enablePurgeProtection();
    }

    /**
     * Set the enablePurgeProtection property: Property specifying whether protection against purge is enabled for this
     * managed HSM pool. Setting this property to true activates protection against purge for this managed HSM pool and
     * its content - only the Managed HSM service may initiate a hard, irrecoverable deletion. Enabling this
     * functionality is irreversible.
     * 
     * @param enablePurgeProtection the enablePurgeProtection value to set.
     * @return the ManagedHsmInner object itself.
     */
    public ManagedHsmInner withEnablePurgeProtection(Boolean enablePurgeProtection) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ManagedHsmProperties();
        }
        this.innerProperties().withEnablePurgeProtection(enablePurgeProtection);
        return this;
    }

    /**
     * Get the createMode property: The create mode to indicate whether the resource is being created or is being
     * recovered from a deleted resource.
     * 
     * @return the createMode value.
     */
    public CreateMode createMode() {
        return this.innerProperties() == null ? null : this.innerProperties().createMode();
    }

    /**
     * Set the createMode property: The create mode to indicate whether the resource is being created or is being
     * recovered from a deleted resource.
     * 
     * @param createMode the createMode value to set.
     * @return the ManagedHsmInner object itself.
     */
    public ManagedHsmInner withCreateMode(CreateMode createMode) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ManagedHsmProperties();
        }
        this.innerProperties().withCreateMode(createMode);
        return this;
    }

    /**
     * Get the statusMessage property: Resource Status Message.
     * 
     * @return the statusMessage value.
     */
    public String statusMessage() {
        return this.innerProperties() == null ? null : this.innerProperties().statusMessage();
    }

    /**
     * Get the provisioningState property: Provisioning state.
     * 
     * @return the provisioningState value.
     */
    public ManagedHsmProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the networkAcls property: Rules governing the accessibility of the key vault from specific network locations.
     * 
     * @return the networkAcls value.
     */
    public MhsmNetworkRuleSet networkAcls() {
        return this.innerProperties() == null ? null : this.innerProperties().networkAcls();
    }

    /**
     * Set the networkAcls property: Rules governing the accessibility of the key vault from specific network locations.
     * 
     * @param networkAcls the networkAcls value to set.
     * @return the ManagedHsmInner object itself.
     */
    public ManagedHsmInner withNetworkAcls(MhsmNetworkRuleSet networkAcls) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ManagedHsmProperties();
        }
        this.innerProperties().withNetworkAcls(networkAcls);
        return this;
    }

    /**
     * Get the regions property: List of all regions associated with the managed hsm pool.
     * 
     * @return the regions value.
     */
    public List<MhsmGeoReplicatedRegionInner> regions() {
        return this.innerProperties() == null ? null : this.innerProperties().regions();
    }

    /**
     * Set the regions property: List of all regions associated with the managed hsm pool.
     * 
     * @param regions the regions value to set.
     * @return the ManagedHsmInner object itself.
     */
    public ManagedHsmInner withRegions(List<MhsmGeoReplicatedRegionInner> regions) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ManagedHsmProperties();
        }
        this.innerProperties().withRegions(regions);
        return this;
    }

    /**
     * Get the privateEndpointConnections property: List of private endpoint connections associated with the managed hsm
     * pool.
     * 
     * @return the privateEndpointConnections value.
     */
    public List<MhsmPrivateEndpointConnectionItem> privateEndpointConnections() {
        return this.innerProperties() == null ? null : this.innerProperties().privateEndpointConnections();
    }

    /**
     * Get the publicNetworkAccess property: Control permission to the managed HSM from public networks.
     * 
     * @return the publicNetworkAccess value.
     */
    public PublicNetworkAccess publicNetworkAccess() {
        return this.innerProperties() == null ? null : this.innerProperties().publicNetworkAccess();
    }

    /**
     * Set the publicNetworkAccess property: Control permission to the managed HSM from public networks.
     * 
     * @param publicNetworkAccess the publicNetworkAccess value to set.
     * @return the ManagedHsmInner object itself.
     */
    public ManagedHsmInner withPublicNetworkAccess(PublicNetworkAccess publicNetworkAccess) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ManagedHsmProperties();
        }
        this.innerProperties().withPublicNetworkAccess(publicNetworkAccess);
        return this;
    }

    /**
     * Get the scheduledPurgeDate property: The scheduled purge date in UTC.
     * 
     * @return the scheduledPurgeDate value.
     */
    public OffsetDateTime scheduledPurgeDate() {
        return this.innerProperties() == null ? null : this.innerProperties().scheduledPurgeDate();
    }

    /**
     * Get the securityDomainProperties property: Managed HSM security domain properties.
     * 
     * @return the securityDomainProperties value.
     */
    public ManagedHsmSecurityDomainProperties securityDomainProperties() {
        return this.innerProperties() == null ? null : this.innerProperties().securityDomainProperties();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("location", location());
        jsonWriter.writeMapField("tags", tags(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ManagedHsmInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ManagedHsmInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ManagedHsmInner.
     */
    public static ManagedHsmInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ManagedHsmInner deserializedManagedHsmInner = new ManagedHsmInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedManagedHsmInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedManagedHsmInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedManagedHsmInner.type = reader.getString();
                } else if ("location".equals(fieldName)) {
                    deserializedManagedHsmInner.withLocation(reader.getString());
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedManagedHsmInner.withTags(tags);
                } else if ("properties".equals(fieldName)) {
                    deserializedManagedHsmInner.innerProperties = ManagedHsmProperties.fromJson(reader);
                } else if ("systemData".equals(fieldName)) {
                    deserializedManagedHsmInner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedManagedHsmInner;
        });
    }
}
