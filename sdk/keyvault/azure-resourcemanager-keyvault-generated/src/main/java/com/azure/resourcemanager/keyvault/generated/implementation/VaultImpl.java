// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.keyvault.generated.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.keyvault.generated.fluent.models.VaultInner;
import com.azure.resourcemanager.keyvault.generated.models.AccessPolicyEntry;
import com.azure.resourcemanager.keyvault.generated.models.CreateMode;
import com.azure.resourcemanager.keyvault.generated.models.NetworkRuleSet;
import com.azure.resourcemanager.keyvault.generated.models.PrivateEndpointConnectionItem;
import com.azure.resourcemanager.keyvault.generated.models.Sku;
import com.azure.resourcemanager.keyvault.generated.models.Vault;
import com.azure.resourcemanager.keyvault.generated.models.VaultPatchParameters;
import com.azure.resourcemanager.keyvault.generated.models.VaultPatchProperties;
import com.azure.resourcemanager.keyvault.generated.models.VaultProvisioningState;
import java.util.Collections;
import java.util.List;
import java.util.Map;

public final class VaultImpl implements Vault, Vault.Definition, Vault.Update {
    private VaultInner innerObject;

    private final com.azure.resourcemanager.keyvault.generated.KeyVaultManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public String tenantId() {
        return this.innerModel().tenantId();
    }

    public Sku sku() {
        return this.innerModel().sku();
    }

    public List<AccessPolicyEntry> accessPolicies() {
        List<AccessPolicyEntry> inner = this.innerModel().accessPolicies();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public String vaultUri() {
        return this.innerModel().vaultUri();
    }

    public String hsmPoolResourceId() {
        return this.innerModel().hsmPoolResourceId();
    }

    public Boolean enabledForDeployment() {
        return this.innerModel().enabledForDeployment();
    }

    public Boolean enabledForDiskEncryption() {
        return this.innerModel().enabledForDiskEncryption();
    }

    public Boolean enabledForTemplateDeployment() {
        return this.innerModel().enabledForTemplateDeployment();
    }

    public Boolean enableSoftDelete() {
        return this.innerModel().enableSoftDelete();
    }

    public Integer softDeleteRetentionInDays() {
        return this.innerModel().softDeleteRetentionInDays();
    }

    public Boolean enableRbacAuthorization() {
        return this.innerModel().enableRbacAuthorization();
    }

    public CreateMode createMode() {
        return this.innerModel().createMode();
    }

    public Boolean enablePurgeProtection() {
        return this.innerModel().enablePurgeProtection();
    }

    public NetworkRuleSet networkAcls() {
        return this.innerModel().networkAcls();
    }

    public VaultProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public List<PrivateEndpointConnectionItem> privateEndpointConnections() {
        List<PrivateEndpointConnectionItem> inner = this.innerModel().privateEndpointConnections();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public String publicNetworkAccess() {
        return this.innerModel().publicNetworkAccess();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public VaultInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.keyvault.generated.KeyVaultManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String vaultName;

    private VaultPatchParameters updateParameters;

    public VaultImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public Vault create() {
        this.innerObject = serviceManager.serviceClient()
            .getVaults()
            .createOrUpdate(resourceGroupName, vaultName, this.innerModel(), Context.NONE);
        return this;
    }

    public Vault create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getVaults()
            .createOrUpdate(resourceGroupName, vaultName, this.innerModel(), context);
        return this;
    }

    VaultImpl(String name, com.azure.resourcemanager.keyvault.generated.KeyVaultManager serviceManager) {
        this.innerObject = new VaultInner();
        this.serviceManager = serviceManager;
        this.vaultName = name;
    }

    public VaultImpl update() {
        this.updateParameters = new VaultPatchParameters();
        return this;
    }

    public Vault apply() {
        this.innerObject = serviceManager.serviceClient()
            .getVaults()
            .updateWithResponse(resourceGroupName, vaultName, updateParameters, Context.NONE)
            .getValue();
        return this;
    }

    public Vault apply(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getVaults()
            .updateWithResponse(resourceGroupName, vaultName, updateParameters, context)
            .getValue();
        return this;
    }

    VaultImpl(VaultInner innerObject, com.azure.resourcemanager.keyvault.generated.KeyVaultManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.vaultName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "vaults");
    }

    public Vault refresh() {
        this.innerObject = serviceManager.serviceClient()
            .getVaults()
            .getByResourceGroupWithResponse(resourceGroupName, vaultName, Context.NONE)
            .getValue();
        return this;
    }

    public Vault refresh(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getVaults()
            .getByResourceGroupWithResponse(resourceGroupName, vaultName, context)
            .getValue();
        return this;
    }

    public VaultImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public VaultImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public VaultImpl withTenantId(String tenantId) {
        this.innerModel().withTenantId(tenantId);
        return this;
    }

    public VaultImpl withSku(Sku sku) {
        this.innerModel().withSku(sku);
        return this;
    }

    public VaultImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateParameters.withTags(tags);
            return this;
        }
    }

    public VaultImpl withAccessPolicies(List<AccessPolicyEntry> accessPolicies) {
        this.innerModel().withAccessPolicies(accessPolicies);
        return this;
    }

    public VaultImpl withVaultUri(String vaultUri) {
        this.innerModel().withVaultUri(vaultUri);
        return this;
    }

    public VaultImpl withEnabledForDeployment(Boolean enabledForDeployment) {
        this.innerModel().withEnabledForDeployment(enabledForDeployment);
        return this;
    }

    public VaultImpl withEnabledForDiskEncryption(Boolean enabledForDiskEncryption) {
        this.innerModel().withEnabledForDiskEncryption(enabledForDiskEncryption);
        return this;
    }

    public VaultImpl withEnabledForTemplateDeployment(Boolean enabledForTemplateDeployment) {
        this.innerModel().withEnabledForTemplateDeployment(enabledForTemplateDeployment);
        return this;
    }

    public VaultImpl withEnableSoftDelete(Boolean enableSoftDelete) {
        this.innerModel().withEnableSoftDelete(enableSoftDelete);
        return this;
    }

    public VaultImpl withSoftDeleteRetentionInDays(Integer softDeleteRetentionInDays) {
        this.innerModel().withSoftDeleteRetentionInDays(softDeleteRetentionInDays);
        return this;
    }

    public VaultImpl withEnableRbacAuthorization(Boolean enableRbacAuthorization) {
        this.innerModel().withEnableRbacAuthorization(enableRbacAuthorization);
        return this;
    }

    public VaultImpl withCreateMode(CreateMode createMode) {
        this.innerModel().withCreateMode(createMode);
        return this;
    }

    public VaultImpl withEnablePurgeProtection(Boolean enablePurgeProtection) {
        this.innerModel().withEnablePurgeProtection(enablePurgeProtection);
        return this;
    }

    public VaultImpl withNetworkAcls(NetworkRuleSet networkAcls) {
        this.innerModel().withNetworkAcls(networkAcls);
        return this;
    }

    public VaultImpl withProvisioningState(VaultProvisioningState provisioningState) {
        this.innerModel().withProvisioningState(provisioningState);
        return this;
    }

    public VaultImpl withPublicNetworkAccess(String publicNetworkAccess) {
        this.innerModel().withPublicNetworkAccess(publicNetworkAccess);
        return this;
    }

    public VaultImpl withProperties(VaultPatchProperties properties) {
        this.updateParameters.withProperties(properties);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
