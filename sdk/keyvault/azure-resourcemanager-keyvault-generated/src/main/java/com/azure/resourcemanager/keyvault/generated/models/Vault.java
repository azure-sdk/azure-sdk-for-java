// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.keyvault.generated.models;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.keyvault.generated.fluent.models.VaultInner;
import java.util.List;
import java.util.Map;
import java.util.UUID;

/**
 * An immutable client-side representation of Vault.
 */
public interface Vault {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     * 
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     * 
     * @return the type value.
     */
    String type();

    /**
     * Gets the location property: The geo-location where the resource lives.
     * 
     * @return the location value.
     */
    String location();

    /**
     * Gets the tags property: Resource tags.
     * 
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * Gets the tenantId property: The Azure Active Directory tenant ID that should be used for authenticating requests
     * to the key vault.
     * 
     * @return the tenantId value.
     */
    UUID tenantId();

    /**
     * Gets the sku property: SKU details.
     * 
     * @return the sku value.
     */
    Sku sku();

    /**
     * Gets the accessPolicies property: An array of 0 to 1024 identities that have access to the key vault. All
     * identities in the array must use the same tenant ID as the key vault's tenant ID. When `createMode` is set to
     * `recover`, access policies are not required. Otherwise, access policies are required.
     * 
     * @return the accessPolicies value.
     */
    List<AccessPolicyEntry> accessPolicies();

    /**
     * Gets the vaultUri property: The URI of the vault for performing operations on keys and secrets.
     * 
     * @return the vaultUri value.
     */
    String vaultUri();

    /**
     * Gets the hsmPoolResourceId property: The resource id of HSM Pool.
     * 
     * @return the hsmPoolResourceId value.
     */
    String hsmPoolResourceId();

    /**
     * Gets the enabledForDeployment property: Property to specify whether Azure Virtual Machines are permitted to
     * retrieve certificates stored as secrets from the key vault.
     * 
     * @return the enabledForDeployment value.
     */
    Boolean enabledForDeployment();

    /**
     * Gets the enabledForDiskEncryption property: Property to specify whether Azure Disk Encryption is permitted to
     * retrieve secrets from the vault and unwrap keys.
     * 
     * @return the enabledForDiskEncryption value.
     */
    Boolean enabledForDiskEncryption();

    /**
     * Gets the enabledForTemplateDeployment property: Property to specify whether Azure Resource Manager is permitted
     * to retrieve secrets from the key vault.
     * 
     * @return the enabledForTemplateDeployment value.
     */
    Boolean enabledForTemplateDeployment();

    /**
     * Gets the enableSoftDelete property: Property to specify whether the 'soft delete' functionality is enabled for
     * this key vault. If it's not set to any value(true or false) when creating new key vault, it will be set to true
     * by default. Once set to true, it cannot be reverted to false.
     * 
     * @return the enableSoftDelete value.
     */
    Boolean enableSoftDelete();

    /**
     * Gets the softDeleteRetentionInDays property: softDelete data retention days. It accepts &gt;=7 and &lt;=90.
     * 
     * @return the softDeleteRetentionInDays value.
     */
    Integer softDeleteRetentionInDays();

    /**
     * Gets the enableRbacAuthorization property: Property that controls how data actions are authorized. When true, the
     * key vault will use Role Based Access Control (RBAC) for authorization of data actions, and the access policies
     * specified in vault properties will be ignored. When false, the key vault will use the access policies specified
     * in vault properties, and any policy stored on Azure Resource Manager will be ignored. If null or not specified,
     * the vault is created with the default value of false. Note that management actions are always authorized with
     * RBAC.
     * 
     * @return the enableRbacAuthorization value.
     */
    Boolean enableRbacAuthorization();

    /**
     * Gets the createMode property: The vault's create mode to indicate whether the vault need to be recovered or not.
     * 
     * @return the createMode value.
     */
    KeyVaultCreateMode createMode();

    /**
     * Gets the enablePurgeProtection property: Property specifying whether protection against purge is enabled for this
     * vault. Setting this property to true activates protection against purge for this vault and its content - only the
     * Key Vault service may initiate a hard, irrecoverable deletion. The setting is effective only if soft delete is
     * also enabled. Enabling this functionality is irreversible - that is, the property does not accept false as its
     * value.
     * 
     * @return the enablePurgeProtection value.
     */
    Boolean enablePurgeProtection();

    /**
     * Gets the networkAcls property: Rules governing the accessibility of the key vault from specific network
     * locations.
     * 
     * @return the networkAcls value.
     */
    NetworkRuleSet networkAcls();

    /**
     * Gets the provisioningState property: Provisioning state of the vault.
     * 
     * @return the provisioningState value.
     */
    KeyVaultProvisioningState provisioningState();

    /**
     * Gets the privateEndpointConnections property: List of private endpoint connections associated with the key vault.
     * 
     * @return the privateEndpointConnections value.
     */
    List<PrivateEndpointConnectionItem> privateEndpointConnections();

    /**
     * Gets the publicNetworkAccess property: Property to specify whether the vault will accept traffic from public
     * internet. If set to 'disabled' all traffic except private endpoint traffic and that that originates from trusted
     * services will be blocked. This will override the set firewall rules, meaning that even if the firewall rules are
     * present we will not honor the rules.
     * 
     * @return the publicNetworkAccess value.
     */
    String publicNetworkAccess();

    /**
     * Gets the region of the resource.
     * 
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     * 
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the name of the resource group.
     * 
     * @return the name of the resource group.
     */
    String resourceGroupName();

    /**
     * Gets the inner com.azure.resourcemanager.keyvault.generated.fluent.models.VaultInner object.
     * 
     * @return the inner object.
     */
    VaultInner innerModel();

    /**
     * The entirety of the Vault definition.
     */
    interface Definition
        extends DefinitionStages.Blank, DefinitionStages.WithLocation, DefinitionStages.WithResourceGroup,
        DefinitionStages.WithTenantId, DefinitionStages.WithSku, DefinitionStages.WithCreate {
    }

    /**
     * The Vault definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of the Vault definition.
         */
        interface Blank extends WithLocation {
        }

        /**
         * The stage of the Vault definition allowing to specify location.
         */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             * 
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(Region location);

            /**
             * Specifies the region for the resource.
             * 
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(String location);
        }

        /**
         * The stage of the Vault definition allowing to specify parent resource.
         */
        interface WithResourceGroup {
            /**
             * Specifies resourceGroupName.
             * 
             * @param resourceGroupName The name of the resource group. The name is case insensitive.
             * @return the next definition stage.
             */
            WithTenantId withExistingResourceGroup(String resourceGroupName);
        }

        /**
         * The stage of the Vault definition allowing to specify tenantId.
         */
        interface WithTenantId {
            /**
             * Specifies the tenantId property: The Azure Active Directory tenant ID that should be used for
             * authenticating requests to the key vault..
             * 
             * @param tenantId The Azure Active Directory tenant ID that should be used for authenticating requests to
             * the key vault.
             * @return the next definition stage.
             */
            WithSku withTenantId(UUID tenantId);
        }

        /**
         * The stage of the Vault definition allowing to specify sku.
         */
        interface WithSku {
            /**
             * Specifies the sku property: SKU details.
             * 
             * @param sku SKU details.
             * @return the next definition stage.
             */
            WithCreate withSku(Sku sku);
        }

        /**
         * The stage of the Vault definition which contains all the minimum required properties for the resource to be
         * created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate extends DefinitionStages.WithTags, DefinitionStages.WithAccessPolicies,
            DefinitionStages.WithVaultUri, DefinitionStages.WithEnabledForDeployment,
            DefinitionStages.WithEnabledForDiskEncryption, DefinitionStages.WithEnabledForTemplateDeployment,
            DefinitionStages.WithEnableSoftDelete, DefinitionStages.WithSoftDeleteRetentionInDays,
            DefinitionStages.WithEnableRbacAuthorization, DefinitionStages.WithCreateMode,
            DefinitionStages.WithEnablePurgeProtection, DefinitionStages.WithNetworkAcls,
            DefinitionStages.WithProvisioningState, DefinitionStages.WithPublicNetworkAccess {
            /**
             * Executes the create request.
             * 
             * @return the created resource.
             */
            Vault create();

            /**
             * Executes the create request.
             * 
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            Vault create(Context context);
        }

        /**
         * The stage of the Vault definition allowing to specify tags.
         */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             * 
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }

        /**
         * The stage of the Vault definition allowing to specify accessPolicies.
         */
        interface WithAccessPolicies {
            /**
             * Specifies the accessPolicies property: An array of 0 to 1024 identities that have access to the key
             * vault. All identities in the array must use the same tenant ID as the key vault's tenant ID. When
             * `createMode` is set to `recover`, access policies are not required. Otherwise, access policies are
             * required..
             * 
             * @param accessPolicies An array of 0 to 1024 identities that have access to the key vault. All identities
             * in the array must use the same tenant ID as the key vault's tenant ID. When `createMode` is set to
             * `recover`, access policies are not required. Otherwise, access policies are required.
             * @return the next definition stage.
             */
            WithCreate withAccessPolicies(List<AccessPolicyEntry> accessPolicies);
        }

        /**
         * The stage of the Vault definition allowing to specify vaultUri.
         */
        interface WithVaultUri {
            /**
             * Specifies the vaultUri property: The URI of the vault for performing operations on keys and secrets..
             * 
             * @param vaultUri The URI of the vault for performing operations on keys and secrets.
             * @return the next definition stage.
             */
            WithCreate withVaultUri(String vaultUri);
        }

        /**
         * The stage of the Vault definition allowing to specify enabledForDeployment.
         */
        interface WithEnabledForDeployment {
            /**
             * Specifies the enabledForDeployment property: Property to specify whether Azure Virtual Machines are
             * permitted to retrieve certificates stored as secrets from the key vault..
             * 
             * @param enabledForDeployment Property to specify whether Azure Virtual Machines are permitted to retrieve
             * certificates stored as secrets from the key vault.
             * @return the next definition stage.
             */
            WithCreate withEnabledForDeployment(Boolean enabledForDeployment);
        }

        /**
         * The stage of the Vault definition allowing to specify enabledForDiskEncryption.
         */
        interface WithEnabledForDiskEncryption {
            /**
             * Specifies the enabledForDiskEncryption property: Property to specify whether Azure Disk Encryption is
             * permitted to retrieve secrets from the vault and unwrap keys..
             * 
             * @param enabledForDiskEncryption Property to specify whether Azure Disk Encryption is permitted to
             * retrieve secrets from the vault and unwrap keys.
             * @return the next definition stage.
             */
            WithCreate withEnabledForDiskEncryption(Boolean enabledForDiskEncryption);
        }

        /**
         * The stage of the Vault definition allowing to specify enabledForTemplateDeployment.
         */
        interface WithEnabledForTemplateDeployment {
            /**
             * Specifies the enabledForTemplateDeployment property: Property to specify whether Azure Resource Manager
             * is permitted to retrieve secrets from the key vault..
             * 
             * @param enabledForTemplateDeployment Property to specify whether Azure Resource Manager is permitted to
             * retrieve secrets from the key vault.
             * @return the next definition stage.
             */
            WithCreate withEnabledForTemplateDeployment(Boolean enabledForTemplateDeployment);
        }

        /**
         * The stage of the Vault definition allowing to specify enableSoftDelete.
         */
        interface WithEnableSoftDelete {
            /**
             * Specifies the enableSoftDelete property: Property to specify whether the 'soft delete' functionality is
             * enabled for this key vault. If it's not set to any value(true or false) when creating new key vault, it
             * will be set to true by default. Once set to true, it cannot be reverted to false..
             * 
             * @param enableSoftDelete Property to specify whether the 'soft delete' functionality is enabled for this
             * key vault. If it's not set to any value(true or false) when creating new key vault, it will be set to
             * true by default. Once set to true, it cannot be reverted to false.
             * @return the next definition stage.
             */
            WithCreate withEnableSoftDelete(Boolean enableSoftDelete);
        }

        /**
         * The stage of the Vault definition allowing to specify softDeleteRetentionInDays.
         */
        interface WithSoftDeleteRetentionInDays {
            /**
             * Specifies the softDeleteRetentionInDays property: softDelete data retention days. It accepts &gt;=7 and
             * &lt;=90..
             * 
             * @param softDeleteRetentionInDays softDelete data retention days. It accepts &gt;=7 and &lt;=90.
             * @return the next definition stage.
             */
            WithCreate withSoftDeleteRetentionInDays(Integer softDeleteRetentionInDays);
        }

        /**
         * The stage of the Vault definition allowing to specify enableRbacAuthorization.
         */
        interface WithEnableRbacAuthorization {
            /**
             * Specifies the enableRbacAuthorization property: Property that controls how data actions are authorized.
             * When true, the key vault will use Role Based Access Control (RBAC) for authorization of data actions, and
             * the access policies specified in vault properties will be ignored. When false, the key vault will use the
             * access policies specified in vault properties, and any policy stored on Azure Resource Manager will be
             * ignored. If null or not specified, the vault is created with the default value of false. Note that
             * management actions are always authorized with RBAC..
             * 
             * @param enableRbacAuthorization Property that controls how data actions are authorized. When true, the key
             * vault will use Role Based Access Control (RBAC) for authorization of data actions, and the access
             * policies specified in vault properties will be ignored. When false, the key vault will use the access
             * policies specified in vault properties, and any policy stored on Azure Resource Manager will be ignored.
             * If null or not specified, the vault is created with the default value of false. Note that management
             * actions are always authorized with RBAC.
             * @return the next definition stage.
             */
            WithCreate withEnableRbacAuthorization(Boolean enableRbacAuthorization);
        }

        /**
         * The stage of the Vault definition allowing to specify createMode.
         */
        interface WithCreateMode {
            /**
             * Specifies the createMode property: The vault's create mode to indicate whether the vault need to be
             * recovered or not..
             * 
             * @param createMode The vault's create mode to indicate whether the vault need to be recovered or not.
             * @return the next definition stage.
             */
            WithCreate withCreateMode(KeyVaultCreateMode createMode);
        }

        /**
         * The stage of the Vault definition allowing to specify enablePurgeProtection.
         */
        interface WithEnablePurgeProtection {
            /**
             * Specifies the enablePurgeProtection property: Property specifying whether protection against purge is
             * enabled for this vault. Setting this property to true activates protection against purge for this vault
             * and its content - only the Key Vault service may initiate a hard, irrecoverable deletion. The setting is
             * effective only if soft delete is also enabled. Enabling this functionality is irreversible - that is, the
             * property does not accept false as its value..
             * 
             * @param enablePurgeProtection Property specifying whether protection against purge is enabled for this
             * vault. Setting this property to true activates protection against purge for this vault and its content -
             * only the Key Vault service may initiate a hard, irrecoverable deletion. The setting is effective only if
             * soft delete is also enabled. Enabling this functionality is irreversible - that is, the property does not
             * accept false as its value.
             * @return the next definition stage.
             */
            WithCreate withEnablePurgeProtection(Boolean enablePurgeProtection);
        }

        /**
         * The stage of the Vault definition allowing to specify networkAcls.
         */
        interface WithNetworkAcls {
            /**
             * Specifies the networkAcls property: Rules governing the accessibility of the key vault from specific
             * network locations..
             * 
             * @param networkAcls Rules governing the accessibility of the key vault from specific network locations.
             * @return the next definition stage.
             */
            WithCreate withNetworkAcls(NetworkRuleSet networkAcls);
        }

        /**
         * The stage of the Vault definition allowing to specify provisioningState.
         */
        interface WithProvisioningState {
            /**
             * Specifies the provisioningState property: Provisioning state of the vault..
             * 
             * @param provisioningState Provisioning state of the vault.
             * @return the next definition stage.
             */
            WithCreate withProvisioningState(KeyVaultProvisioningState provisioningState);
        }

        /**
         * The stage of the Vault definition allowing to specify publicNetworkAccess.
         */
        interface WithPublicNetworkAccess {
            /**
             * Specifies the publicNetworkAccess property: Property to specify whether the vault will accept traffic
             * from public internet. If set to 'disabled' all traffic except private endpoint traffic and that that
             * originates from trusted services will be blocked. This will override the set firewall rules, meaning that
             * even if the firewall rules are present we will not honor the rules..
             * 
             * @param publicNetworkAccess Property to specify whether the vault will accept traffic from public
             * internet. If set to 'disabled' all traffic except private endpoint traffic and that that originates from
             * trusted services will be blocked. This will override the set firewall rules, meaning that even if the
             * firewall rules are present we will not honor the rules.
             * @return the next definition stage.
             */
            WithCreate withPublicNetworkAccess(String publicNetworkAccess);
        }
    }

    /**
     * Begins update for the Vault resource.
     * 
     * @return the stage of resource update.
     */
    Vault.Update update();

    /**
     * The template for Vault update.
     */
    interface Update extends UpdateStages.WithTags, UpdateStages.WithProperties {
        /**
         * Executes the update request.
         * 
         * @return the updated resource.
         */
        Vault apply();

        /**
         * Executes the update request.
         * 
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        Vault apply(Context context);
    }

    /**
     * The Vault update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the Vault update allowing to specify tags.
         */
        interface WithTags {
            /**
             * Specifies the tags property: The tags that will be assigned to the key vault..
             * 
             * @param tags The tags that will be assigned to the key vault.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }

        /**
         * The stage of the Vault update allowing to specify properties.
         */
        interface WithProperties {
            /**
             * Specifies the properties property: Properties of the vault.
             * 
             * @param properties Properties of the vault.
             * @return the next definition stage.
             */
            Update withProperties(VaultPatchProperties properties);
        }
    }

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @return the refreshed resource.
     */
    Vault refresh();

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    Vault refresh(Context context);
}
