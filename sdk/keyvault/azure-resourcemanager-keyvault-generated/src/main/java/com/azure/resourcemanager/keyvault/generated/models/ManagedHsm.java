// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.keyvault.generated.models;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.keyvault.generated.fluent.models.ManagedHsmInner;
import com.azure.resourcemanager.keyvault.generated.fluent.models.MhsmGeoReplicatedRegionInner;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;

/**
 * An immutable client-side representation of ManagedHsm.
 */
public interface ManagedHsm {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     * 
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     * 
     * @return the type value.
     */
    String type();

    /**
     * Gets the location property: The geo-location where the resource lives.
     * 
     * @return the location value.
     */
    String location();

    /**
     * Gets the tags property: Resource tags.
     * 
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * Gets the tenantId property: The Azure Active Directory tenant ID that should be used for authenticating requests
     * to the managed HSM pool.
     * 
     * @return the tenantId value.
     */
    String tenantId();

    /**
     * Gets the initialAdminObjectIds property: Array of initial administrators object ids for this managed hsm pool.
     * 
     * @return the initialAdminObjectIds value.
     */
    List<String> initialAdminObjectIds();

    /**
     * Gets the hsmUri property: The URI of the managed hsm pool for performing operations on keys.
     * 
     * @return the hsmUri value.
     */
    String hsmUri();

    /**
     * Gets the enableSoftDelete property: Property to specify whether the 'soft delete' functionality is enabled for
     * this managed HSM pool. Soft delete is enabled by default for all managed HSMs and is immutable.
     * 
     * @return the enableSoftDelete value.
     */
    Boolean enableSoftDelete();

    /**
     * Gets the softDeleteRetentionInDays property: Soft deleted data retention days. When you delete an HSM or a key,
     * it will remain recoverable for the configured retention period or for a default period of 90 days. It accepts
     * values between 7 and 90.
     * 
     * @return the softDeleteRetentionInDays value.
     */
    Integer softDeleteRetentionInDays();

    /**
     * Gets the enablePurgeProtection property: Property specifying whether protection against purge is enabled for this
     * managed HSM pool. Setting this property to true activates protection against purge for this managed HSM pool and
     * its content - only the Managed HSM service may initiate a hard, irrecoverable deletion. Enabling this
     * functionality is irreversible.
     * 
     * @return the enablePurgeProtection value.
     */
    Boolean enablePurgeProtection();

    /**
     * Gets the createMode property: The create mode to indicate whether the resource is being created or is being
     * recovered from a deleted resource.
     * 
     * @return the createMode value.
     */
    CreateMode createMode();

    /**
     * Gets the statusMessage property: Resource Status Message.
     * 
     * @return the statusMessage value.
     */
    String statusMessage();

    /**
     * Gets the provisioningState property: Provisioning state.
     * 
     * @return the provisioningState value.
     */
    ProvisioningState provisioningState();

    /**
     * Gets the networkAcls property: Rules governing the accessibility of the key vault from specific network
     * locations.
     * 
     * @return the networkAcls value.
     */
    MhsmNetworkRuleSet networkAcls();

    /**
     * Gets the regions property: List of all regions associated with the managed hsm pool.
     * 
     * @return the regions value.
     */
    List<MhsmGeoReplicatedRegion> regions();

    /**
     * Gets the privateEndpointConnections property: List of private endpoint connections associated with the managed
     * hsm pool.
     * 
     * @return the privateEndpointConnections value.
     */
    List<MhsmPrivateEndpointConnectionItem> privateEndpointConnections();

    /**
     * Gets the publicNetworkAccess property: Control permission to the managed HSM from public networks.
     * 
     * @return the publicNetworkAccess value.
     */
    PublicNetworkAccess publicNetworkAccess();

    /**
     * Gets the scheduledPurgeDate property: The scheduled purge date in UTC.
     * 
     * @return the scheduledPurgeDate value.
     */
    OffsetDateTime scheduledPurgeDate();

    /**
     * Gets the securityDomainProperties property: Managed HSM security domain properties.
     * 
     * @return the securityDomainProperties value.
     */
    ManagedHsmSecurityDomainProperties securityDomainProperties();

    /**
     * Gets the region of the resource.
     * 
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     * 
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the name of the resource group.
     * 
     * @return the name of the resource group.
     */
    String resourceGroupName();

    /**
     * Gets the inner com.azure.resourcemanager.keyvault.generated.fluent.models.ManagedHsmInner object.
     * 
     * @return the inner object.
     */
    ManagedHsmInner innerModel();

    /**
     * The entirety of the ManagedHsm definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithLocation,
        DefinitionStages.WithResourceGroup, DefinitionStages.WithCreate {
    }

    /**
     * The ManagedHsm definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of the ManagedHsm definition.
         */
        interface Blank extends WithLocation {
        }

        /**
         * The stage of the ManagedHsm definition allowing to specify location.
         */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             * 
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(Region location);

            /**
             * Specifies the region for the resource.
             * 
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(String location);
        }

        /**
         * The stage of the ManagedHsm definition allowing to specify parent resource.
         */
        interface WithResourceGroup {
            /**
             * Specifies resourceGroupName.
             * 
             * @param resourceGroupName The name of the resource group. The name is case insensitive.
             * @return the next definition stage.
             */
            WithCreate withExistingResourceGroup(String resourceGroupName);
        }

        /**
         * The stage of the ManagedHsm definition which contains all the minimum required properties for the resource to
         * be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate extends DefinitionStages.WithTags, DefinitionStages.WithTenantId,
            DefinitionStages.WithInitialAdminObjectIds, DefinitionStages.WithEnableSoftDelete,
            DefinitionStages.WithSoftDeleteRetentionInDays, DefinitionStages.WithEnablePurgeProtection,
            DefinitionStages.WithCreateMode, DefinitionStages.WithNetworkAcls, DefinitionStages.WithRegions,
            DefinitionStages.WithPublicNetworkAccess {
            /**
             * Executes the create request.
             * 
             * @return the created resource.
             */
            ManagedHsm create();

            /**
             * Executes the create request.
             * 
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            ManagedHsm create(Context context);
        }

        /**
         * The stage of the ManagedHsm definition allowing to specify tags.
         */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             * 
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }

        /**
         * The stage of the ManagedHsm definition allowing to specify tenantId.
         */
        interface WithTenantId {
            /**
             * Specifies the tenantId property: The Azure Active Directory tenant ID that should be used for
             * authenticating requests to the managed HSM pool..
             * 
             * @param tenantId The Azure Active Directory tenant ID that should be used for authenticating requests to
             * the managed HSM pool.
             * @return the next definition stage.
             */
            WithCreate withTenantId(String tenantId);
        }

        /**
         * The stage of the ManagedHsm definition allowing to specify initialAdminObjectIds.
         */
        interface WithInitialAdminObjectIds {
            /**
             * Specifies the initialAdminObjectIds property: Array of initial administrators object ids for this managed
             * hsm pool..
             * 
             * @param initialAdminObjectIds Array of initial administrators object ids for this managed hsm pool.
             * @return the next definition stage.
             */
            WithCreate withInitialAdminObjectIds(List<String> initialAdminObjectIds);
        }

        /**
         * The stage of the ManagedHsm definition allowing to specify enableSoftDelete.
         */
        interface WithEnableSoftDelete {
            /**
             * Specifies the enableSoftDelete property: Property to specify whether the 'soft delete' functionality is
             * enabled for this managed HSM pool. Soft delete is enabled by default for all managed HSMs and is
             * immutable..
             * 
             * @param enableSoftDelete Property to specify whether the 'soft delete' functionality is enabled for this
             * managed HSM pool. Soft delete is enabled by default for all managed HSMs and is immutable.
             * @return the next definition stage.
             */
            WithCreate withEnableSoftDelete(Boolean enableSoftDelete);
        }

        /**
         * The stage of the ManagedHsm definition allowing to specify softDeleteRetentionInDays.
         */
        interface WithSoftDeleteRetentionInDays {
            /**
             * Specifies the softDeleteRetentionInDays property: Soft deleted data retention days. When you delete an
             * HSM or a key, it will remain recoverable for the configured retention period or for a default period of
             * 90 days. It accepts values between 7 and 90..
             * 
             * @param softDeleteRetentionInDays Soft deleted data retention days. When you delete an HSM or a key, it
             * will remain recoverable for the configured retention period or for a default period of 90 days. It
             * accepts values between 7 and 90.
             * @return the next definition stage.
             */
            WithCreate withSoftDeleteRetentionInDays(Integer softDeleteRetentionInDays);
        }

        /**
         * The stage of the ManagedHsm definition allowing to specify enablePurgeProtection.
         */
        interface WithEnablePurgeProtection {
            /**
             * Specifies the enablePurgeProtection property: Property specifying whether protection against purge is
             * enabled for this managed HSM pool. Setting this property to true activates protection against purge for
             * this managed HSM pool and its content - only the Managed HSM service may initiate a hard, irrecoverable
             * deletion. Enabling this functionality is irreversible..
             * 
             * @param enablePurgeProtection Property specifying whether protection against purge is enabled for this
             * managed HSM pool. Setting this property to true activates protection against purge for this managed HSM
             * pool and its content - only the Managed HSM service may initiate a hard, irrecoverable deletion. Enabling
             * this functionality is irreversible.
             * @return the next definition stage.
             */
            WithCreate withEnablePurgeProtection(Boolean enablePurgeProtection);
        }

        /**
         * The stage of the ManagedHsm definition allowing to specify createMode.
         */
        interface WithCreateMode {
            /**
             * Specifies the createMode property: The create mode to indicate whether the resource is being created or
             * is being recovered from a deleted resource..
             * 
             * @param createMode The create mode to indicate whether the resource is being created or is being recovered
             * from a deleted resource.
             * @return the next definition stage.
             */
            WithCreate withCreateMode(CreateMode createMode);
        }

        /**
         * The stage of the ManagedHsm definition allowing to specify networkAcls.
         */
        interface WithNetworkAcls {
            /**
             * Specifies the networkAcls property: Rules governing the accessibility of the key vault from specific
             * network locations..
             * 
             * @param networkAcls Rules governing the accessibility of the key vault from specific network locations.
             * @return the next definition stage.
             */
            WithCreate withNetworkAcls(MhsmNetworkRuleSet networkAcls);
        }

        /**
         * The stage of the ManagedHsm definition allowing to specify regions.
         */
        interface WithRegions {
            /**
             * Specifies the regions property: List of all regions associated with the managed hsm pool..
             * 
             * @param regions List of all regions associated with the managed hsm pool.
             * @return the next definition stage.
             */
            WithCreate withRegions(List<MhsmGeoReplicatedRegionInner> regions);
        }

        /**
         * The stage of the ManagedHsm definition allowing to specify publicNetworkAccess.
         */
        interface WithPublicNetworkAccess {
            /**
             * Specifies the publicNetworkAccess property: Control permission to the managed HSM from public networks..
             * 
             * @param publicNetworkAccess Control permission to the managed HSM from public networks.
             * @return the next definition stage.
             */
            WithCreate withPublicNetworkAccess(PublicNetworkAccess publicNetworkAccess);
        }
    }

    /**
     * Begins update for the ManagedHsm resource.
     * 
     * @return the stage of resource update.
     */
    ManagedHsm.Update update();

    /**
     * The template for ManagedHsm update.
     */
    interface Update extends UpdateStages.WithTags, UpdateStages.WithTenantId, UpdateStages.WithInitialAdminObjectIds,
        UpdateStages.WithEnableSoftDelete, UpdateStages.WithSoftDeleteRetentionInDays,
        UpdateStages.WithEnablePurgeProtection, UpdateStages.WithCreateMode, UpdateStages.WithNetworkAcls,
        UpdateStages.WithRegions, UpdateStages.WithPublicNetworkAccess {
        /**
         * Executes the update request.
         * 
         * @return the updated resource.
         */
        ManagedHsm apply();

        /**
         * Executes the update request.
         * 
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        ManagedHsm apply(Context context);
    }

    /**
     * The ManagedHsm update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the ManagedHsm update allowing to specify tags.
         */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             * 
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }

        /**
         * The stage of the ManagedHsm update allowing to specify tenantId.
         */
        interface WithTenantId {
            /**
             * Specifies the tenantId property: The Azure Active Directory tenant ID that should be used for
             * authenticating requests to the managed HSM pool..
             * 
             * @param tenantId The Azure Active Directory tenant ID that should be used for authenticating requests to
             * the managed HSM pool.
             * @return the next definition stage.
             */
            Update withTenantId(String tenantId);
        }

        /**
         * The stage of the ManagedHsm update allowing to specify initialAdminObjectIds.
         */
        interface WithInitialAdminObjectIds {
            /**
             * Specifies the initialAdminObjectIds property: Array of initial administrators object ids for this managed
             * hsm pool..
             * 
             * @param initialAdminObjectIds Array of initial administrators object ids for this managed hsm pool.
             * @return the next definition stage.
             */
            Update withInitialAdminObjectIds(List<String> initialAdminObjectIds);
        }

        /**
         * The stage of the ManagedHsm update allowing to specify enableSoftDelete.
         */
        interface WithEnableSoftDelete {
            /**
             * Specifies the enableSoftDelete property: Property to specify whether the 'soft delete' functionality is
             * enabled for this managed HSM pool. Soft delete is enabled by default for all managed HSMs and is
             * immutable..
             * 
             * @param enableSoftDelete Property to specify whether the 'soft delete' functionality is enabled for this
             * managed HSM pool. Soft delete is enabled by default for all managed HSMs and is immutable.
             * @return the next definition stage.
             */
            Update withEnableSoftDelete(Boolean enableSoftDelete);
        }

        /**
         * The stage of the ManagedHsm update allowing to specify softDeleteRetentionInDays.
         */
        interface WithSoftDeleteRetentionInDays {
            /**
             * Specifies the softDeleteRetentionInDays property: Soft deleted data retention days. When you delete an
             * HSM or a key, it will remain recoverable for the configured retention period or for a default period of
             * 90 days. It accepts values between 7 and 90..
             * 
             * @param softDeleteRetentionInDays Soft deleted data retention days. When you delete an HSM or a key, it
             * will remain recoverable for the configured retention period or for a default period of 90 days. It
             * accepts values between 7 and 90.
             * @return the next definition stage.
             */
            Update withSoftDeleteRetentionInDays(Integer softDeleteRetentionInDays);
        }

        /**
         * The stage of the ManagedHsm update allowing to specify enablePurgeProtection.
         */
        interface WithEnablePurgeProtection {
            /**
             * Specifies the enablePurgeProtection property: Property specifying whether protection against purge is
             * enabled for this managed HSM pool. Setting this property to true activates protection against purge for
             * this managed HSM pool and its content - only the Managed HSM service may initiate a hard, irrecoverable
             * deletion. Enabling this functionality is irreversible..
             * 
             * @param enablePurgeProtection Property specifying whether protection against purge is enabled for this
             * managed HSM pool. Setting this property to true activates protection against purge for this managed HSM
             * pool and its content - only the Managed HSM service may initiate a hard, irrecoverable deletion. Enabling
             * this functionality is irreversible.
             * @return the next definition stage.
             */
            Update withEnablePurgeProtection(Boolean enablePurgeProtection);
        }

        /**
         * The stage of the ManagedHsm update allowing to specify createMode.
         */
        interface WithCreateMode {
            /**
             * Specifies the createMode property: The create mode to indicate whether the resource is being created or
             * is being recovered from a deleted resource..
             * 
             * @param createMode The create mode to indicate whether the resource is being created or is being recovered
             * from a deleted resource.
             * @return the next definition stage.
             */
            Update withCreateMode(CreateMode createMode);
        }

        /**
         * The stage of the ManagedHsm update allowing to specify networkAcls.
         */
        interface WithNetworkAcls {
            /**
             * Specifies the networkAcls property: Rules governing the accessibility of the key vault from specific
             * network locations..
             * 
             * @param networkAcls Rules governing the accessibility of the key vault from specific network locations.
             * @return the next definition stage.
             */
            Update withNetworkAcls(MhsmNetworkRuleSet networkAcls);
        }

        /**
         * The stage of the ManagedHsm update allowing to specify regions.
         */
        interface WithRegions {
            /**
             * Specifies the regions property: List of all regions associated with the managed hsm pool..
             * 
             * @param regions List of all regions associated with the managed hsm pool.
             * @return the next definition stage.
             */
            Update withRegions(List<MhsmGeoReplicatedRegionInner> regions);
        }

        /**
         * The stage of the ManagedHsm update allowing to specify publicNetworkAccess.
         */
        interface WithPublicNetworkAccess {
            /**
             * Specifies the publicNetworkAccess property: Control permission to the managed HSM from public networks..
             * 
             * @param publicNetworkAccess Control permission to the managed HSM from public networks.
             * @return the next definition stage.
             */
            Update withPublicNetworkAccess(PublicNetworkAccess publicNetworkAccess);
        }
    }

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @return the refreshed resource.
     */
    ManagedHsm refresh();

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    ManagedHsm refresh(Context context);
}
