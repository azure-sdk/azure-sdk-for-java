// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.keyvault.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.core.management.SystemData;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.keyvault.generated.models.AccessPolicyEntry;
import com.azure.resourcemanager.keyvault.generated.models.CreateMode;
import com.azure.resourcemanager.keyvault.generated.models.NetworkRuleSet;
import com.azure.resourcemanager.keyvault.generated.models.PrivateEndpointConnectionItem;
import com.azure.resourcemanager.keyvault.generated.models.Sku;
import com.azure.resourcemanager.keyvault.generated.models.VaultProvisioningState;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * Resource information with extended details.
 */
@Fluent
public final class VaultInner extends Resource {
    /*
     * Properties of the vault
     */
    private VaultProperties innerProperties = new VaultProperties();

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of VaultInner class.
     */
    public VaultInner() {
    }

    /**
     * Get the innerProperties property: Properties of the vault.
     * 
     * @return the innerProperties value.
     */
    private VaultProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public VaultInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public VaultInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the tenantId property: The Azure Active Directory tenant ID that should be used for authenticating requests
     * to the key vault.
     * 
     * @return the tenantId value.
     */
    public String tenantId() {
        return this.innerProperties() == null ? null : this.innerProperties().tenantId();
    }

    /**
     * Set the tenantId property: The Azure Active Directory tenant ID that should be used for authenticating requests
     * to the key vault.
     * 
     * @param tenantId the tenantId value to set.
     * @return the VaultInner object itself.
     */
    public VaultInner withTenantId(String tenantId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new VaultProperties();
        }
        this.innerProperties().withTenantId(tenantId);
        return this;
    }

    /**
     * Get the sku property: SKU details.
     * 
     * @return the sku value.
     */
    public Sku sku() {
        return this.innerProperties() == null ? null : this.innerProperties().sku();
    }

    /**
     * Set the sku property: SKU details.
     * 
     * @param sku the sku value to set.
     * @return the VaultInner object itself.
     */
    public VaultInner withSku(Sku sku) {
        if (this.innerProperties() == null) {
            this.innerProperties = new VaultProperties();
        }
        this.innerProperties().withSku(sku);
        return this;
    }

    /**
     * Get the accessPolicies property: An array of 0 to 1024 identities that have access to the key vault. All
     * identities in the array must use the same tenant ID as the key vault's tenant ID. When `createMode` is set to
     * `recover`, access policies are not required. Otherwise, access policies are required.
     * 
     * @return the accessPolicies value.
     */
    public List<AccessPolicyEntry> accessPolicies() {
        return this.innerProperties() == null ? null : this.innerProperties().accessPolicies();
    }

    /**
     * Set the accessPolicies property: An array of 0 to 1024 identities that have access to the key vault. All
     * identities in the array must use the same tenant ID as the key vault's tenant ID. When `createMode` is set to
     * `recover`, access policies are not required. Otherwise, access policies are required.
     * 
     * @param accessPolicies the accessPolicies value to set.
     * @return the VaultInner object itself.
     */
    public VaultInner withAccessPolicies(List<AccessPolicyEntry> accessPolicies) {
        if (this.innerProperties() == null) {
            this.innerProperties = new VaultProperties();
        }
        this.innerProperties().withAccessPolicies(accessPolicies);
        return this;
    }

    /**
     * Get the vaultUri property: The URI of the vault for performing operations on keys and secrets.
     * 
     * @return the vaultUri value.
     */
    public String vaultUri() {
        return this.innerProperties() == null ? null : this.innerProperties().vaultUri();
    }

    /**
     * Set the vaultUri property: The URI of the vault for performing operations on keys and secrets.
     * 
     * @param vaultUri the vaultUri value to set.
     * @return the VaultInner object itself.
     */
    public VaultInner withVaultUri(String vaultUri) {
        if (this.innerProperties() == null) {
            this.innerProperties = new VaultProperties();
        }
        this.innerProperties().withVaultUri(vaultUri);
        return this;
    }

    /**
     * Get the hsmPoolResourceId property: The resource id of HSM Pool.
     * 
     * @return the hsmPoolResourceId value.
     */
    public String hsmPoolResourceId() {
        return this.innerProperties() == null ? null : this.innerProperties().hsmPoolResourceId();
    }

    /**
     * Get the enabledForDeployment property: Property to specify whether Azure Virtual Machines are permitted to
     * retrieve certificates stored as secrets from the key vault.
     * 
     * @return the enabledForDeployment value.
     */
    public Boolean enabledForDeployment() {
        return this.innerProperties() == null ? null : this.innerProperties().enabledForDeployment();
    }

    /**
     * Set the enabledForDeployment property: Property to specify whether Azure Virtual Machines are permitted to
     * retrieve certificates stored as secrets from the key vault.
     * 
     * @param enabledForDeployment the enabledForDeployment value to set.
     * @return the VaultInner object itself.
     */
    public VaultInner withEnabledForDeployment(Boolean enabledForDeployment) {
        if (this.innerProperties() == null) {
            this.innerProperties = new VaultProperties();
        }
        this.innerProperties().withEnabledForDeployment(enabledForDeployment);
        return this;
    }

    /**
     * Get the enabledForDiskEncryption property: Property to specify whether Azure Disk Encryption is permitted to
     * retrieve secrets from the vault and unwrap keys.
     * 
     * @return the enabledForDiskEncryption value.
     */
    public Boolean enabledForDiskEncryption() {
        return this.innerProperties() == null ? null : this.innerProperties().enabledForDiskEncryption();
    }

    /**
     * Set the enabledForDiskEncryption property: Property to specify whether Azure Disk Encryption is permitted to
     * retrieve secrets from the vault and unwrap keys.
     * 
     * @param enabledForDiskEncryption the enabledForDiskEncryption value to set.
     * @return the VaultInner object itself.
     */
    public VaultInner withEnabledForDiskEncryption(Boolean enabledForDiskEncryption) {
        if (this.innerProperties() == null) {
            this.innerProperties = new VaultProperties();
        }
        this.innerProperties().withEnabledForDiskEncryption(enabledForDiskEncryption);
        return this;
    }

    /**
     * Get the enabledForTemplateDeployment property: Property to specify whether Azure Resource Manager is permitted to
     * retrieve secrets from the key vault.
     * 
     * @return the enabledForTemplateDeployment value.
     */
    public Boolean enabledForTemplateDeployment() {
        return this.innerProperties() == null ? null : this.innerProperties().enabledForTemplateDeployment();
    }

    /**
     * Set the enabledForTemplateDeployment property: Property to specify whether Azure Resource Manager is permitted to
     * retrieve secrets from the key vault.
     * 
     * @param enabledForTemplateDeployment the enabledForTemplateDeployment value to set.
     * @return the VaultInner object itself.
     */
    public VaultInner withEnabledForTemplateDeployment(Boolean enabledForTemplateDeployment) {
        if (this.innerProperties() == null) {
            this.innerProperties = new VaultProperties();
        }
        this.innerProperties().withEnabledForTemplateDeployment(enabledForTemplateDeployment);
        return this;
    }

    /**
     * Get the enableSoftDelete property: Property to specify whether the 'soft delete' functionality is enabled for
     * this key vault. If it's not set to any value(true or false) when creating new key vault, it will be set to true
     * by default. Once set to true, it cannot be reverted to false.
     * 
     * @return the enableSoftDelete value.
     */
    public Boolean enableSoftDelete() {
        return this.innerProperties() == null ? null : this.innerProperties().enableSoftDelete();
    }

    /**
     * Set the enableSoftDelete property: Property to specify whether the 'soft delete' functionality is enabled for
     * this key vault. If it's not set to any value(true or false) when creating new key vault, it will be set to true
     * by default. Once set to true, it cannot be reverted to false.
     * 
     * @param enableSoftDelete the enableSoftDelete value to set.
     * @return the VaultInner object itself.
     */
    public VaultInner withEnableSoftDelete(Boolean enableSoftDelete) {
        if (this.innerProperties() == null) {
            this.innerProperties = new VaultProperties();
        }
        this.innerProperties().withEnableSoftDelete(enableSoftDelete);
        return this;
    }

    /**
     * Get the softDeleteRetentionInDays property: softDelete data retention days. It accepts &gt;=7 and &lt;=90.
     * 
     * @return the softDeleteRetentionInDays value.
     */
    public Integer softDeleteRetentionInDays() {
        return this.innerProperties() == null ? null : this.innerProperties().softDeleteRetentionInDays();
    }

    /**
     * Set the softDeleteRetentionInDays property: softDelete data retention days. It accepts &gt;=7 and &lt;=90.
     * 
     * @param softDeleteRetentionInDays the softDeleteRetentionInDays value to set.
     * @return the VaultInner object itself.
     */
    public VaultInner withSoftDeleteRetentionInDays(Integer softDeleteRetentionInDays) {
        if (this.innerProperties() == null) {
            this.innerProperties = new VaultProperties();
        }
        this.innerProperties().withSoftDeleteRetentionInDays(softDeleteRetentionInDays);
        return this;
    }

    /**
     * Get the enableRbacAuthorization property: Property that controls how data actions are authorized. When true, the
     * key vault will use Role Based Access Control (RBAC) for authorization of data actions, and the access policies
     * specified in vault properties will be ignored. When false, the key vault will use the access policies specified
     * in vault properties, and any policy stored on Azure Resource Manager will be ignored. If null or not specified,
     * the vault is created with the default value of false. Note that management actions are always authorized with
     * RBAC.
     * 
     * @return the enableRbacAuthorization value.
     */
    public Boolean enableRbacAuthorization() {
        return this.innerProperties() == null ? null : this.innerProperties().enableRbacAuthorization();
    }

    /**
     * Set the enableRbacAuthorization property: Property that controls how data actions are authorized. When true, the
     * key vault will use Role Based Access Control (RBAC) for authorization of data actions, and the access policies
     * specified in vault properties will be ignored. When false, the key vault will use the access policies specified
     * in vault properties, and any policy stored on Azure Resource Manager will be ignored. If null or not specified,
     * the vault is created with the default value of false. Note that management actions are always authorized with
     * RBAC.
     * 
     * @param enableRbacAuthorization the enableRbacAuthorization value to set.
     * @return the VaultInner object itself.
     */
    public VaultInner withEnableRbacAuthorization(Boolean enableRbacAuthorization) {
        if (this.innerProperties() == null) {
            this.innerProperties = new VaultProperties();
        }
        this.innerProperties().withEnableRbacAuthorization(enableRbacAuthorization);
        return this;
    }

    /**
     * Get the createMode property: The vault's create mode to indicate whether the vault need to be recovered or not.
     * 
     * @return the createMode value.
     */
    public CreateMode createMode() {
        return this.innerProperties() == null ? null : this.innerProperties().createMode();
    }

    /**
     * Set the createMode property: The vault's create mode to indicate whether the vault need to be recovered or not.
     * 
     * @param createMode the createMode value to set.
     * @return the VaultInner object itself.
     */
    public VaultInner withCreateMode(CreateMode createMode) {
        if (this.innerProperties() == null) {
            this.innerProperties = new VaultProperties();
        }
        this.innerProperties().withCreateMode(createMode);
        return this;
    }

    /**
     * Get the enablePurgeProtection property: Property specifying whether protection against purge is enabled for this
     * vault. Setting this property to true activates protection against purge for this vault and its content - only the
     * Key Vault service may initiate a hard, irrecoverable deletion. The setting is effective only if soft delete is
     * also enabled. Enabling this functionality is irreversible - that is, the property does not accept false as its
     * value.
     * 
     * @return the enablePurgeProtection value.
     */
    public Boolean enablePurgeProtection() {
        return this.innerProperties() == null ? null : this.innerProperties().enablePurgeProtection();
    }

    /**
     * Set the enablePurgeProtection property: Property specifying whether protection against purge is enabled for this
     * vault. Setting this property to true activates protection against purge for this vault and its content - only the
     * Key Vault service may initiate a hard, irrecoverable deletion. The setting is effective only if soft delete is
     * also enabled. Enabling this functionality is irreversible - that is, the property does not accept false as its
     * value.
     * 
     * @param enablePurgeProtection the enablePurgeProtection value to set.
     * @return the VaultInner object itself.
     */
    public VaultInner withEnablePurgeProtection(Boolean enablePurgeProtection) {
        if (this.innerProperties() == null) {
            this.innerProperties = new VaultProperties();
        }
        this.innerProperties().withEnablePurgeProtection(enablePurgeProtection);
        return this;
    }

    /**
     * Get the networkAcls property: Rules governing the accessibility of the key vault from specific network locations.
     * 
     * @return the networkAcls value.
     */
    public NetworkRuleSet networkAcls() {
        return this.innerProperties() == null ? null : this.innerProperties().networkAcls();
    }

    /**
     * Set the networkAcls property: Rules governing the accessibility of the key vault from specific network locations.
     * 
     * @param networkAcls the networkAcls value to set.
     * @return the VaultInner object itself.
     */
    public VaultInner withNetworkAcls(NetworkRuleSet networkAcls) {
        if (this.innerProperties() == null) {
            this.innerProperties = new VaultProperties();
        }
        this.innerProperties().withNetworkAcls(networkAcls);
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state of the vault.
     * 
     * @return the provisioningState value.
     */
    public VaultProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Set the provisioningState property: Provisioning state of the vault.
     * 
     * @param provisioningState the provisioningState value to set.
     * @return the VaultInner object itself.
     */
    public VaultInner withProvisioningState(VaultProvisioningState provisioningState) {
        if (this.innerProperties() == null) {
            this.innerProperties = new VaultProperties();
        }
        this.innerProperties().withProvisioningState(provisioningState);
        return this;
    }

    /**
     * Get the privateEndpointConnections property: List of private endpoint connections associated with the key vault.
     * 
     * @return the privateEndpointConnections value.
     */
    public List<PrivateEndpointConnectionItem> privateEndpointConnections() {
        return this.innerProperties() == null ? null : this.innerProperties().privateEndpointConnections();
    }

    /**
     * Get the publicNetworkAccess property: Property to specify whether the vault will accept traffic from public
     * internet. If set to 'disabled' all traffic except private endpoint traffic and that that originates from trusted
     * services will be blocked. This will override the set firewall rules, meaning that even if the firewall rules are
     * present we will not honor the rules.
     * 
     * @return the publicNetworkAccess value.
     */
    public String publicNetworkAccess() {
        return this.innerProperties() == null ? null : this.innerProperties().publicNetworkAccess();
    }

    /**
     * Set the publicNetworkAccess property: Property to specify whether the vault will accept traffic from public
     * internet. If set to 'disabled' all traffic except private endpoint traffic and that that originates from trusted
     * services will be blocked. This will override the set firewall rules, meaning that even if the firewall rules are
     * present we will not honor the rules.
     * 
     * @param publicNetworkAccess the publicNetworkAccess value to set.
     * @return the VaultInner object itself.
     */
    public VaultInner withPublicNetworkAccess(String publicNetworkAccess) {
        if (this.innerProperties() == null) {
            this.innerProperties = new VaultProperties();
        }
        this.innerProperties().withPublicNetworkAccess(publicNetworkAccess);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property innerProperties in model VaultInner"));
        } else {
            innerProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(VaultInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("location", location());
        jsonWriter.writeMapField("tags", tags(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VaultInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VaultInner if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the VaultInner.
     */
    public static VaultInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VaultInner deserializedVaultInner = new VaultInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedVaultInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedVaultInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedVaultInner.type = reader.getString();
                } else if ("location".equals(fieldName)) {
                    deserializedVaultInner.withLocation(reader.getString());
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedVaultInner.withTags(tags);
                } else if ("properties".equals(fieldName)) {
                    deserializedVaultInner.innerProperties = VaultProperties.fromJson(reader);
                } else if ("systemData".equals(fieldName)) {
                    deserializedVaultInner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVaultInner;
        });
    }
}
