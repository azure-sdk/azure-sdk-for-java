// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurelogistics.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** The AccessAssignment model. */
@Fluent
public final class AccessAssignment {
    /*
     * The actionIds property.
     */
    @JsonProperty(value = "actionIds")
    private List<String> actionIds;

    /*
     * The attributeConditions property.
     */
    @JsonProperty(value = "attributeConditions")
    private List<AttributeCondition> attributeConditions;

    /**
     * Get the actionIds property: The actionIds property.
     *
     * @return the actionIds value.
     */
    public List<String> actionIds() {
        return this.actionIds;
    }

    /**
     * Set the actionIds property: The actionIds property.
     *
     * @param actionIds the actionIds value to set.
     * @return the AccessAssignment object itself.
     */
    public AccessAssignment withActionIds(List<String> actionIds) {
        this.actionIds = actionIds;
        return this;
    }

    /**
     * Get the attributeConditions property: The attributeConditions property.
     *
     * @return the attributeConditions value.
     */
    public List<AttributeCondition> attributeConditions() {
        return this.attributeConditions;
    }

    /**
     * Set the attributeConditions property: The attributeConditions property.
     *
     * @param attributeConditions the attributeConditions value to set.
     * @return the AccessAssignment object itself.
     */
    public AccessAssignment withAttributeConditions(List<AttributeCondition> attributeConditions) {
        this.attributeConditions = attributeConditions;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (attributeConditions() != null) {
            attributeConditions().forEach(e -> e.validate());
        }
    }
}
