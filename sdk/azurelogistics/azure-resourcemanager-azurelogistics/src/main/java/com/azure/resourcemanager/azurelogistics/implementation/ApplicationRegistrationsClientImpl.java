// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurelogistics.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.azurelogistics.fluent.ApplicationRegistrationsClient;
import com.azure.resourcemanager.azurelogistics.fluent.models.ApplicationRegistrationInner;
import com.azure.resourcemanager.azurelogistics.models.ApplicationRegistrationList;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in ApplicationRegistrationsClient. */
public final class ApplicationRegistrationsClientImpl implements ApplicationRegistrationsClient {
    /** The proxy service used to perform REST calls. */
    private final ApplicationRegistrationsService service;

    /** The service client containing this operation class. */
    private final OscpControlPlaneServiceApiImpl client;

    /**
     * Initializes an instance of ApplicationRegistrationsClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    ApplicationRegistrationsClientImpl(OscpControlPlaneServiceApiImpl client) {
        this.service =
            RestProxy
                .create(ApplicationRegistrationsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for OscpControlPlaneServiceApiApplicationRegistrations to be used by the
     * proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "OscpControlPlaneServ")
    private interface ApplicationRegistrationsService {
        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers"
                + "/Microsoft.OpenLogisticsPlatform/applicationManagers/{applicationManagerName}"
                + "/applicationRegistrations")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ApplicationRegistrationList>> subscriptionLevelList(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("applicationManagerName") String applicationManagerName,
            @QueryParam("application-definition-id") String applicationDefinitionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers"
                + "/Microsoft.OpenLogisticsPlatform/applicationManagers/{applicationManagerName}"
                + "/applicationRegistrations/{applicationRegistrationId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ApplicationRegistrationInner>> subscriptionLevelPut(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("applicationManagerName") String applicationManagerName,
            @PathParam("applicationRegistrationId") String applicationRegistrationId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") ApplicationRegistrationInner applicationRegistration,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers"
                + "/Microsoft.OpenLogisticsPlatform/applicationManagers/{applicationManagerName}"
                + "/applicationRegistrations/{applicationRegistrationId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ApplicationRegistrationInner>> subscriptionLevelGet(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("applicationManagerName") String applicationManagerName,
            @PathParam("applicationRegistrationId") String applicationRegistrationId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ApplicationRegistrationList>> subscriptionLevelListNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * The subscriptionLevelList operation.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationManagerName The name of resource. This is the name of your Azure Supply Chain Service's
     *     applicationManager.
     * @param applicationDefinitionId The Id of your application definition (used part of queries).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of ApplicationRegistration resources along with {@link PagedResponse} on successful completion
     *     of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ApplicationRegistrationInner>> subscriptionLevelListSinglePageAsync(
        String resourceGroupName, String applicationManagerName, String applicationDefinitionId) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (applicationManagerName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter applicationManagerName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .subscriptionLevelList(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            applicationManagerName,
                            applicationDefinitionId,
                            this.client.getApiVersion(),
                            accept,
                            context))
            .<PagedResponse<ApplicationRegistrationInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * The subscriptionLevelList operation.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationManagerName The name of resource. This is the name of your Azure Supply Chain Service's
     *     applicationManager.
     * @param applicationDefinitionId The Id of your application definition (used part of queries).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of ApplicationRegistration resources along with {@link PagedResponse} on successful completion
     *     of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ApplicationRegistrationInner>> subscriptionLevelListSinglePageAsync(
        String resourceGroupName, String applicationManagerName, String applicationDefinitionId, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (applicationManagerName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter applicationManagerName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .subscriptionLevelList(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                applicationManagerName,
                applicationDefinitionId,
                this.client.getApiVersion(),
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * The subscriptionLevelList operation.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationManagerName The name of resource. This is the name of your Azure Supply Chain Service's
     *     applicationManager.
     * @param applicationDefinitionId The Id of your application definition (used part of queries).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of ApplicationRegistration resources as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ApplicationRegistrationInner> subscriptionLevelListAsync(
        String resourceGroupName, String applicationManagerName, String applicationDefinitionId) {
        return new PagedFlux<>(
            () ->
                subscriptionLevelListSinglePageAsync(
                    resourceGroupName, applicationManagerName, applicationDefinitionId),
            nextLink -> subscriptionLevelListNextSinglePageAsync(nextLink));
    }

    /**
     * The subscriptionLevelList operation.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationManagerName The name of resource. This is the name of your Azure Supply Chain Service's
     *     applicationManager.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of ApplicationRegistration resources as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ApplicationRegistrationInner> subscriptionLevelListAsync(
        String resourceGroupName, String applicationManagerName) {
        final String applicationDefinitionId = null;
        return new PagedFlux<>(
            () ->
                subscriptionLevelListSinglePageAsync(
                    resourceGroupName, applicationManagerName, applicationDefinitionId),
            nextLink -> subscriptionLevelListNextSinglePageAsync(nextLink));
    }

    /**
     * The subscriptionLevelList operation.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationManagerName The name of resource. This is the name of your Azure Supply Chain Service's
     *     applicationManager.
     * @param applicationDefinitionId The Id of your application definition (used part of queries).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of ApplicationRegistration resources as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ApplicationRegistrationInner> subscriptionLevelListAsync(
        String resourceGroupName, String applicationManagerName, String applicationDefinitionId, Context context) {
        return new PagedFlux<>(
            () ->
                subscriptionLevelListSinglePageAsync(
                    resourceGroupName, applicationManagerName, applicationDefinitionId, context),
            nextLink -> subscriptionLevelListNextSinglePageAsync(nextLink, context));
    }

    /**
     * The subscriptionLevelList operation.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationManagerName The name of resource. This is the name of your Azure Supply Chain Service's
     *     applicationManager.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of ApplicationRegistration resources as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ApplicationRegistrationInner> subscriptionLevelList(
        String resourceGroupName, String applicationManagerName) {
        final String applicationDefinitionId = null;
        return new PagedIterable<>(
            subscriptionLevelListAsync(resourceGroupName, applicationManagerName, applicationDefinitionId));
    }

    /**
     * The subscriptionLevelList operation.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationManagerName The name of resource. This is the name of your Azure Supply Chain Service's
     *     applicationManager.
     * @param applicationDefinitionId The Id of your application definition (used part of queries).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of ApplicationRegistration resources as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ApplicationRegistrationInner> subscriptionLevelList(
        String resourceGroupName, String applicationManagerName, String applicationDefinitionId, Context context) {
        return new PagedIterable<>(
            subscriptionLevelListAsync(resourceGroupName, applicationManagerName, applicationDefinitionId, context));
    }

    /**
     * The subscriptionLevelPut operation.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationManagerName The name of resource. This is the name of your Azure Supply Chain Service's
     *     applicationManager.
     * @param applicationRegistrationId The Id of application registration invite.
     * @param applicationRegistration The applicationRegistration parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ApplicationRegistrationInner>> subscriptionLevelPutWithResponseAsync(
        String resourceGroupName,
        String applicationManagerName,
        String applicationRegistrationId,
        ApplicationRegistrationInner applicationRegistration) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (applicationManagerName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter applicationManagerName is required and cannot be null."));
        }
        if (applicationRegistrationId == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter applicationRegistrationId is required and cannot be null."));
        }
        if (applicationRegistration == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter applicationRegistration is required and cannot be null."));
        } else {
            applicationRegistration.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .subscriptionLevelPut(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            applicationManagerName,
                            applicationRegistrationId,
                            this.client.getApiVersion(),
                            applicationRegistration,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * The subscriptionLevelPut operation.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationManagerName The name of resource. This is the name of your Azure Supply Chain Service's
     *     applicationManager.
     * @param applicationRegistrationId The Id of application registration invite.
     * @param applicationRegistration The applicationRegistration parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ApplicationRegistrationInner>> subscriptionLevelPutWithResponseAsync(
        String resourceGroupName,
        String applicationManagerName,
        String applicationRegistrationId,
        ApplicationRegistrationInner applicationRegistration,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (applicationManagerName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter applicationManagerName is required and cannot be null."));
        }
        if (applicationRegistrationId == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter applicationRegistrationId is required and cannot be null."));
        }
        if (applicationRegistration == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter applicationRegistration is required and cannot be null."));
        } else {
            applicationRegistration.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .subscriptionLevelPut(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                applicationManagerName,
                applicationRegistrationId,
                this.client.getApiVersion(),
                applicationRegistration,
                accept,
                context);
    }

    /**
     * The subscriptionLevelPut operation.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationManagerName The name of resource. This is the name of your Azure Supply Chain Service's
     *     applicationManager.
     * @param applicationRegistrationId The Id of application registration invite.
     * @param applicationRegistration The applicationRegistration parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ApplicationRegistrationInner> subscriptionLevelPutAsync(
        String resourceGroupName,
        String applicationManagerName,
        String applicationRegistrationId,
        ApplicationRegistrationInner applicationRegistration) {
        return subscriptionLevelPutWithResponseAsync(
                resourceGroupName, applicationManagerName, applicationRegistrationId, applicationRegistration)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * The subscriptionLevelPut operation.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationManagerName The name of resource. This is the name of your Azure Supply Chain Service's
     *     applicationManager.
     * @param applicationRegistrationId The Id of application registration invite.
     * @param applicationRegistration The applicationRegistration parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ApplicationRegistrationInner subscriptionLevelPut(
        String resourceGroupName,
        String applicationManagerName,
        String applicationRegistrationId,
        ApplicationRegistrationInner applicationRegistration) {
        return subscriptionLevelPutAsync(
                resourceGroupName, applicationManagerName, applicationRegistrationId, applicationRegistration)
            .block();
    }

    /**
     * The subscriptionLevelPut operation.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationManagerName The name of resource. This is the name of your Azure Supply Chain Service's
     *     applicationManager.
     * @param applicationRegistrationId The Id of application registration invite.
     * @param applicationRegistration The applicationRegistration parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ApplicationRegistrationInner> subscriptionLevelPutWithResponse(
        String resourceGroupName,
        String applicationManagerName,
        String applicationRegistrationId,
        ApplicationRegistrationInner applicationRegistration,
        Context context) {
        return subscriptionLevelPutWithResponseAsync(
                resourceGroupName, applicationManagerName, applicationRegistrationId, applicationRegistration, context)
            .block();
    }

    /**
     * The subscriptionLevelGet operation.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationManagerName The name of resource. This is the name of your Azure Supply Chain Service's
     *     applicationManager.
     * @param applicationRegistrationId The Id of application registration invite.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ApplicationRegistrationInner>> subscriptionLevelGetWithResponseAsync(
        String resourceGroupName, String applicationManagerName, String applicationRegistrationId) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (applicationManagerName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter applicationManagerName is required and cannot be null."));
        }
        if (applicationRegistrationId == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter applicationRegistrationId is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .subscriptionLevelGet(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            applicationManagerName,
                            applicationRegistrationId,
                            this.client.getApiVersion(),
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * The subscriptionLevelGet operation.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationManagerName The name of resource. This is the name of your Azure Supply Chain Service's
     *     applicationManager.
     * @param applicationRegistrationId The Id of application registration invite.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ApplicationRegistrationInner>> subscriptionLevelGetWithResponseAsync(
        String resourceGroupName, String applicationManagerName, String applicationRegistrationId, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (applicationManagerName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter applicationManagerName is required and cannot be null."));
        }
        if (applicationRegistrationId == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter applicationRegistrationId is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .subscriptionLevelGet(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                applicationManagerName,
                applicationRegistrationId,
                this.client.getApiVersion(),
                accept,
                context);
    }

    /**
     * The subscriptionLevelGet operation.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationManagerName The name of resource. This is the name of your Azure Supply Chain Service's
     *     applicationManager.
     * @param applicationRegistrationId The Id of application registration invite.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ApplicationRegistrationInner> subscriptionLevelGetAsync(
        String resourceGroupName, String applicationManagerName, String applicationRegistrationId) {
        return subscriptionLevelGetWithResponseAsync(
                resourceGroupName, applicationManagerName, applicationRegistrationId)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * The subscriptionLevelGet operation.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationManagerName The name of resource. This is the name of your Azure Supply Chain Service's
     *     applicationManager.
     * @param applicationRegistrationId The Id of application registration invite.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ApplicationRegistrationInner subscriptionLevelGet(
        String resourceGroupName, String applicationManagerName, String applicationRegistrationId) {
        return subscriptionLevelGetAsync(resourceGroupName, applicationManagerName, applicationRegistrationId).block();
    }

    /**
     * The subscriptionLevelGet operation.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationManagerName The name of resource. This is the name of your Azure Supply Chain Service's
     *     applicationManager.
     * @param applicationRegistrationId The Id of application registration invite.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ApplicationRegistrationInner> subscriptionLevelGetWithResponse(
        String resourceGroupName, String applicationManagerName, String applicationRegistrationId, Context context) {
        return subscriptionLevelGetWithResponseAsync(
                resourceGroupName, applicationManagerName, applicationRegistrationId, context)
            .block();
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of ApplicationRegistration resources along with {@link PagedResponse} on successful completion
     *     of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ApplicationRegistrationInner>> subscriptionLevelListNextSinglePageAsync(
        String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.subscriptionLevelListNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<ApplicationRegistrationInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of ApplicationRegistration resources along with {@link PagedResponse} on successful completion
     *     of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ApplicationRegistrationInner>> subscriptionLevelListNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .subscriptionLevelListNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }
}
