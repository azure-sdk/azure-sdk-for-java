// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurelogistics.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.azurelogistics.fluent.ApplicationRegistrationsClient;
import com.azure.resourcemanager.azurelogistics.fluent.models.ApplicationRegistrationInner;
import com.azure.resourcemanager.azurelogistics.models.ApplicationRegistration;
import com.azure.resourcemanager.azurelogistics.models.ApplicationRegistrations;

public final class ApplicationRegistrationsImpl implements ApplicationRegistrations {
    private static final ClientLogger LOGGER = new ClientLogger(ApplicationRegistrationsImpl.class);

    private final ApplicationRegistrationsClient innerClient;

    private final com.azure.resourcemanager.azurelogistics.AzurelogisticsManager serviceManager;

    public ApplicationRegistrationsImpl(
        ApplicationRegistrationsClient innerClient,
        com.azure.resourcemanager.azurelogistics.AzurelogisticsManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<ApplicationRegistration> subscriptionLevelList(
        String resourceGroupName, String applicationManagerName) {
        PagedIterable<ApplicationRegistrationInner> inner =
            this.serviceClient().subscriptionLevelList(resourceGroupName, applicationManagerName);
        return Utils.mapPage(inner, inner1 -> new ApplicationRegistrationImpl(inner1, this.manager()));
    }

    public PagedIterable<ApplicationRegistration> subscriptionLevelList(
        String resourceGroupName, String applicationManagerName, String applicationDefinitionId, Context context) {
        PagedIterable<ApplicationRegistrationInner> inner =
            this
                .serviceClient()
                .subscriptionLevelList(resourceGroupName, applicationManagerName, applicationDefinitionId, context);
        return Utils.mapPage(inner, inner1 -> new ApplicationRegistrationImpl(inner1, this.manager()));
    }

    public ApplicationRegistration subscriptionLevelGet(
        String resourceGroupName, String applicationManagerName, String applicationRegistrationId) {
        ApplicationRegistrationInner inner =
            this
                .serviceClient()
                .subscriptionLevelGet(resourceGroupName, applicationManagerName, applicationRegistrationId);
        if (inner != null) {
            return new ApplicationRegistrationImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ApplicationRegistration> subscriptionLevelGetWithResponse(
        String resourceGroupName, String applicationManagerName, String applicationRegistrationId, Context context) {
        Response<ApplicationRegistrationInner> inner =
            this
                .serviceClient()
                .subscriptionLevelGetWithResponse(
                    resourceGroupName, applicationManagerName, applicationRegistrationId, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ApplicationRegistrationImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ApplicationRegistration subscriptionLevelGetById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String applicationManagerName = Utils.getValueFromIdByName(id, "applicationManagers");
        if (applicationManagerName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'applicationManagers'.", id)));
        }
        String applicationRegistrationId = Utils.getValueFromIdByName(id, "applicationRegistrations");
        if (applicationRegistrationId == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'applicationRegistrations'.",
                                id)));
        }
        return this
            .subscriptionLevelGetWithResponse(
                resourceGroupName, applicationManagerName, applicationRegistrationId, Context.NONE)
            .getValue();
    }

    public Response<ApplicationRegistration> subscriptionLevelGetByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String applicationManagerName = Utils.getValueFromIdByName(id, "applicationManagers");
        if (applicationManagerName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'applicationManagers'.", id)));
        }
        String applicationRegistrationId = Utils.getValueFromIdByName(id, "applicationRegistrations");
        if (applicationRegistrationId == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'applicationRegistrations'.",
                                id)));
        }
        return this
            .subscriptionLevelGetWithResponse(
                resourceGroupName, applicationManagerName, applicationRegistrationId, context);
    }

    private ApplicationRegistrationsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.azurelogistics.AzurelogisticsManager manager() {
        return this.serviceManager;
    }

    public ApplicationRegistrationImpl define(String name) {
        return new ApplicationRegistrationImpl(name, this.manager());
    }
}
