// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurelogistics.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Configuration of the EventGrid filter. */
@Fluent
public final class Filter {
    /*
     * Filter configuration: Removes all events with a subject that does not start with this string
     */
    @JsonProperty(value = "subjectBeginsWith")
    private String subjectBeginsWith;

    /*
     * Filter configuration: Removes all events with a subject that does not end with this string
     */
    @JsonProperty(value = "subjectEndsWith")
    private String subjectEndsWith;

    /*
     * Event types subscribed
     */
    @JsonProperty(value = "includedEventTypes")
    private List<String> includedEventTypes;

    /**
     * Get the subjectBeginsWith property: Filter configuration: Removes all events with a subject that does not start
     * with this string.
     *
     * @return the subjectBeginsWith value.
     */
    public String subjectBeginsWith() {
        return this.subjectBeginsWith;
    }

    /**
     * Set the subjectBeginsWith property: Filter configuration: Removes all events with a subject that does not start
     * with this string.
     *
     * @param subjectBeginsWith the subjectBeginsWith value to set.
     * @return the Filter object itself.
     */
    public Filter withSubjectBeginsWith(String subjectBeginsWith) {
        this.subjectBeginsWith = subjectBeginsWith;
        return this;
    }

    /**
     * Get the subjectEndsWith property: Filter configuration: Removes all events with a subject that does not end with
     * this string.
     *
     * @return the subjectEndsWith value.
     */
    public String subjectEndsWith() {
        return this.subjectEndsWith;
    }

    /**
     * Set the subjectEndsWith property: Filter configuration: Removes all events with a subject that does not end with
     * this string.
     *
     * @param subjectEndsWith the subjectEndsWith value to set.
     * @return the Filter object itself.
     */
    public Filter withSubjectEndsWith(String subjectEndsWith) {
        this.subjectEndsWith = subjectEndsWith;
        return this;
    }

    /**
     * Get the includedEventTypes property: Event types subscribed.
     *
     * @return the includedEventTypes value.
     */
    public List<String> includedEventTypes() {
        return this.includedEventTypes;
    }

    /**
     * Set the includedEventTypes property: Event types subscribed.
     *
     * @param includedEventTypes the includedEventTypes value to set.
     * @return the Filter object itself.
     */
    public Filter withIncludedEventTypes(List<String> includedEventTypes) {
        this.includedEventTypes = includedEventTypes;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
