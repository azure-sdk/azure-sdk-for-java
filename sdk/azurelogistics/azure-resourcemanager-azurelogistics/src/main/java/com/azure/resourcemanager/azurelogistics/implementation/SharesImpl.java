// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurelogistics.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.azurelogistics.fluent.SharesClient;
import com.azure.resourcemanager.azurelogistics.fluent.models.ShareInner;
import com.azure.resourcemanager.azurelogistics.fluent.models.ShareListInner;
import com.azure.resourcemanager.azurelogistics.models.Share;
import com.azure.resourcemanager.azurelogistics.models.ShareList;
import com.azure.resourcemanager.azurelogistics.models.Shares;

public final class SharesImpl implements Shares {
    private static final ClientLogger LOGGER = new ClientLogger(SharesImpl.class);

    private final SharesClient innerClient;

    private final com.azure.resourcemanager.azurelogistics.AzurelogisticsManager serviceManager;

    public SharesImpl(
        SharesClient innerClient, com.azure.resourcemanager.azurelogistics.AzurelogisticsManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Share get(String resourceGroupName, String workspaceName, String shareName) {
        ShareInner inner = this.serviceClient().get(resourceGroupName, workspaceName, shareName);
        if (inner != null) {
            return new ShareImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Share> getWithResponse(
        String resourceGroupName, String workspaceName, String shareName, Context context) {
        Response<ShareInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, workspaceName, shareName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ShareImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String workspaceName, String shareName) {
        this.serviceClient().delete(resourceGroupName, workspaceName, shareName);
    }

    public Response<Void> deleteWithResponse(
        String resourceGroupName, String workspaceName, String shareName, Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, workspaceName, shareName, context);
    }

    public ShareList list(String resourceGroupName, String workspaceName) {
        ShareListInner inner = this.serviceClient().list(resourceGroupName, workspaceName);
        if (inner != null) {
            return new ShareListImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ShareList> listWithResponse(String resourceGroupName, String workspaceName, Context context) {
        Response<ShareListInner> inner =
            this.serviceClient().listWithResponse(resourceGroupName, workspaceName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ShareListImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Share getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = Utils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String shareName = Utils.getValueFromIdByName(id, "shares");
        if (shareName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'shares'.", id)));
        }
        return this.getWithResponse(resourceGroupName, workspaceName, shareName, Context.NONE).getValue();
    }

    public Response<Share> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = Utils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String shareName = Utils.getValueFromIdByName(id, "shares");
        if (shareName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'shares'.", id)));
        }
        return this.getWithResponse(resourceGroupName, workspaceName, shareName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = Utils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String shareName = Utils.getValueFromIdByName(id, "shares");
        if (shareName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'shares'.", id)));
        }
        this.deleteWithResponse(resourceGroupName, workspaceName, shareName, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = Utils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String shareName = Utils.getValueFromIdByName(id, "shares");
        if (shareName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'shares'.", id)));
        }
        return this.deleteWithResponse(resourceGroupName, workspaceName, shareName, context);
    }

    private SharesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.azurelogistics.AzurelogisticsManager manager() {
        return this.serviceManager;
    }

    public ShareImpl define(String name) {
        return new ShareImpl(name, this.manager());
    }
}
