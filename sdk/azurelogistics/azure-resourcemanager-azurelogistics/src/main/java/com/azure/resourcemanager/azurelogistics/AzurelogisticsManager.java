// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurelogistics;

import com.azure.core.credential.TokenCredential;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.HttpPipelinePosition;
import com.azure.core.http.policy.AddDatePolicy;
import com.azure.core.http.policy.AddHeadersFromContextPolicy;
import com.azure.core.http.policy.HttpLogOptions;
import com.azure.core.http.policy.HttpLoggingPolicy;
import com.azure.core.http.policy.HttpPipelinePolicy;
import com.azure.core.http.policy.HttpPolicyProviders;
import com.azure.core.http.policy.RequestIdPolicy;
import com.azure.core.http.policy.RetryOptions;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.management.http.policy.ArmChallengeAuthenticationPolicy;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.util.Configuration;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.azurelogistics.fluent.OscpControlPlaneServiceApi;
import com.azure.resourcemanager.azurelogistics.implementation.ApplicationManagersImpl;
import com.azure.resourcemanager.azurelogistics.implementation.ApplicationRegistrationsImpl;
import com.azure.resourcemanager.azurelogistics.implementation.ApplicationsImpl;
import com.azure.resourcemanager.azurelogistics.implementation.EventGridApplicationManagerFiltersImpl;
import com.azure.resourcemanager.azurelogistics.implementation.EventGridWorkspaceFiltersImpl;
import com.azure.resourcemanager.azurelogistics.implementation.NamespacesImpl;
import com.azure.resourcemanager.azurelogistics.implementation.OperationsImpl;
import com.azure.resourcemanager.azurelogistics.implementation.OscpControlPlaneServiceApiBuilder;
import com.azure.resourcemanager.azurelogistics.implementation.ShareInvitesImpl;
import com.azure.resourcemanager.azurelogistics.implementation.ShareSubscriptionsOperationsImpl;
import com.azure.resourcemanager.azurelogistics.implementation.SharesImpl;
import com.azure.resourcemanager.azurelogistics.implementation.WorkspacesImpl;
import com.azure.resourcemanager.azurelogistics.models.ApplicationManagers;
import com.azure.resourcemanager.azurelogistics.models.ApplicationRegistrations;
import com.azure.resourcemanager.azurelogistics.models.Applications;
import com.azure.resourcemanager.azurelogistics.models.EventGridApplicationManagerFilters;
import com.azure.resourcemanager.azurelogistics.models.EventGridWorkspaceFilters;
import com.azure.resourcemanager.azurelogistics.models.Namespaces;
import com.azure.resourcemanager.azurelogistics.models.Operations;
import com.azure.resourcemanager.azurelogistics.models.ShareInvites;
import com.azure.resourcemanager.azurelogistics.models.ShareSubscriptionsOperations;
import com.azure.resourcemanager.azurelogistics.models.Shares;
import com.azure.resourcemanager.azurelogistics.models.Workspaces;
import java.time.Duration;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

/** Entry point to AzurelogisticsManager. REST APIs for Azure Open Supply Chain Platform's Control Plane Service. */
public final class AzurelogisticsManager {
    private ApplicationManagers applicationManagers;

    private ApplicationRegistrations applicationRegistrations;

    private Applications applications;

    private EventGridWorkspaceFilters eventGridWorkspaceFilters;

    private EventGridApplicationManagerFilters eventGridApplicationManagerFilters;

    private Operations operations;

    private ShareInvites shareInvites;

    private ShareSubscriptionsOperations shareSubscriptionsOperations;

    private Shares shares;

    private Workspaces workspaces;

    private Namespaces namespaces;

    private final OscpControlPlaneServiceApi clientObject;

    private AzurelogisticsManager(HttpPipeline httpPipeline, AzureProfile profile, Duration defaultPollInterval) {
        Objects.requireNonNull(httpPipeline, "'httpPipeline' cannot be null.");
        Objects.requireNonNull(profile, "'profile' cannot be null.");
        this.clientObject =
            new OscpControlPlaneServiceApiBuilder()
                .pipeline(httpPipeline)
                .endpoint(profile.getEnvironment().getResourceManagerEndpoint())
                .subscriptionId(profile.getSubscriptionId())
                .defaultPollInterval(defaultPollInterval)
                .buildClient();
    }

    /**
     * Creates an instance of azurelogistics service API entry point.
     *
     * @param credential the credential to use.
     * @param profile the Azure profile for client.
     * @return the azurelogistics service API instance.
     */
    public static AzurelogisticsManager authenticate(TokenCredential credential, AzureProfile profile) {
        Objects.requireNonNull(credential, "'credential' cannot be null.");
        Objects.requireNonNull(profile, "'profile' cannot be null.");
        return configure().authenticate(credential, profile);
    }

    /**
     * Creates an instance of azurelogistics service API entry point.
     *
     * @param httpPipeline the {@link HttpPipeline} configured with Azure authentication credential.
     * @param profile the Azure profile for client.
     * @return the azurelogistics service API instance.
     */
    public static AzurelogisticsManager authenticate(HttpPipeline httpPipeline, AzureProfile profile) {
        Objects.requireNonNull(httpPipeline, "'httpPipeline' cannot be null.");
        Objects.requireNonNull(profile, "'profile' cannot be null.");
        return new AzurelogisticsManager(httpPipeline, profile, null);
    }

    /**
     * Gets a Configurable instance that can be used to create AzurelogisticsManager with optional configuration.
     *
     * @return the Configurable instance allowing configurations.
     */
    public static Configurable configure() {
        return new AzurelogisticsManager.Configurable();
    }

    /** The Configurable allowing configurations to be set. */
    public static final class Configurable {
        private static final ClientLogger LOGGER = new ClientLogger(Configurable.class);

        private HttpClient httpClient;
        private HttpLogOptions httpLogOptions;
        private final List<HttpPipelinePolicy> policies = new ArrayList<>();
        private final List<String> scopes = new ArrayList<>();
        private RetryPolicy retryPolicy;
        private RetryOptions retryOptions;
        private Duration defaultPollInterval;

        private Configurable() {
        }

        /**
         * Sets the http client.
         *
         * @param httpClient the HTTP client.
         * @return the configurable object itself.
         */
        public Configurable withHttpClient(HttpClient httpClient) {
            this.httpClient = Objects.requireNonNull(httpClient, "'httpClient' cannot be null.");
            return this;
        }

        /**
         * Sets the logging options to the HTTP pipeline.
         *
         * @param httpLogOptions the HTTP log options.
         * @return the configurable object itself.
         */
        public Configurable withLogOptions(HttpLogOptions httpLogOptions) {
            this.httpLogOptions = Objects.requireNonNull(httpLogOptions, "'httpLogOptions' cannot be null.");
            return this;
        }

        /**
         * Adds the pipeline policy to the HTTP pipeline.
         *
         * @param policy the HTTP pipeline policy.
         * @return the configurable object itself.
         */
        public Configurable withPolicy(HttpPipelinePolicy policy) {
            this.policies.add(Objects.requireNonNull(policy, "'policy' cannot be null."));
            return this;
        }

        /**
         * Adds the scope to permission sets.
         *
         * @param scope the scope.
         * @return the configurable object itself.
         */
        public Configurable withScope(String scope) {
            this.scopes.add(Objects.requireNonNull(scope, "'scope' cannot be null."));
            return this;
        }

        /**
         * Sets the retry policy to the HTTP pipeline.
         *
         * @param retryPolicy the HTTP pipeline retry policy.
         * @return the configurable object itself.
         */
        public Configurable withRetryPolicy(RetryPolicy retryPolicy) {
            this.retryPolicy = Objects.requireNonNull(retryPolicy, "'retryPolicy' cannot be null.");
            return this;
        }

        /**
         * Sets the retry options for the HTTP pipeline retry policy.
         *
         * <p>This setting has no effect, if retry policy is set via {@link #withRetryPolicy(RetryPolicy)}.
         *
         * @param retryOptions the retry options for the HTTP pipeline retry policy.
         * @return the configurable object itself.
         */
        public Configurable withRetryOptions(RetryOptions retryOptions) {
            this.retryOptions = Objects.requireNonNull(retryOptions, "'retryOptions' cannot be null.");
            return this;
        }

        /**
         * Sets the default poll interval, used when service does not provide "Retry-After" header.
         *
         * @param defaultPollInterval the default poll interval.
         * @return the configurable object itself.
         */
        public Configurable withDefaultPollInterval(Duration defaultPollInterval) {
            this.defaultPollInterval =
                Objects.requireNonNull(defaultPollInterval, "'defaultPollInterval' cannot be null.");
            if (this.defaultPollInterval.isNegative()) {
                throw LOGGER
                    .logExceptionAsError(new IllegalArgumentException("'defaultPollInterval' cannot be negative"));
            }
            return this;
        }

        /**
         * Creates an instance of azurelogistics service API entry point.
         *
         * @param credential the credential to use.
         * @param profile the Azure profile for client.
         * @return the azurelogistics service API instance.
         */
        public AzurelogisticsManager authenticate(TokenCredential credential, AzureProfile profile) {
            Objects.requireNonNull(credential, "'credential' cannot be null.");
            Objects.requireNonNull(profile, "'profile' cannot be null.");

            StringBuilder userAgentBuilder = new StringBuilder();
            userAgentBuilder
                .append("azsdk-java")
                .append("-")
                .append("com.azure.resourcemanager.azurelogistics")
                .append("/")
                .append("1.0.0-beta.1");
            if (!Configuration.getGlobalConfiguration().get("AZURE_TELEMETRY_DISABLED", false)) {
                userAgentBuilder
                    .append(" (")
                    .append(Configuration.getGlobalConfiguration().get("java.version"))
                    .append("; ")
                    .append(Configuration.getGlobalConfiguration().get("os.name"))
                    .append("; ")
                    .append(Configuration.getGlobalConfiguration().get("os.version"))
                    .append("; auto-generated)");
            } else {
                userAgentBuilder.append(" (auto-generated)");
            }

            if (scopes.isEmpty()) {
                scopes.add(profile.getEnvironment().getManagementEndpoint() + "/.default");
            }
            if (retryPolicy == null) {
                if (retryOptions != null) {
                    retryPolicy = new RetryPolicy(retryOptions);
                } else {
                    retryPolicy = new RetryPolicy("Retry-After", ChronoUnit.SECONDS);
                }
            }
            List<HttpPipelinePolicy> policies = new ArrayList<>();
            policies.add(new UserAgentPolicy(userAgentBuilder.toString()));
            policies.add(new AddHeadersFromContextPolicy());
            policies.add(new RequestIdPolicy());
            policies
                .addAll(
                    this
                        .policies
                        .stream()
                        .filter(p -> p.getPipelinePosition() == HttpPipelinePosition.PER_CALL)
                        .collect(Collectors.toList()));
            HttpPolicyProviders.addBeforeRetryPolicies(policies);
            policies.add(retryPolicy);
            policies.add(new AddDatePolicy());
            policies.add(new ArmChallengeAuthenticationPolicy(credential, scopes.toArray(new String[0])));
            policies
                .addAll(
                    this
                        .policies
                        .stream()
                        .filter(p -> p.getPipelinePosition() == HttpPipelinePosition.PER_RETRY)
                        .collect(Collectors.toList()));
            HttpPolicyProviders.addAfterRetryPolicies(policies);
            policies.add(new HttpLoggingPolicy(httpLogOptions));
            HttpPipeline httpPipeline =
                new HttpPipelineBuilder()
                    .httpClient(httpClient)
                    .policies(policies.toArray(new HttpPipelinePolicy[0]))
                    .build();
            return new AzurelogisticsManager(httpPipeline, profile, defaultPollInterval);
        }
    }

    /**
     * Gets the resource collection API of ApplicationManagers. It manages ApplicationManager.
     *
     * @return Resource collection API of ApplicationManagers.
     */
    public ApplicationManagers applicationManagers() {
        if (this.applicationManagers == null) {
            this.applicationManagers = new ApplicationManagersImpl(clientObject.getApplicationManagers(), this);
        }
        return applicationManagers;
    }

    /**
     * Gets the resource collection API of ApplicationRegistrations. It manages ApplicationRegistration.
     *
     * @return Resource collection API of ApplicationRegistrations.
     */
    public ApplicationRegistrations applicationRegistrations() {
        if (this.applicationRegistrations == null) {
            this.applicationRegistrations =
                new ApplicationRegistrationsImpl(clientObject.getApplicationRegistrations(), this);
        }
        return applicationRegistrations;
    }

    /**
     * Gets the resource collection API of Applications. It manages Application.
     *
     * @return Resource collection API of Applications.
     */
    public Applications applications() {
        if (this.applications == null) {
            this.applications = new ApplicationsImpl(clientObject.getApplications(), this);
        }
        return applications;
    }

    /**
     * Gets the resource collection API of EventGridWorkspaceFilters. It manages EventGridFilter.
     *
     * @return Resource collection API of EventGridWorkspaceFilters.
     */
    public EventGridWorkspaceFilters eventGridWorkspaceFilters() {
        if (this.eventGridWorkspaceFilters == null) {
            this.eventGridWorkspaceFilters =
                new EventGridWorkspaceFiltersImpl(clientObject.getEventGridWorkspaceFilters(), this);
        }
        return eventGridWorkspaceFilters;
    }

    /**
     * Gets the resource collection API of EventGridApplicationManagerFilters.
     *
     * @return Resource collection API of EventGridApplicationManagerFilters.
     */
    public EventGridApplicationManagerFilters eventGridApplicationManagerFilters() {
        if (this.eventGridApplicationManagerFilters == null) {
            this.eventGridApplicationManagerFilters =
                new EventGridApplicationManagerFiltersImpl(clientObject.getEventGridApplicationManagerFilters(), this);
        }
        return eventGridApplicationManagerFilters;
    }

    /**
     * Gets the resource collection API of Operations.
     *
     * @return Resource collection API of Operations.
     */
    public Operations operations() {
        if (this.operations == null) {
            this.operations = new OperationsImpl(clientObject.getOperations(), this);
        }
        return operations;
    }

    /**
     * Gets the resource collection API of ShareInvites.
     *
     * @return Resource collection API of ShareInvites.
     */
    public ShareInvites shareInvites() {
        if (this.shareInvites == null) {
            this.shareInvites = new ShareInvitesImpl(clientObject.getShareInvites(), this);
        }
        return shareInvites;
    }

    /**
     * Gets the resource collection API of ShareSubscriptionsOperations.
     *
     * @return Resource collection API of ShareSubscriptionsOperations.
     */
    public ShareSubscriptionsOperations shareSubscriptionsOperations() {
        if (this.shareSubscriptionsOperations == null) {
            this.shareSubscriptionsOperations =
                new ShareSubscriptionsOperationsImpl(clientObject.getShareSubscriptionsOperations(), this);
        }
        return shareSubscriptionsOperations;
    }

    /**
     * Gets the resource collection API of Shares. It manages Share.
     *
     * @return Resource collection API of Shares.
     */
    public Shares shares() {
        if (this.shares == null) {
            this.shares = new SharesImpl(clientObject.getShares(), this);
        }
        return shares;
    }

    /**
     * Gets the resource collection API of Workspaces. It manages Workspace.
     *
     * @return Resource collection API of Workspaces.
     */
    public Workspaces workspaces() {
        if (this.workspaces == null) {
            this.workspaces = new WorkspacesImpl(clientObject.getWorkspaces(), this);
        }
        return workspaces;
    }

    /**
     * Gets the resource collection API of Namespaces.
     *
     * @return Resource collection API of Namespaces.
     */
    public Namespaces namespaces() {
        if (this.namespaces == null) {
            this.namespaces = new NamespacesImpl(clientObject.getNamespaces(), this);
        }
        return namespaces;
    }

    /**
     * @return Wrapped service client OscpControlPlaneServiceApi providing direct access to the underlying
     *     auto-generated API implementation, based on Azure REST API.
     */
    public OscpControlPlaneServiceApi serviceClient() {
        return this.clientObject;
    }
}
