// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurelogistics.implementation;

import com.azure.core.annotation.ServiceClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.Response;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.exception.ManagementError;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.management.polling.PollerFactory;
import com.azure.core.util.Context;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.core.util.polling.AsyncPollResponse;
import com.azure.core.util.polling.LongRunningOperationStatus;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.serializer.SerializerAdapter;
import com.azure.core.util.serializer.SerializerEncoding;
import com.azure.resourcemanager.azurelogistics.fluent.ApplicationManagersClient;
import com.azure.resourcemanager.azurelogistics.fluent.ApplicationRegistrationsClient;
import com.azure.resourcemanager.azurelogistics.fluent.ApplicationsClient;
import com.azure.resourcemanager.azurelogistics.fluent.EventGridApplicationManagerFiltersClient;
import com.azure.resourcemanager.azurelogistics.fluent.EventGridWorkspaceFiltersClient;
import com.azure.resourcemanager.azurelogistics.fluent.NamespacesClient;
import com.azure.resourcemanager.azurelogistics.fluent.OperationsClient;
import com.azure.resourcemanager.azurelogistics.fluent.OscpControlPlaneServiceApi;
import com.azure.resourcemanager.azurelogistics.fluent.ShareInvitesClient;
import com.azure.resourcemanager.azurelogistics.fluent.ShareSubscriptionsOperationsClient;
import com.azure.resourcemanager.azurelogistics.fluent.SharesClient;
import com.azure.resourcemanager.azurelogistics.fluent.WorkspacesClient;
import java.io.IOException;
import java.lang.reflect.Type;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.time.Duration;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** Initializes a new instance of the OscpControlPlaneServiceApiImpl type. */
@ServiceClient(builder = OscpControlPlaneServiceApiBuilder.class)
public final class OscpControlPlaneServiceApiImpl implements OscpControlPlaneServiceApi {
    /** The ID of the target subscription. */
    private final String subscriptionId;

    /**
     * Gets The ID of the target subscription.
     *
     * @return the subscriptionId value.
     */
    public String getSubscriptionId() {
        return this.subscriptionId;
    }

    /** server parameter. */
    private final String endpoint;

    /**
     * Gets server parameter.
     *
     * @return the endpoint value.
     */
    public String getEndpoint() {
        return this.endpoint;
    }

    /** Api Version. */
    private final String apiVersion;

    /**
     * Gets Api Version.
     *
     * @return the apiVersion value.
     */
    public String getApiVersion() {
        return this.apiVersion;
    }

    /** server parameter. */
    private final String endpoint;

    /**
     * Gets server parameter.
     *
     * @return the endpoint value.
     */
    public String getEndpoint() {
        return this.endpoint;
    }

    /** The HTTP pipeline to send requests through. */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     *
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /** The serializer to serialize an object into a string. */
    private final SerializerAdapter serializerAdapter;

    /**
     * Gets The serializer to serialize an object into a string.
     *
     * @return the serializerAdapter value.
     */
    SerializerAdapter getSerializerAdapter() {
        return this.serializerAdapter;
    }

    /** The default poll interval for long-running operation. */
    private final Duration defaultPollInterval;

    /**
     * Gets The default poll interval for long-running operation.
     *
     * @return the defaultPollInterval value.
     */
    public Duration getDefaultPollInterval() {
        return this.defaultPollInterval;
    }

    /** The ApplicationManagersClient object to access its operations. */
    private final ApplicationManagersClient applicationManagers;

    /**
     * Gets the ApplicationManagersClient object to access its operations.
     *
     * @return the ApplicationManagersClient object.
     */
    public ApplicationManagersClient getApplicationManagers() {
        return this.applicationManagers;
    }

    /** The ApplicationRegistrationsClient object to access its operations. */
    private final ApplicationRegistrationsClient applicationRegistrations;

    /**
     * Gets the ApplicationRegistrationsClient object to access its operations.
     *
     * @return the ApplicationRegistrationsClient object.
     */
    public ApplicationRegistrationsClient getApplicationRegistrations() {
        return this.applicationRegistrations;
    }

    /** The ApplicationsClient object to access its operations. */
    private final ApplicationsClient applications;

    /**
     * Gets the ApplicationsClient object to access its operations.
     *
     * @return the ApplicationsClient object.
     */
    public ApplicationsClient getApplications() {
        return this.applications;
    }

    /** The EventGridWorkspaceFiltersClient object to access its operations. */
    private final EventGridWorkspaceFiltersClient eventGridWorkspaceFilters;

    /**
     * Gets the EventGridWorkspaceFiltersClient object to access its operations.
     *
     * @return the EventGridWorkspaceFiltersClient object.
     */
    public EventGridWorkspaceFiltersClient getEventGridWorkspaceFilters() {
        return this.eventGridWorkspaceFilters;
    }

    /** The EventGridApplicationManagerFiltersClient object to access its operations. */
    private final EventGridApplicationManagerFiltersClient eventGridApplicationManagerFilters;

    /**
     * Gets the EventGridApplicationManagerFiltersClient object to access its operations.
     *
     * @return the EventGridApplicationManagerFiltersClient object.
     */
    public EventGridApplicationManagerFiltersClient getEventGridApplicationManagerFilters() {
        return this.eventGridApplicationManagerFilters;
    }

    /** The OperationsClient object to access its operations. */
    private final OperationsClient operations;

    /**
     * Gets the OperationsClient object to access its operations.
     *
     * @return the OperationsClient object.
     */
    public OperationsClient getOperations() {
        return this.operations;
    }

    /** The ShareInvitesClient object to access its operations. */
    private final ShareInvitesClient shareInvites;

    /**
     * Gets the ShareInvitesClient object to access its operations.
     *
     * @return the ShareInvitesClient object.
     */
    public ShareInvitesClient getShareInvites() {
        return this.shareInvites;
    }

    /** The ShareSubscriptionsOperationsClient object to access its operations. */
    private final ShareSubscriptionsOperationsClient shareSubscriptionsOperations;

    /**
     * Gets the ShareSubscriptionsOperationsClient object to access its operations.
     *
     * @return the ShareSubscriptionsOperationsClient object.
     */
    public ShareSubscriptionsOperationsClient getShareSubscriptionsOperations() {
        return this.shareSubscriptionsOperations;
    }

    /** The SharesClient object to access its operations. */
    private final SharesClient shares;

    /**
     * Gets the SharesClient object to access its operations.
     *
     * @return the SharesClient object.
     */
    public SharesClient getShares() {
        return this.shares;
    }

    /** The WorkspacesClient object to access its operations. */
    private final WorkspacesClient workspaces;

    /**
     * Gets the WorkspacesClient object to access its operations.
     *
     * @return the WorkspacesClient object.
     */
    public WorkspacesClient getWorkspaces() {
        return this.workspaces;
    }

    /** The NamespacesClient object to access its operations. */
    private final NamespacesClient namespaces;

    /**
     * Gets the NamespacesClient object to access its operations.
     *
     * @return the NamespacesClient object.
     */
    public NamespacesClient getNamespaces() {
        return this.namespaces;
    }

    /**
     * Initializes an instance of OscpControlPlaneServiceApi client.
     *
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param serializerAdapter The serializer to serialize an object into a string.
     * @param defaultPollInterval The default poll interval for long-running operation.
     * @param environment The Azure environment.
     * @param subscriptionId The ID of the target subscription.
     * @param endpoint server parameter.
     * @param endpoint server parameter.
     */
    OscpControlPlaneServiceApiImpl(
        HttpPipeline httpPipeline,
        SerializerAdapter serializerAdapter,
        Duration defaultPollInterval,
        AzureEnvironment environment,
        String subscriptionId,
        String endpoint,
        String endpoint) {
        this.httpPipeline = httpPipeline;
        this.serializerAdapter = serializerAdapter;
        this.defaultPollInterval = defaultPollInterval;
        this.subscriptionId = subscriptionId;
        this.endpoint = endpoint;
        this.endpoint = endpoint;
        this.apiVersion = "2022-08-01";
        this.applicationManagers = new ApplicationManagersClientImpl(this);
        this.applicationRegistrations = new ApplicationRegistrationsClientImpl(this);
        this.applications = new ApplicationsClientImpl(this);
        this.eventGridWorkspaceFilters = new EventGridWorkspaceFiltersClientImpl(this);
        this.eventGridApplicationManagerFilters = new EventGridApplicationManagerFiltersClientImpl(this);
        this.operations = new OperationsClientImpl(this);
        this.shareInvites = new ShareInvitesClientImpl(this);
        this.shareSubscriptionsOperations = new ShareSubscriptionsOperationsClientImpl(this);
        this.shares = new SharesClientImpl(this);
        this.workspaces = new WorkspacesClientImpl(this);
        this.namespaces = new NamespacesClientImpl(this);
    }

    /**
     * Gets default client context.
     *
     * @return the default client context.
     */
    public Context getContext() {
        return Context.NONE;
    }

    /**
     * Merges default client context with provided context.
     *
     * @param context the context to be merged with default client context.
     * @return the merged context.
     */
    public Context mergeContext(Context context) {
        return CoreUtils.mergeContexts(this.getContext(), context);
    }

    /**
     * Gets long running operation result.
     *
     * @param activationResponse the response of activation operation.
     * @param httpPipeline the http pipeline.
     * @param pollResultType type of poll result.
     * @param finalResultType type of final result.
     * @param context the context shared by all requests.
     * @param <T> type of poll result.
     * @param <U> type of final result.
     * @return poller flux for poll result and final result.
     */
    public <T, U> PollerFlux<PollResult<T>, U> getLroResult(
        Mono<Response<Flux<ByteBuffer>>> activationResponse,
        HttpPipeline httpPipeline,
        Type pollResultType,
        Type finalResultType,
        Context context) {
        return PollerFactory
            .create(
                serializerAdapter,
                httpPipeline,
                pollResultType,
                finalResultType,
                defaultPollInterval,
                activationResponse,
                context);
    }

    /**
     * Gets the final result, or an error, based on last async poll response.
     *
     * @param response the last async poll response.
     * @param <T> type of poll result.
     * @param <U> type of final result.
     * @return the final result, or an error.
     */
    public <T, U> Mono<U> getLroFinalResultOrError(AsyncPollResponse<PollResult<T>, U> response) {
        if (response.getStatus() != LongRunningOperationStatus.SUCCESSFULLY_COMPLETED) {
            String errorMessage;
            ManagementError managementError = null;
            HttpResponse errorResponse = null;
            PollResult.Error lroError = response.getValue().getError();
            if (lroError != null) {
                errorResponse =
                    new HttpResponseImpl(
                        lroError.getResponseStatusCode(), lroError.getResponseHeaders(), lroError.getResponseBody());

                errorMessage = response.getValue().getError().getMessage();
                String errorBody = response.getValue().getError().getResponseBody();
                if (errorBody != null) {
                    // try to deserialize error body to ManagementError
                    try {
                        managementError =
                            this
                                .getSerializerAdapter()
                                .deserialize(errorBody, ManagementError.class, SerializerEncoding.JSON);
                        if (managementError.getCode() == null || managementError.getMessage() == null) {
                            managementError = null;
                        }
                    } catch (IOException | RuntimeException ioe) {
                        LOGGER.logThrowableAsWarning(ioe);
                    }
                }
            } else {
                // fallback to default error message
                errorMessage = "Long running operation failed.";
            }
            if (managementError == null) {
                // fallback to default ManagementError
                managementError = new ManagementError(response.getStatus().toString(), errorMessage);
            }
            return Mono.error(new ManagementException(errorMessage, errorResponse, managementError));
        } else {
            return response.getFinalResult();
        }
    }

    private static final class HttpResponseImpl extends HttpResponse {
        private final int statusCode;

        private final byte[] responseBody;

        private final HttpHeaders httpHeaders;

        HttpResponseImpl(int statusCode, HttpHeaders httpHeaders, String responseBody) {
            super(null);
            this.statusCode = statusCode;
            this.httpHeaders = httpHeaders;
            this.responseBody = responseBody == null ? null : responseBody.getBytes(StandardCharsets.UTF_8);
        }

        public int getStatusCode() {
            return statusCode;
        }

        public String getHeaderValue(String s) {
            return httpHeaders.getValue(s);
        }

        public HttpHeaders getHeaders() {
            return httpHeaders;
        }

        public Flux<ByteBuffer> getBody() {
            return Flux.just(ByteBuffer.wrap(responseBody));
        }

        public Mono<byte[]> getBodyAsByteArray() {
            return Mono.just(responseBody);
        }

        public Mono<String> getBodyAsString() {
            return Mono.just(new String(responseBody, StandardCharsets.UTF_8));
        }

        public Mono<String> getBodyAsString(Charset charset) {
            return Mono.just(new String(responseBody, charset));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(OscpControlPlaneServiceApiImpl.class);
}
