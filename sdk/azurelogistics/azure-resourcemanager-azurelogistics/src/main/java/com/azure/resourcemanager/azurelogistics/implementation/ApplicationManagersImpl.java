// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurelogistics.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.azurelogistics.fluent.ApplicationManagersClient;
import com.azure.resourcemanager.azurelogistics.fluent.models.ApplicationManagerInner;
import com.azure.resourcemanager.azurelogistics.fluent.models.ApplicationManagerListInner;
import com.azure.resourcemanager.azurelogistics.models.ApplicationManager;
import com.azure.resourcemanager.azurelogistics.models.ApplicationManagerList;
import com.azure.resourcemanager.azurelogistics.models.ApplicationManagers;

public final class ApplicationManagersImpl implements ApplicationManagers {
    private static final ClientLogger LOGGER = new ClientLogger(ApplicationManagersImpl.class);

    private final ApplicationManagersClient innerClient;

    private final com.azure.resourcemanager.azurelogistics.AzurelogisticsManager serviceManager;

    public ApplicationManagersImpl(
        ApplicationManagersClient innerClient,
        com.azure.resourcemanager.azurelogistics.AzurelogisticsManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public ApplicationManager getByResourceGroup(String resourceGroupName, String applicationManagerName) {
        ApplicationManagerInner inner =
            this.serviceClient().getByResourceGroup(resourceGroupName, applicationManagerName);
        if (inner != null) {
            return new ApplicationManagerImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ApplicationManager> getByResourceGroupWithResponse(
        String resourceGroupName, String applicationManagerName, Context context) {
        Response<ApplicationManagerInner> inner =
            this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, applicationManagerName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ApplicationManagerImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceGroupName, String applicationManagerName) {
        this.serviceClient().delete(resourceGroupName, applicationManagerName);
    }

    public void delete(String resourceGroupName, String applicationManagerName, Context context) {
        this.serviceClient().delete(resourceGroupName, applicationManagerName, context);
    }

    public ApplicationManagerList list(String resourceGroupName) {
        ApplicationManagerListInner inner = this.serviceClient().list(resourceGroupName);
        if (inner != null) {
            return new ApplicationManagerListImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ApplicationManagerList> listWithResponse(String resourceGroupName, Context context) {
        Response<ApplicationManagerListInner> inner = this.serviceClient().listWithResponse(resourceGroupName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ApplicationManagerListImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ApplicationManagerList listAll() {
        ApplicationManagerListInner inner = this.serviceClient().listAll();
        if (inner != null) {
            return new ApplicationManagerListImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ApplicationManagerList> listAllWithResponse(Context context) {
        Response<ApplicationManagerListInner> inner = this.serviceClient().listAllWithResponse(context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ApplicationManagerListImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ApplicationManager getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String applicationManagerName = Utils.getValueFromIdByName(id, "applicationManagers");
        if (applicationManagerName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'applicationManagers'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, applicationManagerName, Context.NONE).getValue();
    }

    public Response<ApplicationManager> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String applicationManagerName = Utils.getValueFromIdByName(id, "applicationManagers");
        if (applicationManagerName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'applicationManagers'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, applicationManagerName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String applicationManagerName = Utils.getValueFromIdByName(id, "applicationManagers");
        if (applicationManagerName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'applicationManagers'.", id)));
        }
        this.delete(resourceGroupName, applicationManagerName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String applicationManagerName = Utils.getValueFromIdByName(id, "applicationManagers");
        if (applicationManagerName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'applicationManagers'.", id)));
        }
        this.delete(resourceGroupName, applicationManagerName, context);
    }

    private ApplicationManagersClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.azurelogistics.AzurelogisticsManager manager() {
        return this.serviceManager;
    }

    public ApplicationManagerImpl define(String name) {
        return new ApplicationManagerImpl(name, this.manager());
    }
}
