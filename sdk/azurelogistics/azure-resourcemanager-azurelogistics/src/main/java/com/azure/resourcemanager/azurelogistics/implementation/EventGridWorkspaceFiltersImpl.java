// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurelogistics.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.azurelogistics.fluent.EventGridWorkspaceFiltersClient;
import com.azure.resourcemanager.azurelogistics.fluent.models.EventGridFilterInner;
import com.azure.resourcemanager.azurelogistics.models.EventGridFilter;
import com.azure.resourcemanager.azurelogistics.models.EventGridWorkspaceFilters;

public final class EventGridWorkspaceFiltersImpl implements EventGridWorkspaceFilters {
    private static final ClientLogger LOGGER = new ClientLogger(EventGridWorkspaceFiltersImpl.class);

    private final EventGridWorkspaceFiltersClient innerClient;

    private final com.azure.resourcemanager.azurelogistics.AzurelogisticsManager serviceManager;

    public EventGridWorkspaceFiltersImpl(
        EventGridWorkspaceFiltersClient innerClient,
        com.azure.resourcemanager.azurelogistics.AzurelogisticsManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public EventGridFilter get(String resourceGroupName, String workspaceName, String eventGridFilterName) {
        EventGridFilterInner inner = this.serviceClient().get(resourceGroupName, workspaceName, eventGridFilterName);
        if (inner != null) {
            return new EventGridFilterImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<EventGridFilter> getWithResponse(
        String resourceGroupName, String workspaceName, String eventGridFilterName, Context context) {
        Response<EventGridFilterInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, workspaceName, eventGridFilterName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new EventGridFilterImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String workspaceName, String eventGridFilterName) {
        this.serviceClient().delete(resourceGroupName, workspaceName, eventGridFilterName);
    }

    public Response<Void> deleteWithResponse(
        String resourceGroupName, String workspaceName, String eventGridFilterName, Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, workspaceName, eventGridFilterName, context);
    }

    public PagedIterable<EventGridFilter> list(String resourceGroupName, String workspaceName) {
        PagedIterable<EventGridFilterInner> inner = this.serviceClient().list(resourceGroupName, workspaceName);
        return Utils.mapPage(inner, inner1 -> new EventGridFilterImpl(inner1, this.manager()));
    }

    public PagedIterable<EventGridFilter> list(String resourceGroupName, String workspaceName, Context context) {
        PagedIterable<EventGridFilterInner> inner =
            this.serviceClient().list(resourceGroupName, workspaceName, context);
        return Utils.mapPage(inner, inner1 -> new EventGridFilterImpl(inner1, this.manager()));
    }

    public EventGridFilter getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = Utils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String eventGridFilterName = Utils.getValueFromIdByName(id, "eventGridFilters");
        if (eventGridFilterName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'eventGridFilters'.", id)));
        }
        return this.getWithResponse(resourceGroupName, workspaceName, eventGridFilterName, Context.NONE).getValue();
    }

    public Response<EventGridFilter> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = Utils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String eventGridFilterName = Utils.getValueFromIdByName(id, "eventGridFilters");
        if (eventGridFilterName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'eventGridFilters'.", id)));
        }
        return this.getWithResponse(resourceGroupName, workspaceName, eventGridFilterName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = Utils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String eventGridFilterName = Utils.getValueFromIdByName(id, "eventGridFilters");
        if (eventGridFilterName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'eventGridFilters'.", id)));
        }
        this.deleteWithResponse(resourceGroupName, workspaceName, eventGridFilterName, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = Utils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String eventGridFilterName = Utils.getValueFromIdByName(id, "eventGridFilters");
        if (eventGridFilterName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'eventGridFilters'.", id)));
        }
        return this.deleteWithResponse(resourceGroupName, workspaceName, eventGridFilterName, context);
    }

    private EventGridWorkspaceFiltersClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.azurelogistics.AzurelogisticsManager manager() {
        return this.serviceManager;
    }

    public EventGridFilterImpl define(String name) {
        return new EventGridFilterImpl(name, this.manager());
    }
}
