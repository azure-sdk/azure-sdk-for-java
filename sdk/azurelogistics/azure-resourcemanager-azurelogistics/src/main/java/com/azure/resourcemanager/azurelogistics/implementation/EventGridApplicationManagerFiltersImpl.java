// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurelogistics.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.azurelogistics.fluent.EventGridApplicationManagerFiltersClient;
import com.azure.resourcemanager.azurelogistics.fluent.models.EventGridFilterInner;
import com.azure.resourcemanager.azurelogistics.models.EventGridApplicationManagerFilters;
import com.azure.resourcemanager.azurelogistics.models.EventGridFilter;

public final class EventGridApplicationManagerFiltersImpl implements EventGridApplicationManagerFilters {
    private static final ClientLogger LOGGER = new ClientLogger(EventGridApplicationManagerFiltersImpl.class);

    private final EventGridApplicationManagerFiltersClient innerClient;

    private final com.azure.resourcemanager.azurelogistics.AzurelogisticsManager serviceManager;

    public EventGridApplicationManagerFiltersImpl(
        EventGridApplicationManagerFiltersClient innerClient,
        com.azure.resourcemanager.azurelogistics.AzurelogisticsManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public EventGridFilter get(String resourceGroupName, String applicationManagerName, String eventGridFilterName) {
        EventGridFilterInner inner =
            this.serviceClient().get(resourceGroupName, applicationManagerName, eventGridFilterName);
        if (inner != null) {
            return new EventGridFilterImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<EventGridFilter> getWithResponse(
        String resourceGroupName, String applicationManagerName, String eventGridFilterName, Context context) {
        Response<EventGridFilterInner> inner =
            this
                .serviceClient()
                .getWithResponse(resourceGroupName, applicationManagerName, eventGridFilterName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new EventGridFilterImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public EventGridFilter put(
        String resourceGroupName,
        String applicationManagerName,
        String eventGridFilterName,
        EventGridFilterInner eventGridFilter) {
        EventGridFilterInner inner =
            this.serviceClient().put(resourceGroupName, applicationManagerName, eventGridFilterName, eventGridFilter);
        if (inner != null) {
            return new EventGridFilterImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<EventGridFilter> putWithResponse(
        String resourceGroupName,
        String applicationManagerName,
        String eventGridFilterName,
        EventGridFilterInner eventGridFilter,
        Context context) {
        Response<EventGridFilterInner> inner =
            this
                .serviceClient()
                .putWithResponse(
                    resourceGroupName, applicationManagerName, eventGridFilterName, eventGridFilter, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new EventGridFilterImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String applicationManagerName, String eventGridFilterName) {
        this.serviceClient().delete(resourceGroupName, applicationManagerName, eventGridFilterName);
    }

    public Response<Void> deleteWithResponse(
        String resourceGroupName, String applicationManagerName, String eventGridFilterName, Context context) {
        return this
            .serviceClient()
            .deleteWithResponse(resourceGroupName, applicationManagerName, eventGridFilterName, context);
    }

    public PagedIterable<EventGridFilter> list(String resourceGroupName, String applicationManagerName) {
        PagedIterable<EventGridFilterInner> inner =
            this.serviceClient().list(resourceGroupName, applicationManagerName);
        return Utils.mapPage(inner, inner1 -> new EventGridFilterImpl(inner1, this.manager()));
    }

    public PagedIterable<EventGridFilter> list(
        String resourceGroupName, String applicationManagerName, Context context) {
        PagedIterable<EventGridFilterInner> inner =
            this.serviceClient().list(resourceGroupName, applicationManagerName, context);
        return Utils.mapPage(inner, inner1 -> new EventGridFilterImpl(inner1, this.manager()));
    }

    private EventGridApplicationManagerFiltersClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.azurelogistics.AzurelogisticsManager manager() {
        return this.serviceManager;
    }
}
