// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storage.generated.implementation;

import com.azure.core.management.SystemData;
import com.azure.resourcemanager.storage.generated.fluent.models.ImmutabilityPolicyInner;
import com.azure.resourcemanager.storage.generated.models.ImmutabilityPolicy;
import com.azure.resourcemanager.storage.generated.models.ImmutabilityPolicyState;

public final class ImmutabilityPolicyImpl implements ImmutabilityPolicy {
    private ImmutabilityPolicyInner innerObject;

    private final com.azure.resourcemanager.storage.generated.StorageManager serviceManager;

    ImmutabilityPolicyImpl(ImmutabilityPolicyInner innerObject,
        com.azure.resourcemanager.storage.generated.StorageManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
    }

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String etag() {
        return this.innerModel().etag();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public Integer immutabilityPeriodSinceCreationInDays() {
        return this.innerModel().immutabilityPeriodSinceCreationInDays();
    }

    public ImmutabilityPolicyState state() {
        return this.innerModel().state();
    }

    public Boolean allowProtectedAppendWrites() {
        return this.innerModel().allowProtectedAppendWrites();
    }

    public Boolean allowProtectedAppendWritesAll() {
        return this.innerModel().allowProtectedAppendWritesAll();
    }

    public ImmutabilityPolicyInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.storage.generated.StorageManager manager() {
        return this.serviceManager;
    }
}
