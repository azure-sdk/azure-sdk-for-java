// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storage.generated.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Dual-stack endpoint preference defines the type of network, either dualstack/ipv4/ipv6 endpoints are going to be
 * published.
 */
@Fluent
public final class DualStackEndpointPreference {
    /*
     * A boolean flag which indicates whether dual-stack storage endpoints are to be published.
     */
    @JsonProperty(value = "defaultDualStackEndpoints")
    private Boolean defaultDualStackEndpoints;

    /*
     * A boolean flag which indicates whether IPv4 storage endpoints are to be published.
     */
    @JsonProperty(value = "publishIpv4Endpoint")
    private Boolean publishIpv4Endpoint;

    /*
     * A boolean flag which indicates whether IPv6 storage endpoints are to be published.
     */
    @JsonProperty(value = "publishIpv6Endpoint")
    private Boolean publishIpv6Endpoint;

    /** Creates an instance of DualStackEndpointPreference class. */
    public DualStackEndpointPreference() {
    }

    /**
     * Get the defaultDualStackEndpoints property: A boolean flag which indicates whether dual-stack storage endpoints
     * are to be published.
     *
     * @return the defaultDualStackEndpoints value.
     */
    public Boolean defaultDualStackEndpoints() {
        return this.defaultDualStackEndpoints;
    }

    /**
     * Set the defaultDualStackEndpoints property: A boolean flag which indicates whether dual-stack storage endpoints
     * are to be published.
     *
     * @param defaultDualStackEndpoints the defaultDualStackEndpoints value to set.
     * @return the DualStackEndpointPreference object itself.
     */
    public DualStackEndpointPreference withDefaultDualStackEndpoints(Boolean defaultDualStackEndpoints) {
        this.defaultDualStackEndpoints = defaultDualStackEndpoints;
        return this;
    }

    /**
     * Get the publishIpv4Endpoint property: A boolean flag which indicates whether IPv4 storage endpoints are to be
     * published.
     *
     * @return the publishIpv4Endpoint value.
     */
    public Boolean publishIpv4Endpoint() {
        return this.publishIpv4Endpoint;
    }

    /**
     * Set the publishIpv4Endpoint property: A boolean flag which indicates whether IPv4 storage endpoints are to be
     * published.
     *
     * @param publishIpv4Endpoint the publishIpv4Endpoint value to set.
     * @return the DualStackEndpointPreference object itself.
     */
    public DualStackEndpointPreference withPublishIpv4Endpoint(Boolean publishIpv4Endpoint) {
        this.publishIpv4Endpoint = publishIpv4Endpoint;
        return this;
    }

    /**
     * Get the publishIpv6Endpoint property: A boolean flag which indicates whether IPv6 storage endpoints are to be
     * published.
     *
     * @return the publishIpv6Endpoint value.
     */
    public Boolean publishIpv6Endpoint() {
        return this.publishIpv6Endpoint;
    }

    /**
     * Set the publishIpv6Endpoint property: A boolean flag which indicates whether IPv6 storage endpoints are to be
     * published.
     *
     * @param publishIpv6Endpoint the publishIpv6Endpoint value to set.
     * @return the DualStackEndpointPreference object itself.
     */
    public DualStackEndpointPreference withPublishIpv6Endpoint(Boolean publishIpv6Endpoint) {
        this.publishIpv6Endpoint = publishIpv6Endpoint;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
