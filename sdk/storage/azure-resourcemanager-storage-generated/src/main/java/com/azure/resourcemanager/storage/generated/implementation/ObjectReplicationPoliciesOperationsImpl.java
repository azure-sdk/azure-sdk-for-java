// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storage.generated.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.storage.generated.fluent.ObjectReplicationPoliciesOperationsClient;
import com.azure.resourcemanager.storage.generated.fluent.models.ObjectReplicationPoliciesInner;
import com.azure.resourcemanager.storage.generated.fluent.models.ObjectReplicationPolicyInner;
import com.azure.resourcemanager.storage.generated.models.ObjectReplicationPolicies;
import com.azure.resourcemanager.storage.generated.models.ObjectReplicationPoliciesOperations;
import com.azure.resourcemanager.storage.generated.models.ObjectReplicationPolicy;

public final class ObjectReplicationPoliciesOperationsImpl implements ObjectReplicationPoliciesOperations {
    private static final ClientLogger LOGGER = new ClientLogger(ObjectReplicationPoliciesOperationsImpl.class);

    private final ObjectReplicationPoliciesOperationsClient innerClient;

    private final com.azure.resourcemanager.storage.generated.StorageManager serviceManager;

    public ObjectReplicationPoliciesOperationsImpl(ObjectReplicationPoliciesOperationsClient innerClient,
        com.azure.resourcemanager.storage.generated.StorageManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<ObjectReplicationPolicies> listWithResponse(String resourceGroupName, String accountName,
        Context context) {
        Response<ObjectReplicationPoliciesInner> inner
            = this.serviceClient().listWithResponse(resourceGroupName, accountName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new ObjectReplicationPoliciesImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ObjectReplicationPolicies list(String resourceGroupName, String accountName) {
        ObjectReplicationPoliciesInner inner = this.serviceClient().list(resourceGroupName, accountName);
        if (inner != null) {
            return new ObjectReplicationPoliciesImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ObjectReplicationPolicy> getWithResponse(String resourceGroupName, String accountName,
        String objectReplicationPolicyId, Context context) {
        Response<ObjectReplicationPolicyInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, accountName, objectReplicationPolicyId, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new ObjectReplicationPolicyImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ObjectReplicationPolicy get(String resourceGroupName, String accountName, String objectReplicationPolicyId) {
        ObjectReplicationPolicyInner inner
            = this.serviceClient().get(resourceGroupName, accountName, objectReplicationPolicyId);
        if (inner != null) {
            return new ObjectReplicationPolicyImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteWithResponse(String resourceGroupName, String accountName,
        String objectReplicationPolicyId, Context context) {
        return this.serviceClient()
            .deleteWithResponse(resourceGroupName, accountName, objectReplicationPolicyId, context);
    }

    public void delete(String resourceGroupName, String accountName, String objectReplicationPolicyId) {
        this.serviceClient().delete(resourceGroupName, accountName, objectReplicationPolicyId);
    }

    public ObjectReplicationPolicy getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = ResourceManagerUtils.getValueFromIdByName(id, "storageAccounts");
        if (accountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'storageAccounts'.", id)));
        }
        String objectReplicationPolicyId = ResourceManagerUtils.getValueFromIdByName(id, "objectReplicationPolicies");
        if (objectReplicationPolicyId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'objectReplicationPolicies'.", id)));
        }
        return this.getWithResponse(resourceGroupName, accountName, objectReplicationPolicyId, Context.NONE).getValue();
    }

    public Response<ObjectReplicationPolicy> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = ResourceManagerUtils.getValueFromIdByName(id, "storageAccounts");
        if (accountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'storageAccounts'.", id)));
        }
        String objectReplicationPolicyId = ResourceManagerUtils.getValueFromIdByName(id, "objectReplicationPolicies");
        if (objectReplicationPolicyId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'objectReplicationPolicies'.", id)));
        }
        return this.getWithResponse(resourceGroupName, accountName, objectReplicationPolicyId, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = ResourceManagerUtils.getValueFromIdByName(id, "storageAccounts");
        if (accountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'storageAccounts'.", id)));
        }
        String objectReplicationPolicyId = ResourceManagerUtils.getValueFromIdByName(id, "objectReplicationPolicies");
        if (objectReplicationPolicyId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'objectReplicationPolicies'.", id)));
        }
        this.deleteWithResponse(resourceGroupName, accountName, objectReplicationPolicyId, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = ResourceManagerUtils.getValueFromIdByName(id, "storageAccounts");
        if (accountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'storageAccounts'.", id)));
        }
        String objectReplicationPolicyId = ResourceManagerUtils.getValueFromIdByName(id, "objectReplicationPolicies");
        if (objectReplicationPolicyId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'objectReplicationPolicies'.", id)));
        }
        return this.deleteWithResponse(resourceGroupName, accountName, objectReplicationPolicyId, context);
    }

    private ObjectReplicationPoliciesOperationsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.storage.generated.StorageManager manager() {
        return this.serviceManager;
    }

    public ObjectReplicationPolicyImpl define(String name) {
        return new ObjectReplicationPolicyImpl(name, this.manager());
    }
}
