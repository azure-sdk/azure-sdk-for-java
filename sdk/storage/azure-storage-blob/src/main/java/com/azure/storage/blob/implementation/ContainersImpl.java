// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.storage.blob.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.storage.blob.BlobServiceVersion;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in Containers.
 */
public final class ContainersImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final ContainersService service;

    /**
     * The service client containing this operation class.
     */
    private final BlobClientImpl client;

    /**
     * Initializes an instance of ContainersImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    ContainersImpl(BlobClientImpl client) {
        this.service
            = RestProxy.create(ContainersService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * Gets Service version.
     * 
     * @return the serviceVersion value.
     */
    public BlobServiceVersion getServiceVersion() {
        return client.getServiceVersion();
    }

    /**
     * The interface defining all the services for BlobClientContainers to be used by the proxy service to perform REST
     * calls.
     */
    @Host("{url}")
    @ServiceInterface(name = "BlobClientContainers")
    public interface ContainersService {
        @Put("/{containerName}?restype=container")
        @ExpectedResponses({ 201 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> create(@HostParam("url") String url, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("x-ms-version") String xMsVersion, @PathParam("containerName") String containerName,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Put("/{containerName}?restype=container")
        @ExpectedResponses({ 201 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> createSync(@HostParam("url") String url, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("x-ms-version") String xMsVersion, @PathParam("containerName") String containerName,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/{containerName}?restype=container")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> getProperties(@HostParam("url") String url,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("x-ms-version") String xMsVersion,
            @PathParam("containerName") String containerName, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/{containerName}?restype=container")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> getPropertiesSync(@HostParam("url") String url, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("x-ms-version") String xMsVersion, @PathParam("containerName") String containerName,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Delete("/{containerName}?restype=container")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> delete(@HostParam("url") String url, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("x-ms-version") String xMsVersion, @PathParam("containerName") String containerName,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Delete("/{containerName}?restype=container")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> deleteSync(@HostParam("url") String url, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("x-ms-version") String xMsVersion, @PathParam("containerName") String containerName,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Put("/{containerName}?restype=container&comp=metadata")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> setMetadata(@HostParam("url") String url, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("x-ms-version") String xMsVersion, @PathParam("containerName") String containerName,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Put("/{containerName}?restype=container&comp=metadata")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> setMetadataSync(@HostParam("url") String url, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("x-ms-version") String xMsVersion, @PathParam("containerName") String containerName,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/{containerName}?restype=container&comp=acl")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getAccessPolicy(@HostParam("url") String url,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("x-ms-version") String xMsVersion,
            @PathParam("containerName") String containerName, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/{containerName}?restype=container&comp=acl")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getAccessPolicySync(@HostParam("url") String url,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("x-ms-version") String xMsVersion,
            @PathParam("containerName") String containerName, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Put("/{containerName}?restype=container&comp=acl")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> setAccessPolicy(@HostParam("url") String url,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("x-ms-version") String xMsVersion,
            @PathParam("containerName") String containerName, @HeaderParam("Accept") String accept,
            @BodyParam("application/xml") BinaryData containerAcl, RequestOptions requestOptions, Context context);

        @Put("/{containerName}?restype=container&comp=acl")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> setAccessPolicySync(@HostParam("url") String url,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("x-ms-version") String xMsVersion,
            @PathParam("containerName") String containerName, @HeaderParam("Accept") String accept,
            @BodyParam("application/xml") BinaryData containerAcl, RequestOptions requestOptions, Context context);

        @Put("/{containerName}?restype=container&comp=undelete")
        @ExpectedResponses({ 201 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> restore(@HostParam("url") String url, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("x-ms-version") String xMsVersion, @PathParam("containerName") String containerName,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Put("/{containerName}?restype=container&comp=undelete")
        @ExpectedResponses({ 201 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> restoreSync(@HostParam("url") String url, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("x-ms-version") String xMsVersion, @PathParam("containerName") String containerName,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Put("/{containerName}?restype=container&comp=rename")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> rename(@HostParam("url") String url, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("x-ms-version") String xMsVersion, @PathParam("containerName") String containerName,
            @HeaderParam("x-ms-source-container-name") String sourceContainerName, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Put("/{containerName}?restype=container&comp=rename")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> renameSync(@HostParam("url") String url, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("x-ms-version") String xMsVersion, @PathParam("containerName") String containerName,
            @HeaderParam("x-ms-source-container-name") String sourceContainerName, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Post("/{containerName}?restype=container&comp=batch")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> submitBatch(@HostParam("url") String url,
            @PathParam("containerName") String containerName, @HeaderParam("Content-Type") String multipartContentType,
            @HeaderParam("Content-Length") long contentLength, @HeaderParam("x-ms-version") String xMsVersion,
            @HeaderParam("Accept") String accept, @BodyParam("multipart/mixed") BinaryData body,
            RequestOptions requestOptions, Context context);

        @Post("/{containerName}?restype=container&comp=batch")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> submitBatchSync(@HostParam("url") String url,
            @PathParam("containerName") String containerName, @HeaderParam("Content-Type") String multipartContentType,
            @HeaderParam("Content-Length") long contentLength, @HeaderParam("x-ms-version") String xMsVersion,
            @HeaderParam("Accept") String accept, @BodyParam("multipart/mixed") BinaryData body,
            RequestOptions requestOptions, Context context);

        @Get("/{containerName}?restype=container&comp=blobs")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> filterBlobs(@HostParam("url") String url,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("x-ms-version") String xMsVersion,
            @PathParam("containerName") String containerName, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/{containerName}?restype=container&comp=blobs")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> filterBlobsSync(@HostParam("url") String url,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("x-ms-version") String xMsVersion,
            @PathParam("containerName") String containerName, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Put("/{containerName}?comp=lease&restype=container&acquire")
        @ExpectedResponses({ 201 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> acquireLease(@HostParam("url") String url, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("x-ms-version") String xMsVersion, @PathParam("containerName") String containerName,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Put("/{containerName}?comp=lease&restype=container&acquire")
        @ExpectedResponses({ 201 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> acquireLeaseSync(@HostParam("url") String url, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("x-ms-version") String xMsVersion, @PathParam("containerName") String containerName,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Put("/{containerName}?comp=lease&restype=container&release")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> releaseLease(@HostParam("url") String url, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("x-ms-version") String xMsVersion, @PathParam("containerName") String containerName,
            @HeaderParam("x-ms-lease-id") String leaseId, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Put("/{containerName}?comp=lease&restype=container&release")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> releaseLeaseSync(@HostParam("url") String url, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("x-ms-version") String xMsVersion, @PathParam("containerName") String containerName,
            @HeaderParam("x-ms-lease-id") String leaseId, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Put("/{containerName}?comp=lease&restype=container&renew")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> renewLease(@HostParam("url") String url, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("x-ms-version") String xMsVersion, @PathParam("containerName") String containerName,
            @HeaderParam("x-ms-lease-id") String leaseId, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Put("/{containerName}?comp=lease&restype=container&renew")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> renewLeaseSync(@HostParam("url") String url, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("x-ms-version") String xMsVersion, @PathParam("containerName") String containerName,
            @HeaderParam("x-ms-lease-id") String leaseId, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Put("/{containerName}?comp=lease&restype=container&break")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> breakLease(@HostParam("url") String url, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("x-ms-version") String xMsVersion, @PathParam("containerName") String containerName,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Put("/{containerName}?comp=lease&restype=container&break")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> breakLeaseSync(@HostParam("url") String url, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("x-ms-version") String xMsVersion, @PathParam("containerName") String containerName,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Put("/{containerName}?comp=lease&restype=container&change")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> changeLease(@HostParam("url") String url, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("x-ms-version") String xMsVersion, @PathParam("containerName") String containerName,
            @HeaderParam("x-ms-lease-id") String leaseId, @HeaderParam("x-ms-proposed-lease-id") String proposedLeaseId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Put("/{containerName}?comp=lease&restype=container&change")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> changeLeaseSync(@HostParam("url") String url, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("x-ms-version") String xMsVersion, @PathParam("containerName") String containerName,
            @HeaderParam("x-ms-lease-id") String leaseId, @HeaderParam("x-ms-proposed-lease-id") String proposedLeaseId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/{containerName}?restype=container&comp=list&flat")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listBlobFlatSegment(@HostParam("url") String url,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("x-ms-version") String xMsVersion,
            @PathParam("containerName") String containerName, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/{containerName}?restype=container&comp=list&flat")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listBlobFlatSegmentSync(@HostParam("url") String url,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("x-ms-version") String xMsVersion,
            @PathParam("containerName") String containerName, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/{containerName}?restype=container&comp=list&hierarchy")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listBlobHierarchySegment(@HostParam("url") String url,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("x-ms-version") String xMsVersion,
            @PathParam("containerName") String containerName, @QueryParam("delimiter") String delimiter,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/{containerName}?restype=container&comp=list&hierarchy")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listBlobHierarchySegmentSync(@HostParam("url") String url,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("x-ms-version") String xMsVersion,
            @PathParam("containerName") String containerName, @QueryParam("delimiter") String delimiter,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/{containerName}?restype=account&comp=properties")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> getAccountInfo(@HostParam("url") String url,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("x-ms-version") String xMsVersion,
            @PathParam("containerName") String containerName, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/{containerName}?restype=account&comp=properties")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> getAccountInfoSync(@HostParam("url") String url, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("x-ms-version") String xMsVersion, @PathParam("containerName") String containerName,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);
    }

    /**
     * Creates a new container under the specified account. If the container with the same name already exists, the
     * operation fails.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-meta</td><td>Map&lt;String, String&gt;</td><td>No</td><td>The metadata headers.</td></tr>
     * <tr><td>x-ms-blob-public-access</td><td>String</td><td>No</td><td>The public access setting for the container.
     * Allowed values: "blob", "container".</td></tr>
     * <tr><td>x-ms-default-encryption-scope</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later.
     * Specifies the default encryption scope to set on the container and use for all future writes.</td></tr>
     * <tr><td>x-ms-deny-encryption-scope-override</td><td>Boolean</td><td>No</td><td>If a blob has a lease and the
     * lease is of infinite duration then the value of this header is set to true, otherwise it is set to
     * false.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> createWithResponseAsync(RequestOptions requestOptions) {
        final String contentType = "application/xml";
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.create(this.client.getUrl(), contentType, this.client.getServiceVersion().getVersion(),
                this.client.getContainerName(), accept, requestOptions, context));
    }

    /**
     * Creates a new container under the specified account. If the container with the same name already exists, the
     * operation fails.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-meta</td><td>Map&lt;String, String&gt;</td><td>No</td><td>The metadata headers.</td></tr>
     * <tr><td>x-ms-blob-public-access</td><td>String</td><td>No</td><td>The public access setting for the container.
     * Allowed values: "blob", "container".</td></tr>
     * <tr><td>x-ms-default-encryption-scope</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later.
     * Specifies the default encryption scope to set on the container and use for all future writes.</td></tr>
     * <tr><td>x-ms-deny-encryption-scope-override</td><td>Boolean</td><td>No</td><td>If a blob has a lease and the
     * lease is of infinite duration then the value of this header is set to true, otherwise it is set to
     * false.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> createWithResponse(RequestOptions requestOptions) {
        final String contentType = "application/xml";
        final String accept = "application/json";
        return service.createSync(this.client.getUrl(), contentType, this.client.getServiceVersion().getVersion(),
            this.client.getContainerName(), accept, requestOptions, Context.NONE);
    }

    /**
     * returns all user-defined metadata and system properties for the specified container. The data returned does not
     * include the container's list of blobs.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-lease-id</td><td>String</td><td>No</td><td>If specified, the operation only succeeds if the
     * resource's lease is active and matches this ID.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> getPropertiesWithResponseAsync(RequestOptions requestOptions) {
        final String contentType = "application/xml";
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getProperties(this.client.getUrl(), contentType,
            this.client.getServiceVersion().getVersion(), this.client.getContainerName(), accept, requestOptions,
            context));
    }

    /**
     * returns all user-defined metadata and system properties for the specified container. The data returned does not
     * include the container's list of blobs.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-lease-id</td><td>String</td><td>No</td><td>If specified, the operation only succeeds if the
     * resource's lease is active and matches this ID.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> getPropertiesWithResponse(RequestOptions requestOptions) {
        final String contentType = "application/xml";
        final String accept = "application/json";
        return service.getPropertiesSync(this.client.getUrl(), contentType,
            this.client.getServiceVersion().getVersion(), this.client.getContainerName(), accept, requestOptions,
            Context.NONE);
    }

    /**
     * operation marks the specified container for deletion. The container and any blobs contained within it are later
     * deleted during garbage collection.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-lease-id</td><td>String</td><td>No</td><td>If specified, the operation only succeeds if the
     * resource's lease is active and matches this ID.</td></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>A date-time value. A request is made under
     * the condition that the resource has been modified since the specified date-time.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>A date-time value. A request is made under
     * the condition that the resource has not been modified since the specified date-time.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteWithResponseAsync(RequestOptions requestOptions) {
        final String contentType = "application/xml";
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.delete(this.client.getUrl(), contentType, this.client.getServiceVersion().getVersion(),
                this.client.getContainerName(), accept, requestOptions, context));
    }

    /**
     * operation marks the specified container for deletion. The container and any blobs contained within it are later
     * deleted during garbage collection.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-lease-id</td><td>String</td><td>No</td><td>If specified, the operation only succeeds if the
     * resource's lease is active and matches this ID.</td></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>A date-time value. A request is made under
     * the condition that the resource has been modified since the specified date-time.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>A date-time value. A request is made under
     * the condition that the resource has not been modified since the specified date-time.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(RequestOptions requestOptions) {
        final String contentType = "application/xml";
        final String accept = "application/json";
        return service.deleteSync(this.client.getUrl(), contentType, this.client.getServiceVersion().getVersion(),
            this.client.getContainerName(), accept, requestOptions, Context.NONE);
    }

    /**
     * operation sets one or more user-defined name-value pairs for the specified container.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-lease-id</td><td>String</td><td>No</td><td>If specified, the operation only succeeds if the
     * resource's lease is active and matches this ID.</td></tr>
     * <tr><td>x-ms-meta</td><td>Map&lt;String, String&gt;</td><td>No</td><td>The metadata headers.</td></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>A date-time value. A request is made under
     * the condition that the resource has been modified since the specified date-time.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> setMetadataWithResponseAsync(RequestOptions requestOptions) {
        final String contentType = "application/xml";
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.setMetadata(this.client.getUrl(), contentType,
            this.client.getServiceVersion().getVersion(), this.client.getContainerName(), accept, requestOptions,
            context));
    }

    /**
     * operation sets one or more user-defined name-value pairs for the specified container.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-lease-id</td><td>String</td><td>No</td><td>If specified, the operation only succeeds if the
     * resource's lease is active and matches this ID.</td></tr>
     * <tr><td>x-ms-meta</td><td>Map&lt;String, String&gt;</td><td>No</td><td>The metadata headers.</td></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>A date-time value. A request is made under
     * the condition that the resource has been modified since the specified date-time.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> setMetadataWithResponse(RequestOptions requestOptions) {
        final String contentType = "application/xml";
        final String accept = "application/json";
        return service.setMetadataSync(this.client.getUrl(), contentType, this.client.getServiceVersion().getVersion(),
            this.client.getContainerName(), accept, requestOptions, Context.NONE);
    }

    /**
     * gets the permissions for the specified container. The permissions indicate whether container data may be accessed
     * publicly.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-lease-id</td><td>String</td><td>No</td><td>If specified, the operation only succeeds if the
     * resource's lease is active and matches this ID.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * [
     *      (Required){
     *         id: String (Required)
     *         accessPolicy (Required): {
     *             start: OffsetDateTime (Required)
     *             expiry: OffsetDateTime (Required)
     *             permission: String (Required)
     *         }
     *     }
     * ]
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the permissions for the specified container along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getAccessPolicyWithResponseAsync(RequestOptions requestOptions) {
        final String contentType = "application/xml";
        final String accept = "application/xml";
        return FluxUtil.withContext(context -> service.getAccessPolicy(this.client.getUrl(), contentType,
            this.client.getServiceVersion().getVersion(), this.client.getContainerName(), accept, requestOptions,
            context));
    }

    /**
     * gets the permissions for the specified container. The permissions indicate whether container data may be accessed
     * publicly.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-lease-id</td><td>String</td><td>No</td><td>If specified, the operation only succeeds if the
     * resource's lease is active and matches this ID.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * [
     *      (Required){
     *         id: String (Required)
     *         accessPolicy (Required): {
     *             start: OffsetDateTime (Required)
     *             expiry: OffsetDateTime (Required)
     *             permission: String (Required)
     *         }
     *     }
     * ]
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the permissions for the specified container along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getAccessPolicyWithResponse(RequestOptions requestOptions) {
        final String contentType = "application/xml";
        final String accept = "application/xml";
        return service.getAccessPolicySync(this.client.getUrl(), contentType,
            this.client.getServiceVersion().getVersion(), this.client.getContainerName(), accept, requestOptions,
            Context.NONE);
    }

    /**
     * sets the permissions for the specified container. The permissions indicate whether blobs in a container may be
     * accessed publicly.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-lease-id</td><td>String</td><td>No</td><td>If specified, the operation only succeeds if the
     * resource's lease is active and matches this ID.</td></tr>
     * <tr><td>x-ms-blob-public-access</td><td>String</td><td>No</td><td>The public access setting for the container.
     * Allowed values: "blob", "container".</td></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>A date-time value. A request is made under
     * the condition that the resource has been modified since the specified date-time.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>A date-time value. A request is made under
     * the condition that the resource has not been modified since the specified date-time.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * [
     *      (Required){
     *         id: String (Required)
     *         accessPolicy (Required): {
     *             start: OffsetDateTime (Required)
     *             expiry: OffsetDateTime (Required)
     *             permission: String (Required)
     *         }
     *     }
     * ]
     * }
     * </pre>
     * 
     * @param containerAcl The access control list for the container.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> setAccessPolicyWithResponseAsync(BinaryData containerAcl,
        RequestOptions requestOptions) {
        final String contentType = "application/xml";
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.setAccessPolicy(this.client.getUrl(), contentType,
            this.client.getServiceVersion().getVersion(), this.client.getContainerName(), accept, containerAcl,
            requestOptions, context));
    }

    /**
     * sets the permissions for the specified container. The permissions indicate whether blobs in a container may be
     * accessed publicly.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-lease-id</td><td>String</td><td>No</td><td>If specified, the operation only succeeds if the
     * resource's lease is active and matches this ID.</td></tr>
     * <tr><td>x-ms-blob-public-access</td><td>String</td><td>No</td><td>The public access setting for the container.
     * Allowed values: "blob", "container".</td></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>A date-time value. A request is made under
     * the condition that the resource has been modified since the specified date-time.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>A date-time value. A request is made under
     * the condition that the resource has not been modified since the specified date-time.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * [
     *      (Required){
     *         id: String (Required)
     *         accessPolicy (Required): {
     *             start: OffsetDateTime (Required)
     *             expiry: OffsetDateTime (Required)
     *             permission: String (Required)
     *         }
     *     }
     * ]
     * }
     * </pre>
     * 
     * @param containerAcl The access control list for the container.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> setAccessPolicyWithResponse(BinaryData containerAcl, RequestOptions requestOptions) {
        final String contentType = "application/xml";
        final String accept = "application/json";
        return service.setAccessPolicySync(this.client.getUrl(), contentType,
            this.client.getServiceVersion().getVersion(), this.client.getContainerName(), accept, containerAcl,
            requestOptions, Context.NONE);
    }

    /**
     * Restores a previously-deleted container.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-deleted-container-name</td><td>String</td><td>No</td><td>Optional. Version 2019-12-12 and later.
     * Specifies the name of the deleted container to restore.</td></tr>
     * <tr><td>x-ms-deleted-container-version</td><td>String</td><td>No</td><td>Optional. Version 2019-12-12 and later.
     * Specifies the version of the deleted container to restore.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> restoreWithResponseAsync(RequestOptions requestOptions) {
        final String contentType = "application/xml";
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.restore(this.client.getUrl(), contentType, this.client.getServiceVersion().getVersion(),
                this.client.getContainerName(), accept, requestOptions, context));
    }

    /**
     * Restores a previously-deleted container.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-deleted-container-name</td><td>String</td><td>No</td><td>Optional. Version 2019-12-12 and later.
     * Specifies the name of the deleted container to restore.</td></tr>
     * <tr><td>x-ms-deleted-container-version</td><td>String</td><td>No</td><td>Optional. Version 2019-12-12 and later.
     * Specifies the version of the deleted container to restore.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> restoreWithResponse(RequestOptions requestOptions) {
        final String contentType = "application/xml";
        final String accept = "application/json";
        return service.restoreSync(this.client.getUrl(), contentType, this.client.getServiceVersion().getVersion(),
            this.client.getContainerName(), accept, requestOptions, Context.NONE);
    }

    /**
     * Renames an existing container.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-source-lease-id</td><td>String</td><td>No</td><td>A lease ID for the source path. If specified, the
     * source path must have an active lease and the lease ID must match.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param sourceContainerName Required. Specifies the name of the container to rename.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> renameWithResponseAsync(String sourceContainerName, RequestOptions requestOptions) {
        final String contentType = "application/xml";
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.rename(this.client.getUrl(), contentType, this.client.getServiceVersion().getVersion(),
                this.client.getContainerName(), sourceContainerName, accept, requestOptions, context));
    }

    /**
     * Renames an existing container.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-source-lease-id</td><td>String</td><td>No</td><td>A lease ID for the source path. If specified, the
     * source path must have an active lease and the lease ID must match.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param sourceContainerName Required. Specifies the name of the container to rename.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> renameWithResponse(String sourceContainerName, RequestOptions requestOptions) {
        final String contentType = "application/xml";
        final String accept = "application/json";
        return service.renameSync(this.client.getUrl(), contentType, this.client.getServiceVersion().getVersion(),
            this.client.getContainerName(), sourceContainerName, accept, requestOptions, Context.NONE);
    }

    /**
     * The Batch operation allows multiple API calls to be embedded into a single HTTP request.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     body (Required): {
     *         content: BinaryData (Required)
     *         filename: String (Optional)
     *         contentType: String (Optional)
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     body (Required): {
     *         content: BinaryData (Required)
     *         filename: String (Optional)
     *         contentType: String (Optional)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param contentLength The length of the request.
     * @param body The body of the request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> submitBatchWithResponseAsync(long contentLength, BinaryData body,
        RequestOptions requestOptions) {
        final String multipartContentType = "multipart/mixed";
        final String accept = "multipart/mixed";
        return FluxUtil.withContext(
            context -> service.submitBatch(this.client.getUrl(), this.client.getContainerName(), multipartContentType,
                contentLength, this.client.getServiceVersion().getVersion(), accept, body, requestOptions, context));
    }

    /**
     * The Batch operation allows multiple API calls to be embedded into a single HTTP request.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     body (Required): {
     *         content: BinaryData (Required)
     *         filename: String (Optional)
     *         contentType: String (Optional)
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     body (Required): {
     *         content: BinaryData (Required)
     *         filename: String (Optional)
     *         contentType: String (Optional)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param contentLength The length of the request.
     * @param body The body of the request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> submitBatchWithResponse(long contentLength, BinaryData body,
        RequestOptions requestOptions) {
        final String multipartContentType = "multipart/mixed";
        final String accept = "multipart/mixed";
        return service.submitBatchSync(this.client.getUrl(), this.client.getContainerName(), multipartContentType,
            contentLength, this.client.getServiceVersion().getVersion(), accept, body, requestOptions, Context.NONE);
    }

    /**
     * The Filter Blobs operation enables callers to list blobs in a container whose tags match a given search
     * expression. Filter blobs searches within the given container.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * <tr><td>where</td><td>String</td><td>No</td><td>Filters the results to return only to return only blobs whose
     * tags match the specified expression.</td></tr>
     * <tr><td>marker</td><td>String</td><td>No</td><td>A string value that identifies the portion of the list of
     * containers to be returned with the next listing operation. The operation returns the NextMarker value within the
     * response body if the listing operation did not return all containers remaining to be listed with the current
     * page. The NextMarker value can be used as the value for the marker parameter in a subsequent call to request the
     * next page of list items. The marker value is opaque to the client.</td></tr>
     * <tr><td>maxresults</td><td>Integer</td><td>No</td><td>Specifies the maximum number of containers to return. If
     * the request does not specify maxresults, or specifies a value greater than 5000, the server will return up to
     * 5000 items.</td></tr>
     * <tr><td>include</td><td>List&lt;String&gt;</td><td>No</td><td>Include this parameter to specify one or more
     * datasets to include in the response. In the form of "," separated string.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     serviceEndpoint: String (Required)
     *     where: String (Required)
     *     blobs (Required): [
     *          (Required){
     *             name: String (Required)
     *             containerName: String (Required)
     *             tags (Optional): {
     *                 blobTagSet (Required): [
     *                      (Required){
     *                         key: String (Required)
     *                         value: String (Required)
     *                     }
     *                 ]
     *             }
     *             versionId: String (Optional)
     *             isCurrentVersion: Boolean (Optional)
     *         }
     *     ]
     *     nextMarker: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the result of a Filter Blobs API call along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> filterBlobsWithResponseAsync(RequestOptions requestOptions) {
        final String contentType = "application/xml";
        final String accept = "application/xml";
        return FluxUtil.withContext(context -> service.filterBlobs(this.client.getUrl(), contentType,
            this.client.getServiceVersion().getVersion(), this.client.getContainerName(), accept, requestOptions,
            context));
    }

    /**
     * The Filter Blobs operation enables callers to list blobs in a container whose tags match a given search
     * expression. Filter blobs searches within the given container.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * <tr><td>where</td><td>String</td><td>No</td><td>Filters the results to return only to return only blobs whose
     * tags match the specified expression.</td></tr>
     * <tr><td>marker</td><td>String</td><td>No</td><td>A string value that identifies the portion of the list of
     * containers to be returned with the next listing operation. The operation returns the NextMarker value within the
     * response body if the listing operation did not return all containers remaining to be listed with the current
     * page. The NextMarker value can be used as the value for the marker parameter in a subsequent call to request the
     * next page of list items. The marker value is opaque to the client.</td></tr>
     * <tr><td>maxresults</td><td>Integer</td><td>No</td><td>Specifies the maximum number of containers to return. If
     * the request does not specify maxresults, or specifies a value greater than 5000, the server will return up to
     * 5000 items.</td></tr>
     * <tr><td>include</td><td>List&lt;String&gt;</td><td>No</td><td>Include this parameter to specify one or more
     * datasets to include in the response. In the form of "," separated string.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     serviceEndpoint: String (Required)
     *     where: String (Required)
     *     blobs (Required): [
     *          (Required){
     *             name: String (Required)
     *             containerName: String (Required)
     *             tags (Optional): {
     *                 blobTagSet (Required): [
     *                      (Required){
     *                         key: String (Required)
     *                         value: String (Required)
     *                     }
     *                 ]
     *             }
     *             versionId: String (Optional)
     *             isCurrentVersion: Boolean (Optional)
     *         }
     *     ]
     *     nextMarker: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the result of a Filter Blobs API call along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> filterBlobsWithResponse(RequestOptions requestOptions) {
        final String contentType = "application/xml";
        final String accept = "application/xml";
        return service.filterBlobsSync(this.client.getUrl(), contentType, this.client.getServiceVersion().getVersion(),
            this.client.getContainerName(), accept, requestOptions, Context.NONE);
    }

    /**
     * The Acquire Lease operation requests a new lease on a container. The lease lock duration can be 15 to 60 seconds,
     * or can be infinite.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-lease-duration</td><td>Integer</td><td>No</td><td>Specifies the duration of the lease, in seconds,
     * or negative one (-1) for a lease that never expires. A non-infinite lease can be between 15 and 60 seconds. A
     * lease duration cannot be changed using renew or change.</td></tr>
     * <tr><td>x-ms-proposed-lease-id</td><td>String</td><td>No</td><td>Optional. The proposed lease ID for the
     * container.</td></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>A date-time value. A request is made under
     * the condition that the resource has been modified since the specified date-time.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>A date-time value. A request is made under
     * the condition that the resource has not been modified since the specified date-time.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> acquireLeaseWithResponseAsync(RequestOptions requestOptions) {
        final String contentType = "application/xml";
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.acquireLease(this.client.getUrl(), contentType,
            this.client.getServiceVersion().getVersion(), this.client.getContainerName(), accept, requestOptions,
            context));
    }

    /**
     * The Acquire Lease operation requests a new lease on a container. The lease lock duration can be 15 to 60 seconds,
     * or can be infinite.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-lease-duration</td><td>Integer</td><td>No</td><td>Specifies the duration of the lease, in seconds,
     * or negative one (-1) for a lease that never expires. A non-infinite lease can be between 15 and 60 seconds. A
     * lease duration cannot be changed using renew or change.</td></tr>
     * <tr><td>x-ms-proposed-lease-id</td><td>String</td><td>No</td><td>Optional. The proposed lease ID for the
     * container.</td></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>A date-time value. A request is made under
     * the condition that the resource has been modified since the specified date-time.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>A date-time value. A request is made under
     * the condition that the resource has not been modified since the specified date-time.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> acquireLeaseWithResponse(RequestOptions requestOptions) {
        final String contentType = "application/xml";
        final String accept = "application/json";
        return service.acquireLeaseSync(this.client.getUrl(), contentType, this.client.getServiceVersion().getVersion(),
            this.client.getContainerName(), accept, requestOptions, Context.NONE);
    }

    /**
     * The Release Lease operation frees the lease if it's no longer needed, so that another client can immediately
     * acquire a lease against the container.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>A date-time value. A request is made under
     * the condition that the resource has been modified since the specified date-time.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>A date-time value. A request is made under
     * the condition that the resource has not been modified since the specified date-time.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param leaseId Required. A lease ID for the source path. If specified, the source path must have an active lease
     * and the lease ID must match.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> releaseLeaseWithResponseAsync(String leaseId, RequestOptions requestOptions) {
        final String contentType = "application/xml";
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.releaseLease(this.client.getUrl(), contentType,
            this.client.getServiceVersion().getVersion(), this.client.getContainerName(), leaseId, accept,
            requestOptions, context));
    }

    /**
     * The Release Lease operation frees the lease if it's no longer needed, so that another client can immediately
     * acquire a lease against the container.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>A date-time value. A request is made under
     * the condition that the resource has been modified since the specified date-time.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>A date-time value. A request is made under
     * the condition that the resource has not been modified since the specified date-time.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param leaseId Required. A lease ID for the source path. If specified, the source path must have an active lease
     * and the lease ID must match.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> releaseLeaseWithResponse(String leaseId, RequestOptions requestOptions) {
        final String contentType = "application/xml";
        final String accept = "application/json";
        return service.releaseLeaseSync(this.client.getUrl(), contentType, this.client.getServiceVersion().getVersion(),
            this.client.getContainerName(), leaseId, accept, requestOptions, Context.NONE);
    }

    /**
     * The Renew Lease operation renews an existing lease.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>A date-time value. A request is made under
     * the condition that the resource has been modified since the specified date-time.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>A date-time value. A request is made under
     * the condition that the resource has not been modified since the specified date-time.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param leaseId Required. A lease ID for the source path. If specified, the source path must have an active lease
     * and the lease ID must match.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> renewLeaseWithResponseAsync(String leaseId, RequestOptions requestOptions) {
        final String contentType = "application/xml";
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.renewLease(this.client.getUrl(), contentType,
            this.client.getServiceVersion().getVersion(), this.client.getContainerName(), leaseId, accept,
            requestOptions, context));
    }

    /**
     * The Renew Lease operation renews an existing lease.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>A date-time value. A request is made under
     * the condition that the resource has been modified since the specified date-time.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>A date-time value. A request is made under
     * the condition that the resource has not been modified since the specified date-time.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param leaseId Required. A lease ID for the source path. If specified, the source path must have an active lease
     * and the lease ID must match.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> renewLeaseWithResponse(String leaseId, RequestOptions requestOptions) {
        final String contentType = "application/xml";
        final String accept = "application/json";
        return service.renewLeaseSync(this.client.getUrl(), contentType, this.client.getServiceVersion().getVersion(),
            this.client.getContainerName(), leaseId, accept, requestOptions, Context.NONE);
    }

    /**
     * The Break Lease operation ends a lease and ensures that another client can't acquire a new lease until the
     * current lease period has expired.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>A date-time value. A request is made under
     * the condition that the resource has been modified since the specified date-time.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>A date-time value. A request is made under
     * the condition that the resource has not been modified since the specified date-time.</td></tr>
     * <tr><td>x-ms-lease-break-period</td><td>Integer</td><td>No</td><td>For a break operation, proposed duration the
     * lease should continue before it is broken, in seconds, between 0 and 60. This break period is only used if it is
     * shorter than the time remaining on the lease. If longer, the time remaining on the lease is used. A new lease
     * will not be available before the break period has expired, but the lease may be held for longer than the break
     * period. If this header does not appear with a break operation, a fixed-duration lease breaks after the remaining
     * lease period elapses, and an infinite lease breaks immediately.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> breakLeaseWithResponseAsync(RequestOptions requestOptions) {
        final String contentType = "application/xml";
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.breakLease(this.client.getUrl(), contentType,
            this.client.getServiceVersion().getVersion(), this.client.getContainerName(), accept, requestOptions,
            context));
    }

    /**
     * The Break Lease operation ends a lease and ensures that another client can't acquire a new lease until the
     * current lease period has expired.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>A date-time value. A request is made under
     * the condition that the resource has been modified since the specified date-time.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>A date-time value. A request is made under
     * the condition that the resource has not been modified since the specified date-time.</td></tr>
     * <tr><td>x-ms-lease-break-period</td><td>Integer</td><td>No</td><td>For a break operation, proposed duration the
     * lease should continue before it is broken, in seconds, between 0 and 60. This break period is only used if it is
     * shorter than the time remaining on the lease. If longer, the time remaining on the lease is used. A new lease
     * will not be available before the break period has expired, but the lease may be held for longer than the break
     * period. If this header does not appear with a break operation, a fixed-duration lease breaks after the remaining
     * lease period elapses, and an infinite lease breaks immediately.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> breakLeaseWithResponse(RequestOptions requestOptions) {
        final String contentType = "application/xml";
        final String accept = "application/json";
        return service.breakLeaseSync(this.client.getUrl(), contentType, this.client.getServiceVersion().getVersion(),
            this.client.getContainerName(), accept, requestOptions, Context.NONE);
    }

    /**
     * The Change Lease operation is used to change the ID of an existing lease.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>A date-time value. A request is made under
     * the condition that the resource has been modified since the specified date-time.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>A date-time value. A request is made under
     * the condition that the resource has not been modified since the specified date-time.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param leaseId Required. A lease ID for the source path. If specified, the source path must have an active lease
     * and the lease ID must match.
     * @param proposedLeaseId Required. The proposed lease ID for the container.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> changeLeaseWithResponseAsync(String leaseId, String proposedLeaseId,
        RequestOptions requestOptions) {
        final String contentType = "application/xml";
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.changeLease(this.client.getUrl(), contentType,
            this.client.getServiceVersion().getVersion(), this.client.getContainerName(), leaseId, proposedLeaseId,
            accept, requestOptions, context));
    }

    /**
     * The Change Lease operation is used to change the ID of an existing lease.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>A date-time value. A request is made under
     * the condition that the resource has been modified since the specified date-time.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>A date-time value. A request is made under
     * the condition that the resource has not been modified since the specified date-time.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param leaseId Required. A lease ID for the source path. If specified, the source path must have an active lease
     * and the lease ID must match.
     * @param proposedLeaseId Required. The proposed lease ID for the container.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> changeLeaseWithResponse(String leaseId, String proposedLeaseId,
        RequestOptions requestOptions) {
        final String contentType = "application/xml";
        final String accept = "application/json";
        return service.changeLeaseSync(this.client.getUrl(), contentType, this.client.getServiceVersion().getVersion(),
            this.client.getContainerName(), leaseId, proposedLeaseId, accept, requestOptions, Context.NONE);
    }

    /**
     * The List Blobs operation returns a list of the blobs under the specified container.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>prefix</td><td>String</td><td>No</td><td>Filters the results to return only containers whose name begins
     * with the specified prefix.</td></tr>
     * <tr><td>marker</td><td>String</td><td>No</td><td>A string value that identifies the portion of the list of
     * containers to be returned with the next listing operation. The operation returns the NextMarker value within the
     * response body if the listing operation did not return all containers remaining to be listed with the current
     * page. The NextMarker value can be used as the value for the marker parameter in a subsequent call to request the
     * next page of list items. The marker value is opaque to the client.</td></tr>
     * <tr><td>maxresults</td><td>Integer</td><td>No</td><td>Specifies the maximum number of containers to return. If
     * the request does not specify maxresults, or specifies a value greater than 5000, the server will return up to
     * 5000 items.</td></tr>
     * <tr><td>include</td><td>List&lt;String&gt;</td><td>No</td><td>Include this parameter to specify one or more
     * datasets to include in the response. In the form of "," separated string.</td></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     serviceEndpoint: String (Required)
     *     containerName: String (Required)
     *     prefix: String (Optional)
     *     marker: String (Optional)
     *     maxResults: Integer (Optional)
     *     segment (Required): {
     *         blobItems (Required): [
     *              (Required){
     *                 name (Required): {
     *                     encoded: boolean (Required)
     *                     content: String (Required)
     *                 }
     *                 deleted: boolean (Required)
     *                 snapshot: String (Required)
     *                 versionId: String (Optional)
     *                 isCurrentVersion: Boolean (Optional)
     *                 properties (Required): {
     *                     creationTime: DateTimeRfc1123 (Optional)
     *                     lastModified: DateTimeRfc1123 (Required)
     *                     eTag: String (Required)
     *                     contentLength: Long (Optional)
     *                     contentType: String (Optional)
     *                     contentEncoding: String (Optional)
     *                     contentLanguage: String (Optional)
     *                     contentMd5: byte[] (Optional)
     *                     contentDisposition: String (Optional)
     *                     cacheControl: String (Optional)
     *                     blobSequenceNumber: Long (Optional)
     *                     blobType: String(BlockBlob/PageBlob/AppendBlob) (Optional)
     *                     leaseStatus: String(unlocked/locked) (Optional)
     *                     leaseState: String(available/leased/expired/breaking/broken) (Optional)
     *                     leaseDuration: String(infinite/fixed) (Optional)
     *                     copyId: String (Optional)
     *                     copyStatus: String(pending/success/failed/aborted) (Optional)
     *                     copySource: String (Optional)
     *                     copyProgress: String (Optional)
     *                     copyCompletionTime: DateTimeRfc1123 (Optional)
     *                     copyStatusDescription: String (Optional)
     *                     serverEncrypted: Boolean (Optional)
     *                     incrementalCopy: Boolean (Optional)
     *                     destinationSnapshot: String (Optional)
     *                     deletedTime: DateTimeRfc1123 (Optional)
     *                     remainingRetentionDays: Integer (Optional)
     *                     accessTier: String(P4/P6/P10/P15/P20/P30/P40/P50/P60/P70/P80/Hot/Cool/Archive/Premium/Cold) (Optional)
     *                     accessTierInferred: Boolean (Optional)
     *                     archiveStatus: String(rehydrate-pending-to-hot/rehydrate-pending-to-cool/rehydrate-pending-to-cold) (Optional)
     *                     customerProvidedKeySha256: String (Optional)
     *                     encryptionScope: String (Optional)
     *                     accessTierChangeTime: DateTimeRfc1123 (Optional)
     *                     tagCount: Integer (Optional)
     *                     expiryTime: DateTimeRfc1123 (Optional)
     *                     sealed: Boolean (Optional)
     *                     rehydratePriority: String(High/Standard) (Optional)
     *                     lastAccessTime: DateTimeRfc1123 (Optional)
     *                     immutabilityPolicyUntilDate: DateTimeRfc1123 (Optional)
     *                     immutabilityPolicyMode: String(Mutable/Locked/Unlocked) (Optional)
     *                     legalHold: Boolean (Optional)
     *                 }
     *                 metadata (Optional): {
     *                     encrypted: String (Optional)
     *                      (Optional): {
     *                         String: String (Required)
     *                     }
     *                 }
     *                 blobTags (Optional): {
     *                     blobTagSet (Required): [
     *                          (Required){
     *                             key: String (Required)
     *                             value: String (Required)
     *                         }
     *                     ]
     *                 }
     *                 objectReplicationMetadata (Optional): {
     *                      (Optional): {
     *                         String: String (Required)
     *                     }
     *                 }
     *                 hasVersionsOnly: Boolean (Optional)
     *             }
     *         ]
     *     }
     *     nextMarker: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return an enumeration of blobs along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listBlobFlatSegmentWithResponseAsync(RequestOptions requestOptions) {
        final String contentType = "application/xml";
        final String accept = "application/xml";
        return FluxUtil.withContext(context -> service.listBlobFlatSegment(this.client.getUrl(), contentType,
            this.client.getServiceVersion().getVersion(), this.client.getContainerName(), accept, requestOptions,
            context));
    }

    /**
     * The List Blobs operation returns a list of the blobs under the specified container.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>prefix</td><td>String</td><td>No</td><td>Filters the results to return only containers whose name begins
     * with the specified prefix.</td></tr>
     * <tr><td>marker</td><td>String</td><td>No</td><td>A string value that identifies the portion of the list of
     * containers to be returned with the next listing operation. The operation returns the NextMarker value within the
     * response body if the listing operation did not return all containers remaining to be listed with the current
     * page. The NextMarker value can be used as the value for the marker parameter in a subsequent call to request the
     * next page of list items. The marker value is opaque to the client.</td></tr>
     * <tr><td>maxresults</td><td>Integer</td><td>No</td><td>Specifies the maximum number of containers to return. If
     * the request does not specify maxresults, or specifies a value greater than 5000, the server will return up to
     * 5000 items.</td></tr>
     * <tr><td>include</td><td>List&lt;String&gt;</td><td>No</td><td>Include this parameter to specify one or more
     * datasets to include in the response. In the form of "," separated string.</td></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     serviceEndpoint: String (Required)
     *     containerName: String (Required)
     *     prefix: String (Optional)
     *     marker: String (Optional)
     *     maxResults: Integer (Optional)
     *     segment (Required): {
     *         blobItems (Required): [
     *              (Required){
     *                 name (Required): {
     *                     encoded: boolean (Required)
     *                     content: String (Required)
     *                 }
     *                 deleted: boolean (Required)
     *                 snapshot: String (Required)
     *                 versionId: String (Optional)
     *                 isCurrentVersion: Boolean (Optional)
     *                 properties (Required): {
     *                     creationTime: DateTimeRfc1123 (Optional)
     *                     lastModified: DateTimeRfc1123 (Required)
     *                     eTag: String (Required)
     *                     contentLength: Long (Optional)
     *                     contentType: String (Optional)
     *                     contentEncoding: String (Optional)
     *                     contentLanguage: String (Optional)
     *                     contentMd5: byte[] (Optional)
     *                     contentDisposition: String (Optional)
     *                     cacheControl: String (Optional)
     *                     blobSequenceNumber: Long (Optional)
     *                     blobType: String(BlockBlob/PageBlob/AppendBlob) (Optional)
     *                     leaseStatus: String(unlocked/locked) (Optional)
     *                     leaseState: String(available/leased/expired/breaking/broken) (Optional)
     *                     leaseDuration: String(infinite/fixed) (Optional)
     *                     copyId: String (Optional)
     *                     copyStatus: String(pending/success/failed/aborted) (Optional)
     *                     copySource: String (Optional)
     *                     copyProgress: String (Optional)
     *                     copyCompletionTime: DateTimeRfc1123 (Optional)
     *                     copyStatusDescription: String (Optional)
     *                     serverEncrypted: Boolean (Optional)
     *                     incrementalCopy: Boolean (Optional)
     *                     destinationSnapshot: String (Optional)
     *                     deletedTime: DateTimeRfc1123 (Optional)
     *                     remainingRetentionDays: Integer (Optional)
     *                     accessTier: String(P4/P6/P10/P15/P20/P30/P40/P50/P60/P70/P80/Hot/Cool/Archive/Premium/Cold) (Optional)
     *                     accessTierInferred: Boolean (Optional)
     *                     archiveStatus: String(rehydrate-pending-to-hot/rehydrate-pending-to-cool/rehydrate-pending-to-cold) (Optional)
     *                     customerProvidedKeySha256: String (Optional)
     *                     encryptionScope: String (Optional)
     *                     accessTierChangeTime: DateTimeRfc1123 (Optional)
     *                     tagCount: Integer (Optional)
     *                     expiryTime: DateTimeRfc1123 (Optional)
     *                     sealed: Boolean (Optional)
     *                     rehydratePriority: String(High/Standard) (Optional)
     *                     lastAccessTime: DateTimeRfc1123 (Optional)
     *                     immutabilityPolicyUntilDate: DateTimeRfc1123 (Optional)
     *                     immutabilityPolicyMode: String(Mutable/Locked/Unlocked) (Optional)
     *                     legalHold: Boolean (Optional)
     *                 }
     *                 metadata (Optional): {
     *                     encrypted: String (Optional)
     *                      (Optional): {
     *                         String: String (Required)
     *                     }
     *                 }
     *                 blobTags (Optional): {
     *                     blobTagSet (Required): [
     *                          (Required){
     *                             key: String (Required)
     *                             value: String (Required)
     *                         }
     *                     ]
     *                 }
     *                 objectReplicationMetadata (Optional): {
     *                      (Optional): {
     *                         String: String (Required)
     *                     }
     *                 }
     *                 hasVersionsOnly: Boolean (Optional)
     *             }
     *         ]
     *     }
     *     nextMarker: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return an enumeration of blobs along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listBlobFlatSegmentWithResponse(RequestOptions requestOptions) {
        final String contentType = "application/xml";
        final String accept = "application/xml";
        return service.listBlobFlatSegmentSync(this.client.getUrl(), contentType,
            this.client.getServiceVersion().getVersion(), this.client.getContainerName(), accept, requestOptions,
            Context.NONE);
    }

    /**
     * The List Blobs operation returns a list of the blobs under the specified container. A delimiter can be used to
     * traverse a virtual hierarchy of blobs as though it were a file system.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>prefix</td><td>String</td><td>No</td><td>Filters the results to return only containers whose name begins
     * with the specified prefix.</td></tr>
     * <tr><td>marker</td><td>String</td><td>No</td><td>A string value that identifies the portion of the list of
     * containers to be returned with the next listing operation. The operation returns the NextMarker value within the
     * response body if the listing operation did not return all containers remaining to be listed with the current
     * page. The NextMarker value can be used as the value for the marker parameter in a subsequent call to request the
     * next page of list items. The marker value is opaque to the client.</td></tr>
     * <tr><td>maxresults</td><td>Integer</td><td>No</td><td>Specifies the maximum number of containers to return. If
     * the request does not specify maxresults, or specifies a value greater than 5000, the server will return up to
     * 5000 items.</td></tr>
     * <tr><td>include</td><td>List&lt;String&gt;</td><td>No</td><td>Include this parameter to specify one or more
     * datasets to include in the response. In the form of "," separated string.</td></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     serviceEndpoint: String (Required)
     *     containerName: String (Required)
     *     delimiter: String (Optional)
     *     prefix: String (Optional)
     *     marker: String (Optional)
     *     maxResults: Integer (Optional)
     *     segment (Required): {
     *         blobItems (Required): [
     *              (Required){
     *                 name (Required): {
     *                     encoded: boolean (Required)
     *                     content: String (Required)
     *                 }
     *                 deleted: boolean (Required)
     *                 snapshot: String (Required)
     *                 versionId: String (Optional)
     *                 isCurrentVersion: Boolean (Optional)
     *                 properties (Required): {
     *                     creationTime: DateTimeRfc1123 (Optional)
     *                     lastModified: DateTimeRfc1123 (Required)
     *                     eTag: String (Required)
     *                     contentLength: Long (Optional)
     *                     contentType: String (Optional)
     *                     contentEncoding: String (Optional)
     *                     contentLanguage: String (Optional)
     *                     contentMd5: byte[] (Optional)
     *                     contentDisposition: String (Optional)
     *                     cacheControl: String (Optional)
     *                     blobSequenceNumber: Long (Optional)
     *                     blobType: String(BlockBlob/PageBlob/AppendBlob) (Optional)
     *                     leaseStatus: String(unlocked/locked) (Optional)
     *                     leaseState: String(available/leased/expired/breaking/broken) (Optional)
     *                     leaseDuration: String(infinite/fixed) (Optional)
     *                     copyId: String (Optional)
     *                     copyStatus: String(pending/success/failed/aborted) (Optional)
     *                     copySource: String (Optional)
     *                     copyProgress: String (Optional)
     *                     copyCompletionTime: DateTimeRfc1123 (Optional)
     *                     copyStatusDescription: String (Optional)
     *                     serverEncrypted: Boolean (Optional)
     *                     incrementalCopy: Boolean (Optional)
     *                     destinationSnapshot: String (Optional)
     *                     deletedTime: DateTimeRfc1123 (Optional)
     *                     remainingRetentionDays: Integer (Optional)
     *                     accessTier: String(P4/P6/P10/P15/P20/P30/P40/P50/P60/P70/P80/Hot/Cool/Archive/Premium/Cold) (Optional)
     *                     accessTierInferred: Boolean (Optional)
     *                     archiveStatus: String(rehydrate-pending-to-hot/rehydrate-pending-to-cool/rehydrate-pending-to-cold) (Optional)
     *                     customerProvidedKeySha256: String (Optional)
     *                     encryptionScope: String (Optional)
     *                     accessTierChangeTime: DateTimeRfc1123 (Optional)
     *                     tagCount: Integer (Optional)
     *                     expiryTime: DateTimeRfc1123 (Optional)
     *                     sealed: Boolean (Optional)
     *                     rehydratePriority: String(High/Standard) (Optional)
     *                     lastAccessTime: DateTimeRfc1123 (Optional)
     *                     immutabilityPolicyUntilDate: DateTimeRfc1123 (Optional)
     *                     immutabilityPolicyMode: String(Mutable/Locked/Unlocked) (Optional)
     *                     legalHold: Boolean (Optional)
     *                 }
     *                 metadata (Optional): {
     *                     encrypted: String (Optional)
     *                      (Optional): {
     *                         String: String (Required)
     *                     }
     *                 }
     *                 blobTags (Optional): {
     *                     blobTagSet (Required): [
     *                          (Required){
     *                             key: String (Required)
     *                             value: String (Required)
     *                         }
     *                     ]
     *                 }
     *                 objectReplicationMetadata (Optional): {
     *                      (Optional): {
     *                         String: String (Required)
     *                     }
     *                 }
     *                 hasVersionsOnly: Boolean (Optional)
     *             }
     *         ]
     *         blobPrefixes (Optional): [
     *              (Optional){
     *                 name (Required): (recursive schema, see name above)
     *             }
     *         ]
     *     }
     *     nextMarker: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param delimiter When the request includes this parameter, the operation returns a BlobPrefix element in the
     * response body that acts as a placeholder for all blobs whose names begin with the same substring up to the
     * appearance of the delimiter character. The delimiter may be a single character or a string.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return an enumeration of blobs along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listBlobHierarchySegmentWithResponseAsync(String delimiter,
        RequestOptions requestOptions) {
        final String contentType = "application/xml";
        final String accept = "application/xml";
        return FluxUtil.withContext(context -> service.listBlobHierarchySegment(this.client.getUrl(), contentType,
            this.client.getServiceVersion().getVersion(), this.client.getContainerName(), delimiter, accept,
            requestOptions, context));
    }

    /**
     * The List Blobs operation returns a list of the blobs under the specified container. A delimiter can be used to
     * traverse a virtual hierarchy of blobs as though it were a file system.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>prefix</td><td>String</td><td>No</td><td>Filters the results to return only containers whose name begins
     * with the specified prefix.</td></tr>
     * <tr><td>marker</td><td>String</td><td>No</td><td>A string value that identifies the portion of the list of
     * containers to be returned with the next listing operation. The operation returns the NextMarker value within the
     * response body if the listing operation did not return all containers remaining to be listed with the current
     * page. The NextMarker value can be used as the value for the marker parameter in a subsequent call to request the
     * next page of list items. The marker value is opaque to the client.</td></tr>
     * <tr><td>maxresults</td><td>Integer</td><td>No</td><td>Specifies the maximum number of containers to return. If
     * the request does not specify maxresults, or specifies a value greater than 5000, the server will return up to
     * 5000 items.</td></tr>
     * <tr><td>include</td><td>List&lt;String&gt;</td><td>No</td><td>Include this parameter to specify one or more
     * datasets to include in the response. In the form of "," separated string.</td></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     serviceEndpoint: String (Required)
     *     containerName: String (Required)
     *     delimiter: String (Optional)
     *     prefix: String (Optional)
     *     marker: String (Optional)
     *     maxResults: Integer (Optional)
     *     segment (Required): {
     *         blobItems (Required): [
     *              (Required){
     *                 name (Required): {
     *                     encoded: boolean (Required)
     *                     content: String (Required)
     *                 }
     *                 deleted: boolean (Required)
     *                 snapshot: String (Required)
     *                 versionId: String (Optional)
     *                 isCurrentVersion: Boolean (Optional)
     *                 properties (Required): {
     *                     creationTime: DateTimeRfc1123 (Optional)
     *                     lastModified: DateTimeRfc1123 (Required)
     *                     eTag: String (Required)
     *                     contentLength: Long (Optional)
     *                     contentType: String (Optional)
     *                     contentEncoding: String (Optional)
     *                     contentLanguage: String (Optional)
     *                     contentMd5: byte[] (Optional)
     *                     contentDisposition: String (Optional)
     *                     cacheControl: String (Optional)
     *                     blobSequenceNumber: Long (Optional)
     *                     blobType: String(BlockBlob/PageBlob/AppendBlob) (Optional)
     *                     leaseStatus: String(unlocked/locked) (Optional)
     *                     leaseState: String(available/leased/expired/breaking/broken) (Optional)
     *                     leaseDuration: String(infinite/fixed) (Optional)
     *                     copyId: String (Optional)
     *                     copyStatus: String(pending/success/failed/aborted) (Optional)
     *                     copySource: String (Optional)
     *                     copyProgress: String (Optional)
     *                     copyCompletionTime: DateTimeRfc1123 (Optional)
     *                     copyStatusDescription: String (Optional)
     *                     serverEncrypted: Boolean (Optional)
     *                     incrementalCopy: Boolean (Optional)
     *                     destinationSnapshot: String (Optional)
     *                     deletedTime: DateTimeRfc1123 (Optional)
     *                     remainingRetentionDays: Integer (Optional)
     *                     accessTier: String(P4/P6/P10/P15/P20/P30/P40/P50/P60/P70/P80/Hot/Cool/Archive/Premium/Cold) (Optional)
     *                     accessTierInferred: Boolean (Optional)
     *                     archiveStatus: String(rehydrate-pending-to-hot/rehydrate-pending-to-cool/rehydrate-pending-to-cold) (Optional)
     *                     customerProvidedKeySha256: String (Optional)
     *                     encryptionScope: String (Optional)
     *                     accessTierChangeTime: DateTimeRfc1123 (Optional)
     *                     tagCount: Integer (Optional)
     *                     expiryTime: DateTimeRfc1123 (Optional)
     *                     sealed: Boolean (Optional)
     *                     rehydratePriority: String(High/Standard) (Optional)
     *                     lastAccessTime: DateTimeRfc1123 (Optional)
     *                     immutabilityPolicyUntilDate: DateTimeRfc1123 (Optional)
     *                     immutabilityPolicyMode: String(Mutable/Locked/Unlocked) (Optional)
     *                     legalHold: Boolean (Optional)
     *                 }
     *                 metadata (Optional): {
     *                     encrypted: String (Optional)
     *                      (Optional): {
     *                         String: String (Required)
     *                     }
     *                 }
     *                 blobTags (Optional): {
     *                     blobTagSet (Required): [
     *                          (Required){
     *                             key: String (Required)
     *                             value: String (Required)
     *                         }
     *                     ]
     *                 }
     *                 objectReplicationMetadata (Optional): {
     *                      (Optional): {
     *                         String: String (Required)
     *                     }
     *                 }
     *                 hasVersionsOnly: Boolean (Optional)
     *             }
     *         ]
     *         blobPrefixes (Optional): [
     *              (Optional){
     *                 name (Required): (recursive schema, see name above)
     *             }
     *         ]
     *     }
     *     nextMarker: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param delimiter When the request includes this parameter, the operation returns a BlobPrefix element in the
     * response body that acts as a placeholder for all blobs whose names begin with the same substring up to the
     * appearance of the delimiter character. The delimiter may be a single character or a string.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return an enumeration of blobs along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listBlobHierarchySegmentWithResponse(String delimiter, RequestOptions requestOptions) {
        final String contentType = "application/xml";
        final String accept = "application/xml";
        return service.listBlobHierarchySegmentSync(this.client.getUrl(), contentType,
            this.client.getServiceVersion().getVersion(), this.client.getContainerName(), delimiter, accept,
            requestOptions, Context.NONE);
    }

    /**
     * Returns the sku name and account kind.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> getAccountInfoWithResponseAsync(RequestOptions requestOptions) {
        final String contentType = "application/xml";
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getAccountInfo(this.client.getUrl(), contentType,
            this.client.getServiceVersion().getVersion(), this.client.getContainerName(), accept, requestOptions,
            context));
    }

    /**
     * Returns the sku name and account kind.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> getAccountInfoWithResponse(RequestOptions requestOptions) {
        final String contentType = "application/xml";
        final String accept = "application/json";
        return service.getAccountInfoSync(this.client.getUrl(), contentType,
            this.client.getServiceVersion().getVersion(), this.client.getContainerName(), accept, requestOptions,
            Context.NONE);
    }
}
