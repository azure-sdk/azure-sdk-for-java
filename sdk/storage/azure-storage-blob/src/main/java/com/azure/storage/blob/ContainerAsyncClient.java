// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.storage.blob;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.HttpHeaderName;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.serializer.TypeReference;
import com.azure.storage.blob.implementation.ContainersImpl;
import com.azure.storage.blob.models.FilterBlobSegment;
import com.azure.storage.blob.models.FilterBlobsIncludeItem;
import com.azure.storage.blob.models.PublicAccessType;
import com.azure.storage.blob.models.SignedIdentifier;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.stream.Collectors;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the asynchronous BlobClient type.
 */
@ServiceClient(builder = BlobClientBuilder.class, isAsync = true)
public final class ContainerAsyncClient {
    @Generated
    private final ContainersImpl serviceClient;

    /**
     * Initializes an instance of ContainerAsyncClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    ContainerAsyncClient(ContainersImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Creates a new container under the specified account. If the container with the same name already exists, the
     * operation fails.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-meta</td><td>Map&lt;String, String&gt;</td><td>No</td><td>The metadata headers.</td></tr>
     * <tr><td>x-ms-blob-public-access</td><td>String</td><td>No</td><td>The public access setting for the container.
     * Allowed values: "blob", "container".</td></tr>
     * <tr><td>x-ms-default-encryption-scope</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later.
     * Specifies the default encryption scope to set on the container and use for all future writes.</td></tr>
     * <tr><td>x-ms-deny-encryption-scope-override</td><td>Boolean</td><td>No</td><td>If a blob has a lease and the
     * lease is of infinite duration then the value of this header is set to true, otherwise it is set to
     * false.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> createWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.createWithResponseAsync(requestOptions);
    }

    /**
     * returns all user-defined metadata and system properties for the specified container. The data returned does not
     * include the container's list of blobs.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-lease-id</td><td>String</td><td>No</td><td>If specified, the operation only succeeds if the
     * resource's lease is active and matches this ID.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> getPropertiesWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.getPropertiesWithResponseAsync(requestOptions);
    }

    /**
     * operation marks the specified container for deletion. The container and any blobs contained within it are later
     * deleted during garbage collection.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-lease-id</td><td>String</td><td>No</td><td>If specified, the operation only succeeds if the
     * resource's lease is active and matches this ID.</td></tr>
     * <tr><td>If-Modified-Since</td><td>String</td><td>No</td><td>A date-time value. A request is made under the
     * condition that the resource has been modified since the specified date-time.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>String</td><td>No</td><td>A date-time value. A request is made under the
     * condition that the resource has not been modified since the specified date-time.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.deleteWithResponseAsync(requestOptions);
    }

    /**
     * operation sets one or more user-defined name-value pairs for the specified container.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-lease-id</td><td>String</td><td>No</td><td>If specified, the operation only succeeds if the
     * resource's lease is active and matches this ID.</td></tr>
     * <tr><td>x-ms-meta</td><td>Map&lt;String, String&gt;</td><td>No</td><td>The metadata headers.</td></tr>
     * <tr><td>If-Modified-Since</td><td>String</td><td>No</td><td>A date-time value. A request is made under the
     * condition that the resource has been modified since the specified date-time.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> setMetadataWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.setMetadataWithResponseAsync(requestOptions);
    }

    /**
     * gets the permissions for the specified container. The permissions indicate whether container data may be accessed
     * publicly.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-lease-id</td><td>String</td><td>No</td><td>If specified, the operation only succeeds if the
     * resource's lease is active and matches this ID.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * [
     *      (Required){
     *         id: String (Required)
     *         accessPolicy (Required): {
     *             start: OffsetDateTime (Required)
     *             expiry: OffsetDateTime (Required)
     *             permission: String (Required)
     *         }
     *     }
     * ]
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the permissions for the specified container along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getAccessPolicyWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.getAccessPolicyWithResponseAsync(requestOptions);
    }

    /**
     * sets the permissions for the specified container. The permissions indicate whether blobs in a container may be
     * accessed publicly.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-lease-id</td><td>String</td><td>No</td><td>If specified, the operation only succeeds if the
     * resource's lease is active and matches this ID.</td></tr>
     * <tr><td>x-ms-blob-public-access</td><td>String</td><td>No</td><td>The public access setting for the container.
     * Allowed values: "blob", "container".</td></tr>
     * <tr><td>If-Modified-Since</td><td>String</td><td>No</td><td>A date-time value. A request is made under the
     * condition that the resource has been modified since the specified date-time.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>String</td><td>No</td><td>A date-time value. A request is made under the
     * condition that the resource has not been modified since the specified date-time.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * [
     *      (Required){
     *         id: String (Required)
     *         accessPolicy (Required): {
     *             start: OffsetDateTime (Required)
     *             expiry: OffsetDateTime (Required)
     *             permission: String (Required)
     *         }
     *     }
     * ]
     * }
     * </pre>
     * 
     * @param containerAcl The access control list for the container.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> setAccessPolicyWithResponse(BinaryData containerAcl, RequestOptions requestOptions) {
        return this.serviceClient.setAccessPolicyWithResponseAsync(containerAcl, requestOptions);
    }

    /**
     * Restores a previously-deleted container.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-deleted-container-name</td><td>String</td><td>No</td><td>Optional. Version 2019-12-12 and later.
     * Specifies the name of the deleted container to restore.</td></tr>
     * <tr><td>x-ms-deleted-container-version</td><td>String</td><td>No</td><td>Optional. Version 2019-12-12 and later.
     * Specifies the version of the deleted container to restore.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> restoreWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.restoreWithResponseAsync(requestOptions);
    }

    /**
     * Renames an existing container.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-source-lease-id</td><td>String</td><td>No</td><td>A lease ID for the source path. If specified, the
     * source path must have an active lease and the lease ID must match.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param sourceContainerName Required. Specifies the name of the container to rename.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> renameWithResponse(String sourceContainerName, RequestOptions requestOptions) {
        return this.serviceClient.renameWithResponseAsync(sourceContainerName, requestOptions);
    }

    /**
     * The Batch operation allows multiple API calls to be embedded into a single HTTP request.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * BinaryData
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * BinaryData
     * }
     * </pre>
     * 
     * @param contentLength The length of the request.
     * @param body The body of the request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> submitBatchWithResponse(long contentLength, BinaryData body,
        RequestOptions requestOptions) {
        return this.serviceClient.submitBatchWithResponseAsync(contentLength, body, requestOptions);
    }

    /**
     * The Filter Blobs operation enables callers to list blobs in a container whose tags match a given search
     * expression. Filter blobs searches within the given container.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * <tr><td>where</td><td>String</td><td>No</td><td>Filters the results to return only to return only blobs whose
     * tags match the specified expression.</td></tr>
     * <tr><td>marker</td><td>String</td><td>No</td><td>A string value that identifies the portion of the list of
     * containers to be returned with the next listing operation. The operation returns the NextMarker value within the
     * response body if the listing operation did not return all containers remaining to be listed with the current
     * page. The NextMarker value can be used as the value for the marker parameter in a subsequent call to request the
     * next page of list items. The marker value is opaque to the client.</td></tr>
     * <tr><td>maxresults</td><td>Integer</td><td>No</td><td>Specifies the maximum number of containers to return. If
     * the request does not specify maxresults, or specifies a value greater than 5000, the server will return up to
     * 5000 items.</td></tr>
     * <tr><td>include</td><td>List&lt;String&gt;</td><td>No</td><td>Include this parameter to specify one or more
     * datasets to include in the response. In the form of "," separated string.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     serviceEndpoint: String (Required)
     *     where: String (Required)
     *     blobs (Required): [
     *          (Required){
     *             name: String (Required)
     *             containerName: String (Required)
     *             tags (Optional): {
     *                 blobTagSet (Required): [
     *                      (Required){
     *                         key: String (Required)
     *                         value: String (Required)
     *                     }
     *                 ]
     *             }
     *             versionId: String (Optional)
     *             isCurrentVersion: Boolean (Optional)
     *         }
     *     ]
     *     nextMarker: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the result of a Filter Blobs API call along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> filterBlobsWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.filterBlobsWithResponseAsync(requestOptions);
    }

    /**
     * The Acquire Lease operation requests a new lease on a container. The lease lock duration can be 15 to 60 seconds,
     * or can be infinite.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-lease-duration</td><td>Integer</td><td>No</td><td>Specifies the duration of the lease, in seconds,
     * or negative one (-1) for a lease that never expires. A non-infinite lease can be between 15 and 60 seconds. A
     * lease duration cannot be changed using renew or change.</td></tr>
     * <tr><td>x-ms-proposed-lease-id</td><td>String</td><td>No</td><td>Optional. The proposed lease ID for the
     * container.</td></tr>
     * <tr><td>If-Modified-Since</td><td>String</td><td>No</td><td>A date-time value. A request is made under the
     * condition that the resource has been modified since the specified date-time.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>String</td><td>No</td><td>A date-time value. A request is made under the
     * condition that the resource has not been modified since the specified date-time.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> acquireLeaseWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.acquireLeaseWithResponseAsync(requestOptions);
    }

    /**
     * The Release Lease operation frees the lease if it's no longer needed, so that another client can immediately
     * acquire a lease against the container.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>If-Modified-Since</td><td>String</td><td>No</td><td>A date-time value. A request is made under the
     * condition that the resource has been modified since the specified date-time.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>String</td><td>No</td><td>A date-time value. A request is made under the
     * condition that the resource has not been modified since the specified date-time.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param leaseId Required. A lease ID for the source path. If specified, the source path must have an active lease
     * and the lease ID must match.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> releaseLeaseWithResponse(String leaseId, RequestOptions requestOptions) {
        return this.serviceClient.releaseLeaseWithResponseAsync(leaseId, requestOptions);
    }

    /**
     * The Renew Lease operation renews an existing lease.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>If-Modified-Since</td><td>String</td><td>No</td><td>A date-time value. A request is made under the
     * condition that the resource has been modified since the specified date-time.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>String</td><td>No</td><td>A date-time value. A request is made under the
     * condition that the resource has not been modified since the specified date-time.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param leaseId Required. A lease ID for the source path. If specified, the source path must have an active lease
     * and the lease ID must match.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> renewLeaseWithResponse(String leaseId, RequestOptions requestOptions) {
        return this.serviceClient.renewLeaseWithResponseAsync(leaseId, requestOptions);
    }

    /**
     * The Break Lease operation ends a lease and ensures that another client can't acquire a new lease until the
     * current lease period has expired.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>If-Modified-Since</td><td>String</td><td>No</td><td>A date-time value. A request is made under the
     * condition that the resource has been modified since the specified date-time.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>String</td><td>No</td><td>A date-time value. A request is made under the
     * condition that the resource has not been modified since the specified date-time.</td></tr>
     * <tr><td>x-ms-lease-break-period</td><td>Integer</td><td>No</td><td>For a break operation, proposed duration the
     * lease should continue before it is broken, in seconds, between 0 and 60. This break period is only used if it is
     * shorter than the time remaining on the lease. If longer, the time remaining on the lease is used. A new lease
     * will not be available before the break period has expired, but the lease may be held for longer than the break
     * period. If this header does not appear with a break operation, a fixed-duration lease breaks after the remaining
     * lease period elapses, and an infinite lease breaks immediately.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> breakLeaseWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.breakLeaseWithResponseAsync(requestOptions);
    }

    /**
     * The Change Lease operation is used to change the ID of an existing lease.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>If-Modified-Since</td><td>String</td><td>No</td><td>A date-time value. A request is made under the
     * condition that the resource has been modified since the specified date-time.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>String</td><td>No</td><td>A date-time value. A request is made under the
     * condition that the resource has not been modified since the specified date-time.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param leaseId Required. A lease ID for the source path. If specified, the source path must have an active lease
     * and the lease ID must match.
     * @param proposedLeaseId Required. The proposed lease ID for the container.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> changeLeaseWithResponse(String leaseId, String proposedLeaseId,
        RequestOptions requestOptions) {
        return this.serviceClient.changeLeaseWithResponseAsync(leaseId, proposedLeaseId, requestOptions);
    }

    /**
     * Returns the sku name and account kind.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> getAccountInfoWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.getAccountInfoWithResponseAsync(requestOptions);
    }

    /**
     * Creates a new container under the specified account. If the container with the same name already exists, the
     * operation fails.
     * 
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;.
     * @param metadata The metadata headers.
     * @param access The public access setting for the container.
     * @param defaultEncryptionScope Optional. Version 2019-07-07 and later. Specifies the default encryption scope to
     * set on the container and use for all future writes.
     * @param preventEncryptionScopeOverride If a blob has a lease and the lease is of infinite duration then the value
     * of this header is set to true, otherwise it is set to false.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> create(Integer timeout, Map<String, String> metadata, PublicAccessType access,
        String defaultEncryptionScope, Boolean preventEncryptionScopeOverride) {
        // Generated convenience method for createWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (timeout != null) {
            requestOptions.addQueryParam("timeout", String.valueOf(timeout), false);
        }
        if (metadata != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-meta"), String.valueOf(metadata));
        }
        if (access != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-blob-public-access"), access.toString());
        }
        if (defaultEncryptionScope != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-default-encryption-scope"),
                defaultEncryptionScope);
        }
        if (preventEncryptionScopeOverride != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-deny-encryption-scope-override"),
                String.valueOf(preventEncryptionScopeOverride));
        }
        return createWithResponse(requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Creates a new container under the specified account. If the container with the same name already exists, the
     * operation fails.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> create() {
        // Generated convenience method for createWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createWithResponse(requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * returns all user-defined metadata and system properties for the specified container. The data returned does not
     * include the container's list of blobs.
     * 
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;.
     * @param leaseId If specified, the operation only succeeds if the resource's lease is active and matches this ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> getProperties(Integer timeout, String leaseId) {
        // Generated convenience method for getPropertiesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (timeout != null) {
            requestOptions.addQueryParam("timeout", String.valueOf(timeout), false);
        }
        if (leaseId != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-lease-id"), leaseId);
        }
        return getPropertiesWithResponse(requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * returns all user-defined metadata and system properties for the specified container. The data returned does not
     * include the container's list of blobs.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> getProperties() {
        // Generated convenience method for getPropertiesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getPropertiesWithResponse(requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * operation marks the specified container for deletion. The container and any blobs contained within it are later
     * deleted during garbage collection.
     * 
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;.
     * @param leaseId If specified, the operation only succeeds if the resource's lease is active and matches this ID.
     * @param ifModifiedSince A date-time value. A request is made under the condition that the resource has been
     * modified since the specified date-time.
     * @param ifUnmodifiedSince A date-time value. A request is made under the condition that the resource has not been
     * modified since the specified date-time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> delete(Integer timeout, String leaseId, String ifModifiedSince, String ifUnmodifiedSince) {
        // Generated convenience method for deleteWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (timeout != null) {
            requestOptions.addQueryParam("timeout", String.valueOf(timeout), false);
        }
        if (leaseId != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-lease-id"), leaseId);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MODIFIED_SINCE, ifModifiedSince);
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_UNMODIFIED_SINCE, ifUnmodifiedSince);
        }
        return deleteWithResponse(requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * operation marks the specified container for deletion. The container and any blobs contained within it are later
     * deleted during garbage collection.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> delete() {
        // Generated convenience method for deleteWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return deleteWithResponse(requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * operation sets one or more user-defined name-value pairs for the specified container.
     * 
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;.
     * @param leaseId If specified, the operation only succeeds if the resource's lease is active and matches this ID.
     * @param metadata The metadata headers.
     * @param ifModifiedSince A date-time value. A request is made under the condition that the resource has been
     * modified since the specified date-time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> setMetadata(Integer timeout, String leaseId, Map<String, String> metadata,
        String ifModifiedSince) {
        // Generated convenience method for setMetadataWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (timeout != null) {
            requestOptions.addQueryParam("timeout", String.valueOf(timeout), false);
        }
        if (leaseId != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-lease-id"), leaseId);
        }
        if (metadata != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-meta"), String.valueOf(metadata));
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MODIFIED_SINCE, ifModifiedSince);
        }
        return setMetadataWithResponse(requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * operation sets one or more user-defined name-value pairs for the specified container.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> setMetadata() {
        // Generated convenience method for setMetadataWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return setMetadataWithResponse(requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * gets the permissions for the specified container. The permissions indicate whether container data may be accessed
     * publicly.
     * 
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;.
     * @param leaseId If specified, the operation only succeeds if the resource's lease is active and matches this ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the permissions for the specified container on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<SignedIdentifier>> getAccessPolicy(Integer timeout, String leaseId) {
        // Generated convenience method for getAccessPolicyWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (timeout != null) {
            requestOptions.addQueryParam("timeout", String.valueOf(timeout), false);
        }
        if (leaseId != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-lease-id"), leaseId);
        }
        return getAccessPolicyWithResponse(requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(TYPE_REFERENCE_LIST_SIGNED_IDENTIFIER));
    }

    /**
     * gets the permissions for the specified container. The permissions indicate whether container data may be accessed
     * publicly.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the permissions for the specified container on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<SignedIdentifier>> getAccessPolicy() {
        // Generated convenience method for getAccessPolicyWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getAccessPolicyWithResponse(requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(TYPE_REFERENCE_LIST_SIGNED_IDENTIFIER));
    }

    /**
     * sets the permissions for the specified container. The permissions indicate whether blobs in a container may be
     * accessed publicly.
     * 
     * @param containerAcl The access control list for the container.
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;.
     * @param leaseId If specified, the operation only succeeds if the resource's lease is active and matches this ID.
     * @param access The public access setting for the container.
     * @param ifModifiedSince A date-time value. A request is made under the condition that the resource has been
     * modified since the specified date-time.
     * @param ifUnmodifiedSince A date-time value. A request is made under the condition that the resource has not been
     * modified since the specified date-time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> setAccessPolicy(List<SignedIdentifier> containerAcl, Integer timeout, String leaseId,
        PublicAccessType access, String ifModifiedSince, String ifUnmodifiedSince) {
        // Generated convenience method for setAccessPolicyWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (timeout != null) {
            requestOptions.addQueryParam("timeout", String.valueOf(timeout), false);
        }
        if (leaseId != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-lease-id"), leaseId);
        }
        if (access != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-blob-public-access"), access.toString());
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MODIFIED_SINCE, ifModifiedSince);
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_UNMODIFIED_SINCE, ifUnmodifiedSince);
        }
        return setAccessPolicyWithResponse(BinaryData.fromObject(containerAcl), requestOptions)
            .flatMap(FluxUtil::toMono);
    }

    /**
     * sets the permissions for the specified container. The permissions indicate whether blobs in a container may be
     * accessed publicly.
     * 
     * @param containerAcl The access control list for the container.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> setAccessPolicy(List<SignedIdentifier> containerAcl) {
        // Generated convenience method for setAccessPolicyWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return setAccessPolicyWithResponse(BinaryData.fromObject(containerAcl), requestOptions)
            .flatMap(FluxUtil::toMono);
    }

    /**
     * Restores a previously-deleted container.
     * 
     * @param deletedContainerName Optional. Version 2019-12-12 and later. Specifies the name of the deleted container
     * to restore.
     * @param deletedContainerVersion Optional. Version 2019-12-12 and later. Specifies the version of the deleted
     * container to restore.
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> restore(String deletedContainerName, String deletedContainerVersion, Integer timeout) {
        // Generated convenience method for restoreWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (deletedContainerName != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-deleted-container-name"), deletedContainerName);
        }
        if (deletedContainerVersion != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-deleted-container-version"),
                deletedContainerVersion);
        }
        if (timeout != null) {
            requestOptions.addQueryParam("timeout", String.valueOf(timeout), false);
        }
        return restoreWithResponse(requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Restores a previously-deleted container.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> restore() {
        // Generated convenience method for restoreWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return restoreWithResponse(requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Renames an existing container.
     * 
     * @param sourceContainerName Required. Specifies the name of the container to rename.
     * @param sourceLeaseId A lease ID for the source path. If specified, the source path must have an active lease and
     * the lease ID must match.
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> rename(String sourceContainerName, String sourceLeaseId, Integer timeout) {
        // Generated convenience method for renameWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (sourceLeaseId != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-source-lease-id"), sourceLeaseId);
        }
        if (timeout != null) {
            requestOptions.addQueryParam("timeout", String.valueOf(timeout), false);
        }
        return renameWithResponse(sourceContainerName, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Renames an existing container.
     * 
     * @param sourceContainerName Required. Specifies the name of the container to rename.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> rename(String sourceContainerName) {
        // Generated convenience method for renameWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return renameWithResponse(sourceContainerName, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * The Batch operation allows multiple API calls to be embedded into a single HTTP request.
     * 
     * @param contentLength The length of the request.
     * @param body The body of the request.
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BinaryData> submitBatch(long contentLength, BinaryData body, Integer timeout) {
        // Generated convenience method for submitBatchWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (timeout != null) {
            requestOptions.addQueryParam("timeout", String.valueOf(timeout), false);
        }
        return submitBatchWithResponse(contentLength, body, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * The Batch operation allows multiple API calls to be embedded into a single HTTP request.
     * 
     * @param contentLength The length of the request.
     * @param body The body of the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BinaryData> submitBatch(long contentLength, BinaryData body) {
        // Generated convenience method for submitBatchWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return submitBatchWithResponse(contentLength, body, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * The Filter Blobs operation enables callers to list blobs in a container whose tags match a given search
     * expression. Filter blobs searches within the given container.
     * 
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;.
     * @param where Filters the results to return only to return only blobs whose tags match the specified expression.
     * @param marker A string value that identifies the portion of the list of containers to be returned with the next
     * listing operation. The operation returns the NextMarker value within the response body if the listing operation
     * did not return all containers remaining to be listed with the current page. The NextMarker value can be used as
     * the value for the marker parameter in a subsequent call to request the next page of list items. The marker value
     * is opaque to the client.
     * @param maxresults Specifies the maximum number of containers to return. If the request does not specify
     * maxresults, or specifies a value greater than 5000, the server will return up to 5000 items.
     * @param include Include this parameter to specify one or more datasets to include in the response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of a Filter Blobs API call on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<FilterBlobSegment> filterBlobs(Integer timeout, String where, String marker, Integer maxresults,
        List<FilterBlobsIncludeItem> include) {
        // Generated convenience method for filterBlobsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (timeout != null) {
            requestOptions.addQueryParam("timeout", String.valueOf(timeout), false);
        }
        if (where != null) {
            requestOptions.addQueryParam("where", where, false);
        }
        if (marker != null) {
            requestOptions.addQueryParam("marker", marker, false);
        }
        if (maxresults != null) {
            requestOptions.addQueryParam("maxresults", String.valueOf(maxresults), false);
        }
        if (include != null) {
            requestOptions.addQueryParam("include",
                include.stream()
                    .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                    .collect(Collectors.joining(",")),
                false);
        }
        return filterBlobsWithResponse(requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(FilterBlobSegment.class));
    }

    /**
     * The Filter Blobs operation enables callers to list blobs in a container whose tags match a given search
     * expression. Filter blobs searches within the given container.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of a Filter Blobs API call on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<FilterBlobSegment> filterBlobs() {
        // Generated convenience method for filterBlobsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return filterBlobsWithResponse(requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(FilterBlobSegment.class));
    }

    /**
     * The Acquire Lease operation requests a new lease on a container. The lease lock duration can be 15 to 60 seconds,
     * or can be infinite.
     * 
     * @param duration Specifies the duration of the lease, in seconds, or negative one (-1) for a lease that never
     * expires. A non-infinite lease can be between 15 and 60 seconds. A lease duration cannot be changed using renew or
     * change.
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;.
     * @param proposedLeaseId Optional. The proposed lease ID for the container.
     * @param ifModifiedSince A date-time value. A request is made under the condition that the resource has been
     * modified since the specified date-time.
     * @param ifUnmodifiedSince A date-time value. A request is made under the condition that the resource has not been
     * modified since the specified date-time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> acquireLease(Integer duration, Integer timeout, String proposedLeaseId, String ifModifiedSince,
        String ifUnmodifiedSince) {
        // Generated convenience method for acquireLeaseWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (duration != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-lease-duration"), String.valueOf(duration));
        }
        if (timeout != null) {
            requestOptions.addQueryParam("timeout", String.valueOf(timeout), false);
        }
        if (proposedLeaseId != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-proposed-lease-id"), proposedLeaseId);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MODIFIED_SINCE, ifModifiedSince);
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_UNMODIFIED_SINCE, ifUnmodifiedSince);
        }
        return acquireLeaseWithResponse(requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * The Acquire Lease operation requests a new lease on a container. The lease lock duration can be 15 to 60 seconds,
     * or can be infinite.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> acquireLease() {
        // Generated convenience method for acquireLeaseWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return acquireLeaseWithResponse(requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * The Release Lease operation frees the lease if it's no longer needed, so that another client can immediately
     * acquire a lease against the container.
     * 
     * @param leaseId Required. A lease ID for the source path. If specified, the source path must have an active lease
     * and the lease ID must match.
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;.
     * @param ifModifiedSince A date-time value. A request is made under the condition that the resource has been
     * modified since the specified date-time.
     * @param ifUnmodifiedSince A date-time value. A request is made under the condition that the resource has not been
     * modified since the specified date-time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> releaseLease(String leaseId, Integer timeout, String ifModifiedSince, String ifUnmodifiedSince) {
        // Generated convenience method for releaseLeaseWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (timeout != null) {
            requestOptions.addQueryParam("timeout", String.valueOf(timeout), false);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MODIFIED_SINCE, ifModifiedSince);
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_UNMODIFIED_SINCE, ifUnmodifiedSince);
        }
        return releaseLeaseWithResponse(leaseId, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * The Release Lease operation frees the lease if it's no longer needed, so that another client can immediately
     * acquire a lease against the container.
     * 
     * @param leaseId Required. A lease ID for the source path. If specified, the source path must have an active lease
     * and the lease ID must match.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> releaseLease(String leaseId) {
        // Generated convenience method for releaseLeaseWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return releaseLeaseWithResponse(leaseId, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * The Renew Lease operation renews an existing lease.
     * 
     * @param leaseId Required. A lease ID for the source path. If specified, the source path must have an active lease
     * and the lease ID must match.
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;.
     * @param ifModifiedSince A date-time value. A request is made under the condition that the resource has been
     * modified since the specified date-time.
     * @param ifUnmodifiedSince A date-time value. A request is made under the condition that the resource has not been
     * modified since the specified date-time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> renewLease(String leaseId, Integer timeout, String ifModifiedSince, String ifUnmodifiedSince) {
        // Generated convenience method for renewLeaseWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (timeout != null) {
            requestOptions.addQueryParam("timeout", String.valueOf(timeout), false);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MODIFIED_SINCE, ifModifiedSince);
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_UNMODIFIED_SINCE, ifUnmodifiedSince);
        }
        return renewLeaseWithResponse(leaseId, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * The Renew Lease operation renews an existing lease.
     * 
     * @param leaseId Required. A lease ID for the source path. If specified, the source path must have an active lease
     * and the lease ID must match.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> renewLease(String leaseId) {
        // Generated convenience method for renewLeaseWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return renewLeaseWithResponse(leaseId, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * The Break Lease operation ends a lease and ensures that another client can't acquire a new lease until the
     * current lease period has expired.
     * 
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;.
     * @param ifModifiedSince A date-time value. A request is made under the condition that the resource has been
     * modified since the specified date-time.
     * @param ifUnmodifiedSince A date-time value. A request is made under the condition that the resource has not been
     * modified since the specified date-time.
     * @param breakPeriod For a break operation, proposed duration the lease should continue before it is broken, in
     * seconds, between 0 and 60. This break period is only used if it is shorter than the time remaining on the lease.
     * If longer, the time remaining on the lease is used. A new lease will not be available before the break period has
     * expired, but the lease may be held for longer than the break period. If this header does not appear with a break
     * operation, a fixed-duration lease breaks after the remaining lease period elapses, and an infinite lease breaks
     * immediately.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> breakLease(Integer timeout, String ifModifiedSince, String ifUnmodifiedSince,
        Integer breakPeriod) {
        // Generated convenience method for breakLeaseWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (timeout != null) {
            requestOptions.addQueryParam("timeout", String.valueOf(timeout), false);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MODIFIED_SINCE, ifModifiedSince);
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_UNMODIFIED_SINCE, ifUnmodifiedSince);
        }
        if (breakPeriod != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-lease-break-period"), String.valueOf(breakPeriod));
        }
        return breakLeaseWithResponse(requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * The Break Lease operation ends a lease and ensures that another client can't acquire a new lease until the
     * current lease period has expired.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> breakLease() {
        // Generated convenience method for breakLeaseWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return breakLeaseWithResponse(requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * The Change Lease operation is used to change the ID of an existing lease.
     * 
     * @param leaseId Required. A lease ID for the source path. If specified, the source path must have an active lease
     * and the lease ID must match.
     * @param proposedLeaseId Required. The proposed lease ID for the container.
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;.
     * @param ifModifiedSince A date-time value. A request is made under the condition that the resource has been
     * modified since the specified date-time.
     * @param ifUnmodifiedSince A date-time value. A request is made under the condition that the resource has not been
     * modified since the specified date-time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> changeLease(String leaseId, String proposedLeaseId, Integer timeout, String ifModifiedSince,
        String ifUnmodifiedSince) {
        // Generated convenience method for changeLeaseWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (timeout != null) {
            requestOptions.addQueryParam("timeout", String.valueOf(timeout), false);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MODIFIED_SINCE, ifModifiedSince);
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_UNMODIFIED_SINCE, ifUnmodifiedSince);
        }
        return changeLeaseWithResponse(leaseId, proposedLeaseId, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * The Change Lease operation is used to change the ID of an existing lease.
     * 
     * @param leaseId Required. A lease ID for the source path. If specified, the source path must have an active lease
     * and the lease ID must match.
     * @param proposedLeaseId Required. The proposed lease ID for the container.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> changeLease(String leaseId, String proposedLeaseId) {
        // Generated convenience method for changeLeaseWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return changeLeaseWithResponse(leaseId, proposedLeaseId, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Returns the sku name and account kind.
     * 
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> getAccountInfo(Integer timeout) {
        // Generated convenience method for getAccountInfoWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (timeout != null) {
            requestOptions.addQueryParam("timeout", String.valueOf(timeout), false);
        }
        return getAccountInfoWithResponse(requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Returns the sku name and account kind.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> getAccountInfo() {
        // Generated convenience method for getAccountInfoWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getAccountInfoWithResponse(requestOptions).flatMap(FluxUtil::toMono);
    }

    @Generated
    private static final TypeReference<List<SignedIdentifier>> TYPE_REFERENCE_LIST_SIGNED_IDENTIFIER
        = new TypeReference<List<SignedIdentifier>>() {
        };
}
