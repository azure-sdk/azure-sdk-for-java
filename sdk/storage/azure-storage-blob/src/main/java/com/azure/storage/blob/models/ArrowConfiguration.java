// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.storage.blob.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Represents the Apache Arrow configuration.
 */
@Immutable
public final class ArrowConfiguration implements JsonSerializable<ArrowConfiguration> {
    /*
     * The Apache Arrow schema
     */
    @Generated
    private final List<ArrowField> schema;

    /**
     * Creates an instance of ArrowConfiguration class.
     * 
     * @param schema the schema value to set.
     */
    @Generated
    public ArrowConfiguration(List<ArrowField> schema) {
        this.schema = schema;
    }

    /**
     * Get the schema property: The Apache Arrow schema.
     * 
     * @return the schema value.
     */
    @Generated
    public List<ArrowField> getSchema() {
        return this.schema;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("schema", this.schema, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ArrowConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ArrowConfiguration if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ArrowConfiguration.
     */
    @Generated
    public static ArrowConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            List<ArrowField> schema = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("schema".equals(fieldName)) {
                    schema = reader.readArray(reader1 -> ArrowField.fromJson(reader1));
                } else {
                    reader.skipChildren();
                }
            }
            return new ArrowConfiguration(schema);
        });
    }
}
