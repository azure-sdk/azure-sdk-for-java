// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.storage.blob;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.HttpHeaderName;
import com.azure.core.http.RequestConditions;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.FluxUtil;
import com.azure.storage.blob.implementation.BlobsImpl;
import com.azure.storage.blob.models.AccessTier;
import com.azure.storage.blob.models.BlobExpiryOptions;
import com.azure.storage.blob.models.BlobImmutabilityPolicyMode;
import com.azure.storage.blob.models.BlobTags;
import com.azure.storage.blob.models.DeleteSnapshotsOptionType;
import com.azure.storage.blob.models.QueryRequest;
import com.azure.storage.blob.models.RehydratePriority;
import java.time.OffsetDateTime;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the asynchronous BlobClient type.
 */
@ServiceClient(builder = BlobClientBuilder.class, isAsync = true)
public final class BlobAsyncClient {
    @Generated
    private final BlobsImpl serviceClient;

    /**
     * Initializes an instance of BlobAsyncClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    BlobAsyncClient(BlobsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * The Download operation reads or downloads a blob from the system, including its metadata and properties. You can
     * also call Download to read a snapshot.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>snapshot</td><td>String</td><td>No</td><td>The snapshot parameter is an opaque DateTime value that, when
     * present, specifies the blob snapshot to retrieve. For more information on working with blob snapshots, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob"&gt;Creating
     * a Snapshot of a Blob.&lt;/a&gt;</td></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-range</td><td>String</td><td>No</td><td>Return only the bytes of the blob in the specified
     * range.</td></tr>
     * <tr><td>x-ms-lease-id</td><td>String</td><td>No</td><td>If specified, the operation only succeeds if the
     * resource's lease is active and matches this ID.</td></tr>
     * <tr><td>x-ms-range-get-content-md5</td><td>Boolean</td><td>No</td><td>Optional. When this header is set to true
     * and specified together with the Range header, the service returns the MD5 hash for the range, as long as the
     * range is less than or equal to 4 MB in size.</td></tr>
     * <tr><td>x-ms-range-get-content-crc64</td><td>Boolean</td><td>No</td><td>Optional. When this header is set to true
     * and specified together with the Range header, the service returns the CRC64 hash for the range, as long as the
     * range is less than or equal to 4 MB in size.</td></tr>
     * <tr><td>x-ms-encryption-key</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later. Specifies
     * the encryption key to use to encrypt the data provided in the request. If not specified, the request will be
     * encrypted with the root account key.</td></tr>
     * <tr><td>x-ms-encryption-key-sha256</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later.
     * Specifies the SHA256 hash of the encryption key used to encrypt the data provided in the request. This header is
     * only used for encryption with a customer-provided key. If the request is authenticated with a client token, this
     * header should be specified using the SHA256 hash of the encryption key.</td></tr>
     * <tr><td>x-ms-encryption-algorithm</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later.
     * Specifies the algorithm to use for encryption. If not specified, the default is AES256.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>A condition that must be met in order for the request to be
     * processed.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>A condition that must be met in order for the request to
     * be processed.</td></tr>
     * <tr><td>x-ms-if-tags</td><td>String</td><td>No</td><td>Specify a SQL where clause on blob tags to operate only on
     * blobs with a matching value.</td></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>A date-time value. A request is made under
     * the condition that the resource has been modified since the specified date-time.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>A date-time value. A request is made under
     * the condition that the resource has not been modified since the specified date-time.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * byte[]
     * }
     * </pre>
     * 
     * @param containerName The name of the container.
     * @param blob The name of the blob.
     * @param versionId The version id parameter is an opaque DateTime value that, when present, specifies the version
     * of the blob to operate on. It's for service version 2019-10-10 and newer.
     * @param version Specifies the version of the operation to use for this request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represent a byte array along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> downloadWithResponse(String containerName, String blob, String versionId,
        String version, RequestOptions requestOptions) {
        return this.serviceClient.downloadWithResponseAsync(containerName, blob, versionId, version, requestOptions);
    }

    /**
     * The Get Properties operation returns all user-defined metadata, standard HTTP properties, and system properties
     * for the blob. It does not return the content of the blob.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>snapshot</td><td>String</td><td>No</td><td>The snapshot parameter is an opaque DateTime value that, when
     * present, specifies the blob snapshot to retrieve. For more information on working with blob snapshots, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob"&gt;Creating
     * a Snapshot of a Blob.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-lease-id</td><td>String</td><td>No</td><td>If specified, the operation only succeeds if the
     * resource's lease is active and matches this ID.</td></tr>
     * <tr><td>x-ms-encryption-key</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later. Specifies
     * the encryption key to use to encrypt the data provided in the request. If not specified, the request will be
     * encrypted with the root account key.</td></tr>
     * <tr><td>x-ms-encryption-key-sha256</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later.
     * Specifies the SHA256 hash of the encryption key used to encrypt the data provided in the request. This header is
     * only used for encryption with a customer-provided key. If the request is authenticated with a client token, this
     * header should be specified using the SHA256 hash of the encryption key.</td></tr>
     * <tr><td>x-ms-encryption-algorithm</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later.
     * Specifies the algorithm to use for encryption. If not specified, the default is AES256.</td></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>A date-time value. A request is made under
     * the condition that the resource has been modified since the specified date-time.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>A date-time value. A request is made under
     * the condition that the resource has not been modified since the specified date-time.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>A condition that must be met in order for the request to be
     * processed.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>A condition that must be met in order for the request to
     * be processed.</td></tr>
     * <tr><td>x-ms-if-tags</td><td>String</td><td>No</td><td>Specify a SQL where clause on blob tags to operate only on
     * blobs with a matching value.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param containerName The name of the container.
     * @param blob The name of the blob.
     * @param versionId The version id parameter is an opaque DateTime value that, when present, specifies the version
     * of the blob to operate on. It's for service version 2019-10-10 and newer.
     * @param version Specifies the version of the operation to use for this request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> getPropertiesWithResponse(String containerName, String blob, String versionId,
        String version, RequestOptions requestOptions) {
        return this.serviceClient.getPropertiesWithResponseAsync(containerName, blob, versionId, version,
            requestOptions);
    }

    /**
     * If the storage account's soft delete feature is disabled then, when a blob is deleted, it is permanently removed
     * from the storage account. If the storage account's soft delete feature is enabled, then, when a blob is deleted,
     * it is marked for deletion and becomes inaccessible immediately. However, the blob service retains the blob or
     * snapshot for the number of days specified by the DeleteRetentionPolicy section of [Storage service properties]
     * (Set-Blob-Service-Properties.md). After the specified number of days has passed, the blob's data is permanently
     * removed from the storage account. Note that you continue to be charged for the soft-deleted blob's storage until
     * it is permanently removed. Use the List Blobs API and specify the \"include=deleted\" query parameter to discover
     * which blobs and snapshots have been soft deleted. You can then use the Undelete Blob API to restore a
     * soft-deleted blob. All other operations on a soft-deleted blob or snapshot causes the service to return an HTTP
     * status code of 404 (ResourceNotFound).
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>snapshot</td><td>String</td><td>No</td><td>The snapshot parameter is an opaque DateTime value that, when
     * present, specifies the blob snapshot to retrieve. For more information on working with blob snapshots, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob"&gt;Creating
     * a Snapshot of a Blob.&lt;/a&gt;</td></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * <tr><td>deletetype</td><td>String</td><td>No</td><td>Optional. Only possible value is 'permanent', which
     * specifies to permanently delete a blob if blob soft delete is enabled. Allowed values: "none",
     * "include".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-lease-id</td><td>String</td><td>No</td><td>If specified, the operation only succeeds if the
     * resource's lease is active and matches this ID.</td></tr>
     * <tr><td>x-ms-delete-snapshots</td><td>String</td><td>No</td><td>Required if the blob has associated snapshots.
     * Specify one of the following two options: include: Delete the base blob and all of its snapshots. only: Delete
     * only the blob's snapshots and not the blob itself. Allowed values: "none", "include".</td></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>A date-time value. A request is made under
     * the condition that the resource has been modified since the specified date-time.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>A date-time value. A request is made under
     * the condition that the resource has not been modified since the specified date-time.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>A condition that must be met in order for the request to be
     * processed.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>A condition that must be met in order for the request to
     * be processed.</td></tr>
     * <tr><td>x-ms-if-tags</td><td>String</td><td>No</td><td>Specify a SQL where clause on blob tags to operate only on
     * blobs with a matching value.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param containerName The name of the container.
     * @param blob The name of the blob.
     * @param versionId The version id parameter is an opaque DateTime value that, when present, specifies the version
     * of the blob to operate on. It's for service version 2019-10-10 and newer.
     * @param version Specifies the version of the operation to use for this request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteWithResponse(String containerName, String blob, String versionId, String version,
        RequestOptions requestOptions) {
        return this.serviceClient.deleteWithResponseAsync(containerName, blob, versionId, version, requestOptions);
    }

    /**
     * "Undelete a blob that was previously soft deleted".
     * 
     * @param containerName The name of the container.
     * @param blob The name of the blob.
     * @param version Specifies the version of the operation to use for this request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> undeleteWithResponse(String containerName, String blob, String version,
        RequestOptions requestOptions) {
        return this.serviceClient.undeleteWithResponseAsync(containerName, blob, version, requestOptions);
    }

    /**
     * "Set the expiration time of a blob".
     * 
     * @param containerName The name of the container.
     * @param blob The name of the blob.
     * @param expiryOptions Required. Indicates mode of the expiry time. Allowed values: "NeverExpire",
     * "RelativeToCreation", "RelativeToNow", "Absolute".
     * @param expiresOn The time to set the blob to expiry.
     * @param version Specifies the version of the operation to use for this request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> setExpiryWithResponse(String containerName, String blob, String expiryOptions,
        String expiresOn, String version, RequestOptions requestOptions) {
        return this.serviceClient.setExpiryWithResponseAsync(containerName, blob, expiryOptions, expiresOn, version,
            requestOptions);
    }

    /**
     * The Set HTTP Headers operation sets system properties on the blob.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-blob-cache-control</td><td>String</td><td>No</td><td>Optional. Sets the blob's cache control. If
     * specified, this property is stored with the blob and returned with a read request.</td></tr>
     * <tr><td>x-ms-blob-content-type</td><td>String</td><td>No</td><td>Optional. Sets the blob's content type. If
     * specified, this property is stored with the blob and returned with a read request.</td></tr>
     * <tr><td>x-ms-blob-content-md5</td><td>String</td><td>No</td><td>Optional. An MD5 hash of the blob content. Note
     * that this hash is not validated, as the hashes for the individual blocks were validated when each was
     * uploaded.</td></tr>
     * <tr><td>x-ms-blob-content-encoding</td><td>String</td><td>No</td><td>Optional. Sets the blob's content encoding.
     * If specified, this property is stored with the blob and returned with a read request.</td></tr>
     * <tr><td>x-ms-blob-content-language</td><td>String</td><td>No</td><td>Optional. Set the blob's content language.
     * If specified, this property is stored with the blob and returned with a read request.</td></tr>
     * <tr><td>x-ms-lease-id</td><td>String</td><td>No</td><td>If specified, the operation only succeeds if the
     * resource's lease is active and matches this ID.</td></tr>
     * <tr><td>x-ms-blob-content-disposition</td><td>String</td><td>No</td><td>Optional. Sets the blob's content
     * disposition. If specified, this property is stored with the blob and returned with a read request.</td></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>A date-time value. A request is made under
     * the condition that the resource has been modified since the specified date-time.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>A date-time value. A request is made under
     * the condition that the resource has not been modified since the specified date-time.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>A condition that must be met in order for the request to be
     * processed.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>A condition that must be met in order for the request to
     * be processed.</td></tr>
     * <tr><td>x-ms-if-tags</td><td>String</td><td>No</td><td>Specify a SQL where clause on blob tags to operate only on
     * blobs with a matching value.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param containerName The name of the container.
     * @param blob The name of the blob.
     * @param version Specifies the version of the operation to use for this request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> setHttpHeadersWithResponse(String containerName, String blob, String version,
        RequestOptions requestOptions) {
        return this.serviceClient.setHttpHeadersWithResponseAsync(containerName, blob, version, requestOptions);
    }

    /**
     * "Set the immutability policy of a blob".
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>A date-time value. A request is made under
     * the condition that the resource has not been modified since the specified date-time.</td></tr>
     * <tr><td>x-ms-immutability-policy-until-date</td><td>String</td><td>No</td><td>Specifies the date time when the
     * blobs immutability policy is set to expire.</td></tr>
     * <tr><td>x-ms-immutability-policy-mode</td><td>String</td><td>No</td><td>Specifies the immutability policy mode to
     * set on the blob. Allowed values: "Mutable", "Locked", "Unlocked".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param containerName The name of the container.
     * @param blob The name of the blob.
     * @param version Specifies the version of the operation to use for this request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> setImmutabilityPolicyWithResponse(String containerName, String blob, String version,
        RequestOptions requestOptions) {
        return this.serviceClient.setImmutabilityPolicyWithResponseAsync(containerName, blob, version, requestOptions);
    }

    /**
     * The Delete Immutability Policy operation deletes the immutability policy on the blob.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * 
     * @param containerName The name of the container.
     * @param blob The name of the blob.
     * @param version Specifies the version of the operation to use for this request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteImmutabilityPolicyWithResponse(String containerName, String blob, String version,
        RequestOptions requestOptions) {
        return this.serviceClient.deleteImmutabilityPolicyWithResponseAsync(containerName, blob, version,
            requestOptions);
    }

    /**
     * The Set Legal Hold operation sets a legal hold on the blob.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * 
     * @param containerName The name of the container.
     * @param blob The name of the blob.
     * @param legalHold Required. Specifies the legal hold status to set on the blob.
     * @param version Specifies the version of the operation to use for this request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> setLegalHoldWithResponse(String containerName, String blob, boolean legalHold,
        String version, RequestOptions requestOptions) {
        return this.serviceClient.setLegalHoldWithResponseAsync(containerName, blob, legalHold, version,
            requestOptions);
    }

    /**
     * The Set Metadata operation sets user-defined metadata for the specified blob as one or more name-value pairs.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-lease-id</td><td>String</td><td>No</td><td>If specified, the operation only succeeds if the
     * resource's lease is active and matches this ID.</td></tr>
     * <tr><td>x-ms-encryption-key</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later. Specifies
     * the encryption key to use to encrypt the data provided in the request. If not specified, the request will be
     * encrypted with the root account key.</td></tr>
     * <tr><td>x-ms-encryption-key-sha256</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later.
     * Specifies the SHA256 hash of the encryption key used to encrypt the data provided in the request. This header is
     * only used for encryption with a customer-provided key. If the request is authenticated with a client token, this
     * header should be specified using the SHA256 hash of the encryption key.</td></tr>
     * <tr><td>x-ms-encryption-algorithm</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later.
     * Specifies the algorithm to use for encryption. If not specified, the default is AES256.</td></tr>
     * <tr><td>x-ms-encryption-scope</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later. Specifies
     * the encryption scope to use to encrypt the data provided in the request. If not specified, the request will be
     * encrypted with the root account key.</td></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>A date-time value. A request is made under
     * the condition that the resource has been modified since the specified date-time.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>A date-time value. A request is made under
     * the condition that the resource has not been modified since the specified date-time.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>A condition that must be met in order for the request to be
     * processed.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>A condition that must be met in order for the request to
     * be processed.</td></tr>
     * <tr><td>x-ms-if-tags</td><td>String</td><td>No</td><td>Specify a SQL where clause on blob tags to operate only on
     * blobs with a matching value.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param containerName The name of the container.
     * @param blob The name of the blob.
     * @param version Specifies the version of the operation to use for this request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> setMetadataWithResponse(String containerName, String blob, String version,
        RequestOptions requestOptions) {
        return this.serviceClient.setMetadataWithResponseAsync(containerName, blob, version, requestOptions);
    }

    /**
     * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete operations.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-proposed-lease-id</td><td>String</td><td>No</td><td>Optional. The proposed lease ID for the
     * container.</td></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>A date-time value. A request is made under
     * the condition that the resource has been modified since the specified date-time.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>A date-time value. A request is made under
     * the condition that the resource has not been modified since the specified date-time.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>A condition that must be met in order for the request to be
     * processed.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>A condition that must be met in order for the request to
     * be processed.</td></tr>
     * <tr><td>x-ms-if-tags</td><td>String</td><td>No</td><td>Specify a SQL where clause on blob tags to operate only on
     * blobs with a matching value.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param containerName The name of the container.
     * @param blob The name of the blob.
     * @param duration Specifies the duration of the lease, in seconds, or negative one (-1) for a lease that never
     * expires. A non-infinite lease can be between 15 and 60 seconds. A lease duration cannot be changed using renew or
     * change.
     * @param version Specifies the version of the operation to use for this request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> acquireLeaseWithResponse(String containerName, String blob, int duration,
        String version, RequestOptions requestOptions) {
        return this.serviceClient.acquireLeaseWithResponseAsync(containerName, blob, duration, version, requestOptions);
    }

    /**
     * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete operations.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>A date-time value. A request is made under
     * the condition that the resource has been modified since the specified date-time.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>A date-time value. A request is made under
     * the condition that the resource has not been modified since the specified date-time.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>A condition that must be met in order for the request to be
     * processed.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>A condition that must be met in order for the request to
     * be processed.</td></tr>
     * <tr><td>x-ms-if-tags</td><td>String</td><td>No</td><td>Specify a SQL where clause on blob tags to operate only on
     * blobs with a matching value.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param containerName The name of the container.
     * @param blob The name of the blob.
     * @param leaseId Required. A lease ID for the source path. If specified, the source path must have an active lease
     * and the lease ID must match.
     * @param version Specifies the version of the operation to use for this request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> releaseLeaseWithResponse(String containerName, String blob, String leaseId,
        String version, RequestOptions requestOptions) {
        return this.serviceClient.releaseLeaseWithResponseAsync(containerName, blob, leaseId, version, requestOptions);
    }

    /**
     * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete operations.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>A date-time value. A request is made under
     * the condition that the resource has been modified since the specified date-time.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>A date-time value. A request is made under
     * the condition that the resource has not been modified since the specified date-time.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>A condition that must be met in order for the request to be
     * processed.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>A condition that must be met in order for the request to
     * be processed.</td></tr>
     * <tr><td>x-ms-if-tags</td><td>String</td><td>No</td><td>Specify a SQL where clause on blob tags to operate only on
     * blobs with a matching value.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param containerName The name of the container.
     * @param blob The name of the blob.
     * @param leaseId Required. A lease ID for the source path. If specified, the source path must have an active lease
     * and the lease ID must match.
     * @param version Specifies the version of the operation to use for this request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> renewLeaseWithResponse(String containerName, String blob, String leaseId,
        String version, RequestOptions requestOptions) {
        return this.serviceClient.renewLeaseWithResponseAsync(containerName, blob, leaseId, version, requestOptions);
    }

    /**
     * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete operations.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-proposed-lease-id</td><td>String</td><td>No</td><td>Optional. The proposed lease ID for the
     * container.</td></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>A date-time value. A request is made under
     * the condition that the resource has been modified since the specified date-time.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>A date-time value. A request is made under
     * the condition that the resource has not been modified since the specified date-time.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>A condition that must be met in order for the request to be
     * processed.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>A condition that must be met in order for the request to
     * be processed.</td></tr>
     * <tr><td>x-ms-if-tags</td><td>String</td><td>No</td><td>Specify a SQL where clause on blob tags to operate only on
     * blobs with a matching value.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param containerName The name of the container.
     * @param blob The name of the blob.
     * @param leaseId Required. A lease ID for the source path. If specified, the source path must have an active lease
     * and the lease ID must match.
     * @param version Specifies the version of the operation to use for this request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> changeLeaseWithResponse(String containerName, String blob, String leaseId,
        String version, RequestOptions requestOptions) {
        return this.serviceClient.changeLeaseWithResponseAsync(containerName, blob, leaseId, version, requestOptions);
    }

    /**
     * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete operations.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-lease-break-period</td><td>Integer</td><td>No</td><td>For a break operation, proposed duration the
     * lease should continue before it is broken, in seconds, between 0 and 60. This break period is only used if it is
     * shorter than the time remaining on the lease. If longer, the time remaining on the lease is used. A new lease
     * will not be available before the break period has expired, but the lease may be held for longer than the break
     * period. If this header does not appear with a break operation, a fixed-duration lease breaks after the remaining
     * lease period elapses, and an infinite lease breaks immediately.</td></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>A date-time value. A request is made under
     * the condition that the resource has been modified since the specified date-time.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>A date-time value. A request is made under
     * the condition that the resource has not been modified since the specified date-time.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>A condition that must be met in order for the request to be
     * processed.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>A condition that must be met in order for the request to
     * be processed.</td></tr>
     * <tr><td>x-ms-if-tags</td><td>String</td><td>No</td><td>Specify a SQL where clause on blob tags to operate only on
     * blobs with a matching value.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param containerName The name of the container.
     * @param blob The name of the blob.
     * @param version Specifies the version of the operation to use for this request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> breakLeaseWithResponse(String containerName, String blob, String version,
        RequestOptions requestOptions) {
        return this.serviceClient.breakLeaseWithResponseAsync(containerName, blob, version, requestOptions);
    }

    /**
     * The Create Snapshot operation creates a read-only snapshot of a blob.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-lease-id</td><td>String</td><td>No</td><td>If specified, the operation only succeeds if the
     * resource's lease is active and matches this ID.</td></tr>
     * <tr><td>x-ms-encryption-key</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later. Specifies
     * the encryption key to use to encrypt the data provided in the request. If not specified, the request will be
     * encrypted with the root account key.</td></tr>
     * <tr><td>x-ms-encryption-key-sha256</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later.
     * Specifies the SHA256 hash of the encryption key used to encrypt the data provided in the request. This header is
     * only used for encryption with a customer-provided key. If the request is authenticated with a client token, this
     * header should be specified using the SHA256 hash of the encryption key.</td></tr>
     * <tr><td>x-ms-encryption-algorithm</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later.
     * Specifies the algorithm to use for encryption. If not specified, the default is AES256.</td></tr>
     * <tr><td>x-ms-encryption-scope</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later. Specifies
     * the encryption scope to use to encrypt the data provided in the request. If not specified, the request will be
     * encrypted with the root account key.</td></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>A date-time value. A request is made under
     * the condition that the resource has been modified since the specified date-time.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>A date-time value. A request is made under
     * the condition that the resource has not been modified since the specified date-time.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>A condition that must be met in order for the request to be
     * processed.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>A condition that must be met in order for the request to
     * be processed.</td></tr>
     * <tr><td>x-ms-if-tags</td><td>String</td><td>No</td><td>Specify a SQL where clause on blob tags to operate only on
     * blobs with a matching value.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param containerName The name of the container.
     * @param blob The name of the blob.
     * @param version Specifies the version of the operation to use for this request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> createSnapshotWithResponse(String containerName, String blob, String version,
        RequestOptions requestOptions) {
        return this.serviceClient.createSnapshotWithResponseAsync(containerName, blob, version, requestOptions);
    }

    /**
     * The Start Copy From URL operation copies a blob or an internet resource to a new blob.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-access-tier</td><td>String</td><td>No</td><td>Optional. The tier to be set on the blob. Allowed
     * values: "P4", "P6", "P10", "P15", "P20", "P30", "P40", "P50", "P60", "P70", "P80", "Hot", "Cool",
     * "Archive".</td></tr>
     * <tr><td>x-ms-rehydrate-priority</td><td>String</td><td>No</td><td>Optional: Indicates the priority with which to
     * rehydrate an archived blob. Allowed values: "High", "Standard".</td></tr>
     * <tr><td>x-ms-source-if-modified-since</td><td>OffsetDateTime</td><td>No</td><td>Specify this header value to
     * operate only on a blob if it has been modified since the specified date/time.</td></tr>
     * <tr><td>x-ms-source-if-unmodified-since</td><td>OffsetDateTime</td><td>No</td><td>Specify this header value to
     * operate only on a blob if it has not been modified since the specified date/time.</td></tr>
     * <tr><td>x-ms-source-if-match</td><td>String</td><td>No</td><td>Specify an ETag value to operate only on blobs
     * with a matching value.</td></tr>
     * <tr><td>x-ms-source-if-none-match</td><td>String</td><td>No</td><td>Specify this header value to operate only on
     * a blob if it has been modified since the specified date/time.</td></tr>
     * <tr><td>x-ms-source-if-tags</td><td>String</td><td>No</td><td>Specify a SQL where clause on blob tags to operate
     * only on blobs with a matching value.</td></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>A date-time value. A request is made under
     * the condition that the resource has been modified since the specified date-time.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>A date-time value. A request is made under
     * the condition that the resource has not been modified since the specified date-time.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>A condition that must be met in order for the request to be
     * processed.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>A condition that must be met in order for the request to
     * be processed.</td></tr>
     * <tr><td>x-ms-if-tags</td><td>String</td><td>No</td><td>Specify a SQL where clause on blob tags to operate only on
     * blobs with a matching value.</td></tr>
     * <tr><td>x-ms-lease-id</td><td>String</td><td>No</td><td>If specified, the operation only succeeds if the
     * resource's lease is active and matches this ID.</td></tr>
     * <tr><td>x-ms-tags</td><td>String</td><td>No</td><td>Optional. Used to set blob tags in various blob
     * operations.</td></tr>
     * <tr><td>x-ms-seal-blob</td><td>Boolean</td><td>No</td><td>Overrides the sealed state of the destination blob.
     * Service version 2019-12-12 and newer.</td></tr>
     * <tr><td>x-ms-immutability-policy-until-date</td><td>String</td><td>No</td><td>Specifies the date time when the
     * blobs immutability policy is set to expire.</td></tr>
     * <tr><td>x-ms-immutability-policy-mode</td><td>String</td><td>No</td><td>Specifies the immutability policy mode to
     * set on the blob. Allowed values: "Mutable", "Locked", "Unlocked".</td></tr>
     * <tr><td>x-ms-legal-hold</td><td>Boolean</td><td>No</td><td>Specified if a legal hold should be set on the
     * blob.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param containerName The name of the container.
     * @param blob The name of the blob.
     * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up to 2 KB in
     * length that specifies a page blob snapshot. The value should be URL-encoded as it would appear in a request URI.
     * The source blob must either be public or must be authenticated via a shared access signature.
     * @param version Specifies the version of the operation to use for this request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> startCopyFromUrlWithResponse(String containerName, String blob, String copySource,
        String version, RequestOptions requestOptions) {
        return this.serviceClient.startCopyFromUrlWithResponseAsync(containerName, blob, copySource, version,
            requestOptions);
    }

    /**
     * The Copy From URL operation copies a blob or an internet resource to a new blob. It will not return a response
     * until the copy is complete.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-access-tier</td><td>String</td><td>No</td><td>Optional. The tier to be set on the blob. Allowed
     * values: "P4", "P6", "P10", "P15", "P20", "P30", "P40", "P50", "P60", "P70", "P80", "Hot", "Cool",
     * "Archive".</td></tr>
     * <tr><td>x-ms-source-if-modified-since</td><td>OffsetDateTime</td><td>No</td><td>Specify this header value to
     * operate only on a blob if it has been modified since the specified date/time.</td></tr>
     * <tr><td>x-ms-source-if-unmodified-since</td><td>OffsetDateTime</td><td>No</td><td>Specify this header value to
     * operate only on a blob if it has not been modified since the specified date/time.</td></tr>
     * <tr><td>x-ms-source-if-match</td><td>String</td><td>No</td><td>Specify an ETag value to operate only on blobs
     * with a matching value.</td></tr>
     * <tr><td>x-ms-source-if-none-match</td><td>String</td><td>No</td><td>Specify this header value to operate only on
     * a blob if it has been modified since the specified date/time.</td></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>A date-time value. A request is made under
     * the condition that the resource has been modified since the specified date-time.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>A date-time value. A request is made under
     * the condition that the resource has not been modified since the specified date-time.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>A condition that must be met in order for the request to be
     * processed.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>A condition that must be met in order for the request to
     * be processed.</td></tr>
     * <tr><td>x-ms-if-tags</td><td>String</td><td>No</td><td>Specify a SQL where clause on blob tags to operate only on
     * blobs with a matching value.</td></tr>
     * <tr><td>x-ms-lease-id</td><td>String</td><td>No</td><td>If specified, the operation only succeeds if the
     * resource's lease is active and matches this ID.</td></tr>
     * <tr><td>x-ms-source-content-md5</td><td>String</td><td>No</td><td>Specify the md5 calculated for the range of
     * bytes that must be read from the copy source.</td></tr>
     * <tr><td>x-ms-tags</td><td>String</td><td>No</td><td>Optional. Used to set blob tags in various blob
     * operations.</td></tr>
     * <tr><td>x-ms-immutability-policy-until-date</td><td>String</td><td>No</td><td>Specifies the date time when the
     * blobs immutability policy is set to expire.</td></tr>
     * <tr><td>x-ms-immutability-policy-mode</td><td>String</td><td>No</td><td>Specifies the immutability policy mode to
     * set on the blob. Allowed values: "Mutable", "Locked", "Unlocked".</td></tr>
     * <tr><td>x-ms-legal-hold</td><td>Boolean</td><td>No</td><td>Specified if a legal hold should be set on the
     * blob.</td></tr>
     * <tr><td>x-ms-copy-source-authorization</td><td>String</td><td>No</td><td>Only Bearer type is supported.
     * Credentials should be a valid OAuth access token to copy source.</td></tr>
     * <tr><td>x-ms-encryption-scope</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later. Specifies
     * the encryption scope to use to encrypt the data provided in the request. If not specified, the request will be
     * encrypted with the root account key.</td></tr>
     * <tr><td>x-ms-copy-source-tags</td><td>String</td><td>No</td><td>Optional, default 'replace'. Indicates if source
     * tags should be copied or replaced with the tags specified by x-ms-tags.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param containerName The name of the container.
     * @param blob The name of the blob.
     * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up to 2 KB in
     * length that specifies a page blob snapshot. The value should be URL-encoded as it would appear in a request URI.
     * The source blob must either be public or must be authenticated via a shared access signature.
     * @param version Specifies the version of the operation to use for this request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> copyFromUrlWithResponse(String containerName, String blob, String copySource,
        String version, RequestOptions requestOptions) {
        return this.serviceClient.copyFromUrlWithResponseAsync(containerName, blob, copySource, version,
            requestOptions);
    }

    /**
     * The Abort Copy From URL operation aborts a pending Copy From URL operation, and leaves a destination blob with
     * zero length and full metadata.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-lease-id</td><td>String</td><td>No</td><td>If specified, the operation only succeeds if the
     * resource's lease is active and matches this ID.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param containerName The name of the container.
     * @param blob The name of the blob.
     * @param copyId The copy identifier provided in the x-ms-copy-id header of the original Copy Blob operation.
     * @param version Specifies the version of the operation to use for this request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> abortCopyFromUrlWithResponse(String containerName, String blob, String copyId,
        String version, RequestOptions requestOptions) {
        return this.serviceClient.abortCopyFromUrlWithResponseAsync(containerName, blob, copyId, version,
            requestOptions);
    }

    /**
     * The Set Tier operation sets the tier on a block blob. The operation is allowed on a page blob or block blob, but
     * not on an append blob. A block blob's tier determines Hot/Cool/Archive storage type. This operation does not
     * update the blob's ETag.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-rehydrate-priority</td><td>String</td><td>No</td><td>Optional: Indicates the priority with which to
     * rehydrate an archived blob. Allowed values: "High", "Standard".</td></tr>
     * <tr><td>x-ms-lease-id</td><td>String</td><td>No</td><td>If specified, the operation only succeeds if the
     * resource's lease is active and matches this ID.</td></tr>
     * <tr><td>x-ms-if-tags</td><td>String</td><td>No</td><td>Specify a SQL where clause on blob tags to operate only on
     * blobs with a matching value.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param containerName The name of the container.
     * @param blob The name of the blob.
     * @param accessTier Indicates the tier to be set on the blob. Allowed values: "P4", "P6", "P10", "P15", "P20",
     * "P30", "P40", "P50", "P60", "P70", "P80", "Hot", "Cool", "Archive".
     * @param version Specifies the version of the operation to use for this request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> setTierWithResponse(String containerName, String blob, String accessTier,
        String version, RequestOptions requestOptions) {
        return this.serviceClient.setTierWithResponseAsync(containerName, blob, accessTier, version, requestOptions);
    }

    /**
     * Returns the sku name and account kind.
     * 
     * @param containerName The name of the container.
     * @param blob The name of the blob.
     * @param version Specifies the version of the operation to use for this request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> getAccountInfoWithResponse(String containerName, String blob, String version,
        RequestOptions requestOptions) {
        return this.serviceClient.getAccountInfoWithResponseAsync(containerName, blob, version, requestOptions);
    }

    /**
     * The Query operation enables users to select/project on blob data by providing simple query expressions.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>snapshot</td><td>String</td><td>No</td><td>The snapshot parameter is an opaque DateTime value that, when
     * present, specifies the blob snapshot to retrieve. For more information on working with blob snapshots, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob"&gt;Creating
     * a Snapshot of a Blob.&lt;/a&gt;</td></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-lease-id</td><td>String</td><td>No</td><td>If specified, the operation only succeeds if the
     * resource's lease is active and matches this ID.</td></tr>
     * <tr><td>x-ms-encryption-key</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later. Specifies
     * the encryption key to use to encrypt the data provided in the request. If not specified, the request will be
     * encrypted with the root account key.</td></tr>
     * <tr><td>x-ms-encryption-key-sha256</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later.
     * Specifies the SHA256 hash of the encryption key used to encrypt the data provided in the request. This header is
     * only used for encryption with a customer-provided key. If the request is authenticated with a client token, this
     * header should be specified using the SHA256 hash of the encryption key.</td></tr>
     * <tr><td>x-ms-encryption-algorithm</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later.
     * Specifies the algorithm to use for encryption. If not specified, the default is AES256.</td></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>A date-time value. A request is made under
     * the condition that the resource has been modified since the specified date-time.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>A date-time value. A request is made under
     * the condition that the resource has not been modified since the specified date-time.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>A condition that must be met in order for the request to be
     * processed.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>A condition that must be met in order for the request to
     * be processed.</td></tr>
     * <tr><td>x-ms-if-tags</td><td>String</td><td>No</td><td>Specify a SQL where clause on blob tags to operate only on
     * blobs with a matching value.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     queryType: String(SQL) (Required)
     *     expression: String (Required)
     *     inputSerialization (Optional): {
     *         format (Required): {
     *             type: String(delimited/json/arrow/parquet) (Required)
     *             delimitedTextConfiguration (Optional): {
     *                 columnSeparator: String (Optional)
     *                 fieldQuote: String (Optional)
     *                 recordSeparator: String (Optional)
     *                 escapeChar: String (Optional)
     *                 headersPresent: Boolean (Optional)
     *             }
     *             jsonTextConfiguration (Optional): {
     *                 recordSeparator: String (Optional)
     *             }
     *             arrowConfiguration (Optional): {
     *                 schema (Required): [
     *                      (Required){
     *                         type: String (Required)
     *                         name: String (Optional)
     *                         precision: Integer (Optional)
     *                         scale: Integer (Optional)
     *                     }
     *                 ]
     *             }
     *             parquetConfiguration (Optional): {
     *                  (Optional): {
     *                     String: Object (Required)
     *                 }
     *             }
     *         }
     *     }
     *     outputSerialization (Optional): (recursive schema, see outputSerialization above)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * byte[]
     * }
     * </pre>
     * 
     * @param containerName The name of the container.
     * @param blob The name of the blob.
     * @param version Specifies the version of the operation to use for this request.
     * @param queryRequest The query request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represent a byte array along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> queryWithResponse(String containerName, String blob, String version,
        BinaryData queryRequest, RequestOptions requestOptions) {
        return this.serviceClient.queryWithResponseAsync(containerName, blob, version, queryRequest, requestOptions);
    }

    /**
     * The Get Blob Tags operation enables users to get tags on a blob.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * <tr><td>snapshot</td><td>String</td><td>No</td><td>The snapshot parameter is an opaque DateTime value that, when
     * present, specifies the blob snapshot to retrieve. For more information on working with blob snapshots, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob"&gt;Creating
     * a Snapshot of a Blob.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-lease-id</td><td>String</td><td>No</td><td>If specified, the operation only succeeds if the
     * resource's lease is active and matches this ID.</td></tr>
     * <tr><td>x-ms-if-tags</td><td>String</td><td>No</td><td>Specify a SQL where clause on blob tags to operate only on
     * blobs with a matching value.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     blobTagSet (Required): [
     *          (Required){
     *             key: String (Required)
     *             value: String (Required)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param containerName The name of the container.
     * @param blob The name of the blob.
     * @param versionId The version id parameter is an opaque DateTime value that, when present, specifies the version
     * of the blob to operate on. It's for service version 2019-10-10 and newer.
     * @param version Specifies the version of the operation to use for this request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents blob tags along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getTagsWithResponse(String containerName, String blob, String versionId,
        String version, RequestOptions requestOptions) {
        return this.serviceClient.getTagsWithResponseAsync(containerName, blob, versionId, version, requestOptions);
    }

    /**
     * The Set Tags operation enables users to set tags on a blob.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-lease-id</td><td>String</td><td>No</td><td>If specified, the operation only succeeds if the
     * resource's lease is active and matches this ID.</td></tr>
     * <tr><td>Content-MD5</td><td>String</td><td>No</td><td>Optional. An MD5 hash of the blob content. Note that this
     * hash is not validated, as the hashes for the individual blocks were validated when each was uploaded.</td></tr>
     * <tr><td>x-ms-content-crc64</td><td>String</td><td>No</td><td>Specify the transactional crc64 for the body, to be
     * validated by the service.</td></tr>
     * <tr><td>x-ms-if-tags</td><td>String</td><td>No</td><td>Specify a SQL where clause on blob tags to operate only on
     * blobs with a matching value.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     blobTagSet (Required): [
     *          (Required){
     *             key: String (Required)
     *             value: String (Required)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param containerName The name of the container.
     * @param blob The name of the blob.
     * @param versionId The version id parameter is an opaque DateTime value that, when present, specifies the version
     * of the blob to operate on. It's for service version 2019-10-10 and newer.
     * @param version Specifies the version of the operation to use for this request.
     * @param tags The blob tags.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> setTagsWithResponse(String containerName, String blob, String versionId, String version,
        BinaryData tags, RequestOptions requestOptions) {
        return this.serviceClient.setTagsWithResponseAsync(containerName, blob, versionId, version, tags,
            requestOptions);
    }

    /**
     * The Download operation reads or downloads a blob from the system, including its metadata and properties. You can
     * also call Download to read a snapshot.
     * 
     * @param containerName The name of the container.
     * @param blob The name of the blob.
     * @param versionId The version id parameter is an opaque DateTime value that, when present, specifies the version
     * of the blob to operate on. It's for service version 2019-10-10 and newer.
     * @param version Specifies the version of the operation to use for this request.
     * @param snapshot The snapshot parameter is an opaque DateTime value that, when present, specifies the blob
     * snapshot to retrieve. For more information on working with blob snapshots, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob"&gt;Creating
     * a Snapshot of a Blob.&lt;/a&gt;.
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;.
     * @param range Return only the bytes of the blob in the specified range.
     * @param leaseId If specified, the operation only succeeds if the resource's lease is active and matches this ID.
     * @param rangeContentMd5 Optional. When this header is set to true and specified together with the Range header,
     * the service returns the MD5 hash for the range, as long as the range is less than or equal to 4 MB in size.
     * @param rangeContentCrc64 Optional. When this header is set to true and specified together with the Range header,
     * the service returns the CRC64 hash for the range, as long as the range is less than or equal to 4 MB in size.
     * @param encryptionKey Optional. Version 2019-07-07 and later. Specifies the encryption key to use to encrypt the
     * data provided in the request. If not specified, the request will be encrypted with the root account key.
     * @param encryptionKeySha256 Optional. Version 2019-07-07 and later. Specifies the SHA256 hash of the encryption
     * key used to encrypt the data provided in the request. This header is only used for encryption with a
     * customer-provided key. If the request is authenticated with a client token, this header should be specified using
     * the SHA256 hash of the encryption key.
     * @param encryptionAlgorithm Optional. Version 2019-07-07 and later. Specifies the algorithm to use for encryption.
     * If not specified, the default is AES256.
     * @param ifTags Specify a SQL where clause on blob tags to operate only on blobs with a matching value.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represent a byte array on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<byte[]> download(String containerName, String blob, String versionId, String version, String snapshot,
        Integer timeout, String range, String leaseId, Boolean rangeContentMd5, Boolean rangeContentCrc64,
        String encryptionKey, String encryptionKeySha256, String encryptionAlgorithm, String ifTags,
        RequestConditions requestConditions) {
        // Generated convenience method for downloadWithResponse
        RequestOptions requestOptions = new RequestOptions();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        if (snapshot != null) {
            requestOptions.addQueryParam("snapshot", snapshot, false);
        }
        if (timeout != null) {
            requestOptions.addQueryParam("timeout", String.valueOf(timeout), false);
        }
        if (range != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-range"), range);
        }
        if (leaseId != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-lease-id"), leaseId);
        }
        if (rangeContentMd5 != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-range-get-content-md5"),
                String.valueOf(rangeContentMd5));
        }
        if (rangeContentCrc64 != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-range-get-content-crc64"),
                String.valueOf(rangeContentCrc64));
        }
        if (encryptionKey != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-encryption-key"), encryptionKey);
        }
        if (encryptionKeySha256 != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-encryption-key-sha256"), encryptionKeySha256);
        }
        if (encryptionAlgorithm != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-encryption-algorithm"), encryptionAlgorithm);
        }
        if (ifTags != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-if-tags"), ifTags);
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MODIFIED_SINCE, String.valueOf(ifModifiedSince));
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_UNMODIFIED_SINCE, String.valueOf(ifUnmodifiedSince));
        }
        return downloadWithResponse(containerName, blob, versionId, version, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(byte[].class));
    }

    /**
     * The Download operation reads or downloads a blob from the system, including its metadata and properties. You can
     * also call Download to read a snapshot.
     * 
     * @param containerName The name of the container.
     * @param blob The name of the blob.
     * @param versionId The version id parameter is an opaque DateTime value that, when present, specifies the version
     * of the blob to operate on. It's for service version 2019-10-10 and newer.
     * @param version Specifies the version of the operation to use for this request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represent a byte array on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<byte[]> download(String containerName, String blob, String versionId, String version) {
        // Generated convenience method for downloadWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return downloadWithResponse(containerName, blob, versionId, version, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(byte[].class));
    }

    /**
     * The Get Properties operation returns all user-defined metadata, standard HTTP properties, and system properties
     * for the blob. It does not return the content of the blob.
     * 
     * @param containerName The name of the container.
     * @param blob The name of the blob.
     * @param versionId The version id parameter is an opaque DateTime value that, when present, specifies the version
     * of the blob to operate on. It's for service version 2019-10-10 and newer.
     * @param version Specifies the version of the operation to use for this request.
     * @param snapshot The snapshot parameter is an opaque DateTime value that, when present, specifies the blob
     * snapshot to retrieve. For more information on working with blob snapshots, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob"&gt;Creating
     * a Snapshot of a Blob.&lt;/a&gt;.
     * @param leaseId If specified, the operation only succeeds if the resource's lease is active and matches this ID.
     * @param encryptionKey Optional. Version 2019-07-07 and later. Specifies the encryption key to use to encrypt the
     * data provided in the request. If not specified, the request will be encrypted with the root account key.
     * @param encryptionKeySha256 Optional. Version 2019-07-07 and later. Specifies the SHA256 hash of the encryption
     * key used to encrypt the data provided in the request. This header is only used for encryption with a
     * customer-provided key. If the request is authenticated with a client token, this header should be specified using
     * the SHA256 hash of the encryption key.
     * @param encryptionAlgorithm Optional. Version 2019-07-07 and later. Specifies the algorithm to use for encryption.
     * If not specified, the default is AES256.
     * @param ifTags Specify a SQL where clause on blob tags to operate only on blobs with a matching value.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> getProperties(String containerName, String blob, String versionId, String version,
        String snapshot, String leaseId, String encryptionKey, String encryptionKeySha256, String encryptionAlgorithm,
        String ifTags, RequestConditions requestConditions) {
        // Generated convenience method for getPropertiesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        if (snapshot != null) {
            requestOptions.addQueryParam("snapshot", snapshot, false);
        }
        if (leaseId != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-lease-id"), leaseId);
        }
        if (encryptionKey != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-encryption-key"), encryptionKey);
        }
        if (encryptionKeySha256 != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-encryption-key-sha256"), encryptionKeySha256);
        }
        if (encryptionAlgorithm != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-encryption-algorithm"), encryptionAlgorithm);
        }
        if (ifTags != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-if-tags"), ifTags);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MODIFIED_SINCE, String.valueOf(ifModifiedSince));
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_UNMODIFIED_SINCE, String.valueOf(ifUnmodifiedSince));
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        return getPropertiesWithResponse(containerName, blob, versionId, version, requestOptions)
            .flatMap(FluxUtil::toMono);
    }

    /**
     * The Get Properties operation returns all user-defined metadata, standard HTTP properties, and system properties
     * for the blob. It does not return the content of the blob.
     * 
     * @param containerName The name of the container.
     * @param blob The name of the blob.
     * @param versionId The version id parameter is an opaque DateTime value that, when present, specifies the version
     * of the blob to operate on. It's for service version 2019-10-10 and newer.
     * @param version Specifies the version of the operation to use for this request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> getProperties(String containerName, String blob, String versionId, String version) {
        // Generated convenience method for getPropertiesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getPropertiesWithResponse(containerName, blob, versionId, version, requestOptions)
            .flatMap(FluxUtil::toMono);
    }

    /**
     * If the storage account's soft delete feature is disabled then, when a blob is deleted, it is permanently removed
     * from the storage account. If the storage account's soft delete feature is enabled, then, when a blob is deleted,
     * it is marked for deletion and becomes inaccessible immediately. However, the blob service retains the blob or
     * snapshot for the number of days specified by the DeleteRetentionPolicy section of [Storage service properties]
     * (Set-Blob-Service-Properties.md). After the specified number of days has passed, the blob's data is permanently
     * removed from the storage account. Note that you continue to be charged for the soft-deleted blob's storage until
     * it is permanently removed. Use the List Blobs API and specify the \"include=deleted\" query parameter to discover
     * which blobs and snapshots have been soft deleted. You can then use the Undelete Blob API to restore a
     * soft-deleted blob. All other operations on a soft-deleted blob or snapshot causes the service to return an HTTP
     * status code of 404 (ResourceNotFound).
     * 
     * @param containerName The name of the container.
     * @param blob The name of the blob.
     * @param versionId The version id parameter is an opaque DateTime value that, when present, specifies the version
     * of the blob to operate on. It's for service version 2019-10-10 and newer.
     * @param version Specifies the version of the operation to use for this request.
     * @param snapshot The snapshot parameter is an opaque DateTime value that, when present, specifies the blob
     * snapshot to retrieve. For more information on working with blob snapshots, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob"&gt;Creating
     * a Snapshot of a Blob.&lt;/a&gt;.
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;.
     * @param leaseId If specified, the operation only succeeds if the resource's lease is active and matches this ID.
     * @param deleteSnapshots Required if the blob has associated snapshots. Specify one of the following two options:
     * include: Delete the base blob and all of its snapshots. only: Delete only the blob's snapshots and not the blob
     * itself.
     * @param ifTags Specify a SQL where clause on blob tags to operate only on blobs with a matching value.
     * @param blobDeleteType Optional. Only possible value is 'permanent', which specifies to permanently delete a blob
     * if blob soft delete is enabled.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> delete(String containerName, String blob, String versionId, String version, String snapshot,
        Integer timeout, String leaseId, DeleteSnapshotsOptionType deleteSnapshots, String ifTags,
        DeleteSnapshotsOptionType blobDeleteType, RequestConditions requestConditions) {
        // Generated convenience method for deleteWithResponse
        RequestOptions requestOptions = new RequestOptions();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        if (snapshot != null) {
            requestOptions.addQueryParam("snapshot", snapshot, false);
        }
        if (timeout != null) {
            requestOptions.addQueryParam("timeout", String.valueOf(timeout), false);
        }
        if (leaseId != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-lease-id"), leaseId);
        }
        if (deleteSnapshots != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-delete-snapshots"), deleteSnapshots.toString());
        }
        if (ifTags != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-if-tags"), ifTags);
        }
        if (blobDeleteType != null) {
            requestOptions.addQueryParam("deletetype", blobDeleteType.toString(), false);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MODIFIED_SINCE, String.valueOf(ifModifiedSince));
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_UNMODIFIED_SINCE, String.valueOf(ifUnmodifiedSince));
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        return deleteWithResponse(containerName, blob, versionId, version, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * If the storage account's soft delete feature is disabled then, when a blob is deleted, it is permanently removed
     * from the storage account. If the storage account's soft delete feature is enabled, then, when a blob is deleted,
     * it is marked for deletion and becomes inaccessible immediately. However, the blob service retains the blob or
     * snapshot for the number of days specified by the DeleteRetentionPolicy section of [Storage service properties]
     * (Set-Blob-Service-Properties.md). After the specified number of days has passed, the blob's data is permanently
     * removed from the storage account. Note that you continue to be charged for the soft-deleted blob's storage until
     * it is permanently removed. Use the List Blobs API and specify the \"include=deleted\" query parameter to discover
     * which blobs and snapshots have been soft deleted. You can then use the Undelete Blob API to restore a
     * soft-deleted blob. All other operations on a soft-deleted blob or snapshot causes the service to return an HTTP
     * status code of 404 (ResourceNotFound).
     * 
     * @param containerName The name of the container.
     * @param blob The name of the blob.
     * @param versionId The version id parameter is an opaque DateTime value that, when present, specifies the version
     * of the blob to operate on. It's for service version 2019-10-10 and newer.
     * @param version Specifies the version of the operation to use for this request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> delete(String containerName, String blob, String versionId, String version) {
        // Generated convenience method for deleteWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return deleteWithResponse(containerName, blob, versionId, version, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * "Undelete a blob that was previously soft deleted".
     * 
     * @param containerName The name of the container.
     * @param blob The name of the blob.
     * @param version Specifies the version of the operation to use for this request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> undelete(String containerName, String blob, String version) {
        // Generated convenience method for undeleteWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return undeleteWithResponse(containerName, blob, version, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * "Set the expiration time of a blob".
     * 
     * @param containerName The name of the container.
     * @param blob The name of the blob.
     * @param expiryOptions Required. Indicates mode of the expiry time.
     * @param expiresOn The time to set the blob to expiry.
     * @param version Specifies the version of the operation to use for this request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> setExpiry(String containerName, String blob, BlobExpiryOptions expiryOptions, String expiresOn,
        String version) {
        // Generated convenience method for setExpiryWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return setExpiryWithResponse(containerName, blob, expiryOptions.toString(), expiresOn, version, requestOptions)
            .flatMap(FluxUtil::toMono);
    }

    /**
     * The Set HTTP Headers operation sets system properties on the blob.
     * 
     * @param containerName The name of the container.
     * @param blob The name of the blob.
     * @param version Specifies the version of the operation to use for this request.
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;.
     * @param blobCacheControl Optional. Sets the blob's cache control. If specified, this property is stored with the
     * blob and returned with a read request.
     * @param blobContentType Optional. Sets the blob's content type. If specified, this property is stored with the
     * blob and returned with a read request.
     * @param blobContentMd5 Optional. An MD5 hash of the blob content. Note that this hash is not validated, as the
     * hashes for the individual blocks were validated when each was uploaded.
     * @param blobContentEncoding Optional. Sets the blob's content encoding. If specified, this property is stored with
     * the blob and returned with a read request.
     * @param blobContentLanguage Optional. Set the blob's content language. If specified, this property is stored with
     * the blob and returned with a read request.
     * @param leaseId If specified, the operation only succeeds if the resource's lease is active and matches this ID.
     * @param blobContentDisposition Optional. Sets the blob's content disposition. If specified, this property is
     * stored with the blob and returned with a read request.
     * @param ifTags Specify a SQL where clause on blob tags to operate only on blobs with a matching value.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> setHttpHeaders(String containerName, String blob, String version, Integer timeout,
        String blobCacheControl, String blobContentType, String blobContentMd5, String blobContentEncoding,
        String blobContentLanguage, String leaseId, String blobContentDisposition, String ifTags,
        RequestConditions requestConditions) {
        // Generated convenience method for setHttpHeadersWithResponse
        RequestOptions requestOptions = new RequestOptions();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        if (timeout != null) {
            requestOptions.addQueryParam("timeout", String.valueOf(timeout), false);
        }
        if (blobCacheControl != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-blob-cache-control"), blobCacheControl);
        }
        if (blobContentType != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-blob-content-type"), blobContentType);
        }
        if (blobContentMd5 != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-blob-content-md5"), blobContentMd5);
        }
        if (blobContentEncoding != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-blob-content-encoding"), blobContentEncoding);
        }
        if (blobContentLanguage != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-blob-content-language"), blobContentLanguage);
        }
        if (leaseId != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-lease-id"), leaseId);
        }
        if (blobContentDisposition != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-blob-content-disposition"),
                blobContentDisposition);
        }
        if (ifTags != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-if-tags"), ifTags);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MODIFIED_SINCE, String.valueOf(ifModifiedSince));
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_UNMODIFIED_SINCE, String.valueOf(ifUnmodifiedSince));
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        return setHttpHeadersWithResponse(containerName, blob, version, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * The Set HTTP Headers operation sets system properties on the blob.
     * 
     * @param containerName The name of the container.
     * @param blob The name of the blob.
     * @param version Specifies the version of the operation to use for this request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> setHttpHeaders(String containerName, String blob, String version) {
        // Generated convenience method for setHttpHeadersWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return setHttpHeadersWithResponse(containerName, blob, version, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * "Set the immutability policy of a blob".
     * 
     * @param containerName The name of the container.
     * @param blob The name of the blob.
     * @param version Specifies the version of the operation to use for this request.
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;.
     * @param ifUnmodifiedSince A date-time value. A request is made under the condition that the resource has not been
     * modified since the specified date-time.
     * @param immutabilityPolicyExpiry Specifies the date time when the blobs immutability policy is set to expire.
     * @param immutabilityPolicyMode Specifies the immutability policy mode to set on the blob.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> setImmutabilityPolicy(String containerName, String blob, String version, Integer timeout,
        OffsetDateTime ifUnmodifiedSince, String immutabilityPolicyExpiry,
        BlobImmutabilityPolicyMode immutabilityPolicyMode) {
        // Generated convenience method for setImmutabilityPolicyWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (timeout != null) {
            requestOptions.addQueryParam("timeout", String.valueOf(timeout), false);
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_UNMODIFIED_SINCE, String.valueOf(ifUnmodifiedSince));
        }
        if (immutabilityPolicyExpiry != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-immutability-policy-until-date"),
                immutabilityPolicyExpiry);
        }
        if (immutabilityPolicyMode != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-immutability-policy-mode"),
                immutabilityPolicyMode.toString());
        }
        return setImmutabilityPolicyWithResponse(containerName, blob, version, requestOptions)
            .flatMap(FluxUtil::toMono);
    }

    /**
     * "Set the immutability policy of a blob".
     * 
     * @param containerName The name of the container.
     * @param blob The name of the blob.
     * @param version Specifies the version of the operation to use for this request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> setImmutabilityPolicy(String containerName, String blob, String version) {
        // Generated convenience method for setImmutabilityPolicyWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return setImmutabilityPolicyWithResponse(containerName, blob, version, requestOptions)
            .flatMap(FluxUtil::toMono);
    }

    /**
     * The Delete Immutability Policy operation deletes the immutability policy on the blob.
     * 
     * @param containerName The name of the container.
     * @param blob The name of the blob.
     * @param version Specifies the version of the operation to use for this request.
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteImmutabilityPolicy(String containerName, String blob, String version, Integer timeout) {
        // Generated convenience method for deleteImmutabilityPolicyWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (timeout != null) {
            requestOptions.addQueryParam("timeout", String.valueOf(timeout), false);
        }
        return deleteImmutabilityPolicyWithResponse(containerName, blob, version, requestOptions)
            .flatMap(FluxUtil::toMono);
    }

    /**
     * The Delete Immutability Policy operation deletes the immutability policy on the blob.
     * 
     * @param containerName The name of the container.
     * @param blob The name of the blob.
     * @param version Specifies the version of the operation to use for this request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteImmutabilityPolicy(String containerName, String blob, String version) {
        // Generated convenience method for deleteImmutabilityPolicyWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return deleteImmutabilityPolicyWithResponse(containerName, blob, version, requestOptions)
            .flatMap(FluxUtil::toMono);
    }

    /**
     * The Set Legal Hold operation sets a legal hold on the blob.
     * 
     * @param containerName The name of the container.
     * @param blob The name of the blob.
     * @param legalHold Required. Specifies the legal hold status to set on the blob.
     * @param version Specifies the version of the operation to use for this request.
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> setLegalHold(String containerName, String blob, boolean legalHold, String version,
        Integer timeout) {
        // Generated convenience method for setLegalHoldWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (timeout != null) {
            requestOptions.addQueryParam("timeout", String.valueOf(timeout), false);
        }
        return setLegalHoldWithResponse(containerName, blob, legalHold, version, requestOptions)
            .flatMap(FluxUtil::toMono);
    }

    /**
     * The Set Legal Hold operation sets a legal hold on the blob.
     * 
     * @param containerName The name of the container.
     * @param blob The name of the blob.
     * @param legalHold Required. Specifies the legal hold status to set on the blob.
     * @param version Specifies the version of the operation to use for this request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> setLegalHold(String containerName, String blob, boolean legalHold, String version) {
        // Generated convenience method for setLegalHoldWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return setLegalHoldWithResponse(containerName, blob, legalHold, version, requestOptions)
            .flatMap(FluxUtil::toMono);
    }

    /**
     * The Set Metadata operation sets user-defined metadata for the specified blob as one or more name-value pairs.
     * 
     * @param containerName The name of the container.
     * @param blob The name of the blob.
     * @param version Specifies the version of the operation to use for this request.
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;.
     * @param leaseId If specified, the operation only succeeds if the resource's lease is active and matches this ID.
     * @param encryptionKey Optional. Version 2019-07-07 and later. Specifies the encryption key to use to encrypt the
     * data provided in the request. If not specified, the request will be encrypted with the root account key.
     * @param encryptionKeySha256 Optional. Version 2019-07-07 and later. Specifies the SHA256 hash of the encryption
     * key used to encrypt the data provided in the request. This header is only used for encryption with a
     * customer-provided key. If the request is authenticated with a client token, this header should be specified using
     * the SHA256 hash of the encryption key.
     * @param encryptionAlgorithm Optional. Version 2019-07-07 and later. Specifies the algorithm to use for encryption.
     * If not specified, the default is AES256.
     * @param encryptionScope Optional. Version 2019-07-07 and later. Specifies the encryption scope to use to encrypt
     * the data provided in the request. If not specified, the request will be encrypted with the root account key.
     * @param ifTags Specify a SQL where clause on blob tags to operate only on blobs with a matching value.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> setMetadata(String containerName, String blob, String version, Integer timeout, String leaseId,
        String encryptionKey, String encryptionKeySha256, String encryptionAlgorithm, String encryptionScope,
        String ifTags, RequestConditions requestConditions) {
        // Generated convenience method for setMetadataWithResponse
        RequestOptions requestOptions = new RequestOptions();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        if (timeout != null) {
            requestOptions.addQueryParam("timeout", String.valueOf(timeout), false);
        }
        if (leaseId != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-lease-id"), leaseId);
        }
        if (encryptionKey != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-encryption-key"), encryptionKey);
        }
        if (encryptionKeySha256 != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-encryption-key-sha256"), encryptionKeySha256);
        }
        if (encryptionAlgorithm != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-encryption-algorithm"), encryptionAlgorithm);
        }
        if (encryptionScope != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-encryption-scope"), encryptionScope);
        }
        if (ifTags != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-if-tags"), ifTags);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MODIFIED_SINCE, String.valueOf(ifModifiedSince));
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_UNMODIFIED_SINCE, String.valueOf(ifUnmodifiedSince));
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        return setMetadataWithResponse(containerName, blob, version, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * The Set Metadata operation sets user-defined metadata for the specified blob as one or more name-value pairs.
     * 
     * @param containerName The name of the container.
     * @param blob The name of the blob.
     * @param version Specifies the version of the operation to use for this request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> setMetadata(String containerName, String blob, String version) {
        // Generated convenience method for setMetadataWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return setMetadataWithResponse(containerName, blob, version, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete operations.
     * 
     * @param containerName The name of the container.
     * @param blob The name of the blob.
     * @param duration Specifies the duration of the lease, in seconds, or negative one (-1) for a lease that never
     * expires. A non-infinite lease can be between 15 and 60 seconds. A lease duration cannot be changed using renew or
     * change.
     * @param version Specifies the version of the operation to use for this request.
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;.
     * @param proposedLeaseId Optional. The proposed lease ID for the container.
     * @param ifTags Specify a SQL where clause on blob tags to operate only on blobs with a matching value.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> acquireLease(String containerName, String blob, int duration, String version, Integer timeout,
        String proposedLeaseId, String ifTags, RequestConditions requestConditions) {
        // Generated convenience method for acquireLeaseWithResponse
        RequestOptions requestOptions = new RequestOptions();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        if (timeout != null) {
            requestOptions.addQueryParam("timeout", String.valueOf(timeout), false);
        }
        if (proposedLeaseId != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-proposed-lease-id"), proposedLeaseId);
        }
        if (ifTags != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-if-tags"), ifTags);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MODIFIED_SINCE, String.valueOf(ifModifiedSince));
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_UNMODIFIED_SINCE, String.valueOf(ifUnmodifiedSince));
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        return acquireLeaseWithResponse(containerName, blob, duration, version, requestOptions)
            .flatMap(FluxUtil::toMono);
    }

    /**
     * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete operations.
     * 
     * @param containerName The name of the container.
     * @param blob The name of the blob.
     * @param duration Specifies the duration of the lease, in seconds, or negative one (-1) for a lease that never
     * expires. A non-infinite lease can be between 15 and 60 seconds. A lease duration cannot be changed using renew or
     * change.
     * @param version Specifies the version of the operation to use for this request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> acquireLease(String containerName, String blob, int duration, String version) {
        // Generated convenience method for acquireLeaseWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return acquireLeaseWithResponse(containerName, blob, duration, version, requestOptions)
            .flatMap(FluxUtil::toMono);
    }

    /**
     * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete operations.
     * 
     * @param containerName The name of the container.
     * @param blob The name of the blob.
     * @param leaseId Required. A lease ID for the source path. If specified, the source path must have an active lease
     * and the lease ID must match.
     * @param version Specifies the version of the operation to use for this request.
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;.
     * @param ifTags Specify a SQL where clause on blob tags to operate only on blobs with a matching value.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> releaseLease(String containerName, String blob, String leaseId, String version, Integer timeout,
        String ifTags, RequestConditions requestConditions) {
        // Generated convenience method for releaseLeaseWithResponse
        RequestOptions requestOptions = new RequestOptions();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        if (timeout != null) {
            requestOptions.addQueryParam("timeout", String.valueOf(timeout), false);
        }
        if (ifTags != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-if-tags"), ifTags);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MODIFIED_SINCE, String.valueOf(ifModifiedSince));
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_UNMODIFIED_SINCE, String.valueOf(ifUnmodifiedSince));
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        return releaseLeaseWithResponse(containerName, blob, leaseId, version, requestOptions)
            .flatMap(FluxUtil::toMono);
    }

    /**
     * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete operations.
     * 
     * @param containerName The name of the container.
     * @param blob The name of the blob.
     * @param leaseId Required. A lease ID for the source path. If specified, the source path must have an active lease
     * and the lease ID must match.
     * @param version Specifies the version of the operation to use for this request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> releaseLease(String containerName, String blob, String leaseId, String version) {
        // Generated convenience method for releaseLeaseWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return releaseLeaseWithResponse(containerName, blob, leaseId, version, requestOptions)
            .flatMap(FluxUtil::toMono);
    }

    /**
     * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete operations.
     * 
     * @param containerName The name of the container.
     * @param blob The name of the blob.
     * @param leaseId Required. A lease ID for the source path. If specified, the source path must have an active lease
     * and the lease ID must match.
     * @param version Specifies the version of the operation to use for this request.
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;.
     * @param ifTags Specify a SQL where clause on blob tags to operate only on blobs with a matching value.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> renewLease(String containerName, String blob, String leaseId, String version, Integer timeout,
        String ifTags, RequestConditions requestConditions) {
        // Generated convenience method for renewLeaseWithResponse
        RequestOptions requestOptions = new RequestOptions();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        if (timeout != null) {
            requestOptions.addQueryParam("timeout", String.valueOf(timeout), false);
        }
        if (ifTags != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-if-tags"), ifTags);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MODIFIED_SINCE, String.valueOf(ifModifiedSince));
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_UNMODIFIED_SINCE, String.valueOf(ifUnmodifiedSince));
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        return renewLeaseWithResponse(containerName, blob, leaseId, version, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete operations.
     * 
     * @param containerName The name of the container.
     * @param blob The name of the blob.
     * @param leaseId Required. A lease ID for the source path. If specified, the source path must have an active lease
     * and the lease ID must match.
     * @param version Specifies the version of the operation to use for this request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> renewLease(String containerName, String blob, String leaseId, String version) {
        // Generated convenience method for renewLeaseWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return renewLeaseWithResponse(containerName, blob, leaseId, version, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete operations.
     * 
     * @param containerName The name of the container.
     * @param blob The name of the blob.
     * @param leaseId Required. A lease ID for the source path. If specified, the source path must have an active lease
     * and the lease ID must match.
     * @param version Specifies the version of the operation to use for this request.
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;.
     * @param proposedLeaseId Optional. The proposed lease ID for the container.
     * @param ifTags Specify a SQL where clause on blob tags to operate only on blobs with a matching value.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> changeLease(String containerName, String blob, String leaseId, String version, Integer timeout,
        String proposedLeaseId, String ifTags, RequestConditions requestConditions) {
        // Generated convenience method for changeLeaseWithResponse
        RequestOptions requestOptions = new RequestOptions();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        if (timeout != null) {
            requestOptions.addQueryParam("timeout", String.valueOf(timeout), false);
        }
        if (proposedLeaseId != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-proposed-lease-id"), proposedLeaseId);
        }
        if (ifTags != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-if-tags"), ifTags);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MODIFIED_SINCE, String.valueOf(ifModifiedSince));
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_UNMODIFIED_SINCE, String.valueOf(ifUnmodifiedSince));
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        return changeLeaseWithResponse(containerName, blob, leaseId, version, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete operations.
     * 
     * @param containerName The name of the container.
     * @param blob The name of the blob.
     * @param leaseId Required. A lease ID for the source path. If specified, the source path must have an active lease
     * and the lease ID must match.
     * @param version Specifies the version of the operation to use for this request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> changeLease(String containerName, String blob, String leaseId, String version) {
        // Generated convenience method for changeLeaseWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return changeLeaseWithResponse(containerName, blob, leaseId, version, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete operations.
     * 
     * @param containerName The name of the container.
     * @param blob The name of the blob.
     * @param version Specifies the version of the operation to use for this request.
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;.
     * @param breakPeriod For a break operation, proposed duration the lease should continue before it is broken, in
     * seconds, between 0 and 60. This break period is only used if it is shorter than the time remaining on the lease.
     * If longer, the time remaining on the lease is used. A new lease will not be available before the break period has
     * expired, but the lease may be held for longer than the break period. If this header does not appear with a break
     * operation, a fixed-duration lease breaks after the remaining lease period elapses, and an infinite lease breaks
     * immediately.
     * @param ifTags Specify a SQL where clause on blob tags to operate only on blobs with a matching value.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> breakLease(String containerName, String blob, String version, Integer timeout,
        Integer breakPeriod, String ifTags, RequestConditions requestConditions) {
        // Generated convenience method for breakLeaseWithResponse
        RequestOptions requestOptions = new RequestOptions();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        if (timeout != null) {
            requestOptions.addQueryParam("timeout", String.valueOf(timeout), false);
        }
        if (breakPeriod != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-lease-break-period"), String.valueOf(breakPeriod));
        }
        if (ifTags != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-if-tags"), ifTags);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MODIFIED_SINCE, String.valueOf(ifModifiedSince));
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_UNMODIFIED_SINCE, String.valueOf(ifUnmodifiedSince));
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        return breakLeaseWithResponse(containerName, blob, version, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete operations.
     * 
     * @param containerName The name of the container.
     * @param blob The name of the blob.
     * @param version Specifies the version of the operation to use for this request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> breakLease(String containerName, String blob, String version) {
        // Generated convenience method for breakLeaseWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return breakLeaseWithResponse(containerName, blob, version, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * The Create Snapshot operation creates a read-only snapshot of a blob.
     * 
     * @param containerName The name of the container.
     * @param blob The name of the blob.
     * @param version Specifies the version of the operation to use for this request.
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;.
     * @param leaseId If specified, the operation only succeeds if the resource's lease is active and matches this ID.
     * @param encryptionKey Optional. Version 2019-07-07 and later. Specifies the encryption key to use to encrypt the
     * data provided in the request. If not specified, the request will be encrypted with the root account key.
     * @param encryptionKeySha256 Optional. Version 2019-07-07 and later. Specifies the SHA256 hash of the encryption
     * key used to encrypt the data provided in the request. This header is only used for encryption with a
     * customer-provided key. If the request is authenticated with a client token, this header should be specified using
     * the SHA256 hash of the encryption key.
     * @param encryptionAlgorithm Optional. Version 2019-07-07 and later. Specifies the algorithm to use for encryption.
     * If not specified, the default is AES256.
     * @param encryptionScope Optional. Version 2019-07-07 and later. Specifies the encryption scope to use to encrypt
     * the data provided in the request. If not specified, the request will be encrypted with the root account key.
     * @param ifTags Specify a SQL where clause on blob tags to operate only on blobs with a matching value.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> createSnapshot(String containerName, String blob, String version, Integer timeout, String leaseId,
        String encryptionKey, String encryptionKeySha256, String encryptionAlgorithm, String encryptionScope,
        String ifTags, RequestConditions requestConditions) {
        // Generated convenience method for createSnapshotWithResponse
        RequestOptions requestOptions = new RequestOptions();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        if (timeout != null) {
            requestOptions.addQueryParam("timeout", String.valueOf(timeout), false);
        }
        if (leaseId != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-lease-id"), leaseId);
        }
        if (encryptionKey != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-encryption-key"), encryptionKey);
        }
        if (encryptionKeySha256 != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-encryption-key-sha256"), encryptionKeySha256);
        }
        if (encryptionAlgorithm != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-encryption-algorithm"), encryptionAlgorithm);
        }
        if (encryptionScope != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-encryption-scope"), encryptionScope);
        }
        if (ifTags != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-if-tags"), ifTags);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MODIFIED_SINCE, String.valueOf(ifModifiedSince));
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_UNMODIFIED_SINCE, String.valueOf(ifUnmodifiedSince));
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        return createSnapshotWithResponse(containerName, blob, version, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * The Create Snapshot operation creates a read-only snapshot of a blob.
     * 
     * @param containerName The name of the container.
     * @param blob The name of the blob.
     * @param version Specifies the version of the operation to use for this request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> createSnapshot(String containerName, String blob, String version) {
        // Generated convenience method for createSnapshotWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createSnapshotWithResponse(containerName, blob, version, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * The Start Copy From URL operation copies a blob or an internet resource to a new blob.
     * 
     * @param containerName The name of the container.
     * @param blob The name of the blob.
     * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up to 2 KB in
     * length that specifies a page blob snapshot. The value should be URL-encoded as it would appear in a request URI.
     * The source blob must either be public or must be authenticated via a shared access signature.
     * @param version Specifies the version of the operation to use for this request.
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;.
     * @param tier Optional. The tier to be set on the blob.
     * @param rehydratePriority Optional: Indicates the priority with which to rehydrate an archived blob.
     * @param sourceIfModifiedSince Specify this header value to operate only on a blob if it has been modified since
     * the specified date/time.
     * @param sourceIfUnmodifiedSince Specify this header value to operate only on a blob if it has not been modified
     * since the specified date/time.
     * @param sourceIfMatch Specify an ETag value to operate only on blobs with a matching value.
     * @param sourceIfNoneMatch Specify this header value to operate only on a blob if it has been modified since the
     * specified date/time.
     * @param sourceIfTags Specify a SQL where clause on blob tags to operate only on blobs with a matching value.
     * @param ifTags Specify a SQL where clause on blob tags to operate only on blobs with a matching value.
     * @param leaseId If specified, the operation only succeeds if the resource's lease is active and matches this ID.
     * @param blobTagsString Optional. Used to set blob tags in various blob operations.
     * @param sealBlob Overrides the sealed state of the destination blob. Service version 2019-12-12 and newer.
     * @param immutabilityPolicyExpiry Specifies the date time when the blobs immutability policy is set to expire.
     * @param immutabilityPolicyMode Specifies the immutability policy mode to set on the blob.
     * @param legalHold Specified if a legal hold should be set on the blob.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> startCopyFromUrl(String containerName, String blob, String copySource, String version,
        Integer timeout, AccessTier tier, RehydratePriority rehydratePriority, OffsetDateTime sourceIfModifiedSince,
        OffsetDateTime sourceIfUnmodifiedSince, String sourceIfMatch, String sourceIfNoneMatch, String sourceIfTags,
        String ifTags, String leaseId, String blobTagsString, Boolean sealBlob, String immutabilityPolicyExpiry,
        BlobImmutabilityPolicyMode immutabilityPolicyMode, Boolean legalHold, RequestConditions requestConditions) {
        // Generated convenience method for startCopyFromUrlWithResponse
        RequestOptions requestOptions = new RequestOptions();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        if (timeout != null) {
            requestOptions.addQueryParam("timeout", String.valueOf(timeout), false);
        }
        if (tier != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-access-tier"), tier.toString());
        }
        if (rehydratePriority != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-rehydrate-priority"),
                rehydratePriority.toString());
        }
        if (sourceIfModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-source-if-modified-since"),
                String.valueOf(sourceIfModifiedSince));
        }
        if (sourceIfUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-source-if-unmodified-since"),
                String.valueOf(sourceIfUnmodifiedSince));
        }
        if (sourceIfMatch != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-source-if-match"), sourceIfMatch);
        }
        if (sourceIfNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-source-if-none-match"), sourceIfNoneMatch);
        }
        if (sourceIfTags != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-source-if-tags"), sourceIfTags);
        }
        if (ifTags != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-if-tags"), ifTags);
        }
        if (leaseId != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-lease-id"), leaseId);
        }
        if (blobTagsString != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-tags"), blobTagsString);
        }
        if (sealBlob != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-seal-blob"), String.valueOf(sealBlob));
        }
        if (immutabilityPolicyExpiry != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-immutability-policy-until-date"),
                immutabilityPolicyExpiry);
        }
        if (immutabilityPolicyMode != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-immutability-policy-mode"),
                immutabilityPolicyMode.toString());
        }
        if (legalHold != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-legal-hold"), String.valueOf(legalHold));
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MODIFIED_SINCE, String.valueOf(ifModifiedSince));
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_UNMODIFIED_SINCE, String.valueOf(ifUnmodifiedSince));
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        return startCopyFromUrlWithResponse(containerName, blob, copySource, version, requestOptions)
            .flatMap(FluxUtil::toMono);
    }

    /**
     * The Start Copy From URL operation copies a blob or an internet resource to a new blob.
     * 
     * @param containerName The name of the container.
     * @param blob The name of the blob.
     * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up to 2 KB in
     * length that specifies a page blob snapshot. The value should be URL-encoded as it would appear in a request URI.
     * The source blob must either be public or must be authenticated via a shared access signature.
     * @param version Specifies the version of the operation to use for this request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> startCopyFromUrl(String containerName, String blob, String copySource, String version) {
        // Generated convenience method for startCopyFromUrlWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return startCopyFromUrlWithResponse(containerName, blob, copySource, version, requestOptions)
            .flatMap(FluxUtil::toMono);
    }

    /**
     * The Copy From URL operation copies a blob or an internet resource to a new blob. It will not return a response
     * until the copy is complete.
     * 
     * @param containerName The name of the container.
     * @param blob The name of the blob.
     * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up to 2 KB in
     * length that specifies a page blob snapshot. The value should be URL-encoded as it would appear in a request URI.
     * The source blob must either be public or must be authenticated via a shared access signature.
     * @param version Specifies the version of the operation to use for this request.
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;.
     * @param tier Optional. The tier to be set on the blob.
     * @param sourceIfModifiedSince Specify this header value to operate only on a blob if it has been modified since
     * the specified date/time.
     * @param sourceIfUnmodifiedSince Specify this header value to operate only on a blob if it has not been modified
     * since the specified date/time.
     * @param sourceIfMatch Specify an ETag value to operate only on blobs with a matching value.
     * @param sourceIfNoneMatch Specify this header value to operate only on a blob if it has been modified since the
     * specified date/time.
     * @param ifTags Specify a SQL where clause on blob tags to operate only on blobs with a matching value.
     * @param leaseId If specified, the operation only succeeds if the resource's lease is active and matches this ID.
     * @param sourceContentMd5 Specify the md5 calculated for the range of bytes that must be read from the copy source.
     * @param blobTagsString Optional. Used to set blob tags in various blob operations.
     * @param immutabilityPolicyExpiry Specifies the date time when the blobs immutability policy is set to expire.
     * @param immutabilityPolicyMode Specifies the immutability policy mode to set on the blob.
     * @param legalHold Specified if a legal hold should be set on the blob.
     * @param copySourceAuthorization Only Bearer type is supported. Credentials should be a valid OAuth access token to
     * copy source.
     * @param encryptionScope Optional. Version 2019-07-07 and later. Specifies the encryption scope to use to encrypt
     * the data provided in the request. If not specified, the request will be encrypted with the root account key.
     * @param copySourceTags Optional, default 'replace'. Indicates if source tags should be copied or replaced with the
     * tags specified by x-ms-tags.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> copyFromUrl(String containerName, String blob, String copySource, String version, Integer timeout,
        AccessTier tier, OffsetDateTime sourceIfModifiedSince, OffsetDateTime sourceIfUnmodifiedSince,
        String sourceIfMatch, String sourceIfNoneMatch, String ifTags, String leaseId, String sourceContentMd5,
        String blobTagsString, String immutabilityPolicyExpiry, BlobImmutabilityPolicyMode immutabilityPolicyMode,
        Boolean legalHold, String copySourceAuthorization, String encryptionScope, String copySourceTags,
        RequestConditions requestConditions) {
        // Generated convenience method for copyFromUrlWithResponse
        RequestOptions requestOptions = new RequestOptions();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        if (timeout != null) {
            requestOptions.addQueryParam("timeout", String.valueOf(timeout), false);
        }
        if (tier != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-access-tier"), tier.toString());
        }
        if (sourceIfModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-source-if-modified-since"),
                String.valueOf(sourceIfModifiedSince));
        }
        if (sourceIfUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-source-if-unmodified-since"),
                String.valueOf(sourceIfUnmodifiedSince));
        }
        if (sourceIfMatch != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-source-if-match"), sourceIfMatch);
        }
        if (sourceIfNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-source-if-none-match"), sourceIfNoneMatch);
        }
        if (ifTags != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-if-tags"), ifTags);
        }
        if (leaseId != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-lease-id"), leaseId);
        }
        if (sourceContentMd5 != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-source-content-md5"), sourceContentMd5);
        }
        if (blobTagsString != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-tags"), blobTagsString);
        }
        if (immutabilityPolicyExpiry != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-immutability-policy-until-date"),
                immutabilityPolicyExpiry);
        }
        if (immutabilityPolicyMode != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-immutability-policy-mode"),
                immutabilityPolicyMode.toString());
        }
        if (legalHold != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-legal-hold"), String.valueOf(legalHold));
        }
        if (copySourceAuthorization != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-copy-source-authorization"),
                copySourceAuthorization);
        }
        if (encryptionScope != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-encryption-scope"), encryptionScope);
        }
        if (copySourceTags != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-copy-source-tags"), copySourceTags);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MODIFIED_SINCE, String.valueOf(ifModifiedSince));
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_UNMODIFIED_SINCE, String.valueOf(ifUnmodifiedSince));
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        return copyFromUrlWithResponse(containerName, blob, copySource, version, requestOptions)
            .flatMap(FluxUtil::toMono);
    }

    /**
     * The Copy From URL operation copies a blob or an internet resource to a new blob. It will not return a response
     * until the copy is complete.
     * 
     * @param containerName The name of the container.
     * @param blob The name of the blob.
     * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up to 2 KB in
     * length that specifies a page blob snapshot. The value should be URL-encoded as it would appear in a request URI.
     * The source blob must either be public or must be authenticated via a shared access signature.
     * @param version Specifies the version of the operation to use for this request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> copyFromUrl(String containerName, String blob, String copySource, String version) {
        // Generated convenience method for copyFromUrlWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return copyFromUrlWithResponse(containerName, blob, copySource, version, requestOptions)
            .flatMap(FluxUtil::toMono);
    }

    /**
     * The Abort Copy From URL operation aborts a pending Copy From URL operation, and leaves a destination blob with
     * zero length and full metadata.
     * 
     * @param containerName The name of the container.
     * @param blob The name of the blob.
     * @param copyId The copy identifier provided in the x-ms-copy-id header of the original Copy Blob operation.
     * @param version Specifies the version of the operation to use for this request.
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;.
     * @param leaseId If specified, the operation only succeeds if the resource's lease is active and matches this ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> abortCopyFromUrl(String containerName, String blob, String copyId, String version,
        Integer timeout, String leaseId) {
        // Generated convenience method for abortCopyFromUrlWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (timeout != null) {
            requestOptions.addQueryParam("timeout", String.valueOf(timeout), false);
        }
        if (leaseId != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-lease-id"), leaseId);
        }
        return abortCopyFromUrlWithResponse(containerName, blob, copyId, version, requestOptions)
            .flatMap(FluxUtil::toMono);
    }

    /**
     * The Abort Copy From URL operation aborts a pending Copy From URL operation, and leaves a destination blob with
     * zero length and full metadata.
     * 
     * @param containerName The name of the container.
     * @param blob The name of the blob.
     * @param copyId The copy identifier provided in the x-ms-copy-id header of the original Copy Blob operation.
     * @param version Specifies the version of the operation to use for this request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> abortCopyFromUrl(String containerName, String blob, String copyId, String version) {
        // Generated convenience method for abortCopyFromUrlWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return abortCopyFromUrlWithResponse(containerName, blob, copyId, version, requestOptions)
            .flatMap(FluxUtil::toMono);
    }

    /**
     * The Set Tier operation sets the tier on a block blob. The operation is allowed on a page blob or block blob, but
     * not on an append blob. A block blob's tier determines Hot/Cool/Archive storage type. This operation does not
     * update the blob's ETag.
     * 
     * @param containerName The name of the container.
     * @param blob The name of the blob.
     * @param accessTier Indicates the tier to be set on the blob.
     * @param version Specifies the version of the operation to use for this request.
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;.
     * @param rehydratePriority Optional: Indicates the priority with which to rehydrate an archived blob.
     * @param leaseId If specified, the operation only succeeds if the resource's lease is active and matches this ID.
     * @param ifTags Specify a SQL where clause on blob tags to operate only on blobs with a matching value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> setTier(String containerName, String blob, AccessTier accessTier, String version, Integer timeout,
        RehydratePriority rehydratePriority, String leaseId, String ifTags) {
        // Generated convenience method for setTierWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (timeout != null) {
            requestOptions.addQueryParam("timeout", String.valueOf(timeout), false);
        }
        if (rehydratePriority != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-rehydrate-priority"),
                rehydratePriority.toString());
        }
        if (leaseId != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-lease-id"), leaseId);
        }
        if (ifTags != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-if-tags"), ifTags);
        }
        return setTierWithResponse(containerName, blob, accessTier.toString(), version, requestOptions)
            .flatMap(FluxUtil::toMono);
    }

    /**
     * The Set Tier operation sets the tier on a block blob. The operation is allowed on a page blob or block blob, but
     * not on an append blob. A block blob's tier determines Hot/Cool/Archive storage type. This operation does not
     * update the blob's ETag.
     * 
     * @param containerName The name of the container.
     * @param blob The name of the blob.
     * @param accessTier Indicates the tier to be set on the blob.
     * @param version Specifies the version of the operation to use for this request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> setTier(String containerName, String blob, AccessTier accessTier, String version) {
        // Generated convenience method for setTierWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return setTierWithResponse(containerName, blob, accessTier.toString(), version, requestOptions)
            .flatMap(FluxUtil::toMono);
    }

    /**
     * Returns the sku name and account kind.
     * 
     * @param containerName The name of the container.
     * @param blob The name of the blob.
     * @param version Specifies the version of the operation to use for this request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> getAccountInfo(String containerName, String blob, String version) {
        // Generated convenience method for getAccountInfoWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getAccountInfoWithResponse(containerName, blob, version, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * The Query operation enables users to select/project on blob data by providing simple query expressions.
     * 
     * @param containerName The name of the container.
     * @param blob The name of the blob.
     * @param version Specifies the version of the operation to use for this request.
     * @param queryRequest The query request.
     * @param snapshot The snapshot parameter is an opaque DateTime value that, when present, specifies the blob
     * snapshot to retrieve. For more information on working with blob snapshots, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob"&gt;Creating
     * a Snapshot of a Blob.&lt;/a&gt;.
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;.
     * @param leaseId If specified, the operation only succeeds if the resource's lease is active and matches this ID.
     * @param encryptionKey Optional. Version 2019-07-07 and later. Specifies the encryption key to use to encrypt the
     * data provided in the request. If not specified, the request will be encrypted with the root account key.
     * @param encryptionKeySha256 Optional. Version 2019-07-07 and later. Specifies the SHA256 hash of the encryption
     * key used to encrypt the data provided in the request. This header is only used for encryption with a
     * customer-provided key. If the request is authenticated with a client token, this header should be specified using
     * the SHA256 hash of the encryption key.
     * @param encryptionAlgorithm Optional. Version 2019-07-07 and later. Specifies the algorithm to use for encryption.
     * If not specified, the default is AES256.
     * @param ifTags Specify a SQL where clause on blob tags to operate only on blobs with a matching value.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represent a byte array on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<byte[]> query(String containerName, String blob, String version, QueryRequest queryRequest,
        String snapshot, Integer timeout, String leaseId, String encryptionKey, String encryptionKeySha256,
        String encryptionAlgorithm, String ifTags, RequestConditions requestConditions) {
        // Generated convenience method for queryWithResponse
        RequestOptions requestOptions = new RequestOptions();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        if (snapshot != null) {
            requestOptions.addQueryParam("snapshot", snapshot, false);
        }
        if (timeout != null) {
            requestOptions.addQueryParam("timeout", String.valueOf(timeout), false);
        }
        if (leaseId != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-lease-id"), leaseId);
        }
        if (encryptionKey != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-encryption-key"), encryptionKey);
        }
        if (encryptionKeySha256 != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-encryption-key-sha256"), encryptionKeySha256);
        }
        if (encryptionAlgorithm != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-encryption-algorithm"), encryptionAlgorithm);
        }
        if (ifTags != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-if-tags"), ifTags);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MODIFIED_SINCE, String.valueOf(ifModifiedSince));
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_UNMODIFIED_SINCE, String.valueOf(ifUnmodifiedSince));
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        return queryWithResponse(containerName, blob, version, BinaryData.fromObject(queryRequest), requestOptions)
            .flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(byte[].class));
    }

    /**
     * The Query operation enables users to select/project on blob data by providing simple query expressions.
     * 
     * @param containerName The name of the container.
     * @param blob The name of the blob.
     * @param version Specifies the version of the operation to use for this request.
     * @param queryRequest The query request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represent a byte array on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<byte[]> query(String containerName, String blob, String version, QueryRequest queryRequest) {
        // Generated convenience method for queryWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return queryWithResponse(containerName, blob, version, BinaryData.fromObject(queryRequest), requestOptions)
            .flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(byte[].class));
    }

    /**
     * The Get Blob Tags operation enables users to get tags on a blob.
     * 
     * @param containerName The name of the container.
     * @param blob The name of the blob.
     * @param versionId The version id parameter is an opaque DateTime value that, when present, specifies the version
     * of the blob to operate on. It's for service version 2019-10-10 and newer.
     * @param version Specifies the version of the operation to use for this request.
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;.
     * @param snapshot The snapshot parameter is an opaque DateTime value that, when present, specifies the blob
     * snapshot to retrieve. For more information on working with blob snapshots, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob"&gt;Creating
     * a Snapshot of a Blob.&lt;/a&gt;.
     * @param leaseId If specified, the operation only succeeds if the resource's lease is active and matches this ID.
     * @param ifTags Specify a SQL where clause on blob tags to operate only on blobs with a matching value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents blob tags on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BlobTags> getTags(String containerName, String blob, String versionId, String version, Integer timeout,
        String snapshot, String leaseId, String ifTags) {
        // Generated convenience method for getTagsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (timeout != null) {
            requestOptions.addQueryParam("timeout", String.valueOf(timeout), false);
        }
        if (snapshot != null) {
            requestOptions.addQueryParam("snapshot", snapshot, false);
        }
        if (leaseId != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-lease-id"), leaseId);
        }
        if (ifTags != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-if-tags"), ifTags);
        }
        return getTagsWithResponse(containerName, blob, versionId, version, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(BlobTags.class));
    }

    /**
     * The Get Blob Tags operation enables users to get tags on a blob.
     * 
     * @param containerName The name of the container.
     * @param blob The name of the blob.
     * @param versionId The version id parameter is an opaque DateTime value that, when present, specifies the version
     * of the blob to operate on. It's for service version 2019-10-10 and newer.
     * @param version Specifies the version of the operation to use for this request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents blob tags on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BlobTags> getTags(String containerName, String blob, String versionId, String version) {
        // Generated convenience method for getTagsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getTagsWithResponse(containerName, blob, versionId, version, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(BlobTags.class));
    }

    /**
     * The Set Tags operation enables users to set tags on a blob.
     * 
     * @param containerName The name of the container.
     * @param blob The name of the blob.
     * @param versionId The version id parameter is an opaque DateTime value that, when present, specifies the version
     * of the blob to operate on. It's for service version 2019-10-10 and newer.
     * @param version Specifies the version of the operation to use for this request.
     * @param tags The blob tags.
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;.
     * @param leaseId If specified, the operation only succeeds if the resource's lease is active and matches this ID.
     * @param transactionalContentMD5 Optional. An MD5 hash of the blob content. Note that this hash is not validated,
     * as the hashes for the individual blocks were validated when each was uploaded.
     * @param transactionalContentCrc64 Specify the transactional crc64 for the body, to be validated by the service.
     * @param ifTags Specify a SQL where clause on blob tags to operate only on blobs with a matching value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> setTags(String containerName, String blob, String versionId, String version, BlobTags tags,
        Integer timeout, String leaseId, String transactionalContentMD5, String transactionalContentCrc64,
        String ifTags) {
        // Generated convenience method for setTagsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (timeout != null) {
            requestOptions.addQueryParam("timeout", String.valueOf(timeout), false);
        }
        if (leaseId != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-lease-id"), leaseId);
        }
        if (transactionalContentMD5 != null) {
            requestOptions.setHeader(HttpHeaderName.CONTENT_MD5, transactionalContentMD5);
        }
        if (transactionalContentCrc64 != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-content-crc64"), transactionalContentCrc64);
        }
        if (ifTags != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-if-tags"), ifTags);
        }
        return setTagsWithResponse(containerName, blob, versionId, version, BinaryData.fromObject(tags), requestOptions)
            .flatMap(FluxUtil::toMono);
    }

    /**
     * The Set Tags operation enables users to set tags on a blob.
     * 
     * @param containerName The name of the container.
     * @param blob The name of the blob.
     * @param versionId The version id parameter is an opaque DateTime value that, when present, specifies the version
     * of the blob to operate on. It's for service version 2019-10-10 and newer.
     * @param version Specifies the version of the operation to use for this request.
     * @param tags The blob tags.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> setTags(String containerName, String blob, String versionId, String version, BlobTags tags) {
        // Generated convenience method for setTagsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return setTagsWithResponse(containerName, blob, versionId, version, BinaryData.fromObject(tags), requestOptions)
            .flatMap(FluxUtil::toMono);
    }
}
