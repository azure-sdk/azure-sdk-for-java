// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.storage.blob.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Represents an Apache Arrow field.
 */
@Fluent
public final class ArrowField implements JsonSerializable<ArrowField> {
    /*
     * The arrow field type.
     */
    @Generated
    private final String type;

    /*
     * The arrow field name.
     */
    @Generated
    private String name;

    /*
     * The arrow field precision.
     */
    @Generated
    private Integer precision;

    /*
     * The arrow field scale.
     */
    @Generated
    private Integer scale;

    /**
     * Creates an instance of ArrowField class.
     * 
     * @param type the type value to set.
     */
    @Generated
    public ArrowField(String type) {
        this.type = type;
    }

    /**
     * Get the type property: The arrow field type.
     * 
     * @return the type value.
     */
    @Generated
    public String getType() {
        return this.type;
    }

    /**
     * Get the name property: The arrow field name.
     * 
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Set the name property: The arrow field name.
     * 
     * @param name the name value to set.
     * @return the ArrowField object itself.
     */
    @Generated
    public ArrowField setName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the precision property: The arrow field precision.
     * 
     * @return the precision value.
     */
    @Generated
    public Integer getPrecision() {
        return this.precision;
    }

    /**
     * Set the precision property: The arrow field precision.
     * 
     * @param precision the precision value to set.
     * @return the ArrowField object itself.
     */
    @Generated
    public ArrowField setPrecision(Integer precision) {
        this.precision = precision;
        return this;
    }

    /**
     * Get the scale property: The arrow field scale.
     * 
     * @return the scale value.
     */
    @Generated
    public Integer getScale() {
        return this.scale;
    }

    /**
     * Set the scale property: The arrow field scale.
     * 
     * @param scale the scale value to set.
     * @return the ArrowField object itself.
     */
    @Generated
    public ArrowField setScale(Integer scale) {
        this.scale = scale;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeNumberField("precision", this.precision);
        jsonWriter.writeNumberField("scale", this.scale);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ArrowField from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ArrowField if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ArrowField.
     */
    @Generated
    public static ArrowField fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String type = null;
            String name = null;
            Integer precision = null;
            Integer scale = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    type = reader.getString();
                } else if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else if ("precision".equals(fieldName)) {
                    precision = reader.getNullable(JsonReader::getInt);
                } else if ("scale".equals(fieldName)) {
                    scale = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }
            ArrowField deserializedArrowField = new ArrowField(type);
            deserializedArrowField.name = name;
            deserializedArrowField.precision = precision;
            deserializedArrowField.scale = scale;

            return deserializedArrowField;
        });
    }
}
