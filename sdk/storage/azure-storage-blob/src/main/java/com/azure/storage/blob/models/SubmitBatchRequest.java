// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.storage.blob.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The SubmitBatchRequest model.
 */
@Immutable
public final class SubmitBatchRequest implements JsonSerializable<SubmitBatchRequest> {
    /*
     * The name property.
     */
    @Generated
    private final String name;

    /*
     * The body property.
     */
    @Generated
    private final BodyFileDetails body;

    /**
     * Creates an instance of SubmitBatchRequest class.
     * 
     * @param name the name value to set.
     * @param body the body value to set.
     */
    @Generated
    public SubmitBatchRequest(String name, BodyFileDetails body) {
        this.name = name;
        this.body = body;
    }

    /**
     * Get the name property: The name property.
     * 
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Get the body property: The body property.
     * 
     * @return the body value.
     */
    @Generated
    public BodyFileDetails getBody() {
        return this.body;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeJsonField("body", this.body);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SubmitBatchRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SubmitBatchRequest if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SubmitBatchRequest.
     */
    @Generated
    public static SubmitBatchRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String name = null;
            BodyFileDetails body = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else if ("body".equals(fieldName)) {
                    body = BodyFileDetails.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            return new SubmitBatchRequest(name, body);
        });
    }
}
