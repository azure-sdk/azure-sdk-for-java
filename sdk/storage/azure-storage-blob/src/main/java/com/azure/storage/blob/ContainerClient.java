// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.storage.blob;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.HttpHeaderName;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.DateTimeRfc1123;
import com.azure.core.util.serializer.TypeReference;
import com.azure.storage.blob.implementation.ContainersImpl;
import com.azure.storage.blob.models.FilterBlobSegment;
import com.azure.storage.blob.models.FilterBlobsIncludeItem;
import com.azure.storage.blob.models.ListBlobsFlatSegmentResponse;
import com.azure.storage.blob.models.ListBlobsHierarchySegmentResponse;
import com.azure.storage.blob.models.ListBlobsIncludeItem;
import com.azure.storage.blob.models.PublicAccessType;
import com.azure.storage.blob.models.SignedIdentifier;
import com.azure.storage.blob.models.SubmitBatchRequest;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.stream.Collectors;

/**
 * Initializes a new instance of the synchronous BlobClient type.
 */
@ServiceClient(builder = BlobClientBuilder.class)
public final class ContainerClient {
    @Generated
    private final ContainersImpl serviceClient;

    /**
     * Initializes an instance of ContainerClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    ContainerClient(ContainersImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Creates a new container under the specified account. If the container with the same name already exists, the
     * operation fails.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-meta</td><td>Map&lt;String, String&gt;</td><td>No</td><td>The metadata headers.</td></tr>
     * <tr><td>x-ms-blob-public-access</td><td>String</td><td>No</td><td>The public access setting for the container.
     * Allowed values: "blob", "container".</td></tr>
     * <tr><td>x-ms-default-encryption-scope</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later.
     * Specifies the default encryption scope to set on the container and use for all future writes.</td></tr>
     * <tr><td>x-ms-deny-encryption-scope-override</td><td>Boolean</td><td>No</td><td>If a blob has a lease and the
     * lease is of infinite duration then the value of this header is set to true, otherwise it is set to
     * false.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> createWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.createWithResponse(requestOptions);
    }

    /**
     * returns all user-defined metadata and system properties for the specified container. The data returned does not
     * include the container's list of blobs.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-lease-id</td><td>String</td><td>No</td><td>If specified, the operation only succeeds if the
     * resource's lease is active and matches this ID.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> getPropertiesWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.getPropertiesWithResponse(requestOptions);
    }

    /**
     * operation marks the specified container for deletion. The container and any blobs contained within it are later
     * deleted during garbage collection.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-lease-id</td><td>String</td><td>No</td><td>If specified, the operation only succeeds if the
     * resource's lease is active and matches this ID.</td></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>A date-time value. A request is made under
     * the condition that the resource has been modified since the specified date-time.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>A date-time value. A request is made under
     * the condition that the resource has not been modified since the specified date-time.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.deleteWithResponse(requestOptions);
    }

    /**
     * operation sets one or more user-defined name-value pairs for the specified container.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-lease-id</td><td>String</td><td>No</td><td>If specified, the operation only succeeds if the
     * resource's lease is active and matches this ID.</td></tr>
     * <tr><td>x-ms-meta</td><td>Map&lt;String, String&gt;</td><td>No</td><td>The metadata headers.</td></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>A date-time value. A request is made under
     * the condition that the resource has been modified since the specified date-time.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> setMetadataWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.setMetadataWithResponse(requestOptions);
    }

    /**
     * gets the permissions for the specified container. The permissions indicate whether container data may be accessed
     * publicly.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-lease-id</td><td>String</td><td>No</td><td>If specified, the operation only succeeds if the
     * resource's lease is active and matches this ID.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * [
     *      (Required){
     *         id: String (Required)
     *         accessPolicy (Required): {
     *             start: OffsetDateTime (Required)
     *             expiry: OffsetDateTime (Required)
     *             permission: String (Required)
     *         }
     *     }
     * ]
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the permissions for the specified container along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getAccessPolicyWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.getAccessPolicyWithResponse(requestOptions);
    }

    /**
     * sets the permissions for the specified container. The permissions indicate whether blobs in a container may be
     * accessed publicly.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-lease-id</td><td>String</td><td>No</td><td>If specified, the operation only succeeds if the
     * resource's lease is active and matches this ID.</td></tr>
     * <tr><td>x-ms-blob-public-access</td><td>String</td><td>No</td><td>The public access setting for the container.
     * Allowed values: "blob", "container".</td></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>A date-time value. A request is made under
     * the condition that the resource has been modified since the specified date-time.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>A date-time value. A request is made under
     * the condition that the resource has not been modified since the specified date-time.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * [
     *      (Required){
     *         id: String (Required)
     *         accessPolicy (Required): {
     *             start: OffsetDateTime (Required)
     *             expiry: OffsetDateTime (Required)
     *             permission: String (Required)
     *         }
     *     }
     * ]
     * }
     * </pre>
     * 
     * @param containerAcl The access control list for the container.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> setAccessPolicyWithResponse(BinaryData containerAcl, RequestOptions requestOptions) {
        return this.serviceClient.setAccessPolicyWithResponse(containerAcl, requestOptions);
    }

    /**
     * Restores a previously-deleted container.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-deleted-container-name</td><td>String</td><td>No</td><td>Optional. Version 2019-12-12 and later.
     * Specifies the name of the deleted container to restore.</td></tr>
     * <tr><td>x-ms-deleted-container-version</td><td>String</td><td>No</td><td>Optional. Version 2019-12-12 and later.
     * Specifies the version of the deleted container to restore.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> restoreWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.restoreWithResponse(requestOptions);
    }

    /**
     * Renames an existing container.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-source-lease-id</td><td>String</td><td>No</td><td>A lease ID for the source path. If specified, the
     * source path must have an active lease and the lease ID must match.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param sourceContainerName Required. Specifies the name of the container to rename.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> renameWithResponse(String sourceContainerName, RequestOptions requestOptions) {
        return this.serviceClient.renameWithResponse(sourceContainerName, requestOptions);
    }

    /**
     * The Batch operation allows multiple API calls to be embedded into a single HTTP request.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     body (Required): {
     *         content: BinaryData (Required)
     *         filename: String (Optional)
     *         contentType: String (Optional)
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     body (Required): {
     *         content: BinaryData (Required)
     *         filename: String (Optional)
     *         contentType: String (Optional)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param contentLength The length of the request.
     * @param body The body of the request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> submitBatchWithResponse(long contentLength, BinaryData body,
        RequestOptions requestOptions) {
        return this.serviceClient.submitBatchWithResponse(contentLength, body, requestOptions);
    }

    /**
     * The Filter Blobs operation enables callers to list blobs in a container whose tags match a given search
     * expression. Filter blobs searches within the given container.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * <tr><td>where</td><td>String</td><td>No</td><td>Filters the results to return only to return only blobs whose
     * tags match the specified expression.</td></tr>
     * <tr><td>marker</td><td>String</td><td>No</td><td>A string value that identifies the portion of the list of
     * containers to be returned with the next listing operation. The operation returns the NextMarker value within the
     * response body if the listing operation did not return all containers remaining to be listed with the current
     * page. The NextMarker value can be used as the value for the marker parameter in a subsequent call to request the
     * next page of list items. The marker value is opaque to the client.</td></tr>
     * <tr><td>maxresults</td><td>Integer</td><td>No</td><td>Specifies the maximum number of containers to return. If
     * the request does not specify maxresults, or specifies a value greater than 5000, the server will return up to
     * 5000 items.</td></tr>
     * <tr><td>include</td><td>List&lt;String&gt;</td><td>No</td><td>Include this parameter to specify one or more
     * datasets to include in the response. In the form of "," separated string.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     serviceEndpoint: String (Required)
     *     where: String (Required)
     *     blobs (Required): [
     *          (Required){
     *             name: String (Required)
     *             containerName: String (Required)
     *             tags (Optional): {
     *                 blobTagSet (Required): [
     *                      (Required){
     *                         key: String (Required)
     *                         value: String (Required)
     *                     }
     *                 ]
     *             }
     *             versionId: String (Optional)
     *             isCurrentVersion: Boolean (Optional)
     *         }
     *     ]
     *     nextMarker: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the result of a Filter Blobs API call along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> filterBlobsWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.filterBlobsWithResponse(requestOptions);
    }

    /**
     * The Acquire Lease operation requests a new lease on a container. The lease lock duration can be 15 to 60 seconds,
     * or can be infinite.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-lease-duration</td><td>Integer</td><td>No</td><td>Specifies the duration of the lease, in seconds,
     * or negative one (-1) for a lease that never expires. A non-infinite lease can be between 15 and 60 seconds. A
     * lease duration cannot be changed using renew or change.</td></tr>
     * <tr><td>x-ms-proposed-lease-id</td><td>String</td><td>No</td><td>Optional. The proposed lease ID for the
     * container.</td></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>A date-time value. A request is made under
     * the condition that the resource has been modified since the specified date-time.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>A date-time value. A request is made under
     * the condition that the resource has not been modified since the specified date-time.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> acquireLeaseWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.acquireLeaseWithResponse(requestOptions);
    }

    /**
     * The Release Lease operation frees the lease if it's no longer needed, so that another client can immediately
     * acquire a lease against the container.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>A date-time value. A request is made under
     * the condition that the resource has been modified since the specified date-time.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>A date-time value. A request is made under
     * the condition that the resource has not been modified since the specified date-time.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param leaseId Required. A lease ID for the source path. If specified, the source path must have an active lease
     * and the lease ID must match.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> releaseLeaseWithResponse(String leaseId, RequestOptions requestOptions) {
        return this.serviceClient.releaseLeaseWithResponse(leaseId, requestOptions);
    }

    /**
     * The Renew Lease operation renews an existing lease.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>A date-time value. A request is made under
     * the condition that the resource has been modified since the specified date-time.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>A date-time value. A request is made under
     * the condition that the resource has not been modified since the specified date-time.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param leaseId Required. A lease ID for the source path. If specified, the source path must have an active lease
     * and the lease ID must match.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> renewLeaseWithResponse(String leaseId, RequestOptions requestOptions) {
        return this.serviceClient.renewLeaseWithResponse(leaseId, requestOptions);
    }

    /**
     * The Break Lease operation ends a lease and ensures that another client can't acquire a new lease until the
     * current lease period has expired.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>A date-time value. A request is made under
     * the condition that the resource has been modified since the specified date-time.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>A date-time value. A request is made under
     * the condition that the resource has not been modified since the specified date-time.</td></tr>
     * <tr><td>x-ms-lease-break-period</td><td>Integer</td><td>No</td><td>For a break operation, proposed duration the
     * lease should continue before it is broken, in seconds, between 0 and 60. This break period is only used if it is
     * shorter than the time remaining on the lease. If longer, the time remaining on the lease is used. A new lease
     * will not be available before the break period has expired, but the lease may be held for longer than the break
     * period. If this header does not appear with a break operation, a fixed-duration lease breaks after the remaining
     * lease period elapses, and an infinite lease breaks immediately.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> breakLeaseWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.breakLeaseWithResponse(requestOptions);
    }

    /**
     * The Change Lease operation is used to change the ID of an existing lease.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>A date-time value. A request is made under
     * the condition that the resource has been modified since the specified date-time.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>A date-time value. A request is made under
     * the condition that the resource has not been modified since the specified date-time.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param leaseId Required. A lease ID for the source path. If specified, the source path must have an active lease
     * and the lease ID must match.
     * @param proposedLeaseId Required. The proposed lease ID for the container.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> changeLeaseWithResponse(String leaseId, String proposedLeaseId,
        RequestOptions requestOptions) {
        return this.serviceClient.changeLeaseWithResponse(leaseId, proposedLeaseId, requestOptions);
    }

    /**
     * The List Blobs operation returns a list of the blobs under the specified container.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>prefix</td><td>String</td><td>No</td><td>Filters the results to return only containers whose name begins
     * with the specified prefix.</td></tr>
     * <tr><td>marker</td><td>String</td><td>No</td><td>A string value that identifies the portion of the list of
     * containers to be returned with the next listing operation. The operation returns the NextMarker value within the
     * response body if the listing operation did not return all containers remaining to be listed with the current
     * page. The NextMarker value can be used as the value for the marker parameter in a subsequent call to request the
     * next page of list items. The marker value is opaque to the client.</td></tr>
     * <tr><td>maxresults</td><td>Integer</td><td>No</td><td>Specifies the maximum number of containers to return. If
     * the request does not specify maxresults, or specifies a value greater than 5000, the server will return up to
     * 5000 items.</td></tr>
     * <tr><td>include</td><td>List&lt;String&gt;</td><td>No</td><td>Include this parameter to specify one or more
     * datasets to include in the response. In the form of "," separated string.</td></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     serviceEndpoint: String (Required)
     *     containerName: String (Required)
     *     prefix: String (Optional)
     *     marker: String (Optional)
     *     maxResults: Integer (Optional)
     *     segment (Required): {
     *         blobItems (Required): [
     *              (Required){
     *                 name (Required): {
     *                     encoded: boolean (Required)
     *                     content: String (Required)
     *                 }
     *                 deleted: boolean (Required)
     *                 snapshot: String (Required)
     *                 versionId: String (Optional)
     *                 isCurrentVersion: Boolean (Optional)
     *                 properties (Required): {
     *                     creationTime: DateTimeRfc1123 (Optional)
     *                     lastModified: DateTimeRfc1123 (Required)
     *                     eTag: String (Required)
     *                     contentLength: Long (Optional)
     *                     contentType: String (Optional)
     *                     contentEncoding: String (Optional)
     *                     contentLanguage: String (Optional)
     *                     contentMd5: byte[] (Optional)
     *                     contentDisposition: String (Optional)
     *                     cacheControl: String (Optional)
     *                     blobSequenceNumber: Long (Optional)
     *                     blobType: String(BlockBlob/PageBlob/AppendBlob) (Optional)
     *                     leaseStatus: String(unlocked/locked) (Optional)
     *                     leaseState: String(available/leased/expired/breaking/broken) (Optional)
     *                     leaseDuration: String(infinite/fixed) (Optional)
     *                     copyId: String (Optional)
     *                     copyStatus: String(pending/success/failed/aborted) (Optional)
     *                     copySource: String (Optional)
     *                     copyProgress: String (Optional)
     *                     copyCompletionTime: DateTimeRfc1123 (Optional)
     *                     copyStatusDescription: String (Optional)
     *                     serverEncrypted: Boolean (Optional)
     *                     incrementalCopy: Boolean (Optional)
     *                     destinationSnapshot: String (Optional)
     *                     deletedTime: DateTimeRfc1123 (Optional)
     *                     remainingRetentionDays: Integer (Optional)
     *                     accessTier: String(P4/P6/P10/P15/P20/P30/P40/P50/P60/P70/P80/Hot/Cool/Archive/Premium/Cold) (Optional)
     *                     accessTierInferred: Boolean (Optional)
     *                     archiveStatus: String(rehydrate-pending-to-hot/rehydrate-pending-to-cool/rehydrate-pending-to-cold) (Optional)
     *                     customerProvidedKeySha256: String (Optional)
     *                     encryptionScope: String (Optional)
     *                     accessTierChangeTime: DateTimeRfc1123 (Optional)
     *                     tagCount: Integer (Optional)
     *                     expiryTime: DateTimeRfc1123 (Optional)
     *                     sealed: Boolean (Optional)
     *                     rehydratePriority: String(High/Standard) (Optional)
     *                     lastAccessTime: DateTimeRfc1123 (Optional)
     *                     immutabilityPolicyUntilDate: DateTimeRfc1123 (Optional)
     *                     immutabilityPolicyMode: String(Mutable/Locked/Unlocked) (Optional)
     *                     legalHold: Boolean (Optional)
     *                 }
     *                 metadata (Optional): {
     *                     encrypted: String (Optional)
     *                      (Optional): {
     *                         String: String (Required)
     *                     }
     *                 }
     *                 blobTags (Optional): {
     *                     blobTagSet (Required): [
     *                          (Required){
     *                             key: String (Required)
     *                             value: String (Required)
     *                         }
     *                     ]
     *                 }
     *                 objectReplicationMetadata (Optional): {
     *                      (Optional): {
     *                         String: String (Required)
     *                     }
     *                 }
     *                 hasVersionsOnly: Boolean (Optional)
     *             }
     *         ]
     *     }
     *     nextMarker: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return an enumeration of blobs along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listBlobFlatSegmentWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.listBlobFlatSegmentWithResponse(requestOptions);
    }

    /**
     * The List Blobs operation returns a list of the blobs under the specified container. A delimiter can be used to
     * traverse a virtual hierarchy of blobs as though it were a file system.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>prefix</td><td>String</td><td>No</td><td>Filters the results to return only containers whose name begins
     * with the specified prefix.</td></tr>
     * <tr><td>marker</td><td>String</td><td>No</td><td>A string value that identifies the portion of the list of
     * containers to be returned with the next listing operation. The operation returns the NextMarker value within the
     * response body if the listing operation did not return all containers remaining to be listed with the current
     * page. The NextMarker value can be used as the value for the marker parameter in a subsequent call to request the
     * next page of list items. The marker value is opaque to the client.</td></tr>
     * <tr><td>maxresults</td><td>Integer</td><td>No</td><td>Specifies the maximum number of containers to return. If
     * the request does not specify maxresults, or specifies a value greater than 5000, the server will return up to
     * 5000 items.</td></tr>
     * <tr><td>include</td><td>List&lt;String&gt;</td><td>No</td><td>Include this parameter to specify one or more
     * datasets to include in the response. In the form of "," separated string.</td></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     serviceEndpoint: String (Required)
     *     containerName: String (Required)
     *     delimiter: String (Optional)
     *     prefix: String (Optional)
     *     marker: String (Optional)
     *     maxResults: Integer (Optional)
     *     segment (Required): {
     *         blobItems (Required): [
     *              (Required){
     *                 name (Required): {
     *                     encoded: boolean (Required)
     *                     content: String (Required)
     *                 }
     *                 deleted: boolean (Required)
     *                 snapshot: String (Required)
     *                 versionId: String (Optional)
     *                 isCurrentVersion: Boolean (Optional)
     *                 properties (Required): {
     *                     creationTime: DateTimeRfc1123 (Optional)
     *                     lastModified: DateTimeRfc1123 (Required)
     *                     eTag: String (Required)
     *                     contentLength: Long (Optional)
     *                     contentType: String (Optional)
     *                     contentEncoding: String (Optional)
     *                     contentLanguage: String (Optional)
     *                     contentMd5: byte[] (Optional)
     *                     contentDisposition: String (Optional)
     *                     cacheControl: String (Optional)
     *                     blobSequenceNumber: Long (Optional)
     *                     blobType: String(BlockBlob/PageBlob/AppendBlob) (Optional)
     *                     leaseStatus: String(unlocked/locked) (Optional)
     *                     leaseState: String(available/leased/expired/breaking/broken) (Optional)
     *                     leaseDuration: String(infinite/fixed) (Optional)
     *                     copyId: String (Optional)
     *                     copyStatus: String(pending/success/failed/aborted) (Optional)
     *                     copySource: String (Optional)
     *                     copyProgress: String (Optional)
     *                     copyCompletionTime: DateTimeRfc1123 (Optional)
     *                     copyStatusDescription: String (Optional)
     *                     serverEncrypted: Boolean (Optional)
     *                     incrementalCopy: Boolean (Optional)
     *                     destinationSnapshot: String (Optional)
     *                     deletedTime: DateTimeRfc1123 (Optional)
     *                     remainingRetentionDays: Integer (Optional)
     *                     accessTier: String(P4/P6/P10/P15/P20/P30/P40/P50/P60/P70/P80/Hot/Cool/Archive/Premium/Cold) (Optional)
     *                     accessTierInferred: Boolean (Optional)
     *                     archiveStatus: String(rehydrate-pending-to-hot/rehydrate-pending-to-cool/rehydrate-pending-to-cold) (Optional)
     *                     customerProvidedKeySha256: String (Optional)
     *                     encryptionScope: String (Optional)
     *                     accessTierChangeTime: DateTimeRfc1123 (Optional)
     *                     tagCount: Integer (Optional)
     *                     expiryTime: DateTimeRfc1123 (Optional)
     *                     sealed: Boolean (Optional)
     *                     rehydratePriority: String(High/Standard) (Optional)
     *                     lastAccessTime: DateTimeRfc1123 (Optional)
     *                     immutabilityPolicyUntilDate: DateTimeRfc1123 (Optional)
     *                     immutabilityPolicyMode: String(Mutable/Locked/Unlocked) (Optional)
     *                     legalHold: Boolean (Optional)
     *                 }
     *                 metadata (Optional): {
     *                     encrypted: String (Optional)
     *                      (Optional): {
     *                         String: String (Required)
     *                     }
     *                 }
     *                 blobTags (Optional): {
     *                     blobTagSet (Required): [
     *                          (Required){
     *                             key: String (Required)
     *                             value: String (Required)
     *                         }
     *                     ]
     *                 }
     *                 objectReplicationMetadata (Optional): {
     *                      (Optional): {
     *                         String: String (Required)
     *                     }
     *                 }
     *                 hasVersionsOnly: Boolean (Optional)
     *             }
     *         ]
     *         blobPrefixes (Optional): [
     *              (Optional){
     *                 name (Required): (recursive schema, see name above)
     *             }
     *         ]
     *     }
     *     nextMarker: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param delimiter When the request includes this parameter, the operation returns a BlobPrefix element in the
     * response body that acts as a placeholder for all blobs whose names begin with the same substring up to the
     * appearance of the delimiter character. The delimiter may be a single character or a string.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return an enumeration of blobs along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listBlobHierarchySegmentWithResponse(String delimiter, RequestOptions requestOptions) {
        return this.serviceClient.listBlobHierarchySegmentWithResponse(delimiter, requestOptions);
    }

    /**
     * Returns the sku name and account kind.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> getAccountInfoWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.getAccountInfoWithResponse(requestOptions);
    }

    /**
     * Creates a new container under the specified account. If the container with the same name already exists, the
     * operation fails.
     * 
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;.
     * @param metadata The metadata headers.
     * @param access The public access setting for the container.
     * @param defaultEncryptionScope Optional. Version 2019-07-07 and later. Specifies the default encryption scope to
     * set on the container and use for all future writes.
     * @param preventEncryptionScopeOverride If a blob has a lease and the lease is of infinite duration then the value
     * of this header is set to true, otherwise it is set to false.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void create(Integer timeout, Map<String, String> metadata, PublicAccessType access,
        String defaultEncryptionScope, Boolean preventEncryptionScopeOverride) {
        // Generated convenience method for createWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (timeout != null) {
            requestOptions.addQueryParam("timeout", String.valueOf(timeout), false);
        }
        if (metadata != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-meta"), String.valueOf(metadata));
        }
        if (access != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-blob-public-access"), access.toString());
        }
        if (defaultEncryptionScope != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-default-encryption-scope"),
                defaultEncryptionScope);
        }
        if (preventEncryptionScopeOverride != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-deny-encryption-scope-override"),
                String.valueOf(preventEncryptionScopeOverride));
        }
        createWithResponse(requestOptions).getValue();
    }

    /**
     * Creates a new container under the specified account. If the container with the same name already exists, the
     * operation fails.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void create() {
        // Generated convenience method for createWithResponse
        RequestOptions requestOptions = new RequestOptions();
        createWithResponse(requestOptions).getValue();
    }

    /**
     * returns all user-defined metadata and system properties for the specified container. The data returned does not
     * include the container's list of blobs.
     * 
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;.
     * @param leaseId If specified, the operation only succeeds if the resource's lease is active and matches this ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void getProperties(Integer timeout, String leaseId) {
        // Generated convenience method for getPropertiesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (timeout != null) {
            requestOptions.addQueryParam("timeout", String.valueOf(timeout), false);
        }
        if (leaseId != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-lease-id"), leaseId);
        }
        getPropertiesWithResponse(requestOptions).getValue();
    }

    /**
     * returns all user-defined metadata and system properties for the specified container. The data returned does not
     * include the container's list of blobs.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void getProperties() {
        // Generated convenience method for getPropertiesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        getPropertiesWithResponse(requestOptions).getValue();
    }

    /**
     * operation marks the specified container for deletion. The container and any blobs contained within it are later
     * deleted during garbage collection.
     * 
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;.
     * @param leaseId If specified, the operation only succeeds if the resource's lease is active and matches this ID.
     * @param ifModifiedSince A date-time value. A request is made under the condition that the resource has been
     * modified since the specified date-time.
     * @param ifUnmodifiedSince A date-time value. A request is made under the condition that the resource has not been
     * modified since the specified date-time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(Integer timeout, String leaseId, OffsetDateTime ifModifiedSince,
        OffsetDateTime ifUnmodifiedSince) {
        // Generated convenience method for deleteWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (timeout != null) {
            requestOptions.addQueryParam("timeout", String.valueOf(timeout), false);
        }
        if (leaseId != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-lease-id"), leaseId);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_UNMODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        deleteWithResponse(requestOptions).getValue();
    }

    /**
     * operation marks the specified container for deletion. The container and any blobs contained within it are later
     * deleted during garbage collection.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete() {
        // Generated convenience method for deleteWithResponse
        RequestOptions requestOptions = new RequestOptions();
        deleteWithResponse(requestOptions).getValue();
    }

    /**
     * operation sets one or more user-defined name-value pairs for the specified container.
     * 
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;.
     * @param leaseId If specified, the operation only succeeds if the resource's lease is active and matches this ID.
     * @param metadata The metadata headers.
     * @param ifModifiedSince A date-time value. A request is made under the condition that the resource has been
     * modified since the specified date-time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void setMetadata(Integer timeout, String leaseId, Map<String, String> metadata,
        OffsetDateTime ifModifiedSince) {
        // Generated convenience method for setMetadataWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (timeout != null) {
            requestOptions.addQueryParam("timeout", String.valueOf(timeout), false);
        }
        if (leaseId != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-lease-id"), leaseId);
        }
        if (metadata != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-meta"), String.valueOf(metadata));
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        setMetadataWithResponse(requestOptions).getValue();
    }

    /**
     * operation sets one or more user-defined name-value pairs for the specified container.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void setMetadata() {
        // Generated convenience method for setMetadataWithResponse
        RequestOptions requestOptions = new RequestOptions();
        setMetadataWithResponse(requestOptions).getValue();
    }

    /**
     * gets the permissions for the specified container. The permissions indicate whether container data may be accessed
     * publicly.
     * 
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;.
     * @param leaseId If specified, the operation only succeeds if the resource's lease is active and matches this ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the permissions for the specified container.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<SignedIdentifier> getAccessPolicy(Integer timeout, String leaseId) {
        // Generated convenience method for getAccessPolicyWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (timeout != null) {
            requestOptions.addQueryParam("timeout", String.valueOf(timeout), false);
        }
        if (leaseId != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-lease-id"), leaseId);
        }
        return getAccessPolicyWithResponse(requestOptions).getValue().toObject(TYPE_REFERENCE_LIST_SIGNED_IDENTIFIER);
    }

    /**
     * gets the permissions for the specified container. The permissions indicate whether container data may be accessed
     * publicly.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the permissions for the specified container.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<SignedIdentifier> getAccessPolicy() {
        // Generated convenience method for getAccessPolicyWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getAccessPolicyWithResponse(requestOptions).getValue().toObject(TYPE_REFERENCE_LIST_SIGNED_IDENTIFIER);
    }

    /**
     * sets the permissions for the specified container. The permissions indicate whether blobs in a container may be
     * accessed publicly.
     * 
     * @param containerAcl The access control list for the container.
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;.
     * @param leaseId If specified, the operation only succeeds if the resource's lease is active and matches this ID.
     * @param access The public access setting for the container.
     * @param ifModifiedSince A date-time value. A request is made under the condition that the resource has been
     * modified since the specified date-time.
     * @param ifUnmodifiedSince A date-time value. A request is made under the condition that the resource has not been
     * modified since the specified date-time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void setAccessPolicy(List<SignedIdentifier> containerAcl, Integer timeout, String leaseId,
        PublicAccessType access, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince) {
        // Generated convenience method for setAccessPolicyWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (timeout != null) {
            requestOptions.addQueryParam("timeout", String.valueOf(timeout), false);
        }
        if (leaseId != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-lease-id"), leaseId);
        }
        if (access != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-blob-public-access"), access.toString());
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_UNMODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        setAccessPolicyWithResponse(BinaryData.fromObject(containerAcl), requestOptions).getValue();
    }

    /**
     * sets the permissions for the specified container. The permissions indicate whether blobs in a container may be
     * accessed publicly.
     * 
     * @param containerAcl The access control list for the container.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void setAccessPolicy(List<SignedIdentifier> containerAcl) {
        // Generated convenience method for setAccessPolicyWithResponse
        RequestOptions requestOptions = new RequestOptions();
        setAccessPolicyWithResponse(BinaryData.fromObject(containerAcl), requestOptions).getValue();
    }

    /**
     * Restores a previously-deleted container.
     * 
     * @param deletedContainerName Optional. Version 2019-12-12 and later. Specifies the name of the deleted container
     * to restore.
     * @param deletedContainerVersion Optional. Version 2019-12-12 and later. Specifies the version of the deleted
     * container to restore.
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void restore(String deletedContainerName, String deletedContainerVersion, Integer timeout) {
        // Generated convenience method for restoreWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (deletedContainerName != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-deleted-container-name"), deletedContainerName);
        }
        if (deletedContainerVersion != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-deleted-container-version"),
                deletedContainerVersion);
        }
        if (timeout != null) {
            requestOptions.addQueryParam("timeout", String.valueOf(timeout), false);
        }
        restoreWithResponse(requestOptions).getValue();
    }

    /**
     * Restores a previously-deleted container.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void restore() {
        // Generated convenience method for restoreWithResponse
        RequestOptions requestOptions = new RequestOptions();
        restoreWithResponse(requestOptions).getValue();
    }

    /**
     * Renames an existing container.
     * 
     * @param sourceContainerName Required. Specifies the name of the container to rename.
     * @param sourceLeaseId A lease ID for the source path. If specified, the source path must have an active lease and
     * the lease ID must match.
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void rename(String sourceContainerName, String sourceLeaseId, Integer timeout) {
        // Generated convenience method for renameWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (sourceLeaseId != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-source-lease-id"), sourceLeaseId);
        }
        if (timeout != null) {
            requestOptions.addQueryParam("timeout", String.valueOf(timeout), false);
        }
        renameWithResponse(sourceContainerName, requestOptions).getValue();
    }

    /**
     * Renames an existing container.
     * 
     * @param sourceContainerName Required. Specifies the name of the container to rename.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void rename(String sourceContainerName) {
        // Generated convenience method for renameWithResponse
        RequestOptions requestOptions = new RequestOptions();
        renameWithResponse(sourceContainerName, requestOptions).getValue();
    }

    /**
     * The Batch operation allows multiple API calls to be embedded into a single HTTP request.
     * 
     * @param contentLength The length of the request.
     * @param body The body of the request.
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SubmitBatchRequest submitBatch(long contentLength, SubmitBatchRequest body, Integer timeout) {
        // Generated convenience method for submitBatchWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (timeout != null) {
            requestOptions.addQueryParam("timeout", String.valueOf(timeout), false);
        }
        return submitBatchWithResponse(contentLength, body, requestOptions).getValue();
    }

    /**
     * The Batch operation allows multiple API calls to be embedded into a single HTTP request.
     * 
     * @param contentLength The length of the request.
     * @param body The body of the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SubmitBatchRequest submitBatch(long contentLength, SubmitBatchRequest body) {
        // Generated convenience method for submitBatchWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return submitBatchWithResponse(contentLength, body, requestOptions).getValue();
    }

    /**
     * The Filter Blobs operation enables callers to list blobs in a container whose tags match a given search
     * expression. Filter blobs searches within the given container.
     * 
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;.
     * @param where Filters the results to return only to return only blobs whose tags match the specified expression.
     * @param marker A string value that identifies the portion of the list of containers to be returned with the next
     * listing operation. The operation returns the NextMarker value within the response body if the listing operation
     * did not return all containers remaining to be listed with the current page. The NextMarker value can be used as
     * the value for the marker parameter in a subsequent call to request the next page of list items. The marker value
     * is opaque to the client.
     * @param maxresults Specifies the maximum number of containers to return. If the request does not specify
     * maxresults, or specifies a value greater than 5000, the server will return up to 5000 items.
     * @param include Include this parameter to specify one or more datasets to include in the response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of a Filter Blobs API call.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public FilterBlobSegment filterBlobs(Integer timeout, String where, String marker, Integer maxresults,
        List<FilterBlobsIncludeItem> include) {
        // Generated convenience method for filterBlobsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (timeout != null) {
            requestOptions.addQueryParam("timeout", String.valueOf(timeout), false);
        }
        if (where != null) {
            requestOptions.addQueryParam("where", where, false);
        }
        if (marker != null) {
            requestOptions.addQueryParam("marker", marker, false);
        }
        if (maxresults != null) {
            requestOptions.addQueryParam("maxresults", String.valueOf(maxresults), false);
        }
        if (include != null) {
            requestOptions.addQueryParam("include",
                include.stream()
                    .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                    .collect(Collectors.joining(",")),
                false);
        }
        return filterBlobsWithResponse(requestOptions).getValue().toObject(FilterBlobSegment.class);
    }

    /**
     * The Filter Blobs operation enables callers to list blobs in a container whose tags match a given search
     * expression. Filter blobs searches within the given container.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of a Filter Blobs API call.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public FilterBlobSegment filterBlobs() {
        // Generated convenience method for filterBlobsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return filterBlobsWithResponse(requestOptions).getValue().toObject(FilterBlobSegment.class);
    }

    /**
     * The Acquire Lease operation requests a new lease on a container. The lease lock duration can be 15 to 60 seconds,
     * or can be infinite.
     * 
     * @param duration Specifies the duration of the lease, in seconds, or negative one (-1) for a lease that never
     * expires. A non-infinite lease can be between 15 and 60 seconds. A lease duration cannot be changed using renew or
     * change.
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;.
     * @param proposedLeaseId Optional. The proposed lease ID for the container.
     * @param ifModifiedSince A date-time value. A request is made under the condition that the resource has been
     * modified since the specified date-time.
     * @param ifUnmodifiedSince A date-time value. A request is made under the condition that the resource has not been
     * modified since the specified date-time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void acquireLease(Integer duration, Integer timeout, String proposedLeaseId, OffsetDateTime ifModifiedSince,
        OffsetDateTime ifUnmodifiedSince) {
        // Generated convenience method for acquireLeaseWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (duration != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-lease-duration"), String.valueOf(duration));
        }
        if (timeout != null) {
            requestOptions.addQueryParam("timeout", String.valueOf(timeout), false);
        }
        if (proposedLeaseId != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-proposed-lease-id"), proposedLeaseId);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_UNMODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        acquireLeaseWithResponse(requestOptions).getValue();
    }

    /**
     * The Acquire Lease operation requests a new lease on a container. The lease lock duration can be 15 to 60 seconds,
     * or can be infinite.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void acquireLease() {
        // Generated convenience method for acquireLeaseWithResponse
        RequestOptions requestOptions = new RequestOptions();
        acquireLeaseWithResponse(requestOptions).getValue();
    }

    /**
     * The Release Lease operation frees the lease if it's no longer needed, so that another client can immediately
     * acquire a lease against the container.
     * 
     * @param leaseId Required. A lease ID for the source path. If specified, the source path must have an active lease
     * and the lease ID must match.
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;.
     * @param ifModifiedSince A date-time value. A request is made under the condition that the resource has been
     * modified since the specified date-time.
     * @param ifUnmodifiedSince A date-time value. A request is made under the condition that the resource has not been
     * modified since the specified date-time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void releaseLease(String leaseId, Integer timeout, OffsetDateTime ifModifiedSince,
        OffsetDateTime ifUnmodifiedSince) {
        // Generated convenience method for releaseLeaseWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (timeout != null) {
            requestOptions.addQueryParam("timeout", String.valueOf(timeout), false);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_UNMODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        releaseLeaseWithResponse(leaseId, requestOptions).getValue();
    }

    /**
     * The Release Lease operation frees the lease if it's no longer needed, so that another client can immediately
     * acquire a lease against the container.
     * 
     * @param leaseId Required. A lease ID for the source path. If specified, the source path must have an active lease
     * and the lease ID must match.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void releaseLease(String leaseId) {
        // Generated convenience method for releaseLeaseWithResponse
        RequestOptions requestOptions = new RequestOptions();
        releaseLeaseWithResponse(leaseId, requestOptions).getValue();
    }

    /**
     * The Renew Lease operation renews an existing lease.
     * 
     * @param leaseId Required. A lease ID for the source path. If specified, the source path must have an active lease
     * and the lease ID must match.
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;.
     * @param ifModifiedSince A date-time value. A request is made under the condition that the resource has been
     * modified since the specified date-time.
     * @param ifUnmodifiedSince A date-time value. A request is made under the condition that the resource has not been
     * modified since the specified date-time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void renewLease(String leaseId, Integer timeout, OffsetDateTime ifModifiedSince,
        OffsetDateTime ifUnmodifiedSince) {
        // Generated convenience method for renewLeaseWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (timeout != null) {
            requestOptions.addQueryParam("timeout", String.valueOf(timeout), false);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_UNMODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        renewLeaseWithResponse(leaseId, requestOptions).getValue();
    }

    /**
     * The Renew Lease operation renews an existing lease.
     * 
     * @param leaseId Required. A lease ID for the source path. If specified, the source path must have an active lease
     * and the lease ID must match.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void renewLease(String leaseId) {
        // Generated convenience method for renewLeaseWithResponse
        RequestOptions requestOptions = new RequestOptions();
        renewLeaseWithResponse(leaseId, requestOptions).getValue();
    }

    /**
     * The Break Lease operation ends a lease and ensures that another client can't acquire a new lease until the
     * current lease period has expired.
     * 
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;.
     * @param ifModifiedSince A date-time value. A request is made under the condition that the resource has been
     * modified since the specified date-time.
     * @param ifUnmodifiedSince A date-time value. A request is made under the condition that the resource has not been
     * modified since the specified date-time.
     * @param breakPeriod For a break operation, proposed duration the lease should continue before it is broken, in
     * seconds, between 0 and 60. This break period is only used if it is shorter than the time remaining on the lease.
     * If longer, the time remaining on the lease is used. A new lease will not be available before the break period has
     * expired, but the lease may be held for longer than the break period. If this header does not appear with a break
     * operation, a fixed-duration lease breaks after the remaining lease period elapses, and an infinite lease breaks
     * immediately.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void breakLease(Integer timeout, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince,
        Integer breakPeriod) {
        // Generated convenience method for breakLeaseWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (timeout != null) {
            requestOptions.addQueryParam("timeout", String.valueOf(timeout), false);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_UNMODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        if (breakPeriod != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-lease-break-period"), String.valueOf(breakPeriod));
        }
        breakLeaseWithResponse(requestOptions).getValue();
    }

    /**
     * The Break Lease operation ends a lease and ensures that another client can't acquire a new lease until the
     * current lease period has expired.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void breakLease() {
        // Generated convenience method for breakLeaseWithResponse
        RequestOptions requestOptions = new RequestOptions();
        breakLeaseWithResponse(requestOptions).getValue();
    }

    /**
     * The Change Lease operation is used to change the ID of an existing lease.
     * 
     * @param leaseId Required. A lease ID for the source path. If specified, the source path must have an active lease
     * and the lease ID must match.
     * @param proposedLeaseId Required. The proposed lease ID for the container.
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;.
     * @param ifModifiedSince A date-time value. A request is made under the condition that the resource has been
     * modified since the specified date-time.
     * @param ifUnmodifiedSince A date-time value. A request is made under the condition that the resource has not been
     * modified since the specified date-time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void changeLease(String leaseId, String proposedLeaseId, Integer timeout, OffsetDateTime ifModifiedSince,
        OffsetDateTime ifUnmodifiedSince) {
        // Generated convenience method for changeLeaseWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (timeout != null) {
            requestOptions.addQueryParam("timeout", String.valueOf(timeout), false);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_UNMODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        changeLeaseWithResponse(leaseId, proposedLeaseId, requestOptions).getValue();
    }

    /**
     * The Change Lease operation is used to change the ID of an existing lease.
     * 
     * @param leaseId Required. A lease ID for the source path. If specified, the source path must have an active lease
     * and the lease ID must match.
     * @param proposedLeaseId Required. The proposed lease ID for the container.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void changeLease(String leaseId, String proposedLeaseId) {
        // Generated convenience method for changeLeaseWithResponse
        RequestOptions requestOptions = new RequestOptions();
        changeLeaseWithResponse(leaseId, proposedLeaseId, requestOptions).getValue();
    }

    /**
     * The List Blobs operation returns a list of the blobs under the specified container.
     * 
     * @param prefix Filters the results to return only containers whose name begins with the specified prefix.
     * @param marker A string value that identifies the portion of the list of containers to be returned with the next
     * listing operation. The operation returns the NextMarker value within the response body if the listing operation
     * did not return all containers remaining to be listed with the current page. The NextMarker value can be used as
     * the value for the marker parameter in a subsequent call to request the next page of list items. The marker value
     * is opaque to the client.
     * @param maxresults Specifies the maximum number of containers to return. If the request does not specify
     * maxresults, or specifies a value greater than 5000, the server will return up to 5000 items.
     * @param include Include this parameter to specify one or more datasets to include in the response.
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an enumeration of blobs.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ListBlobsFlatSegmentResponse listBlobFlatSegment(String prefix, String marker, Integer maxresults,
        List<ListBlobsIncludeItem> include, Integer timeout) {
        // Generated convenience method for listBlobFlatSegmentWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (prefix != null) {
            requestOptions.addQueryParam("prefix", prefix, false);
        }
        if (marker != null) {
            requestOptions.addQueryParam("marker", marker, false);
        }
        if (maxresults != null) {
            requestOptions.addQueryParam("maxresults", String.valueOf(maxresults), false);
        }
        if (include != null) {
            requestOptions.addQueryParam("include",
                include.stream()
                    .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                    .collect(Collectors.joining(",")),
                false);
        }
        if (timeout != null) {
            requestOptions.addQueryParam("timeout", String.valueOf(timeout), false);
        }
        return listBlobFlatSegmentWithResponse(requestOptions).getValue().toObject(ListBlobsFlatSegmentResponse.class);
    }

    /**
     * The List Blobs operation returns a list of the blobs under the specified container.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an enumeration of blobs.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ListBlobsFlatSegmentResponse listBlobFlatSegment() {
        // Generated convenience method for listBlobFlatSegmentWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return listBlobFlatSegmentWithResponse(requestOptions).getValue().toObject(ListBlobsFlatSegmentResponse.class);
    }

    /**
     * The List Blobs operation returns a list of the blobs under the specified container. A delimiter can be used to
     * traverse a virtual hierarchy of blobs as though it were a file system.
     * 
     * @param delimiter When the request includes this parameter, the operation returns a BlobPrefix element in the
     * response body that acts as a placeholder for all blobs whose names begin with the same substring up to the
     * appearance of the delimiter character. The delimiter may be a single character or a string.
     * @param prefix Filters the results to return only containers whose name begins with the specified prefix.
     * @param marker A string value that identifies the portion of the list of containers to be returned with the next
     * listing operation. The operation returns the NextMarker value within the response body if the listing operation
     * did not return all containers remaining to be listed with the current page. The NextMarker value can be used as
     * the value for the marker parameter in a subsequent call to request the next page of list items. The marker value
     * is opaque to the client.
     * @param maxresults Specifies the maximum number of containers to return. If the request does not specify
     * maxresults, or specifies a value greater than 5000, the server will return up to 5000 items.
     * @param include Include this parameter to specify one or more datasets to include in the response.
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an enumeration of blobs.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ListBlobsHierarchySegmentResponse listBlobHierarchySegment(String delimiter, String prefix, String marker,
        Integer maxresults, List<ListBlobsIncludeItem> include, Integer timeout) {
        // Generated convenience method for listBlobHierarchySegmentWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (prefix != null) {
            requestOptions.addQueryParam("prefix", prefix, false);
        }
        if (marker != null) {
            requestOptions.addQueryParam("marker", marker, false);
        }
        if (maxresults != null) {
            requestOptions.addQueryParam("maxresults", String.valueOf(maxresults), false);
        }
        if (include != null) {
            requestOptions.addQueryParam("include",
                include.stream()
                    .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                    .collect(Collectors.joining(",")),
                false);
        }
        if (timeout != null) {
            requestOptions.addQueryParam("timeout", String.valueOf(timeout), false);
        }
        return listBlobHierarchySegmentWithResponse(delimiter, requestOptions).getValue()
            .toObject(ListBlobsHierarchySegmentResponse.class);
    }

    /**
     * The List Blobs operation returns a list of the blobs under the specified container. A delimiter can be used to
     * traverse a virtual hierarchy of blobs as though it were a file system.
     * 
     * @param delimiter When the request includes this parameter, the operation returns a BlobPrefix element in the
     * response body that acts as a placeholder for all blobs whose names begin with the same substring up to the
     * appearance of the delimiter character. The delimiter may be a single character or a string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an enumeration of blobs.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ListBlobsHierarchySegmentResponse listBlobHierarchySegment(String delimiter) {
        // Generated convenience method for listBlobHierarchySegmentWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return listBlobHierarchySegmentWithResponse(delimiter, requestOptions).getValue()
            .toObject(ListBlobsHierarchySegmentResponse.class);
    }

    /**
     * Returns the sku name and account kind.
     * 
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void getAccountInfo(Integer timeout) {
        // Generated convenience method for getAccountInfoWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (timeout != null) {
            requestOptions.addQueryParam("timeout", String.valueOf(timeout), false);
        }
        getAccountInfoWithResponse(requestOptions).getValue();
    }

    /**
     * Returns the sku name and account kind.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void getAccountInfo() {
        // Generated convenience method for getAccountInfoWithResponse
        RequestOptions requestOptions = new RequestOptions();
        getAccountInfoWithResponse(requestOptions).getValue();
    }

    @Generated
    private static final TypeReference<List<SignedIdentifier>> TYPE_REFERENCE_LIST_SIGNED_IDENTIFIER
        = new TypeReference<List<SignedIdentifier>>() {
        };
}
