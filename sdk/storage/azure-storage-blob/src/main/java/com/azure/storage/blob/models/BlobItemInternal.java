// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.storage.blob.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * An Azure Storage Blob.
 */
@Immutable
public final class BlobItemInternal implements JsonSerializable<BlobItemInternal> {
    /*
     * The name of the blob.
     */
    @Generated
    private final BlobName name;

    /*
     * Whether the blob is deleted.
     */
    @Generated
    private final boolean deleted;

    /*
     * The snapshot of the blob.
     */
    @Generated
    private final String snapshot;

    /*
     * The version id of the blob.
     */
    @Generated
    private String versionId;

    /*
     * Whether the blob is the current version.
     */
    @Generated
    private Boolean isCurrentVersion;

    /*
     * The properties of the blob.
     */
    @Generated
    private final BlobPropertiesInternal properties;

    /*
     * The metadata of the blob.
     */
    @Generated
    private BlobMetadata metadata;

    /*
     * The tags of the blob.
     */
    @Generated
    private BlobTags blobTags;

    /*
     * The object replication metadata of the blob.
     */
    @Generated
    private ObjectReplicationMetadata objectReplicationMetadata;

    /*
     * Whether the blog has versions only.
     */
    @Generated
    private Boolean hasVersionsOnly;

    /**
     * Creates an instance of BlobItemInternal class.
     * 
     * @param name the name value to set.
     * @param deleted the deleted value to set.
     * @param snapshot the snapshot value to set.
     * @param properties the properties value to set.
     */
    @Generated
    private BlobItemInternal(BlobName name, boolean deleted, String snapshot, BlobPropertiesInternal properties) {
        this.name = name;
        this.deleted = deleted;
        this.snapshot = snapshot;
        this.properties = properties;
    }

    /**
     * Get the name property: The name of the blob.
     * 
     * @return the name value.
     */
    @Generated
    public BlobName getName() {
        return this.name;
    }

    /**
     * Get the deleted property: Whether the blob is deleted.
     * 
     * @return the deleted value.
     */
    @Generated
    public boolean isDeleted() {
        return this.deleted;
    }

    /**
     * Get the snapshot property: The snapshot of the blob.
     * 
     * @return the snapshot value.
     */
    @Generated
    public String getSnapshot() {
        return this.snapshot;
    }

    /**
     * Get the versionId property: The version id of the blob.
     * 
     * @return the versionId value.
     */
    @Generated
    public String getVersionId() {
        return this.versionId;
    }

    /**
     * Get the isCurrentVersion property: Whether the blob is the current version.
     * 
     * @return the isCurrentVersion value.
     */
    @Generated
    public Boolean isCurrentVersion() {
        return this.isCurrentVersion;
    }

    /**
     * Get the properties property: The properties of the blob.
     * 
     * @return the properties value.
     */
    @Generated
    public BlobPropertiesInternal getProperties() {
        return this.properties;
    }

    /**
     * Get the metadata property: The metadata of the blob.
     * 
     * @return the metadata value.
     */
    @Generated
    public BlobMetadata getMetadata() {
        return this.metadata;
    }

    /**
     * Get the blobTags property: The tags of the blob.
     * 
     * @return the blobTags value.
     */
    @Generated
    public BlobTags getBlobTags() {
        return this.blobTags;
    }

    /**
     * Get the objectReplicationMetadata property: The object replication metadata of the blob.
     * 
     * @return the objectReplicationMetadata value.
     */
    @Generated
    public ObjectReplicationMetadata getObjectReplicationMetadata() {
        return this.objectReplicationMetadata;
    }

    /**
     * Get the hasVersionsOnly property: Whether the blog has versions only.
     * 
     * @return the hasVersionsOnly value.
     */
    @Generated
    public Boolean isHasVersionsOnly() {
        return this.hasVersionsOnly;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("name", this.name);
        jsonWriter.writeBooleanField("deleted", this.deleted);
        jsonWriter.writeStringField("snapshot", this.snapshot);
        jsonWriter.writeJsonField("properties", this.properties);
        jsonWriter.writeStringField("versionId", this.versionId);
        jsonWriter.writeBooleanField("isCurrentVersion", this.isCurrentVersion);
        jsonWriter.writeJsonField("metadata", this.metadata);
        jsonWriter.writeJsonField("blobTags", this.blobTags);
        jsonWriter.writeJsonField("objectReplicationMetadata", this.objectReplicationMetadata);
        jsonWriter.writeBooleanField("hasVersionsOnly", this.hasVersionsOnly);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BlobItemInternal from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BlobItemInternal if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the BlobItemInternal.
     */
    @Generated
    public static BlobItemInternal fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BlobName name = null;
            boolean deleted = false;
            String snapshot = null;
            BlobPropertiesInternal properties = null;
            String versionId = null;
            Boolean isCurrentVersion = null;
            BlobMetadata metadata = null;
            BlobTags blobTags = null;
            ObjectReplicationMetadata objectReplicationMetadata = null;
            Boolean hasVersionsOnly = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    name = BlobName.fromJson(reader);
                } else if ("deleted".equals(fieldName)) {
                    deleted = reader.getBoolean();
                } else if ("snapshot".equals(fieldName)) {
                    snapshot = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    properties = BlobPropertiesInternal.fromJson(reader);
                } else if ("versionId".equals(fieldName)) {
                    versionId = reader.getString();
                } else if ("isCurrentVersion".equals(fieldName)) {
                    isCurrentVersion = reader.getNullable(JsonReader::getBoolean);
                } else if ("metadata".equals(fieldName)) {
                    metadata = BlobMetadata.fromJson(reader);
                } else if ("blobTags".equals(fieldName)) {
                    blobTags = BlobTags.fromJson(reader);
                } else if ("objectReplicationMetadata".equals(fieldName)) {
                    objectReplicationMetadata = ObjectReplicationMetadata.fromJson(reader);
                } else if ("hasVersionsOnly".equals(fieldName)) {
                    hasVersionsOnly = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }
            BlobItemInternal deserializedBlobItemInternal = new BlobItemInternal(name, deleted, snapshot, properties);
            deserializedBlobItemInternal.versionId = versionId;
            deserializedBlobItemInternal.isCurrentVersion = isCurrentVersion;
            deserializedBlobItemInternal.metadata = metadata;
            deserializedBlobItemInternal.blobTags = blobTags;
            deserializedBlobItemInternal.objectReplicationMetadata = objectReplicationMetadata;
            deserializedBlobItemInternal.hasVersionsOnly = hasVersionsOnly;

            return deserializedBlobItemInternal;
        });
    }
}
