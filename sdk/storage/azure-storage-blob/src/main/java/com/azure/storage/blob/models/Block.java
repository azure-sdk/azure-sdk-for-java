// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.storage.blob.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Represents a single block in a block blob. It describes the block's ID and size.
 */
@Immutable
public final class Block implements JsonSerializable<Block> {
    /*
     * The base64 encoded block ID.
     */
    @Generated
    private final byte[] name;

    /*
     * The block size in bytes.
     */
    @Generated
    private final long size;

    /**
     * Creates an instance of Block class.
     * 
     * @param name the name value to set.
     * @param size the size value to set.
     */
    @Generated
    private Block(byte[] name, long size) {
        this.name = name;
        this.size = size;
    }

    /**
     * Get the name property: The base64 encoded block ID.
     * 
     * @return the name value.
     */
    @Generated
    public byte[] getName() {
        return CoreUtils.clone(this.name);
    }

    /**
     * Get the size property: The block size in bytes.
     * 
     * @return the size value.
     */
    @Generated
    public long getSize() {
        return this.size;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBinaryField("name", this.name);
        jsonWriter.writeLongField("size", this.size);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Block from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Block if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Block.
     */
    @Generated
    public static Block fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            byte[] name = null;
            long size = 0L;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    name = reader.getBinary();
                } else if ("size".equals(fieldName)) {
                    size = reader.getLong();
                } else {
                    reader.skipChildren();
                }
            }
            return new Block(name, size);
        });
    }
}
