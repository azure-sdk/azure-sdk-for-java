// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.storage.blob.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The properties that enable an account to host a static website.
 */
@Fluent
public final class StaticWebsite implements JsonSerializable<StaticWebsite> {
    /*
     * Indicates whether this account is hosting a static website
     */
    @Generated
    private final boolean enabled;

    /*
     * The index document.
     */
    @Generated
    private String indexDocument;

    /*
     * The error document.
     */
    @Generated
    private String errorDocument404Path;

    /*
     * Absolute path of the default index page
     */
    @Generated
    private String defaultIndexDocumentPath;

    /**
     * Creates an instance of StaticWebsite class.
     * 
     * @param enabled the enabled value to set.
     */
    @Generated
    public StaticWebsite(boolean enabled) {
        this.enabled = enabled;
    }

    /**
     * Get the enabled property: Indicates whether this account is hosting a static website.
     * 
     * @return the enabled value.
     */
    @Generated
    public boolean isEnabled() {
        return this.enabled;
    }

    /**
     * Get the indexDocument property: The index document.
     * 
     * @return the indexDocument value.
     */
    @Generated
    public String getIndexDocument() {
        return this.indexDocument;
    }

    /**
     * Set the indexDocument property: The index document.
     * 
     * @param indexDocument the indexDocument value to set.
     * @return the StaticWebsite object itself.
     */
    @Generated
    public StaticWebsite setIndexDocument(String indexDocument) {
        this.indexDocument = indexDocument;
        return this;
    }

    /**
     * Get the errorDocument404Path property: The error document.
     * 
     * @return the errorDocument404Path value.
     */
    @Generated
    public String getErrorDocument404Path() {
        return this.errorDocument404Path;
    }

    /**
     * Set the errorDocument404Path property: The error document.
     * 
     * @param errorDocument404Path the errorDocument404Path value to set.
     * @return the StaticWebsite object itself.
     */
    @Generated
    public StaticWebsite setErrorDocument404Path(String errorDocument404Path) {
        this.errorDocument404Path = errorDocument404Path;
        return this;
    }

    /**
     * Get the defaultIndexDocumentPath property: Absolute path of the default index page.
     * 
     * @return the defaultIndexDocumentPath value.
     */
    @Generated
    public String getDefaultIndexDocumentPath() {
        return this.defaultIndexDocumentPath;
    }

    /**
     * Set the defaultIndexDocumentPath property: Absolute path of the default index page.
     * 
     * @param defaultIndexDocumentPath the defaultIndexDocumentPath value to set.
     * @return the StaticWebsite object itself.
     */
    @Generated
    public StaticWebsite setDefaultIndexDocumentPath(String defaultIndexDocumentPath) {
        this.defaultIndexDocumentPath = defaultIndexDocumentPath;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("enabled", this.enabled);
        jsonWriter.writeStringField("indexDocument", this.indexDocument);
        jsonWriter.writeStringField("errorDocument404Path", this.errorDocument404Path);
        jsonWriter.writeStringField("defaultIndexDocumentPath", this.defaultIndexDocumentPath);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StaticWebsite from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StaticWebsite if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the StaticWebsite.
     */
    @Generated
    public static StaticWebsite fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            boolean enabled = false;
            String indexDocument = null;
            String errorDocument404Path = null;
            String defaultIndexDocumentPath = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("enabled".equals(fieldName)) {
                    enabled = reader.getBoolean();
                } else if ("indexDocument".equals(fieldName)) {
                    indexDocument = reader.getString();
                } else if ("errorDocument404Path".equals(fieldName)) {
                    errorDocument404Path = reader.getString();
                } else if ("defaultIndexDocumentPath".equals(fieldName)) {
                    defaultIndexDocumentPath = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            StaticWebsite deserializedStaticWebsite = new StaticWebsite(enabled);
            deserializedStaticWebsite.indexDocument = indexDocument;
            deserializedStaticWebsite.errorDocument404Path = errorDocument404Path;
            deserializedStaticWebsite.defaultIndexDocumentPath = defaultIndexDocumentPath;

            return deserializedStaticWebsite;
        });
    }
}
