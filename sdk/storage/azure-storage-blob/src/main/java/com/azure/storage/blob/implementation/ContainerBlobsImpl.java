// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.storage.blob.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.Head;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.storage.blob.BlobServiceVersion;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in ContainerBlobs.
 */
public final class ContainerBlobsImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final ContainerBlobsService service;

    /**
     * The service client containing this operation class.
     */
    private final BlobClientImpl client;

    /**
     * Initializes an instance of ContainerBlobsImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    ContainerBlobsImpl(BlobClientImpl client) {
        this.service
            = RestProxy.create(ContainerBlobsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * Gets Service version.
     * 
     * @return the serviceVersion value.
     */
    public BlobServiceVersion getServiceVersion() {
        return client.getServiceVersion();
    }

    /**
     * The interface defining all the services for BlobClientContainerBlobs to be used by the proxy service to perform
     * REST calls.
     */
    @Host("{url}")
    @ServiceInterface(name = "BlobClientContainerB")
    public interface ContainerBlobsService {
        @Get("/{containerName}/{blobName}")
        @ExpectedResponses({ 200, 206 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> download(@HostParam("url") String url,
            @HeaderParam("x-ms-version") String xMsVersion, @PathParam("containerName") String containerName,
            @PathParam("blobName") String blobName, @HeaderParam("Accept") String accept, RequestOptions requestOptions,
            Context context);

        @Get("/{containerName}/{blobName}")
        @ExpectedResponses({ 200, 206 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> downloadSync(@HostParam("url") String url, @HeaderParam("x-ms-version") String xMsVersion,
            @PathParam("containerName") String containerName, @PathParam("blobName") String blobName,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Head("/{containerName}/{blobName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> getProperties(@HostParam("url") String url,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("x-ms-version") String xMsVersion,
            @PathParam("containerName") String containerName, @PathParam("blobName") String blobName,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Head("/{containerName}/{blobName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> getPropertiesSync(@HostParam("url") String url, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("x-ms-version") String xMsVersion, @PathParam("containerName") String containerName,
            @PathParam("blobName") String blobName, @HeaderParam("Accept") String accept, RequestOptions requestOptions,
            Context context);

        @Delete("/{containerName}/{blobName}")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> delete(@HostParam("url") String url, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("x-ms-version") String xMsVersion, @PathParam("containerName") String containerName,
            @PathParam("blobName") String blobName, @HeaderParam("Accept") String accept, RequestOptions requestOptions,
            Context context);

        @Delete("/{containerName}/{blobName}")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> deleteSync(@HostParam("url") String url, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("x-ms-version") String xMsVersion, @PathParam("containerName") String containerName,
            @PathParam("blobName") String blobName, @HeaderParam("Accept") String accept, RequestOptions requestOptions,
            Context context);

        @Put("/{containerName}/{blobName}?comp=undelete")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> undelete(@HostParam("url") String url, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("x-ms-version") String xMsVersion, @PathParam("containerName") String containerName,
            @PathParam("blobName") String blobName, @HeaderParam("Accept") String accept, RequestOptions requestOptions,
            Context context);

        @Put("/{containerName}/{blobName}?comp=undelete")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> undeleteSync(@HostParam("url") String url, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("x-ms-version") String xMsVersion, @PathParam("containerName") String containerName,
            @PathParam("blobName") String blobName, @HeaderParam("Accept") String accept, RequestOptions requestOptions,
            Context context);

        @Put("/{containerName}/{blobName}?comp=expiry")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> setExpiry(@HostParam("url") String url, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("x-ms-version") String xMsVersion, @PathParam("containerName") String containerName,
            @PathParam("blobName") String blobName, @HeaderParam("x-ms-expiry-option") String expiryOptions,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Put("/{containerName}/{blobName}?comp=expiry")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> setExpirySync(@HostParam("url") String url, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("x-ms-version") String xMsVersion, @PathParam("containerName") String containerName,
            @PathParam("blobName") String blobName, @HeaderParam("x-ms-expiry-option") String expiryOptions,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Put("/{containerName}/{blobName}?comp=properties&SetHTTPHeaders")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> setHttpHeaders(@HostParam("url") String url,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("x-ms-version") String xMsVersion,
            @PathParam("containerName") String containerName, @PathParam("blobName") String blobName,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Put("/{containerName}/{blobName}?comp=properties&SetHTTPHeaders")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> setHttpHeadersSync(@HostParam("url") String url, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("x-ms-version") String xMsVersion, @PathParam("containerName") String containerName,
            @PathParam("blobName") String blobName, @HeaderParam("Accept") String accept, RequestOptions requestOptions,
            Context context);

        @Put("/{containerName}/{blobName}?comp=immutabilityPolicies")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> setImmutabilityPolicy(@HostParam("url") String url,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("x-ms-version") String xMsVersion,
            @PathParam("containerName") String containerName, @PathParam("blobName") String blobName,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Put("/{containerName}/{blobName}?comp=immutabilityPolicies")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> setImmutabilityPolicySync(@HostParam("url") String url,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("x-ms-version") String xMsVersion,
            @PathParam("containerName") String containerName, @PathParam("blobName") String blobName,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Delete("/{containerName}/{blobName}?comp=immutabilityPolicies")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> deleteImmutabilityPolicy(@HostParam("url") String url,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("x-ms-version") String xMsVersion,
            @PathParam("containerName") String containerName, @PathParam("blobName") String blobName,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Delete("/{containerName}/{blobName}?comp=immutabilityPolicies")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> deleteImmutabilityPolicySync(@HostParam("url") String url,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("x-ms-version") String xMsVersion,
            @PathParam("containerName") String containerName, @PathParam("blobName") String blobName,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Put("/{containerName}/{blobName}?comp=legalhold")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> setLegalHold(@HostParam("url") String url, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("x-ms-version") String xMsVersion, @PathParam("containerName") String containerName,
            @PathParam("blobName") String blobName, @HeaderParam("x-ms-legal-hold") boolean legalHold,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Put("/{containerName}/{blobName}?comp=legalhold")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> setLegalHoldSync(@HostParam("url") String url, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("x-ms-version") String xMsVersion, @PathParam("containerName") String containerName,
            @PathParam("blobName") String blobName, @HeaderParam("x-ms-legal-hold") boolean legalHold,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Put("/{containerName}/{blobName}?comp=metadata")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> setMetadata(@HostParam("url") String url, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("x-ms-version") String xMsVersion, @PathParam("containerName") String containerName,
            @PathParam("blobName") String blobName, @HeaderParam("Accept") String accept, RequestOptions requestOptions,
            Context context);

        @Put("/{containerName}/{blobName}?comp=metadata")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> setMetadataSync(@HostParam("url") String url, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("x-ms-version") String xMsVersion, @PathParam("containerName") String containerName,
            @PathParam("blobName") String blobName, @HeaderParam("Accept") String accept, RequestOptions requestOptions,
            Context context);

        @Put("/{containerName}/{blobName}?comp=lease&acquire")
        @ExpectedResponses({ 201 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> acquireLease(@HostParam("url") String url, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("x-ms-version") String xMsVersion, @PathParam("containerName") String containerName,
            @PathParam("blobName") String blobName, @HeaderParam("Accept") String accept, RequestOptions requestOptions,
            Context context);

        @Put("/{containerName}/{blobName}?comp=lease&acquire")
        @ExpectedResponses({ 201 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> acquireLeaseSync(@HostParam("url") String url, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("x-ms-version") String xMsVersion, @PathParam("containerName") String containerName,
            @PathParam("blobName") String blobName, @HeaderParam("Accept") String accept, RequestOptions requestOptions,
            Context context);

        @Put("/{containerName}/{blobName}?comp=lease&release")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> releaseLease(@HostParam("url") String url, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("x-ms-version") String xMsVersion, @PathParam("containerName") String containerName,
            @PathParam("blobName") String blobName, @HeaderParam("x-ms-lease-id") String leaseId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Put("/{containerName}/{blobName}?comp=lease&release")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> releaseLeaseSync(@HostParam("url") String url, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("x-ms-version") String xMsVersion, @PathParam("containerName") String containerName,
            @PathParam("blobName") String blobName, @HeaderParam("x-ms-lease-id") String leaseId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Put("/{containerName}/{blobName}?comp=lease&renew")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> renewLease(@HostParam("url") String url, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("x-ms-version") String xMsVersion, @PathParam("containerName") String containerName,
            @PathParam("blobName") String blobName, @HeaderParam("x-ms-lease-id") String leaseId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Put("/{containerName}/{blobName}?comp=lease&renew")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> renewLeaseSync(@HostParam("url") String url, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("x-ms-version") String xMsVersion, @PathParam("containerName") String containerName,
            @PathParam("blobName") String blobName, @HeaderParam("x-ms-lease-id") String leaseId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Put("/{containerName}/{blobName}?comp=lease&change")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> changeLease(@HostParam("url") String url, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("x-ms-version") String xMsVersion, @PathParam("containerName") String containerName,
            @PathParam("blobName") String blobName, @HeaderParam("x-ms-lease-id") String leaseId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Put("/{containerName}/{blobName}?comp=lease&change")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> changeLeaseSync(@HostParam("url") String url, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("x-ms-version") String xMsVersion, @PathParam("containerName") String containerName,
            @PathParam("blobName") String blobName, @HeaderParam("x-ms-lease-id") String leaseId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Put("/{containerName}/{blobName}?comp=lease&break")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> breakLease(@HostParam("url") String url, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("x-ms-version") String xMsVersion, @PathParam("containerName") String containerName,
            @PathParam("blobName") String blobName, @HeaderParam("Accept") String accept, RequestOptions requestOptions,
            Context context);

        @Put("/{containerName}/{blobName}?comp=lease&break")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> breakLeaseSync(@HostParam("url") String url, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("x-ms-version") String xMsVersion, @PathParam("containerName") String containerName,
            @PathParam("blobName") String blobName, @HeaderParam("Accept") String accept, RequestOptions requestOptions,
            Context context);

        @Put("/{containerName}/{blobName}?comp=snapshot")
        @ExpectedResponses({ 201 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> createSnapshot(@HostParam("url") String url,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("x-ms-version") String xMsVersion,
            @PathParam("containerName") String containerName, @PathParam("blobName") String blobName,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Put("/{containerName}/{blobName}?comp=snapshot")
        @ExpectedResponses({ 201 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> createSnapshotSync(@HostParam("url") String url, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("x-ms-version") String xMsVersion, @PathParam("containerName") String containerName,
            @PathParam("blobName") String blobName, @HeaderParam("Accept") String accept, RequestOptions requestOptions,
            Context context);

        @Put("/{containerName}/{blobName}?comp=copy")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> startCopyFromUrl(@HostParam("url") String url,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("x-ms-version") String xMsVersion,
            @PathParam("containerName") String containerName, @PathParam("blobName") String blobName,
            @HeaderParam("x-ms-copy-source") String copySource, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Put("/{containerName}/{blobName}?comp=copy")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> startCopyFromUrlSync(@HostParam("url") String url,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("x-ms-version") String xMsVersion,
            @PathParam("containerName") String containerName, @PathParam("blobName") String blobName,
            @HeaderParam("x-ms-copy-source") String copySource, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Put("/{containerName}/{blobName}?comp=copy&sync")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> copyFromUrl(@HostParam("url") String url, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("x-ms-version") String xMsVersion, @PathParam("containerName") String containerName,
            @PathParam("blobName") String blobName, @HeaderParam("x-ms-copy-source") String copySource,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Put("/{containerName}/{blobName}?comp=copy&sync")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> copyFromUrlSync(@HostParam("url") String url, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("x-ms-version") String xMsVersion, @PathParam("containerName") String containerName,
            @PathParam("blobName") String blobName, @HeaderParam("x-ms-copy-source") String copySource,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Put("/{containerName}/{blobName}?comp=copy&copyid")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> abortCopyFromUrl(@HostParam("url") String url,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("x-ms-version") String xMsVersion,
            @PathParam("containerName") String containerName, @PathParam("blobName") String blobName,
            @QueryParam("copyid") String copyId, @HeaderParam("Accept") String accept, RequestOptions requestOptions,
            Context context);

        @Put("/{containerName}/{blobName}?comp=copy&copyid")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> abortCopyFromUrlSync(@HostParam("url") String url,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("x-ms-version") String xMsVersion,
            @PathParam("containerName") String containerName, @PathParam("blobName") String blobName,
            @QueryParam("copyid") String copyId, @HeaderParam("Accept") String accept, RequestOptions requestOptions,
            Context context);

        @Put("/{containerName}/{blobName}?comp=tier")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> setTier(@HostParam("url") String url, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("x-ms-version") String xMsVersion, @PathParam("containerName") String containerName,
            @PathParam("blobName") String blobName, @HeaderParam("x-ms-access-tier") String tier,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Put("/{containerName}/{blobName}?comp=tier")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> setTierSync(@HostParam("url") String url, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("x-ms-version") String xMsVersion, @PathParam("containerName") String containerName,
            @PathParam("blobName") String blobName, @HeaderParam("x-ms-access-tier") String tier,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/{containerName}/{blobName}?restype=account&comp=properties&blob")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> getAccountInfo(@HostParam("url") String url,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("x-ms-version") String xMsVersion,
            @PathParam("containerName") String containerName, @PathParam("blobName") String blobName,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/{containerName}/{blobName}?restype=account&comp=properties&blob")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> getAccountInfoSync(@HostParam("url") String url, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("x-ms-version") String xMsVersion, @PathParam("containerName") String containerName,
            @PathParam("blobName") String blobName, @HeaderParam("Accept") String accept, RequestOptions requestOptions,
            Context context);

        @Get("/{containerName}/{blobName}?comp=tags")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getTags(@HostParam("url") String url,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("x-ms-version") String xMsVersion,
            @PathParam("containerName") String containerName, @PathParam("blobName") String blobName,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/{containerName}/{blobName}?comp=tags")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getTagsSync(@HostParam("url") String url, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("x-ms-version") String xMsVersion, @PathParam("containerName") String containerName,
            @PathParam("blobName") String blobName, @HeaderParam("Accept") String accept, RequestOptions requestOptions,
            Context context);

        @Put("/{containerName}/{blobName}?comp=tags")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> setTags(@HostParam("url") String url, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("x-ms-version") String xMsVersion, @PathParam("containerName") String containerName,
            @PathParam("blobName") String blobName, @HeaderParam("Accept") String accept,
            @BodyParam("application/xml") BinaryData tags, RequestOptions requestOptions, Context context);

        @Put("/{containerName}/{blobName}?comp=tags")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> setTagsSync(@HostParam("url") String url, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("x-ms-version") String xMsVersion, @PathParam("containerName") String containerName,
            @PathParam("blobName") String blobName, @HeaderParam("Accept") String accept,
            @BodyParam("application/xml") BinaryData tags, RequestOptions requestOptions, Context context);
    }

    /**
     * The Download operation reads or downloads a blob from the system, including its metadata and properties. You can
     * also call Download to read a snapshot.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>snapshot</td><td>String</td><td>No</td><td>The snapshot parameter is an opaque DateTime value that, when
     * present, specifies the blob snapshot to retrieve. For more information on working with blob snapshots, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob"&gt;Creating
     * a Snapshot of a Blob.&lt;/a&gt;</td></tr>
     * <tr><td>versionid</td><td>String</td><td>No</td><td>The version id parameter is an opaque DateTime value that,
     * when present, specifies the version of the blob to operate on. It's for service version 2019-10-10 and
     * newer.</td></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-range</td><td>String</td><td>No</td><td>Return only the bytes of the blob in the specified
     * range.</td></tr>
     * <tr><td>x-ms-lease-id</td><td>String</td><td>No</td><td>If specified, the operation only succeeds if the
     * resource's lease is active and matches this ID.</td></tr>
     * <tr><td>x-ms-range-get-content-md5</td><td>Boolean</td><td>No</td><td>When set to true and specified together
     * with the Range, the service returns the MD5 hash for the range, as long as the range is less than or equal to 4
     * MB in size.</td></tr>
     * <tr><td>x-ms-range-get-content-crc64</td><td>Boolean</td><td>No</td><td>Optional. When this header is set to true
     * and specified together with the Range header, the service returns the CRC64 hash for the range, as long as the
     * range is less than or equal to 4 MB in size.</td></tr>
     * <tr><td>x-ms-encryption-key</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later. Specifies
     * the encryption key to use to encrypt the data provided in the request. If not specified, the request will be
     * encrypted with the root account key.</td></tr>
     * <tr><td>x-ms-encryption-key-sha256</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later.
     * Specifies the SHA256 hash of the encryption key used to encrypt the data provided in the request. This header is
     * only used for encryption with a customer-provided key. If the request is authenticated with a client token, this
     * header should be specified using the SHA256 hash of the encryption key.</td></tr>
     * <tr><td>x-ms-encryption-algorithm</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later.
     * Specifies the algorithm to use for encryption. If not specified, the default is AES256. Allowed values:
     * "AES256".</td></tr>
     * <tr><td>x-ms-if-tags</td><td>String</td><td>No</td><td>Specify a SQL where clause on blob tags to operate only on
     * blobs with a matching value.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>The request should only proceed if an entity matches this
     * string.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>The request should only proceed if no entity matches this
     * string.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the
     * entity was not modified after this time.</td></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the entity
     * was modified after this time.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * BinaryData
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> downloadWithResponseAsync(RequestOptions requestOptions) {
        final String accept = "application/octet-stream";
        return FluxUtil
            .withContext(context -> service.download(this.client.getUrl(), this.client.getServiceVersion().getVersion(),
                this.client.getContainerName(), this.client.getBlobName(), accept, requestOptions, context));
    }

    /**
     * The Download operation reads or downloads a blob from the system, including its metadata and properties. You can
     * also call Download to read a snapshot.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>snapshot</td><td>String</td><td>No</td><td>The snapshot parameter is an opaque DateTime value that, when
     * present, specifies the blob snapshot to retrieve. For more information on working with blob snapshots, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob"&gt;Creating
     * a Snapshot of a Blob.&lt;/a&gt;</td></tr>
     * <tr><td>versionid</td><td>String</td><td>No</td><td>The version id parameter is an opaque DateTime value that,
     * when present, specifies the version of the blob to operate on. It's for service version 2019-10-10 and
     * newer.</td></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-range</td><td>String</td><td>No</td><td>Return only the bytes of the blob in the specified
     * range.</td></tr>
     * <tr><td>x-ms-lease-id</td><td>String</td><td>No</td><td>If specified, the operation only succeeds if the
     * resource's lease is active and matches this ID.</td></tr>
     * <tr><td>x-ms-range-get-content-md5</td><td>Boolean</td><td>No</td><td>When set to true and specified together
     * with the Range, the service returns the MD5 hash for the range, as long as the range is less than or equal to 4
     * MB in size.</td></tr>
     * <tr><td>x-ms-range-get-content-crc64</td><td>Boolean</td><td>No</td><td>Optional. When this header is set to true
     * and specified together with the Range header, the service returns the CRC64 hash for the range, as long as the
     * range is less than or equal to 4 MB in size.</td></tr>
     * <tr><td>x-ms-encryption-key</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later. Specifies
     * the encryption key to use to encrypt the data provided in the request. If not specified, the request will be
     * encrypted with the root account key.</td></tr>
     * <tr><td>x-ms-encryption-key-sha256</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later.
     * Specifies the SHA256 hash of the encryption key used to encrypt the data provided in the request. This header is
     * only used for encryption with a customer-provided key. If the request is authenticated with a client token, this
     * header should be specified using the SHA256 hash of the encryption key.</td></tr>
     * <tr><td>x-ms-encryption-algorithm</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later.
     * Specifies the algorithm to use for encryption. If not specified, the default is AES256. Allowed values:
     * "AES256".</td></tr>
     * <tr><td>x-ms-if-tags</td><td>String</td><td>No</td><td>Specify a SQL where clause on blob tags to operate only on
     * blobs with a matching value.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>The request should only proceed if an entity matches this
     * string.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>The request should only proceed if no entity matches this
     * string.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the
     * entity was not modified after this time.</td></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the entity
     * was modified after this time.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * BinaryData
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> downloadWithResponse(RequestOptions requestOptions) {
        final String accept = "application/octet-stream";
        return service.downloadSync(this.client.getUrl(), this.client.getServiceVersion().getVersion(),
            this.client.getContainerName(), this.client.getBlobName(), accept, requestOptions, Context.NONE);
    }

    /**
     * The Get Properties operation returns all user-defined metadata, standard HTTP properties, and system properties
     * for the blob. It does not return the content of the blob.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>snapshot</td><td>String</td><td>No</td><td>The snapshot parameter is an opaque DateTime value that, when
     * present, specifies the blob snapshot to retrieve. For more information on working with blob snapshots, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob"&gt;Creating
     * a Snapshot of a Blob.&lt;/a&gt;</td></tr>
     * <tr><td>versionid</td><td>String</td><td>No</td><td>The version id parameter is an opaque DateTime value that,
     * when present, specifies the version of the blob to operate on. It's for service version 2019-10-10 and
     * newer.</td></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-lease-id</td><td>String</td><td>No</td><td>If specified, the operation only succeeds if the
     * resource's lease is active and matches this ID.</td></tr>
     * <tr><td>x-ms-encryption-key</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later. Specifies
     * the encryption key to use to encrypt the data provided in the request. If not specified, the request will be
     * encrypted with the root account key.</td></tr>
     * <tr><td>x-ms-encryption-key-sha256</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later.
     * Specifies the SHA256 hash of the encryption key used to encrypt the data provided in the request. This header is
     * only used for encryption with a customer-provided key. If the request is authenticated with a client token, this
     * header should be specified using the SHA256 hash of the encryption key.</td></tr>
     * <tr><td>x-ms-encryption-algorithm</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later.
     * Specifies the algorithm to use for encryption. If not specified, the default is AES256. Allowed values:
     * "AES256".</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>The request should only proceed if an entity matches this
     * string.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>The request should only proceed if no entity matches this
     * string.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the
     * entity was not modified after this time.</td></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the entity
     * was modified after this time.</td></tr>
     * <tr><td>x-ms-if-tags</td><td>String</td><td>No</td><td>Specify a SQL where clause on blob tags to operate only on
     * blobs with a matching value.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> getPropertiesWithResponseAsync(RequestOptions requestOptions) {
        final String contentType = "application/octet-stream";
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getProperties(this.client.getUrl(), contentType,
            this.client.getServiceVersion().getVersion(), this.client.getContainerName(), this.client.getBlobName(),
            accept, requestOptions, context));
    }

    /**
     * The Get Properties operation returns all user-defined metadata, standard HTTP properties, and system properties
     * for the blob. It does not return the content of the blob.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>snapshot</td><td>String</td><td>No</td><td>The snapshot parameter is an opaque DateTime value that, when
     * present, specifies the blob snapshot to retrieve. For more information on working with blob snapshots, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob"&gt;Creating
     * a Snapshot of a Blob.&lt;/a&gt;</td></tr>
     * <tr><td>versionid</td><td>String</td><td>No</td><td>The version id parameter is an opaque DateTime value that,
     * when present, specifies the version of the blob to operate on. It's for service version 2019-10-10 and
     * newer.</td></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-lease-id</td><td>String</td><td>No</td><td>If specified, the operation only succeeds if the
     * resource's lease is active and matches this ID.</td></tr>
     * <tr><td>x-ms-encryption-key</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later. Specifies
     * the encryption key to use to encrypt the data provided in the request. If not specified, the request will be
     * encrypted with the root account key.</td></tr>
     * <tr><td>x-ms-encryption-key-sha256</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later.
     * Specifies the SHA256 hash of the encryption key used to encrypt the data provided in the request. This header is
     * only used for encryption with a customer-provided key. If the request is authenticated with a client token, this
     * header should be specified using the SHA256 hash of the encryption key.</td></tr>
     * <tr><td>x-ms-encryption-algorithm</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later.
     * Specifies the algorithm to use for encryption. If not specified, the default is AES256. Allowed values:
     * "AES256".</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>The request should only proceed if an entity matches this
     * string.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>The request should only proceed if no entity matches this
     * string.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the
     * entity was not modified after this time.</td></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the entity
     * was modified after this time.</td></tr>
     * <tr><td>x-ms-if-tags</td><td>String</td><td>No</td><td>Specify a SQL where clause on blob tags to operate only on
     * blobs with a matching value.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> getPropertiesWithResponse(RequestOptions requestOptions) {
        final String contentType = "application/octet-stream";
        final String accept = "application/json";
        return service.getPropertiesSync(this.client.getUrl(), contentType,
            this.client.getServiceVersion().getVersion(), this.client.getContainerName(), this.client.getBlobName(),
            accept, requestOptions, Context.NONE);
    }

    /**
     * If the storage account's soft delete feature is disabled then, when a blob is deleted, it is permanently removed
     * from the storage account. If the storage account's soft delete feature is enabled, then, when a blob is deleted,
     * it is marked for deletion and becomes inaccessible immediately. However, the blob service retains the blob or
     * snapshot for the number of days specified by the DeleteRetentionPolicy section of [Storage service properties]
     * (Set-Blob-Service-Properties.md). After the specified number of days has passed, the blob's data is permanently
     * removed from the storage account. Note that you continue to be charged for the soft-deleted blob's storage until
     * it is permanently removed. Use the List Blobs API and specify the \"include=deleted\" query parameter to discover
     * which blobs and snapshots have been soft deleted. You can then use the Undelete Blob API to restore a
     * soft-deleted blob. All other operations on a soft-deleted blob or snapshot causes the service to return an HTTP
     * status code of 404 (ResourceNotFound).
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>snapshot</td><td>String</td><td>No</td><td>The snapshot parameter is an opaque DateTime value that, when
     * present, specifies the blob snapshot to retrieve. For more information on working with blob snapshots, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob"&gt;Creating
     * a Snapshot of a Blob.&lt;/a&gt;</td></tr>
     * <tr><td>versionid</td><td>String</td><td>No</td><td>The version id parameter is an opaque DateTime value that,
     * when present, specifies the version of the blob to operate on. It's for service version 2019-10-10 and
     * newer.</td></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * <tr><td>deletetype</td><td>String</td><td>No</td><td>Optional. Only possible value is 'permanent', which
     * specifies to permanently delete a blob if blob soft delete is enabled. Allowed values: "Permanent".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-lease-id</td><td>String</td><td>No</td><td>If specified, the operation only succeeds if the
     * resource's lease is active and matches this ID.</td></tr>
     * <tr><td>x-ms-delete-snapshots</td><td>String</td><td>No</td><td>Required if the blob has associated snapshots.
     * Specify one of the following two options: include: Delete the base blob and all of its snapshots. only: Delete
     * only the blob's snapshots and not the blob itself. Allowed values: "only", "include".</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>The request should only proceed if an entity matches this
     * string.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>The request should only proceed if no entity matches this
     * string.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the
     * entity was not modified after this time.</td></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the entity
     * was modified after this time.</td></tr>
     * <tr><td>x-ms-if-tags</td><td>String</td><td>No</td><td>Specify a SQL where clause on blob tags to operate only on
     * blobs with a matching value.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteWithResponseAsync(RequestOptions requestOptions) {
        final String contentType = "application/xml";
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.delete(this.client.getUrl(), contentType, this.client.getServiceVersion().getVersion(),
                this.client.getContainerName(), this.client.getBlobName(), accept, requestOptions, context));
    }

    /**
     * If the storage account's soft delete feature is disabled then, when a blob is deleted, it is permanently removed
     * from the storage account. If the storage account's soft delete feature is enabled, then, when a blob is deleted,
     * it is marked for deletion and becomes inaccessible immediately. However, the blob service retains the blob or
     * snapshot for the number of days specified by the DeleteRetentionPolicy section of [Storage service properties]
     * (Set-Blob-Service-Properties.md). After the specified number of days has passed, the blob's data is permanently
     * removed from the storage account. Note that you continue to be charged for the soft-deleted blob's storage until
     * it is permanently removed. Use the List Blobs API and specify the \"include=deleted\" query parameter to discover
     * which blobs and snapshots have been soft deleted. You can then use the Undelete Blob API to restore a
     * soft-deleted blob. All other operations on a soft-deleted blob or snapshot causes the service to return an HTTP
     * status code of 404 (ResourceNotFound).
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>snapshot</td><td>String</td><td>No</td><td>The snapshot parameter is an opaque DateTime value that, when
     * present, specifies the blob snapshot to retrieve. For more information on working with blob snapshots, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob"&gt;Creating
     * a Snapshot of a Blob.&lt;/a&gt;</td></tr>
     * <tr><td>versionid</td><td>String</td><td>No</td><td>The version id parameter is an opaque DateTime value that,
     * when present, specifies the version of the blob to operate on. It's for service version 2019-10-10 and
     * newer.</td></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * <tr><td>deletetype</td><td>String</td><td>No</td><td>Optional. Only possible value is 'permanent', which
     * specifies to permanently delete a blob if blob soft delete is enabled. Allowed values: "Permanent".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-lease-id</td><td>String</td><td>No</td><td>If specified, the operation only succeeds if the
     * resource's lease is active and matches this ID.</td></tr>
     * <tr><td>x-ms-delete-snapshots</td><td>String</td><td>No</td><td>Required if the blob has associated snapshots.
     * Specify one of the following two options: include: Delete the base blob and all of its snapshots. only: Delete
     * only the blob's snapshots and not the blob itself. Allowed values: "only", "include".</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>The request should only proceed if an entity matches this
     * string.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>The request should only proceed if no entity matches this
     * string.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the
     * entity was not modified after this time.</td></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the entity
     * was modified after this time.</td></tr>
     * <tr><td>x-ms-if-tags</td><td>String</td><td>No</td><td>Specify a SQL where clause on blob tags to operate only on
     * blobs with a matching value.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(RequestOptions requestOptions) {
        final String contentType = "application/xml";
        final String accept = "application/json";
        return service.deleteSync(this.client.getUrl(), contentType, this.client.getServiceVersion().getVersion(),
            this.client.getContainerName(), this.client.getBlobName(), accept, requestOptions, Context.NONE);
    }

    /**
     * Undelete a blob that was previously soft deleted.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> undeleteWithResponseAsync(RequestOptions requestOptions) {
        final String contentType = "application/xml";
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.undelete(this.client.getUrl(), contentType, this.client.getServiceVersion().getVersion(),
                this.client.getContainerName(), this.client.getBlobName(), accept, requestOptions, context));
    }

    /**
     * Undelete a blob that was previously soft deleted.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> undeleteWithResponse(RequestOptions requestOptions) {
        final String contentType = "application/xml";
        final String accept = "application/json";
        return service.undeleteSync(this.client.getUrl(), contentType, this.client.getServiceVersion().getVersion(),
            this.client.getContainerName(), this.client.getBlobName(), accept, requestOptions, Context.NONE);
    }

    /**
     * Set the expiration time of a blob.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-expiry-time</td><td>OffsetDateTime</td><td>No</td><td>The time this blob will expire.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param expiryOptions Required. Indicates mode of the expiry time. Allowed values: "NeverExpire",
     * "RelativeToCreation", "RelativeToNow", "Absolute".
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> setExpiryWithResponseAsync(String expiryOptions, RequestOptions requestOptions) {
        final String contentType = "application/xml";
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.setExpiry(this.client.getUrl(), contentType,
            this.client.getServiceVersion().getVersion(), this.client.getContainerName(), this.client.getBlobName(),
            expiryOptions, accept, requestOptions, context));
    }

    /**
     * Set the expiration time of a blob.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-expiry-time</td><td>OffsetDateTime</td><td>No</td><td>The time this blob will expire.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param expiryOptions Required. Indicates mode of the expiry time. Allowed values: "NeverExpire",
     * "RelativeToCreation", "RelativeToNow", "Absolute".
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> setExpiryWithResponse(String expiryOptions, RequestOptions requestOptions) {
        final String contentType = "application/xml";
        final String accept = "application/json";
        return service.setExpirySync(this.client.getUrl(), contentType, this.client.getServiceVersion().getVersion(),
            this.client.getContainerName(), this.client.getBlobName(), expiryOptions, accept, requestOptions,
            Context.NONE);
    }

    /**
     * The Set HTTP Headers operation sets system properties on the blob.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-blob-cache-control</td><td>String</td><td>No</td><td>Optional. Sets the blob's cache control. If
     * specified, this property is stored with the blob and returned with a read request.</td></tr>
     * <tr><td>x-ms-blob-content-type</td><td>String</td><td>No</td><td>Optional. Sets the blob's content type. If
     * specified, this property is stored with the blob and returned with a read request.</td></tr>
     * <tr><td>x-ms-blob-content-md5</td><td>byte[]</td><td>No</td><td>Optional. An MD5 hash of the blob content. Note
     * that this hash is not validated, as the hashes for the individual blocks were validated when each was
     * uploaded.</td></tr>
     * <tr><td>x-ms-blob-content-encoding</td><td>String</td><td>No</td><td>Optional. Sets the blob's content encoding.
     * If specified, this property is stored with the blob and returned with a read request.</td></tr>
     * <tr><td>x-ms-blob-content-language</td><td>String</td><td>No</td><td>Optional. Set the blob's content language.
     * If specified, this property is stored with the blob and returned with a read request.</td></tr>
     * <tr><td>x-ms-lease-id</td><td>String</td><td>No</td><td>If specified, the operation only succeeds if the
     * resource's lease is active and matches this ID.</td></tr>
     * <tr><td>x-ms-blob-content-disposition</td><td>String</td><td>No</td><td>Optional. Sets the blob's content
     * disposition. If specified, this property is stored with the blob and returned with a read request.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>The request should only proceed if an entity matches this
     * string.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>The request should only proceed if no entity matches this
     * string.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the
     * entity was not modified after this time.</td></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the entity
     * was modified after this time.</td></tr>
     * <tr><td>x-ms-if-tags</td><td>String</td><td>No</td><td>Specify a SQL where clause on blob tags to operate only on
     * blobs with a matching value.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> setHttpHeadersWithResponseAsync(RequestOptions requestOptions) {
        final String contentType = "application/xml";
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.setHttpHeaders(this.client.getUrl(), contentType,
            this.client.getServiceVersion().getVersion(), this.client.getContainerName(), this.client.getBlobName(),
            accept, requestOptions, context));
    }

    /**
     * The Set HTTP Headers operation sets system properties on the blob.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-blob-cache-control</td><td>String</td><td>No</td><td>Optional. Sets the blob's cache control. If
     * specified, this property is stored with the blob and returned with a read request.</td></tr>
     * <tr><td>x-ms-blob-content-type</td><td>String</td><td>No</td><td>Optional. Sets the blob's content type. If
     * specified, this property is stored with the blob and returned with a read request.</td></tr>
     * <tr><td>x-ms-blob-content-md5</td><td>byte[]</td><td>No</td><td>Optional. An MD5 hash of the blob content. Note
     * that this hash is not validated, as the hashes for the individual blocks were validated when each was
     * uploaded.</td></tr>
     * <tr><td>x-ms-blob-content-encoding</td><td>String</td><td>No</td><td>Optional. Sets the blob's content encoding.
     * If specified, this property is stored with the blob and returned with a read request.</td></tr>
     * <tr><td>x-ms-blob-content-language</td><td>String</td><td>No</td><td>Optional. Set the blob's content language.
     * If specified, this property is stored with the blob and returned with a read request.</td></tr>
     * <tr><td>x-ms-lease-id</td><td>String</td><td>No</td><td>If specified, the operation only succeeds if the
     * resource's lease is active and matches this ID.</td></tr>
     * <tr><td>x-ms-blob-content-disposition</td><td>String</td><td>No</td><td>Optional. Sets the blob's content
     * disposition. If specified, this property is stored with the blob and returned with a read request.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>The request should only proceed if an entity matches this
     * string.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>The request should only proceed if no entity matches this
     * string.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the
     * entity was not modified after this time.</td></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the entity
     * was modified after this time.</td></tr>
     * <tr><td>x-ms-if-tags</td><td>String</td><td>No</td><td>Specify a SQL where clause on blob tags to operate only on
     * blobs with a matching value.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> setHttpHeadersWithResponse(RequestOptions requestOptions) {
        final String contentType = "application/xml";
        final String accept = "application/json";
        return service.setHttpHeadersSync(this.client.getUrl(), contentType,
            this.client.getServiceVersion().getVersion(), this.client.getContainerName(), this.client.getBlobName(),
            accept, requestOptions, Context.NONE);
    }

    /**
     * Set the immutability policy of a blob.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * <tr><td>snapshot</td><td>String</td><td>No</td><td>The snapshot parameter is an opaque DateTime value that, when
     * present, specifies the blob snapshot to retrieve. For more information on working with blob snapshots, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob"&gt;Creating
     * a Snapshot of a Blob.&lt;/a&gt;</td></tr>
     * <tr><td>versionid</td><td>String</td><td>No</td><td>The version id parameter is an opaque DateTime value that,
     * when present, specifies the version of the blob to operate on. It's for service version 2019-10-10 and
     * newer.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>A date-time value. A request is made under
     * the condition that the resource has not been modified since the specified date-time.</td></tr>
     * <tr><td>x-ms-immutability-policy-until-date</td><td>OffsetDateTime</td><td>No</td><td>Specifies the date time
     * when the blobs immutability policy is set to expire.</td></tr>
     * <tr><td>x-ms-immutability-policy-mode</td><td>String</td><td>No</td><td>Specifies the immutability policy mode to
     * set on the blob. Allowed values: "Mutable", "Locked", "Unlocked".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> setImmutabilityPolicyWithResponseAsync(RequestOptions requestOptions) {
        final String contentType = "application/xml";
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.setImmutabilityPolicy(this.client.getUrl(), contentType,
            this.client.getServiceVersion().getVersion(), this.client.getContainerName(), this.client.getBlobName(),
            accept, requestOptions, context));
    }

    /**
     * Set the immutability policy of a blob.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * <tr><td>snapshot</td><td>String</td><td>No</td><td>The snapshot parameter is an opaque DateTime value that, when
     * present, specifies the blob snapshot to retrieve. For more information on working with blob snapshots, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob"&gt;Creating
     * a Snapshot of a Blob.&lt;/a&gt;</td></tr>
     * <tr><td>versionid</td><td>String</td><td>No</td><td>The version id parameter is an opaque DateTime value that,
     * when present, specifies the version of the blob to operate on. It's for service version 2019-10-10 and
     * newer.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>A date-time value. A request is made under
     * the condition that the resource has not been modified since the specified date-time.</td></tr>
     * <tr><td>x-ms-immutability-policy-until-date</td><td>OffsetDateTime</td><td>No</td><td>Specifies the date time
     * when the blobs immutability policy is set to expire.</td></tr>
     * <tr><td>x-ms-immutability-policy-mode</td><td>String</td><td>No</td><td>Specifies the immutability policy mode to
     * set on the blob. Allowed values: "Mutable", "Locked", "Unlocked".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> setImmutabilityPolicyWithResponse(RequestOptions requestOptions) {
        final String contentType = "application/xml";
        final String accept = "application/json";
        return service.setImmutabilityPolicySync(this.client.getUrl(), contentType,
            this.client.getServiceVersion().getVersion(), this.client.getContainerName(), this.client.getBlobName(),
            accept, requestOptions, Context.NONE);
    }

    /**
     * The Delete Immutability Policy operation deletes the immutability policy on the blob.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * <tr><td>snapshot</td><td>String</td><td>No</td><td>The snapshot parameter is an opaque DateTime value that, when
     * present, specifies the blob snapshot to retrieve. For more information on working with blob snapshots, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob"&gt;Creating
     * a Snapshot of a Blob.&lt;/a&gt;</td></tr>
     * <tr><td>versionid</td><td>String</td><td>No</td><td>The version id parameter is an opaque DateTime value that,
     * when present, specifies the version of the blob to operate on. It's for service version 2019-10-10 and
     * newer.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteImmutabilityPolicyWithResponseAsync(RequestOptions requestOptions) {
        final String contentType = "application/xml";
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.deleteImmutabilityPolicy(this.client.getUrl(), contentType,
            this.client.getServiceVersion().getVersion(), this.client.getContainerName(), this.client.getBlobName(),
            accept, requestOptions, context));
    }

    /**
     * The Delete Immutability Policy operation deletes the immutability policy on the blob.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * <tr><td>snapshot</td><td>String</td><td>No</td><td>The snapshot parameter is an opaque DateTime value that, when
     * present, specifies the blob snapshot to retrieve. For more information on working with blob snapshots, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob"&gt;Creating
     * a Snapshot of a Blob.&lt;/a&gt;</td></tr>
     * <tr><td>versionid</td><td>String</td><td>No</td><td>The version id parameter is an opaque DateTime value that,
     * when present, specifies the version of the blob to operate on. It's for service version 2019-10-10 and
     * newer.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteImmutabilityPolicyWithResponse(RequestOptions requestOptions) {
        final String contentType = "application/xml";
        final String accept = "application/json";
        return service.deleteImmutabilityPolicySync(this.client.getUrl(), contentType,
            this.client.getServiceVersion().getVersion(), this.client.getContainerName(), this.client.getBlobName(),
            accept, requestOptions, Context.NONE);
    }

    /**
     * The Set Legal Hold operation sets a legal hold on the blob.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * <tr><td>snapshot</td><td>String</td><td>No</td><td>The snapshot parameter is an opaque DateTime value that, when
     * present, specifies the blob snapshot to retrieve. For more information on working with blob snapshots, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob"&gt;Creating
     * a Snapshot of a Blob.&lt;/a&gt;</td></tr>
     * <tr><td>versionid</td><td>String</td><td>No</td><td>The version id parameter is an opaque DateTime value that,
     * when present, specifies the version of the blob to operate on. It's for service version 2019-10-10 and
     * newer.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * 
     * @param legalHold Required. Specifies the legal hold status to set on the blob.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> setLegalHoldWithResponseAsync(boolean legalHold, RequestOptions requestOptions) {
        final String contentType = "application/xml";
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.setLegalHold(this.client.getUrl(), contentType,
            this.client.getServiceVersion().getVersion(), this.client.getContainerName(), this.client.getBlobName(),
            legalHold, accept, requestOptions, context));
    }

    /**
     * The Set Legal Hold operation sets a legal hold on the blob.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * <tr><td>snapshot</td><td>String</td><td>No</td><td>The snapshot parameter is an opaque DateTime value that, when
     * present, specifies the blob snapshot to retrieve. For more information on working with blob snapshots, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob"&gt;Creating
     * a Snapshot of a Blob.&lt;/a&gt;</td></tr>
     * <tr><td>versionid</td><td>String</td><td>No</td><td>The version id parameter is an opaque DateTime value that,
     * when present, specifies the version of the blob to operate on. It's for service version 2019-10-10 and
     * newer.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * 
     * @param legalHold Required. Specifies the legal hold status to set on the blob.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> setLegalHoldWithResponse(boolean legalHold, RequestOptions requestOptions) {
        final String contentType = "application/xml";
        final String accept = "application/json";
        return service.setLegalHoldSync(this.client.getUrl(), contentType, this.client.getServiceVersion().getVersion(),
            this.client.getContainerName(), this.client.getBlobName(), legalHold, accept, requestOptions, Context.NONE);
    }

    /**
     * The Set Metadata operation sets user-defined metadata for the specified blob as one or more name-value pairs.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-meta</td><td>Map&lt;String, String&gt;</td><td>No</td><td>The metadata headers.</td></tr>
     * <tr><td>x-ms-lease-id</td><td>String</td><td>No</td><td>If specified, the operation only succeeds if the
     * resource's lease is active and matches this ID.</td></tr>
     * <tr><td>x-ms-encryption-key</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later. Specifies
     * the encryption key to use to encrypt the data provided in the request. If not specified, the request will be
     * encrypted with the root account key.</td></tr>
     * <tr><td>x-ms-encryption-key-sha256</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later.
     * Specifies the SHA256 hash of the encryption key used to encrypt the data provided in the request. This header is
     * only used for encryption with a customer-provided key. If the request is authenticated with a client token, this
     * header should be specified using the SHA256 hash of the encryption key.</td></tr>
     * <tr><td>x-ms-encryption-algorithm</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later.
     * Specifies the algorithm to use for encryption. If not specified, the default is AES256. Allowed values:
     * "AES256".</td></tr>
     * <tr><td>x-ms-encryption-scope</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later. Specifies
     * the encryption scope to use to encrypt the data provided in the request. If not specified, the request will be
     * encrypted with the root account key.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>The request should only proceed if an entity matches this
     * string.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>The request should only proceed if no entity matches this
     * string.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the
     * entity was not modified after this time.</td></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the entity
     * was modified after this time.</td></tr>
     * <tr><td>x-ms-if-tags</td><td>String</td><td>No</td><td>Specify a SQL where clause on blob tags to operate only on
     * blobs with a matching value.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> setMetadataWithResponseAsync(RequestOptions requestOptions) {
        final String contentType = "application/xml";
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.setMetadata(this.client.getUrl(), contentType,
            this.client.getServiceVersion().getVersion(), this.client.getContainerName(), this.client.getBlobName(),
            accept, requestOptions, context));
    }

    /**
     * The Set Metadata operation sets user-defined metadata for the specified blob as one or more name-value pairs.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-meta</td><td>Map&lt;String, String&gt;</td><td>No</td><td>The metadata headers.</td></tr>
     * <tr><td>x-ms-lease-id</td><td>String</td><td>No</td><td>If specified, the operation only succeeds if the
     * resource's lease is active and matches this ID.</td></tr>
     * <tr><td>x-ms-encryption-key</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later. Specifies
     * the encryption key to use to encrypt the data provided in the request. If not specified, the request will be
     * encrypted with the root account key.</td></tr>
     * <tr><td>x-ms-encryption-key-sha256</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later.
     * Specifies the SHA256 hash of the encryption key used to encrypt the data provided in the request. This header is
     * only used for encryption with a customer-provided key. If the request is authenticated with a client token, this
     * header should be specified using the SHA256 hash of the encryption key.</td></tr>
     * <tr><td>x-ms-encryption-algorithm</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later.
     * Specifies the algorithm to use for encryption. If not specified, the default is AES256. Allowed values:
     * "AES256".</td></tr>
     * <tr><td>x-ms-encryption-scope</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later. Specifies
     * the encryption scope to use to encrypt the data provided in the request. If not specified, the request will be
     * encrypted with the root account key.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>The request should only proceed if an entity matches this
     * string.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>The request should only proceed if no entity matches this
     * string.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the
     * entity was not modified after this time.</td></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the entity
     * was modified after this time.</td></tr>
     * <tr><td>x-ms-if-tags</td><td>String</td><td>No</td><td>Specify a SQL where clause on blob tags to operate only on
     * blobs with a matching value.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> setMetadataWithResponse(RequestOptions requestOptions) {
        final String contentType = "application/xml";
        final String accept = "application/json";
        return service.setMetadataSync(this.client.getUrl(), contentType, this.client.getServiceVersion().getVersion(),
            this.client.getContainerName(), this.client.getBlobName(), accept, requestOptions, Context.NONE);
    }

    /**
     * The Acquire Lease operation requests a new lease on a blob. The lease lock duration can be 15 to 60 seconds, or
     * can be infinite.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-lease-duration</td><td>Integer</td><td>No</td><td>Specifies the duration of the lease, in seconds,
     * or negative one (-1) for a lease that never expires. A non-infinite lease can be between 15 and 60 seconds. A
     * lease duration cannot be changed using renew or change.</td></tr>
     * <tr><td>x-ms-proposed-lease-id</td><td>String</td><td>No</td><td>Optional. The proposed lease ID for the
     * container.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>The request should only proceed if an entity matches this
     * string.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>The request should only proceed if no entity matches this
     * string.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the
     * entity was not modified after this time.</td></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the entity
     * was modified after this time.</td></tr>
     * <tr><td>x-ms-if-tags</td><td>String</td><td>No</td><td>Specify a SQL where clause on blob tags to operate only on
     * blobs with a matching value.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> acquireLeaseWithResponseAsync(RequestOptions requestOptions) {
        final String contentType = "application/xml";
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.acquireLease(this.client.getUrl(), contentType,
            this.client.getServiceVersion().getVersion(), this.client.getContainerName(), this.client.getBlobName(),
            accept, requestOptions, context));
    }

    /**
     * The Acquire Lease operation requests a new lease on a blob. The lease lock duration can be 15 to 60 seconds, or
     * can be infinite.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-lease-duration</td><td>Integer</td><td>No</td><td>Specifies the duration of the lease, in seconds,
     * or negative one (-1) for a lease that never expires. A non-infinite lease can be between 15 and 60 seconds. A
     * lease duration cannot be changed using renew or change.</td></tr>
     * <tr><td>x-ms-proposed-lease-id</td><td>String</td><td>No</td><td>Optional. The proposed lease ID for the
     * container.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>The request should only proceed if an entity matches this
     * string.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>The request should only proceed if no entity matches this
     * string.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the
     * entity was not modified after this time.</td></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the entity
     * was modified after this time.</td></tr>
     * <tr><td>x-ms-if-tags</td><td>String</td><td>No</td><td>Specify a SQL where clause on blob tags to operate only on
     * blobs with a matching value.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> acquireLeaseWithResponse(RequestOptions requestOptions) {
        final String contentType = "application/xml";
        final String accept = "application/json";
        return service.acquireLeaseSync(this.client.getUrl(), contentType, this.client.getServiceVersion().getVersion(),
            this.client.getContainerName(), this.client.getBlobName(), accept, requestOptions, Context.NONE);
    }

    /**
     * The Release Lease operation frees the lease if it's no longer needed, so that another client can immediately
     * acquire a lease against the blob.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>The request should only proceed if an entity matches this
     * string.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>The request should only proceed if no entity matches this
     * string.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the
     * entity was not modified after this time.</td></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the entity
     * was modified after this time.</td></tr>
     * <tr><td>x-ms-if-tags</td><td>String</td><td>No</td><td>Specify a SQL where clause on blob tags to operate only on
     * blobs with a matching value.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param leaseId Required. A lease ID for the source path. If specified, the source path must have an active lease
     * and the lease ID must match.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> releaseLeaseWithResponseAsync(String leaseId, RequestOptions requestOptions) {
        final String contentType = "application/xml";
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.releaseLease(this.client.getUrl(), contentType,
            this.client.getServiceVersion().getVersion(), this.client.getContainerName(), this.client.getBlobName(),
            leaseId, accept, requestOptions, context));
    }

    /**
     * The Release Lease operation frees the lease if it's no longer needed, so that another client can immediately
     * acquire a lease against the blob.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>The request should only proceed if an entity matches this
     * string.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>The request should only proceed if no entity matches this
     * string.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the
     * entity was not modified after this time.</td></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the entity
     * was modified after this time.</td></tr>
     * <tr><td>x-ms-if-tags</td><td>String</td><td>No</td><td>Specify a SQL where clause on blob tags to operate only on
     * blobs with a matching value.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param leaseId Required. A lease ID for the source path. If specified, the source path must have an active lease
     * and the lease ID must match.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> releaseLeaseWithResponse(String leaseId, RequestOptions requestOptions) {
        final String contentType = "application/xml";
        final String accept = "application/json";
        return service.releaseLeaseSync(this.client.getUrl(), contentType, this.client.getServiceVersion().getVersion(),
            this.client.getContainerName(), this.client.getBlobName(), leaseId, accept, requestOptions, Context.NONE);
    }

    /**
     * The Renew Lease operation renews an existing lease.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>The request should only proceed if an entity matches this
     * string.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>The request should only proceed if no entity matches this
     * string.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the
     * entity was not modified after this time.</td></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the entity
     * was modified after this time.</td></tr>
     * <tr><td>x-ms-if-tags</td><td>String</td><td>No</td><td>Specify a SQL where clause on blob tags to operate only on
     * blobs with a matching value.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param leaseId Required. A lease ID for the source path. If specified, the source path must have an active lease
     * and the lease ID must match.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> renewLeaseWithResponseAsync(String leaseId, RequestOptions requestOptions) {
        final String contentType = "application/xml";
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.renewLease(this.client.getUrl(), contentType,
            this.client.getServiceVersion().getVersion(), this.client.getContainerName(), this.client.getBlobName(),
            leaseId, accept, requestOptions, context));
    }

    /**
     * The Renew Lease operation renews an existing lease.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>The request should only proceed if an entity matches this
     * string.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>The request should only proceed if no entity matches this
     * string.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the
     * entity was not modified after this time.</td></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the entity
     * was modified after this time.</td></tr>
     * <tr><td>x-ms-if-tags</td><td>String</td><td>No</td><td>Specify a SQL where clause on blob tags to operate only on
     * blobs with a matching value.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param leaseId Required. A lease ID for the source path. If specified, the source path must have an active lease
     * and the lease ID must match.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> renewLeaseWithResponse(String leaseId, RequestOptions requestOptions) {
        final String contentType = "application/xml";
        final String accept = "application/json";
        return service.renewLeaseSync(this.client.getUrl(), contentType, this.client.getServiceVersion().getVersion(),
            this.client.getContainerName(), this.client.getBlobName(), leaseId, accept, requestOptions, Context.NONE);
    }

    /**
     * The Change Lease operation is used to change the ID of an existing lease.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-proposed-lease-id</td><td>String</td><td>No</td><td>Optional. The proposed lease ID for the
     * container.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>The request should only proceed if an entity matches this
     * string.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>The request should only proceed if no entity matches this
     * string.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the
     * entity was not modified after this time.</td></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the entity
     * was modified after this time.</td></tr>
     * <tr><td>x-ms-if-tags</td><td>String</td><td>No</td><td>Specify a SQL where clause on blob tags to operate only on
     * blobs with a matching value.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param leaseId Required. A lease ID for the source path. If specified, the source path must have an active lease
     * and the lease ID must match.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> changeLeaseWithResponseAsync(String leaseId, RequestOptions requestOptions) {
        final String contentType = "application/xml";
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.changeLease(this.client.getUrl(), contentType,
            this.client.getServiceVersion().getVersion(), this.client.getContainerName(), this.client.getBlobName(),
            leaseId, accept, requestOptions, context));
    }

    /**
     * The Change Lease operation is used to change the ID of an existing lease.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-proposed-lease-id</td><td>String</td><td>No</td><td>Optional. The proposed lease ID for the
     * container.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>The request should only proceed if an entity matches this
     * string.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>The request should only proceed if no entity matches this
     * string.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the
     * entity was not modified after this time.</td></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the entity
     * was modified after this time.</td></tr>
     * <tr><td>x-ms-if-tags</td><td>String</td><td>No</td><td>Specify a SQL where clause on blob tags to operate only on
     * blobs with a matching value.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param leaseId Required. A lease ID for the source path. If specified, the source path must have an active lease
     * and the lease ID must match.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> changeLeaseWithResponse(String leaseId, RequestOptions requestOptions) {
        final String contentType = "application/xml";
        final String accept = "application/json";
        return service.changeLeaseSync(this.client.getUrl(), contentType, this.client.getServiceVersion().getVersion(),
            this.client.getContainerName(), this.client.getBlobName(), leaseId, accept, requestOptions, Context.NONE);
    }

    /**
     * The Break Lease operation ends a lease and ensures that another client can't acquire a new lease until the
     * current lease period has expired.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-lease-break-period</td><td>Integer</td><td>No</td><td>For a break operation, proposed duration the
     * lease should continue before it is broken, in seconds, between 0 and 60. This break period is only used if it is
     * shorter than the time remaining on the lease. If longer, the time remaining on the lease is used. A new lease
     * will not be available before the break period has expired, but the lease may be held for longer than the break
     * period. If this header does not appear with a break operation, a fixed-duration lease breaks after the remaining
     * lease period elapses, and an infinite lease breaks immediately.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>The request should only proceed if an entity matches this
     * string.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>The request should only proceed if no entity matches this
     * string.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the
     * entity was not modified after this time.</td></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the entity
     * was modified after this time.</td></tr>
     * <tr><td>x-ms-if-tags</td><td>String</td><td>No</td><td>Specify a SQL where clause on blob tags to operate only on
     * blobs with a matching value.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> breakLeaseWithResponseAsync(RequestOptions requestOptions) {
        final String contentType = "application/xml";
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.breakLease(this.client.getUrl(), contentType,
            this.client.getServiceVersion().getVersion(), this.client.getContainerName(), this.client.getBlobName(),
            accept, requestOptions, context));
    }

    /**
     * The Break Lease operation ends a lease and ensures that another client can't acquire a new lease until the
     * current lease period has expired.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-lease-break-period</td><td>Integer</td><td>No</td><td>For a break operation, proposed duration the
     * lease should continue before it is broken, in seconds, between 0 and 60. This break period is only used if it is
     * shorter than the time remaining on the lease. If longer, the time remaining on the lease is used. A new lease
     * will not be available before the break period has expired, but the lease may be held for longer than the break
     * period. If this header does not appear with a break operation, a fixed-duration lease breaks after the remaining
     * lease period elapses, and an infinite lease breaks immediately.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>The request should only proceed if an entity matches this
     * string.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>The request should only proceed if no entity matches this
     * string.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the
     * entity was not modified after this time.</td></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the entity
     * was modified after this time.</td></tr>
     * <tr><td>x-ms-if-tags</td><td>String</td><td>No</td><td>Specify a SQL where clause on blob tags to operate only on
     * blobs with a matching value.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> breakLeaseWithResponse(RequestOptions requestOptions) {
        final String contentType = "application/xml";
        final String accept = "application/json";
        return service.breakLeaseSync(this.client.getUrl(), contentType, this.client.getServiceVersion().getVersion(),
            this.client.getContainerName(), this.client.getBlobName(), accept, requestOptions, Context.NONE);
    }

    /**
     * The Create Snapshot operation creates a read-only snapshot of a blob.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-meta</td><td>Map&lt;String, String&gt;</td><td>No</td><td>The metadata headers.</td></tr>
     * <tr><td>x-ms-encryption-key</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later. Specifies
     * the encryption key to use to encrypt the data provided in the request. If not specified, the request will be
     * encrypted with the root account key.</td></tr>
     * <tr><td>x-ms-encryption-key-sha256</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later.
     * Specifies the SHA256 hash of the encryption key used to encrypt the data provided in the request. This header is
     * only used for encryption with a customer-provided key. If the request is authenticated with a client token, this
     * header should be specified using the SHA256 hash of the encryption key.</td></tr>
     * <tr><td>x-ms-encryption-algorithm</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later.
     * Specifies the algorithm to use for encryption. If not specified, the default is AES256. Allowed values:
     * "AES256".</td></tr>
     * <tr><td>x-ms-encryption-scope</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later. Specifies
     * the encryption scope to use to encrypt the data provided in the request. If not specified, the request will be
     * encrypted with the root account key.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>The request should only proceed if an entity matches this
     * string.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>The request should only proceed if no entity matches this
     * string.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the
     * entity was not modified after this time.</td></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the entity
     * was modified after this time.</td></tr>
     * <tr><td>x-ms-if-tags</td><td>String</td><td>No</td><td>Specify a SQL where clause on blob tags to operate only on
     * blobs with a matching value.</td></tr>
     * <tr><td>x-ms-lease-id</td><td>String</td><td>No</td><td>If specified, the operation only succeeds if the
     * resource's lease is active and matches this ID.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> createSnapshotWithResponseAsync(RequestOptions requestOptions) {
        final String contentType = "application/xml";
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.createSnapshot(this.client.getUrl(), contentType,
            this.client.getServiceVersion().getVersion(), this.client.getContainerName(), this.client.getBlobName(),
            accept, requestOptions, context));
    }

    /**
     * The Create Snapshot operation creates a read-only snapshot of a blob.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-meta</td><td>Map&lt;String, String&gt;</td><td>No</td><td>The metadata headers.</td></tr>
     * <tr><td>x-ms-encryption-key</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later. Specifies
     * the encryption key to use to encrypt the data provided in the request. If not specified, the request will be
     * encrypted with the root account key.</td></tr>
     * <tr><td>x-ms-encryption-key-sha256</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later.
     * Specifies the SHA256 hash of the encryption key used to encrypt the data provided in the request. This header is
     * only used for encryption with a customer-provided key. If the request is authenticated with a client token, this
     * header should be specified using the SHA256 hash of the encryption key.</td></tr>
     * <tr><td>x-ms-encryption-algorithm</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later.
     * Specifies the algorithm to use for encryption. If not specified, the default is AES256. Allowed values:
     * "AES256".</td></tr>
     * <tr><td>x-ms-encryption-scope</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later. Specifies
     * the encryption scope to use to encrypt the data provided in the request. If not specified, the request will be
     * encrypted with the root account key.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>The request should only proceed if an entity matches this
     * string.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>The request should only proceed if no entity matches this
     * string.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the
     * entity was not modified after this time.</td></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the entity
     * was modified after this time.</td></tr>
     * <tr><td>x-ms-if-tags</td><td>String</td><td>No</td><td>Specify a SQL where clause on blob tags to operate only on
     * blobs with a matching value.</td></tr>
     * <tr><td>x-ms-lease-id</td><td>String</td><td>No</td><td>If specified, the operation only succeeds if the
     * resource's lease is active and matches this ID.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> createSnapshotWithResponse(RequestOptions requestOptions) {
        final String contentType = "application/xml";
        final String accept = "application/json";
        return service.createSnapshotSync(this.client.getUrl(), contentType,
            this.client.getServiceVersion().getVersion(), this.client.getContainerName(), this.client.getBlobName(),
            accept, requestOptions, Context.NONE);
    }

    /**
     * The Start Copy From URL operation copies a blob or an internet resource to a new blob.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-meta</td><td>Map&lt;String, String&gt;</td><td>No</td><td>The metadata headers.</td></tr>
     * <tr><td>x-ms-access-tier</td><td>String</td><td>No</td><td>The tier to be set on the blob. Allowed values: "P4",
     * "P6", "P10", "P15", "P20", "P30", "P40", "P50", "P60", "P70", "P80", "Hot", "Cool", "Archive", "Premium",
     * "Cold".</td></tr>
     * <tr><td>x-ms-rehydrate-priority</td><td>String</td><td>No</td><td>If an object is in rehydrate pending state then
     * this header is returned with priority of rehydrate. Valid values are High and Standard. Allowed values: "High",
     * "Standard".</td></tr>
     * <tr><td>x-ms-source-if-modified-since</td><td>OffsetDateTime</td><td>No</td><td>Specify this header value to
     * operate only on a blob if it has been modified since the specified date/time.</td></tr>
     * <tr><td>x-ms-source-if-unmodified-since</td><td>OffsetDateTime</td><td>No</td><td>Specify this header value to
     * operate only on a blob if it has not been modified since the specified date/time.</td></tr>
     * <tr><td>x-ms-source-if-match</td><td>String</td><td>No</td><td>Specify an ETag value to operate only on blobs
     * with a matching value.</td></tr>
     * <tr><td>x-ms-source-if-none-match</td><td>String</td><td>No</td><td>Specify this header value to operate only on
     * a blob if it has been modified since the specified date/time.</td></tr>
     * <tr><td>x-ms-source-if-tags</td><td>String</td><td>No</td><td>Specify a SQL where clause on blob tags to operate
     * only on blobs with a matching value.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>The request should only proceed if an entity matches this
     * string.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>The request should only proceed if no entity matches this
     * string.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the
     * entity was not modified after this time.</td></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the entity
     * was modified after this time.</td></tr>
     * <tr><td>x-ms-if-tags</td><td>String</td><td>No</td><td>Specify a SQL where clause on blob tags to operate only on
     * blobs with a matching value.</td></tr>
     * <tr><td>x-ms-lease-id</td><td>String</td><td>No</td><td>If specified, the operation only succeeds if the
     * resource's lease is active and matches this ID.</td></tr>
     * <tr><td>x-ms-tags</td><td>String</td><td>No</td><td>Optional. Used to set blob tags in various blob
     * operations.</td></tr>
     * <tr><td>x-ms-seal-blob</td><td>Boolean</td><td>No</td><td>Overrides the sealed state of the destination blob.
     * Service version 2019-12-12 and newer.</td></tr>
     * <tr><td>x-ms-immutability-policy-until-date</td><td>OffsetDateTime</td><td>No</td><td>Specifies the date time
     * when the blobs immutability policy is set to expire.</td></tr>
     * <tr><td>x-ms-immutability-policy-mode</td><td>String</td><td>No</td><td>Specifies the immutability policy mode to
     * set on the blob. Allowed values: "Mutable", "Locked", "Unlocked".</td></tr>
     * <tr><td>x-ms-legal-hold</td><td>Boolean</td><td>No</td><td>Specified if a legal hold should be set on the
     * blob.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up to 2 KB in
     * length that specifies a page blob snapshot. The value should be URL-encoded as it would appear in a request URI.
     * The source blob must either be public or must be authenticated via a shared access signature.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> startCopyFromUrlWithResponseAsync(String copySource, RequestOptions requestOptions) {
        final String contentType = "application/xml";
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.startCopyFromUrl(this.client.getUrl(), contentType,
            this.client.getServiceVersion().getVersion(), this.client.getContainerName(), this.client.getBlobName(),
            copySource, accept, requestOptions, context));
    }

    /**
     * The Start Copy From URL operation copies a blob or an internet resource to a new blob.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-meta</td><td>Map&lt;String, String&gt;</td><td>No</td><td>The metadata headers.</td></tr>
     * <tr><td>x-ms-access-tier</td><td>String</td><td>No</td><td>The tier to be set on the blob. Allowed values: "P4",
     * "P6", "P10", "P15", "P20", "P30", "P40", "P50", "P60", "P70", "P80", "Hot", "Cool", "Archive", "Premium",
     * "Cold".</td></tr>
     * <tr><td>x-ms-rehydrate-priority</td><td>String</td><td>No</td><td>If an object is in rehydrate pending state then
     * this header is returned with priority of rehydrate. Valid values are High and Standard. Allowed values: "High",
     * "Standard".</td></tr>
     * <tr><td>x-ms-source-if-modified-since</td><td>OffsetDateTime</td><td>No</td><td>Specify this header value to
     * operate only on a blob if it has been modified since the specified date/time.</td></tr>
     * <tr><td>x-ms-source-if-unmodified-since</td><td>OffsetDateTime</td><td>No</td><td>Specify this header value to
     * operate only on a blob if it has not been modified since the specified date/time.</td></tr>
     * <tr><td>x-ms-source-if-match</td><td>String</td><td>No</td><td>Specify an ETag value to operate only on blobs
     * with a matching value.</td></tr>
     * <tr><td>x-ms-source-if-none-match</td><td>String</td><td>No</td><td>Specify this header value to operate only on
     * a blob if it has been modified since the specified date/time.</td></tr>
     * <tr><td>x-ms-source-if-tags</td><td>String</td><td>No</td><td>Specify a SQL where clause on blob tags to operate
     * only on blobs with a matching value.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>The request should only proceed if an entity matches this
     * string.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>The request should only proceed if no entity matches this
     * string.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the
     * entity was not modified after this time.</td></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the entity
     * was modified after this time.</td></tr>
     * <tr><td>x-ms-if-tags</td><td>String</td><td>No</td><td>Specify a SQL where clause on blob tags to operate only on
     * blobs with a matching value.</td></tr>
     * <tr><td>x-ms-lease-id</td><td>String</td><td>No</td><td>If specified, the operation only succeeds if the
     * resource's lease is active and matches this ID.</td></tr>
     * <tr><td>x-ms-tags</td><td>String</td><td>No</td><td>Optional. Used to set blob tags in various blob
     * operations.</td></tr>
     * <tr><td>x-ms-seal-blob</td><td>Boolean</td><td>No</td><td>Overrides the sealed state of the destination blob.
     * Service version 2019-12-12 and newer.</td></tr>
     * <tr><td>x-ms-immutability-policy-until-date</td><td>OffsetDateTime</td><td>No</td><td>Specifies the date time
     * when the blobs immutability policy is set to expire.</td></tr>
     * <tr><td>x-ms-immutability-policy-mode</td><td>String</td><td>No</td><td>Specifies the immutability policy mode to
     * set on the blob. Allowed values: "Mutable", "Locked", "Unlocked".</td></tr>
     * <tr><td>x-ms-legal-hold</td><td>Boolean</td><td>No</td><td>Specified if a legal hold should be set on the
     * blob.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up to 2 KB in
     * length that specifies a page blob snapshot. The value should be URL-encoded as it would appear in a request URI.
     * The source blob must either be public or must be authenticated via a shared access signature.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> startCopyFromUrlWithResponse(String copySource, RequestOptions requestOptions) {
        final String contentType = "application/xml";
        final String accept = "application/json";
        return service.startCopyFromUrlSync(this.client.getUrl(), contentType,
            this.client.getServiceVersion().getVersion(), this.client.getContainerName(), this.client.getBlobName(),
            copySource, accept, requestOptions, Context.NONE);
    }

    /**
     * The Copy From URL operation copies a blob or an internet resource to a new blob. It will not return a response
     * until the copy is complete.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-meta</td><td>Map&lt;String, String&gt;</td><td>No</td><td>The metadata headers.</td></tr>
     * <tr><td>x-ms-access-tier</td><td>String</td><td>No</td><td>The tier to be set on the blob. Allowed values: "P4",
     * "P6", "P10", "P15", "P20", "P30", "P40", "P50", "P60", "P70", "P80", "Hot", "Cool", "Archive", "Premium",
     * "Cold".</td></tr>
     * <tr><td>x-ms-source-if-modified-since</td><td>OffsetDateTime</td><td>No</td><td>Specify this header value to
     * operate only on a blob if it has been modified since the specified date/time.</td></tr>
     * <tr><td>x-ms-source-if-unmodified-since</td><td>OffsetDateTime</td><td>No</td><td>Specify this header value to
     * operate only on a blob if it has not been modified since the specified date/time.</td></tr>
     * <tr><td>x-ms-source-if-match</td><td>String</td><td>No</td><td>Specify an ETag value to operate only on blobs
     * with a matching value.</td></tr>
     * <tr><td>x-ms-source-if-none-match</td><td>String</td><td>No</td><td>Specify this header value to operate only on
     * a blob if it has been modified since the specified date/time.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>The request should only proceed if an entity matches this
     * string.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>The request should only proceed if no entity matches this
     * string.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the
     * entity was not modified after this time.</td></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the entity
     * was modified after this time.</td></tr>
     * <tr><td>x-ms-if-tags</td><td>String</td><td>No</td><td>Specify a SQL where clause on blob tags to operate only on
     * blobs with a matching value.</td></tr>
     * <tr><td>x-ms-lease-id</td><td>String</td><td>No</td><td>If specified, the operation only succeeds if the
     * resource's lease is active and matches this ID.</td></tr>
     * <tr><td>x-ms-source-content-md5</td><td>String</td><td>No</td><td>Specify the md5 calculated for the range of
     * bytes that must be read from the copy source.</td></tr>
     * <tr><td>x-ms-tags</td><td>String</td><td>No</td><td>Optional. Used to set blob tags in various blob
     * operations.</td></tr>
     * <tr><td>x-ms-immutability-policy-until-date</td><td>OffsetDateTime</td><td>No</td><td>Specifies the date time
     * when the blobs immutability policy is set to expire.</td></tr>
     * <tr><td>x-ms-immutability-policy-mode</td><td>String</td><td>No</td><td>Specifies the immutability policy mode to
     * set on the blob. Allowed values: "Mutable", "Locked", "Unlocked".</td></tr>
     * <tr><td>x-ms-legal-hold</td><td>Boolean</td><td>No</td><td>Specified if a legal hold should be set on the
     * blob.</td></tr>
     * <tr><td>x-ms-copy-source-authorization</td><td>String</td><td>No</td><td>Only Bearer type is supported.
     * Credentials should be a valid OAuth access token to copy source.</td></tr>
     * <tr><td>x-ms-encryption-scope</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later. Specifies
     * the encryption scope to use to encrypt the data provided in the request. If not specified, the request will be
     * encrypted with the root account key.</td></tr>
     * <tr><td>x-ms-copy-source-tags</td><td>String</td><td>No</td><td>Optional, default 'replace'. Indicates if source
     * tags should be copied or replaced with the tags specified by x-ms-tags.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up to 2 KB in
     * length that specifies a page blob snapshot. The value should be URL-encoded as it would appear in a request URI.
     * The source blob must either be public or must be authenticated via a shared access signature.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> copyFromUrlWithResponseAsync(String copySource, RequestOptions requestOptions) {
        final String contentType = "application/xml";
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.copyFromUrl(this.client.getUrl(), contentType,
            this.client.getServiceVersion().getVersion(), this.client.getContainerName(), this.client.getBlobName(),
            copySource, accept, requestOptions, context));
    }

    /**
     * The Copy From URL operation copies a blob or an internet resource to a new blob. It will not return a response
     * until the copy is complete.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-meta</td><td>Map&lt;String, String&gt;</td><td>No</td><td>The metadata headers.</td></tr>
     * <tr><td>x-ms-access-tier</td><td>String</td><td>No</td><td>The tier to be set on the blob. Allowed values: "P4",
     * "P6", "P10", "P15", "P20", "P30", "P40", "P50", "P60", "P70", "P80", "Hot", "Cool", "Archive", "Premium",
     * "Cold".</td></tr>
     * <tr><td>x-ms-source-if-modified-since</td><td>OffsetDateTime</td><td>No</td><td>Specify this header value to
     * operate only on a blob if it has been modified since the specified date/time.</td></tr>
     * <tr><td>x-ms-source-if-unmodified-since</td><td>OffsetDateTime</td><td>No</td><td>Specify this header value to
     * operate only on a blob if it has not been modified since the specified date/time.</td></tr>
     * <tr><td>x-ms-source-if-match</td><td>String</td><td>No</td><td>Specify an ETag value to operate only on blobs
     * with a matching value.</td></tr>
     * <tr><td>x-ms-source-if-none-match</td><td>String</td><td>No</td><td>Specify this header value to operate only on
     * a blob if it has been modified since the specified date/time.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>The request should only proceed if an entity matches this
     * string.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>The request should only proceed if no entity matches this
     * string.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the
     * entity was not modified after this time.</td></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the entity
     * was modified after this time.</td></tr>
     * <tr><td>x-ms-if-tags</td><td>String</td><td>No</td><td>Specify a SQL where clause on blob tags to operate only on
     * blobs with a matching value.</td></tr>
     * <tr><td>x-ms-lease-id</td><td>String</td><td>No</td><td>If specified, the operation only succeeds if the
     * resource's lease is active and matches this ID.</td></tr>
     * <tr><td>x-ms-source-content-md5</td><td>String</td><td>No</td><td>Specify the md5 calculated for the range of
     * bytes that must be read from the copy source.</td></tr>
     * <tr><td>x-ms-tags</td><td>String</td><td>No</td><td>Optional. Used to set blob tags in various blob
     * operations.</td></tr>
     * <tr><td>x-ms-immutability-policy-until-date</td><td>OffsetDateTime</td><td>No</td><td>Specifies the date time
     * when the blobs immutability policy is set to expire.</td></tr>
     * <tr><td>x-ms-immutability-policy-mode</td><td>String</td><td>No</td><td>Specifies the immutability policy mode to
     * set on the blob. Allowed values: "Mutable", "Locked", "Unlocked".</td></tr>
     * <tr><td>x-ms-legal-hold</td><td>Boolean</td><td>No</td><td>Specified if a legal hold should be set on the
     * blob.</td></tr>
     * <tr><td>x-ms-copy-source-authorization</td><td>String</td><td>No</td><td>Only Bearer type is supported.
     * Credentials should be a valid OAuth access token to copy source.</td></tr>
     * <tr><td>x-ms-encryption-scope</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later. Specifies
     * the encryption scope to use to encrypt the data provided in the request. If not specified, the request will be
     * encrypted with the root account key.</td></tr>
     * <tr><td>x-ms-copy-source-tags</td><td>String</td><td>No</td><td>Optional, default 'replace'. Indicates if source
     * tags should be copied or replaced with the tags specified by x-ms-tags.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up to 2 KB in
     * length that specifies a page blob snapshot. The value should be URL-encoded as it would appear in a request URI.
     * The source blob must either be public or must be authenticated via a shared access signature.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> copyFromUrlWithResponse(String copySource, RequestOptions requestOptions) {
        final String contentType = "application/xml";
        final String accept = "application/json";
        return service.copyFromUrlSync(this.client.getUrl(), contentType, this.client.getServiceVersion().getVersion(),
            this.client.getContainerName(), this.client.getBlobName(), copySource, accept, requestOptions,
            Context.NONE);
    }

    /**
     * The Abort Copy From URL operation aborts a pending Copy From URL operation, and leaves a destination blob with
     * zero length and full metadata.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-lease-id</td><td>String</td><td>No</td><td>If specified, the operation only succeeds if the
     * resource's lease is active and matches this ID.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param copyId The copy identifier provided in the x-ms-copy-id header of the original Copy Blob operation.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> abortCopyFromUrlWithResponseAsync(String copyId, RequestOptions requestOptions) {
        final String contentType = "application/xml";
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.abortCopyFromUrl(this.client.getUrl(), contentType,
            this.client.getServiceVersion().getVersion(), this.client.getContainerName(), this.client.getBlobName(),
            copyId, accept, requestOptions, context));
    }

    /**
     * The Abort Copy From URL operation aborts a pending Copy From URL operation, and leaves a destination blob with
     * zero length and full metadata.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-lease-id</td><td>String</td><td>No</td><td>If specified, the operation only succeeds if the
     * resource's lease is active and matches this ID.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param copyId The copy identifier provided in the x-ms-copy-id header of the original Copy Blob operation.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> abortCopyFromUrlWithResponse(String copyId, RequestOptions requestOptions) {
        final String contentType = "application/xml";
        final String accept = "application/json";
        return service.abortCopyFromUrlSync(this.client.getUrl(), contentType,
            this.client.getServiceVersion().getVersion(), this.client.getContainerName(), this.client.getBlobName(),
            copyId, accept, requestOptions, Context.NONE);
    }

    /**
     * The Set Tier operation sets the tier on a block blob. The operation is allowed on a page blob or block blob, but
     * not on an append blob. A block blob's tier determines Hot/Cool/Archive storage type. This operation does not
     * update the blob's ETag.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>snapshot</td><td>String</td><td>No</td><td>The snapshot parameter is an opaque DateTime value that, when
     * present, specifies the blob snapshot to retrieve. For more information on working with blob snapshots, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob"&gt;Creating
     * a Snapshot of a Blob.&lt;/a&gt;</td></tr>
     * <tr><td>versionid</td><td>String</td><td>No</td><td>The version id parameter is an opaque DateTime value that,
     * when present, specifies the version of the blob to operate on. It's for service version 2019-10-10 and
     * newer.</td></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-rehydrate-priority</td><td>String</td><td>No</td><td>If an object is in rehydrate pending state then
     * this header is returned with priority of rehydrate. Valid values are High and Standard. Allowed values: "High",
     * "Standard".</td></tr>
     * <tr><td>x-ms-lease-id</td><td>String</td><td>No</td><td>If specified, the operation only succeeds if the
     * resource's lease is active and matches this ID.</td></tr>
     * <tr><td>x-ms-if-tags</td><td>String</td><td>No</td><td>Specify a SQL where clause on blob tags to operate only on
     * blobs with a matching value.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param tier Indicates the tier to be set on the blob. Allowed values: "P4", "P6", "P10", "P15", "P20", "P30",
     * "P40", "P50", "P60", "P70", "P80", "Hot", "Cool", "Archive", "Premium", "Cold".
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> setTierWithResponseAsync(String tier, RequestOptions requestOptions) {
        final String contentType = "application/xml";
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.setTier(this.client.getUrl(), contentType, this.client.getServiceVersion().getVersion(),
                this.client.getContainerName(), this.client.getBlobName(), tier, accept, requestOptions, context));
    }

    /**
     * The Set Tier operation sets the tier on a block blob. The operation is allowed on a page blob or block blob, but
     * not on an append blob. A block blob's tier determines Hot/Cool/Archive storage type. This operation does not
     * update the blob's ETag.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>snapshot</td><td>String</td><td>No</td><td>The snapshot parameter is an opaque DateTime value that, when
     * present, specifies the blob snapshot to retrieve. For more information on working with blob snapshots, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob"&gt;Creating
     * a Snapshot of a Blob.&lt;/a&gt;</td></tr>
     * <tr><td>versionid</td><td>String</td><td>No</td><td>The version id parameter is an opaque DateTime value that,
     * when present, specifies the version of the blob to operate on. It's for service version 2019-10-10 and
     * newer.</td></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-rehydrate-priority</td><td>String</td><td>No</td><td>If an object is in rehydrate pending state then
     * this header is returned with priority of rehydrate. Valid values are High and Standard. Allowed values: "High",
     * "Standard".</td></tr>
     * <tr><td>x-ms-lease-id</td><td>String</td><td>No</td><td>If specified, the operation only succeeds if the
     * resource's lease is active and matches this ID.</td></tr>
     * <tr><td>x-ms-if-tags</td><td>String</td><td>No</td><td>Specify a SQL where clause on blob tags to operate only on
     * blobs with a matching value.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param tier Indicates the tier to be set on the blob. Allowed values: "P4", "P6", "P10", "P15", "P20", "P30",
     * "P40", "P50", "P60", "P70", "P80", "Hot", "Cool", "Archive", "Premium", "Cold".
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> setTierWithResponse(String tier, RequestOptions requestOptions) {
        final String contentType = "application/xml";
        final String accept = "application/json";
        return service.setTierSync(this.client.getUrl(), contentType, this.client.getServiceVersion().getVersion(),
            this.client.getContainerName(), this.client.getBlobName(), tier, accept, requestOptions, Context.NONE);
    }

    /**
     * Returns the sku name and account kind.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> getAccountInfoWithResponseAsync(RequestOptions requestOptions) {
        final String contentType = "application/xml";
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getAccountInfo(this.client.getUrl(), contentType,
            this.client.getServiceVersion().getVersion(), this.client.getContainerName(), this.client.getBlobName(),
            accept, requestOptions, context));
    }

    /**
     * Returns the sku name and account kind.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> getAccountInfoWithResponse(RequestOptions requestOptions) {
        final String contentType = "application/xml";
        final String accept = "application/json";
        return service.getAccountInfoSync(this.client.getUrl(), contentType,
            this.client.getServiceVersion().getVersion(), this.client.getContainerName(), this.client.getBlobName(),
            accept, requestOptions, Context.NONE);
    }

    /**
     * The Get Blob Tags operation enables users to get tags on a blob.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * <tr><td>snapshot</td><td>String</td><td>No</td><td>The snapshot parameter is an opaque DateTime value that, when
     * present, specifies the blob snapshot to retrieve. For more information on working with blob snapshots, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob"&gt;Creating
     * a Snapshot of a Blob.&lt;/a&gt;</td></tr>
     * <tr><td>versionid</td><td>String</td><td>No</td><td>The version id parameter is an opaque DateTime value that,
     * when present, specifies the version of the blob to operate on. It's for service version 2019-10-10 and
     * newer.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-lease-id</td><td>String</td><td>No</td><td>If specified, the operation only succeeds if the
     * resource's lease is active and matches this ID.</td></tr>
     * <tr><td>x-ms-if-tags</td><td>String</td><td>No</td><td>Specify a SQL where clause on blob tags to operate only on
     * blobs with a matching value.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     blobTagSet (Required): [
     *          (Required){
     *             key: String (Required)
     *             value: String (Required)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents blob tags along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getTagsWithResponseAsync(RequestOptions requestOptions) {
        final String contentType = "application/xml";
        final String accept = "application/xml";
        return FluxUtil.withContext(
            context -> service.getTags(this.client.getUrl(), contentType, this.client.getServiceVersion().getVersion(),
                this.client.getContainerName(), this.client.getBlobName(), accept, requestOptions, context));
    }

    /**
     * The Get Blob Tags operation enables users to get tags on a blob.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * <tr><td>snapshot</td><td>String</td><td>No</td><td>The snapshot parameter is an opaque DateTime value that, when
     * present, specifies the blob snapshot to retrieve. For more information on working with blob snapshots, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob"&gt;Creating
     * a Snapshot of a Blob.&lt;/a&gt;</td></tr>
     * <tr><td>versionid</td><td>String</td><td>No</td><td>The version id parameter is an opaque DateTime value that,
     * when present, specifies the version of the blob to operate on. It's for service version 2019-10-10 and
     * newer.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-lease-id</td><td>String</td><td>No</td><td>If specified, the operation only succeeds if the
     * resource's lease is active and matches this ID.</td></tr>
     * <tr><td>x-ms-if-tags</td><td>String</td><td>No</td><td>Specify a SQL where clause on blob tags to operate only on
     * blobs with a matching value.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     blobTagSet (Required): [
     *          (Required){
     *             key: String (Required)
     *             value: String (Required)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents blob tags along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getTagsWithResponse(RequestOptions requestOptions) {
        final String contentType = "application/xml";
        final String accept = "application/xml";
        return service.getTagsSync(this.client.getUrl(), contentType, this.client.getServiceVersion().getVersion(),
            this.client.getContainerName(), this.client.getBlobName(), accept, requestOptions, Context.NONE);
    }

    /**
     * The Set Tags operation enables users to set tags on a blob.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * <tr><td>versionid</td><td>String</td><td>No</td><td>The version id parameter is an opaque DateTime value that,
     * when present, specifies the version of the blob to operate on. It's for service version 2019-10-10 and
     * newer.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Content-MD5</td><td>String</td><td>No</td><td>Optional. An MD5 hash of the blob content. Note that this
     * hash is not validated, as the hashes for the individual blocks were validated when each was uploaded.</td></tr>
     * <tr><td>x-ms-content-crc64</td><td>String</td><td>No</td><td>Specify the transactional crc64 for the body, to be
     * validated by the service.</td></tr>
     * <tr><td>x-ms-if-tags</td><td>String</td><td>No</td><td>Specify a SQL where clause on blob tags to operate only on
     * blobs with a matching value.</td></tr>
     * <tr><td>x-ms-lease-id</td><td>String</td><td>No</td><td>If specified, the operation only succeeds if the
     * resource's lease is active and matches this ID.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     blobTagSet (Required): [
     *          (Required){
     *             key: String (Required)
     *             value: String (Required)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param tags The blob tags.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> setTagsWithResponseAsync(BinaryData tags, RequestOptions requestOptions) {
        final String contentType = "application/xml";
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.setTags(this.client.getUrl(), contentType, this.client.getServiceVersion().getVersion(),
                this.client.getContainerName(), this.client.getBlobName(), accept, tags, requestOptions, context));
    }

    /**
     * The Set Tags operation enables users to set tags on a blob.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * <tr><td>versionid</td><td>String</td><td>No</td><td>The version id parameter is an opaque DateTime value that,
     * when present, specifies the version of the blob to operate on. It's for service version 2019-10-10 and
     * newer.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Content-MD5</td><td>String</td><td>No</td><td>Optional. An MD5 hash of the blob content. Note that this
     * hash is not validated, as the hashes for the individual blocks were validated when each was uploaded.</td></tr>
     * <tr><td>x-ms-content-crc64</td><td>String</td><td>No</td><td>Specify the transactional crc64 for the body, to be
     * validated by the service.</td></tr>
     * <tr><td>x-ms-if-tags</td><td>String</td><td>No</td><td>Specify a SQL where clause on blob tags to operate only on
     * blobs with a matching value.</td></tr>
     * <tr><td>x-ms-lease-id</td><td>String</td><td>No</td><td>If specified, the operation only succeeds if the
     * resource's lease is active and matches this ID.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     blobTagSet (Required): [
     *          (Required){
     *             key: String (Required)
     *             value: String (Required)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param tags The blob tags.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> setTagsWithResponse(BinaryData tags, RequestOptions requestOptions) {
        final String contentType = "application/xml";
        final String accept = "application/json";
        return service.setTagsSync(this.client.getUrl(), contentType, this.client.getServiceVersion().getVersion(),
            this.client.getContainerName(), this.client.getBlobName(), accept, tags, requestOptions, Context.NONE);
    }
}
