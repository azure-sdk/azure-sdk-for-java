// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.storage.blob.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The retention policy.
 */
@Fluent
public final class RetentionPolicy implements JsonSerializable<RetentionPolicy> {
    /*
     * Whether to enable the retention policy.
     */
    @Generated
    private final boolean enabled;

    /*
     * The number of days to retain the logs.
     */
    @Generated
    private Integer days;

    /*
     * Whether to allow permanent delete.
     */
    @Generated
    private Boolean allowPermanentDelete;

    /**
     * Creates an instance of RetentionPolicy class.
     * 
     * @param enabled the enabled value to set.
     */
    @Generated
    public RetentionPolicy(boolean enabled) {
        this.enabled = enabled;
    }

    /**
     * Get the enabled property: Whether to enable the retention policy.
     * 
     * @return the enabled value.
     */
    @Generated
    public boolean isEnabled() {
        return this.enabled;
    }

    /**
     * Get the days property: The number of days to retain the logs.
     * 
     * @return the days value.
     */
    @Generated
    public Integer getDays() {
        return this.days;
    }

    /**
     * Set the days property: The number of days to retain the logs.
     * 
     * @param days the days value to set.
     * @return the RetentionPolicy object itself.
     */
    @Generated
    public RetentionPolicy setDays(Integer days) {
        this.days = days;
        return this;
    }

    /**
     * Get the allowPermanentDelete property: Whether to allow permanent delete.
     * 
     * @return the allowPermanentDelete value.
     */
    @Generated
    public Boolean isAllowPermanentDelete() {
        return this.allowPermanentDelete;
    }

    /**
     * Set the allowPermanentDelete property: Whether to allow permanent delete.
     * 
     * @param allowPermanentDelete the allowPermanentDelete value to set.
     * @return the RetentionPolicy object itself.
     */
    @Generated
    public RetentionPolicy setAllowPermanentDelete(Boolean allowPermanentDelete) {
        this.allowPermanentDelete = allowPermanentDelete;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("enabled", this.enabled);
        jsonWriter.writeNumberField("days", this.days);
        jsonWriter.writeBooleanField("allowPermanentDelete", this.allowPermanentDelete);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RetentionPolicy from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RetentionPolicy if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RetentionPolicy.
     */
    @Generated
    public static RetentionPolicy fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            boolean enabled = false;
            Integer days = null;
            Boolean allowPermanentDelete = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("enabled".equals(fieldName)) {
                    enabled = reader.getBoolean();
                } else if ("days".equals(fieldName)) {
                    days = reader.getNullable(JsonReader::getInt);
                } else if ("allowPermanentDelete".equals(fieldName)) {
                    allowPermanentDelete = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }
            RetentionPolicy deserializedRetentionPolicy = new RetentionPolicy(enabled);
            deserializedRetentionPolicy.days = days;
            deserializedRetentionPolicy.allowPermanentDelete = allowPermanentDelete;

            return deserializedRetentionPolicy;
        });
    }
}
