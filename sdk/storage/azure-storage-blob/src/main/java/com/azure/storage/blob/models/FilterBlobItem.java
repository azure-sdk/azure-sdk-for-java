// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.storage.blob.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The filter blob item.
 */
@Immutable
public final class FilterBlobItem implements JsonSerializable<FilterBlobItem> {
    /*
     * The name of the blob.
     */
    @Generated
    private final String name;

    /*
     * The properties of the blob.
     */
    @Generated
    private final String containerName;

    /*
     * The metadata of the blob.
     */
    @Generated
    private BlobTags tags;

    /*
     * The version ID of the blob.
     */
    @Generated
    private String versionId;

    /*
     * Whether it is the current version of the blob
     */
    @Generated
    private Boolean isCurrentVersion;

    /**
     * Creates an instance of FilterBlobItem class.
     * 
     * @param name the name value to set.
     * @param containerName the containerName value to set.
     */
    @Generated
    private FilterBlobItem(String name, String containerName) {
        this.name = name;
        this.containerName = containerName;
    }

    /**
     * Get the name property: The name of the blob.
     * 
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Get the containerName property: The properties of the blob.
     * 
     * @return the containerName value.
     */
    @Generated
    public String getContainerName() {
        return this.containerName;
    }

    /**
     * Get the tags property: The metadata of the blob.
     * 
     * @return the tags value.
     */
    @Generated
    public BlobTags getTags() {
        return this.tags;
    }

    /**
     * Get the versionId property: The version ID of the blob.
     * 
     * @return the versionId value.
     */
    @Generated
    public String getVersionId() {
        return this.versionId;
    }

    /**
     * Get the isCurrentVersion property: Whether it is the current version of the blob.
     * 
     * @return the isCurrentVersion value.
     */
    @Generated
    public Boolean isCurrentVersion() {
        return this.isCurrentVersion;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("containerName", this.containerName);
        jsonWriter.writeJsonField("tags", this.tags);
        jsonWriter.writeStringField("versionId", this.versionId);
        jsonWriter.writeBooleanField("isCurrentVersion", this.isCurrentVersion);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FilterBlobItem from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FilterBlobItem if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the FilterBlobItem.
     */
    @Generated
    public static FilterBlobItem fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String name = null;
            String containerName = null;
            BlobTags tags = null;
            String versionId = null;
            Boolean isCurrentVersion = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else if ("containerName".equals(fieldName)) {
                    containerName = reader.getString();
                } else if ("tags".equals(fieldName)) {
                    tags = BlobTags.fromJson(reader);
                } else if ("versionId".equals(fieldName)) {
                    versionId = reader.getString();
                } else if ("isCurrentVersion".equals(fieldName)) {
                    isCurrentVersion = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }
            FilterBlobItem deserializedFilterBlobItem = new FilterBlobItem(name, containerName);
            deserializedFilterBlobItem.tags = tags;
            deserializedFilterBlobItem.versionId = versionId;
            deserializedFilterBlobItem.isCurrentVersion = isCurrentVersion;

            return deserializedFilterBlobItem;
        });
    }
}
