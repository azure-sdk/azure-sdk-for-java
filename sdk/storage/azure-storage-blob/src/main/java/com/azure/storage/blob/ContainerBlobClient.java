// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.storage.blob;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.HttpHeaderName;
import com.azure.core.http.RequestConditions;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.DateTimeRfc1123;
import com.azure.storage.blob.implementation.ContainerBlobsImpl;
import com.azure.storage.blob.models.AccessTier;
import com.azure.storage.blob.models.BlobDeleteType;
import com.azure.storage.blob.models.BlobExpiryOptions;
import com.azure.storage.blob.models.BlobImmutabilityPolicyMode;
import com.azure.storage.blob.models.BlobTags;
import com.azure.storage.blob.models.DeleteSnapshotsOptionType;
import com.azure.storage.blob.models.EncryptionAlgorithmType;
import com.azure.storage.blob.models.RehydratePriority;
import java.time.OffsetDateTime;
import java.util.Map;

/**
 * Initializes a new instance of the synchronous BlobClient type.
 */
@ServiceClient(builder = BlobClientBuilder.class)
public final class ContainerBlobClient {
    @Generated
    private final ContainerBlobsImpl serviceClient;

    /**
     * Initializes an instance of ContainerBlobClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    ContainerBlobClient(ContainerBlobsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * The Download operation reads or downloads a blob from the system, including its metadata and properties. You can
     * also call Download to read a snapshot.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>snapshot</td><td>String</td><td>No</td><td>The snapshot parameter is an opaque DateTime value that, when
     * present, specifies the blob snapshot to retrieve. For more information on working with blob snapshots, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob"&gt;Creating
     * a Snapshot of a Blob.&lt;/a&gt;</td></tr>
     * <tr><td>versionid</td><td>String</td><td>No</td><td>The version id parameter is an opaque DateTime value that,
     * when present, specifies the version of the blob to operate on. It's for service version 2019-10-10 and
     * newer.</td></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-range</td><td>String</td><td>No</td><td>Return only the bytes of the blob in the specified
     * range.</td></tr>
     * <tr><td>x-ms-lease-id</td><td>String</td><td>No</td><td>If specified, the operation only succeeds if the
     * resource's lease is active and matches this ID.</td></tr>
     * <tr><td>x-ms-range-get-content-md5</td><td>Boolean</td><td>No</td><td>When set to true and specified together
     * with the Range, the service returns the MD5 hash for the range, as long as the range is less than or equal to 4
     * MB in size.</td></tr>
     * <tr><td>x-ms-range-get-content-crc64</td><td>Boolean</td><td>No</td><td>Optional. When this header is set to true
     * and specified together with the Range header, the service returns the CRC64 hash for the range, as long as the
     * range is less than or equal to 4 MB in size.</td></tr>
     * <tr><td>x-ms-encryption-key</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later. Specifies
     * the encryption key to use to encrypt the data provided in the request. If not specified, the request will be
     * encrypted with the root account key.</td></tr>
     * <tr><td>x-ms-encryption-key-sha256</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later.
     * Specifies the SHA256 hash of the encryption key used to encrypt the data provided in the request. This header is
     * only used for encryption with a customer-provided key. If the request is authenticated with a client token, this
     * header should be specified using the SHA256 hash of the encryption key.</td></tr>
     * <tr><td>x-ms-encryption-algorithm</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later.
     * Specifies the algorithm to use for encryption. If not specified, the default is AES256. Allowed values:
     * "AES256".</td></tr>
     * <tr><td>x-ms-if-tags</td><td>String</td><td>No</td><td>Specify a SQL where clause on blob tags to operate only on
     * blobs with a matching value.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>The request should only proceed if an entity matches this
     * string.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>The request should only proceed if no entity matches this
     * string.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the
     * entity was not modified after this time.</td></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the entity
     * was modified after this time.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * BinaryData
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> downloadWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.downloadWithResponse(requestOptions);
    }

    /**
     * The Get Properties operation returns all user-defined metadata, standard HTTP properties, and system properties
     * for the blob. It does not return the content of the blob.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>snapshot</td><td>String</td><td>No</td><td>The snapshot parameter is an opaque DateTime value that, when
     * present, specifies the blob snapshot to retrieve. For more information on working with blob snapshots, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob"&gt;Creating
     * a Snapshot of a Blob.&lt;/a&gt;</td></tr>
     * <tr><td>versionid</td><td>String</td><td>No</td><td>The version id parameter is an opaque DateTime value that,
     * when present, specifies the version of the blob to operate on. It's for service version 2019-10-10 and
     * newer.</td></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-lease-id</td><td>String</td><td>No</td><td>If specified, the operation only succeeds if the
     * resource's lease is active and matches this ID.</td></tr>
     * <tr><td>x-ms-encryption-key</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later. Specifies
     * the encryption key to use to encrypt the data provided in the request. If not specified, the request will be
     * encrypted with the root account key.</td></tr>
     * <tr><td>x-ms-encryption-key-sha256</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later.
     * Specifies the SHA256 hash of the encryption key used to encrypt the data provided in the request. This header is
     * only used for encryption with a customer-provided key. If the request is authenticated with a client token, this
     * header should be specified using the SHA256 hash of the encryption key.</td></tr>
     * <tr><td>x-ms-encryption-algorithm</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later.
     * Specifies the algorithm to use for encryption. If not specified, the default is AES256. Allowed values:
     * "AES256".</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>The request should only proceed if an entity matches this
     * string.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>The request should only proceed if no entity matches this
     * string.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the
     * entity was not modified after this time.</td></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the entity
     * was modified after this time.</td></tr>
     * <tr><td>x-ms-if-tags</td><td>String</td><td>No</td><td>Specify a SQL where clause on blob tags to operate only on
     * blobs with a matching value.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> getPropertiesWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.getPropertiesWithResponse(requestOptions);
    }

    /**
     * If the storage account's soft delete feature is disabled then, when a blob is deleted, it is permanently removed
     * from the storage account. If the storage account's soft delete feature is enabled, then, when a blob is deleted,
     * it is marked for deletion and becomes inaccessible immediately. However, the blob service retains the blob or
     * snapshot for the number of days specified by the DeleteRetentionPolicy section of [Storage service properties]
     * (Set-Blob-Service-Properties.md). After the specified number of days has passed, the blob's data is permanently
     * removed from the storage account. Note that you continue to be charged for the soft-deleted blob's storage until
     * it is permanently removed. Use the List Blobs API and specify the \"include=deleted\" query parameter to discover
     * which blobs and snapshots have been soft deleted. You can then use the Undelete Blob API to restore a
     * soft-deleted blob. All other operations on a soft-deleted blob or snapshot causes the service to return an HTTP
     * status code of 404 (ResourceNotFound).
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>snapshot</td><td>String</td><td>No</td><td>The snapshot parameter is an opaque DateTime value that, when
     * present, specifies the blob snapshot to retrieve. For more information on working with blob snapshots, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob"&gt;Creating
     * a Snapshot of a Blob.&lt;/a&gt;</td></tr>
     * <tr><td>versionid</td><td>String</td><td>No</td><td>The version id parameter is an opaque DateTime value that,
     * when present, specifies the version of the blob to operate on. It's for service version 2019-10-10 and
     * newer.</td></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * <tr><td>deletetype</td><td>String</td><td>No</td><td>Optional. Only possible value is 'permanent', which
     * specifies to permanently delete a blob if blob soft delete is enabled. Allowed values: "Permanent".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-lease-id</td><td>String</td><td>No</td><td>If specified, the operation only succeeds if the
     * resource's lease is active and matches this ID.</td></tr>
     * <tr><td>x-ms-delete-snapshots</td><td>String</td><td>No</td><td>Required if the blob has associated snapshots.
     * Specify one of the following two options: include: Delete the base blob and all of its snapshots. only: Delete
     * only the blob's snapshots and not the blob itself. Allowed values: "only", "include".</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>The request should only proceed if an entity matches this
     * string.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>The request should only proceed if no entity matches this
     * string.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the
     * entity was not modified after this time.</td></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the entity
     * was modified after this time.</td></tr>
     * <tr><td>x-ms-if-tags</td><td>String</td><td>No</td><td>Specify a SQL where clause on blob tags to operate only on
     * blobs with a matching value.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.deleteWithResponse(requestOptions);
    }

    /**
     * Undelete a blob that was previously soft deleted.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> undeleteWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.undeleteWithResponse(requestOptions);
    }

    /**
     * Set the expiration time of a blob.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-expiry-time</td><td>OffsetDateTime</td><td>No</td><td>The time this blob will expire.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param expiryOptions Required. Indicates mode of the expiry time. Allowed values: "NeverExpire",
     * "RelativeToCreation", "RelativeToNow", "Absolute".
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> setExpiryWithResponse(String expiryOptions, RequestOptions requestOptions) {
        return this.serviceClient.setExpiryWithResponse(expiryOptions, requestOptions);
    }

    /**
     * The Set HTTP Headers operation sets system properties on the blob.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-blob-cache-control</td><td>String</td><td>No</td><td>Optional. Sets the blob's cache control. If
     * specified, this property is stored with the blob and returned with a read request.</td></tr>
     * <tr><td>x-ms-blob-content-type</td><td>String</td><td>No</td><td>Optional. Sets the blob's content type. If
     * specified, this property is stored with the blob and returned with a read request.</td></tr>
     * <tr><td>x-ms-blob-content-md5</td><td>byte[]</td><td>No</td><td>Optional. An MD5 hash of the blob content. Note
     * that this hash is not validated, as the hashes for the individual blocks were validated when each was
     * uploaded.</td></tr>
     * <tr><td>x-ms-blob-content-encoding</td><td>String</td><td>No</td><td>Optional. Sets the blob's content encoding.
     * If specified, this property is stored with the blob and returned with a read request.</td></tr>
     * <tr><td>x-ms-blob-content-language</td><td>String</td><td>No</td><td>Optional. Set the blob's content language.
     * If specified, this property is stored with the blob and returned with a read request.</td></tr>
     * <tr><td>x-ms-lease-id</td><td>String</td><td>No</td><td>If specified, the operation only succeeds if the
     * resource's lease is active and matches this ID.</td></tr>
     * <tr><td>x-ms-blob-content-disposition</td><td>String</td><td>No</td><td>Optional. Sets the blob's content
     * disposition. If specified, this property is stored with the blob and returned with a read request.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>The request should only proceed if an entity matches this
     * string.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>The request should only proceed if no entity matches this
     * string.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the
     * entity was not modified after this time.</td></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the entity
     * was modified after this time.</td></tr>
     * <tr><td>x-ms-if-tags</td><td>String</td><td>No</td><td>Specify a SQL where clause on blob tags to operate only on
     * blobs with a matching value.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> setHttpHeadersWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.setHttpHeadersWithResponse(requestOptions);
    }

    /**
     * Set the immutability policy of a blob.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * <tr><td>snapshot</td><td>String</td><td>No</td><td>The snapshot parameter is an opaque DateTime value that, when
     * present, specifies the blob snapshot to retrieve. For more information on working with blob snapshots, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob"&gt;Creating
     * a Snapshot of a Blob.&lt;/a&gt;</td></tr>
     * <tr><td>versionid</td><td>String</td><td>No</td><td>The version id parameter is an opaque DateTime value that,
     * when present, specifies the version of the blob to operate on. It's for service version 2019-10-10 and
     * newer.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>A date-time value. A request is made under
     * the condition that the resource has not been modified since the specified date-time.</td></tr>
     * <tr><td>x-ms-immutability-policy-until-date</td><td>OffsetDateTime</td><td>No</td><td>Specifies the date time
     * when the blobs immutability policy is set to expire.</td></tr>
     * <tr><td>x-ms-immutability-policy-mode</td><td>String</td><td>No</td><td>Specifies the immutability policy mode to
     * set on the blob. Allowed values: "Mutable", "Locked", "Unlocked".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> setImmutabilityPolicyWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.setImmutabilityPolicyWithResponse(requestOptions);
    }

    /**
     * The Delete Immutability Policy operation deletes the immutability policy on the blob.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * <tr><td>snapshot</td><td>String</td><td>No</td><td>The snapshot parameter is an opaque DateTime value that, when
     * present, specifies the blob snapshot to retrieve. For more information on working with blob snapshots, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob"&gt;Creating
     * a Snapshot of a Blob.&lt;/a&gt;</td></tr>
     * <tr><td>versionid</td><td>String</td><td>No</td><td>The version id parameter is an opaque DateTime value that,
     * when present, specifies the version of the blob to operate on. It's for service version 2019-10-10 and
     * newer.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteImmutabilityPolicyWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.deleteImmutabilityPolicyWithResponse(requestOptions);
    }

    /**
     * The Set Legal Hold operation sets a legal hold on the blob.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * <tr><td>snapshot</td><td>String</td><td>No</td><td>The snapshot parameter is an opaque DateTime value that, when
     * present, specifies the blob snapshot to retrieve. For more information on working with blob snapshots, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob"&gt;Creating
     * a Snapshot of a Blob.&lt;/a&gt;</td></tr>
     * <tr><td>versionid</td><td>String</td><td>No</td><td>The version id parameter is an opaque DateTime value that,
     * when present, specifies the version of the blob to operate on. It's for service version 2019-10-10 and
     * newer.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * 
     * @param legalHold Required. Specifies the legal hold status to set on the blob.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> setLegalHoldWithResponse(boolean legalHold, RequestOptions requestOptions) {
        return this.serviceClient.setLegalHoldWithResponse(legalHold, requestOptions);
    }

    /**
     * The Set Metadata operation sets user-defined metadata for the specified blob as one or more name-value pairs.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-meta</td><td>Map&lt;String, String&gt;</td><td>No</td><td>The metadata headers.</td></tr>
     * <tr><td>x-ms-lease-id</td><td>String</td><td>No</td><td>If specified, the operation only succeeds if the
     * resource's lease is active and matches this ID.</td></tr>
     * <tr><td>x-ms-encryption-key</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later. Specifies
     * the encryption key to use to encrypt the data provided in the request. If not specified, the request will be
     * encrypted with the root account key.</td></tr>
     * <tr><td>x-ms-encryption-key-sha256</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later.
     * Specifies the SHA256 hash of the encryption key used to encrypt the data provided in the request. This header is
     * only used for encryption with a customer-provided key. If the request is authenticated with a client token, this
     * header should be specified using the SHA256 hash of the encryption key.</td></tr>
     * <tr><td>x-ms-encryption-algorithm</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later.
     * Specifies the algorithm to use for encryption. If not specified, the default is AES256. Allowed values:
     * "AES256".</td></tr>
     * <tr><td>x-ms-encryption-scope</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later. Specifies
     * the encryption scope to use to encrypt the data provided in the request. If not specified, the request will be
     * encrypted with the root account key.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>The request should only proceed if an entity matches this
     * string.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>The request should only proceed if no entity matches this
     * string.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the
     * entity was not modified after this time.</td></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the entity
     * was modified after this time.</td></tr>
     * <tr><td>x-ms-if-tags</td><td>String</td><td>No</td><td>Specify a SQL where clause on blob tags to operate only on
     * blobs with a matching value.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> setMetadataWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.setMetadataWithResponse(requestOptions);
    }

    /**
     * The Acquire Lease operation requests a new lease on a blob. The lease lock duration can be 15 to 60 seconds, or
     * can be infinite.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-lease-duration</td><td>Integer</td><td>No</td><td>Specifies the duration of the lease, in seconds,
     * or negative one (-1) for a lease that never expires. A non-infinite lease can be between 15 and 60 seconds. A
     * lease duration cannot be changed using renew or change.</td></tr>
     * <tr><td>x-ms-proposed-lease-id</td><td>String</td><td>No</td><td>Optional. The proposed lease ID for the
     * container.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>The request should only proceed if an entity matches this
     * string.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>The request should only proceed if no entity matches this
     * string.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the
     * entity was not modified after this time.</td></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the entity
     * was modified after this time.</td></tr>
     * <tr><td>x-ms-if-tags</td><td>String</td><td>No</td><td>Specify a SQL where clause on blob tags to operate only on
     * blobs with a matching value.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> acquireLeaseWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.acquireLeaseWithResponse(requestOptions);
    }

    /**
     * The Release Lease operation frees the lease if it's no longer needed, so that another client can immediately
     * acquire a lease against the blob.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>The request should only proceed if an entity matches this
     * string.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>The request should only proceed if no entity matches this
     * string.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the
     * entity was not modified after this time.</td></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the entity
     * was modified after this time.</td></tr>
     * <tr><td>x-ms-if-tags</td><td>String</td><td>No</td><td>Specify a SQL where clause on blob tags to operate only on
     * blobs with a matching value.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param leaseId Required. A lease ID for the source path. If specified, the source path must have an active lease
     * and the lease ID must match.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> releaseLeaseWithResponse(String leaseId, RequestOptions requestOptions) {
        return this.serviceClient.releaseLeaseWithResponse(leaseId, requestOptions);
    }

    /**
     * The Renew Lease operation renews an existing lease.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>The request should only proceed if an entity matches this
     * string.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>The request should only proceed if no entity matches this
     * string.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the
     * entity was not modified after this time.</td></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the entity
     * was modified after this time.</td></tr>
     * <tr><td>x-ms-if-tags</td><td>String</td><td>No</td><td>Specify a SQL where clause on blob tags to operate only on
     * blobs with a matching value.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param leaseId Required. A lease ID for the source path. If specified, the source path must have an active lease
     * and the lease ID must match.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> renewLeaseWithResponse(String leaseId, RequestOptions requestOptions) {
        return this.serviceClient.renewLeaseWithResponse(leaseId, requestOptions);
    }

    /**
     * The Change Lease operation is used to change the ID of an existing lease.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-proposed-lease-id</td><td>String</td><td>No</td><td>Optional. The proposed lease ID for the
     * container.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>The request should only proceed if an entity matches this
     * string.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>The request should only proceed if no entity matches this
     * string.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the
     * entity was not modified after this time.</td></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the entity
     * was modified after this time.</td></tr>
     * <tr><td>x-ms-if-tags</td><td>String</td><td>No</td><td>Specify a SQL where clause on blob tags to operate only on
     * blobs with a matching value.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param leaseId Required. A lease ID for the source path. If specified, the source path must have an active lease
     * and the lease ID must match.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> changeLeaseWithResponse(String leaseId, RequestOptions requestOptions) {
        return this.serviceClient.changeLeaseWithResponse(leaseId, requestOptions);
    }

    /**
     * The Break Lease operation ends a lease and ensures that another client can't acquire a new lease until the
     * current lease period has expired.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-lease-break-period</td><td>Integer</td><td>No</td><td>For a break operation, proposed duration the
     * lease should continue before it is broken, in seconds, between 0 and 60. This break period is only used if it is
     * shorter than the time remaining on the lease. If longer, the time remaining on the lease is used. A new lease
     * will not be available before the break period has expired, but the lease may be held for longer than the break
     * period. If this header does not appear with a break operation, a fixed-duration lease breaks after the remaining
     * lease period elapses, and an infinite lease breaks immediately.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>The request should only proceed if an entity matches this
     * string.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>The request should only proceed if no entity matches this
     * string.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the
     * entity was not modified after this time.</td></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the entity
     * was modified after this time.</td></tr>
     * <tr><td>x-ms-if-tags</td><td>String</td><td>No</td><td>Specify a SQL where clause on blob tags to operate only on
     * blobs with a matching value.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> breakLeaseWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.breakLeaseWithResponse(requestOptions);
    }

    /**
     * The Create Snapshot operation creates a read-only snapshot of a blob.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-meta</td><td>Map&lt;String, String&gt;</td><td>No</td><td>The metadata headers.</td></tr>
     * <tr><td>x-ms-encryption-key</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later. Specifies
     * the encryption key to use to encrypt the data provided in the request. If not specified, the request will be
     * encrypted with the root account key.</td></tr>
     * <tr><td>x-ms-encryption-key-sha256</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later.
     * Specifies the SHA256 hash of the encryption key used to encrypt the data provided in the request. This header is
     * only used for encryption with a customer-provided key. If the request is authenticated with a client token, this
     * header should be specified using the SHA256 hash of the encryption key.</td></tr>
     * <tr><td>x-ms-encryption-algorithm</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later.
     * Specifies the algorithm to use for encryption. If not specified, the default is AES256. Allowed values:
     * "AES256".</td></tr>
     * <tr><td>x-ms-encryption-scope</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later. Specifies
     * the encryption scope to use to encrypt the data provided in the request. If not specified, the request will be
     * encrypted with the root account key.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>The request should only proceed if an entity matches this
     * string.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>The request should only proceed if no entity matches this
     * string.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the
     * entity was not modified after this time.</td></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the entity
     * was modified after this time.</td></tr>
     * <tr><td>x-ms-if-tags</td><td>String</td><td>No</td><td>Specify a SQL where clause on blob tags to operate only on
     * blobs with a matching value.</td></tr>
     * <tr><td>x-ms-lease-id</td><td>String</td><td>No</td><td>If specified, the operation only succeeds if the
     * resource's lease is active and matches this ID.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> createSnapshotWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.createSnapshotWithResponse(requestOptions);
    }

    /**
     * The Start Copy From URL operation copies a blob or an internet resource to a new blob.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-meta</td><td>Map&lt;String, String&gt;</td><td>No</td><td>The metadata headers.</td></tr>
     * <tr><td>x-ms-access-tier</td><td>String</td><td>No</td><td>The tier to be set on the blob. Allowed values: "P4",
     * "P6", "P10", "P15", "P20", "P30", "P40", "P50", "P60", "P70", "P80", "Hot", "Cool", "Archive", "Premium",
     * "Cold".</td></tr>
     * <tr><td>x-ms-rehydrate-priority</td><td>String</td><td>No</td><td>If an object is in rehydrate pending state then
     * this header is returned with priority of rehydrate. Valid values are High and Standard. Allowed values: "High",
     * "Standard".</td></tr>
     * <tr><td>x-ms-source-if-modified-since</td><td>OffsetDateTime</td><td>No</td><td>Specify this header value to
     * operate only on a blob if it has been modified since the specified date/time.</td></tr>
     * <tr><td>x-ms-source-if-unmodified-since</td><td>OffsetDateTime</td><td>No</td><td>Specify this header value to
     * operate only on a blob if it has not been modified since the specified date/time.</td></tr>
     * <tr><td>x-ms-source-if-match</td><td>String</td><td>No</td><td>Specify an ETag value to operate only on blobs
     * with a matching value.</td></tr>
     * <tr><td>x-ms-source-if-none-match</td><td>String</td><td>No</td><td>Specify this header value to operate only on
     * a blob if it has been modified since the specified date/time.</td></tr>
     * <tr><td>x-ms-source-if-tags</td><td>String</td><td>No</td><td>Specify a SQL where clause on blob tags to operate
     * only on blobs with a matching value.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>The request should only proceed if an entity matches this
     * string.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>The request should only proceed if no entity matches this
     * string.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the
     * entity was not modified after this time.</td></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the entity
     * was modified after this time.</td></tr>
     * <tr><td>x-ms-if-tags</td><td>String</td><td>No</td><td>Specify a SQL where clause on blob tags to operate only on
     * blobs with a matching value.</td></tr>
     * <tr><td>x-ms-lease-id</td><td>String</td><td>No</td><td>If specified, the operation only succeeds if the
     * resource's lease is active and matches this ID.</td></tr>
     * <tr><td>x-ms-tags</td><td>String</td><td>No</td><td>Optional. Used to set blob tags in various blob
     * operations.</td></tr>
     * <tr><td>x-ms-seal-blob</td><td>Boolean</td><td>No</td><td>Overrides the sealed state of the destination blob.
     * Service version 2019-12-12 and newer.</td></tr>
     * <tr><td>x-ms-immutability-policy-until-date</td><td>OffsetDateTime</td><td>No</td><td>Specifies the date time
     * when the blobs immutability policy is set to expire.</td></tr>
     * <tr><td>x-ms-immutability-policy-mode</td><td>String</td><td>No</td><td>Specifies the immutability policy mode to
     * set on the blob. Allowed values: "Mutable", "Locked", "Unlocked".</td></tr>
     * <tr><td>x-ms-legal-hold</td><td>Boolean</td><td>No</td><td>Specified if a legal hold should be set on the
     * blob.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up to 2 KB in
     * length that specifies a page blob snapshot. The value should be URL-encoded as it would appear in a request URI.
     * The source blob must either be public or must be authenticated via a shared access signature.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> startCopyFromUrlWithResponse(String copySource, RequestOptions requestOptions) {
        return this.serviceClient.startCopyFromUrlWithResponse(copySource, requestOptions);
    }

    /**
     * The Copy From URL operation copies a blob or an internet resource to a new blob. It will not return a response
     * until the copy is complete.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-meta</td><td>Map&lt;String, String&gt;</td><td>No</td><td>The metadata headers.</td></tr>
     * <tr><td>x-ms-access-tier</td><td>String</td><td>No</td><td>The tier to be set on the blob. Allowed values: "P4",
     * "P6", "P10", "P15", "P20", "P30", "P40", "P50", "P60", "P70", "P80", "Hot", "Cool", "Archive", "Premium",
     * "Cold".</td></tr>
     * <tr><td>x-ms-source-if-modified-since</td><td>OffsetDateTime</td><td>No</td><td>Specify this header value to
     * operate only on a blob if it has been modified since the specified date/time.</td></tr>
     * <tr><td>x-ms-source-if-unmodified-since</td><td>OffsetDateTime</td><td>No</td><td>Specify this header value to
     * operate only on a blob if it has not been modified since the specified date/time.</td></tr>
     * <tr><td>x-ms-source-if-match</td><td>String</td><td>No</td><td>Specify an ETag value to operate only on blobs
     * with a matching value.</td></tr>
     * <tr><td>x-ms-source-if-none-match</td><td>String</td><td>No</td><td>Specify this header value to operate only on
     * a blob if it has been modified since the specified date/time.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>The request should only proceed if an entity matches this
     * string.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>The request should only proceed if no entity matches this
     * string.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the
     * entity was not modified after this time.</td></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the entity
     * was modified after this time.</td></tr>
     * <tr><td>x-ms-if-tags</td><td>String</td><td>No</td><td>Specify a SQL where clause on blob tags to operate only on
     * blobs with a matching value.</td></tr>
     * <tr><td>x-ms-lease-id</td><td>String</td><td>No</td><td>If specified, the operation only succeeds if the
     * resource's lease is active and matches this ID.</td></tr>
     * <tr><td>x-ms-source-content-md5</td><td>String</td><td>No</td><td>Specify the md5 calculated for the range of
     * bytes that must be read from the copy source.</td></tr>
     * <tr><td>x-ms-tags</td><td>String</td><td>No</td><td>Optional. Used to set blob tags in various blob
     * operations.</td></tr>
     * <tr><td>x-ms-immutability-policy-until-date</td><td>OffsetDateTime</td><td>No</td><td>Specifies the date time
     * when the blobs immutability policy is set to expire.</td></tr>
     * <tr><td>x-ms-immutability-policy-mode</td><td>String</td><td>No</td><td>Specifies the immutability policy mode to
     * set on the blob. Allowed values: "Mutable", "Locked", "Unlocked".</td></tr>
     * <tr><td>x-ms-legal-hold</td><td>Boolean</td><td>No</td><td>Specified if a legal hold should be set on the
     * blob.</td></tr>
     * <tr><td>x-ms-copy-source-authorization</td><td>String</td><td>No</td><td>Only Bearer type is supported.
     * Credentials should be a valid OAuth access token to copy source.</td></tr>
     * <tr><td>x-ms-encryption-scope</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later. Specifies
     * the encryption scope to use to encrypt the data provided in the request. If not specified, the request will be
     * encrypted with the root account key.</td></tr>
     * <tr><td>x-ms-copy-source-tags</td><td>String</td><td>No</td><td>Optional, default 'replace'. Indicates if source
     * tags should be copied or replaced with the tags specified by x-ms-tags.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up to 2 KB in
     * length that specifies a page blob snapshot. The value should be URL-encoded as it would appear in a request URI.
     * The source blob must either be public or must be authenticated via a shared access signature.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> copyFromUrlWithResponse(String copySource, RequestOptions requestOptions) {
        return this.serviceClient.copyFromUrlWithResponse(copySource, requestOptions);
    }

    /**
     * The Abort Copy From URL operation aborts a pending Copy From URL operation, and leaves a destination blob with
     * zero length and full metadata.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-lease-id</td><td>String</td><td>No</td><td>If specified, the operation only succeeds if the
     * resource's lease is active and matches this ID.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param copyId The copy identifier provided in the x-ms-copy-id header of the original Copy Blob operation.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> abortCopyFromUrlWithResponse(String copyId, RequestOptions requestOptions) {
        return this.serviceClient.abortCopyFromUrlWithResponse(copyId, requestOptions);
    }

    /**
     * The Set Tier operation sets the tier on a block blob. The operation is allowed on a page blob or block blob, but
     * not on an append blob. A block blob's tier determines Hot/Cool/Archive storage type. This operation does not
     * update the blob's ETag.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>snapshot</td><td>String</td><td>No</td><td>The snapshot parameter is an opaque DateTime value that, when
     * present, specifies the blob snapshot to retrieve. For more information on working with blob snapshots, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob"&gt;Creating
     * a Snapshot of a Blob.&lt;/a&gt;</td></tr>
     * <tr><td>versionid</td><td>String</td><td>No</td><td>The version id parameter is an opaque DateTime value that,
     * when present, specifies the version of the blob to operate on. It's for service version 2019-10-10 and
     * newer.</td></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-rehydrate-priority</td><td>String</td><td>No</td><td>If an object is in rehydrate pending state then
     * this header is returned with priority of rehydrate. Valid values are High and Standard. Allowed values: "High",
     * "Standard".</td></tr>
     * <tr><td>x-ms-lease-id</td><td>String</td><td>No</td><td>If specified, the operation only succeeds if the
     * resource's lease is active and matches this ID.</td></tr>
     * <tr><td>x-ms-if-tags</td><td>String</td><td>No</td><td>Specify a SQL where clause on blob tags to operate only on
     * blobs with a matching value.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param tier Indicates the tier to be set on the blob. Allowed values: "P4", "P6", "P10", "P15", "P20", "P30",
     * "P40", "P50", "P60", "P70", "P80", "Hot", "Cool", "Archive", "Premium", "Cold".
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> setTierWithResponse(String tier, RequestOptions requestOptions) {
        return this.serviceClient.setTierWithResponse(tier, requestOptions);
    }

    /**
     * Returns the sku name and account kind.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> getAccountInfoWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.getAccountInfoWithResponse(requestOptions);
    }

    /**
     * The Get Blob Tags operation enables users to get tags on a blob.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * <tr><td>snapshot</td><td>String</td><td>No</td><td>The snapshot parameter is an opaque DateTime value that, when
     * present, specifies the blob snapshot to retrieve. For more information on working with blob snapshots, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob"&gt;Creating
     * a Snapshot of a Blob.&lt;/a&gt;</td></tr>
     * <tr><td>versionid</td><td>String</td><td>No</td><td>The version id parameter is an opaque DateTime value that,
     * when present, specifies the version of the blob to operate on. It's for service version 2019-10-10 and
     * newer.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-lease-id</td><td>String</td><td>No</td><td>If specified, the operation only succeeds if the
     * resource's lease is active and matches this ID.</td></tr>
     * <tr><td>x-ms-if-tags</td><td>String</td><td>No</td><td>Specify a SQL where clause on blob tags to operate only on
     * blobs with a matching value.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     blobTagSet (Required): [
     *          (Required){
     *             key: String (Required)
     *             value: String (Required)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents blob tags along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getTagsWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.getTagsWithResponse(requestOptions);
    }

    /**
     * The Set Tags operation enables users to set tags on a blob.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * <tr><td>versionid</td><td>String</td><td>No</td><td>The version id parameter is an opaque DateTime value that,
     * when present, specifies the version of the blob to operate on. It's for service version 2019-10-10 and
     * newer.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Content-MD5</td><td>String</td><td>No</td><td>Optional. An MD5 hash of the blob content. Note that this
     * hash is not validated, as the hashes for the individual blocks were validated when each was uploaded.</td></tr>
     * <tr><td>x-ms-content-crc64</td><td>String</td><td>No</td><td>Specify the transactional crc64 for the body, to be
     * validated by the service.</td></tr>
     * <tr><td>x-ms-if-tags</td><td>String</td><td>No</td><td>Specify a SQL where clause on blob tags to operate only on
     * blobs with a matching value.</td></tr>
     * <tr><td>x-ms-lease-id</td><td>String</td><td>No</td><td>If specified, the operation only succeeds if the
     * resource's lease is active and matches this ID.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     blobTagSet (Required): [
     *          (Required){
     *             key: String (Required)
     *             value: String (Required)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param tags The blob tags.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> setTagsWithResponse(BinaryData tags, RequestOptions requestOptions) {
        return this.serviceClient.setTagsWithResponse(tags, requestOptions);
    }

    /**
     * The Download operation reads or downloads a blob from the system, including its metadata and properties. You can
     * also call Download to read a snapshot.
     * 
     * @param snapshot The snapshot parameter is an opaque DateTime value that, when present, specifies the blob
     * snapshot to retrieve. For more information on working with blob snapshots, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob"&gt;Creating
     * a Snapshot of a Blob.&lt;/a&gt;.
     * @param versionId The version id parameter is an opaque DateTime value that, when present, specifies the version
     * of the blob to operate on. It's for service version 2019-10-10 and newer.
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;.
     * @param range Return only the bytes of the blob in the specified range.
     * @param leaseId If specified, the operation only succeeds if the resource's lease is active and matches this ID.
     * @param rangeGetContentMd5 When set to true and specified together with the Range, the service returns the MD5
     * hash for the range, as long as the range is less than or equal to 4 MB in size.
     * @param rangeGetContentCrc64 Optional. When this header is set to true and specified together with the Range
     * header, the service returns the CRC64 hash for the range, as long as the range is less than or equal to 4 MB in
     * size.
     * @param encryptionKey Optional. Version 2019-07-07 and later. Specifies the encryption key to use to encrypt the
     * data provided in the request. If not specified, the request will be encrypted with the root account key.
     * @param encryptionKeySha256 Optional. Version 2019-07-07 and later. Specifies the SHA256 hash of the encryption
     * key used to encrypt the data provided in the request. This header is only used for encryption with a
     * customer-provided key. If the request is authenticated with a client token, this header should be specified using
     * the SHA256 hash of the encryption key.
     * @param encryptionAlgorithm Optional. Version 2019-07-07 and later. Specifies the algorithm to use for encryption.
     * If not specified, the default is AES256.
     * @param ifTags Specify a SQL where clause on blob tags to operate only on blobs with a matching value.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BinaryData download(String snapshot, String versionId, Integer timeout, String range, String leaseId,
        Boolean rangeGetContentMd5, Boolean rangeGetContentCrc64, String encryptionKey, String encryptionKeySha256,
        EncryptionAlgorithmType encryptionAlgorithm, String ifTags, RequestConditions requestConditions) {
        // Generated convenience method for downloadWithResponse
        RequestOptions requestOptions = new RequestOptions();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        if (snapshot != null) {
            requestOptions.addQueryParam("snapshot", snapshot, false);
        }
        if (versionId != null) {
            requestOptions.addQueryParam("versionid", versionId, false);
        }
        if (timeout != null) {
            requestOptions.addQueryParam("timeout", String.valueOf(timeout), false);
        }
        if (range != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-range"), range);
        }
        if (leaseId != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-lease-id"), leaseId);
        }
        if (rangeGetContentMd5 != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-range-get-content-md5"),
                String.valueOf(rangeGetContentMd5));
        }
        if (rangeGetContentCrc64 != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-range-get-content-crc64"),
                String.valueOf(rangeGetContentCrc64));
        }
        if (encryptionKey != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-encryption-key"), encryptionKey);
        }
        if (encryptionKeySha256 != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-encryption-key-sha256"), encryptionKeySha256);
        }
        if (encryptionAlgorithm != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-encryption-algorithm"),
                encryptionAlgorithm.toString());
        }
        if (ifTags != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-if-tags"), ifTags);
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_UNMODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        return downloadWithResponse(requestOptions).getValue();
    }

    /**
     * The Download operation reads or downloads a blob from the system, including its metadata and properties. You can
     * also call Download to read a snapshot.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BinaryData download() {
        // Generated convenience method for downloadWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return downloadWithResponse(requestOptions).getValue();
    }

    /**
     * The Get Properties operation returns all user-defined metadata, standard HTTP properties, and system properties
     * for the blob. It does not return the content of the blob.
     * 
     * @param snapshot The snapshot parameter is an opaque DateTime value that, when present, specifies the blob
     * snapshot to retrieve. For more information on working with blob snapshots, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob"&gt;Creating
     * a Snapshot of a Blob.&lt;/a&gt;.
     * @param versionId The version id parameter is an opaque DateTime value that, when present, specifies the version
     * of the blob to operate on. It's for service version 2019-10-10 and newer.
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;.
     * @param leaseId If specified, the operation only succeeds if the resource's lease is active and matches this ID.
     * @param encryptionKey Optional. Version 2019-07-07 and later. Specifies the encryption key to use to encrypt the
     * data provided in the request. If not specified, the request will be encrypted with the root account key.
     * @param encryptionKeySha256 Optional. Version 2019-07-07 and later. Specifies the SHA256 hash of the encryption
     * key used to encrypt the data provided in the request. This header is only used for encryption with a
     * customer-provided key. If the request is authenticated with a client token, this header should be specified using
     * the SHA256 hash of the encryption key.
     * @param encryptionAlgorithm Optional. Version 2019-07-07 and later. Specifies the algorithm to use for encryption.
     * If not specified, the default is AES256.
     * @param ifTags Specify a SQL where clause on blob tags to operate only on blobs with a matching value.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void getProperties(String snapshot, String versionId, Integer timeout, String leaseId, String encryptionKey,
        String encryptionKeySha256, EncryptionAlgorithmType encryptionAlgorithm, String ifTags,
        RequestConditions requestConditions) {
        // Generated convenience method for getPropertiesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        if (snapshot != null) {
            requestOptions.addQueryParam("snapshot", snapshot, false);
        }
        if (versionId != null) {
            requestOptions.addQueryParam("versionid", versionId, false);
        }
        if (timeout != null) {
            requestOptions.addQueryParam("timeout", String.valueOf(timeout), false);
        }
        if (leaseId != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-lease-id"), leaseId);
        }
        if (encryptionKey != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-encryption-key"), encryptionKey);
        }
        if (encryptionKeySha256 != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-encryption-key-sha256"), encryptionKeySha256);
        }
        if (encryptionAlgorithm != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-encryption-algorithm"),
                encryptionAlgorithm.toString());
        }
        if (ifTags != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-if-tags"), ifTags);
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_UNMODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        getPropertiesWithResponse(requestOptions).getValue();
    }

    /**
     * The Get Properties operation returns all user-defined metadata, standard HTTP properties, and system properties
     * for the blob. It does not return the content of the blob.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void getProperties() {
        // Generated convenience method for getPropertiesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        getPropertiesWithResponse(requestOptions).getValue();
    }

    /**
     * If the storage account's soft delete feature is disabled then, when a blob is deleted, it is permanently removed
     * from the storage account. If the storage account's soft delete feature is enabled, then, when a blob is deleted,
     * it is marked for deletion and becomes inaccessible immediately. However, the blob service retains the blob or
     * snapshot for the number of days specified by the DeleteRetentionPolicy section of [Storage service properties]
     * (Set-Blob-Service-Properties.md). After the specified number of days has passed, the blob's data is permanently
     * removed from the storage account. Note that you continue to be charged for the soft-deleted blob's storage until
     * it is permanently removed. Use the List Blobs API and specify the \"include=deleted\" query parameter to discover
     * which blobs and snapshots have been soft deleted. You can then use the Undelete Blob API to restore a
     * soft-deleted blob. All other operations on a soft-deleted blob or snapshot causes the service to return an HTTP
     * status code of 404 (ResourceNotFound).
     * 
     * @param snapshot The snapshot parameter is an opaque DateTime value that, when present, specifies the blob
     * snapshot to retrieve. For more information on working with blob snapshots, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob"&gt;Creating
     * a Snapshot of a Blob.&lt;/a&gt;.
     * @param versionId The version id parameter is an opaque DateTime value that, when present, specifies the version
     * of the blob to operate on. It's for service version 2019-10-10 and newer.
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;.
     * @param leaseId If specified, the operation only succeeds if the resource's lease is active and matches this ID.
     * @param deleteSnapshots Required if the blob has associated snapshots. Specify one of the following two options:
     * include: Delete the base blob and all of its snapshots. only: Delete only the blob's snapshots and not the blob
     * itself.
     * @param ifTags Specify a SQL where clause on blob tags to operate only on blobs with a matching value.
     * @param blobDeleteType Optional. Only possible value is 'permanent', which specifies to permanently delete a blob
     * if blob soft delete is enabled.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String snapshot, String versionId, Integer timeout, String leaseId,
        DeleteSnapshotsOptionType deleteSnapshots, String ifTags, BlobDeleteType blobDeleteType,
        RequestConditions requestConditions) {
        // Generated convenience method for deleteWithResponse
        RequestOptions requestOptions = new RequestOptions();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        if (snapshot != null) {
            requestOptions.addQueryParam("snapshot", snapshot, false);
        }
        if (versionId != null) {
            requestOptions.addQueryParam("versionid", versionId, false);
        }
        if (timeout != null) {
            requestOptions.addQueryParam("timeout", String.valueOf(timeout), false);
        }
        if (leaseId != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-lease-id"), leaseId);
        }
        if (deleteSnapshots != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-delete-snapshots"), deleteSnapshots.toString());
        }
        if (ifTags != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-if-tags"), ifTags);
        }
        if (blobDeleteType != null) {
            requestOptions.addQueryParam("deletetype", blobDeleteType.toString(), false);
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_UNMODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        deleteWithResponse(requestOptions).getValue();
    }

    /**
     * If the storage account's soft delete feature is disabled then, when a blob is deleted, it is permanently removed
     * from the storage account. If the storage account's soft delete feature is enabled, then, when a blob is deleted,
     * it is marked for deletion and becomes inaccessible immediately. However, the blob service retains the blob or
     * snapshot for the number of days specified by the DeleteRetentionPolicy section of [Storage service properties]
     * (Set-Blob-Service-Properties.md). After the specified number of days has passed, the blob's data is permanently
     * removed from the storage account. Note that you continue to be charged for the soft-deleted blob's storage until
     * it is permanently removed. Use the List Blobs API and specify the \"include=deleted\" query parameter to discover
     * which blobs and snapshots have been soft deleted. You can then use the Undelete Blob API to restore a
     * soft-deleted blob. All other operations on a soft-deleted blob or snapshot causes the service to return an HTTP
     * status code of 404 (ResourceNotFound).
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete() {
        // Generated convenience method for deleteWithResponse
        RequestOptions requestOptions = new RequestOptions();
        deleteWithResponse(requestOptions).getValue();
    }

    /**
     * Undelete a blob that was previously soft deleted.
     * 
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void undelete(Integer timeout) {
        // Generated convenience method for undeleteWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (timeout != null) {
            requestOptions.addQueryParam("timeout", String.valueOf(timeout), false);
        }
        undeleteWithResponse(requestOptions).getValue();
    }

    /**
     * Undelete a blob that was previously soft deleted.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void undelete() {
        // Generated convenience method for undeleteWithResponse
        RequestOptions requestOptions = new RequestOptions();
        undeleteWithResponse(requestOptions).getValue();
    }

    /**
     * Set the expiration time of a blob.
     * 
     * @param expiryOptions Required. Indicates mode of the expiry time.
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;.
     * @param expiresOn The time this blob will expire.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void setExpiry(BlobExpiryOptions expiryOptions, Integer timeout, OffsetDateTime expiresOn) {
        // Generated convenience method for setExpiryWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (timeout != null) {
            requestOptions.addQueryParam("timeout", String.valueOf(timeout), false);
        }
        if (expiresOn != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-expiry-time"),
                String.valueOf(new DateTimeRfc1123(expiresOn)));
        }
        setExpiryWithResponse(expiryOptions.toString(), requestOptions).getValue();
    }

    /**
     * Set the expiration time of a blob.
     * 
     * @param expiryOptions Required. Indicates mode of the expiry time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void setExpiry(BlobExpiryOptions expiryOptions) {
        // Generated convenience method for setExpiryWithResponse
        RequestOptions requestOptions = new RequestOptions();
        setExpiryWithResponse(expiryOptions.toString(), requestOptions).getValue();
    }

    /**
     * The Set HTTP Headers operation sets system properties on the blob.
     * 
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;.
     * @param blobCacheControl Optional. Sets the blob's cache control. If specified, this property is stored with the
     * blob and returned with a read request.
     * @param blobContentType Optional. Sets the blob's content type. If specified, this property is stored with the
     * blob and returned with a read request.
     * @param blobContentMd5 Optional. An MD5 hash of the blob content. Note that this hash is not validated, as the
     * hashes for the individual blocks were validated when each was uploaded.
     * @param blobContentEncoding Optional. Sets the blob's content encoding. If specified, this property is stored with
     * the blob and returned with a read request.
     * @param blobContentLanguage Optional. Set the blob's content language. If specified, this property is stored with
     * the blob and returned with a read request.
     * @param leaseId If specified, the operation only succeeds if the resource's lease is active and matches this ID.
     * @param blobContentDisposition Optional. Sets the blob's content disposition. If specified, this property is
     * stored with the blob and returned with a read request.
     * @param ifTags Specify a SQL where clause on blob tags to operate only on blobs with a matching value.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void setHttpHeaders(Integer timeout, String blobCacheControl, String blobContentType, byte[] blobContentMd5,
        String blobContentEncoding, String blobContentLanguage, String leaseId, String blobContentDisposition,
        String ifTags, RequestConditions requestConditions) {
        // Generated convenience method for setHttpHeadersWithResponse
        RequestOptions requestOptions = new RequestOptions();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        if (timeout != null) {
            requestOptions.addQueryParam("timeout", String.valueOf(timeout), false);
        }
        if (blobCacheControl != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-blob-cache-control"), blobCacheControl);
        }
        if (blobContentType != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-blob-content-type"), blobContentType);
        }
        if (blobContentMd5 != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-blob-content-md5"),
                String.valueOf(blobContentMd5));
        }
        if (blobContentEncoding != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-blob-content-encoding"), blobContentEncoding);
        }
        if (blobContentLanguage != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-blob-content-language"), blobContentLanguage);
        }
        if (leaseId != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-lease-id"), leaseId);
        }
        if (blobContentDisposition != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-blob-content-disposition"),
                blobContentDisposition);
        }
        if (ifTags != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-if-tags"), ifTags);
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_UNMODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        setHttpHeadersWithResponse(requestOptions).getValue();
    }

    /**
     * The Set HTTP Headers operation sets system properties on the blob.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void setHttpHeaders() {
        // Generated convenience method for setHttpHeadersWithResponse
        RequestOptions requestOptions = new RequestOptions();
        setHttpHeadersWithResponse(requestOptions).getValue();
    }

    /**
     * Set the immutability policy of a blob.
     * 
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;.
     * @param ifUnmodifiedSince A date-time value. A request is made under the condition that the resource has not been
     * modified since the specified date-time.
     * @param immutabilityPolicyExpiry Specifies the date time when the blobs immutability policy is set to expire.
     * @param immutabilityPolicyMode Specifies the immutability policy mode to set on the blob.
     * @param snapshot The snapshot parameter is an opaque DateTime value that, when present, specifies the blob
     * snapshot to retrieve. For more information on working with blob snapshots, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob"&gt;Creating
     * a Snapshot of a Blob.&lt;/a&gt;.
     * @param versionId The version id parameter is an opaque DateTime value that, when present, specifies the version
     * of the blob to operate on. It's for service version 2019-10-10 and newer.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void setImmutabilityPolicy(Integer timeout, OffsetDateTime ifUnmodifiedSince,
        OffsetDateTime immutabilityPolicyExpiry, BlobImmutabilityPolicyMode immutabilityPolicyMode, String snapshot,
        String versionId) {
        // Generated convenience method for setImmutabilityPolicyWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (timeout != null) {
            requestOptions.addQueryParam("timeout", String.valueOf(timeout), false);
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_UNMODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        if (immutabilityPolicyExpiry != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-immutability-policy-until-date"),
                String.valueOf(new DateTimeRfc1123(immutabilityPolicyExpiry)));
        }
        if (immutabilityPolicyMode != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-immutability-policy-mode"),
                immutabilityPolicyMode.toString());
        }
        if (snapshot != null) {
            requestOptions.addQueryParam("snapshot", snapshot, false);
        }
        if (versionId != null) {
            requestOptions.addQueryParam("versionid", versionId, false);
        }
        setImmutabilityPolicyWithResponse(requestOptions).getValue();
    }

    /**
     * Set the immutability policy of a blob.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void setImmutabilityPolicy() {
        // Generated convenience method for setImmutabilityPolicyWithResponse
        RequestOptions requestOptions = new RequestOptions();
        setImmutabilityPolicyWithResponse(requestOptions).getValue();
    }

    /**
     * The Delete Immutability Policy operation deletes the immutability policy on the blob.
     * 
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;.
     * @param snapshot The snapshot parameter is an opaque DateTime value that, when present, specifies the blob
     * snapshot to retrieve. For more information on working with blob snapshots, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob"&gt;Creating
     * a Snapshot of a Blob.&lt;/a&gt;.
     * @param versionId The version id parameter is an opaque DateTime value that, when present, specifies the version
     * of the blob to operate on. It's for service version 2019-10-10 and newer.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteImmutabilityPolicy(Integer timeout, String snapshot, String versionId) {
        // Generated convenience method for deleteImmutabilityPolicyWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (timeout != null) {
            requestOptions.addQueryParam("timeout", String.valueOf(timeout), false);
        }
        if (snapshot != null) {
            requestOptions.addQueryParam("snapshot", snapshot, false);
        }
        if (versionId != null) {
            requestOptions.addQueryParam("versionid", versionId, false);
        }
        deleteImmutabilityPolicyWithResponse(requestOptions).getValue();
    }

    /**
     * The Delete Immutability Policy operation deletes the immutability policy on the blob.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteImmutabilityPolicy() {
        // Generated convenience method for deleteImmutabilityPolicyWithResponse
        RequestOptions requestOptions = new RequestOptions();
        deleteImmutabilityPolicyWithResponse(requestOptions).getValue();
    }

    /**
     * The Set Legal Hold operation sets a legal hold on the blob.
     * 
     * @param legalHold Required. Specifies the legal hold status to set on the blob.
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;.
     * @param snapshot The snapshot parameter is an opaque DateTime value that, when present, specifies the blob
     * snapshot to retrieve. For more information on working with blob snapshots, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob"&gt;Creating
     * a Snapshot of a Blob.&lt;/a&gt;.
     * @param versionId The version id parameter is an opaque DateTime value that, when present, specifies the version
     * of the blob to operate on. It's for service version 2019-10-10 and newer.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void setLegalHold(boolean legalHold, Integer timeout, String snapshot, String versionId) {
        // Generated convenience method for setLegalHoldWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (timeout != null) {
            requestOptions.addQueryParam("timeout", String.valueOf(timeout), false);
        }
        if (snapshot != null) {
            requestOptions.addQueryParam("snapshot", snapshot, false);
        }
        if (versionId != null) {
            requestOptions.addQueryParam("versionid", versionId, false);
        }
        setLegalHoldWithResponse(legalHold, requestOptions).getValue();
    }

    /**
     * The Set Legal Hold operation sets a legal hold on the blob.
     * 
     * @param legalHold Required. Specifies the legal hold status to set on the blob.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void setLegalHold(boolean legalHold) {
        // Generated convenience method for setLegalHoldWithResponse
        RequestOptions requestOptions = new RequestOptions();
        setLegalHoldWithResponse(legalHold, requestOptions).getValue();
    }

    /**
     * The Set Metadata operation sets user-defined metadata for the specified blob as one or more name-value pairs.
     * 
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;.
     * @param metadata The metadata headers.
     * @param leaseId If specified, the operation only succeeds if the resource's lease is active and matches this ID.
     * @param encryptionKey Optional. Version 2019-07-07 and later. Specifies the encryption key to use to encrypt the
     * data provided in the request. If not specified, the request will be encrypted with the root account key.
     * @param encryptionKeySha256 Optional. Version 2019-07-07 and later. Specifies the SHA256 hash of the encryption
     * key used to encrypt the data provided in the request. This header is only used for encryption with a
     * customer-provided key. If the request is authenticated with a client token, this header should be specified using
     * the SHA256 hash of the encryption key.
     * @param encryptionAlgorithm Optional. Version 2019-07-07 and later. Specifies the algorithm to use for encryption.
     * If not specified, the default is AES256.
     * @param encryptionScope Optional. Version 2019-07-07 and later. Specifies the encryption scope to use to encrypt
     * the data provided in the request. If not specified, the request will be encrypted with the root account key.
     * @param ifTags Specify a SQL where clause on blob tags to operate only on blobs with a matching value.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void setMetadata(Integer timeout, Map<String, String> metadata, String leaseId, String encryptionKey,
        String encryptionKeySha256, EncryptionAlgorithmType encryptionAlgorithm, String encryptionScope, String ifTags,
        RequestConditions requestConditions) {
        // Generated convenience method for setMetadataWithResponse
        RequestOptions requestOptions = new RequestOptions();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        if (timeout != null) {
            requestOptions.addQueryParam("timeout", String.valueOf(timeout), false);
        }
        if (metadata != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-meta"), String.valueOf(metadata));
        }
        if (leaseId != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-lease-id"), leaseId);
        }
        if (encryptionKey != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-encryption-key"), encryptionKey);
        }
        if (encryptionKeySha256 != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-encryption-key-sha256"), encryptionKeySha256);
        }
        if (encryptionAlgorithm != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-encryption-algorithm"),
                encryptionAlgorithm.toString());
        }
        if (encryptionScope != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-encryption-scope"), encryptionScope);
        }
        if (ifTags != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-if-tags"), ifTags);
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_UNMODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        setMetadataWithResponse(requestOptions).getValue();
    }

    /**
     * The Set Metadata operation sets user-defined metadata for the specified blob as one or more name-value pairs.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void setMetadata() {
        // Generated convenience method for setMetadataWithResponse
        RequestOptions requestOptions = new RequestOptions();
        setMetadataWithResponse(requestOptions).getValue();
    }

    /**
     * The Acquire Lease operation requests a new lease on a blob. The lease lock duration can be 15 to 60 seconds, or
     * can be infinite.
     * 
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;.
     * @param duration Specifies the duration of the lease, in seconds, or negative one (-1) for a lease that never
     * expires. A non-infinite lease can be between 15 and 60 seconds. A lease duration cannot be changed using renew or
     * change.
     * @param proposedLeaseId Optional. The proposed lease ID for the container.
     * @param ifTags Specify a SQL where clause on blob tags to operate only on blobs with a matching value.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void acquireLease(Integer timeout, Integer duration, String proposedLeaseId, String ifTags,
        RequestConditions requestConditions) {
        // Generated convenience method for acquireLeaseWithResponse
        RequestOptions requestOptions = new RequestOptions();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        if (timeout != null) {
            requestOptions.addQueryParam("timeout", String.valueOf(timeout), false);
        }
        if (duration != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-lease-duration"), String.valueOf(duration));
        }
        if (proposedLeaseId != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-proposed-lease-id"), proposedLeaseId);
        }
        if (ifTags != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-if-tags"), ifTags);
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_UNMODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        acquireLeaseWithResponse(requestOptions).getValue();
    }

    /**
     * The Acquire Lease operation requests a new lease on a blob. The lease lock duration can be 15 to 60 seconds, or
     * can be infinite.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void acquireLease() {
        // Generated convenience method for acquireLeaseWithResponse
        RequestOptions requestOptions = new RequestOptions();
        acquireLeaseWithResponse(requestOptions).getValue();
    }

    /**
     * The Release Lease operation frees the lease if it's no longer needed, so that another client can immediately
     * acquire a lease against the blob.
     * 
     * @param leaseId Required. A lease ID for the source path. If specified, the source path must have an active lease
     * and the lease ID must match.
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;.
     * @param ifTags Specify a SQL where clause on blob tags to operate only on blobs with a matching value.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void releaseLease(String leaseId, Integer timeout, String ifTags, RequestConditions requestConditions) {
        // Generated convenience method for releaseLeaseWithResponse
        RequestOptions requestOptions = new RequestOptions();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        if (timeout != null) {
            requestOptions.addQueryParam("timeout", String.valueOf(timeout), false);
        }
        if (ifTags != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-if-tags"), ifTags);
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_UNMODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        releaseLeaseWithResponse(leaseId, requestOptions).getValue();
    }

    /**
     * The Release Lease operation frees the lease if it's no longer needed, so that another client can immediately
     * acquire a lease against the blob.
     * 
     * @param leaseId Required. A lease ID for the source path. If specified, the source path must have an active lease
     * and the lease ID must match.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void releaseLease(String leaseId) {
        // Generated convenience method for releaseLeaseWithResponse
        RequestOptions requestOptions = new RequestOptions();
        releaseLeaseWithResponse(leaseId, requestOptions).getValue();
    }

    /**
     * The Renew Lease operation renews an existing lease.
     * 
     * @param leaseId Required. A lease ID for the source path. If specified, the source path must have an active lease
     * and the lease ID must match.
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;.
     * @param ifTags Specify a SQL where clause on blob tags to operate only on blobs with a matching value.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void renewLease(String leaseId, Integer timeout, String ifTags, RequestConditions requestConditions) {
        // Generated convenience method for renewLeaseWithResponse
        RequestOptions requestOptions = new RequestOptions();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        if (timeout != null) {
            requestOptions.addQueryParam("timeout", String.valueOf(timeout), false);
        }
        if (ifTags != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-if-tags"), ifTags);
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_UNMODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        renewLeaseWithResponse(leaseId, requestOptions).getValue();
    }

    /**
     * The Renew Lease operation renews an existing lease.
     * 
     * @param leaseId Required. A lease ID for the source path. If specified, the source path must have an active lease
     * and the lease ID must match.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void renewLease(String leaseId) {
        // Generated convenience method for renewLeaseWithResponse
        RequestOptions requestOptions = new RequestOptions();
        renewLeaseWithResponse(leaseId, requestOptions).getValue();
    }

    /**
     * The Change Lease operation is used to change the ID of an existing lease.
     * 
     * @param leaseId Required. A lease ID for the source path. If specified, the source path must have an active lease
     * and the lease ID must match.
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;.
     * @param proposedLeaseId Optional. The proposed lease ID for the container.
     * @param ifTags Specify a SQL where clause on blob tags to operate only on blobs with a matching value.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void changeLease(String leaseId, Integer timeout, String proposedLeaseId, String ifTags,
        RequestConditions requestConditions) {
        // Generated convenience method for changeLeaseWithResponse
        RequestOptions requestOptions = new RequestOptions();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        if (timeout != null) {
            requestOptions.addQueryParam("timeout", String.valueOf(timeout), false);
        }
        if (proposedLeaseId != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-proposed-lease-id"), proposedLeaseId);
        }
        if (ifTags != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-if-tags"), ifTags);
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_UNMODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        changeLeaseWithResponse(leaseId, requestOptions).getValue();
    }

    /**
     * The Change Lease operation is used to change the ID of an existing lease.
     * 
     * @param leaseId Required. A lease ID for the source path. If specified, the source path must have an active lease
     * and the lease ID must match.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void changeLease(String leaseId) {
        // Generated convenience method for changeLeaseWithResponse
        RequestOptions requestOptions = new RequestOptions();
        changeLeaseWithResponse(leaseId, requestOptions).getValue();
    }

    /**
     * The Break Lease operation ends a lease and ensures that another client can't acquire a new lease until the
     * current lease period has expired.
     * 
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;.
     * @param breakPeriod For a break operation, proposed duration the lease should continue before it is broken, in
     * seconds, between 0 and 60. This break period is only used if it is shorter than the time remaining on the lease.
     * If longer, the time remaining on the lease is used. A new lease will not be available before the break period has
     * expired, but the lease may be held for longer than the break period. If this header does not appear with a break
     * operation, a fixed-duration lease breaks after the remaining lease period elapses, and an infinite lease breaks
     * immediately.
     * @param ifTags Specify a SQL where clause on blob tags to operate only on blobs with a matching value.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void breakLease(Integer timeout, Integer breakPeriod, String ifTags, RequestConditions requestConditions) {
        // Generated convenience method for breakLeaseWithResponse
        RequestOptions requestOptions = new RequestOptions();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        if (timeout != null) {
            requestOptions.addQueryParam("timeout", String.valueOf(timeout), false);
        }
        if (breakPeriod != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-lease-break-period"), String.valueOf(breakPeriod));
        }
        if (ifTags != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-if-tags"), ifTags);
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_UNMODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        breakLeaseWithResponse(requestOptions).getValue();
    }

    /**
     * The Break Lease operation ends a lease and ensures that another client can't acquire a new lease until the
     * current lease period has expired.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void breakLease() {
        // Generated convenience method for breakLeaseWithResponse
        RequestOptions requestOptions = new RequestOptions();
        breakLeaseWithResponse(requestOptions).getValue();
    }

    /**
     * The Create Snapshot operation creates a read-only snapshot of a blob.
     * 
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;.
     * @param metadata The metadata headers.
     * @param encryptionKey Optional. Version 2019-07-07 and later. Specifies the encryption key to use to encrypt the
     * data provided in the request. If not specified, the request will be encrypted with the root account key.
     * @param encryptionKeySha256 Optional. Version 2019-07-07 and later. Specifies the SHA256 hash of the encryption
     * key used to encrypt the data provided in the request. This header is only used for encryption with a
     * customer-provided key. If the request is authenticated with a client token, this header should be specified using
     * the SHA256 hash of the encryption key.
     * @param encryptionAlgorithm Optional. Version 2019-07-07 and later. Specifies the algorithm to use for encryption.
     * If not specified, the default is AES256.
     * @param encryptionScope Optional. Version 2019-07-07 and later. Specifies the encryption scope to use to encrypt
     * the data provided in the request. If not specified, the request will be encrypted with the root account key.
     * @param ifTags Specify a SQL where clause on blob tags to operate only on blobs with a matching value.
     * @param leaseId If specified, the operation only succeeds if the resource's lease is active and matches this ID.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void createSnapshot(Integer timeout, Map<String, String> metadata, String encryptionKey,
        String encryptionKeySha256, EncryptionAlgorithmType encryptionAlgorithm, String encryptionScope, String ifTags,
        String leaseId, RequestConditions requestConditions) {
        // Generated convenience method for createSnapshotWithResponse
        RequestOptions requestOptions = new RequestOptions();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        if (timeout != null) {
            requestOptions.addQueryParam("timeout", String.valueOf(timeout), false);
        }
        if (metadata != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-meta"), String.valueOf(metadata));
        }
        if (encryptionKey != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-encryption-key"), encryptionKey);
        }
        if (encryptionKeySha256 != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-encryption-key-sha256"), encryptionKeySha256);
        }
        if (encryptionAlgorithm != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-encryption-algorithm"),
                encryptionAlgorithm.toString());
        }
        if (encryptionScope != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-encryption-scope"), encryptionScope);
        }
        if (ifTags != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-if-tags"), ifTags);
        }
        if (leaseId != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-lease-id"), leaseId);
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_UNMODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        createSnapshotWithResponse(requestOptions).getValue();
    }

    /**
     * The Create Snapshot operation creates a read-only snapshot of a blob.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void createSnapshot() {
        // Generated convenience method for createSnapshotWithResponse
        RequestOptions requestOptions = new RequestOptions();
        createSnapshotWithResponse(requestOptions).getValue();
    }

    /**
     * The Start Copy From URL operation copies a blob or an internet resource to a new blob.
     * 
     * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up to 2 KB in
     * length that specifies a page blob snapshot. The value should be URL-encoded as it would appear in a request URI.
     * The source blob must either be public or must be authenticated via a shared access signature.
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;.
     * @param metadata The metadata headers.
     * @param tier The tier to be set on the blob.
     * @param rehydratePriority If an object is in rehydrate pending state then this header is returned with priority of
     * rehydrate. Valid values are High and Standard.
     * @param sourceIfModifiedSince Specify this header value to operate only on a blob if it has been modified since
     * the specified date/time.
     * @param sourceIfUnmodifiedSince Specify this header value to operate only on a blob if it has not been modified
     * since the specified date/time.
     * @param sourceIfMatch Specify an ETag value to operate only on blobs with a matching value.
     * @param sourceIfNoneMatch Specify this header value to operate only on a blob if it has been modified since the
     * specified date/time.
     * @param sourceIfTags Specify a SQL where clause on blob tags to operate only on blobs with a matching value.
     * @param ifTags Specify a SQL where clause on blob tags to operate only on blobs with a matching value.
     * @param leaseId If specified, the operation only succeeds if the resource's lease is active and matches this ID.
     * @param blobTagsString Optional. Used to set blob tags in various blob operations.
     * @param sealBlob Overrides the sealed state of the destination blob. Service version 2019-12-12 and newer.
     * @param immutabilityPolicyExpiry Specifies the date time when the blobs immutability policy is set to expire.
     * @param immutabilityPolicyMode Specifies the immutability policy mode to set on the blob.
     * @param legalHold Specified if a legal hold should be set on the blob.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void startCopyFromUrl(String copySource, Integer timeout, Map<String, String> metadata, AccessTier tier,
        RehydratePriority rehydratePriority, OffsetDateTime sourceIfModifiedSince,
        OffsetDateTime sourceIfUnmodifiedSince, String sourceIfMatch, String sourceIfNoneMatch, String sourceIfTags,
        String ifTags, String leaseId, String blobTagsString, Boolean sealBlob, OffsetDateTime immutabilityPolicyExpiry,
        BlobImmutabilityPolicyMode immutabilityPolicyMode, Boolean legalHold, RequestConditions requestConditions) {
        // Generated convenience method for startCopyFromUrlWithResponse
        RequestOptions requestOptions = new RequestOptions();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        if (timeout != null) {
            requestOptions.addQueryParam("timeout", String.valueOf(timeout), false);
        }
        if (metadata != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-meta"), String.valueOf(metadata));
        }
        if (tier != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-access-tier"), tier.toString());
        }
        if (rehydratePriority != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-rehydrate-priority"),
                rehydratePriority.toString());
        }
        if (sourceIfModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-source-if-modified-since"),
                String.valueOf(new DateTimeRfc1123(sourceIfModifiedSince)));
        }
        if (sourceIfUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-source-if-unmodified-since"),
                String.valueOf(new DateTimeRfc1123(sourceIfUnmodifiedSince)));
        }
        if (sourceIfMatch != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-source-if-match"), sourceIfMatch);
        }
        if (sourceIfNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-source-if-none-match"), sourceIfNoneMatch);
        }
        if (sourceIfTags != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-source-if-tags"), sourceIfTags);
        }
        if (ifTags != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-if-tags"), ifTags);
        }
        if (leaseId != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-lease-id"), leaseId);
        }
        if (blobTagsString != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-tags"), blobTagsString);
        }
        if (sealBlob != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-seal-blob"), String.valueOf(sealBlob));
        }
        if (immutabilityPolicyExpiry != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-immutability-policy-until-date"),
                String.valueOf(new DateTimeRfc1123(immutabilityPolicyExpiry)));
        }
        if (immutabilityPolicyMode != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-immutability-policy-mode"),
                immutabilityPolicyMode.toString());
        }
        if (legalHold != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-legal-hold"), String.valueOf(legalHold));
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_UNMODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        startCopyFromUrlWithResponse(copySource, requestOptions).getValue();
    }

    /**
     * The Start Copy From URL operation copies a blob or an internet resource to a new blob.
     * 
     * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up to 2 KB in
     * length that specifies a page blob snapshot. The value should be URL-encoded as it would appear in a request URI.
     * The source blob must either be public or must be authenticated via a shared access signature.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void startCopyFromUrl(String copySource) {
        // Generated convenience method for startCopyFromUrlWithResponse
        RequestOptions requestOptions = new RequestOptions();
        startCopyFromUrlWithResponse(copySource, requestOptions).getValue();
    }

    /**
     * The Copy From URL operation copies a blob or an internet resource to a new blob. It will not return a response
     * until the copy is complete.
     * 
     * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up to 2 KB in
     * length that specifies a page blob snapshot. The value should be URL-encoded as it would appear in a request URI.
     * The source blob must either be public or must be authenticated via a shared access signature.
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;.
     * @param metadata The metadata headers.
     * @param tier The tier to be set on the blob.
     * @param sourceIfModifiedSince Specify this header value to operate only on a blob if it has been modified since
     * the specified date/time.
     * @param sourceIfUnmodifiedSince Specify this header value to operate only on a blob if it has not been modified
     * since the specified date/time.
     * @param sourceIfMatch Specify an ETag value to operate only on blobs with a matching value.
     * @param sourceIfNoneMatch Specify this header value to operate only on a blob if it has been modified since the
     * specified date/time.
     * @param ifTags Specify a SQL where clause on blob tags to operate only on blobs with a matching value.
     * @param leaseId If specified, the operation only succeeds if the resource's lease is active and matches this ID.
     * @param sourceContentMd5 Specify the md5 calculated for the range of bytes that must be read from the copy source.
     * @param blobTagsString Optional. Used to set blob tags in various blob operations.
     * @param immutabilityPolicyExpiry Specifies the date time when the blobs immutability policy is set to expire.
     * @param immutabilityPolicyMode Specifies the immutability policy mode to set on the blob.
     * @param legalHold Specified if a legal hold should be set on the blob.
     * @param copySourceAuthorization Only Bearer type is supported. Credentials should be a valid OAuth access token to
     * copy source.
     * @param encryptionScope Optional. Version 2019-07-07 and later. Specifies the encryption scope to use to encrypt
     * the data provided in the request. If not specified, the request will be encrypted with the root account key.
     * @param copySourceTags Optional, default 'replace'. Indicates if source tags should be copied or replaced with the
     * tags specified by x-ms-tags.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void copyFromUrl(String copySource, Integer timeout, Map<String, String> metadata, AccessTier tier,
        OffsetDateTime sourceIfModifiedSince, OffsetDateTime sourceIfUnmodifiedSince, String sourceIfMatch,
        String sourceIfNoneMatch, String ifTags, String leaseId, String sourceContentMd5, String blobTagsString,
        OffsetDateTime immutabilityPolicyExpiry, BlobImmutabilityPolicyMode immutabilityPolicyMode, Boolean legalHold,
        String copySourceAuthorization, String encryptionScope, String copySourceTags,
        RequestConditions requestConditions) {
        // Generated convenience method for copyFromUrlWithResponse
        RequestOptions requestOptions = new RequestOptions();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        if (timeout != null) {
            requestOptions.addQueryParam("timeout", String.valueOf(timeout), false);
        }
        if (metadata != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-meta"), String.valueOf(metadata));
        }
        if (tier != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-access-tier"), tier.toString());
        }
        if (sourceIfModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-source-if-modified-since"),
                String.valueOf(new DateTimeRfc1123(sourceIfModifiedSince)));
        }
        if (sourceIfUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-source-if-unmodified-since"),
                String.valueOf(new DateTimeRfc1123(sourceIfUnmodifiedSince)));
        }
        if (sourceIfMatch != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-source-if-match"), sourceIfMatch);
        }
        if (sourceIfNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-source-if-none-match"), sourceIfNoneMatch);
        }
        if (ifTags != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-if-tags"), ifTags);
        }
        if (leaseId != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-lease-id"), leaseId);
        }
        if (sourceContentMd5 != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-source-content-md5"), sourceContentMd5);
        }
        if (blobTagsString != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-tags"), blobTagsString);
        }
        if (immutabilityPolicyExpiry != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-immutability-policy-until-date"),
                String.valueOf(new DateTimeRfc1123(immutabilityPolicyExpiry)));
        }
        if (immutabilityPolicyMode != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-immutability-policy-mode"),
                immutabilityPolicyMode.toString());
        }
        if (legalHold != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-legal-hold"), String.valueOf(legalHold));
        }
        if (copySourceAuthorization != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-copy-source-authorization"),
                copySourceAuthorization);
        }
        if (encryptionScope != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-encryption-scope"), encryptionScope);
        }
        if (copySourceTags != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-copy-source-tags"), copySourceTags);
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_UNMODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        copyFromUrlWithResponse(copySource, requestOptions).getValue();
    }

    /**
     * The Copy From URL operation copies a blob or an internet resource to a new blob. It will not return a response
     * until the copy is complete.
     * 
     * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up to 2 KB in
     * length that specifies a page blob snapshot. The value should be URL-encoded as it would appear in a request URI.
     * The source blob must either be public or must be authenticated via a shared access signature.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void copyFromUrl(String copySource) {
        // Generated convenience method for copyFromUrlWithResponse
        RequestOptions requestOptions = new RequestOptions();
        copyFromUrlWithResponse(copySource, requestOptions).getValue();
    }

    /**
     * The Abort Copy From URL operation aborts a pending Copy From URL operation, and leaves a destination blob with
     * zero length and full metadata.
     * 
     * @param copyId The copy identifier provided in the x-ms-copy-id header of the original Copy Blob operation.
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;.
     * @param leaseId If specified, the operation only succeeds if the resource's lease is active and matches this ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void abortCopyFromUrl(String copyId, Integer timeout, String leaseId) {
        // Generated convenience method for abortCopyFromUrlWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (timeout != null) {
            requestOptions.addQueryParam("timeout", String.valueOf(timeout), false);
        }
        if (leaseId != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-lease-id"), leaseId);
        }
        abortCopyFromUrlWithResponse(copyId, requestOptions).getValue();
    }

    /**
     * The Abort Copy From URL operation aborts a pending Copy From URL operation, and leaves a destination blob with
     * zero length and full metadata.
     * 
     * @param copyId The copy identifier provided in the x-ms-copy-id header of the original Copy Blob operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void abortCopyFromUrl(String copyId) {
        // Generated convenience method for abortCopyFromUrlWithResponse
        RequestOptions requestOptions = new RequestOptions();
        abortCopyFromUrlWithResponse(copyId, requestOptions).getValue();
    }

    /**
     * The Set Tier operation sets the tier on a block blob. The operation is allowed on a page blob or block blob, but
     * not on an append blob. A block blob's tier determines Hot/Cool/Archive storage type. This operation does not
     * update the blob's ETag.
     * 
     * @param tier Indicates the tier to be set on the blob.
     * @param snapshot The snapshot parameter is an opaque DateTime value that, when present, specifies the blob
     * snapshot to retrieve. For more information on working with blob snapshots, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob"&gt;Creating
     * a Snapshot of a Blob.&lt;/a&gt;.
     * @param versionId The version id parameter is an opaque DateTime value that, when present, specifies the version
     * of the blob to operate on. It's for service version 2019-10-10 and newer.
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;.
     * @param rehydratePriority If an object is in rehydrate pending state then this header is returned with priority of
     * rehydrate. Valid values are High and Standard.
     * @param leaseId If specified, the operation only succeeds if the resource's lease is active and matches this ID.
     * @param ifTags Specify a SQL where clause on blob tags to operate only on blobs with a matching value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void setTier(AccessTier tier, String snapshot, String versionId, Integer timeout,
        RehydratePriority rehydratePriority, String leaseId, String ifTags) {
        // Generated convenience method for setTierWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (snapshot != null) {
            requestOptions.addQueryParam("snapshot", snapshot, false);
        }
        if (versionId != null) {
            requestOptions.addQueryParam("versionid", versionId, false);
        }
        if (timeout != null) {
            requestOptions.addQueryParam("timeout", String.valueOf(timeout), false);
        }
        if (rehydratePriority != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-rehydrate-priority"),
                rehydratePriority.toString());
        }
        if (leaseId != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-lease-id"), leaseId);
        }
        if (ifTags != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-if-tags"), ifTags);
        }
        setTierWithResponse(tier.toString(), requestOptions).getValue();
    }

    /**
     * The Set Tier operation sets the tier on a block blob. The operation is allowed on a page blob or block blob, but
     * not on an append blob. A block blob's tier determines Hot/Cool/Archive storage type. This operation does not
     * update the blob's ETag.
     * 
     * @param tier Indicates the tier to be set on the blob.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void setTier(AccessTier tier) {
        // Generated convenience method for setTierWithResponse
        RequestOptions requestOptions = new RequestOptions();
        setTierWithResponse(tier.toString(), requestOptions).getValue();
    }

    /**
     * Returns the sku name and account kind.
     * 
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void getAccountInfo(Integer timeout) {
        // Generated convenience method for getAccountInfoWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (timeout != null) {
            requestOptions.addQueryParam("timeout", String.valueOf(timeout), false);
        }
        getAccountInfoWithResponse(requestOptions).getValue();
    }

    /**
     * Returns the sku name and account kind.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void getAccountInfo() {
        // Generated convenience method for getAccountInfoWithResponse
        RequestOptions requestOptions = new RequestOptions();
        getAccountInfoWithResponse(requestOptions).getValue();
    }

    /**
     * The Get Blob Tags operation enables users to get tags on a blob.
     * 
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;.
     * @param snapshot The snapshot parameter is an opaque DateTime value that, when present, specifies the blob
     * snapshot to retrieve. For more information on working with blob snapshots, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob"&gt;Creating
     * a Snapshot of a Blob.&lt;/a&gt;.
     * @param versionId The version id parameter is an opaque DateTime value that, when present, specifies the version
     * of the blob to operate on. It's for service version 2019-10-10 and newer.
     * @param leaseId If specified, the operation only succeeds if the resource's lease is active and matches this ID.
     * @param ifTags Specify a SQL where clause on blob tags to operate only on blobs with a matching value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents blob tags.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BlobTags getTags(Integer timeout, String snapshot, String versionId, String leaseId, String ifTags) {
        // Generated convenience method for getTagsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (timeout != null) {
            requestOptions.addQueryParam("timeout", String.valueOf(timeout), false);
        }
        if (snapshot != null) {
            requestOptions.addQueryParam("snapshot", snapshot, false);
        }
        if (versionId != null) {
            requestOptions.addQueryParam("versionid", versionId, false);
        }
        if (leaseId != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-lease-id"), leaseId);
        }
        if (ifTags != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-if-tags"), ifTags);
        }
        return getTagsWithResponse(requestOptions).getValue().toObject(BlobTags.class);
    }

    /**
     * The Get Blob Tags operation enables users to get tags on a blob.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents blob tags.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BlobTags getTags() {
        // Generated convenience method for getTagsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getTagsWithResponse(requestOptions).getValue().toObject(BlobTags.class);
    }

    /**
     * The Set Tags operation enables users to set tags on a blob.
     * 
     * @param tags The blob tags.
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;.
     * @param versionId The version id parameter is an opaque DateTime value that, when present, specifies the version
     * of the blob to operate on. It's for service version 2019-10-10 and newer.
     * @param transactionalContentMD5 Optional. An MD5 hash of the blob content. Note that this hash is not validated,
     * as the hashes for the individual blocks were validated when each was uploaded.
     * @param transactionalContentCrc64 Specify the transactional crc64 for the body, to be validated by the service.
     * @param ifTags Specify a SQL where clause on blob tags to operate only on blobs with a matching value.
     * @param leaseId If specified, the operation only succeeds if the resource's lease is active and matches this ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void setTags(BlobTags tags, Integer timeout, String versionId, String transactionalContentMD5,
        String transactionalContentCrc64, String ifTags, String leaseId) {
        // Generated convenience method for setTagsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (timeout != null) {
            requestOptions.addQueryParam("timeout", String.valueOf(timeout), false);
        }
        if (versionId != null) {
            requestOptions.addQueryParam("versionid", versionId, false);
        }
        if (transactionalContentMD5 != null) {
            requestOptions.setHeader(HttpHeaderName.CONTENT_MD5, transactionalContentMD5);
        }
        if (transactionalContentCrc64 != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-content-crc64"), transactionalContentCrc64);
        }
        if (ifTags != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-if-tags"), ifTags);
        }
        if (leaseId != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-lease-id"), leaseId);
        }
        setTagsWithResponse(BinaryData.fromObject(tags), requestOptions).getValue();
    }

    /**
     * The Set Tags operation enables users to set tags on a blob.
     * 
     * @param tags The blob tags.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void setTags(BlobTags tags) {
        // Generated convenience method for setTagsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        setTagsWithResponse(BinaryData.fromObject(tags), requestOptions).getValue();
    }
}
