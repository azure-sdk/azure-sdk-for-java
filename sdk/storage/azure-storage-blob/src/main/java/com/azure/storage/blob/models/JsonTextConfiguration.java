// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.storage.blob.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Represents the JSON text configuration.
 */
@Fluent
public final class JsonTextConfiguration implements JsonSerializable<JsonTextConfiguration> {
    /*
     * The string used to separate records.
     */
    @Generated
    private String recordSeparator;

    /**
     * Creates an instance of JsonTextConfiguration class.
     */
    @Generated
    public JsonTextConfiguration() {
    }

    /**
     * Get the recordSeparator property: The string used to separate records.
     * 
     * @return the recordSeparator value.
     */
    @Generated
    public String getRecordSeparator() {
        return this.recordSeparator;
    }

    /**
     * Set the recordSeparator property: The string used to separate records.
     * 
     * @param recordSeparator the recordSeparator value to set.
     * @return the JsonTextConfiguration object itself.
     */
    @Generated
    public JsonTextConfiguration setRecordSeparator(String recordSeparator) {
        this.recordSeparator = recordSeparator;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("recordSeparator", this.recordSeparator);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of JsonTextConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of JsonTextConfiguration if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the JsonTextConfiguration.
     */
    @Generated
    public static JsonTextConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            JsonTextConfiguration deserializedJsonTextConfiguration = new JsonTextConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("recordSeparator".equals(fieldName)) {
                    deserializedJsonTextConfiguration.recordSeparator = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedJsonTextConfiguration;
        });
    }
}
