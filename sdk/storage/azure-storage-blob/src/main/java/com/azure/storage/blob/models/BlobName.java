// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.storage.blob.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Represents a blob name.
 */
@Immutable
public final class BlobName implements JsonSerializable<BlobName> {
    /*
     * Whether the blob name is encoded.
     */
    @Generated
    private final boolean encoded;

    /*
     * The blob name.
     */
    @Generated
    private final String content;

    /**
     * Creates an instance of BlobName class.
     * 
     * @param encoded the encoded value to set.
     * @param content the content value to set.
     */
    @Generated
    private BlobName(boolean encoded, String content) {
        this.encoded = encoded;
        this.content = content;
    }

    /**
     * Get the encoded property: Whether the blob name is encoded.
     * 
     * @return the encoded value.
     */
    @Generated
    public boolean isEncoded() {
        return this.encoded;
    }

    /**
     * Get the content property: The blob name.
     * 
     * @return the content value.
     */
    @Generated
    public String getContent() {
        return this.content;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("encoded", this.encoded);
        jsonWriter.writeStringField("content", this.content);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BlobName from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BlobName if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the BlobName.
     */
    @Generated
    public static BlobName fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            boolean encoded = false;
            String content = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("encoded".equals(fieldName)) {
                    encoded = reader.getBoolean();
                } else if ("content".equals(fieldName)) {
                    content = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return new BlobName(encoded, content);
        });
    }
}
