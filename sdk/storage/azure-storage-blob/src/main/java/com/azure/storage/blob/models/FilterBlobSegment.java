// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.storage.blob.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The result of a Filter Blobs API call.
 */
@Immutable
public final class FilterBlobSegment implements JsonSerializable<FilterBlobSegment> {
    /*
     * The service endpoint.
     */
    @Generated
    private final String serviceEndpoint;

    /*
     * The filter for the blobs.
     */
    @Generated
    private final String where;

    /*
     * The blob segment.
     */
    @Generated
    private final List<FilterBlobItem> blobs;

    /*
     * The next marker of the blobs.
     */
    @Generated
    private String nextMarker;

    /**
     * Creates an instance of FilterBlobSegment class.
     * 
     * @param serviceEndpoint the serviceEndpoint value to set.
     * @param where the where value to set.
     * @param blobs the blobs value to set.
     */
    @Generated
    private FilterBlobSegment(String serviceEndpoint, String where, List<FilterBlobItem> blobs) {
        this.serviceEndpoint = serviceEndpoint;
        this.where = where;
        this.blobs = blobs;
    }

    /**
     * Get the serviceEndpoint property: The service endpoint.
     * 
     * @return the serviceEndpoint value.
     */
    @Generated
    public String getServiceEndpoint() {
        return this.serviceEndpoint;
    }

    /**
     * Get the where property: The filter for the blobs.
     * 
     * @return the where value.
     */
    @Generated
    public String getWhere() {
        return this.where;
    }

    /**
     * Get the blobs property: The blob segment.
     * 
     * @return the blobs value.
     */
    @Generated
    public List<FilterBlobItem> getBlobs() {
        return this.blobs;
    }

    /**
     * Get the nextMarker property: The next marker of the blobs.
     * 
     * @return the nextMarker value.
     */
    @Generated
    public String getNextMarker() {
        return this.nextMarker;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("serviceEndpoint", this.serviceEndpoint);
        jsonWriter.writeStringField("where", this.where);
        jsonWriter.writeArrayField("blobs", this.blobs, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("nextMarker", this.nextMarker);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FilterBlobSegment from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FilterBlobSegment if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the FilterBlobSegment.
     */
    @Generated
    public static FilterBlobSegment fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String serviceEndpoint = null;
            String where = null;
            List<FilterBlobItem> blobs = null;
            String nextMarker = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("serviceEndpoint".equals(fieldName)) {
                    serviceEndpoint = reader.getString();
                } else if ("where".equals(fieldName)) {
                    where = reader.getString();
                } else if ("blobs".equals(fieldName)) {
                    blobs = reader.readArray(reader1 -> FilterBlobItem.fromJson(reader1));
                } else if ("nextMarker".equals(fieldName)) {
                    nextMarker = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            FilterBlobSegment deserializedFilterBlobSegment = new FilterBlobSegment(serviceEndpoint, where, blobs);
            deserializedFilterBlobSegment.nextMarker = nextMarker;

            return deserializedFilterBlobSegment;
        });
    }
}
