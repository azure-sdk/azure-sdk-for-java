// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.storage.blob.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * A user delegation key.
 */
@Immutable
public final class UserDelegationKey implements JsonSerializable<UserDelegationKey> {
    /*
     * The Azure Active Directory object ID in GUID format.
     */
    @Generated
    private final String signedOid;

    /*
     * The Azure Active Directory tenant ID in GUID format.
     */
    @Generated
    private final String signedTid;

    /*
     * The date-time the key is active.
     */
    @Generated
    private final String signedStart;

    /*
     * The date-time the key expires.
     */
    @Generated
    private final String signedExpiry;

    /*
     * Abbreviation of the Azure Storage service that accepts the key.
     */
    @Generated
    private final String signedService;

    /*
     * The service version that created the key.
     */
    @Generated
    private final String signedVersion;

    /*
     * The key as a base64 string.
     */
    @Generated
    private final byte[] value;

    /**
     * Creates an instance of UserDelegationKey class.
     * 
     * @param signedOid the signedOid value to set.
     * @param signedTid the signedTid value to set.
     * @param signedStart the signedStart value to set.
     * @param signedExpiry the signedExpiry value to set.
     * @param signedService the signedService value to set.
     * @param signedVersion the signedVersion value to set.
     * @param value the value value to set.
     */
    @Generated
    private UserDelegationKey(String signedOid, String signedTid, String signedStart, String signedExpiry,
        String signedService, String signedVersion, byte[] value) {
        this.signedOid = signedOid;
        this.signedTid = signedTid;
        this.signedStart = signedStart;
        this.signedExpiry = signedExpiry;
        this.signedService = signedService;
        this.signedVersion = signedVersion;
        this.value = value;
    }

    /**
     * Get the signedOid property: The Azure Active Directory object ID in GUID format.
     * 
     * @return the signedOid value.
     */
    @Generated
    public String getSignedOid() {
        return this.signedOid;
    }

    /**
     * Get the signedTid property: The Azure Active Directory tenant ID in GUID format.
     * 
     * @return the signedTid value.
     */
    @Generated
    public String getSignedTid() {
        return this.signedTid;
    }

    /**
     * Get the signedStart property: The date-time the key is active.
     * 
     * @return the signedStart value.
     */
    @Generated
    public String getSignedStart() {
        return this.signedStart;
    }

    /**
     * Get the signedExpiry property: The date-time the key expires.
     * 
     * @return the signedExpiry value.
     */
    @Generated
    public String getSignedExpiry() {
        return this.signedExpiry;
    }

    /**
     * Get the signedService property: Abbreviation of the Azure Storage service that accepts the key.
     * 
     * @return the signedService value.
     */
    @Generated
    public String getSignedService() {
        return this.signedService;
    }

    /**
     * Get the signedVersion property: The service version that created the key.
     * 
     * @return the signedVersion value.
     */
    @Generated
    public String getSignedVersion() {
        return this.signedVersion;
    }

    /**
     * Get the value property: The key as a base64 string.
     * 
     * @return the value value.
     */
    @Generated
    public byte[] getValue() {
        return CoreUtils.clone(this.value);
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("signedOid", this.signedOid);
        jsonWriter.writeStringField("signedTid", this.signedTid);
        jsonWriter.writeStringField("signedStart", this.signedStart);
        jsonWriter.writeStringField("signedExpiry", this.signedExpiry);
        jsonWriter.writeStringField("signedService", this.signedService);
        jsonWriter.writeStringField("signedVersion", this.signedVersion);
        jsonWriter.writeBinaryField("value", this.value);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UserDelegationKey from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UserDelegationKey if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the UserDelegationKey.
     */
    @Generated
    public static UserDelegationKey fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String signedOid = null;
            String signedTid = null;
            String signedStart = null;
            String signedExpiry = null;
            String signedService = null;
            String signedVersion = null;
            byte[] value = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("signedOid".equals(fieldName)) {
                    signedOid = reader.getString();
                } else if ("signedTid".equals(fieldName)) {
                    signedTid = reader.getString();
                } else if ("signedStart".equals(fieldName)) {
                    signedStart = reader.getString();
                } else if ("signedExpiry".equals(fieldName)) {
                    signedExpiry = reader.getString();
                } else if ("signedService".equals(fieldName)) {
                    signedService = reader.getString();
                } else if ("signedVersion".equals(fieldName)) {
                    signedVersion = reader.getString();
                } else if ("value".equals(fieldName)) {
                    value = reader.getBinary();
                } else {
                    reader.skipChildren();
                }
            }
            return new UserDelegationKey(signedOid, signedTid, signedStart, signedExpiry, signedService, signedVersion,
                value);
        });
    }
}
