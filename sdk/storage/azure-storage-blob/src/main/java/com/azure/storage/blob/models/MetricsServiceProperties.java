// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.storage.blob.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The metrics service properties.
 */
@Immutable
public final class MetricsServiceProperties implements JsonSerializable<MetricsServiceProperties> {
    /*
     * The hour metrics properties.
     */
    @Generated
    private final MetricsProperties hourMetrics;

    /*
     * The minute metrics properties.
     */
    @Generated
    private final MetricsProperties minuteMetrics;

    /**
     * Creates an instance of MetricsServiceProperties class.
     * 
     * @param hourMetrics the hourMetrics value to set.
     * @param minuteMetrics the minuteMetrics value to set.
     */
    @Generated
    public MetricsServiceProperties(MetricsProperties hourMetrics, MetricsProperties minuteMetrics) {
        this.hourMetrics = hourMetrics;
        this.minuteMetrics = minuteMetrics;
    }

    /**
     * Get the hourMetrics property: The hour metrics properties.
     * 
     * @return the hourMetrics value.
     */
    @Generated
    public MetricsProperties getHourMetrics() {
        return this.hourMetrics;
    }

    /**
     * Get the minuteMetrics property: The minute metrics properties.
     * 
     * @return the minuteMetrics value.
     */
    @Generated
    public MetricsProperties getMinuteMetrics() {
        return this.minuteMetrics;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("hourMetrics", this.hourMetrics);
        jsonWriter.writeJsonField("minuteMetrics", this.minuteMetrics);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MetricsServiceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MetricsServiceProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MetricsServiceProperties.
     */
    @Generated
    public static MetricsServiceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MetricsProperties hourMetrics = null;
            MetricsProperties minuteMetrics = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("hourMetrics".equals(fieldName)) {
                    hourMetrics = MetricsProperties.fromJson(reader);
                } else if ("minuteMetrics".equals(fieldName)) {
                    minuteMetrics = MetricsProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            return new MetricsServiceProperties(hourMetrics, minuteMetrics);
        });
    }
}
