// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.storage.blob;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.HttpHeaderName;
import com.azure.core.http.RequestConditions;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.FluxUtil;
import com.azure.storage.blob.implementation.AppendBlobsImpl;
import com.azure.storage.blob.models.BlobImmutabilityPolicyMode;
import java.time.OffsetDateTime;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the asynchronous BlobClient type.
 */
@ServiceClient(builder = BlobClientBuilder.class, isAsync = true)
public final class AppendBlobAsyncClient {
    @Generated
    private final AppendBlobsImpl serviceClient;

    /**
     * Initializes an instance of AppendBlobAsyncClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    AppendBlobAsyncClient(AppendBlobsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * The Create operation creates a new append blob.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-blob-content-type</td><td>String</td><td>No</td><td>Optional. Sets the blob's content type. If
     * specified, this property is stored with the blob and returned with a read request.</td></tr>
     * <tr><td>x-ms-blob-content-encoding</td><td>String</td><td>No</td><td>Optional. Sets the blob's content encoding.
     * If specified, this property is stored with the blob and returned with a read request.</td></tr>
     * <tr><td>x-ms-blob-content-language</td><td>String</td><td>No</td><td>Optional. Set the blob's content language.
     * If specified, this property is stored with the blob and returned with a read request.</td></tr>
     * <tr><td>x-ms-blob-content-md5</td><td>String</td><td>No</td><td>Optional. An MD5 hash of the blob content. Note
     * that this hash is not validated, as the hashes for the individual blocks were validated when each was
     * uploaded.</td></tr>
     * <tr><td>x-ms-blob-cache-control</td><td>String</td><td>No</td><td>Optional. Sets the blob's cache control. If
     * specified, this property is stored with the blob and returned with a read request.</td></tr>
     * <tr><td>x-ms-lease-id</td><td>String</td><td>No</td><td>If specified, the operation only succeeds if the
     * resource's lease is active and matches this ID.</td></tr>
     * <tr><td>x-ms-blob-content-disposition</td><td>String</td><td>No</td><td>Optional. Sets the blob's content
     * disposition. If specified, this property is stored with the blob and returned with a read request.</td></tr>
     * <tr><td>x-ms-encryption-key</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later. Specifies
     * the encryption key to use to encrypt the data provided in the request. If not specified, the request will be
     * encrypted with the root account key.</td></tr>
     * <tr><td>x-ms-encryption-key-sha256</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later.
     * Specifies the SHA256 hash of the encryption key used to encrypt the data provided in the request. This header is
     * only used for encryption with a customer-provided key. If the request is authenticated with a client token, this
     * header should be specified using the SHA256 hash of the encryption key.</td></tr>
     * <tr><td>x-ms-encryption-algorithm</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later.
     * Specifies the algorithm to use for encryption. If not specified, the default is AES256.</td></tr>
     * <tr><td>x-ms-encryption-scope</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later. Specifies
     * the encryption scope to use to encrypt the data provided in the request. If not specified, the request will be
     * encrypted with the root account key.</td></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>A date-time value. A request is made under
     * the condition that the resource has been modified since the specified date-time.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>A date-time value. A request is made under
     * the condition that the resource has not been modified since the specified date-time.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>A condition that must be met in order for the request to be
     * processed.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>A condition that must be met in order for the request to
     * be processed.</td></tr>
     * <tr><td>x-ms-if-tags</td><td>String</td><td>No</td><td>Specify a SQL where clause on blob tags to operate only on
     * blobs with a matching value.</td></tr>
     * <tr><td>x-ms-tags</td><td>String</td><td>No</td><td>Optional. Used to set blob tags in various blob
     * operations.</td></tr>
     * <tr><td>x-ms-immutability-policy-until-date</td><td>String</td><td>No</td><td>Specifies the date time when the
     * blobs immutability policy is set to expire.</td></tr>
     * <tr><td>x-ms-immutability-policy-mode</td><td>String</td><td>No</td><td>Specifies the immutability policy mode to
     * set on the blob. Allowed values: "Mutable", "Locked", "Unlocked".</td></tr>
     * <tr><td>x-ms-legal-hold</td><td>Boolean</td><td>No</td><td>Specified if a legal hold should be set on the
     * blob.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param containerName The name of the container.
     * @param blob The name of the blob.
     * @param contentLength The length of the request.
     * @param version Specifies the version of the operation to use for this request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> createWithResponse(String containerName, String blob, long contentLength,
        String version, RequestOptions requestOptions) {
        return this.serviceClient.createWithResponseAsync(containerName, blob, contentLength, version, requestOptions);
    }

    /**
     * The Append Block operation commits a new block of data to the end of an append blob.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Content-MD5</td><td>String</td><td>No</td><td>Optional. An MD5 hash of the blob content. Note that this
     * hash is not validated, as the hashes for the individual blocks were validated when each was uploaded.</td></tr>
     * <tr><td>x-ms-content-crc64</td><td>String</td><td>No</td><td>Specify the transactional crc64 for the body, to be
     * validated by the service.</td></tr>
     * <tr><td>x-ms-lease-id</td><td>String</td><td>No</td><td>If specified, the operation only succeeds if the
     * resource's lease is active and matches this ID.</td></tr>
     * <tr><td>x-ms-encryption-key</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later. Specifies
     * the encryption key to use to encrypt the data provided in the request. If not specified, the request will be
     * encrypted with the root account key.</td></tr>
     * <tr><td>x-ms-encryption-key-sha256</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later.
     * Specifies the SHA256 hash of the encryption key used to encrypt the data provided in the request. This header is
     * only used for encryption with a customer-provided key. If the request is authenticated with a client token, this
     * header should be specified using the SHA256 hash of the encryption key.</td></tr>
     * <tr><td>x-ms-encryption-algorithm</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later.
     * Specifies the algorithm to use for encryption. If not specified, the default is AES256.</td></tr>
     * <tr><td>x-ms-encryption-scope</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later. Specifies
     * the encryption scope to use to encrypt the data provided in the request. If not specified, the request will be
     * encrypted with the root account key.</td></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>A date-time value. A request is made under
     * the condition that the resource has been modified since the specified date-time.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>A date-time value. A request is made under
     * the condition that the resource has not been modified since the specified date-time.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>A condition that must be met in order for the request to be
     * processed.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>A condition that must be met in order for the request to
     * be processed.</td></tr>
     * <tr><td>x-ms-if-tags</td><td>String</td><td>No</td><td>Specify a SQL where clause on blob tags to operate only on
     * blobs with a matching value.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * byte[]
     * }
     * </pre>
     * 
     * @param containerName The name of the container.
     * @param blob The name of the blob.
     * @param contentLength The length of the request.
     * @param maxSize Optional conditional header. The max length in bytes permitted for the append blob. If the Append
     * Block operation would cause the blob to exceed that limit or if the blob size is already greater than the value
     * specified in this header, the request will fail with MaxBlobSizeConditionNotMet error (HTTP status code 412 -
     * Precondition Failed).
     * @param appendPosition Optional conditional header, used only for the Append Block operation. A number indicating
     * the byte offset to compare. Append Block will succeed only if the append position is equal to this number. If it
     * is not, the request will fail with the AppendPositionConditionNotMet error (HTTP status code 412 - Precondition
     * Failed).
     * @param version Specifies the version of the operation to use for this request.
     * @param body The body of the request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> appendBlockWithResponse(String containerName, String blob, long contentLength,
        long maxSize, long appendPosition, String version, BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.appendBlockWithResponseAsync(containerName, blob, contentLength, maxSize,
            appendPosition, version, body, requestOptions);
    }

    /**
     * The Append Block From URL operation creates a new block to be committed as part of an append blob where the
     * contents are read from a URL.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-source-content-md5</td><td>String</td><td>No</td><td>Specify the md5 calculated for the range of
     * bytes that must be read from the copy source.</td></tr>
     * <tr><td>x-ms-source-content-crc64</td><td>String</td><td>No</td><td>Specify the crc64 calculated for the range of
     * bytes that must be read from the copy source.</td></tr>
     * <tr><td>x-ms-lease-id</td><td>String</td><td>No</td><td>If specified, the operation only succeeds if the
     * resource's lease is active and matches this ID.</td></tr>
     * <tr><td>x-ms-encryption-key</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later. Specifies
     * the encryption key to use to encrypt the data provided in the request. If not specified, the request will be
     * encrypted with the root account key.</td></tr>
     * <tr><td>x-ms-encryption-key-sha256</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later.
     * Specifies the SHA256 hash of the encryption key used to encrypt the data provided in the request. This header is
     * only used for encryption with a customer-provided key. If the request is authenticated with a client token, this
     * header should be specified using the SHA256 hash of the encryption key.</td></tr>
     * <tr><td>x-ms-encryption-algorithm</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later.
     * Specifies the algorithm to use for encryption. If not specified, the default is AES256.</td></tr>
     * <tr><td>x-ms-encryption-scope</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later. Specifies
     * the encryption scope to use to encrypt the data provided in the request. If not specified, the request will be
     * encrypted with the root account key.</td></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>A date-time value. A request is made under
     * the condition that the resource has been modified since the specified date-time.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>A date-time value. A request is made under
     * the condition that the resource has not been modified since the specified date-time.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>A condition that must be met in order for the request to be
     * processed.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>A condition that must be met in order for the request to
     * be processed.</td></tr>
     * <tr><td>x-ms-if-tags</td><td>String</td><td>No</td><td>Specify a SQL where clause on blob tags to operate only on
     * blobs with a matching value.</td></tr>
     * <tr><td>x-ms-copy-source-authorization</td><td>String</td><td>No</td><td>Only Bearer type is supported.
     * Credentials should be a valid OAuth access token to copy source.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param containerName The name of the container.
     * @param blob The name of the blob.
     * @param contentLength The length of the request.
     * @param sourceUrl Specify a URL to the copy source.
     * @param sourceRange Bytes of source data in the specified range.
     * @param maxSize Optional conditional header. The max length in bytes permitted for the append blob. If the Append
     * Block operation would cause the blob to exceed that limit or if the blob size is already greater than the value
     * specified in this header, the request will fail with MaxBlobSizeConditionNotMet error (HTTP status code 412 -
     * Precondition Failed).
     * @param appendPosition Optional conditional header, used only for the Append Block operation. A number indicating
     * the byte offset to compare. Append Block will succeed only if the append position is equal to this number. If it
     * is not, the request will fail with the AppendPositionConditionNotMet error (HTTP status code 412 - Precondition
     * Failed).
     * @param version Specifies the version of the operation to use for this request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> appendBlockFromUrlWithResponse(String containerName, String blob, long contentLength,
        String sourceUrl, String sourceRange, long maxSize, long appendPosition, String version,
        RequestOptions requestOptions) {
        return this.serviceClient.appendBlockFromUrlWithResponseAsync(containerName, blob, contentLength, sourceUrl,
            sourceRange, maxSize, appendPosition, version, requestOptions);
    }

    /**
     * The Seal operation seals the Append Blob to make it read-only. Seal is supported only on version 2019-12-12
     * version or later.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-lease-id</td><td>String</td><td>No</td><td>If specified, the operation only succeeds if the
     * resource's lease is active and matches this ID.</td></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>A date-time value. A request is made under
     * the condition that the resource has been modified since the specified date-time.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>A date-time value. A request is made under
     * the condition that the resource has not been modified since the specified date-time.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>A condition that must be met in order for the request to be
     * processed.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>A condition that must be met in order for the request to
     * be processed.</td></tr>
     * <tr><td>x-ms-if-tags</td><td>String</td><td>No</td><td>Specify a SQL where clause on blob tags to operate only on
     * blobs with a matching value.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param containerName The name of the container.
     * @param blob The name of the blob.
     * @param appendPosition Optional conditional header, used only for the Append Block operation. A number indicating
     * the byte offset to compare. Append Block will succeed only if the append position is equal to this number. If it
     * is not, the request will fail with the AppendPositionConditionNotMet error (HTTP status code 412 - Precondition
     * Failed).
     * @param version Specifies the version of the operation to use for this request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> sealWithResponse(String containerName, String blob, long appendPosition, String version,
        RequestOptions requestOptions) {
        return this.serviceClient.sealWithResponseAsync(containerName, blob, appendPosition, version, requestOptions);
    }

    /**
     * The Create operation creates a new append blob.
     * 
     * @param containerName The name of the container.
     * @param blob The name of the blob.
     * @param contentLength The length of the request.
     * @param version Specifies the version of the operation to use for this request.
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;.
     * @param blobContentType Optional. Sets the blob's content type. If specified, this property is stored with the
     * blob and returned with a read request.
     * @param blobContentEncoding Optional. Sets the blob's content encoding. If specified, this property is stored with
     * the blob and returned with a read request.
     * @param blobContentLanguage Optional. Set the blob's content language. If specified, this property is stored with
     * the blob and returned with a read request.
     * @param blobContentMd5 Optional. An MD5 hash of the blob content. Note that this hash is not validated, as the
     * hashes for the individual blocks were validated when each was uploaded.
     * @param blobCacheControl Optional. Sets the blob's cache control. If specified, this property is stored with the
     * blob and returned with a read request.
     * @param leaseId If specified, the operation only succeeds if the resource's lease is active and matches this ID.
     * @param blobContentDisposition Optional. Sets the blob's content disposition. If specified, this property is
     * stored with the blob and returned with a read request.
     * @param encryptionKey Optional. Version 2019-07-07 and later. Specifies the encryption key to use to encrypt the
     * data provided in the request. If not specified, the request will be encrypted with the root account key.
     * @param encryptionKeySha256 Optional. Version 2019-07-07 and later. Specifies the SHA256 hash of the encryption
     * key used to encrypt the data provided in the request. This header is only used for encryption with a
     * customer-provided key. If the request is authenticated with a client token, this header should be specified using
     * the SHA256 hash of the encryption key.
     * @param encryptionAlgorithm Optional. Version 2019-07-07 and later. Specifies the algorithm to use for encryption.
     * If not specified, the default is AES256.
     * @param encryptionScope Optional. Version 2019-07-07 and later. Specifies the encryption scope to use to encrypt
     * the data provided in the request. If not specified, the request will be encrypted with the root account key.
     * @param ifTags Specify a SQL where clause on blob tags to operate only on blobs with a matching value.
     * @param blobTagsString Optional. Used to set blob tags in various blob operations.
     * @param immutabilityPolicyExpiry Specifies the date time when the blobs immutability policy is set to expire.
     * @param immutabilityPolicyMode Specifies the immutability policy mode to set on the blob.
     * @param legalHold Specified if a legal hold should be set on the blob.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> create(String containerName, String blob, long contentLength, String version, Integer timeout,
        String blobContentType, String blobContentEncoding, String blobContentLanguage, String blobContentMd5,
        String blobCacheControl, String leaseId, String blobContentDisposition, String encryptionKey,
        String encryptionKeySha256, String encryptionAlgorithm, String encryptionScope, String ifTags,
        String blobTagsString, String immutabilityPolicyExpiry, BlobImmutabilityPolicyMode immutabilityPolicyMode,
        Boolean legalHold, RequestConditions requestConditions) {
        // Generated convenience method for createWithResponse
        RequestOptions requestOptions = new RequestOptions();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        if (timeout != null) {
            requestOptions.addQueryParam("timeout", String.valueOf(timeout), false);
        }
        if (blobContentType != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-blob-content-type"), blobContentType);
        }
        if (blobContentEncoding != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-blob-content-encoding"), blobContentEncoding);
        }
        if (blobContentLanguage != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-blob-content-language"), blobContentLanguage);
        }
        if (blobContentMd5 != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-blob-content-md5"), blobContentMd5);
        }
        if (blobCacheControl != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-blob-cache-control"), blobCacheControl);
        }
        if (leaseId != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-lease-id"), leaseId);
        }
        if (blobContentDisposition != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-blob-content-disposition"),
                blobContentDisposition);
        }
        if (encryptionKey != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-encryption-key"), encryptionKey);
        }
        if (encryptionKeySha256 != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-encryption-key-sha256"), encryptionKeySha256);
        }
        if (encryptionAlgorithm != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-encryption-algorithm"), encryptionAlgorithm);
        }
        if (encryptionScope != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-encryption-scope"), encryptionScope);
        }
        if (ifTags != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-if-tags"), ifTags);
        }
        if (blobTagsString != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-tags"), blobTagsString);
        }
        if (immutabilityPolicyExpiry != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-immutability-policy-until-date"),
                immutabilityPolicyExpiry);
        }
        if (immutabilityPolicyMode != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-immutability-policy-mode"),
                immutabilityPolicyMode.toString());
        }
        if (legalHold != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-legal-hold"), String.valueOf(legalHold));
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MODIFIED_SINCE, String.valueOf(ifModifiedSince));
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_UNMODIFIED_SINCE, String.valueOf(ifUnmodifiedSince));
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        return createWithResponse(containerName, blob, contentLength, version, requestOptions)
            .flatMap(FluxUtil::toMono);
    }

    /**
     * The Create operation creates a new append blob.
     * 
     * @param containerName The name of the container.
     * @param blob The name of the blob.
     * @param contentLength The length of the request.
     * @param version Specifies the version of the operation to use for this request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> create(String containerName, String blob, long contentLength, String version) {
        // Generated convenience method for createWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createWithResponse(containerName, blob, contentLength, version, requestOptions)
            .flatMap(FluxUtil::toMono);
    }

    /**
     * The Append Block operation commits a new block of data to the end of an append blob.
     * 
     * @param containerName The name of the container.
     * @param blob The name of the blob.
     * @param contentLength The length of the request.
     * @param maxSize Optional conditional header. The max length in bytes permitted for the append blob. If the Append
     * Block operation would cause the blob to exceed that limit or if the blob size is already greater than the value
     * specified in this header, the request will fail with MaxBlobSizeConditionNotMet error (HTTP status code 412 -
     * Precondition Failed).
     * @param appendPosition Optional conditional header, used only for the Append Block operation. A number indicating
     * the byte offset to compare. Append Block will succeed only if the append position is equal to this number. If it
     * is not, the request will fail with the AppendPositionConditionNotMet error (HTTP status code 412 - Precondition
     * Failed).
     * @param version Specifies the version of the operation to use for this request.
     * @param body The body of the request.
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;.
     * @param transactionalContentMD5 Optional. An MD5 hash of the blob content. Note that this hash is not validated,
     * as the hashes for the individual blocks were validated when each was uploaded.
     * @param transactionalContentCrc64 Specify the transactional crc64 for the body, to be validated by the service.
     * @param leaseId If specified, the operation only succeeds if the resource's lease is active and matches this ID.
     * @param encryptionKey Optional. Version 2019-07-07 and later. Specifies the encryption key to use to encrypt the
     * data provided in the request. If not specified, the request will be encrypted with the root account key.
     * @param encryptionKeySha256 Optional. Version 2019-07-07 and later. Specifies the SHA256 hash of the encryption
     * key used to encrypt the data provided in the request. This header is only used for encryption with a
     * customer-provided key. If the request is authenticated with a client token, this header should be specified using
     * the SHA256 hash of the encryption key.
     * @param encryptionAlgorithm Optional. Version 2019-07-07 and later. Specifies the algorithm to use for encryption.
     * If not specified, the default is AES256.
     * @param encryptionScope Optional. Version 2019-07-07 and later. Specifies the encryption scope to use to encrypt
     * the data provided in the request. If not specified, the request will be encrypted with the root account key.
     * @param ifTags Specify a SQL where clause on blob tags to operate only on blobs with a matching value.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> appendBlock(String containerName, String blob, long contentLength, long maxSize,
        long appendPosition, String version, byte[] body, Integer timeout, String transactionalContentMD5,
        String transactionalContentCrc64, String leaseId, String encryptionKey, String encryptionKeySha256,
        String encryptionAlgorithm, String encryptionScope, String ifTags, RequestConditions requestConditions) {
        // Generated convenience method for appendBlockWithResponse
        RequestOptions requestOptions = new RequestOptions();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        if (timeout != null) {
            requestOptions.addQueryParam("timeout", String.valueOf(timeout), false);
        }
        if (transactionalContentMD5 != null) {
            requestOptions.setHeader(HttpHeaderName.CONTENT_MD5, transactionalContentMD5);
        }
        if (transactionalContentCrc64 != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-content-crc64"), transactionalContentCrc64);
        }
        if (leaseId != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-lease-id"), leaseId);
        }
        if (encryptionKey != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-encryption-key"), encryptionKey);
        }
        if (encryptionKeySha256 != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-encryption-key-sha256"), encryptionKeySha256);
        }
        if (encryptionAlgorithm != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-encryption-algorithm"), encryptionAlgorithm);
        }
        if (encryptionScope != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-encryption-scope"), encryptionScope);
        }
        if (ifTags != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-if-tags"), ifTags);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MODIFIED_SINCE, String.valueOf(ifModifiedSince));
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_UNMODIFIED_SINCE, String.valueOf(ifUnmodifiedSince));
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        return appendBlockWithResponse(containerName, blob, contentLength, maxSize, appendPosition, version,
            BinaryData.fromObject(body), requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * The Append Block operation commits a new block of data to the end of an append blob.
     * 
     * @param containerName The name of the container.
     * @param blob The name of the blob.
     * @param contentLength The length of the request.
     * @param maxSize Optional conditional header. The max length in bytes permitted for the append blob. If the Append
     * Block operation would cause the blob to exceed that limit or if the blob size is already greater than the value
     * specified in this header, the request will fail with MaxBlobSizeConditionNotMet error (HTTP status code 412 -
     * Precondition Failed).
     * @param appendPosition Optional conditional header, used only for the Append Block operation. A number indicating
     * the byte offset to compare. Append Block will succeed only if the append position is equal to this number. If it
     * is not, the request will fail with the AppendPositionConditionNotMet error (HTTP status code 412 - Precondition
     * Failed).
     * @param version Specifies the version of the operation to use for this request.
     * @param body The body of the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> appendBlock(String containerName, String blob, long contentLength, long maxSize,
        long appendPosition, String version, byte[] body) {
        // Generated convenience method for appendBlockWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return appendBlockWithResponse(containerName, blob, contentLength, maxSize, appendPosition, version,
            BinaryData.fromObject(body), requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * The Append Block From URL operation creates a new block to be committed as part of an append blob where the
     * contents are read from a URL.
     * 
     * @param containerName The name of the container.
     * @param blob The name of the blob.
     * @param contentLength The length of the request.
     * @param sourceUrl Specify a URL to the copy source.
     * @param sourceRange Bytes of source data in the specified range.
     * @param maxSize Optional conditional header. The max length in bytes permitted for the append blob. If the Append
     * Block operation would cause the blob to exceed that limit or if the blob size is already greater than the value
     * specified in this header, the request will fail with MaxBlobSizeConditionNotMet error (HTTP status code 412 -
     * Precondition Failed).
     * @param appendPosition Optional conditional header, used only for the Append Block operation. A number indicating
     * the byte offset to compare. Append Block will succeed only if the append position is equal to this number. If it
     * is not, the request will fail with the AppendPositionConditionNotMet error (HTTP status code 412 - Precondition
     * Failed).
     * @param version Specifies the version of the operation to use for this request.
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;.
     * @param sourceContentMd5 Specify the md5 calculated for the range of bytes that must be read from the copy source.
     * @param sourceContentCrc64 Specify the crc64 calculated for the range of bytes that must be read from the copy
     * source.
     * @param leaseId If specified, the operation only succeeds if the resource's lease is active and matches this ID.
     * @param encryptionKey Optional. Version 2019-07-07 and later. Specifies the encryption key to use to encrypt the
     * data provided in the request. If not specified, the request will be encrypted with the root account key.
     * @param encryptionKeySha256 Optional. Version 2019-07-07 and later. Specifies the SHA256 hash of the encryption
     * key used to encrypt the data provided in the request. This header is only used for encryption with a
     * customer-provided key. If the request is authenticated with a client token, this header should be specified using
     * the SHA256 hash of the encryption key.
     * @param encryptionAlgorithm Optional. Version 2019-07-07 and later. Specifies the algorithm to use for encryption.
     * If not specified, the default is AES256.
     * @param encryptionScope Optional. Version 2019-07-07 and later. Specifies the encryption scope to use to encrypt
     * the data provided in the request. If not specified, the request will be encrypted with the root account key.
     * @param ifTags Specify a SQL where clause on blob tags to operate only on blobs with a matching value.
     * @param copySourceAuthorization Only Bearer type is supported. Credentials should be a valid OAuth access token to
     * copy source.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> appendBlockFromUrl(String containerName, String blob, long contentLength, String sourceUrl,
        String sourceRange, long maxSize, long appendPosition, String version, Integer timeout, String sourceContentMd5,
        String sourceContentCrc64, String leaseId, String encryptionKey, String encryptionKeySha256,
        String encryptionAlgorithm, String encryptionScope, String ifTags, String copySourceAuthorization,
        RequestConditions requestConditions) {
        // Generated convenience method for appendBlockFromUrlWithResponse
        RequestOptions requestOptions = new RequestOptions();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        if (timeout != null) {
            requestOptions.addQueryParam("timeout", String.valueOf(timeout), false);
        }
        if (sourceContentMd5 != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-source-content-md5"), sourceContentMd5);
        }
        if (sourceContentCrc64 != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-source-content-crc64"), sourceContentCrc64);
        }
        if (leaseId != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-lease-id"), leaseId);
        }
        if (encryptionKey != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-encryption-key"), encryptionKey);
        }
        if (encryptionKeySha256 != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-encryption-key-sha256"), encryptionKeySha256);
        }
        if (encryptionAlgorithm != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-encryption-algorithm"), encryptionAlgorithm);
        }
        if (encryptionScope != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-encryption-scope"), encryptionScope);
        }
        if (ifTags != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-if-tags"), ifTags);
        }
        if (copySourceAuthorization != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-copy-source-authorization"),
                copySourceAuthorization);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MODIFIED_SINCE, String.valueOf(ifModifiedSince));
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_UNMODIFIED_SINCE, String.valueOf(ifUnmodifiedSince));
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        return appendBlockFromUrlWithResponse(containerName, blob, contentLength, sourceUrl, sourceRange, maxSize,
            appendPosition, version, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * The Append Block From URL operation creates a new block to be committed as part of an append blob where the
     * contents are read from a URL.
     * 
     * @param containerName The name of the container.
     * @param blob The name of the blob.
     * @param contentLength The length of the request.
     * @param sourceUrl Specify a URL to the copy source.
     * @param sourceRange Bytes of source data in the specified range.
     * @param maxSize Optional conditional header. The max length in bytes permitted for the append blob. If the Append
     * Block operation would cause the blob to exceed that limit or if the blob size is already greater than the value
     * specified in this header, the request will fail with MaxBlobSizeConditionNotMet error (HTTP status code 412 -
     * Precondition Failed).
     * @param appendPosition Optional conditional header, used only for the Append Block operation. A number indicating
     * the byte offset to compare. Append Block will succeed only if the append position is equal to this number. If it
     * is not, the request will fail with the AppendPositionConditionNotMet error (HTTP status code 412 - Precondition
     * Failed).
     * @param version Specifies the version of the operation to use for this request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> appendBlockFromUrl(String containerName, String blob, long contentLength, String sourceUrl,
        String sourceRange, long maxSize, long appendPosition, String version) {
        // Generated convenience method for appendBlockFromUrlWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return appendBlockFromUrlWithResponse(containerName, blob, contentLength, sourceUrl, sourceRange, maxSize,
            appendPosition, version, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * The Seal operation seals the Append Blob to make it read-only. Seal is supported only on version 2019-12-12
     * version or later.
     * 
     * @param containerName The name of the container.
     * @param blob The name of the blob.
     * @param appendPosition Optional conditional header, used only for the Append Block operation. A number indicating
     * the byte offset to compare. Append Block will succeed only if the append position is equal to this number. If it
     * is not, the request will fail with the AppendPositionConditionNotMet error (HTTP status code 412 - Precondition
     * Failed).
     * @param version Specifies the version of the operation to use for this request.
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;.
     * @param leaseId If specified, the operation only succeeds if the resource's lease is active and matches this ID.
     * @param ifTags Specify a SQL where clause on blob tags to operate only on blobs with a matching value.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> seal(String containerName, String blob, long appendPosition, String version, Integer timeout,
        String leaseId, String ifTags, RequestConditions requestConditions) {
        // Generated convenience method for sealWithResponse
        RequestOptions requestOptions = new RequestOptions();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        if (timeout != null) {
            requestOptions.addQueryParam("timeout", String.valueOf(timeout), false);
        }
        if (leaseId != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-lease-id"), leaseId);
        }
        if (ifTags != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-if-tags"), ifTags);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MODIFIED_SINCE, String.valueOf(ifModifiedSince));
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_UNMODIFIED_SINCE, String.valueOf(ifUnmodifiedSince));
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        return sealWithResponse(containerName, blob, appendPosition, version, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * The Seal operation seals the Append Blob to make it read-only. Seal is supported only on version 2019-12-12
     * version or later.
     * 
     * @param containerName The name of the container.
     * @param blob The name of the blob.
     * @param appendPosition Optional conditional header, used only for the Append Block operation. A number indicating
     * the byte offset to compare. Append Block will succeed only if the append position is equal to this number. If it
     * is not, the request will fail with the AppendPositionConditionNotMet error (HTTP status code 412 - Precondition
     * Failed).
     * @param version Specifies the version of the operation to use for this request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> seal(String containerName, String blob, long appendPosition, String version) {
        // Generated convenience method for sealWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return sealWithResponse(containerName, blob, appendPosition, version, requestOptions).flatMap(FluxUtil::toMono);
    }
}
