// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.storage.blob.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The geo replication status.
 */
@Immutable
public final class GeoReplication implements JsonSerializable<GeoReplication> {
    /*
     * The georeplication status.
     */
    @Generated
    private final GeoReplicationStatus status;

    /*
     * The last sync time.
     */
    @Generated
    private final String lastSyncTime;

    /**
     * Creates an instance of GeoReplication class.
     * 
     * @param status the status value to set.
     * @param lastSyncTime the lastSyncTime value to set.
     */
    @Generated
    private GeoReplication(GeoReplicationStatus status, String lastSyncTime) {
        this.status = status;
        this.lastSyncTime = lastSyncTime;
    }

    /**
     * Get the status property: The georeplication status.
     * 
     * @return the status value.
     */
    @Generated
    public GeoReplicationStatus getStatus() {
        return this.status;
    }

    /**
     * Get the lastSyncTime property: The last sync time.
     * 
     * @return the lastSyncTime value.
     */
    @Generated
    public String getLastSyncTime() {
        return this.lastSyncTime;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        jsonWriter.writeStringField("lastSyncTime", this.lastSyncTime);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GeoReplication from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GeoReplication if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the GeoReplication.
     */
    @Generated
    public static GeoReplication fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GeoReplicationStatus status = null;
            String lastSyncTime = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("status".equals(fieldName)) {
                    status = GeoReplicationStatus.fromString(reader.getString());
                } else if ("lastSyncTime".equals(fieldName)) {
                    lastSyncTime = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return new GeoReplication(status, lastSyncTime);
        });
    }
}
