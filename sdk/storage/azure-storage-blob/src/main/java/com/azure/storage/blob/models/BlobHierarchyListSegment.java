// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.storage.blob.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Represents an array of blobs.
 */
@Immutable
public final class BlobHierarchyListSegment implements JsonSerializable<BlobHierarchyListSegment> {
    /*
     * The blob items
     */
    @Generated
    private final List<BlobItemInternal> blobItems;

    /*
     * The blob prefixes.
     */
    @Generated
    private final List<BlobPrefix> blobPrefixes;

    /**
     * Creates an instance of BlobHierarchyListSegment class.
     * 
     * @param blobItems the blobItems value to set.
     * @param blobPrefixes the blobPrefixes value to set.
     */
    @Generated
    private BlobHierarchyListSegment(List<BlobItemInternal> blobItems, List<BlobPrefix> blobPrefixes) {
        this.blobItems = blobItems;
        this.blobPrefixes = blobPrefixes;
    }

    /**
     * Get the blobItems property: The blob items.
     * 
     * @return the blobItems value.
     */
    @Generated
    public List<BlobItemInternal> getBlobItems() {
        return this.blobItems;
    }

    /**
     * Get the blobPrefixes property: The blob prefixes.
     * 
     * @return the blobPrefixes value.
     */
    @Generated
    public List<BlobPrefix> getBlobPrefixes() {
        return this.blobPrefixes;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("blobItems", this.blobItems, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("blobPrefixes", this.blobPrefixes, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BlobHierarchyListSegment from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BlobHierarchyListSegment if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the BlobHierarchyListSegment.
     */
    @Generated
    public static BlobHierarchyListSegment fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            List<BlobItemInternal> blobItems = null;
            List<BlobPrefix> blobPrefixes = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("blobItems".equals(fieldName)) {
                    blobItems = reader.readArray(reader1 -> BlobItemInternal.fromJson(reader1));
                } else if ("blobPrefixes".equals(fieldName)) {
                    blobPrefixes = reader.readArray(reader1 -> BlobPrefix.fromJson(reader1));
                } else {
                    reader.skipChildren();
                }
            }
            return new BlobHierarchyListSegment(blobItems, blobPrefixes);
        });
    }
}
