// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.storage.blob.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Represents an access policy.
 */
@Immutable
public final class AccessPolicy implements JsonSerializable<AccessPolicy> {
    /*
     * The date-time the policy is active.
     */
    @Generated
    private final OffsetDateTime start;

    /*
     * The date-time the policy expires.
     */
    @Generated
    private final OffsetDateTime expiry;

    /*
     * The permissions for acl the policy.
     */
    @Generated
    private final String permission;

    /**
     * Creates an instance of AccessPolicy class.
     * 
     * @param start the start value to set.
     * @param expiry the expiry value to set.
     * @param permission the permission value to set.
     */
    @Generated
    public AccessPolicy(OffsetDateTime start, OffsetDateTime expiry, String permission) {
        this.start = start;
        this.expiry = expiry;
        this.permission = permission;
    }

    /**
     * Get the start property: The date-time the policy is active.
     * 
     * @return the start value.
     */
    @Generated
    public OffsetDateTime getStart() {
        return this.start;
    }

    /**
     * Get the expiry property: The date-time the policy expires.
     * 
     * @return the expiry value.
     */
    @Generated
    public OffsetDateTime getExpiry() {
        return this.expiry;
    }

    /**
     * Get the permission property: The permissions for acl the policy.
     * 
     * @return the permission value.
     */
    @Generated
    public String getPermission() {
        return this.permission;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("start",
            this.start == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.start));
        jsonWriter.writeStringField("expiry",
            this.expiry == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.expiry));
        jsonWriter.writeStringField("permission", this.permission);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AccessPolicy from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AccessPolicy if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AccessPolicy.
     */
    @Generated
    public static AccessPolicy fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OffsetDateTime start = null;
            OffsetDateTime expiry = null;
            String permission = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("start".equals(fieldName)) {
                    start = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("expiry".equals(fieldName)) {
                    expiry = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("permission".equals(fieldName)) {
                    permission = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return new AccessPolicy(start, expiry, permission);
        });
    }
}
