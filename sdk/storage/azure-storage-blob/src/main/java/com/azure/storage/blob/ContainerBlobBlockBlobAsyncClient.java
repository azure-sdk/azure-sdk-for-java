// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.storage.blob;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.HttpHeaderName;
import com.azure.core.http.RequestConditions;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.DateTimeRfc1123;
import com.azure.core.util.FluxUtil;
import com.azure.storage.blob.implementation.ContainerBlobBlockBlobsImpl;
import com.azure.storage.blob.models.AccessTier;
import com.azure.storage.blob.models.BlobImmutabilityPolicyMode;
import com.azure.storage.blob.models.BlockList;
import com.azure.storage.blob.models.BlockListType;
import com.azure.storage.blob.models.BlockLookupList;
import com.azure.storage.blob.models.EncryptionAlgorithmType;
import com.azure.storage.blob.models.QueryRequest;
import java.time.OffsetDateTime;
import java.util.Map;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the asynchronous BlobClient type.
 */
@ServiceClient(builder = BlobClientBuilder.class, isAsync = true)
public final class ContainerBlobBlockBlobAsyncClient {
    @Generated
    private final ContainerBlobBlockBlobsImpl serviceClient;

    /**
     * Initializes an instance of ContainerBlobBlockBlobAsyncClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    ContainerBlobBlockBlobAsyncClient(ContainerBlobBlockBlobsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * The Upload Block Blob operation updates the content of an existing block blob. Updating an existing block blob
     * overwrites any existing metadata on the blob. Partial updates are not supported with Put Blob; the content of the
     * existing blob is overwritten with the content of the new blob. To perform a partial update of the content of a
     * block blob, use the Put Block List operation.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-meta</td><td>Map&lt;String, String&gt;</td><td>No</td><td>The metadata headers.</td></tr>
     * <tr><td>Content-MD5</td><td>String</td><td>No</td><td>Optional. An MD5 hash of the blob content. Note that this
     * hash is not validated, as the hashes for the individual blocks were validated when each was uploaded.</td></tr>
     * <tr><td>x-ms-blob-content-type</td><td>String</td><td>No</td><td>Optional. Sets the blob's content type. If
     * specified, this property is stored with the blob and returned with a read request.</td></tr>
     * <tr><td>x-ms-blob-content-encoding</td><td>String</td><td>No</td><td>Optional. Sets the blob's content encoding.
     * If specified, this property is stored with the blob and returned with a read request.</td></tr>
     * <tr><td>x-ms-blob-content-language</td><td>String</td><td>No</td><td>Optional. Set the blob's content language.
     * If specified, this property is stored with the blob and returned with a read request.</td></tr>
     * <tr><td>x-ms-blob-content-md5</td><td>byte[]</td><td>No</td><td>Optional. An MD5 hash of the blob content. Note
     * that this hash is not validated, as the hashes for the individual blocks were validated when each was
     * uploaded.</td></tr>
     * <tr><td>x-ms-blob-cache-control</td><td>String</td><td>No</td><td>Optional. Sets the blob's cache control. If
     * specified, this property is stored with the blob and returned with a read request.</td></tr>
     * <tr><td>x-ms-lease-id</td><td>String</td><td>No</td><td>If specified, the operation only succeeds if the
     * resource's lease is active and matches this ID.</td></tr>
     * <tr><td>x-ms-blob-content-disposition</td><td>String</td><td>No</td><td>Optional. Sets the blob's content
     * disposition. If specified, this property is stored with the blob and returned with a read request.</td></tr>
     * <tr><td>x-ms-encryption-key</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later. Specifies
     * the encryption key to use to encrypt the data provided in the request. If not specified, the request will be
     * encrypted with the root account key.</td></tr>
     * <tr><td>x-ms-encryption-key-sha256</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later.
     * Specifies the SHA256 hash of the encryption key used to encrypt the data provided in the request. This header is
     * only used for encryption with a customer-provided key. If the request is authenticated with a client token, this
     * header should be specified using the SHA256 hash of the encryption key.</td></tr>
     * <tr><td>x-ms-encryption-algorithm</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later.
     * Specifies the algorithm to use for encryption. If not specified, the default is AES256. Allowed values:
     * "AES256".</td></tr>
     * <tr><td>x-ms-encryption-scope</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later. Specifies
     * the encryption scope to use to encrypt the data provided in the request. If not specified, the request will be
     * encrypted with the root account key.</td></tr>
     * <tr><td>x-ms-access-tier</td><td>String</td><td>No</td><td>The tier to be set on the blob. Allowed values: "P4",
     * "P6", "P10", "P15", "P20", "P30", "P40", "P50", "P60", "P70", "P80", "Hot", "Cool", "Archive", "Premium",
     * "Cold".</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>The request should only proceed if an entity matches this
     * string.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>The request should only proceed if no entity matches this
     * string.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the
     * entity was not modified after this time.</td></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the entity
     * was modified after this time.</td></tr>
     * <tr><td>x-ms-if-tags</td><td>String</td><td>No</td><td>Specify a SQL where clause on blob tags to operate only on
     * blobs with a matching value.</td></tr>
     * <tr><td>x-ms-tags</td><td>String</td><td>No</td><td>Optional. Used to set blob tags in various blob
     * operations.</td></tr>
     * <tr><td>x-ms-immutability-policy-until-date</td><td>OffsetDateTime</td><td>No</td><td>Specifies the date time
     * when the blobs immutability policy is set to expire.</td></tr>
     * <tr><td>x-ms-immutability-policy-mode</td><td>String</td><td>No</td><td>Specifies the immutability policy mode to
     * set on the blob. Allowed values: "Mutable", "Locked", "Unlocked".</td></tr>
     * <tr><td>x-ms-legal-hold</td><td>Boolean</td><td>No</td><td>Specified if a legal hold should be set on the
     * blob.</td></tr>
     * <tr><td>x-ms-content-crc64</td><td>String</td><td>No</td><td>Specify the transactional crc64 for the body, to be
     * validated by the service.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * BinaryData
     * }
     * </pre>
     * 
     * @param contentLength The length of the request.
     * @param body The body of the request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> uploadWithResponse(long contentLength, BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.uploadWithResponseAsync(contentLength, body, requestOptions);
    }

    /**
     * The Put Blob from URL operation creates a new Block Blob where the contents of the blob are read from a given
     * URL. This API is supported beginning with the 2020-04-08 version. Partial updates are not supported with Put Blob
     * from URL; the content of an existing blob is overwritten with the content of the new blob. To perform partial
     * updates to a block blobâ€™s contents using a source URL, use the Put Block from URL API in conjunction with Put
     * Block List.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-meta</td><td>Map&lt;String, String&gt;</td><td>No</td><td>The metadata headers.</td></tr>
     * <tr><td>Content-MD5</td><td>String</td><td>No</td><td>Optional. An MD5 hash of the blob content. Note that this
     * hash is not validated, as the hashes for the individual blocks were validated when each was uploaded.</td></tr>
     * <tr><td>x-ms-blob-content-type</td><td>String</td><td>No</td><td>Optional. Sets the blob's content type. If
     * specified, this property is stored with the blob and returned with a read request.</td></tr>
     * <tr><td>x-ms-blob-content-encoding</td><td>String</td><td>No</td><td>Optional. Sets the blob's content encoding.
     * If specified, this property is stored with the blob and returned with a read request.</td></tr>
     * <tr><td>x-ms-blob-content-language</td><td>String</td><td>No</td><td>Optional. Set the blob's content language.
     * If specified, this property is stored with the blob and returned with a read request.</td></tr>
     * <tr><td>x-ms-blob-content-md5</td><td>byte[]</td><td>No</td><td>Optional. An MD5 hash of the blob content. Note
     * that this hash is not validated, as the hashes for the individual blocks were validated when each was
     * uploaded.</td></tr>
     * <tr><td>x-ms-blob-cache-control</td><td>String</td><td>No</td><td>Optional. Sets the blob's cache control. If
     * specified, this property is stored with the blob and returned with a read request.</td></tr>
     * <tr><td>x-ms-lease-id</td><td>String</td><td>No</td><td>If specified, the operation only succeeds if the
     * resource's lease is active and matches this ID.</td></tr>
     * <tr><td>x-ms-blob-content-disposition</td><td>String</td><td>No</td><td>Optional. Sets the blob's content
     * disposition. If specified, this property is stored with the blob and returned with a read request.</td></tr>
     * <tr><td>x-ms-encryption-key</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later. Specifies
     * the encryption key to use to encrypt the data provided in the request. If not specified, the request will be
     * encrypted with the root account key.</td></tr>
     * <tr><td>x-ms-encryption-key-sha256</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later.
     * Specifies the SHA256 hash of the encryption key used to encrypt the data provided in the request. This header is
     * only used for encryption with a customer-provided key. If the request is authenticated with a client token, this
     * header should be specified using the SHA256 hash of the encryption key.</td></tr>
     * <tr><td>x-ms-encryption-algorithm</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later.
     * Specifies the algorithm to use for encryption. If not specified, the default is AES256. Allowed values:
     * "AES256".</td></tr>
     * <tr><td>x-ms-encryption-scope</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later. Specifies
     * the encryption scope to use to encrypt the data provided in the request. If not specified, the request will be
     * encrypted with the root account key.</td></tr>
     * <tr><td>x-ms-access-tier</td><td>String</td><td>No</td><td>The tier to be set on the blob. Allowed values: "P4",
     * "P6", "P10", "P15", "P20", "P30", "P40", "P50", "P60", "P70", "P80", "Hot", "Cool", "Archive", "Premium",
     * "Cold".</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>The request should only proceed if an entity matches this
     * string.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>The request should only proceed if no entity matches this
     * string.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the
     * entity was not modified after this time.</td></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the entity
     * was modified after this time.</td></tr>
     * <tr><td>x-ms-if-tags</td><td>String</td><td>No</td><td>Specify a SQL where clause on blob tags to operate only on
     * blobs with a matching value.</td></tr>
     * <tr><td>x-ms-source-if-modified-since</td><td>OffsetDateTime</td><td>No</td><td>Specify this header value to
     * operate only on a blob if it has been modified since the specified date/time.</td></tr>
     * <tr><td>x-ms-source-if-unmodified-since</td><td>OffsetDateTime</td><td>No</td><td>Specify this header value to
     * operate only on a blob if it has not been modified since the specified date/time.</td></tr>
     * <tr><td>x-ms-source-if-match</td><td>String</td><td>No</td><td>Specify an ETag value to operate only on blobs
     * with a matching value.</td></tr>
     * <tr><td>x-ms-source-if-none-match</td><td>String</td><td>No</td><td>Specify this header value to operate only on
     * a blob if it has been modified since the specified date/time.</td></tr>
     * <tr><td>x-ms-source-if-tags</td><td>String</td><td>No</td><td>Specify a SQL where clause on blob tags to operate
     * only on blobs with a matching value.</td></tr>
     * <tr><td>x-ms-source-content-md5</td><td>String</td><td>No</td><td>Specify the md5 calculated for the range of
     * bytes that must be read from the copy source.</td></tr>
     * <tr><td>x-ms-tags</td><td>String</td><td>No</td><td>Optional. Used to set blob tags in various blob
     * operations.</td></tr>
     * <tr><td>x-ms-copy-source-blob-properties</td><td>Boolean</td><td>No</td><td>Optional, default is true. Indicates
     * if properties from the source blob should be copied.</td></tr>
     * <tr><td>x-ms-copy-source-authorization</td><td>String</td><td>No</td><td>Only Bearer type is supported.
     * Credentials should be a valid OAuth access token to copy source.</td></tr>
     * <tr><td>x-ms-copy-source-tags</td><td>String</td><td>No</td><td>Optional, default 'replace'. Indicates if source
     * tags should be copied or replaced with the tags specified by x-ms-tags.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param contentLength The length of the request.
     * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up to 2 KB in
     * length that specifies a page blob snapshot. The value should be URL-encoded as it would appear in a request URI.
     * The source blob must either be public or must be authenticated via a shared access signature.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> putBlobFromUrlWithResponse(long contentLength, String copySource,
        RequestOptions requestOptions) {
        return this.serviceClient.putBlobFromUrlWithResponseAsync(contentLength, copySource, requestOptions);
    }

    /**
     * The Stage Block operation creates a new block to be committed as part of a blob.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Content-MD5</td><td>String</td><td>No</td><td>Optional. An MD5 hash of the blob content. Note that this
     * hash is not validated, as the hashes for the individual blocks were validated when each was uploaded.</td></tr>
     * <tr><td>x-ms-content-crc64</td><td>String</td><td>No</td><td>Specify the transactional crc64 for the body, to be
     * validated by the service.</td></tr>
     * <tr><td>x-ms-lease-id</td><td>String</td><td>No</td><td>If specified, the operation only succeeds if the
     * resource's lease is active and matches this ID.</td></tr>
     * <tr><td>x-ms-encryption-key</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later. Specifies
     * the encryption key to use to encrypt the data provided in the request. If not specified, the request will be
     * encrypted with the root account key.</td></tr>
     * <tr><td>x-ms-encryption-key-sha256</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later.
     * Specifies the SHA256 hash of the encryption key used to encrypt the data provided in the request. This header is
     * only used for encryption with a customer-provided key. If the request is authenticated with a client token, this
     * header should be specified using the SHA256 hash of the encryption key.</td></tr>
     * <tr><td>x-ms-encryption-algorithm</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later.
     * Specifies the algorithm to use for encryption. If not specified, the default is AES256. Allowed values:
     * "AES256".</td></tr>
     * <tr><td>x-ms-encryption-scope</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later. Specifies
     * the encryption scope to use to encrypt the data provided in the request. If not specified, the request will be
     * encrypted with the root account key.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * BinaryData
     * }
     * </pre>
     * 
     * @param blockId A valid Base64 string value that identifies the block. Prior to encoding, the string must be less
     * than or equal to 64 bytes in size. For a given blob, the length of the value specified for the blockid parameter
     * must be the same size for each block.
     * @param contentLength The length of the request.
     * @param body The body of the request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> stageBlockWithResponse(byte[] blockId, long contentLength, BinaryData body,
        RequestOptions requestOptions) {
        return this.serviceClient.stageBlockWithResponseAsync(blockId, contentLength, body, requestOptions);
    }

    /**
     * The Stage Block From URL operation creates a new block to be committed as part of a blob where the contents are
     * read from a URL.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-source-range</td><td>String</td><td>No</td><td>Bytes of source data in the specified
     * range.</td></tr>
     * <tr><td>x-ms-source-content-md5</td><td>String</td><td>No</td><td>Specify the md5 calculated for the range of
     * bytes that must be read from the copy source.</td></tr>
     * <tr><td>x-ms-source-content-crc64</td><td>byte[]</td><td>No</td><td>Specify the crc64 calculated for the range of
     * bytes that must be read from the copy source.</td></tr>
     * <tr><td>x-ms-encryption-key</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later. Specifies
     * the encryption key to use to encrypt the data provided in the request. If not specified, the request will be
     * encrypted with the root account key.</td></tr>
     * <tr><td>x-ms-encryption-key-sha256</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later.
     * Specifies the SHA256 hash of the encryption key used to encrypt the data provided in the request. This header is
     * only used for encryption with a customer-provided key. If the request is authenticated with a client token, this
     * header should be specified using the SHA256 hash of the encryption key.</td></tr>
     * <tr><td>x-ms-encryption-algorithm</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later.
     * Specifies the algorithm to use for encryption. If not specified, the default is AES256. Allowed values:
     * "AES256".</td></tr>
     * <tr><td>x-ms-encryption-scope</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later. Specifies
     * the encryption scope to use to encrypt the data provided in the request. If not specified, the request will be
     * encrypted with the root account key.</td></tr>
     * <tr><td>x-ms-lease-id</td><td>String</td><td>No</td><td>If specified, the operation only succeeds if the
     * resource's lease is active and matches this ID.</td></tr>
     * <tr><td>x-ms-source-if-modified-since</td><td>OffsetDateTime</td><td>No</td><td>Specify this header value to
     * operate only on a blob if it has been modified since the specified date/time.</td></tr>
     * <tr><td>x-ms-source-if-unmodified-since</td><td>OffsetDateTime</td><td>No</td><td>Specify this header value to
     * operate only on a blob if it has not been modified since the specified date/time.</td></tr>
     * <tr><td>x-ms-source-if-match</td><td>String</td><td>No</td><td>Specify an ETag value to operate only on blobs
     * with a matching value.</td></tr>
     * <tr><td>x-ms-source-if-none-match</td><td>String</td><td>No</td><td>Specify this header value to operate only on
     * a blob if it has been modified since the specified date/time.</td></tr>
     * <tr><td>x-ms-copy-source-authorization</td><td>String</td><td>No</td><td>Only Bearer type is supported.
     * Credentials should be a valid OAuth access token to copy source.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param blockId A valid Base64 string value that identifies the block. Prior to encoding, the string must be less
     * than or equal to 64 bytes in size. For a given blob, the length of the value specified for the blockid parameter
     * must be the same size for each block.
     * @param contentLength The length of the request.
     * @param sourceUrl Specify a URL to the copy source.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> stageBlockFromUrlWithResponse(byte[] blockId, long contentLength, String sourceUrl,
        RequestOptions requestOptions) {
        return this.serviceClient.stageBlockFromUrlWithResponseAsync(blockId, contentLength, sourceUrl, requestOptions);
    }

    /**
     * The Commit Block List operation writes a blob by specifying the list of block IDs that make up the blob. In order
     * to be written as part of a blob, a block must have been successfully written to the server in a prior Put Block
     * operation. You can call Put Block List to update a blob by uploading only those blocks that have changed, then
     * committing the new and existing blocks together. You can do this by specifying whether to commit a block from the
     * committed block list or from the uncommitted block list, or to commit the most recently uploaded version of the
     * block, whichever list it may belong to.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-blob-cache-control</td><td>String</td><td>No</td><td>Optional. Sets the blob's cache control. If
     * specified, this property is stored with the blob and returned with a read request.</td></tr>
     * <tr><td>x-ms-blob-content-type</td><td>String</td><td>No</td><td>Optional. Sets the blob's content type. If
     * specified, this property is stored with the blob and returned with a read request.</td></tr>
     * <tr><td>x-ms-blob-content-encoding</td><td>String</td><td>No</td><td>Optional. Sets the blob's content encoding.
     * If specified, this property is stored with the blob and returned with a read request.</td></tr>
     * <tr><td>x-ms-blob-content-language</td><td>String</td><td>No</td><td>Optional. Set the blob's content language.
     * If specified, this property is stored with the blob and returned with a read request.</td></tr>
     * <tr><td>x-ms-blob-content-md5</td><td>byte[]</td><td>No</td><td>Optional. An MD5 hash of the blob content. Note
     * that this hash is not validated, as the hashes for the individual blocks were validated when each was
     * uploaded.</td></tr>
     * <tr><td>Content-MD5</td><td>String</td><td>No</td><td>Optional. An MD5 hash of the blob content. Note that this
     * hash is not validated, as the hashes for the individual blocks were validated when each was uploaded.</td></tr>
     * <tr><td>x-ms-content-crc64</td><td>String</td><td>No</td><td>Specify the transactional crc64 for the body, to be
     * validated by the service.</td></tr>
     * <tr><td>x-ms-meta</td><td>Map&lt;String, String&gt;</td><td>No</td><td>The metadata headers.</td></tr>
     * <tr><td>x-ms-lease-id</td><td>String</td><td>No</td><td>If specified, the operation only succeeds if the
     * resource's lease is active and matches this ID.</td></tr>
     * <tr><td>x-ms-blob-content-disposition</td><td>String</td><td>No</td><td>Optional. Sets the blob's content
     * disposition. If specified, this property is stored with the blob and returned with a read request.</td></tr>
     * <tr><td>x-ms-encryption-key</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later. Specifies
     * the encryption key to use to encrypt the data provided in the request. If not specified, the request will be
     * encrypted with the root account key.</td></tr>
     * <tr><td>x-ms-encryption-key-sha256</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later.
     * Specifies the SHA256 hash of the encryption key used to encrypt the data provided in the request. This header is
     * only used for encryption with a customer-provided key. If the request is authenticated with a client token, this
     * header should be specified using the SHA256 hash of the encryption key.</td></tr>
     * <tr><td>x-ms-encryption-algorithm</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later.
     * Specifies the algorithm to use for encryption. If not specified, the default is AES256. Allowed values:
     * "AES256".</td></tr>
     * <tr><td>x-ms-encryption-scope</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later. Specifies
     * the encryption scope to use to encrypt the data provided in the request. If not specified, the request will be
     * encrypted with the root account key.</td></tr>
     * <tr><td>x-ms-access-tier</td><td>String</td><td>No</td><td>The tier to be set on the blob. Allowed values: "P4",
     * "P6", "P10", "P15", "P20", "P30", "P40", "P50", "P60", "P70", "P80", "Hot", "Cool", "Archive", "Premium",
     * "Cold".</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>The request should only proceed if an entity matches this
     * string.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>The request should only proceed if no entity matches this
     * string.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the
     * entity was not modified after this time.</td></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the entity
     * was modified after this time.</td></tr>
     * <tr><td>x-ms-if-tags</td><td>String</td><td>No</td><td>Specify a SQL where clause on blob tags to operate only on
     * blobs with a matching value.</td></tr>
     * <tr><td>x-ms-tags</td><td>String</td><td>No</td><td>Optional. Used to set blob tags in various blob
     * operations.</td></tr>
     * <tr><td>x-ms-immutability-policy-until-date</td><td>OffsetDateTime</td><td>No</td><td>Specifies the date time
     * when the blobs immutability policy is set to expire.</td></tr>
     * <tr><td>x-ms-immutability-policy-mode</td><td>String</td><td>No</td><td>Specifies the immutability policy mode to
     * set on the blob. Allowed values: "Mutable", "Locked", "Unlocked".</td></tr>
     * <tr><td>x-ms-legal-hold</td><td>Boolean</td><td>No</td><td>Specified if a legal hold should be set on the
     * blob.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     committed (Optional): [
     *         byte[] (Optional)
     *     ]
     *     uncommitted (Optional): [
     *         byte[] (Optional)
     *     ]
     *     latest (Optional): [
     *         byte[] (Optional)
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param blocks Blob Blocks.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> commitBlockListWithResponse(BinaryData blocks, RequestOptions requestOptions) {
        return this.serviceClient.commitBlockListWithResponseAsync(blocks, requestOptions);
    }

    /**
     * The Get Block List operation retrieves the list of blocks that have been uploaded as part of a block blob.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>snapshot</td><td>String</td><td>No</td><td>The snapshot parameter is an opaque DateTime value that, when
     * present, specifies the blob snapshot to retrieve. For more information on working with blob snapshots, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob"&gt;Creating
     * a Snapshot of a Blob.&lt;/a&gt;</td></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-lease-id</td><td>String</td><td>No</td><td>If specified, the operation only succeeds if the
     * resource's lease is active and matches this ID.</td></tr>
     * <tr><td>x-ms-if-tags</td><td>String</td><td>No</td><td>Specify a SQL where clause on blob tags to operate only on
     * blobs with a matching value.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     committedBlocks (Optional): [
     *          (Optional){
     *             name: byte[] (Required)
     *             size: long (Required)
     *         }
     *     ]
     *     uncommittedBlocks (Optional): [
     *         (recursive schema, see above)
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param listType Specifies whether to return the list of committed blocks, the list of uncommitted blocks, or both
     * lists together. Allowed values: "committed", "uncommitted", "all".
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return contains the committed and uncommitted blocks in a block blob along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getBlockListWithResponse(String listType, RequestOptions requestOptions) {
        return this.serviceClient.getBlockListWithResponseAsync(listType, requestOptions);
    }

    /**
     * The Query operation enables users to select/project on blob data by providing simple query expressions.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>snapshot</td><td>String</td><td>No</td><td>The snapshot parameter is an opaque DateTime value that, when
     * present, specifies the blob snapshot to retrieve. For more information on working with blob snapshots, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob"&gt;Creating
     * a Snapshot of a Blob.&lt;/a&gt;</td></tr>
     * <tr><td>timeout</td><td>Integer</td><td>No</td><td>The timeout parameter is expressed in seconds. For more
     * information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>x-ms-lease-id</td><td>String</td><td>No</td><td>If specified, the operation only succeeds if the
     * resource's lease is active and matches this ID.</td></tr>
     * <tr><td>x-ms-encryption-key</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later. Specifies
     * the encryption key to use to encrypt the data provided in the request. If not specified, the request will be
     * encrypted with the root account key.</td></tr>
     * <tr><td>x-ms-encryption-key-sha256</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later.
     * Specifies the SHA256 hash of the encryption key used to encrypt the data provided in the request. This header is
     * only used for encryption with a customer-provided key. If the request is authenticated with a client token, this
     * header should be specified using the SHA256 hash of the encryption key.</td></tr>
     * <tr><td>x-ms-encryption-algorithm</td><td>String</td><td>No</td><td>Optional. Version 2019-07-07 and later.
     * Specifies the algorithm to use for encryption. If not specified, the default is AES256. Allowed values:
     * "AES256".</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>The request should only proceed if an entity matches this
     * string.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>The request should only proceed if no entity matches this
     * string.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the
     * entity was not modified after this time.</td></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the entity
     * was modified after this time.</td></tr>
     * <tr><td>x-ms-if-tags</td><td>String</td><td>No</td><td>Specify a SQL where clause on blob tags to operate only on
     * blobs with a matching value.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     queryType: String(SQL) (Required)
     *     expression: String (Required)
     *     inputSerialization (Optional): {
     *         format (Required): {
     *             type: String(delimited/json/arrow/parquet) (Required)
     *             delimitedTextConfiguration (Optional): {
     *                 columnSeparator: String (Optional)
     *                 fieldQuote: String (Optional)
     *                 recordSeparator: String (Optional)
     *                 escapeChar: String (Optional)
     *                 headersPresent: Boolean (Optional)
     *             }
     *             jsonTextConfiguration (Optional): {
     *                 recordSeparator: String (Optional)
     *             }
     *             arrowConfiguration (Optional): {
     *                 schema (Required): [
     *                      (Required){
     *                         type: String (Required)
     *                         name: String (Optional)
     *                         precision: Integer (Optional)
     *                         scale: Integer (Optional)
     *                     }
     *                 ]
     *             }
     *             parquetTextConfiguration (Optional): {
     *                  (Optional): {
     *                     String: BinaryData (Required)
     *                 }
     *             }
     *         }
     *     }
     *     outputSerialization (Optional): (recursive schema, see outputSerialization above)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * BinaryData
     * }
     * </pre>
     * 
     * @param queryRequest The query request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> queryWithResponse(BinaryData queryRequest, RequestOptions requestOptions) {
        return this.serviceClient.queryWithResponseAsync(queryRequest, requestOptions);
    }

    /**
     * The Upload Block Blob operation updates the content of an existing block blob. Updating an existing block blob
     * overwrites any existing metadata on the blob. Partial updates are not supported with Put Blob; the content of the
     * existing blob is overwritten with the content of the new blob. To perform a partial update of the content of a
     * block blob, use the Put Block List operation.
     * 
     * @param contentLength The length of the request.
     * @param body The body of the request.
     * @param metadata The metadata headers.
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;.
     * @param transactionalContentMD5 Optional. An MD5 hash of the blob content. Note that this hash is not validated,
     * as the hashes for the individual blocks were validated when each was uploaded.
     * @param blobContentType Optional. Sets the blob's content type. If specified, this property is stored with the
     * blob and returned with a read request.
     * @param blobContentEncoding Optional. Sets the blob's content encoding. If specified, this property is stored with
     * the blob and returned with a read request.
     * @param blobContentLanguage Optional. Set the blob's content language. If specified, this property is stored with
     * the blob and returned with a read request.
     * @param blobContentMd5 Optional. An MD5 hash of the blob content. Note that this hash is not validated, as the
     * hashes for the individual blocks were validated when each was uploaded.
     * @param blobCacheControl Optional. Sets the blob's cache control. If specified, this property is stored with the
     * blob and returned with a read request.
     * @param leaseId If specified, the operation only succeeds if the resource's lease is active and matches this ID.
     * @param blobContentDisposition Optional. Sets the blob's content disposition. If specified, this property is
     * stored with the blob and returned with a read request.
     * @param encryptionKey Optional. Version 2019-07-07 and later. Specifies the encryption key to use to encrypt the
     * data provided in the request. If not specified, the request will be encrypted with the root account key.
     * @param encryptionKeySha256 Optional. Version 2019-07-07 and later. Specifies the SHA256 hash of the encryption
     * key used to encrypt the data provided in the request. This header is only used for encryption with a
     * customer-provided key. If the request is authenticated with a client token, this header should be specified using
     * the SHA256 hash of the encryption key.
     * @param encryptionAlgorithm Optional. Version 2019-07-07 and later. Specifies the algorithm to use for encryption.
     * If not specified, the default is AES256.
     * @param encryptionScope Optional. Version 2019-07-07 and later. Specifies the encryption scope to use to encrypt
     * the data provided in the request. If not specified, the request will be encrypted with the root account key.
     * @param tier The tier to be set on the blob.
     * @param ifTags Specify a SQL where clause on blob tags to operate only on blobs with a matching value.
     * @param blobTagsString Optional. Used to set blob tags in various blob operations.
     * @param immutabilityPolicyExpiry Specifies the date time when the blobs immutability policy is set to expire.
     * @param immutabilityPolicyMode Specifies the immutability policy mode to set on the blob.
     * @param legalHold Specified if a legal hold should be set on the blob.
     * @param transactionalContentCrc64 Specify the transactional crc64 for the body, to be validated by the service.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> upload(long contentLength, BinaryData body, Map<String, String> metadata, Integer timeout,
        String transactionalContentMD5, String blobContentType, String blobContentEncoding, String blobContentLanguage,
        byte[] blobContentMd5, String blobCacheControl, String leaseId, String blobContentDisposition,
        String encryptionKey, String encryptionKeySha256, EncryptionAlgorithmType encryptionAlgorithm,
        String encryptionScope, AccessTier tier, String ifTags, String blobTagsString,
        OffsetDateTime immutabilityPolicyExpiry, BlobImmutabilityPolicyMode immutabilityPolicyMode, Boolean legalHold,
        String transactionalContentCrc64, RequestConditions requestConditions) {
        // Generated convenience method for uploadWithResponse
        RequestOptions requestOptions = new RequestOptions();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        if (metadata != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-meta"), String.valueOf(metadata));
        }
        if (timeout != null) {
            requestOptions.addQueryParam("timeout", String.valueOf(timeout), false);
        }
        if (transactionalContentMD5 != null) {
            requestOptions.setHeader(HttpHeaderName.CONTENT_MD5, transactionalContentMD5);
        }
        if (blobContentType != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-blob-content-type"), blobContentType);
        }
        if (blobContentEncoding != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-blob-content-encoding"), blobContentEncoding);
        }
        if (blobContentLanguage != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-blob-content-language"), blobContentLanguage);
        }
        if (blobContentMd5 != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-blob-content-md5"),
                String.valueOf(blobContentMd5));
        }
        if (blobCacheControl != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-blob-cache-control"), blobCacheControl);
        }
        if (leaseId != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-lease-id"), leaseId);
        }
        if (blobContentDisposition != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-blob-content-disposition"),
                blobContentDisposition);
        }
        if (encryptionKey != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-encryption-key"), encryptionKey);
        }
        if (encryptionKeySha256 != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-encryption-key-sha256"), encryptionKeySha256);
        }
        if (encryptionAlgorithm != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-encryption-algorithm"),
                encryptionAlgorithm.toString());
        }
        if (encryptionScope != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-encryption-scope"), encryptionScope);
        }
        if (tier != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-access-tier"), tier.toString());
        }
        if (ifTags != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-if-tags"), ifTags);
        }
        if (blobTagsString != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-tags"), blobTagsString);
        }
        if (immutabilityPolicyExpiry != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-immutability-policy-until-date"),
                String.valueOf(new DateTimeRfc1123(immutabilityPolicyExpiry)));
        }
        if (immutabilityPolicyMode != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-immutability-policy-mode"),
                immutabilityPolicyMode.toString());
        }
        if (legalHold != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-legal-hold"), String.valueOf(legalHold));
        }
        if (transactionalContentCrc64 != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-content-crc64"), transactionalContentCrc64);
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_UNMODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        return uploadWithResponse(contentLength, body, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * The Upload Block Blob operation updates the content of an existing block blob. Updating an existing block blob
     * overwrites any existing metadata on the blob. Partial updates are not supported with Put Blob; the content of the
     * existing blob is overwritten with the content of the new blob. To perform a partial update of the content of a
     * block blob, use the Put Block List operation.
     * 
     * @param contentLength The length of the request.
     * @param body The body of the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> upload(long contentLength, BinaryData body) {
        // Generated convenience method for uploadWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return uploadWithResponse(contentLength, body, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * The Put Blob from URL operation creates a new Block Blob where the contents of the blob are read from a given
     * URL. This API is supported beginning with the 2020-04-08 version. Partial updates are not supported with Put Blob
     * from URL; the content of an existing blob is overwritten with the content of the new blob. To perform partial
     * updates to a block blobâ€™s contents using a source URL, use the Put Block from URL API in conjunction with Put
     * Block List.
     * 
     * @param contentLength The length of the request.
     * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up to 2 KB in
     * length that specifies a page blob snapshot. The value should be URL-encoded as it would appear in a request URI.
     * The source blob must either be public or must be authenticated via a shared access signature.
     * @param metadata The metadata headers.
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;.
     * @param transactionalContentMD5 Optional. An MD5 hash of the blob content. Note that this hash is not validated,
     * as the hashes for the individual blocks were validated when each was uploaded.
     * @param blobContentType Optional. Sets the blob's content type. If specified, this property is stored with the
     * blob and returned with a read request.
     * @param blobContentEncoding Optional. Sets the blob's content encoding. If specified, this property is stored with
     * the blob and returned with a read request.
     * @param blobContentLanguage Optional. Set the blob's content language. If specified, this property is stored with
     * the blob and returned with a read request.
     * @param blobContentMd5 Optional. An MD5 hash of the blob content. Note that this hash is not validated, as the
     * hashes for the individual blocks were validated when each was uploaded.
     * @param blobCacheControl Optional. Sets the blob's cache control. If specified, this property is stored with the
     * blob and returned with a read request.
     * @param leaseId If specified, the operation only succeeds if the resource's lease is active and matches this ID.
     * @param blobContentDisposition Optional. Sets the blob's content disposition. If specified, this property is
     * stored with the blob and returned with a read request.
     * @param encryptionKey Optional. Version 2019-07-07 and later. Specifies the encryption key to use to encrypt the
     * data provided in the request. If not specified, the request will be encrypted with the root account key.
     * @param encryptionKeySha256 Optional. Version 2019-07-07 and later. Specifies the SHA256 hash of the encryption
     * key used to encrypt the data provided in the request. This header is only used for encryption with a
     * customer-provided key. If the request is authenticated with a client token, this header should be specified using
     * the SHA256 hash of the encryption key.
     * @param encryptionAlgorithm Optional. Version 2019-07-07 and later. Specifies the algorithm to use for encryption.
     * If not specified, the default is AES256.
     * @param encryptionScope Optional. Version 2019-07-07 and later. Specifies the encryption scope to use to encrypt
     * the data provided in the request. If not specified, the request will be encrypted with the root account key.
     * @param tier The tier to be set on the blob.
     * @param ifTags Specify a SQL where clause on blob tags to operate only on blobs with a matching value.
     * @param sourceIfModifiedSince Specify this header value to operate only on a blob if it has been modified since
     * the specified date/time.
     * @param sourceIfUnmodifiedSince Specify this header value to operate only on a blob if it has not been modified
     * since the specified date/time.
     * @param sourceIfMatch Specify an ETag value to operate only on blobs with a matching value.
     * @param sourceIfNoneMatch Specify this header value to operate only on a blob if it has been modified since the
     * specified date/time.
     * @param sourceIfTags Specify a SQL where clause on blob tags to operate only on blobs with a matching value.
     * @param sourceContentMd5 Specify the md5 calculated for the range of bytes that must be read from the copy source.
     * @param blobTagsString Optional. Used to set blob tags in various blob operations.
     * @param copySourceBlobProperties Optional, default is true. Indicates if properties from the source blob should be
     * copied.
     * @param copySourceAuthorization Only Bearer type is supported. Credentials should be a valid OAuth access token to
     * copy source.
     * @param copySourceTags Optional, default 'replace'. Indicates if source tags should be copied or replaced with the
     * tags specified by x-ms-tags.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putBlobFromUrl(long contentLength, String copySource, Map<String, String> metadata,
        Integer timeout, String transactionalContentMD5, String blobContentType, String blobContentEncoding,
        String blobContentLanguage, byte[] blobContentMd5, String blobCacheControl, String leaseId,
        String blobContentDisposition, String encryptionKey, String encryptionKeySha256,
        EncryptionAlgorithmType encryptionAlgorithm, String encryptionScope, AccessTier tier, String ifTags,
        OffsetDateTime sourceIfModifiedSince, OffsetDateTime sourceIfUnmodifiedSince, String sourceIfMatch,
        String sourceIfNoneMatch, String sourceIfTags, String sourceContentMd5, String blobTagsString,
        Boolean copySourceBlobProperties, String copySourceAuthorization, String copySourceTags,
        RequestConditions requestConditions) {
        // Generated convenience method for putBlobFromUrlWithResponse
        RequestOptions requestOptions = new RequestOptions();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        if (metadata != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-meta"), String.valueOf(metadata));
        }
        if (timeout != null) {
            requestOptions.addQueryParam("timeout", String.valueOf(timeout), false);
        }
        if (transactionalContentMD5 != null) {
            requestOptions.setHeader(HttpHeaderName.CONTENT_MD5, transactionalContentMD5);
        }
        if (blobContentType != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-blob-content-type"), blobContentType);
        }
        if (blobContentEncoding != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-blob-content-encoding"), blobContentEncoding);
        }
        if (blobContentLanguage != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-blob-content-language"), blobContentLanguage);
        }
        if (blobContentMd5 != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-blob-content-md5"),
                String.valueOf(blobContentMd5));
        }
        if (blobCacheControl != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-blob-cache-control"), blobCacheControl);
        }
        if (leaseId != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-lease-id"), leaseId);
        }
        if (blobContentDisposition != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-blob-content-disposition"),
                blobContentDisposition);
        }
        if (encryptionKey != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-encryption-key"), encryptionKey);
        }
        if (encryptionKeySha256 != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-encryption-key-sha256"), encryptionKeySha256);
        }
        if (encryptionAlgorithm != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-encryption-algorithm"),
                encryptionAlgorithm.toString());
        }
        if (encryptionScope != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-encryption-scope"), encryptionScope);
        }
        if (tier != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-access-tier"), tier.toString());
        }
        if (ifTags != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-if-tags"), ifTags);
        }
        if (sourceIfModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-source-if-modified-since"),
                String.valueOf(new DateTimeRfc1123(sourceIfModifiedSince)));
        }
        if (sourceIfUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-source-if-unmodified-since"),
                String.valueOf(new DateTimeRfc1123(sourceIfUnmodifiedSince)));
        }
        if (sourceIfMatch != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-source-if-match"), sourceIfMatch);
        }
        if (sourceIfNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-source-if-none-match"), sourceIfNoneMatch);
        }
        if (sourceIfTags != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-source-if-tags"), sourceIfTags);
        }
        if (sourceContentMd5 != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-source-content-md5"), sourceContentMd5);
        }
        if (blobTagsString != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-tags"), blobTagsString);
        }
        if (copySourceBlobProperties != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-copy-source-blob-properties"),
                String.valueOf(copySourceBlobProperties));
        }
        if (copySourceAuthorization != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-copy-source-authorization"),
                copySourceAuthorization);
        }
        if (copySourceTags != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-copy-source-tags"), copySourceTags);
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_UNMODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        return putBlobFromUrlWithResponse(contentLength, copySource, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * The Put Blob from URL operation creates a new Block Blob where the contents of the blob are read from a given
     * URL. This API is supported beginning with the 2020-04-08 version. Partial updates are not supported with Put Blob
     * from URL; the content of an existing blob is overwritten with the content of the new blob. To perform partial
     * updates to a block blobâ€™s contents using a source URL, use the Put Block from URL API in conjunction with Put
     * Block List.
     * 
     * @param contentLength The length of the request.
     * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up to 2 KB in
     * length that specifies a page blob snapshot. The value should be URL-encoded as it would appear in a request URI.
     * The source blob must either be public or must be authenticated via a shared access signature.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putBlobFromUrl(long contentLength, String copySource) {
        // Generated convenience method for putBlobFromUrlWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return putBlobFromUrlWithResponse(contentLength, copySource, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * The Stage Block operation creates a new block to be committed as part of a blob.
     * 
     * @param blockId A valid Base64 string value that identifies the block. Prior to encoding, the string must be less
     * than or equal to 64 bytes in size. For a given blob, the length of the value specified for the blockid parameter
     * must be the same size for each block.
     * @param contentLength The length of the request.
     * @param body The body of the request.
     * @param transactionalContentMD5 Optional. An MD5 hash of the blob content. Note that this hash is not validated,
     * as the hashes for the individual blocks were validated when each was uploaded.
     * @param transactionalContentCrc64 Specify the transactional crc64 for the body, to be validated by the service.
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;.
     * @param leaseId If specified, the operation only succeeds if the resource's lease is active and matches this ID.
     * @param encryptionKey Optional. Version 2019-07-07 and later. Specifies the encryption key to use to encrypt the
     * data provided in the request. If not specified, the request will be encrypted with the root account key.
     * @param encryptionKeySha256 Optional. Version 2019-07-07 and later. Specifies the SHA256 hash of the encryption
     * key used to encrypt the data provided in the request. This header is only used for encryption with a
     * customer-provided key. If the request is authenticated with a client token, this header should be specified using
     * the SHA256 hash of the encryption key.
     * @param encryptionAlgorithm Optional. Version 2019-07-07 and later. Specifies the algorithm to use for encryption.
     * If not specified, the default is AES256.
     * @param encryptionScope Optional. Version 2019-07-07 and later. Specifies the encryption scope to use to encrypt
     * the data provided in the request. If not specified, the request will be encrypted with the root account key.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> stageBlock(byte[] blockId, long contentLength, BinaryData body, String transactionalContentMD5,
        String transactionalContentCrc64, Integer timeout, String leaseId, String encryptionKey,
        String encryptionKeySha256, EncryptionAlgorithmType encryptionAlgorithm, String encryptionScope) {
        // Generated convenience method for stageBlockWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (transactionalContentMD5 != null) {
            requestOptions.setHeader(HttpHeaderName.CONTENT_MD5, transactionalContentMD5);
        }
        if (transactionalContentCrc64 != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-content-crc64"), transactionalContentCrc64);
        }
        if (timeout != null) {
            requestOptions.addQueryParam("timeout", String.valueOf(timeout), false);
        }
        if (leaseId != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-lease-id"), leaseId);
        }
        if (encryptionKey != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-encryption-key"), encryptionKey);
        }
        if (encryptionKeySha256 != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-encryption-key-sha256"), encryptionKeySha256);
        }
        if (encryptionAlgorithm != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-encryption-algorithm"),
                encryptionAlgorithm.toString());
        }
        if (encryptionScope != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-encryption-scope"), encryptionScope);
        }
        return stageBlockWithResponse(blockId, contentLength, body, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * The Stage Block operation creates a new block to be committed as part of a blob.
     * 
     * @param blockId A valid Base64 string value that identifies the block. Prior to encoding, the string must be less
     * than or equal to 64 bytes in size. For a given blob, the length of the value specified for the blockid parameter
     * must be the same size for each block.
     * @param contentLength The length of the request.
     * @param body The body of the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> stageBlock(byte[] blockId, long contentLength, BinaryData body) {
        // Generated convenience method for stageBlockWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return stageBlockWithResponse(blockId, contentLength, body, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * The Stage Block From URL operation creates a new block to be committed as part of a blob where the contents are
     * read from a URL.
     * 
     * @param blockId A valid Base64 string value that identifies the block. Prior to encoding, the string must be less
     * than or equal to 64 bytes in size. For a given blob, the length of the value specified for the blockid parameter
     * must be the same size for each block.
     * @param contentLength The length of the request.
     * @param sourceUrl Specify a URL to the copy source.
     * @param sourceRange Bytes of source data in the specified range.
     * @param sourceContentMd5 Specify the md5 calculated for the range of bytes that must be read from the copy source.
     * @param sourceContentCrc64 Specify the crc64 calculated for the range of bytes that must be read from the copy
     * source.
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;.
     * @param encryptionKey Optional. Version 2019-07-07 and later. Specifies the encryption key to use to encrypt the
     * data provided in the request. If not specified, the request will be encrypted with the root account key.
     * @param encryptionKeySha256 Optional. Version 2019-07-07 and later. Specifies the SHA256 hash of the encryption
     * key used to encrypt the data provided in the request. This header is only used for encryption with a
     * customer-provided key. If the request is authenticated with a client token, this header should be specified using
     * the SHA256 hash of the encryption key.
     * @param encryptionAlgorithm Optional. Version 2019-07-07 and later. Specifies the algorithm to use for encryption.
     * If not specified, the default is AES256.
     * @param encryptionScope Optional. Version 2019-07-07 and later. Specifies the encryption scope to use to encrypt
     * the data provided in the request. If not specified, the request will be encrypted with the root account key.
     * @param leaseId If specified, the operation only succeeds if the resource's lease is active and matches this ID.
     * @param sourceIfModifiedSince Specify this header value to operate only on a blob if it has been modified since
     * the specified date/time.
     * @param sourceIfUnmodifiedSince Specify this header value to operate only on a blob if it has not been modified
     * since the specified date/time.
     * @param sourceIfMatch Specify an ETag value to operate only on blobs with a matching value.
     * @param sourceIfNoneMatch Specify this header value to operate only on a blob if it has been modified since the
     * specified date/time.
     * @param copySourceAuthorization Only Bearer type is supported. Credentials should be a valid OAuth access token to
     * copy source.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> stageBlockFromUrl(byte[] blockId, long contentLength, String sourceUrl, String sourceRange,
        String sourceContentMd5, byte[] sourceContentCrc64, Integer timeout, String encryptionKey,
        String encryptionKeySha256, EncryptionAlgorithmType encryptionAlgorithm, String encryptionScope, String leaseId,
        OffsetDateTime sourceIfModifiedSince, OffsetDateTime sourceIfUnmodifiedSince, String sourceIfMatch,
        String sourceIfNoneMatch, String copySourceAuthorization) {
        // Generated convenience method for stageBlockFromUrlWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (sourceRange != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-source-range"), sourceRange);
        }
        if (sourceContentMd5 != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-source-content-md5"), sourceContentMd5);
        }
        if (sourceContentCrc64 != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-source-content-crc64"),
                String.valueOf(sourceContentCrc64));
        }
        if (timeout != null) {
            requestOptions.addQueryParam("timeout", String.valueOf(timeout), false);
        }
        if (encryptionKey != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-encryption-key"), encryptionKey);
        }
        if (encryptionKeySha256 != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-encryption-key-sha256"), encryptionKeySha256);
        }
        if (encryptionAlgorithm != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-encryption-algorithm"),
                encryptionAlgorithm.toString());
        }
        if (encryptionScope != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-encryption-scope"), encryptionScope);
        }
        if (leaseId != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-lease-id"), leaseId);
        }
        if (sourceIfModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-source-if-modified-since"),
                String.valueOf(new DateTimeRfc1123(sourceIfModifiedSince)));
        }
        if (sourceIfUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-source-if-unmodified-since"),
                String.valueOf(new DateTimeRfc1123(sourceIfUnmodifiedSince)));
        }
        if (sourceIfMatch != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-source-if-match"), sourceIfMatch);
        }
        if (sourceIfNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-source-if-none-match"), sourceIfNoneMatch);
        }
        if (copySourceAuthorization != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-copy-source-authorization"),
                copySourceAuthorization);
        }
        return stageBlockFromUrlWithResponse(blockId, contentLength, sourceUrl, requestOptions)
            .flatMap(FluxUtil::toMono);
    }

    /**
     * The Stage Block From URL operation creates a new block to be committed as part of a blob where the contents are
     * read from a URL.
     * 
     * @param blockId A valid Base64 string value that identifies the block. Prior to encoding, the string must be less
     * than or equal to 64 bytes in size. For a given blob, the length of the value specified for the blockid parameter
     * must be the same size for each block.
     * @param contentLength The length of the request.
     * @param sourceUrl Specify a URL to the copy source.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> stageBlockFromUrl(byte[] blockId, long contentLength, String sourceUrl) {
        // Generated convenience method for stageBlockFromUrlWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return stageBlockFromUrlWithResponse(blockId, contentLength, sourceUrl, requestOptions)
            .flatMap(FluxUtil::toMono);
    }

    /**
     * The Commit Block List operation writes a blob by specifying the list of block IDs that make up the blob. In order
     * to be written as part of a blob, a block must have been successfully written to the server in a prior Put Block
     * operation. You can call Put Block List to update a blob by uploading only those blocks that have changed, then
     * committing the new and existing blocks together. You can do this by specifying whether to commit a block from the
     * committed block list or from the uncommitted block list, or to commit the most recently uploaded version of the
     * block, whichever list it may belong to.
     * 
     * @param blocks Blob Blocks.
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;.
     * @param blobCacheControl Optional. Sets the blob's cache control. If specified, this property is stored with the
     * blob and returned with a read request.
     * @param blobContentType Optional. Sets the blob's content type. If specified, this property is stored with the
     * blob and returned with a read request.
     * @param blobContentEncoding Optional. Sets the blob's content encoding. If specified, this property is stored with
     * the blob and returned with a read request.
     * @param blobContentLanguage Optional. Set the blob's content language. If specified, this property is stored with
     * the blob and returned with a read request.
     * @param blobContentMd5 Optional. An MD5 hash of the blob content. Note that this hash is not validated, as the
     * hashes for the individual blocks were validated when each was uploaded.
     * @param transactionalContentMD5 Optional. An MD5 hash of the blob content. Note that this hash is not validated,
     * as the hashes for the individual blocks were validated when each was uploaded.
     * @param transactionalContentCrc64 Specify the transactional crc64 for the body, to be validated by the service.
     * @param metadata The metadata headers.
     * @param leaseId If specified, the operation only succeeds if the resource's lease is active and matches this ID.
     * @param blobContentDisposition Optional. Sets the blob's content disposition. If specified, this property is
     * stored with the blob and returned with a read request.
     * @param encryptionKey Optional. Version 2019-07-07 and later. Specifies the encryption key to use to encrypt the
     * data provided in the request. If not specified, the request will be encrypted with the root account key.
     * @param encryptionKeySha256 Optional. Version 2019-07-07 and later. Specifies the SHA256 hash of the encryption
     * key used to encrypt the data provided in the request. This header is only used for encryption with a
     * customer-provided key. If the request is authenticated with a client token, this header should be specified using
     * the SHA256 hash of the encryption key.
     * @param encryptionAlgorithm Optional. Version 2019-07-07 and later. Specifies the algorithm to use for encryption.
     * If not specified, the default is AES256.
     * @param encryptionScope Optional. Version 2019-07-07 and later. Specifies the encryption scope to use to encrypt
     * the data provided in the request. If not specified, the request will be encrypted with the root account key.
     * @param tier The tier to be set on the blob.
     * @param ifTags Specify a SQL where clause on blob tags to operate only on blobs with a matching value.
     * @param blobTagsString Optional. Used to set blob tags in various blob operations.
     * @param immutabilityPolicyExpiry Specifies the date time when the blobs immutability policy is set to expire.
     * @param immutabilityPolicyMode Specifies the immutability policy mode to set on the blob.
     * @param legalHold Specified if a legal hold should be set on the blob.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> commitBlockList(BlockLookupList blocks, Integer timeout, String blobCacheControl,
        String blobContentType, String blobContentEncoding, String blobContentLanguage, byte[] blobContentMd5,
        String transactionalContentMD5, String transactionalContentCrc64, Map<String, String> metadata, String leaseId,
        String blobContentDisposition, String encryptionKey, String encryptionKeySha256,
        EncryptionAlgorithmType encryptionAlgorithm, String encryptionScope, AccessTier tier, String ifTags,
        String blobTagsString, OffsetDateTime immutabilityPolicyExpiry,
        BlobImmutabilityPolicyMode immutabilityPolicyMode, Boolean legalHold, RequestConditions requestConditions) {
        // Generated convenience method for commitBlockListWithResponse
        RequestOptions requestOptions = new RequestOptions();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        if (timeout != null) {
            requestOptions.addQueryParam("timeout", String.valueOf(timeout), false);
        }
        if (blobCacheControl != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-blob-cache-control"), blobCacheControl);
        }
        if (blobContentType != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-blob-content-type"), blobContentType);
        }
        if (blobContentEncoding != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-blob-content-encoding"), blobContentEncoding);
        }
        if (blobContentLanguage != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-blob-content-language"), blobContentLanguage);
        }
        if (blobContentMd5 != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-blob-content-md5"),
                String.valueOf(blobContentMd5));
        }
        if (transactionalContentMD5 != null) {
            requestOptions.setHeader(HttpHeaderName.CONTENT_MD5, transactionalContentMD5);
        }
        if (transactionalContentCrc64 != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-content-crc64"), transactionalContentCrc64);
        }
        if (metadata != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-meta"), String.valueOf(metadata));
        }
        if (leaseId != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-lease-id"), leaseId);
        }
        if (blobContentDisposition != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-blob-content-disposition"),
                blobContentDisposition);
        }
        if (encryptionKey != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-encryption-key"), encryptionKey);
        }
        if (encryptionKeySha256 != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-encryption-key-sha256"), encryptionKeySha256);
        }
        if (encryptionAlgorithm != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-encryption-algorithm"),
                encryptionAlgorithm.toString());
        }
        if (encryptionScope != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-encryption-scope"), encryptionScope);
        }
        if (tier != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-access-tier"), tier.toString());
        }
        if (ifTags != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-if-tags"), ifTags);
        }
        if (blobTagsString != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-tags"), blobTagsString);
        }
        if (immutabilityPolicyExpiry != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-immutability-policy-until-date"),
                String.valueOf(new DateTimeRfc1123(immutabilityPolicyExpiry)));
        }
        if (immutabilityPolicyMode != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-immutability-policy-mode"),
                immutabilityPolicyMode.toString());
        }
        if (legalHold != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-legal-hold"), String.valueOf(legalHold));
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_UNMODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        return commitBlockListWithResponse(BinaryData.fromObject(blocks), requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * The Commit Block List operation writes a blob by specifying the list of block IDs that make up the blob. In order
     * to be written as part of a blob, a block must have been successfully written to the server in a prior Put Block
     * operation. You can call Put Block List to update a blob by uploading only those blocks that have changed, then
     * committing the new and existing blocks together. You can do this by specifying whether to commit a block from the
     * committed block list or from the uncommitted block list, or to commit the most recently uploaded version of the
     * block, whichever list it may belong to.
     * 
     * @param blocks Blob Blocks.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> commitBlockList(BlockLookupList blocks) {
        // Generated convenience method for commitBlockListWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return commitBlockListWithResponse(BinaryData.fromObject(blocks), requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * The Get Block List operation retrieves the list of blocks that have been uploaded as part of a block blob.
     * 
     * @param listType Specifies whether to return the list of committed blocks, the list of uncommitted blocks, or both
     * lists together.
     * @param snapshot The snapshot parameter is an opaque DateTime value that, when present, specifies the blob
     * snapshot to retrieve. For more information on working with blob snapshots, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob"&gt;Creating
     * a Snapshot of a Blob.&lt;/a&gt;.
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;.
     * @param leaseId If specified, the operation only succeeds if the resource's lease is active and matches this ID.
     * @param ifTags Specify a SQL where clause on blob tags to operate only on blobs with a matching value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return contains the committed and uncommitted blocks in a block blob on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BlockList> getBlockList(BlockListType listType, String snapshot, Integer timeout, String leaseId,
        String ifTags) {
        // Generated convenience method for getBlockListWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (snapshot != null) {
            requestOptions.addQueryParam("snapshot", snapshot, false);
        }
        if (timeout != null) {
            requestOptions.addQueryParam("timeout", String.valueOf(timeout), false);
        }
        if (leaseId != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-lease-id"), leaseId);
        }
        if (ifTags != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-if-tags"), ifTags);
        }
        return getBlockListWithResponse(listType.toString(), requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(BlockList.class));
    }

    /**
     * The Get Block List operation retrieves the list of blocks that have been uploaded as part of a block blob.
     * 
     * @param listType Specifies whether to return the list of committed blocks, the list of uncommitted blocks, or both
     * lists together.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return contains the committed and uncommitted blocks in a block blob on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BlockList> getBlockList(BlockListType listType) {
        // Generated convenience method for getBlockListWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getBlockListWithResponse(listType.toString(), requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(BlockList.class));
    }

    /**
     * The Query operation enables users to select/project on blob data by providing simple query expressions.
     * 
     * @param queryRequest The query request.
     * @param snapshot The snapshot parameter is an opaque DateTime value that, when present, specifies the blob
     * snapshot to retrieve. For more information on working with blob snapshots, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob"&gt;Creating
     * a Snapshot of a Blob.&lt;/a&gt;.
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting
     * Timeouts for Blob Service Operations.&lt;/a&gt;.
     * @param leaseId If specified, the operation only succeeds if the resource's lease is active and matches this ID.
     * @param encryptionKey Optional. Version 2019-07-07 and later. Specifies the encryption key to use to encrypt the
     * data provided in the request. If not specified, the request will be encrypted with the root account key.
     * @param encryptionKeySha256 Optional. Version 2019-07-07 and later. Specifies the SHA256 hash of the encryption
     * key used to encrypt the data provided in the request. This header is only used for encryption with a
     * customer-provided key. If the request is authenticated with a client token, this header should be specified using
     * the SHA256 hash of the encryption key.
     * @param encryptionAlgorithm Optional. Version 2019-07-07 and later. Specifies the algorithm to use for encryption.
     * If not specified, the default is AES256.
     * @param ifTags Specify a SQL where clause on blob tags to operate only on blobs with a matching value.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BinaryData> query(QueryRequest queryRequest, String snapshot, Integer timeout, String leaseId,
        String encryptionKey, String encryptionKeySha256, EncryptionAlgorithmType encryptionAlgorithm, String ifTags,
        RequestConditions requestConditions) {
        // Generated convenience method for queryWithResponse
        RequestOptions requestOptions = new RequestOptions();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        if (snapshot != null) {
            requestOptions.addQueryParam("snapshot", snapshot, false);
        }
        if (timeout != null) {
            requestOptions.addQueryParam("timeout", String.valueOf(timeout), false);
        }
        if (leaseId != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-lease-id"), leaseId);
        }
        if (encryptionKey != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-encryption-key"), encryptionKey);
        }
        if (encryptionKeySha256 != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-encryption-key-sha256"), encryptionKeySha256);
        }
        if (encryptionAlgorithm != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-encryption-algorithm"),
                encryptionAlgorithm.toString());
        }
        if (ifTags != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-if-tags"), ifTags);
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_UNMODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        return queryWithResponse(BinaryData.fromObject(queryRequest), requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * The Query operation enables users to select/project on blob data by providing simple query expressions.
     * 
     * @param queryRequest The query request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BinaryData> query(QueryRequest queryRequest) {
        // Generated convenience method for queryWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return queryWithResponse(BinaryData.fromObject(queryRequest), requestOptions).flatMap(FluxUtil::toMono);
    }
}
