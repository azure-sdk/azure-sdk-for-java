// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.storage.blob.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The query format settings.
 */
@Fluent
public final class QueryFormat implements JsonSerializable<QueryFormat> {
    /*
     * The query type.
     */
    @Generated
    private final QueryType type;

    /*
     * The delimited text configuration.
     */
    @Generated
    private DelimitedTextConfiguration delimitedTextConfiguration;

    /*
     * The JSON text configuration.
     */
    @Generated
    private JsonTextConfiguration jsonTextConfiguration;

    /*
     * The Apache Arrow configuration.
     */
    @Generated
    private ArrowConfiguration arrowConfiguration;

    /*
     * The Parquet configuration.
     */
    @Generated
    private ParquetConfiguration parquetTextConfiguration;

    /**
     * Creates an instance of QueryFormat class.
     * 
     * @param type the type value to set.
     */
    @Generated
    public QueryFormat(QueryType type) {
        this.type = type;
    }

    /**
     * Get the type property: The query type.
     * 
     * @return the type value.
     */
    @Generated
    public QueryType getType() {
        return this.type;
    }

    /**
     * Get the delimitedTextConfiguration property: The delimited text configuration.
     * 
     * @return the delimitedTextConfiguration value.
     */
    @Generated
    public DelimitedTextConfiguration getDelimitedTextConfiguration() {
        return this.delimitedTextConfiguration;
    }

    /**
     * Set the delimitedTextConfiguration property: The delimited text configuration.
     * 
     * @param delimitedTextConfiguration the delimitedTextConfiguration value to set.
     * @return the QueryFormat object itself.
     */
    @Generated
    public QueryFormat setDelimitedTextConfiguration(DelimitedTextConfiguration delimitedTextConfiguration) {
        this.delimitedTextConfiguration = delimitedTextConfiguration;
        return this;
    }

    /**
     * Get the jsonTextConfiguration property: The JSON text configuration.
     * 
     * @return the jsonTextConfiguration value.
     */
    @Generated
    public JsonTextConfiguration getJsonTextConfiguration() {
        return this.jsonTextConfiguration;
    }

    /**
     * Set the jsonTextConfiguration property: The JSON text configuration.
     * 
     * @param jsonTextConfiguration the jsonTextConfiguration value to set.
     * @return the QueryFormat object itself.
     */
    @Generated
    public QueryFormat setJsonTextConfiguration(JsonTextConfiguration jsonTextConfiguration) {
        this.jsonTextConfiguration = jsonTextConfiguration;
        return this;
    }

    /**
     * Get the arrowConfiguration property: The Apache Arrow configuration.
     * 
     * @return the arrowConfiguration value.
     */
    @Generated
    public ArrowConfiguration getArrowConfiguration() {
        return this.arrowConfiguration;
    }

    /**
     * Set the arrowConfiguration property: The Apache Arrow configuration.
     * 
     * @param arrowConfiguration the arrowConfiguration value to set.
     * @return the QueryFormat object itself.
     */
    @Generated
    public QueryFormat setArrowConfiguration(ArrowConfiguration arrowConfiguration) {
        this.arrowConfiguration = arrowConfiguration;
        return this;
    }

    /**
     * Get the parquetTextConfiguration property: The Parquet configuration.
     * 
     * @return the parquetTextConfiguration value.
     */
    @Generated
    public ParquetConfiguration getParquetTextConfiguration() {
        return this.parquetTextConfiguration;
    }

    /**
     * Set the parquetTextConfiguration property: The Parquet configuration.
     * 
     * @param parquetTextConfiguration the parquetTextConfiguration value to set.
     * @return the QueryFormat object itself.
     */
    @Generated
    public QueryFormat setParquetTextConfiguration(ParquetConfiguration parquetTextConfiguration) {
        this.parquetTextConfiguration = parquetTextConfiguration;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeJsonField("delimitedTextConfiguration", this.delimitedTextConfiguration);
        jsonWriter.writeJsonField("jsonTextConfiguration", this.jsonTextConfiguration);
        jsonWriter.writeJsonField("arrowConfiguration", this.arrowConfiguration);
        jsonWriter.writeJsonField("parquetTextConfiguration", this.parquetTextConfiguration);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of QueryFormat from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of QueryFormat if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the QueryFormat.
     */
    @Generated
    public static QueryFormat fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            QueryType type = null;
            DelimitedTextConfiguration delimitedTextConfiguration = null;
            JsonTextConfiguration jsonTextConfiguration = null;
            ArrowConfiguration arrowConfiguration = null;
            ParquetConfiguration parquetTextConfiguration = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    type = QueryType.fromString(reader.getString());
                } else if ("delimitedTextConfiguration".equals(fieldName)) {
                    delimitedTextConfiguration = DelimitedTextConfiguration.fromJson(reader);
                } else if ("jsonTextConfiguration".equals(fieldName)) {
                    jsonTextConfiguration = JsonTextConfiguration.fromJson(reader);
                } else if ("arrowConfiguration".equals(fieldName)) {
                    arrowConfiguration = ArrowConfiguration.fromJson(reader);
                } else if ("parquetTextConfiguration".equals(fieldName)) {
                    parquetTextConfiguration = ParquetConfiguration.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            QueryFormat deserializedQueryFormat = new QueryFormat(type);
            deserializedQueryFormat.delimitedTextConfiguration = delimitedTextConfiguration;
            deserializedQueryFormat.jsonTextConfiguration = jsonTextConfiguration;
            deserializedQueryFormat.arrowConfiguration = arrowConfiguration;
            deserializedQueryFormat.parquetTextConfiguration = parquetTextConfiguration;

            return deserializedQueryFormat;
        });
    }
}
