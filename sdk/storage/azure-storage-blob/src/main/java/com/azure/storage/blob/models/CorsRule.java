// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.storage.blob.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The CORS rule.
 */
@Immutable
public final class CorsRule implements JsonSerializable<CorsRule> {
    /*
     * The allowed origins.
     */
    @Generated
    private final String allowedOrigins;

    /*
     * The allowed methods.
     */
    @Generated
    private final String allowedMethods;

    /*
     * The allowed headers.
     */
    @Generated
    private final String allowedHeaders;

    /*
     * The exposed headers.
     */
    @Generated
    private final String exposedHeaders;

    /*
     * The maximum age in seconds.
     */
    @Generated
    private final int maxAgeInSeconds;

    /**
     * Creates an instance of CorsRule class.
     * 
     * @param allowedOrigins the allowedOrigins value to set.
     * @param allowedMethods the allowedMethods value to set.
     * @param allowedHeaders the allowedHeaders value to set.
     * @param exposedHeaders the exposedHeaders value to set.
     * @param maxAgeInSeconds the maxAgeInSeconds value to set.
     */
    @Generated
    public CorsRule(String allowedOrigins, String allowedMethods, String allowedHeaders, String exposedHeaders,
        int maxAgeInSeconds) {
        this.allowedOrigins = allowedOrigins;
        this.allowedMethods = allowedMethods;
        this.allowedHeaders = allowedHeaders;
        this.exposedHeaders = exposedHeaders;
        this.maxAgeInSeconds = maxAgeInSeconds;
    }

    /**
     * Get the allowedOrigins property: The allowed origins.
     * 
     * @return the allowedOrigins value.
     */
    @Generated
    public String getAllowedOrigins() {
        return this.allowedOrigins;
    }

    /**
     * Get the allowedMethods property: The allowed methods.
     * 
     * @return the allowedMethods value.
     */
    @Generated
    public String getAllowedMethods() {
        return this.allowedMethods;
    }

    /**
     * Get the allowedHeaders property: The allowed headers.
     * 
     * @return the allowedHeaders value.
     */
    @Generated
    public String getAllowedHeaders() {
        return this.allowedHeaders;
    }

    /**
     * Get the exposedHeaders property: The exposed headers.
     * 
     * @return the exposedHeaders value.
     */
    @Generated
    public String getExposedHeaders() {
        return this.exposedHeaders;
    }

    /**
     * Get the maxAgeInSeconds property: The maximum age in seconds.
     * 
     * @return the maxAgeInSeconds value.
     */
    @Generated
    public int getMaxAgeInSeconds() {
        return this.maxAgeInSeconds;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("allowedOrigins", this.allowedOrigins);
        jsonWriter.writeStringField("allowedMethods", this.allowedMethods);
        jsonWriter.writeStringField("allowedHeaders", this.allowedHeaders);
        jsonWriter.writeStringField("exposedHeaders", this.exposedHeaders);
        jsonWriter.writeIntField("maxAgeInSeconds", this.maxAgeInSeconds);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CorsRule from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CorsRule if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CorsRule.
     */
    @Generated
    public static CorsRule fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String allowedOrigins = null;
            String allowedMethods = null;
            String allowedHeaders = null;
            String exposedHeaders = null;
            int maxAgeInSeconds = 0;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("allowedOrigins".equals(fieldName)) {
                    allowedOrigins = reader.getString();
                } else if ("allowedMethods".equals(fieldName)) {
                    allowedMethods = reader.getString();
                } else if ("allowedHeaders".equals(fieldName)) {
                    allowedHeaders = reader.getString();
                } else if ("exposedHeaders".equals(fieldName)) {
                    exposedHeaders = reader.getString();
                } else if ("maxAgeInSeconds".equals(fieldName)) {
                    maxAgeInSeconds = reader.getInt();
                } else {
                    reader.skipChildren();
                }
            }
            return new CorsRule(allowedOrigins, allowedMethods, allowedHeaders, exposedHeaders, maxAgeInSeconds);
        });
    }
}
