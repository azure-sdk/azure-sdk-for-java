// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.storage.blob.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Contains the committed and uncommitted blocks in a block blob.
 */
@Immutable
public final class BlockList implements JsonSerializable<BlockList> {
    /*
     * The list of committed blocks.
     */
    @Generated
    private List<Block> committedBlocks;

    /*
     * The list of uncommitted blocks.
     */
    @Generated
    private List<Block> uncommittedBlocks;

    /**
     * Creates an instance of BlockList class.
     */
    @Generated
    private BlockList() {
    }

    /**
     * Get the committedBlocks property: The list of committed blocks.
     * 
     * @return the committedBlocks value.
     */
    @Generated
    public List<Block> getCommittedBlocks() {
        return this.committedBlocks;
    }

    /**
     * Get the uncommittedBlocks property: The list of uncommitted blocks.
     * 
     * @return the uncommittedBlocks value.
     */
    @Generated
    public List<Block> getUncommittedBlocks() {
        return this.uncommittedBlocks;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("committedBlocks", this.committedBlocks,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("uncommittedBlocks", this.uncommittedBlocks,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BlockList from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BlockList if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the BlockList.
     */
    @Generated
    public static BlockList fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BlockList deserializedBlockList = new BlockList();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("committedBlocks".equals(fieldName)) {
                    List<Block> committedBlocks = reader.readArray(reader1 -> Block.fromJson(reader1));
                    deserializedBlockList.committedBlocks = committedBlocks;
                } else if ("uncommittedBlocks".equals(fieldName)) {
                    List<Block> uncommittedBlocks = reader.readArray(reader1 -> Block.fromJson(reader1));
                    deserializedBlockList.uncommittedBlocks = uncommittedBlocks;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBlockList;
        });
    }
}
