// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.storage.blob.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Groups the set of query request settings.
 */
@Fluent
public final class QueryRequest implements JsonSerializable<QueryRequest> {
    /*
     * Required. The type of the provided query expression.
     */
    @Generated
    private final QueryRequestTypeSqlOnly queryType;

    /*
     * The query expression in SQL. The maximum size of the query expression is 256KiB.
     */
    @Generated
    private final String expression;

    /*
     * The input serialization settings.
     */
    @Generated
    private QuerySerialization inputSerialization;

    /*
     * The output serialization settings.
     */
    @Generated
    private QuerySerialization outputSerialization;

    /**
     * Creates an instance of QueryRequest class.
     * 
     * @param queryType the queryType value to set.
     * @param expression the expression value to set.
     */
    @Generated
    public QueryRequest(QueryRequestTypeSqlOnly queryType, String expression) {
        this.queryType = queryType;
        this.expression = expression;
    }

    /**
     * Get the queryType property: Required. The type of the provided query expression.
     * 
     * @return the queryType value.
     */
    @Generated
    public QueryRequestTypeSqlOnly getQueryType() {
        return this.queryType;
    }

    /**
     * Get the expression property: The query expression in SQL. The maximum size of the query expression is 256KiB.
     * 
     * @return the expression value.
     */
    @Generated
    public String getExpression() {
        return this.expression;
    }

    /**
     * Get the inputSerialization property: The input serialization settings.
     * 
     * @return the inputSerialization value.
     */
    @Generated
    public QuerySerialization getInputSerialization() {
        return this.inputSerialization;
    }

    /**
     * Set the inputSerialization property: The input serialization settings.
     * 
     * @param inputSerialization the inputSerialization value to set.
     * @return the QueryRequest object itself.
     */
    @Generated
    public QueryRequest setInputSerialization(QuerySerialization inputSerialization) {
        this.inputSerialization = inputSerialization;
        return this;
    }

    /**
     * Get the outputSerialization property: The output serialization settings.
     * 
     * @return the outputSerialization value.
     */
    @Generated
    public QuerySerialization getOutputSerialization() {
        return this.outputSerialization;
    }

    /**
     * Set the outputSerialization property: The output serialization settings.
     * 
     * @param outputSerialization the outputSerialization value to set.
     * @return the QueryRequest object itself.
     */
    @Generated
    public QueryRequest setOutputSerialization(QuerySerialization outputSerialization) {
        this.outputSerialization = outputSerialization;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("queryType", this.queryType == null ? null : this.queryType.toString());
        jsonWriter.writeStringField("expression", this.expression);
        jsonWriter.writeJsonField("inputSerialization", this.inputSerialization);
        jsonWriter.writeJsonField("outputSerialization", this.outputSerialization);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of QueryRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of QueryRequest if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the QueryRequest.
     */
    @Generated
    public static QueryRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            QueryRequestTypeSqlOnly queryType = null;
            String expression = null;
            QuerySerialization inputSerialization = null;
            QuerySerialization outputSerialization = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("queryType".equals(fieldName)) {
                    queryType = QueryRequestTypeSqlOnly.fromString(reader.getString());
                } else if ("expression".equals(fieldName)) {
                    expression = reader.getString();
                } else if ("inputSerialization".equals(fieldName)) {
                    inputSerialization = QuerySerialization.fromJson(reader);
                } else if ("outputSerialization".equals(fieldName)) {
                    outputSerialization = QuerySerialization.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            QueryRequest deserializedQueryRequest = new QueryRequest(queryType, expression);
            deserializedQueryRequest.inputSerialization = inputSerialization;
            deserializedQueryRequest.outputSerialization = outputSerialization;

            return deserializedQueryRequest;
        });
    }
}
