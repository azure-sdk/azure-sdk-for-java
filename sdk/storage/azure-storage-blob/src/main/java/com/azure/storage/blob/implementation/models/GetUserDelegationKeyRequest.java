// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.storage.blob.implementation.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The GetUserDelegationKeyRequest model.
 */
@Immutable
public final class GetUserDelegationKeyRequest implements JsonSerializable<GetUserDelegationKeyRequest> {
    /*
     * The date-time the key is active.
     */
    @Generated
    private final String start;

    /*
     * The date-time the key expires.
     */
    @Generated
    private final String expiry;

    /**
     * Creates an instance of GetUserDelegationKeyRequest class.
     * 
     * @param start the start value to set.
     * @param expiry the expiry value to set.
     */
    @Generated
    public GetUserDelegationKeyRequest(String start, String expiry) {
        this.start = start;
        this.expiry = expiry;
    }

    /**
     * Get the start property: The date-time the key is active.
     * 
     * @return the start value.
     */
    @Generated
    public String getStart() {
        return this.start;
    }

    /**
     * Get the expiry property: The date-time the key expires.
     * 
     * @return the expiry value.
     */
    @Generated
    public String getExpiry() {
        return this.expiry;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("start", this.start);
        jsonWriter.writeStringField("expiry", this.expiry);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GetUserDelegationKeyRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GetUserDelegationKeyRequest if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the GetUserDelegationKeyRequest.
     */
    @Generated
    public static GetUserDelegationKeyRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String start = null;
            String expiry = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("start".equals(fieldName)) {
                    start = reader.getString();
                } else if ("expiry".equals(fieldName)) {
                    expiry = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return new GetUserDelegationKeyRequest(start, expiry);
        });
    }
}
