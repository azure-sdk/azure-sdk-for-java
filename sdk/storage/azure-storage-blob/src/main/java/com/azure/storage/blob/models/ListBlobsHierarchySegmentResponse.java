// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.storage.blob.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * An enumeration of blobs.
 */
@Immutable
public final class ListBlobsHierarchySegmentResponse implements JsonSerializable<ListBlobsHierarchySegmentResponse> {
    /*
     * The service endpoint.
     */
    @Generated
    private final String serviceEndpoint;

    /*
     * The container name.
     */
    @Generated
    private final String containerName;

    /*
     * The delimiter of the blobs.
     */
    @Generated
    private String delimiter;

    /*
     * The prefix of the blobs.
     */
    @Generated
    private String prefix;

    /*
     * The marker of the blobs.
     */
    @Generated
    private String marker;

    /*
     * The max results of the blobs.
     */
    @Generated
    private Integer maxResults;

    /*
     * The blob segment.
     */
    @Generated
    private final BlobHierarchyListSegment segment;

    /*
     * The next marker of the blobs.
     */
    @Generated
    private String nextMarker;

    /**
     * Creates an instance of ListBlobsHierarchySegmentResponse class.
     * 
     * @param serviceEndpoint the serviceEndpoint value to set.
     * @param containerName the containerName value to set.
     * @param segment the segment value to set.
     */
    @Generated
    private ListBlobsHierarchySegmentResponse(String serviceEndpoint, String containerName,
        BlobHierarchyListSegment segment) {
        this.serviceEndpoint = serviceEndpoint;
        this.containerName = containerName;
        this.segment = segment;
    }

    /**
     * Get the serviceEndpoint property: The service endpoint.
     * 
     * @return the serviceEndpoint value.
     */
    @Generated
    public String getServiceEndpoint() {
        return this.serviceEndpoint;
    }

    /**
     * Get the containerName property: The container name.
     * 
     * @return the containerName value.
     */
    @Generated
    public String getContainerName() {
        return this.containerName;
    }

    /**
     * Get the delimiter property: The delimiter of the blobs.
     * 
     * @return the delimiter value.
     */
    @Generated
    public String getDelimiter() {
        return this.delimiter;
    }

    /**
     * Get the prefix property: The prefix of the blobs.
     * 
     * @return the prefix value.
     */
    @Generated
    public String getPrefix() {
        return this.prefix;
    }

    /**
     * Get the marker property: The marker of the blobs.
     * 
     * @return the marker value.
     */
    @Generated
    public String getMarker() {
        return this.marker;
    }

    /**
     * Get the maxResults property: The max results of the blobs.
     * 
     * @return the maxResults value.
     */
    @Generated
    public Integer getMaxResults() {
        return this.maxResults;
    }

    /**
     * Get the segment property: The blob segment.
     * 
     * @return the segment value.
     */
    @Generated
    public BlobHierarchyListSegment getSegment() {
        return this.segment;
    }

    /**
     * Get the nextMarker property: The next marker of the blobs.
     * 
     * @return the nextMarker value.
     */
    @Generated
    public String getNextMarker() {
        return this.nextMarker;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("serviceEndpoint", this.serviceEndpoint);
        jsonWriter.writeStringField("containerName", this.containerName);
        jsonWriter.writeJsonField("segment", this.segment);
        jsonWriter.writeStringField("delimiter", this.delimiter);
        jsonWriter.writeStringField("prefix", this.prefix);
        jsonWriter.writeStringField("marker", this.marker);
        jsonWriter.writeNumberField("maxResults", this.maxResults);
        jsonWriter.writeStringField("nextMarker", this.nextMarker);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ListBlobsHierarchySegmentResponse from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ListBlobsHierarchySegmentResponse if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ListBlobsHierarchySegmentResponse.
     */
    @Generated
    public static ListBlobsHierarchySegmentResponse fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String serviceEndpoint = null;
            String containerName = null;
            BlobHierarchyListSegment segment = null;
            String delimiter = null;
            String prefix = null;
            String marker = null;
            Integer maxResults = null;
            String nextMarker = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("serviceEndpoint".equals(fieldName)) {
                    serviceEndpoint = reader.getString();
                } else if ("containerName".equals(fieldName)) {
                    containerName = reader.getString();
                } else if ("segment".equals(fieldName)) {
                    segment = BlobHierarchyListSegment.fromJson(reader);
                } else if ("delimiter".equals(fieldName)) {
                    delimiter = reader.getString();
                } else if ("prefix".equals(fieldName)) {
                    prefix = reader.getString();
                } else if ("marker".equals(fieldName)) {
                    marker = reader.getString();
                } else if ("maxResults".equals(fieldName)) {
                    maxResults = reader.getNullable(JsonReader::getInt);
                } else if ("nextMarker".equals(fieldName)) {
                    nextMarker = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            ListBlobsHierarchySegmentResponse deserializedListBlobsHierarchySegmentResponse
                = new ListBlobsHierarchySegmentResponse(serviceEndpoint, containerName, segment);
            deserializedListBlobsHierarchySegmentResponse.delimiter = delimiter;
            deserializedListBlobsHierarchySegmentResponse.prefix = prefix;
            deserializedListBlobsHierarchySegmentResponse.marker = marker;
            deserializedListBlobsHierarchySegmentResponse.maxResults = maxResults;
            deserializedListBlobsHierarchySegmentResponse.nextMarker = nextMarker;

            return deserializedListBlobsHierarchySegmentResponse;
        });
    }
}
