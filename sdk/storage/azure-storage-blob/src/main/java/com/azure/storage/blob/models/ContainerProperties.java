// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.storage.blob.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * The properties of a container.
 */
@Immutable
public final class ContainerProperties implements JsonSerializable<ContainerProperties> {
    /*
     * The date-time the container was created in RFC1123 format.
     */
    @Generated
    private OffsetDateTime creationTime;

    /*
     * The date-time the container was last modified in RFC1123 format.
     */
    @Generated
    private final OffsetDateTime lastModified;

    /*
     * The ETag of the container.
     */
    @Generated
    private final String eTag;

    /*
     * The lease status of the container.
     */
    @Generated
    private LeaseStatus leaseStatus;

    /*
     * The lease state of the container.
     */
    @Generated
    private LeaseState leaseState;

    /*
     * The lease duration of the container.
     */
    @Generated
    private LeaseDuration leaseDuration;

    /*
     * The public access type of the container.
     */
    @Generated
    private PublicAccessType publicAccess;

    /*
     * Whether it has an immutability policy.
     */
    @Generated
    private Boolean hasImmutabilityPolicy;

    /*
     * The default encryption scope of the container.
     */
    @Generated
    private String defaultEncryptionScope;

    /*
     * Whether to prevent encryption scope override.
     */
    @Generated
    private Boolean preventEncryptionScopeOverride;

    /*
     * The has legal hold status of the container.
     */
    @Generated
    private Boolean hasLegalHold;

    /*
     * The deleted time of the container.
     */
    @Generated
    private OffsetDateTime deletedTime;

    /*
     * The remaining retention days of the container.
     */
    @Generated
    private Integer remainingRetentionDays;

    /*
     * Whether immutable storage with versioning is enabled.
     */
    @Generated
    private Boolean isImmutableStorageWithVersioningEnabled;

    /**
     * Creates an instance of ContainerProperties class.
     * 
     * @param lastModified the lastModified value to set.
     * @param eTag the eTag value to set.
     */
    @Generated
    private ContainerProperties(OffsetDateTime lastModified, String eTag) {
        this.lastModified = lastModified;
        this.eTag = eTag;
    }

    /**
     * Get the creationTime property: The date-time the container was created in RFC1123 format.
     * 
     * @return the creationTime value.
     */
    @Generated
    public OffsetDateTime getCreationTime() {
        return this.creationTime;
    }

    /**
     * Get the lastModified property: The date-time the container was last modified in RFC1123 format.
     * 
     * @return the lastModified value.
     */
    @Generated
    public OffsetDateTime getLastModified() {
        return this.lastModified;
    }

    /**
     * Get the eTag property: The ETag of the container.
     * 
     * @return the eTag value.
     */
    @Generated
    public String getETag() {
        return this.eTag;
    }

    /**
     * Get the leaseStatus property: The lease status of the container.
     * 
     * @return the leaseStatus value.
     */
    @Generated
    public LeaseStatus getLeaseStatus() {
        return this.leaseStatus;
    }

    /**
     * Get the leaseState property: The lease state of the container.
     * 
     * @return the leaseState value.
     */
    @Generated
    public LeaseState getLeaseState() {
        return this.leaseState;
    }

    /**
     * Get the leaseDuration property: The lease duration of the container.
     * 
     * @return the leaseDuration value.
     */
    @Generated
    public LeaseDuration getLeaseDuration() {
        return this.leaseDuration;
    }

    /**
     * Get the publicAccess property: The public access type of the container.
     * 
     * @return the publicAccess value.
     */
    @Generated
    public PublicAccessType getPublicAccess() {
        return this.publicAccess;
    }

    /**
     * Get the hasImmutabilityPolicy property: Whether it has an immutability policy.
     * 
     * @return the hasImmutabilityPolicy value.
     */
    @Generated
    public Boolean isHasImmutabilityPolicy() {
        return this.hasImmutabilityPolicy;
    }

    /**
     * Get the defaultEncryptionScope property: The default encryption scope of the container.
     * 
     * @return the defaultEncryptionScope value.
     */
    @Generated
    public String getDefaultEncryptionScope() {
        return this.defaultEncryptionScope;
    }

    /**
     * Get the preventEncryptionScopeOverride property: Whether to prevent encryption scope override.
     * 
     * @return the preventEncryptionScopeOverride value.
     */
    @Generated
    public Boolean isPreventEncryptionScopeOverride() {
        return this.preventEncryptionScopeOverride;
    }

    /**
     * Get the hasLegalHold property: The has legal hold status of the container.
     * 
     * @return the hasLegalHold value.
     */
    @Generated
    public Boolean isHasLegalHold() {
        return this.hasLegalHold;
    }

    /**
     * Get the deletedTime property: The deleted time of the container.
     * 
     * @return the deletedTime value.
     */
    @Generated
    public OffsetDateTime getDeletedTime() {
        return this.deletedTime;
    }

    /**
     * Get the remainingRetentionDays property: The remaining retention days of the container.
     * 
     * @return the remainingRetentionDays value.
     */
    @Generated
    public Integer getRemainingRetentionDays() {
        return this.remainingRetentionDays;
    }

    /**
     * Get the isImmutableStorageWithVersioningEnabled property: Whether immutable storage with versioning is enabled.
     * 
     * @return the isImmutableStorageWithVersioningEnabled value.
     */
    @Generated
    public Boolean isImmutableStorageWithVersioningEnabled() {
        return this.isImmutableStorageWithVersioningEnabled;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("lastModified",
            this.lastModified == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.lastModified));
        jsonWriter.writeStringField("eTag", this.eTag);
        jsonWriter.writeStringField("creationTime",
            this.creationTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.creationTime));
        jsonWriter.writeStringField("leaseStatus", this.leaseStatus == null ? null : this.leaseStatus.toString());
        jsonWriter.writeStringField("leaseState", this.leaseState == null ? null : this.leaseState.toString());
        jsonWriter.writeStringField("leaseDuration", this.leaseDuration == null ? null : this.leaseDuration.toString());
        jsonWriter.writeStringField("publicAccess", this.publicAccess == null ? null : this.publicAccess.toString());
        jsonWriter.writeBooleanField("hasImmutabilityPolicy", this.hasImmutabilityPolicy);
        jsonWriter.writeStringField("defaultEncryptionScope", this.defaultEncryptionScope);
        jsonWriter.writeBooleanField("denyEncryptionScopeOverride", this.preventEncryptionScopeOverride);
        jsonWriter.writeBooleanField("hasLegalHold", this.hasLegalHold);
        jsonWriter.writeStringField("deletedTime",
            this.deletedTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.deletedTime));
        jsonWriter.writeNumberField("remainingRetentionDays", this.remainingRetentionDays);
        jsonWriter.writeBooleanField("immutableStorageWithVersioningEnabled",
            this.isImmutableStorageWithVersioningEnabled);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ContainerProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ContainerProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ContainerProperties.
     */
    @Generated
    public static ContainerProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OffsetDateTime lastModified = null;
            String eTag = null;
            OffsetDateTime creationTime = null;
            LeaseStatus leaseStatus = null;
            LeaseState leaseState = null;
            LeaseDuration leaseDuration = null;
            PublicAccessType publicAccess = null;
            Boolean hasImmutabilityPolicy = null;
            String defaultEncryptionScope = null;
            Boolean preventEncryptionScopeOverride = null;
            Boolean hasLegalHold = null;
            OffsetDateTime deletedTime = null;
            Integer remainingRetentionDays = null;
            Boolean isImmutableStorageWithVersioningEnabled = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("lastModified".equals(fieldName)) {
                    lastModified = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("eTag".equals(fieldName)) {
                    eTag = reader.getString();
                } else if ("creationTime".equals(fieldName)) {
                    creationTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("leaseStatus".equals(fieldName)) {
                    leaseStatus = LeaseStatus.fromString(reader.getString());
                } else if ("leaseState".equals(fieldName)) {
                    leaseState = LeaseState.fromString(reader.getString());
                } else if ("leaseDuration".equals(fieldName)) {
                    leaseDuration = LeaseDuration.fromString(reader.getString());
                } else if ("publicAccess".equals(fieldName)) {
                    publicAccess = PublicAccessType.fromString(reader.getString());
                } else if ("hasImmutabilityPolicy".equals(fieldName)) {
                    hasImmutabilityPolicy = reader.getNullable(JsonReader::getBoolean);
                } else if ("defaultEncryptionScope".equals(fieldName)) {
                    defaultEncryptionScope = reader.getString();
                } else if ("denyEncryptionScopeOverride".equals(fieldName)) {
                    preventEncryptionScopeOverride = reader.getNullable(JsonReader::getBoolean);
                } else if ("hasLegalHold".equals(fieldName)) {
                    hasLegalHold = reader.getNullable(JsonReader::getBoolean);
                } else if ("deletedTime".equals(fieldName)) {
                    deletedTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("remainingRetentionDays".equals(fieldName)) {
                    remainingRetentionDays = reader.getNullable(JsonReader::getInt);
                } else if ("immutableStorageWithVersioningEnabled".equals(fieldName)) {
                    isImmutableStorageWithVersioningEnabled = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }
            ContainerProperties deserializedContainerProperties = new ContainerProperties(lastModified, eTag);
            deserializedContainerProperties.creationTime = creationTime;
            deserializedContainerProperties.leaseStatus = leaseStatus;
            deserializedContainerProperties.leaseState = leaseState;
            deserializedContainerProperties.leaseDuration = leaseDuration;
            deserializedContainerProperties.publicAccess = publicAccess;
            deserializedContainerProperties.hasImmutabilityPolicy = hasImmutabilityPolicy;
            deserializedContainerProperties.defaultEncryptionScope = defaultEncryptionScope;
            deserializedContainerProperties.preventEncryptionScopeOverride = preventEncryptionScopeOverride;
            deserializedContainerProperties.hasLegalHold = hasLegalHold;
            deserializedContainerProperties.deletedTime = deletedTime;
            deserializedContainerProperties.remainingRetentionDays = remainingRetentionDays;
            deserializedContainerProperties.isImmutableStorageWithVersioningEnabled
                = isImmutableStorageWithVersioningEnabled;

            return deserializedContainerProperties;
        });
    }
}
