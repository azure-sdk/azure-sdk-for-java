// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.storage.blob.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The Block lookup list.
 */
@Fluent
public final class BlockLookupList implements JsonSerializable<BlockLookupList> {
    /*
     * The committed blocks
     */
    @Generated
    private List<byte[]> committed;

    /*
     * The uncommitted blocks
     */
    @Generated
    private List<byte[]> uncommitted;

    /*
     * The latest blocks
     */
    @Generated
    private List<byte[]> latest;

    /**
     * Creates an instance of BlockLookupList class.
     */
    @Generated
    public BlockLookupList() {
    }

    /**
     * Get the committed property: The committed blocks.
     * 
     * @return the committed value.
     */
    @Generated
    public List<byte[]> getCommitted() {
        return this.committed;
    }

    /**
     * Set the committed property: The committed blocks.
     * 
     * @param committed the committed value to set.
     * @return the BlockLookupList object itself.
     */
    @Generated
    public BlockLookupList setCommitted(List<byte[]> committed) {
        this.committed = committed;
        return this;
    }

    /**
     * Get the uncommitted property: The uncommitted blocks.
     * 
     * @return the uncommitted value.
     */
    @Generated
    public List<byte[]> getUncommitted() {
        return this.uncommitted;
    }

    /**
     * Set the uncommitted property: The uncommitted blocks.
     * 
     * @param uncommitted the uncommitted value to set.
     * @return the BlockLookupList object itself.
     */
    @Generated
    public BlockLookupList setUncommitted(List<byte[]> uncommitted) {
        this.uncommitted = uncommitted;
        return this;
    }

    /**
     * Get the latest property: The latest blocks.
     * 
     * @return the latest value.
     */
    @Generated
    public List<byte[]> getLatest() {
        return this.latest;
    }

    /**
     * Set the latest property: The latest blocks.
     * 
     * @param latest the latest value to set.
     * @return the BlockLookupList object itself.
     */
    @Generated
    public BlockLookupList setLatest(List<byte[]> latest) {
        this.latest = latest;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("committed", this.committed, (writer, element) -> writer.writeBinary(element));
        jsonWriter.writeArrayField("uncommitted", this.uncommitted, (writer, element) -> writer.writeBinary(element));
        jsonWriter.writeArrayField("latest", this.latest, (writer, element) -> writer.writeBinary(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BlockLookupList from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BlockLookupList if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the BlockLookupList.
     */
    @Generated
    public static BlockLookupList fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BlockLookupList deserializedBlockLookupList = new BlockLookupList();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("committed".equals(fieldName)) {
                    List<byte[]> committed = reader.readArray(reader1 -> reader1.getBinary());
                    deserializedBlockLookupList.committed = committed;
                } else if ("uncommitted".equals(fieldName)) {
                    List<byte[]> uncommitted = reader.readArray(reader1 -> reader1.getBinary());
                    deserializedBlockLookupList.uncommitted = uncommitted;
                } else if ("latest".equals(fieldName)) {
                    List<byte[]> latest = reader.readArray(reader1 -> reader1.getBinary());
                    deserializedBlockLookupList.latest = latest;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBlockLookupList;
        });
    }
}
