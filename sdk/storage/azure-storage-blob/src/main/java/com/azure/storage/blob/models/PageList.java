// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.storage.blob.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Represents a page list.
 */
@Immutable
public final class PageList implements JsonSerializable<PageList> {
    /*
     * The page ranges.
     */
    @Generated
    private final List<PageRange> pageRange;

    /*
     * The clear ranges.
     */
    @Generated
    private final List<ClearRange> clearRange;

    /*
     * The next marker.
     */
    @Generated
    private String nextMarker;

    /**
     * Creates an instance of PageList class.
     * 
     * @param pageRange the pageRange value to set.
     * @param clearRange the clearRange value to set.
     */
    @Generated
    private PageList(List<PageRange> pageRange, List<ClearRange> clearRange) {
        this.pageRange = pageRange;
        this.clearRange = clearRange;
    }

    /**
     * Get the pageRange property: The page ranges.
     * 
     * @return the pageRange value.
     */
    @Generated
    public List<PageRange> getPageRange() {
        return this.pageRange;
    }

    /**
     * Get the clearRange property: The clear ranges.
     * 
     * @return the clearRange value.
     */
    @Generated
    public List<ClearRange> getClearRange() {
        return this.clearRange;
    }

    /**
     * Get the nextMarker property: The next marker.
     * 
     * @return the nextMarker value.
     */
    @Generated
    public String getNextMarker() {
        return this.nextMarker;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("pageRange", this.pageRange, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("clearRange", this.clearRange, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("nextMarker", this.nextMarker);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PageList from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PageList if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the PageList.
     */
    @Generated
    public static PageList fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            List<PageRange> pageRange = null;
            List<ClearRange> clearRange = null;
            String nextMarker = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("pageRange".equals(fieldName)) {
                    pageRange = reader.readArray(reader1 -> PageRange.fromJson(reader1));
                } else if ("clearRange".equals(fieldName)) {
                    clearRange = reader.readArray(reader1 -> ClearRange.fromJson(reader1));
                } else if ("nextMarker".equals(fieldName)) {
                    nextMarker = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            PageList deserializedPageList = new PageList(pageRange, clearRange);
            deserializedPageList.nextMarker = nextMarker;

            return deserializedPageList;
        });
    }
}
