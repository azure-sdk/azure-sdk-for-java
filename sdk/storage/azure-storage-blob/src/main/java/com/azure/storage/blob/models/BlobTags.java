// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.storage.blob.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Represents blob tags.
 */
@Immutable
public final class BlobTags implements JsonSerializable<BlobTags> {
    /*
     * Represents the blob tags.
     */
    @Generated
    private final List<BlobTag> blobTagSet;

    /**
     * Creates an instance of BlobTags class.
     * 
     * @param blobTagSet the blobTagSet value to set.
     */
    @Generated
    public BlobTags(List<BlobTag> blobTagSet) {
        this.blobTagSet = blobTagSet;
    }

    /**
     * Get the blobTagSet property: Represents the blob tags.
     * 
     * @return the blobTagSet value.
     */
    @Generated
    public List<BlobTag> getBlobTagSet() {
        return this.blobTagSet;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("blobTagSet", this.blobTagSet, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BlobTags from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BlobTags if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the BlobTags.
     */
    @Generated
    public static BlobTags fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            List<BlobTag> blobTagSet = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("blobTagSet".equals(fieldName)) {
                    blobTagSet = reader.readArray(reader1 -> BlobTag.fromJson(reader1));
                } else {
                    reader.skipChildren();
                }
            }
            return new BlobTags(blobTagSet);
        });
    }
}
