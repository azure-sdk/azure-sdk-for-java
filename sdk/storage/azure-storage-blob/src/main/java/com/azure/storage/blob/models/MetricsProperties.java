// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.storage.blob.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The metrics properties.
 */
@Immutable
public final class MetricsProperties implements JsonSerializable<MetricsProperties> {
    /*
     * Whether to include API in the metrics.
     */
    @Generated
    private final boolean enabled;

    /*
     * The version of the metrics properties.
     */
    @Generated
    private final String version;

    /*
     * The retention policy of the metrics.
     */
    @Generated
    private final RetentionPolicy retentionPolicy;

    /**
     * Creates an instance of MetricsProperties class.
     * 
     * @param enabled the enabled value to set.
     * @param version the version value to set.
     * @param retentionPolicy the retentionPolicy value to set.
     */
    @Generated
    public MetricsProperties(boolean enabled, String version, RetentionPolicy retentionPolicy) {
        this.enabled = enabled;
        this.version = version;
        this.retentionPolicy = retentionPolicy;
    }

    /**
     * Get the enabled property: Whether to include API in the metrics.
     * 
     * @return the enabled value.
     */
    @Generated
    public boolean isEnabled() {
        return this.enabled;
    }

    /**
     * Get the version property: The version of the metrics properties.
     * 
     * @return the version value.
     */
    @Generated
    public String getVersion() {
        return this.version;
    }

    /**
     * Get the retentionPolicy property: The retention policy of the metrics.
     * 
     * @return the retentionPolicy value.
     */
    @Generated
    public RetentionPolicy getRetentionPolicy() {
        return this.retentionPolicy;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("enabled", this.enabled);
        jsonWriter.writeStringField("version", this.version);
        jsonWriter.writeJsonField("retentionPolicy", this.retentionPolicy);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MetricsProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MetricsProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MetricsProperties.
     */
    @Generated
    public static MetricsProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            boolean enabled = false;
            String version = null;
            RetentionPolicy retentionPolicy = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("enabled".equals(fieldName)) {
                    enabled = reader.getBoolean();
                } else if ("version".equals(fieldName)) {
                    version = reader.getString();
                } else if ("retentionPolicy".equals(fieldName)) {
                    retentionPolicy = RetentionPolicy.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            return new MetricsProperties(enabled, version, retentionPolicy);
        });
    }
}
