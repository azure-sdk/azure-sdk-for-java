// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.storage.blob.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Represents the delimited text configuration.
 */
@Fluent
public final class DelimitedTextConfiguration implements JsonSerializable<DelimitedTextConfiguration> {
    /*
     * The string used to separate columns.
     */
    @Generated
    private String columnSeparator;

    /*
     * The string used to quote a specific field.
     */
    @Generated
    private String fieldQuote;

    /*
     * The string used to separate records.
     */
    @Generated
    private String recordSeparator;

    /*
     * The string used to escape a quote character in a field.
     */
    @Generated
    private String escapeChar;

    /*
     * Represents whether the data has headers.
     */
    @Generated
    private Boolean headersPresent;

    /**
     * Creates an instance of DelimitedTextConfiguration class.
     */
    @Generated
    public DelimitedTextConfiguration() {
    }

    /**
     * Get the columnSeparator property: The string used to separate columns.
     * 
     * @return the columnSeparator value.
     */
    @Generated
    public String getColumnSeparator() {
        return this.columnSeparator;
    }

    /**
     * Set the columnSeparator property: The string used to separate columns.
     * 
     * @param columnSeparator the columnSeparator value to set.
     * @return the DelimitedTextConfiguration object itself.
     */
    @Generated
    public DelimitedTextConfiguration setColumnSeparator(String columnSeparator) {
        this.columnSeparator = columnSeparator;
        return this;
    }

    /**
     * Get the fieldQuote property: The string used to quote a specific field.
     * 
     * @return the fieldQuote value.
     */
    @Generated
    public String getFieldQuote() {
        return this.fieldQuote;
    }

    /**
     * Set the fieldQuote property: The string used to quote a specific field.
     * 
     * @param fieldQuote the fieldQuote value to set.
     * @return the DelimitedTextConfiguration object itself.
     */
    @Generated
    public DelimitedTextConfiguration setFieldQuote(String fieldQuote) {
        this.fieldQuote = fieldQuote;
        return this;
    }

    /**
     * Get the recordSeparator property: The string used to separate records.
     * 
     * @return the recordSeparator value.
     */
    @Generated
    public String getRecordSeparator() {
        return this.recordSeparator;
    }

    /**
     * Set the recordSeparator property: The string used to separate records.
     * 
     * @param recordSeparator the recordSeparator value to set.
     * @return the DelimitedTextConfiguration object itself.
     */
    @Generated
    public DelimitedTextConfiguration setRecordSeparator(String recordSeparator) {
        this.recordSeparator = recordSeparator;
        return this;
    }

    /**
     * Get the escapeChar property: The string used to escape a quote character in a field.
     * 
     * @return the escapeChar value.
     */
    @Generated
    public String getEscapeChar() {
        return this.escapeChar;
    }

    /**
     * Set the escapeChar property: The string used to escape a quote character in a field.
     * 
     * @param escapeChar the escapeChar value to set.
     * @return the DelimitedTextConfiguration object itself.
     */
    @Generated
    public DelimitedTextConfiguration setEscapeChar(String escapeChar) {
        this.escapeChar = escapeChar;
        return this;
    }

    /**
     * Get the headersPresent property: Represents whether the data has headers.
     * 
     * @return the headersPresent value.
     */
    @Generated
    public Boolean isHeadersPresent() {
        return this.headersPresent;
    }

    /**
     * Set the headersPresent property: Represents whether the data has headers.
     * 
     * @param headersPresent the headersPresent value to set.
     * @return the DelimitedTextConfiguration object itself.
     */
    @Generated
    public DelimitedTextConfiguration setHeadersPresent(Boolean headersPresent) {
        this.headersPresent = headersPresent;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("columnSeparator", this.columnSeparator);
        jsonWriter.writeStringField("fieldQuote", this.fieldQuote);
        jsonWriter.writeStringField("recordSeparator", this.recordSeparator);
        jsonWriter.writeStringField("escapeChar", this.escapeChar);
        jsonWriter.writeBooleanField("headersPresent", this.headersPresent);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DelimitedTextConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DelimitedTextConfiguration if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DelimitedTextConfiguration.
     */
    @Generated
    public static DelimitedTextConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DelimitedTextConfiguration deserializedDelimitedTextConfiguration = new DelimitedTextConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("columnSeparator".equals(fieldName)) {
                    deserializedDelimitedTextConfiguration.columnSeparator = reader.getString();
                } else if ("fieldQuote".equals(fieldName)) {
                    deserializedDelimitedTextConfiguration.fieldQuote = reader.getString();
                } else if ("recordSeparator".equals(fieldName)) {
                    deserializedDelimitedTextConfiguration.recordSeparator = reader.getString();
                } else if ("escapeChar".equals(fieldName)) {
                    deserializedDelimitedTextConfiguration.escapeChar = reader.getString();
                } else if ("headersPresent".equals(fieldName)) {
                    deserializedDelimitedTextConfiguration.headersPresent = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDelimitedTextConfiguration;
        });
    }
}
