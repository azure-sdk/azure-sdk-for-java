// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.storage.blob.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Azure Analytics Logging settings.
 */
@Immutable
public final class Logging implements JsonSerializable<Logging> {
    /*
     * The version of the logging properties.
     */
    @Generated
    private final String version;

    /*
     * Whether delete operation is logged.
     */
    @Generated
    private final boolean delete;

    /*
     * Whether read operation is logged.
     */
    @Generated
    private final boolean read;

    /*
     * Whether write operation is logged.
     */
    @Generated
    private final boolean write;

    /*
     * The retention policy of the logs.
     */
    @Generated
    private final RetentionPolicy retentionPolicy;

    /**
     * Creates an instance of Logging class.
     * 
     * @param version the version value to set.
     * @param delete the delete value to set.
     * @param read the read value to set.
     * @param write the write value to set.
     * @param retentionPolicy the retentionPolicy value to set.
     */
    @Generated
    public Logging(String version, boolean delete, boolean read, boolean write, RetentionPolicy retentionPolicy) {
        this.version = version;
        this.delete = delete;
        this.read = read;
        this.write = write;
        this.retentionPolicy = retentionPolicy;
    }

    /**
     * Get the version property: The version of the logging properties.
     * 
     * @return the version value.
     */
    @Generated
    public String getVersion() {
        return this.version;
    }

    /**
     * Get the delete property: Whether delete operation is logged.
     * 
     * @return the delete value.
     */
    @Generated
    public boolean isDelete() {
        return this.delete;
    }

    /**
     * Get the read property: Whether read operation is logged.
     * 
     * @return the read value.
     */
    @Generated
    public boolean isRead() {
        return this.read;
    }

    /**
     * Get the write property: Whether write operation is logged.
     * 
     * @return the write value.
     */
    @Generated
    public boolean isWrite() {
        return this.write;
    }

    /**
     * Get the retentionPolicy property: The retention policy of the logs.
     * 
     * @return the retentionPolicy value.
     */
    @Generated
    public RetentionPolicy getRetentionPolicy() {
        return this.retentionPolicy;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("version", this.version);
        jsonWriter.writeBooleanField("delete", this.delete);
        jsonWriter.writeBooleanField("read", this.read);
        jsonWriter.writeBooleanField("write", this.write);
        jsonWriter.writeJsonField("retentionPolicy", this.retentionPolicy);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Logging from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Logging if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Logging.
     */
    @Generated
    public static Logging fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String version = null;
            boolean delete = false;
            boolean read = false;
            boolean write = false;
            RetentionPolicy retentionPolicy = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("version".equals(fieldName)) {
                    version = reader.getString();
                } else if ("delete".equals(fieldName)) {
                    delete = reader.getBoolean();
                } else if ("read".equals(fieldName)) {
                    read = reader.getBoolean();
                } else if ("write".equals(fieldName)) {
                    write = reader.getBoolean();
                } else if ("retentionPolicy".equals(fieldName)) {
                    retentionPolicy = RetentionPolicy.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            return new Logging(version, delete, read, write, retentionPolicy);
        });
    }
}
