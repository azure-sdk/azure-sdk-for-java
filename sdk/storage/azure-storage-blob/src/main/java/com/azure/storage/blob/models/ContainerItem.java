// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.storage.blob.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * An Azure Storage container.
 */
@Immutable
public final class ContainerItem implements JsonSerializable<ContainerItem> {
    /*
     * The name of the container.
     */
    @Generated
    private final String name;

    /*
     * Whether the container is deleted.
     */
    @Generated
    private Boolean delete;

    /*
     * The version of the container.
     */
    @Generated
    private String version;

    /*
     * The properties of the container.
     */
    @Generated
    private final ContainerProperties properties;

    /*
     * The metadata of the container.
     */
    @Generated
    private ContainerMetadata metadata;

    /**
     * Creates an instance of ContainerItem class.
     * 
     * @param name the name value to set.
     * @param properties the properties value to set.
     */
    @Generated
    private ContainerItem(String name, ContainerProperties properties) {
        this.name = name;
        this.properties = properties;
    }

    /**
     * Get the name property: The name of the container.
     * 
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Get the delete property: Whether the container is deleted.
     * 
     * @return the delete value.
     */
    @Generated
    public Boolean isDelete() {
        return this.delete;
    }

    /**
     * Get the version property: The version of the container.
     * 
     * @return the version value.
     */
    @Generated
    public String getVersion() {
        return this.version;
    }

    /**
     * Get the properties property: The properties of the container.
     * 
     * @return the properties value.
     */
    @Generated
    public ContainerProperties getProperties() {
        return this.properties;
    }

    /**
     * Get the metadata property: The metadata of the container.
     * 
     * @return the metadata value.
     */
    @Generated
    public ContainerMetadata getMetadata() {
        return this.metadata;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeJsonField("properties", this.properties);
        jsonWriter.writeBooleanField("delete", this.delete);
        jsonWriter.writeStringField("version", this.version);
        jsonWriter.writeJsonField("metadata", this.metadata);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ContainerItem from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ContainerItem if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ContainerItem.
     */
    @Generated
    public static ContainerItem fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String name = null;
            ContainerProperties properties = null;
            Boolean delete = null;
            String version = null;
            ContainerMetadata metadata = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    properties = ContainerProperties.fromJson(reader);
                } else if ("delete".equals(fieldName)) {
                    delete = reader.getNullable(JsonReader::getBoolean);
                } else if ("version".equals(fieldName)) {
                    version = reader.getString();
                } else if ("metadata".equals(fieldName)) {
                    metadata = ContainerMetadata.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            ContainerItem deserializedContainerItem = new ContainerItem(name, properties);
            deserializedContainerItem.delete = delete;
            deserializedContainerItem.version = version;
            deserializedContainerItem.metadata = metadata;

            return deserializedContainerItem;
        });
    }
}
