// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.storage.blob.generated;

// The Java test files under 'generated' package are generated for your reference.
// If you wish to modify these files, please copy them out of the 'generated' package, and modify there.
// See https://aka.ms/azsdk/dpg/java/tests for guide on adding a test.

import com.azure.core.http.policy.HttpLogDetailLevel;
import com.azure.core.http.policy.HttpLogOptions;
import com.azure.core.test.TestMode;
import com.azure.core.test.TestProxyTestBase;
import com.azure.core.test.utils.MockTokenCredential;
import com.azure.core.util.Configuration;
import com.azure.identity.DefaultAzureCredentialBuilder;
import com.azure.storage.blob.AppendBlobClient;
import com.azure.storage.blob.BlobClient;
import com.azure.storage.blob.BlobClientBuilder;
import com.azure.storage.blob.BlockBlobClient;
import com.azure.storage.blob.ContainerClient;
import com.azure.storage.blob.PageBlobClient;
import com.azure.storage.blob.ServiceClient;

class BlobClientTestBase extends TestProxyTestBase {
    protected ServiceClient serviceClient;

    protected ContainerClient containerClient;

    protected BlobClient blobClient;

    protected PageBlobClient pageBlobClient;

    protected AppendBlobClient appendBlobClient;

    protected BlockBlobClient blockBlobClient;

    @Override
    protected void beforeTest() {
        BlobClientBuilder serviceClientbuilder
            = new BlobClientBuilder().url(Configuration.getGlobalConfiguration().get("URL", "url"))
                .version(Configuration.getGlobalConfiguration().get("VERSION", "version"))
                .containerName(Configuration.getGlobalConfiguration().get("CONTAINERNAME", "containername"))
                .blob(Configuration.getGlobalConfiguration().get("BLOB", "blob"))
                .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
                .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            serviceClientbuilder.credential(new MockTokenCredential());
        } else if (getTestMode() == TestMode.RECORD) {
            serviceClientbuilder.addPolicy(interceptorManager.getRecordPolicy())
                .credential(new DefaultAzureCredentialBuilder().build());
        } else if (getTestMode() == TestMode.LIVE) {
            serviceClientbuilder.credential(new DefaultAzureCredentialBuilder().build());
        }
        serviceClient = serviceClientbuilder.buildServiceClient();

        BlobClientBuilder containerClientbuilder
            = new BlobClientBuilder().url(Configuration.getGlobalConfiguration().get("URL", "url"))
                .version(Configuration.getGlobalConfiguration().get("VERSION", "version"))
                .containerName(Configuration.getGlobalConfiguration().get("CONTAINERNAME", "containername"))
                .blob(Configuration.getGlobalConfiguration().get("BLOB", "blob"))
                .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
                .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            containerClientbuilder.credential(new MockTokenCredential());
        } else if (getTestMode() == TestMode.RECORD) {
            containerClientbuilder.addPolicy(interceptorManager.getRecordPolicy())
                .credential(new DefaultAzureCredentialBuilder().build());
        } else if (getTestMode() == TestMode.LIVE) {
            containerClientbuilder.credential(new DefaultAzureCredentialBuilder().build());
        }
        containerClient = containerClientbuilder.buildContainerClient();

        BlobClientBuilder blobClientbuilder
            = new BlobClientBuilder().url(Configuration.getGlobalConfiguration().get("URL", "url"))
                .version(Configuration.getGlobalConfiguration().get("VERSION", "version"))
                .containerName(Configuration.getGlobalConfiguration().get("CONTAINERNAME", "containername"))
                .blob(Configuration.getGlobalConfiguration().get("BLOB", "blob"))
                .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
                .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            blobClientbuilder.credential(new MockTokenCredential());
        } else if (getTestMode() == TestMode.RECORD) {
            blobClientbuilder.addPolicy(interceptorManager.getRecordPolicy())
                .credential(new DefaultAzureCredentialBuilder().build());
        } else if (getTestMode() == TestMode.LIVE) {
            blobClientbuilder.credential(new DefaultAzureCredentialBuilder().build());
        }
        blobClient = blobClientbuilder.buildBlobClient();

        BlobClientBuilder pageBlobClientbuilder
            = new BlobClientBuilder().url(Configuration.getGlobalConfiguration().get("URL", "url"))
                .version(Configuration.getGlobalConfiguration().get("VERSION", "version"))
                .containerName(Configuration.getGlobalConfiguration().get("CONTAINERNAME", "containername"))
                .blob(Configuration.getGlobalConfiguration().get("BLOB", "blob"))
                .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
                .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            pageBlobClientbuilder.credential(new MockTokenCredential());
        } else if (getTestMode() == TestMode.RECORD) {
            pageBlobClientbuilder.addPolicy(interceptorManager.getRecordPolicy())
                .credential(new DefaultAzureCredentialBuilder().build());
        } else if (getTestMode() == TestMode.LIVE) {
            pageBlobClientbuilder.credential(new DefaultAzureCredentialBuilder().build());
        }
        pageBlobClient = pageBlobClientbuilder.buildPageBlobClient();

        BlobClientBuilder appendBlobClientbuilder
            = new BlobClientBuilder().url(Configuration.getGlobalConfiguration().get("URL", "url"))
                .version(Configuration.getGlobalConfiguration().get("VERSION", "version"))
                .containerName(Configuration.getGlobalConfiguration().get("CONTAINERNAME", "containername"))
                .blob(Configuration.getGlobalConfiguration().get("BLOB", "blob"))
                .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
                .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            appendBlobClientbuilder.credential(new MockTokenCredential());
        } else if (getTestMode() == TestMode.RECORD) {
            appendBlobClientbuilder.addPolicy(interceptorManager.getRecordPolicy())
                .credential(new DefaultAzureCredentialBuilder().build());
        } else if (getTestMode() == TestMode.LIVE) {
            appendBlobClientbuilder.credential(new DefaultAzureCredentialBuilder().build());
        }
        appendBlobClient = appendBlobClientbuilder.buildAppendBlobClient();

        BlobClientBuilder blockBlobClientbuilder
            = new BlobClientBuilder().url(Configuration.getGlobalConfiguration().get("URL", "url"))
                .version(Configuration.getGlobalConfiguration().get("VERSION", "version"))
                .containerName(Configuration.getGlobalConfiguration().get("CONTAINERNAME", "containername"))
                .blob(Configuration.getGlobalConfiguration().get("BLOB", "blob"))
                .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
                .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            blockBlobClientbuilder.credential(new MockTokenCredential());
        } else if (getTestMode() == TestMode.RECORD) {
            blockBlobClientbuilder.addPolicy(interceptorManager.getRecordPolicy())
                .credential(new DefaultAzureCredentialBuilder().build());
        } else if (getTestMode() == TestMode.LIVE) {
            blockBlobClientbuilder.credential(new DefaultAzureCredentialBuilder().build());
        }
        blockBlobClient = blockBlobClientbuilder.buildBlockBlobClient();

    }
}
