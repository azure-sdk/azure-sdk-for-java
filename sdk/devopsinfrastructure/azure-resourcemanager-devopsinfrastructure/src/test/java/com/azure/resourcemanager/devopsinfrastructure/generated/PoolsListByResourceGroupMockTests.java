// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.devopsinfrastructure.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.devopsinfrastructure.DevOpsInfrastructureManager;
import com.azure.resourcemanager.devopsinfrastructure.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.devopsinfrastructure.models.Pool;
import com.azure.resourcemanager.devopsinfrastructure.models.ProvisioningState;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PoolsListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"provisioningState\":\"Failed\",\"maximumConcurrency\":1444401866,\"organizationProfile\":{\"kind\":\"OrganizationProfile\"},\"agentProfile\":{\"kind\":\"AgentProfile\",\"resourcePredictions\":\"datajrxs\",\"resourcePredictionsProfile\":{\"kind\":\"ResourcePredictionsProfile\"}},\"fabricProfile\":{\"kind\":\"FabricProfile\"},\"devCenterProjectResourceId\":\"afcnih\"},\"identity\":{\"principalId\":\"apnedgfbcvkc\",\"tenantId\":\"vpk\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"ld\":{\"principalId\":\"drhvoodsotbo\",\"clientId\":\"dopcjwvnh\"},\"pkhjwni\":{\"principalId\":\"gx\",\"clientId\":\"rslpmutwuoeg\"},\"sbpfvmwyhr\":{\"principalId\":\"sluicpdggkzz\",\"clientId\":\"mbmpaxmodfvuefy\"}}},\"location\":\"uyfta\",\"tags\":{\"ubex\":\"pwiyzvqtm\"},\"id\":\"pzk\",\"name\":\"mond\",\"type\":\"mquxvypo\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DevOpsInfrastructureManager manager = DevOpsInfrastructureManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Pool> response = manager.pools().listByResourceGroup("uflrwd", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("uyfta", response.iterator().next().location());
        Assertions.assertEquals("pwiyzvqtm", response.iterator().next().tags().get("ubex"));
        Assertions.assertEquals(ProvisioningState.FAILED, response.iterator().next().properties().provisioningState());
        Assertions.assertEquals(1444401866, response.iterator().next().properties().maximumConcurrency());
        Assertions.assertEquals("afcnih", response.iterator().next().properties().devCenterProjectResourceId());
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, response.iterator().next().identity().type());
    }
}
