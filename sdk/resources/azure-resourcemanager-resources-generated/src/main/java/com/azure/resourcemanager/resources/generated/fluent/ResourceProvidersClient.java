// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resources.generated.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.resources.generated.fluent.models.DataBoundaryDefinitionInner;

/**
 * An instance of this class provides access to all the operations defined in ResourceProvidersClient.
 */
public interface ResourceProvidersClient {
    /**
     * Opt-in tenant to data boundary.
     * 
     * @param dataBoundaryDefinition The data boundary definition.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a data boundary definition along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<DataBoundaryDefinitionInner> putDataBoundaryWithResponse(Object dataBoundaryDefinition, Context context);

    /**
     * Opt-in tenant to data boundary.
     * 
     * @param dataBoundaryDefinition The data boundary definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a data boundary definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    DataBoundaryDefinitionInner putDataBoundary(Object dataBoundaryDefinition);

    /**
     * Get data boundary of tenant.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return data boundary of tenant along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<DataBoundaryDefinitionInner> getTenantDataBoundaryWithResponse(Context context);

    /**
     * Get data boundary of tenant.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return data boundary of tenant.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    DataBoundaryDefinitionInner getTenantDataBoundary();

    /**
     * Get data boundary at specified scope.
     * 
     * @param scope The resource scope.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return data boundary at specified scope along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<DataBoundaryDefinitionInner> getDataBoundaryAtScopeWithResponse(String scope, Context context);

    /**
     * Get data boundary at specified scope.
     * 
     * @param scope The resource scope.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return data boundary at specified scope.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    DataBoundaryDefinitionInner getDataBoundaryAtScope(String scope);
}
