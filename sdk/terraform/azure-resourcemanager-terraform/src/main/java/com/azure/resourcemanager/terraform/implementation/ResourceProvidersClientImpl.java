// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.terraform.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.terraform.fluent.ResourceProvidersClient;
import com.azure.resourcemanager.terraform.fluent.models.OperationStatusInner;
import com.azure.resourcemanager.terraform.models.BaseExportModel;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in ResourceProvidersClient.
 */
public final class ResourceProvidersClientImpl implements ResourceProvidersClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final ResourceProvidersService service;

    /**
     * The service client containing this operation class.
     */
    private final AzureTerraformManagementClientImpl client;

    /**
     * Initializes an instance of ResourceProvidersClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    ResourceProvidersClientImpl(AzureTerraformManagementClientImpl client) {
        this.service
            = RestProxy.create(ResourceProvidersService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AzureTerraformManagementClientResourceProviders to be used by the
     * proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "AzureTerraformManage")
    public interface ResourceProvidersService {
        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/providers/Microsoft.AzureTerraform/exportTerraform")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> exportTerraform(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @BodyParam("application/json") BaseExportModel exportParameter, @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Exports the Terraform configuration of the specified resource(s).
     * 
     * @param exportParameter The export parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the status of the LRO operation along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> exportTerraformWithResponseAsync(BaseExportModel exportParameter) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (exportParameter == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter exportParameter is required and cannot be null."));
        } else {
            exportParameter.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.exportTerraform(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), exportParameter, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Exports the Terraform configuration of the specified resource(s).
     * 
     * @param exportParameter The export parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the status of the LRO operation along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> exportTerraformWithResponseAsync(BaseExportModel exportParameter,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (exportParameter == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter exportParameter is required and cannot be null."));
        } else {
            exportParameter.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.exportTerraform(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), exportParameter, accept, context);
    }

    /**
     * Exports the Terraform configuration of the specified resource(s).
     * 
     * @param exportParameter The export parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the status of the LRO operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<OperationStatusInner>, OperationStatusInner>
        beginExportTerraformAsync(BaseExportModel exportParameter) {
        Mono<Response<Flux<ByteBuffer>>> mono = exportTerraformWithResponseAsync(exportParameter);
        return this.client.<OperationStatusInner, OperationStatusInner>getLroResult(mono, this.client.getHttpPipeline(),
            OperationStatusInner.class, OperationStatusInner.class, this.client.getContext());
    }

    /**
     * Exports the Terraform configuration of the specified resource(s).
     * 
     * @param exportParameter The export parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the status of the LRO operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<OperationStatusInner>, OperationStatusInner>
        beginExportTerraformAsync(BaseExportModel exportParameter, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = exportTerraformWithResponseAsync(exportParameter, context);
        return this.client.<OperationStatusInner, OperationStatusInner>getLroResult(mono, this.client.getHttpPipeline(),
            OperationStatusInner.class, OperationStatusInner.class, context);
    }

    /**
     * Exports the Terraform configuration of the specified resource(s).
     * 
     * @param exportParameter The export parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the status of the LRO operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<OperationStatusInner>, OperationStatusInner>
        beginExportTerraform(BaseExportModel exportParameter) {
        return this.beginExportTerraformAsync(exportParameter).getSyncPoller();
    }

    /**
     * Exports the Terraform configuration of the specified resource(s).
     * 
     * @param exportParameter The export parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the status of the LRO operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<OperationStatusInner>, OperationStatusInner>
        beginExportTerraform(BaseExportModel exportParameter, Context context) {
        return this.beginExportTerraformAsync(exportParameter, context).getSyncPoller();
    }

    /**
     * Exports the Terraform configuration of the specified resource(s).
     * 
     * @param exportParameter The export parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the status of the LRO operation on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<OperationStatusInner> exportTerraformAsync(BaseExportModel exportParameter) {
        return beginExportTerraformAsync(exportParameter).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Exports the Terraform configuration of the specified resource(s).
     * 
     * @param exportParameter The export parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the status of the LRO operation on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<OperationStatusInner> exportTerraformAsync(BaseExportModel exportParameter, Context context) {
        return beginExportTerraformAsync(exportParameter, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Exports the Terraform configuration of the specified resource(s).
     * 
     * @param exportParameter The export parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the status of the LRO operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OperationStatusInner exportTerraform(BaseExportModel exportParameter) {
        return exportTerraformAsync(exportParameter).block();
    }

    /**
     * Exports the Terraform configuration of the specified resource(s).
     * 
     * @param exportParameter The export parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the status of the LRO operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OperationStatusInner exportTerraform(BaseExportModel exportParameter, Context context) {
        return exportTerraformAsync(exportParameter, context).block();
    }
}
