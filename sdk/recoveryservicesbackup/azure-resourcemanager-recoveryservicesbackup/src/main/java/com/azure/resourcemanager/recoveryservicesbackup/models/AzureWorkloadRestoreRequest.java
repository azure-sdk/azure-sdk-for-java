// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * AzureWorkload-specific restore.
 */
@Fluent
public class AzureWorkloadRestoreRequest extends RestoreRequest {
    /*
     * This property will be used as the discriminator for deciding the specific types in the polymorphic chain of
     * types.
     */
    private String objectType = "AzureWorkloadRestoreRequest";

    /*
     * Type of this recovery.
     */
    private RecoveryType recoveryType;

    /*
     * Fully qualified ARM ID of the VM on which workload that was running is being recovered.
     */
    private String sourceResourceId;

    /*
     * Workload specific property bag.
     */
    private Map<String, String> propertyBag;

    /*
     * Details of target database
     */
    private TargetRestoreInfo targetInfo;

    /*
     * Defines whether the current recovery mode is file restore or database restore
     */
    private RecoveryMode recoveryMode;

    /*
     * This is the complete ARM Id of the target VM
     * For e.g. /subscriptions/{subId}/resourcegroups/{rg}/provider/Microsoft.Compute/virtualmachines/{vm}
     */
    private String targetVirtualMachineId;

    /**
     * Creates an instance of AzureWorkloadRestoreRequest class.
     */
    public AzureWorkloadRestoreRequest() {
    }

    /**
     * Get the objectType property: This property will be used as the discriminator for deciding the specific types in
     * the polymorphic chain of types.
     * 
     * @return the objectType value.
     */
    @Override
    public String objectType() {
        return this.objectType;
    }

    /**
     * Get the recoveryType property: Type of this recovery.
     * 
     * @return the recoveryType value.
     */
    public RecoveryType recoveryType() {
        return this.recoveryType;
    }

    /**
     * Set the recoveryType property: Type of this recovery.
     * 
     * @param recoveryType the recoveryType value to set.
     * @return the AzureWorkloadRestoreRequest object itself.
     */
    public AzureWorkloadRestoreRequest withRecoveryType(RecoveryType recoveryType) {
        this.recoveryType = recoveryType;
        return this;
    }

    /**
     * Get the sourceResourceId property: Fully qualified ARM ID of the VM on which workload that was running is being
     * recovered.
     * 
     * @return the sourceResourceId value.
     */
    public String sourceResourceId() {
        return this.sourceResourceId;
    }

    /**
     * Set the sourceResourceId property: Fully qualified ARM ID of the VM on which workload that was running is being
     * recovered.
     * 
     * @param sourceResourceId the sourceResourceId value to set.
     * @return the AzureWorkloadRestoreRequest object itself.
     */
    public AzureWorkloadRestoreRequest withSourceResourceId(String sourceResourceId) {
        this.sourceResourceId = sourceResourceId;
        return this;
    }

    /**
     * Get the propertyBag property: Workload specific property bag.
     * 
     * @return the propertyBag value.
     */
    public Map<String, String> propertyBag() {
        return this.propertyBag;
    }

    /**
     * Set the propertyBag property: Workload specific property bag.
     * 
     * @param propertyBag the propertyBag value to set.
     * @return the AzureWorkloadRestoreRequest object itself.
     */
    public AzureWorkloadRestoreRequest withPropertyBag(Map<String, String> propertyBag) {
        this.propertyBag = propertyBag;
        return this;
    }

    /**
     * Get the targetInfo property: Details of target database.
     * 
     * @return the targetInfo value.
     */
    public TargetRestoreInfo targetInfo() {
        return this.targetInfo;
    }

    /**
     * Set the targetInfo property: Details of target database.
     * 
     * @param targetInfo the targetInfo value to set.
     * @return the AzureWorkloadRestoreRequest object itself.
     */
    public AzureWorkloadRestoreRequest withTargetInfo(TargetRestoreInfo targetInfo) {
        this.targetInfo = targetInfo;
        return this;
    }

    /**
     * Get the recoveryMode property: Defines whether the current recovery mode is file restore or database restore.
     * 
     * @return the recoveryMode value.
     */
    public RecoveryMode recoveryMode() {
        return this.recoveryMode;
    }

    /**
     * Set the recoveryMode property: Defines whether the current recovery mode is file restore or database restore.
     * 
     * @param recoveryMode the recoveryMode value to set.
     * @return the AzureWorkloadRestoreRequest object itself.
     */
    public AzureWorkloadRestoreRequest withRecoveryMode(RecoveryMode recoveryMode) {
        this.recoveryMode = recoveryMode;
        return this;
    }

    /**
     * Get the targetVirtualMachineId property: This is the complete ARM Id of the target VM
     * For e.g. /subscriptions/{subId}/resourcegroups/{rg}/provider/Microsoft.Compute/virtualmachines/{vm}.
     * 
     * @return the targetVirtualMachineId value.
     */
    public String targetVirtualMachineId() {
        return this.targetVirtualMachineId;
    }

    /**
     * Set the targetVirtualMachineId property: This is the complete ARM Id of the target VM
     * For e.g. /subscriptions/{subId}/resourcegroups/{rg}/provider/Microsoft.Compute/virtualmachines/{vm}.
     * 
     * @param targetVirtualMachineId the targetVirtualMachineId value to set.
     * @return the AzureWorkloadRestoreRequest object itself.
     */
    public AzureWorkloadRestoreRequest withTargetVirtualMachineId(String targetVirtualMachineId) {
        this.targetVirtualMachineId = targetVirtualMachineId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (targetInfo() != null) {
            targetInfo().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("objectType", this.objectType);
        jsonWriter.writeStringField("recoveryType", this.recoveryType == null ? null : this.recoveryType.toString());
        jsonWriter.writeStringField("sourceResourceId", this.sourceResourceId);
        jsonWriter.writeMapField("propertyBag", this.propertyBag, (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("targetInfo", this.targetInfo);
        jsonWriter.writeStringField("recoveryMode", this.recoveryMode == null ? null : this.recoveryMode.toString());
        jsonWriter.writeStringField("targetVirtualMachineId", this.targetVirtualMachineId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AzureWorkloadRestoreRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AzureWorkloadRestoreRequest if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AzureWorkloadRestoreRequest.
     */
    public static AzureWorkloadRestoreRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("objectType".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("AzureWorkloadPointInTimeRestoreRequest".equals(discriminatorValue)) {
                    return AzureWorkloadPointInTimeRestoreRequest.fromJson(readerToUse.reset());
                } else if ("AzureWorkloadSAPHanaRestoreRequest".equals(discriminatorValue)) {
                    return AzureWorkloadSapHanaRestoreRequest.fromJsonKnownDiscriminator(readerToUse.reset());
                } else if ("AzureWorkloadSAPHanaPointInTimeRestoreRequest".equals(discriminatorValue)) {
                    return AzureWorkloadSapHanaPointInTimeRestoreRequest.fromJson(readerToUse.reset());
                } else if ("AzureWorkloadSQLRestoreRequest".equals(discriminatorValue)) {
                    return AzureWorkloadSqlRestoreRequest.fromJsonKnownDiscriminator(readerToUse.reset());
                } else if ("AzureWorkloadSQLPointInTimeRestoreRequest".equals(discriminatorValue)) {
                    return AzureWorkloadSqlPointInTimeRestoreRequest.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    static AzureWorkloadRestoreRequest fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AzureWorkloadRestoreRequest deserializedAzureWorkloadRestoreRequest = new AzureWorkloadRestoreRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("objectType".equals(fieldName)) {
                    deserializedAzureWorkloadRestoreRequest.objectType = reader.getString();
                } else if ("recoveryType".equals(fieldName)) {
                    deserializedAzureWorkloadRestoreRequest.recoveryType = RecoveryType.fromString(reader.getString());
                } else if ("sourceResourceId".equals(fieldName)) {
                    deserializedAzureWorkloadRestoreRequest.sourceResourceId = reader.getString();
                } else if ("propertyBag".equals(fieldName)) {
                    Map<String, String> propertyBag = reader.readMap(reader1 -> reader1.getString());
                    deserializedAzureWorkloadRestoreRequest.propertyBag = propertyBag;
                } else if ("targetInfo".equals(fieldName)) {
                    deserializedAzureWorkloadRestoreRequest.targetInfo = TargetRestoreInfo.fromJson(reader);
                } else if ("recoveryMode".equals(fieldName)) {
                    deserializedAzureWorkloadRestoreRequest.recoveryMode = RecoveryMode.fromString(reader.getString());
                } else if ("targetVirtualMachineId".equals(fieldName)) {
                    deserializedAzureWorkloadRestoreRequest.targetVirtualMachineId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAzureWorkloadRestoreRequest;
        });
    }
}
