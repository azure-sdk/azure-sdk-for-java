// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Map;

/**
 * AzureWorkload AnyDatabase-specific restore with integrated rehydration of recovery point.
 */
@Fluent
public final class AzureWorkloadAnyDatabasePointInTimeRestoreWithRehydrateRequest
    extends AzureWorkloadAnyDatabasePointInTimeRestoreRequest {
    /*
     * This property will be used as the discriminator for deciding the specific types in the polymorphic chain of
     * types.
     */
    private String objectType = "AzureWorkloadAnyDatabasePointInTimeRestoreWithRehydrateRequest";

    /*
     * RP Rehydration Info
     */
    private RecoveryPointRehydrationInfo recoveryPointRehydrationInfo;

    /**
     * Creates an instance of AzureWorkloadAnyDatabasePointInTimeRestoreWithRehydrateRequest class.
     */
    public AzureWorkloadAnyDatabasePointInTimeRestoreWithRehydrateRequest() {
    }

    /**
     * Get the objectType property: This property will be used as the discriminator for deciding the specific types in
     * the polymorphic chain of types.
     * 
     * @return the objectType value.
     */
    @Override
    public String objectType() {
        return this.objectType;
    }

    /**
     * Get the recoveryPointRehydrationInfo property: RP Rehydration Info.
     * 
     * @return the recoveryPointRehydrationInfo value.
     */
    public RecoveryPointRehydrationInfo recoveryPointRehydrationInfo() {
        return this.recoveryPointRehydrationInfo;
    }

    /**
     * Set the recoveryPointRehydrationInfo property: RP Rehydration Info.
     * 
     * @param recoveryPointRehydrationInfo the recoveryPointRehydrationInfo value to set.
     * @return the AzureWorkloadAnyDatabasePointInTimeRestoreWithRehydrateRequest object itself.
     */
    public AzureWorkloadAnyDatabasePointInTimeRestoreWithRehydrateRequest
        withRecoveryPointRehydrationInfo(RecoveryPointRehydrationInfo recoveryPointRehydrationInfo) {
        this.recoveryPointRehydrationInfo = recoveryPointRehydrationInfo;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureWorkloadAnyDatabasePointInTimeRestoreWithRehydrateRequest withPointInTime(OffsetDateTime pointInTime) {
        super.withPointInTime(pointInTime);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureWorkloadAnyDatabasePointInTimeRestoreWithRehydrateRequest withRecoveryType(RecoveryType recoveryType) {
        super.withRecoveryType(recoveryType);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureWorkloadAnyDatabasePointInTimeRestoreWithRehydrateRequest
        withSourceResourceId(String sourceResourceId) {
        super.withSourceResourceId(sourceResourceId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureWorkloadAnyDatabasePointInTimeRestoreWithRehydrateRequest
        withPropertyBag(Map<String, String> propertyBag) {
        super.withPropertyBag(propertyBag);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureWorkloadAnyDatabasePointInTimeRestoreWithRehydrateRequest withTargetInfo(TargetRestoreInfo targetInfo) {
        super.withTargetInfo(targetInfo);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureWorkloadAnyDatabasePointInTimeRestoreWithRehydrateRequest withRecoveryMode(RecoveryMode recoveryMode) {
        super.withRecoveryMode(recoveryMode);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureWorkloadAnyDatabasePointInTimeRestoreWithRehydrateRequest
        withTargetResourceGroupName(String targetResourceGroupName) {
        super.withTargetResourceGroupName(targetResourceGroupName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureWorkloadAnyDatabasePointInTimeRestoreWithRehydrateRequest
        withUserAssignedManagedIdentityDetails(UserAssignedManagedIdentityDetails userAssignedManagedIdentityDetails) {
        super.withUserAssignedManagedIdentityDetails(userAssignedManagedIdentityDetails);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureWorkloadAnyDatabasePointInTimeRestoreWithRehydrateRequest
        withSnapshotRestoreParameters(SnapshotRestoreParameters snapshotRestoreParameters) {
        super.withSnapshotRestoreParameters(snapshotRestoreParameters);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureWorkloadAnyDatabasePointInTimeRestoreWithRehydrateRequest
        withTargetVirtualMachineId(String targetVirtualMachineId) {
        super.withTargetVirtualMachineId(targetVirtualMachineId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureWorkloadAnyDatabasePointInTimeRestoreWithRehydrateRequest
        withResourceGuardOperationRequests(List<String> resourceGuardOperationRequests) {
        super.withResourceGuardOperationRequests(resourceGuardOperationRequests);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (recoveryPointRehydrationInfo() != null) {
            recoveryPointRehydrationInfo().validate();
        }
        if (targetInfo() != null) {
            targetInfo().validate();
        }
        if (userAssignedManagedIdentityDetails() != null) {
            userAssignedManagedIdentityDetails().validate();
        }
        if (snapshotRestoreParameters() != null) {
            snapshotRestoreParameters().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("resourceGuardOperationRequests", resourceGuardOperationRequests(),
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("recoveryType", recoveryType() == null ? null : recoveryType().toString());
        jsonWriter.writeStringField("sourceResourceId", sourceResourceId());
        jsonWriter.writeMapField("propertyBag", propertyBag(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("targetInfo", targetInfo());
        jsonWriter.writeStringField("recoveryMode", recoveryMode() == null ? null : recoveryMode().toString());
        jsonWriter.writeStringField("targetResourceGroupName", targetResourceGroupName());
        jsonWriter.writeJsonField("userAssignedManagedIdentityDetails", userAssignedManagedIdentityDetails());
        jsonWriter.writeJsonField("snapshotRestoreParameters", snapshotRestoreParameters());
        jsonWriter.writeStringField("targetVirtualMachineId", targetVirtualMachineId());
        jsonWriter.writeStringField("pointInTime",
            pointInTime() == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(pointInTime()));
        jsonWriter.writeStringField("objectType", this.objectType);
        jsonWriter.writeJsonField("recoveryPointRehydrationInfo", this.recoveryPointRehydrationInfo);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AzureWorkloadAnyDatabasePointInTimeRestoreWithRehydrateRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AzureWorkloadAnyDatabasePointInTimeRestoreWithRehydrateRequest if the JsonReader was
     * pointing to an instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the
     * AzureWorkloadAnyDatabasePointInTimeRestoreWithRehydrateRequest.
     */
    public static AzureWorkloadAnyDatabasePointInTimeRestoreWithRehydrateRequest fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            AzureWorkloadAnyDatabasePointInTimeRestoreWithRehydrateRequest deserializedAzureWorkloadAnyDatabasePointInTimeRestoreWithRehydrateRequest
                = new AzureWorkloadAnyDatabasePointInTimeRestoreWithRehydrateRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("resourceGuardOperationRequests".equals(fieldName)) {
                    List<String> resourceGuardOperationRequests = reader.readArray(reader1 -> reader1.getString());
                    deserializedAzureWorkloadAnyDatabasePointInTimeRestoreWithRehydrateRequest
                        .withResourceGuardOperationRequests(resourceGuardOperationRequests);
                } else if ("recoveryType".equals(fieldName)) {
                    deserializedAzureWorkloadAnyDatabasePointInTimeRestoreWithRehydrateRequest
                        .withRecoveryType(RecoveryType.fromString(reader.getString()));
                } else if ("sourceResourceId".equals(fieldName)) {
                    deserializedAzureWorkloadAnyDatabasePointInTimeRestoreWithRehydrateRequest
                        .withSourceResourceId(reader.getString());
                } else if ("propertyBag".equals(fieldName)) {
                    Map<String, String> propertyBag = reader.readMap(reader1 -> reader1.getString());
                    deserializedAzureWorkloadAnyDatabasePointInTimeRestoreWithRehydrateRequest
                        .withPropertyBag(propertyBag);
                } else if ("targetInfo".equals(fieldName)) {
                    deserializedAzureWorkloadAnyDatabasePointInTimeRestoreWithRehydrateRequest
                        .withTargetInfo(TargetRestoreInfo.fromJson(reader));
                } else if ("recoveryMode".equals(fieldName)) {
                    deserializedAzureWorkloadAnyDatabasePointInTimeRestoreWithRehydrateRequest
                        .withRecoveryMode(RecoveryMode.fromString(reader.getString()));
                } else if ("targetResourceGroupName".equals(fieldName)) {
                    deserializedAzureWorkloadAnyDatabasePointInTimeRestoreWithRehydrateRequest
                        .withTargetResourceGroupName(reader.getString());
                } else if ("userAssignedManagedIdentityDetails".equals(fieldName)) {
                    deserializedAzureWorkloadAnyDatabasePointInTimeRestoreWithRehydrateRequest
                        .withUserAssignedManagedIdentityDetails(UserAssignedManagedIdentityDetails.fromJson(reader));
                } else if ("snapshotRestoreParameters".equals(fieldName)) {
                    deserializedAzureWorkloadAnyDatabasePointInTimeRestoreWithRehydrateRequest
                        .withSnapshotRestoreParameters(SnapshotRestoreParameters.fromJson(reader));
                } else if ("targetVirtualMachineId".equals(fieldName)) {
                    deserializedAzureWorkloadAnyDatabasePointInTimeRestoreWithRehydrateRequest
                        .withTargetVirtualMachineId(reader.getString());
                } else if ("pointInTime".equals(fieldName)) {
                    deserializedAzureWorkloadAnyDatabasePointInTimeRestoreWithRehydrateRequest.withPointInTime(reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString())));
                } else if ("objectType".equals(fieldName)) {
                    deserializedAzureWorkloadAnyDatabasePointInTimeRestoreWithRehydrateRequest.objectType
                        = reader.getString();
                } else if ("recoveryPointRehydrationInfo".equals(fieldName)) {
                    deserializedAzureWorkloadAnyDatabasePointInTimeRestoreWithRehydrateRequest.recoveryPointRehydrationInfo
                        = RecoveryPointRehydrationInfo.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAzureWorkloadAnyDatabasePointInTimeRestoreWithRehydrateRequest;
        });
    }
}
