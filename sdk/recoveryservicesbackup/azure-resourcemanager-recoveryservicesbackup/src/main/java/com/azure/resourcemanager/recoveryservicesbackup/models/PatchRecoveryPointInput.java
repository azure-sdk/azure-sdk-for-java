// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Recovery Point Contract for Update Recovery Point API.
 */
@Fluent
public final class PatchRecoveryPointInput implements JsonSerializable<PatchRecoveryPointInput> {
    /*
     * Properties of Recovery Point
     */
    private PatchRecoveryPointPropertiesInput recoveryPointProperties;

    /**
     * Creates an instance of PatchRecoveryPointInput class.
     */
    public PatchRecoveryPointInput() {
    }

    /**
     * Get the recoveryPointProperties property: Properties of Recovery Point.
     * 
     * @return the recoveryPointProperties value.
     */
    public PatchRecoveryPointPropertiesInput recoveryPointProperties() {
        return this.recoveryPointProperties;
    }

    /**
     * Set the recoveryPointProperties property: Properties of Recovery Point.
     * 
     * @param recoveryPointProperties the recoveryPointProperties value to set.
     * @return the PatchRecoveryPointInput object itself.
     */
    public PatchRecoveryPointInput
        withRecoveryPointProperties(PatchRecoveryPointPropertiesInput recoveryPointProperties) {
        this.recoveryPointProperties = recoveryPointProperties;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (recoveryPointProperties() != null) {
            recoveryPointProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("recoveryPointProperties", this.recoveryPointProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PatchRecoveryPointInput from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PatchRecoveryPointInput if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the PatchRecoveryPointInput.
     */
    public static PatchRecoveryPointInput fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PatchRecoveryPointInput deserializedPatchRecoveryPointInput = new PatchRecoveryPointInput();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("recoveryPointProperties".equals(fieldName)) {
                    deserializedPatchRecoveryPointInput.recoveryPointProperties
                        = PatchRecoveryPointPropertiesInput.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPatchRecoveryPointInput;
        });
    }
}
