// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Recovery Point Properties Contract for Update Recovery Point API.
 */
@Fluent
public final class PatchRecoveryPointPropertiesInput implements JsonSerializable<PatchRecoveryPointPropertiesInput> {
    /*
     * Expiry time of Recovery Point in UTC.
     */
    private OffsetDateTime expiryTime;

    /**
     * Creates an instance of PatchRecoveryPointPropertiesInput class.
     */
    public PatchRecoveryPointPropertiesInput() {
    }

    /**
     * Get the expiryTime property: Expiry time of Recovery Point in UTC.
     * 
     * @return the expiryTime value.
     */
    public OffsetDateTime expiryTime() {
        return this.expiryTime;
    }

    /**
     * Set the expiryTime property: Expiry time of Recovery Point in UTC.
     * 
     * @param expiryTime the expiryTime value to set.
     * @return the PatchRecoveryPointPropertiesInput object itself.
     */
    public PatchRecoveryPointPropertiesInput withExpiryTime(OffsetDateTime expiryTime) {
        this.expiryTime = expiryTime;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("expiryTime",
            this.expiryTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.expiryTime));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PatchRecoveryPointPropertiesInput from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PatchRecoveryPointPropertiesInput if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the PatchRecoveryPointPropertiesInput.
     */
    public static PatchRecoveryPointPropertiesInput fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PatchRecoveryPointPropertiesInput deserializedPatchRecoveryPointPropertiesInput
                = new PatchRecoveryPointPropertiesInput();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("expiryTime".equals(fieldName)) {
                    deserializedPatchRecoveryPointPropertiesInput.expiryTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPatchRecoveryPointPropertiesInput;
        });
    }
}
