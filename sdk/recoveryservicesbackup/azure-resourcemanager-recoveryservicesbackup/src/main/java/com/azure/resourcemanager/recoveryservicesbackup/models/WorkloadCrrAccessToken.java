// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * The WorkloadCrrAccessToken model.
 */
@Fluent
public final class WorkloadCrrAccessToken extends CrrAccessToken {
    /*
     * Type of the specific object - used for deserializing
     */
    private String objectType = "WorkloadCrrAccessToken";

    /*
     * The protectableObjectUniqueName property.
     */
    private String protectableObjectUniqueName;

    /*
     * The protectableObjectFriendlyName property.
     */
    private String protectableObjectFriendlyName;

    /*
     * The protectableObjectWorkloadType property.
     */
    private String protectableObjectWorkloadType;

    /*
     * The protectableObjectProtectionState property.
     */
    private String protectableObjectProtectionState;

    /*
     * The protectableObjectContainerHostOsName property.
     */
    private String protectableObjectContainerHostOsName;

    /*
     * The protectableObjectParentLogicalContainerName property.
     */
    private String protectableObjectParentLogicalContainerName;

    /*
     * Container Id
     */
    private String containerId;

    /*
     * Policy Name
     */
    private String policyName;

    /*
     * Policy Id
     */
    private String policyId;

    /**
     * Creates an instance of WorkloadCrrAccessToken class.
     */
    public WorkloadCrrAccessToken() {
    }

    /**
     * Get the objectType property: Type of the specific object - used for deserializing.
     * 
     * @return the objectType value.
     */
    @Override
    public String objectType() {
        return this.objectType;
    }

    /**
     * Get the protectableObjectUniqueName property: The protectableObjectUniqueName property.
     * 
     * @return the protectableObjectUniqueName value.
     */
    public String protectableObjectUniqueName() {
        return this.protectableObjectUniqueName;
    }

    /**
     * Set the protectableObjectUniqueName property: The protectableObjectUniqueName property.
     * 
     * @param protectableObjectUniqueName the protectableObjectUniqueName value to set.
     * @return the WorkloadCrrAccessToken object itself.
     */
    public WorkloadCrrAccessToken withProtectableObjectUniqueName(String protectableObjectUniqueName) {
        this.protectableObjectUniqueName = protectableObjectUniqueName;
        return this;
    }

    /**
     * Get the protectableObjectFriendlyName property: The protectableObjectFriendlyName property.
     * 
     * @return the protectableObjectFriendlyName value.
     */
    public String protectableObjectFriendlyName() {
        return this.protectableObjectFriendlyName;
    }

    /**
     * Set the protectableObjectFriendlyName property: The protectableObjectFriendlyName property.
     * 
     * @param protectableObjectFriendlyName the protectableObjectFriendlyName value to set.
     * @return the WorkloadCrrAccessToken object itself.
     */
    public WorkloadCrrAccessToken withProtectableObjectFriendlyName(String protectableObjectFriendlyName) {
        this.protectableObjectFriendlyName = protectableObjectFriendlyName;
        return this;
    }

    /**
     * Get the protectableObjectWorkloadType property: The protectableObjectWorkloadType property.
     * 
     * @return the protectableObjectWorkloadType value.
     */
    public String protectableObjectWorkloadType() {
        return this.protectableObjectWorkloadType;
    }

    /**
     * Set the protectableObjectWorkloadType property: The protectableObjectWorkloadType property.
     * 
     * @param protectableObjectWorkloadType the protectableObjectWorkloadType value to set.
     * @return the WorkloadCrrAccessToken object itself.
     */
    public WorkloadCrrAccessToken withProtectableObjectWorkloadType(String protectableObjectWorkloadType) {
        this.protectableObjectWorkloadType = protectableObjectWorkloadType;
        return this;
    }

    /**
     * Get the protectableObjectProtectionState property: The protectableObjectProtectionState property.
     * 
     * @return the protectableObjectProtectionState value.
     */
    public String protectableObjectProtectionState() {
        return this.protectableObjectProtectionState;
    }

    /**
     * Set the protectableObjectProtectionState property: The protectableObjectProtectionState property.
     * 
     * @param protectableObjectProtectionState the protectableObjectProtectionState value to set.
     * @return the WorkloadCrrAccessToken object itself.
     */
    public WorkloadCrrAccessToken withProtectableObjectProtectionState(String protectableObjectProtectionState) {
        this.protectableObjectProtectionState = protectableObjectProtectionState;
        return this;
    }

    /**
     * Get the protectableObjectContainerHostOsName property: The protectableObjectContainerHostOsName property.
     * 
     * @return the protectableObjectContainerHostOsName value.
     */
    public String protectableObjectContainerHostOsName() {
        return this.protectableObjectContainerHostOsName;
    }

    /**
     * Set the protectableObjectContainerHostOsName property: The protectableObjectContainerHostOsName property.
     * 
     * @param protectableObjectContainerHostOsName the protectableObjectContainerHostOsName value to set.
     * @return the WorkloadCrrAccessToken object itself.
     */
    public WorkloadCrrAccessToken
        withProtectableObjectContainerHostOsName(String protectableObjectContainerHostOsName) {
        this.protectableObjectContainerHostOsName = protectableObjectContainerHostOsName;
        return this;
    }

    /**
     * Get the protectableObjectParentLogicalContainerName property: The protectableObjectParentLogicalContainerName
     * property.
     * 
     * @return the protectableObjectParentLogicalContainerName value.
     */
    public String protectableObjectParentLogicalContainerName() {
        return this.protectableObjectParentLogicalContainerName;
    }

    /**
     * Set the protectableObjectParentLogicalContainerName property: The protectableObjectParentLogicalContainerName
     * property.
     * 
     * @param protectableObjectParentLogicalContainerName the protectableObjectParentLogicalContainerName value to set.
     * @return the WorkloadCrrAccessToken object itself.
     */
    public WorkloadCrrAccessToken
        withProtectableObjectParentLogicalContainerName(String protectableObjectParentLogicalContainerName) {
        this.protectableObjectParentLogicalContainerName = protectableObjectParentLogicalContainerName;
        return this;
    }

    /**
     * Get the containerId property: Container Id.
     * 
     * @return the containerId value.
     */
    public String containerId() {
        return this.containerId;
    }

    /**
     * Set the containerId property: Container Id.
     * 
     * @param containerId the containerId value to set.
     * @return the WorkloadCrrAccessToken object itself.
     */
    public WorkloadCrrAccessToken withContainerId(String containerId) {
        this.containerId = containerId;
        return this;
    }

    /**
     * Get the policyName property: Policy Name.
     * 
     * @return the policyName value.
     */
    public String policyName() {
        return this.policyName;
    }

    /**
     * Set the policyName property: Policy Name.
     * 
     * @param policyName the policyName value to set.
     * @return the WorkloadCrrAccessToken object itself.
     */
    public WorkloadCrrAccessToken withPolicyName(String policyName) {
        this.policyName = policyName;
        return this;
    }

    /**
     * Get the policyId property: Policy Id.
     * 
     * @return the policyId value.
     */
    public String policyId() {
        return this.policyId;
    }

    /**
     * Set the policyId property: Policy Id.
     * 
     * @param policyId the policyId value to set.
     * @return the WorkloadCrrAccessToken object itself.
     */
    public WorkloadCrrAccessToken withPolicyId(String policyId) {
        this.policyId = policyId;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public WorkloadCrrAccessToken withAccessTokenString(String accessTokenString) {
        super.withAccessTokenString(accessTokenString);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public WorkloadCrrAccessToken withSubscriptionId(String subscriptionId) {
        super.withSubscriptionId(subscriptionId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public WorkloadCrrAccessToken withResourceGroupName(String resourceGroupName) {
        super.withResourceGroupName(resourceGroupName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public WorkloadCrrAccessToken withResourceName(String resourceName) {
        super.withResourceName(resourceName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public WorkloadCrrAccessToken withResourceId(String resourceId) {
        super.withResourceId(resourceId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public WorkloadCrrAccessToken withProtectionContainerId(Long protectionContainerId) {
        super.withProtectionContainerId(protectionContainerId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public WorkloadCrrAccessToken withRecoveryPointId(String recoveryPointId) {
        super.withRecoveryPointId(recoveryPointId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public WorkloadCrrAccessToken withRecoveryPointTime(String recoveryPointTime) {
        super.withRecoveryPointTime(recoveryPointTime);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public WorkloadCrrAccessToken withContainerName(String containerName) {
        super.withContainerName(containerName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public WorkloadCrrAccessToken withContainerType(String containerType) {
        super.withContainerType(containerType);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public WorkloadCrrAccessToken withBackupManagementType(String backupManagementType) {
        super.withBackupManagementType(backupManagementType);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public WorkloadCrrAccessToken withDatasourceType(String datasourceType) {
        super.withDatasourceType(datasourceType);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public WorkloadCrrAccessToken withDatasourceName(String datasourceName) {
        super.withDatasourceName(datasourceName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public WorkloadCrrAccessToken withDatasourceId(String datasourceId) {
        super.withDatasourceId(datasourceId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public WorkloadCrrAccessToken withDatasourceContainerName(String datasourceContainerName) {
        super.withDatasourceContainerName(datasourceContainerName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public WorkloadCrrAccessToken withCoordinatorServiceStampId(String coordinatorServiceStampId) {
        super.withCoordinatorServiceStampId(coordinatorServiceStampId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public WorkloadCrrAccessToken withCoordinatorServiceStampUri(String coordinatorServiceStampUri) {
        super.withCoordinatorServiceStampUri(coordinatorServiceStampUri);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public WorkloadCrrAccessToken withProtectionServiceStampId(String protectionServiceStampId) {
        super.withProtectionServiceStampId(protectionServiceStampId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public WorkloadCrrAccessToken withProtectionServiceStampUri(String protectionServiceStampUri) {
        super.withProtectionServiceStampUri(protectionServiceStampUri);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public WorkloadCrrAccessToken withTokenExtendedInformation(String tokenExtendedInformation) {
        super.withTokenExtendedInformation(tokenExtendedInformation);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public WorkloadCrrAccessToken withRpTierInformation(Map<String, String> rpTierInformation) {
        super.withRpTierInformation(rpTierInformation);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public WorkloadCrrAccessToken withRpOriginalSAOption(Boolean rpOriginalSAOption) {
        super.withRpOriginalSAOption(rpOriginalSAOption);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public WorkloadCrrAccessToken withRpIsManagedVirtualMachine(Boolean rpIsManagedVirtualMachine) {
        super.withRpIsManagedVirtualMachine(rpIsManagedVirtualMachine);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public WorkloadCrrAccessToken withRpVMSizeDescription(String rpVMSizeDescription) {
        super.withRpVMSizeDescription(rpVMSizeDescription);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public WorkloadCrrAccessToken withBMSActiveRegion(String bMSActiveRegion) {
        super.withBMSActiveRegion(bMSActiveRegion);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("accessTokenString", accessTokenString());
        jsonWriter.writeStringField("subscriptionId", subscriptionId());
        jsonWriter.writeStringField("resourceGroupName", resourceGroupName());
        jsonWriter.writeStringField("resourceName", resourceName());
        jsonWriter.writeStringField("resourceId", resourceId());
        jsonWriter.writeNumberField("protectionContainerId", protectionContainerId());
        jsonWriter.writeStringField("recoveryPointId", recoveryPointId());
        jsonWriter.writeStringField("recoveryPointTime", recoveryPointTime());
        jsonWriter.writeStringField("containerName", containerName());
        jsonWriter.writeStringField("containerType", containerType());
        jsonWriter.writeStringField("backupManagementType", backupManagementType());
        jsonWriter.writeStringField("datasourceType", datasourceType());
        jsonWriter.writeStringField("datasourceName", datasourceName());
        jsonWriter.writeStringField("datasourceId", datasourceId());
        jsonWriter.writeStringField("datasourceContainerName", datasourceContainerName());
        jsonWriter.writeStringField("coordinatorServiceStampId", coordinatorServiceStampId());
        jsonWriter.writeStringField("coordinatorServiceStampUri", coordinatorServiceStampUri());
        jsonWriter.writeStringField("protectionServiceStampId", protectionServiceStampId());
        jsonWriter.writeStringField("protectionServiceStampUri", protectionServiceStampUri());
        jsonWriter.writeStringField("tokenExtendedInformation", tokenExtendedInformation());
        jsonWriter.writeMapField("rpTierInformation", rpTierInformation(),
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeBooleanField("rpOriginalSAOption", rpOriginalSAOption());
        jsonWriter.writeBooleanField("rpIsManagedVirtualMachine", rpIsManagedVirtualMachine());
        jsonWriter.writeStringField("rpVMSizeDescription", rpVMSizeDescription());
        jsonWriter.writeStringField("bMSActiveRegion", bMSActiveRegion());
        jsonWriter.writeStringField("objectType", this.objectType);
        jsonWriter.writeStringField("protectableObjectUniqueName", this.protectableObjectUniqueName);
        jsonWriter.writeStringField("protectableObjectFriendlyName", this.protectableObjectFriendlyName);
        jsonWriter.writeStringField("protectableObjectWorkloadType", this.protectableObjectWorkloadType);
        jsonWriter.writeStringField("protectableObjectProtectionState", this.protectableObjectProtectionState);
        jsonWriter.writeStringField("protectableObjectContainerHostOsName", this.protectableObjectContainerHostOsName);
        jsonWriter.writeStringField("protectableObjectParentLogicalContainerName",
            this.protectableObjectParentLogicalContainerName);
        jsonWriter.writeStringField("containerId", this.containerId);
        jsonWriter.writeStringField("policyName", this.policyName);
        jsonWriter.writeStringField("policyId", this.policyId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WorkloadCrrAccessToken from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of WorkloadCrrAccessToken if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the WorkloadCrrAccessToken.
     */
    public static WorkloadCrrAccessToken fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WorkloadCrrAccessToken deserializedWorkloadCrrAccessToken = new WorkloadCrrAccessToken();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("accessTokenString".equals(fieldName)) {
                    deserializedWorkloadCrrAccessToken.withAccessTokenString(reader.getString());
                } else if ("subscriptionId".equals(fieldName)) {
                    deserializedWorkloadCrrAccessToken.withSubscriptionId(reader.getString());
                } else if ("resourceGroupName".equals(fieldName)) {
                    deserializedWorkloadCrrAccessToken.withResourceGroupName(reader.getString());
                } else if ("resourceName".equals(fieldName)) {
                    deserializedWorkloadCrrAccessToken.withResourceName(reader.getString());
                } else if ("resourceId".equals(fieldName)) {
                    deserializedWorkloadCrrAccessToken.withResourceId(reader.getString());
                } else if ("protectionContainerId".equals(fieldName)) {
                    deserializedWorkloadCrrAccessToken
                        .withProtectionContainerId(reader.getNullable(JsonReader::getLong));
                } else if ("recoveryPointId".equals(fieldName)) {
                    deserializedWorkloadCrrAccessToken.withRecoveryPointId(reader.getString());
                } else if ("recoveryPointTime".equals(fieldName)) {
                    deserializedWorkloadCrrAccessToken.withRecoveryPointTime(reader.getString());
                } else if ("containerName".equals(fieldName)) {
                    deserializedWorkloadCrrAccessToken.withContainerName(reader.getString());
                } else if ("containerType".equals(fieldName)) {
                    deserializedWorkloadCrrAccessToken.withContainerType(reader.getString());
                } else if ("backupManagementType".equals(fieldName)) {
                    deserializedWorkloadCrrAccessToken.withBackupManagementType(reader.getString());
                } else if ("datasourceType".equals(fieldName)) {
                    deserializedWorkloadCrrAccessToken.withDatasourceType(reader.getString());
                } else if ("datasourceName".equals(fieldName)) {
                    deserializedWorkloadCrrAccessToken.withDatasourceName(reader.getString());
                } else if ("datasourceId".equals(fieldName)) {
                    deserializedWorkloadCrrAccessToken.withDatasourceId(reader.getString());
                } else if ("datasourceContainerName".equals(fieldName)) {
                    deserializedWorkloadCrrAccessToken.withDatasourceContainerName(reader.getString());
                } else if ("coordinatorServiceStampId".equals(fieldName)) {
                    deserializedWorkloadCrrAccessToken.withCoordinatorServiceStampId(reader.getString());
                } else if ("coordinatorServiceStampUri".equals(fieldName)) {
                    deserializedWorkloadCrrAccessToken.withCoordinatorServiceStampUri(reader.getString());
                } else if ("protectionServiceStampId".equals(fieldName)) {
                    deserializedWorkloadCrrAccessToken.withProtectionServiceStampId(reader.getString());
                } else if ("protectionServiceStampUri".equals(fieldName)) {
                    deserializedWorkloadCrrAccessToken.withProtectionServiceStampUri(reader.getString());
                } else if ("tokenExtendedInformation".equals(fieldName)) {
                    deserializedWorkloadCrrAccessToken.withTokenExtendedInformation(reader.getString());
                } else if ("rpTierInformation".equals(fieldName)) {
                    Map<String, String> rpTierInformation = reader.readMap(reader1 -> reader1.getString());
                    deserializedWorkloadCrrAccessToken.withRpTierInformation(rpTierInformation);
                } else if ("rpOriginalSAOption".equals(fieldName)) {
                    deserializedWorkloadCrrAccessToken
                        .withRpOriginalSAOption(reader.getNullable(JsonReader::getBoolean));
                } else if ("rpIsManagedVirtualMachine".equals(fieldName)) {
                    deserializedWorkloadCrrAccessToken
                        .withRpIsManagedVirtualMachine(reader.getNullable(JsonReader::getBoolean));
                } else if ("rpVMSizeDescription".equals(fieldName)) {
                    deserializedWorkloadCrrAccessToken.withRpVMSizeDescription(reader.getString());
                } else if ("bMSActiveRegion".equals(fieldName)) {
                    deserializedWorkloadCrrAccessToken.withBMSActiveRegion(reader.getString());
                } else if ("objectType".equals(fieldName)) {
                    deserializedWorkloadCrrAccessToken.objectType = reader.getString();
                } else if ("protectableObjectUniqueName".equals(fieldName)) {
                    deserializedWorkloadCrrAccessToken.protectableObjectUniqueName = reader.getString();
                } else if ("protectableObjectFriendlyName".equals(fieldName)) {
                    deserializedWorkloadCrrAccessToken.protectableObjectFriendlyName = reader.getString();
                } else if ("protectableObjectWorkloadType".equals(fieldName)) {
                    deserializedWorkloadCrrAccessToken.protectableObjectWorkloadType = reader.getString();
                } else if ("protectableObjectProtectionState".equals(fieldName)) {
                    deserializedWorkloadCrrAccessToken.protectableObjectProtectionState = reader.getString();
                } else if ("protectableObjectContainerHostOsName".equals(fieldName)) {
                    deserializedWorkloadCrrAccessToken.protectableObjectContainerHostOsName = reader.getString();
                } else if ("protectableObjectParentLogicalContainerName".equals(fieldName)) {
                    deserializedWorkloadCrrAccessToken.protectableObjectParentLogicalContainerName = reader.getString();
                } else if ("containerId".equals(fieldName)) {
                    deserializedWorkloadCrrAccessToken.containerId = reader.getString();
                } else if ("policyName".equals(fieldName)) {
                    deserializedWorkloadCrrAccessToken.policyName = reader.getString();
                } else if ("policyId".equals(fieldName)) {
                    deserializedWorkloadCrrAccessToken.policyId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedWorkloadCrrAccessToken;
        });
    }
}
