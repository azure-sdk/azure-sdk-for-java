// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesbackup.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Map;

/**
 * Azure VM workload-specific protected item representing Any Database.
 */
@Fluent
public final class AzureVmWorkloadAnyDatabaseProtectedItem extends AzureVmWorkloadProtectedItem {
    /*
     * backup item type.
     */
    private String protectedItemType = "AzureVmWorkloadAnyDatabase";

    /**
     * Creates an instance of AzureVmWorkloadAnyDatabaseProtectedItem class.
     */
    public AzureVmWorkloadAnyDatabaseProtectedItem() {
    }

    /**
     * Get the protectedItemType property: backup item type.
     * 
     * @return the protectedItemType value.
     */
    @Override
    public String protectedItemType() {
        return this.protectedItemType;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureVmWorkloadAnyDatabaseProtectedItem withServerName(String serverName) {
        super.withServerName(serverName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureVmWorkloadAnyDatabaseProtectedItem withParentName(String parentName) {
        super.withParentName(parentName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureVmWorkloadAnyDatabaseProtectedItem withParentType(String parentType) {
        super.withParentType(parentType);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureVmWorkloadAnyDatabaseProtectedItem withProtectionState(ProtectionState protectionState) {
        super.withProtectionState(protectionState);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureVmWorkloadAnyDatabaseProtectedItem withLastBackupStatus(LastBackupStatus lastBackupStatus) {
        super.withLastBackupStatus(lastBackupStatus);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureVmWorkloadAnyDatabaseProtectedItem withLastBackupTime(OffsetDateTime lastBackupTime) {
        super.withLastBackupTime(lastBackupTime);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureVmWorkloadAnyDatabaseProtectedItem withLastBackupErrorDetail(ErrorDetail lastBackupErrorDetail) {
        super.withLastBackupErrorDetail(lastBackupErrorDetail);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureVmWorkloadAnyDatabaseProtectedItem withProtectedItemDataSourceId(String protectedItemDataSourceId) {
        super.withProtectedItemDataSourceId(protectedItemDataSourceId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureVmWorkloadAnyDatabaseProtectedItem
        withProtectedItemHealthStatus(ProtectedItemHealthStatus protectedItemHealthStatus) {
        super.withProtectedItemHealthStatus(protectedItemHealthStatus);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureVmWorkloadAnyDatabaseProtectedItem
        withExtendedInfo(AzureVmWorkloadProtectedItemExtendedInfo extendedInfo) {
        super.withExtendedInfo(extendedInfo);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureVmWorkloadAnyDatabaseProtectedItem withKpisHealths(Map<String, KpiResourceHealthDetails> kpisHealths) {
        super.withKpisHealths(kpisHealths);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureVmWorkloadAnyDatabaseProtectedItem withNodesList(List<DistributedNodesInfo> nodesList) {
        super.withNodesList(nodesList);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureVmWorkloadAnyDatabaseProtectedItem withContainerName(String containerName) {
        super.withContainerName(containerName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureVmWorkloadAnyDatabaseProtectedItem withSourceResourceId(String sourceResourceId) {
        super.withSourceResourceId(sourceResourceId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureVmWorkloadAnyDatabaseProtectedItem withPolicyId(String policyId) {
        super.withPolicyId(policyId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureVmWorkloadAnyDatabaseProtectedItem withLastRecoveryPoint(OffsetDateTime lastRecoveryPoint) {
        super.withLastRecoveryPoint(lastRecoveryPoint);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureVmWorkloadAnyDatabaseProtectedItem withBackupSetName(String backupSetName) {
        super.withBackupSetName(backupSetName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureVmWorkloadAnyDatabaseProtectedItem withCreateMode(CreateMode createMode) {
        super.withCreateMode(createMode);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureVmWorkloadAnyDatabaseProtectedItem withDeferredDeleteTimeInUtc(OffsetDateTime deferredDeleteTimeInUtc) {
        super.withDeferredDeleteTimeInUtc(deferredDeleteTimeInUtc);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureVmWorkloadAnyDatabaseProtectedItem
        withIsScheduledForDeferredDelete(Boolean isScheduledForDeferredDelete) {
        super.withIsScheduledForDeferredDelete(isScheduledForDeferredDelete);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureVmWorkloadAnyDatabaseProtectedItem withDeferredDeleteTimeRemaining(String deferredDeleteTimeRemaining) {
        super.withDeferredDeleteTimeRemaining(deferredDeleteTimeRemaining);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureVmWorkloadAnyDatabaseProtectedItem
        withIsDeferredDeleteScheduleUpcoming(Boolean isDeferredDeleteScheduleUpcoming) {
        super.withIsDeferredDeleteScheduleUpcoming(isDeferredDeleteScheduleUpcoming);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureVmWorkloadAnyDatabaseProtectedItem withIsRehydrate(Boolean isRehydrate) {
        super.withIsRehydrate(isRehydrate);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureVmWorkloadAnyDatabaseProtectedItem
        withResourceGuardOperationRequests(List<String> resourceGuardOperationRequests) {
        super.withResourceGuardOperationRequests(resourceGuardOperationRequests);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureVmWorkloadAnyDatabaseProtectedItem withIsArchiveEnabled(Boolean isArchiveEnabled) {
        super.withIsArchiveEnabled(isArchiveEnabled);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureVmWorkloadAnyDatabaseProtectedItem withPolicyName(String policyName) {
        super.withPolicyName(policyName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureVmWorkloadAnyDatabaseProtectedItem withSoftDeleteRetentionPeriod(Integer softDeleteRetentionPeriod) {
        super.withSoftDeleteRetentionPeriod(softDeleteRetentionPeriod);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (lastBackupErrorDetail() != null) {
            lastBackupErrorDetail().validate();
        }
        if (extendedInfo() != null) {
            extendedInfo().validate();
        }
        if (kpisHealths() != null) {
            kpisHealths().values().forEach(e -> {
                if (e != null) {
                    e.validate();
                }
            });
        }
        if (nodesList() != null) {
            nodesList().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("containerName", containerName());
        jsonWriter.writeStringField("sourceResourceId", sourceResourceId());
        jsonWriter.writeStringField("policyId", policyId());
        jsonWriter.writeStringField("lastRecoveryPoint",
            lastRecoveryPoint() == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(lastRecoveryPoint()));
        jsonWriter.writeStringField("backupSetName", backupSetName());
        jsonWriter.writeStringField("createMode", createMode() == null ? null : createMode().toString());
        jsonWriter.writeStringField("deferredDeleteTimeInUTC",
            deferredDeleteTimeInUtc() == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(deferredDeleteTimeInUtc()));
        jsonWriter.writeBooleanField("isScheduledForDeferredDelete", isScheduledForDeferredDelete());
        jsonWriter.writeStringField("deferredDeleteTimeRemaining", deferredDeleteTimeRemaining());
        jsonWriter.writeBooleanField("isDeferredDeleteScheduleUpcoming", isDeferredDeleteScheduleUpcoming());
        jsonWriter.writeBooleanField("isRehydrate", isRehydrate());
        jsonWriter.writeArrayField("resourceGuardOperationRequests", resourceGuardOperationRequests(),
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeBooleanField("isArchiveEnabled", isArchiveEnabled());
        jsonWriter.writeStringField("policyName", policyName());
        jsonWriter.writeNumberField("softDeleteRetentionPeriodInDays", softDeleteRetentionPeriod());
        jsonWriter.writeStringField("serverName", serverName());
        jsonWriter.writeStringField("parentName", parentName());
        jsonWriter.writeStringField("parentType", parentType());
        jsonWriter.writeStringField("protectionState", protectionState() == null ? null : protectionState().toString());
        jsonWriter.writeStringField("lastBackupStatus",
            lastBackupStatus() == null ? null : lastBackupStatus().toString());
        jsonWriter.writeStringField("lastBackupTime",
            lastBackupTime() == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(lastBackupTime()));
        jsonWriter.writeJsonField("lastBackupErrorDetail", lastBackupErrorDetail());
        jsonWriter.writeStringField("protectedItemDataSourceId", protectedItemDataSourceId());
        jsonWriter.writeStringField("protectedItemHealthStatus",
            protectedItemHealthStatus() == null ? null : protectedItemHealthStatus().toString());
        jsonWriter.writeJsonField("extendedInfo", extendedInfo());
        jsonWriter.writeMapField("kpisHealths", kpisHealths(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("nodesList", nodesList(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("protectedItemType", this.protectedItemType);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AzureVmWorkloadAnyDatabaseProtectedItem from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AzureVmWorkloadAnyDatabaseProtectedItem if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AzureVmWorkloadAnyDatabaseProtectedItem.
     */
    public static AzureVmWorkloadAnyDatabaseProtectedItem fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AzureVmWorkloadAnyDatabaseProtectedItem deserializedAzureVmWorkloadAnyDatabaseProtectedItem
                = new AzureVmWorkloadAnyDatabaseProtectedItem();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("backupManagementType".equals(fieldName)) {
                    deserializedAzureVmWorkloadAnyDatabaseProtectedItem
                        .withBackupManagementType(BackupManagementType.fromString(reader.getString()));
                } else if ("workloadType".equals(fieldName)) {
                    deserializedAzureVmWorkloadAnyDatabaseProtectedItem
                        .withWorkloadType(DataSourceTypeAutoGenerated3.fromString(reader.getString()));
                } else if ("containerName".equals(fieldName)) {
                    deserializedAzureVmWorkloadAnyDatabaseProtectedItem.withContainerName(reader.getString());
                } else if ("sourceResourceId".equals(fieldName)) {
                    deserializedAzureVmWorkloadAnyDatabaseProtectedItem.withSourceResourceId(reader.getString());
                } else if ("policyId".equals(fieldName)) {
                    deserializedAzureVmWorkloadAnyDatabaseProtectedItem.withPolicyId(reader.getString());
                } else if ("lastRecoveryPoint".equals(fieldName)) {
                    deserializedAzureVmWorkloadAnyDatabaseProtectedItem.withLastRecoveryPoint(reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString())));
                } else if ("backupSetName".equals(fieldName)) {
                    deserializedAzureVmWorkloadAnyDatabaseProtectedItem.withBackupSetName(reader.getString());
                } else if ("createMode".equals(fieldName)) {
                    deserializedAzureVmWorkloadAnyDatabaseProtectedItem
                        .withCreateMode(CreateMode.fromString(reader.getString()));
                } else if ("deferredDeleteTimeInUTC".equals(fieldName)) {
                    deserializedAzureVmWorkloadAnyDatabaseProtectedItem.withDeferredDeleteTimeInUtc(reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString())));
                } else if ("isScheduledForDeferredDelete".equals(fieldName)) {
                    deserializedAzureVmWorkloadAnyDatabaseProtectedItem
                        .withIsScheduledForDeferredDelete(reader.getNullable(JsonReader::getBoolean));
                } else if ("deferredDeleteTimeRemaining".equals(fieldName)) {
                    deserializedAzureVmWorkloadAnyDatabaseProtectedItem
                        .withDeferredDeleteTimeRemaining(reader.getString());
                } else if ("isDeferredDeleteScheduleUpcoming".equals(fieldName)) {
                    deserializedAzureVmWorkloadAnyDatabaseProtectedItem
                        .withIsDeferredDeleteScheduleUpcoming(reader.getNullable(JsonReader::getBoolean));
                } else if ("isRehydrate".equals(fieldName)) {
                    deserializedAzureVmWorkloadAnyDatabaseProtectedItem
                        .withIsRehydrate(reader.getNullable(JsonReader::getBoolean));
                } else if ("resourceGuardOperationRequests".equals(fieldName)) {
                    List<String> resourceGuardOperationRequests = reader.readArray(reader1 -> reader1.getString());
                    deserializedAzureVmWorkloadAnyDatabaseProtectedItem
                        .withResourceGuardOperationRequests(resourceGuardOperationRequests);
                } else if ("isArchiveEnabled".equals(fieldName)) {
                    deserializedAzureVmWorkloadAnyDatabaseProtectedItem
                        .withIsArchiveEnabled(reader.getNullable(JsonReader::getBoolean));
                } else if ("policyName".equals(fieldName)) {
                    deserializedAzureVmWorkloadAnyDatabaseProtectedItem.withPolicyName(reader.getString());
                } else if ("softDeleteRetentionPeriodInDays".equals(fieldName)) {
                    deserializedAzureVmWorkloadAnyDatabaseProtectedItem
                        .withSoftDeleteRetentionPeriod(reader.getNullable(JsonReader::getInt));
                } else if ("vaultId".equals(fieldName)) {
                    deserializedAzureVmWorkloadAnyDatabaseProtectedItem.withVaultId(reader.getString());
                } else if ("friendlyName".equals(fieldName)) {
                    deserializedAzureVmWorkloadAnyDatabaseProtectedItem.withFriendlyName(reader.getString());
                } else if ("serverName".equals(fieldName)) {
                    deserializedAzureVmWorkloadAnyDatabaseProtectedItem.withServerName(reader.getString());
                } else if ("parentName".equals(fieldName)) {
                    deserializedAzureVmWorkloadAnyDatabaseProtectedItem.withParentName(reader.getString());
                } else if ("parentType".equals(fieldName)) {
                    deserializedAzureVmWorkloadAnyDatabaseProtectedItem.withParentType(reader.getString());
                } else if ("protectionStatus".equals(fieldName)) {
                    deserializedAzureVmWorkloadAnyDatabaseProtectedItem.withProtectionStatus(reader.getString());
                } else if ("protectionState".equals(fieldName)) {
                    deserializedAzureVmWorkloadAnyDatabaseProtectedItem
                        .withProtectionState(ProtectionState.fromString(reader.getString()));
                } else if ("lastBackupStatus".equals(fieldName)) {
                    deserializedAzureVmWorkloadAnyDatabaseProtectedItem
                        .withLastBackupStatus(LastBackupStatus.fromString(reader.getString()));
                } else if ("lastBackupTime".equals(fieldName)) {
                    deserializedAzureVmWorkloadAnyDatabaseProtectedItem.withLastBackupTime(reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString())));
                } else if ("lastBackupErrorDetail".equals(fieldName)) {
                    deserializedAzureVmWorkloadAnyDatabaseProtectedItem
                        .withLastBackupErrorDetail(ErrorDetail.fromJson(reader));
                } else if ("protectedItemDataSourceId".equals(fieldName)) {
                    deserializedAzureVmWorkloadAnyDatabaseProtectedItem
                        .withProtectedItemDataSourceId(reader.getString());
                } else if ("protectedItemHealthStatus".equals(fieldName)) {
                    deserializedAzureVmWorkloadAnyDatabaseProtectedItem
                        .withProtectedItemHealthStatus(ProtectedItemHealthStatus.fromString(reader.getString()));
                } else if ("extendedInfo".equals(fieldName)) {
                    deserializedAzureVmWorkloadAnyDatabaseProtectedItem
                        .withExtendedInfo(AzureVmWorkloadProtectedItemExtendedInfo.fromJson(reader));
                } else if ("kpisHealths".equals(fieldName)) {
                    Map<String, KpiResourceHealthDetails> kpisHealths
                        = reader.readMap(reader1 -> KpiResourceHealthDetails.fromJson(reader1));
                    deserializedAzureVmWorkloadAnyDatabaseProtectedItem.withKpisHealths(kpisHealths);
                } else if ("nodesList".equals(fieldName)) {
                    List<DistributedNodesInfo> nodesList
                        = reader.readArray(reader1 -> DistributedNodesInfo.fromJson(reader1));
                    deserializedAzureVmWorkloadAnyDatabaseProtectedItem.withNodesList(nodesList);
                } else if ("protectedItemType".equals(fieldName)) {
                    deserializedAzureVmWorkloadAnyDatabaseProtectedItem.protectedItemType = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAzureVmWorkloadAnyDatabaseProtectedItem;
        });
    }
}
