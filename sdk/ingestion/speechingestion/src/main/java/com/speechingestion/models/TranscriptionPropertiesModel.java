// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.speechingestion.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * Batch Transcription Properties model.
 */
@Fluent
public final class TranscriptionPropertiesModel {
    /*
     * Specifies if word level timestamps should be included in the output. The default value is false.
     */
    @Generated
    @JsonProperty(value = "wordLevelTimestampsEnabled")
    private Boolean wordLevelTimestampsEnabled;

    /*
     * Specifies whether to include word-level timestamps on the display form of the transcription results. The results
     * are returned in the displayWords property of the transcription file. The default value is false.
     */
    @Generated
    @JsonProperty(value = "displayFormWordLevelTimestampsEnabled")
    private Boolean displayFormWordLevelTimestampsEnabled;

    /*
     * An array of channel numbers to process. Channels 0 and 1 are transcribed by default.
     */
    @Generated
    @JsonProperty(value = "channels")
    private List<Integer> channels;

    /*
     * Specifies how to handle punctuation in recognition results. Accepted values are None to disable punctuation,
     * Dictated to imply explicit (spoken) punctuation, Automatic to let the decoder deal with punctuation, or
     * DictatedAndAutomatic to use dictated and automatic punctuation. The default value is DictatedAndAutomatic.
     */
    @Generated
    @JsonProperty(value = "punctuationMode")
    private String punctuationMode;

    /*
     * Specifies how to handle profanity in recognition results. Accepted values are None to disable profanity
     * filtering, Masked to replace profanity with asterisks, Removed to remove all profanity from the result, or Tags
     * to add profanity tags. The default value is Masked.
     */
    @Generated
    @JsonProperty(value = "profanityFilterMode")
    private String profanityFilterMode;

    /*
     * Specifies that the Speech service should attempt diarization analysis on the input, which is expected to be a
     * mono channel that contains two voices. The default value is false.
     */
    @Generated
    @JsonProperty(value = "diarizationEnabled")
    private Boolean diarizationEnabled;

    /*
     * Indicates that the Speech service should attempt diarization analysis on the input, which is expected to be a
     * mono channel that contains multiple voices. The feature isn't available with stereo recordings.
     */
    @Generated
    @JsonProperty(value = "diarization")
    private DiarizationPropertiesModel diarization;

    /*
     * Language identification is used to identify languages spoken in audio when compared against a list of supported
     * languages.
     * https://learn.microsoft.com/azure/ai-services/speech-service/language-support?tabs=language-identification
     */
    @Generated
    @JsonProperty(value = "languageIdentification")
    private LanguageIdentificationPropertiesModel languageIdentification;

    /**
     * Creates an instance of TranscriptionPropertiesModel class.
     */
    @Generated
    public TranscriptionPropertiesModel() {
    }

    /**
     * Get the wordLevelTimestampsEnabled property: Specifies if word level timestamps should be included in the
     * output. The default value is false.
     * 
     * @return the wordLevelTimestampsEnabled value.
     */
    @Generated
    public Boolean isWordLevelTimestampsEnabled() {
        return this.wordLevelTimestampsEnabled;
    }

    /**
     * Set the wordLevelTimestampsEnabled property: Specifies if word level timestamps should be included in the
     * output. The default value is false.
     * 
     * @param wordLevelTimestampsEnabled the wordLevelTimestampsEnabled value to set.
     * @return the TranscriptionPropertiesModel object itself.
     */
    @Generated
    public TranscriptionPropertiesModel setWordLevelTimestampsEnabled(Boolean wordLevelTimestampsEnabled) {
        this.wordLevelTimestampsEnabled = wordLevelTimestampsEnabled;
        return this;
    }

    /**
     * Get the displayFormWordLevelTimestampsEnabled property: Specifies whether to include word-level timestamps on
     * the display form of the transcription results. The results are returned in the displayWords property of the
     * transcription file. The default value is false.
     * 
     * @return the displayFormWordLevelTimestampsEnabled value.
     */
    @Generated
    public Boolean isDisplayFormWordLevelTimestampsEnabled() {
        return this.displayFormWordLevelTimestampsEnabled;
    }

    /**
     * Set the displayFormWordLevelTimestampsEnabled property: Specifies whether to include word-level timestamps on
     * the display form of the transcription results. The results are returned in the displayWords property of the
     * transcription file. The default value is false.
     * 
     * @param displayFormWordLevelTimestampsEnabled the displayFormWordLevelTimestampsEnabled value to set.
     * @return the TranscriptionPropertiesModel object itself.
     */
    @Generated
    public TranscriptionPropertiesModel
        setDisplayFormWordLevelTimestampsEnabled(Boolean displayFormWordLevelTimestampsEnabled) {
        this.displayFormWordLevelTimestampsEnabled = displayFormWordLevelTimestampsEnabled;
        return this;
    }

    /**
     * Get the channels property: An array of channel numbers to process. Channels 0 and 1 are transcribed by default.
     * 
     * @return the channels value.
     */
    @Generated
    public List<Integer> getChannels() {
        return this.channels;
    }

    /**
     * Set the channels property: An array of channel numbers to process. Channels 0 and 1 are transcribed by default.
     * 
     * @param channels the channels value to set.
     * @return the TranscriptionPropertiesModel object itself.
     */
    @Generated
    public TranscriptionPropertiesModel setChannels(List<Integer> channels) {
        this.channels = channels;
        return this;
    }

    /**
     * Get the punctuationMode property: Specifies how to handle punctuation in recognition results. Accepted values
     * are None to disable punctuation, Dictated to imply explicit (spoken) punctuation, Automatic to let the decoder
     * deal with punctuation, or DictatedAndAutomatic to use dictated and automatic punctuation. The default value is
     * DictatedAndAutomatic.
     * 
     * @return the punctuationMode value.
     */
    @Generated
    public String getPunctuationMode() {
        return this.punctuationMode;
    }

    /**
     * Set the punctuationMode property: Specifies how to handle punctuation in recognition results. Accepted values
     * are None to disable punctuation, Dictated to imply explicit (spoken) punctuation, Automatic to let the decoder
     * deal with punctuation, or DictatedAndAutomatic to use dictated and automatic punctuation. The default value is
     * DictatedAndAutomatic.
     * 
     * @param punctuationMode the punctuationMode value to set.
     * @return the TranscriptionPropertiesModel object itself.
     */
    @Generated
    public TranscriptionPropertiesModel setPunctuationMode(String punctuationMode) {
        this.punctuationMode = punctuationMode;
        return this;
    }

    /**
     * Get the profanityFilterMode property: Specifies how to handle profanity in recognition results. Accepted values
     * are None to disable profanity filtering, Masked to replace profanity with asterisks, Removed to remove all
     * profanity from the result, or Tags to add profanity tags. The default value is Masked.
     * 
     * @return the profanityFilterMode value.
     */
    @Generated
    public String getProfanityFilterMode() {
        return this.profanityFilterMode;
    }

    /**
     * Set the profanityFilterMode property: Specifies how to handle profanity in recognition results. Accepted values
     * are None to disable profanity filtering, Masked to replace profanity with asterisks, Removed to remove all
     * profanity from the result, or Tags to add profanity tags. The default value is Masked.
     * 
     * @param profanityFilterMode the profanityFilterMode value to set.
     * @return the TranscriptionPropertiesModel object itself.
     */
    @Generated
    public TranscriptionPropertiesModel setProfanityFilterMode(String profanityFilterMode) {
        this.profanityFilterMode = profanityFilterMode;
        return this;
    }

    /**
     * Get the diarizationEnabled property: Specifies that the Speech service should attempt diarization analysis on
     * the input, which is expected to be a mono channel that contains two voices. The default value is false.
     * 
     * @return the diarizationEnabled value.
     */
    @Generated
    public Boolean isDiarizationEnabled() {
        return this.diarizationEnabled;
    }

    /**
     * Set the diarizationEnabled property: Specifies that the Speech service should attempt diarization analysis on
     * the input, which is expected to be a mono channel that contains two voices. The default value is false.
     * 
     * @param diarizationEnabled the diarizationEnabled value to set.
     * @return the TranscriptionPropertiesModel object itself.
     */
    @Generated
    public TranscriptionPropertiesModel setDiarizationEnabled(Boolean diarizationEnabled) {
        this.diarizationEnabled = diarizationEnabled;
        return this;
    }

    /**
     * Get the diarization property: Indicates that the Speech service should attempt diarization analysis on the
     * input, which is expected to be a mono channel that contains multiple voices. The feature isn't available with
     * stereo recordings.
     * 
     * @return the diarization value.
     */
    @Generated
    public DiarizationPropertiesModel getDiarization() {
        return this.diarization;
    }

    /**
     * Set the diarization property: Indicates that the Speech service should attempt diarization analysis on the
     * input, which is expected to be a mono channel that contains multiple voices. The feature isn't available with
     * stereo recordings.
     * 
     * @param diarization the diarization value to set.
     * @return the TranscriptionPropertiesModel object itself.
     */
    @Generated
    public TranscriptionPropertiesModel setDiarization(DiarizationPropertiesModel diarization) {
        this.diarization = diarization;
        return this;
    }

    /**
     * Get the languageIdentification property: Language identification is used to identify languages spoken in audio
     * when compared against a list of supported languages.
     * https://learn.microsoft.com/azure/ai-services/speech-service/language-support?tabs=language-identification.
     * 
     * @return the languageIdentification value.
     */
    @Generated
    public LanguageIdentificationPropertiesModel getLanguageIdentification() {
        return this.languageIdentification;
    }

    /**
     * Set the languageIdentification property: Language identification is used to identify languages spoken in audio
     * when compared against a list of supported languages.
     * https://learn.microsoft.com/azure/ai-services/speech-service/language-support?tabs=language-identification.
     * 
     * @param languageIdentification the languageIdentification value to set.
     * @return the TranscriptionPropertiesModel object itself.
     */
    @Generated
    public TranscriptionPropertiesModel
        setLanguageIdentification(LanguageIdentificationPropertiesModel languageIdentification) {
        this.languageIdentification = languageIdentification;
        return this;
    }
}
