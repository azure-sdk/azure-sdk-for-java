// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.speechingestion;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.FluxUtil;
import com.speechingestion.implementation.RegistrationsImpl;
import com.speechingestion.models.Registration;
import java.util.stream.Collectors;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the asynchronous IngestionClient type.
 */
@ServiceClient(builder = IngestionClientBuilder.class, isAsync = true)
public final class IngestionAsyncClient {
    @Generated
    private final RegistrationsImpl serviceClient;

    /**
     * Initializes an instance of IngestionAsyncClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    IngestionAsyncClient(RegistrationsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Fetch a Registration by name.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     name: String (Required)
     *     storageModel (Required): {
     *         blobStorageEndpoint: String (Required)
     *         inputContainerName: String (Required)
     *         outputContainerName: String (Required)
     *         processedContainerName: String (Required)
     *         errorOutputContainerName: String (Required)
     *     }
     *     processingModel (Required): {
     *         deliveryMode: String (Required)
     *         subjectEndsWith: String (Optional)
     *         systemTopicResourceId: String (Optional)
     *     }
     *     batchTranscriptionModel (Required): {
     *         locale: String (Optional)
     *         modelX (Optional): {
     *             self: String (Required)
     *         }
     *         customDomain: String (Required)
     *         transcriptionProperties (Optional): {
     *             wordLevelTimestampsEnabled: Boolean (Optional)
     *             displayFormWordLevelTimestampsEnabled: Boolean (Optional)
     *             channels (Optional): [
     *                 int (Optional)
     *             ]
     *             punctuationMode: String (Optional)
     *             profanityFilterMode: String (Optional)
     *             diarizationEnabled: Boolean (Optional)
     *             diarization (Optional): {
     *                 speakers (Required): {
     *                     minCount: Integer (Optional)
     *                     maxCount: Integer (Optional)
     *                 }
     *             }
     *             languageIdentification (Optional): {
     *                 mode: String (Required)
     *                 candidateLocales (Required): [
     *                     String (Required)
     *                 ]
     *                 speechModelMapping (Optional): {
     *                     String (Required): (recursive schema, see String above)
     *                 }
     *             }
     *         }
     *     }
     *     analyticsModel (Optional): {
     *         endpoint: String (Required)
     *     }
     *     statusModel (Required): {
     *         code: String (Required)
     *         message: String (Optional)
     *     }
     * }
     * }</pre>
     * 
     * @param name The unique name of the registration resource.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a registration along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getRegistrationWithResponse(String name, RequestOptions requestOptions) {
        return this.serviceClient.getRegistrationWithResponseAsync(name, requestOptions);
    }

    /**
     * Creates or replaces a Registration.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     name: String (Required)
     *     storageModel (Required): {
     *         blobStorageEndpoint: String (Required)
     *         inputContainerName: String (Required)
     *         outputContainerName: String (Required)
     *         processedContainerName: String (Required)
     *         errorOutputContainerName: String (Required)
     *     }
     *     processingModel (Required): {
     *         deliveryMode: String (Required)
     *         subjectEndsWith: String (Optional)
     *         systemTopicResourceId: String (Optional)
     *     }
     *     batchTranscriptionModel (Required): {
     *         locale: String (Optional)
     *         modelX (Optional): {
     *             self: String (Required)
     *         }
     *         customDomain: String (Required)
     *         transcriptionProperties (Optional): {
     *             wordLevelTimestampsEnabled: Boolean (Optional)
     *             displayFormWordLevelTimestampsEnabled: Boolean (Optional)
     *             channels (Optional): [
     *                 int (Optional)
     *             ]
     *             punctuationMode: String (Optional)
     *             profanityFilterMode: String (Optional)
     *             diarizationEnabled: Boolean (Optional)
     *             diarization (Optional): {
     *                 speakers (Required): {
     *                     minCount: Integer (Optional)
     *                     maxCount: Integer (Optional)
     *                 }
     *             }
     *             languageIdentification (Optional): {
     *                 mode: String (Required)
     *                 candidateLocales (Required): [
     *                     String (Required)
     *                 ]
     *                 speechModelMapping (Optional): {
     *                     String (Required): (recursive schema, see String above)
     *                 }
     *             }
     *         }
     *     }
     *     analyticsModel (Optional): {
     *         endpoint: String (Required)
     *     }
     *     statusModel (Required): {
     *         code: String (Required)
     *         message: String (Optional)
     *     }
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     name: String (Required)
     *     storageModel (Required): {
     *         blobStorageEndpoint: String (Required)
     *         inputContainerName: String (Required)
     *         outputContainerName: String (Required)
     *         processedContainerName: String (Required)
     *         errorOutputContainerName: String (Required)
     *     }
     *     processingModel (Required): {
     *         deliveryMode: String (Required)
     *         subjectEndsWith: String (Optional)
     *         systemTopicResourceId: String (Optional)
     *     }
     *     batchTranscriptionModel (Required): {
     *         locale: String (Optional)
     *         modelX (Optional): {
     *             self: String (Required)
     *         }
     *         customDomain: String (Required)
     *         transcriptionProperties (Optional): {
     *             wordLevelTimestampsEnabled: Boolean (Optional)
     *             displayFormWordLevelTimestampsEnabled: Boolean (Optional)
     *             channels (Optional): [
     *                 int (Optional)
     *             ]
     *             punctuationMode: String (Optional)
     *             profanityFilterMode: String (Optional)
     *             diarizationEnabled: Boolean (Optional)
     *             diarization (Optional): {
     *                 speakers (Required): {
     *                     minCount: Integer (Optional)
     *                     maxCount: Integer (Optional)
     *                 }
     *             }
     *             languageIdentification (Optional): {
     *                 mode: String (Required)
     *                 candidateLocales (Required): [
     *                     String (Required)
     *                 ]
     *                 speechModelMapping (Optional): {
     *                     String (Required): (recursive schema, see String above)
     *                 }
     *             }
     *         }
     *     }
     *     analyticsModel (Optional): {
     *         endpoint: String (Required)
     *     }
     *     statusModel (Required): {
     *         code: String (Required)
     *         message: String (Optional)
     *     }
     * }
     * }</pre>
     * 
     * @param name The unique name of the registration resource.
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a registration along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createOrReplaceRegistrationWithResponse(String name, BinaryData resource,
        RequestOptions requestOptions) {
        return this.serviceClient.createOrReplaceRegistrationWithResponseAsync(name, resource, requestOptions);
    }

    /**
     * Delete a Registration.
     * 
     * @param name The unique name of the registration resource.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteRegistrationWithResponse(String name, RequestOptions requestOptions) {
        return this.serviceClient.deleteRegistrationWithResponseAsync(name, requestOptions);
    }

    /**
     * List Registration resources.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     name: String (Required)
     *     storageModel (Required): {
     *         blobStorageEndpoint: String (Required)
     *         inputContainerName: String (Required)
     *         outputContainerName: String (Required)
     *         processedContainerName: String (Required)
     *         errorOutputContainerName: String (Required)
     *     }
     *     processingModel (Required): {
     *         deliveryMode: String (Required)
     *         subjectEndsWith: String (Optional)
     *         systemTopicResourceId: String (Optional)
     *     }
     *     batchTranscriptionModel (Required): {
     *         locale: String (Optional)
     *         modelX (Optional): {
     *             self: String (Required)
     *         }
     *         customDomain: String (Required)
     *         transcriptionProperties (Optional): {
     *             wordLevelTimestampsEnabled: Boolean (Optional)
     *             displayFormWordLevelTimestampsEnabled: Boolean (Optional)
     *             channels (Optional): [
     *                 int (Optional)
     *             ]
     *             punctuationMode: String (Optional)
     *             profanityFilterMode: String (Optional)
     *             diarizationEnabled: Boolean (Optional)
     *             diarization (Optional): {
     *                 speakers (Required): {
     *                     minCount: Integer (Optional)
     *                     maxCount: Integer (Optional)
     *                 }
     *             }
     *             languageIdentification (Optional): {
     *                 mode: String (Required)
     *                 candidateLocales (Required): [
     *                     String (Required)
     *                 ]
     *                 speechModelMapping (Optional): {
     *                     String (Required): (recursive schema, see String above)
     *                 }
     *             }
     *         }
     *     }
     *     analyticsModel (Optional): {
     *         endpoint: String (Required)
     *     }
     *     statusModel (Required): {
     *         code: String (Required)
     *         message: String (Optional)
     *     }
     * }
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of Registration items as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listRegistrations(RequestOptions requestOptions) {
        return this.serviceClient.listRegistrationsAsync(requestOptions);
    }

    /**
     * Fetch a Registration by name.
     * 
     * @param name The unique name of the registration resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a registration on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Registration> getRegistration(String name) {
        // Generated convenience method for getRegistrationWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getRegistrationWithResponse(name, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(Registration.class));
    }

    /**
     * Creates or replaces a Registration.
     * 
     * @param name The unique name of the registration resource.
     * @param resource The resource instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a registration on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Registration> createOrReplaceRegistration(String name, Registration resource) {
        // Generated convenience method for createOrReplaceRegistrationWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createOrReplaceRegistrationWithResponse(name, BinaryData.fromObject(resource), requestOptions)
            .flatMap(FluxUtil::toMono).map(protocolMethodData -> protocolMethodData.toObject(Registration.class));
    }

    /**
     * Delete a Registration.
     * 
     * @param name The unique name of the registration resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteRegistration(String name) {
        // Generated convenience method for deleteRegistrationWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return deleteRegistrationWithResponse(name, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * List Registration resources.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of Registration items as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<Registration> listRegistrations() {
        // Generated convenience method for listRegistrations
        RequestOptions requestOptions = new RequestOptions();
        PagedFlux<BinaryData> pagedFluxResponse = listRegistrations(requestOptions);
        return PagedFlux.create(() -> (continuationToken, pageSize) -> {
            Flux<PagedResponse<BinaryData>> flux = (continuationToken == null) ? pagedFluxResponse.byPage().take(1)
                : pagedFluxResponse.byPage(continuationToken).take(1);
            return flux.map(pagedResponse -> new PagedResponseBase<Void, Registration>(pagedResponse.getRequest(),
                pagedResponse.getStatusCode(), pagedResponse.getHeaders(),
                pagedResponse.getValue().stream()
                    .map(protocolMethodData -> protocolMethodData.toObject(Registration.class))
                    .collect(Collectors.toList()),
                pagedResponse.getContinuationToken(), null));
        });
    }
}
