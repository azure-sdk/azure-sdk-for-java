// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.speechingestion.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.speechingestion.IngestionServiceVersion;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in Registrations.
 */
public final class RegistrationsImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final RegistrationsService service;

    /**
     * The service client containing this operation class.
     */
    private final IngestionClientImpl client;

    /**
     * Initializes an instance of RegistrationsImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    RegistrationsImpl(IngestionClientImpl client) {
        this.service
            = RestProxy.create(RegistrationsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * Gets Service version.
     * 
     * @return the serviceVersion value.
     */
    public IngestionServiceVersion getServiceVersion() {
        return client.getServiceVersion();
    }

    /**
     * The interface defining all the services for IngestionClientRegistrations to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "IngestionClientRegis")
    public interface RegistrationsService {
        @Get("/registrations/{name}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getRegistration(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("name") String name,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/registrations/{name}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getRegistrationSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("name") String name,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Put("/registrations/{name}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> createOrReplaceRegistration(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("name") String name,
            @HeaderParam("accept") String accept, @BodyParam("application/json") BinaryData resource,
            RequestOptions requestOptions, Context context);

        @Put("/registrations/{name}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> createOrReplaceRegistrationSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("name") String name,
            @HeaderParam("accept") String accept, @BodyParam("application/json") BinaryData resource,
            RequestOptions requestOptions, Context context);

        @Delete("/registrations/{name}")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> deleteRegistration(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("name") String name,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Delete("/registrations/{name}")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> deleteRegistrationSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("name") String name,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/registrations")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listRegistrations(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/registrations")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listRegistrationsSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listRegistrationsNext(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("endpoint") String endpoint, @HeaderParam("accept") String accept, RequestOptions requestOptions,
            Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listRegistrationsNextSync(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("endpoint") String endpoint, @HeaderParam("accept") String accept, RequestOptions requestOptions,
            Context context);
    }

    /**
     * Fetch a Registration by name.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     name: String (Required)
     *     storageModel (Required): {
     *         blobStorageEndpoint: String (Required)
     *         inputContainerName: String (Required)
     *         outputContainerName: String (Required)
     *         processedContainerName: String (Required)
     *         errorOutputContainerName: String (Required)
     *     }
     *     processingModel (Required): {
     *         deliveryMode: String (Required)
     *         subjectEndsWith: String (Optional)
     *         systemTopicResourceId: String (Optional)
     *     }
     *     batchTranscriptionModel (Required): {
     *         locale: String (Optional)
     *         modelX (Optional): {
     *             self: String (Required)
     *         }
     *         customDomain: String (Required)
     *         transcriptionProperties (Optional): {
     *             wordLevelTimestampsEnabled: Boolean (Optional)
     *             displayFormWordLevelTimestampsEnabled: Boolean (Optional)
     *             channels (Optional): [
     *                 int (Optional)
     *             ]
     *             punctuationMode: String (Optional)
     *             profanityFilterMode: String (Optional)
     *             diarizationEnabled: Boolean (Optional)
     *             diarization (Optional): {
     *                 speakers (Required): {
     *                     minCount: Integer (Optional)
     *                     maxCount: Integer (Optional)
     *                 }
     *             }
     *             languageIdentification (Optional): {
     *                 mode: String (Required)
     *                 candidateLocales (Required): [
     *                     String (Required)
     *                 ]
     *                 speechModelMapping (Optional): {
     *                     String (Required): (recursive schema, see String above)
     *                 }
     *             }
     *         }
     *     }
     *     analyticsModel (Optional): {
     *         endpoint: String (Required)
     *     }
     *     statusModel (Required): {
     *         code: String (Required)
     *         message: String (Optional)
     *     }
     * }
     * }</pre>
     * 
     * @param name The unique name of the registration resource.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a registration along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getRegistrationWithResponseAsync(String name, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getRegistration(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), name, accept, requestOptions, context));
    }

    /**
     * Fetch a Registration by name.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     name: String (Required)
     *     storageModel (Required): {
     *         blobStorageEndpoint: String (Required)
     *         inputContainerName: String (Required)
     *         outputContainerName: String (Required)
     *         processedContainerName: String (Required)
     *         errorOutputContainerName: String (Required)
     *     }
     *     processingModel (Required): {
     *         deliveryMode: String (Required)
     *         subjectEndsWith: String (Optional)
     *         systemTopicResourceId: String (Optional)
     *     }
     *     batchTranscriptionModel (Required): {
     *         locale: String (Optional)
     *         modelX (Optional): {
     *             self: String (Required)
     *         }
     *         customDomain: String (Required)
     *         transcriptionProperties (Optional): {
     *             wordLevelTimestampsEnabled: Boolean (Optional)
     *             displayFormWordLevelTimestampsEnabled: Boolean (Optional)
     *             channels (Optional): [
     *                 int (Optional)
     *             ]
     *             punctuationMode: String (Optional)
     *             profanityFilterMode: String (Optional)
     *             diarizationEnabled: Boolean (Optional)
     *             diarization (Optional): {
     *                 speakers (Required): {
     *                     minCount: Integer (Optional)
     *                     maxCount: Integer (Optional)
     *                 }
     *             }
     *             languageIdentification (Optional): {
     *                 mode: String (Required)
     *                 candidateLocales (Required): [
     *                     String (Required)
     *                 ]
     *                 speechModelMapping (Optional): {
     *                     String (Required): (recursive schema, see String above)
     *                 }
     *             }
     *         }
     *     }
     *     analyticsModel (Optional): {
     *         endpoint: String (Required)
     *     }
     *     statusModel (Required): {
     *         code: String (Required)
     *         message: String (Optional)
     *     }
     * }
     * }</pre>
     * 
     * @param name The unique name of the registration resource.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a registration along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getRegistrationWithResponse(String name, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getRegistrationSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            name, accept, requestOptions, Context.NONE);
    }

    /**
     * Creates or replaces a Registration.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     name: String (Required)
     *     storageModel (Required): {
     *         blobStorageEndpoint: String (Required)
     *         inputContainerName: String (Required)
     *         outputContainerName: String (Required)
     *         processedContainerName: String (Required)
     *         errorOutputContainerName: String (Required)
     *     }
     *     processingModel (Required): {
     *         deliveryMode: String (Required)
     *         subjectEndsWith: String (Optional)
     *         systemTopicResourceId: String (Optional)
     *     }
     *     batchTranscriptionModel (Required): {
     *         locale: String (Optional)
     *         modelX (Optional): {
     *             self: String (Required)
     *         }
     *         customDomain: String (Required)
     *         transcriptionProperties (Optional): {
     *             wordLevelTimestampsEnabled: Boolean (Optional)
     *             displayFormWordLevelTimestampsEnabled: Boolean (Optional)
     *             channels (Optional): [
     *                 int (Optional)
     *             ]
     *             punctuationMode: String (Optional)
     *             profanityFilterMode: String (Optional)
     *             diarizationEnabled: Boolean (Optional)
     *             diarization (Optional): {
     *                 speakers (Required): {
     *                     minCount: Integer (Optional)
     *                     maxCount: Integer (Optional)
     *                 }
     *             }
     *             languageIdentification (Optional): {
     *                 mode: String (Required)
     *                 candidateLocales (Required): [
     *                     String (Required)
     *                 ]
     *                 speechModelMapping (Optional): {
     *                     String (Required): (recursive schema, see String above)
     *                 }
     *             }
     *         }
     *     }
     *     analyticsModel (Optional): {
     *         endpoint: String (Required)
     *     }
     *     statusModel (Required): {
     *         code: String (Required)
     *         message: String (Optional)
     *     }
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     name: String (Required)
     *     storageModel (Required): {
     *         blobStorageEndpoint: String (Required)
     *         inputContainerName: String (Required)
     *         outputContainerName: String (Required)
     *         processedContainerName: String (Required)
     *         errorOutputContainerName: String (Required)
     *     }
     *     processingModel (Required): {
     *         deliveryMode: String (Required)
     *         subjectEndsWith: String (Optional)
     *         systemTopicResourceId: String (Optional)
     *     }
     *     batchTranscriptionModel (Required): {
     *         locale: String (Optional)
     *         modelX (Optional): {
     *             self: String (Required)
     *         }
     *         customDomain: String (Required)
     *         transcriptionProperties (Optional): {
     *             wordLevelTimestampsEnabled: Boolean (Optional)
     *             displayFormWordLevelTimestampsEnabled: Boolean (Optional)
     *             channels (Optional): [
     *                 int (Optional)
     *             ]
     *             punctuationMode: String (Optional)
     *             profanityFilterMode: String (Optional)
     *             diarizationEnabled: Boolean (Optional)
     *             diarization (Optional): {
     *                 speakers (Required): {
     *                     minCount: Integer (Optional)
     *                     maxCount: Integer (Optional)
     *                 }
     *             }
     *             languageIdentification (Optional): {
     *                 mode: String (Required)
     *                 candidateLocales (Required): [
     *                     String (Required)
     *                 ]
     *                 speechModelMapping (Optional): {
     *                     String (Required): (recursive schema, see String above)
     *                 }
     *             }
     *         }
     *     }
     *     analyticsModel (Optional): {
     *         endpoint: String (Required)
     *     }
     *     statusModel (Required): {
     *         code: String (Required)
     *         message: String (Optional)
     *     }
     * }
     * }</pre>
     * 
     * @param name The unique name of the registration resource.
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a registration along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createOrReplaceRegistrationWithResponseAsync(String name, BinaryData resource,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.createOrReplaceRegistration(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), name, accept, resource, requestOptions, context));
    }

    /**
     * Creates or replaces a Registration.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     name: String (Required)
     *     storageModel (Required): {
     *         blobStorageEndpoint: String (Required)
     *         inputContainerName: String (Required)
     *         outputContainerName: String (Required)
     *         processedContainerName: String (Required)
     *         errorOutputContainerName: String (Required)
     *     }
     *     processingModel (Required): {
     *         deliveryMode: String (Required)
     *         subjectEndsWith: String (Optional)
     *         systemTopicResourceId: String (Optional)
     *     }
     *     batchTranscriptionModel (Required): {
     *         locale: String (Optional)
     *         modelX (Optional): {
     *             self: String (Required)
     *         }
     *         customDomain: String (Required)
     *         transcriptionProperties (Optional): {
     *             wordLevelTimestampsEnabled: Boolean (Optional)
     *             displayFormWordLevelTimestampsEnabled: Boolean (Optional)
     *             channels (Optional): [
     *                 int (Optional)
     *             ]
     *             punctuationMode: String (Optional)
     *             profanityFilterMode: String (Optional)
     *             diarizationEnabled: Boolean (Optional)
     *             diarization (Optional): {
     *                 speakers (Required): {
     *                     minCount: Integer (Optional)
     *                     maxCount: Integer (Optional)
     *                 }
     *             }
     *             languageIdentification (Optional): {
     *                 mode: String (Required)
     *                 candidateLocales (Required): [
     *                     String (Required)
     *                 ]
     *                 speechModelMapping (Optional): {
     *                     String (Required): (recursive schema, see String above)
     *                 }
     *             }
     *         }
     *     }
     *     analyticsModel (Optional): {
     *         endpoint: String (Required)
     *     }
     *     statusModel (Required): {
     *         code: String (Required)
     *         message: String (Optional)
     *     }
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     name: String (Required)
     *     storageModel (Required): {
     *         blobStorageEndpoint: String (Required)
     *         inputContainerName: String (Required)
     *         outputContainerName: String (Required)
     *         processedContainerName: String (Required)
     *         errorOutputContainerName: String (Required)
     *     }
     *     processingModel (Required): {
     *         deliveryMode: String (Required)
     *         subjectEndsWith: String (Optional)
     *         systemTopicResourceId: String (Optional)
     *     }
     *     batchTranscriptionModel (Required): {
     *         locale: String (Optional)
     *         modelX (Optional): {
     *             self: String (Required)
     *         }
     *         customDomain: String (Required)
     *         transcriptionProperties (Optional): {
     *             wordLevelTimestampsEnabled: Boolean (Optional)
     *             displayFormWordLevelTimestampsEnabled: Boolean (Optional)
     *             channels (Optional): [
     *                 int (Optional)
     *             ]
     *             punctuationMode: String (Optional)
     *             profanityFilterMode: String (Optional)
     *             diarizationEnabled: Boolean (Optional)
     *             diarization (Optional): {
     *                 speakers (Required): {
     *                     minCount: Integer (Optional)
     *                     maxCount: Integer (Optional)
     *                 }
     *             }
     *             languageIdentification (Optional): {
     *                 mode: String (Required)
     *                 candidateLocales (Required): [
     *                     String (Required)
     *                 ]
     *                 speechModelMapping (Optional): {
     *                     String (Required): (recursive schema, see String above)
     *                 }
     *             }
     *         }
     *     }
     *     analyticsModel (Optional): {
     *         endpoint: String (Required)
     *     }
     *     statusModel (Required): {
     *         code: String (Required)
     *         message: String (Optional)
     *     }
     * }
     * }</pre>
     * 
     * @param name The unique name of the registration resource.
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a registration along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createOrReplaceRegistrationWithResponse(String name, BinaryData resource,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.createOrReplaceRegistrationSync(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), name, accept, resource, requestOptions, Context.NONE);
    }

    /**
     * Delete a Registration.
     * 
     * @param name The unique name of the registration resource.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteRegistrationWithResponseAsync(String name, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.deleteRegistration(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), name, accept, requestOptions, context));
    }

    /**
     * Delete a Registration.
     * 
     * @param name The unique name of the registration resource.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteRegistrationWithResponse(String name, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.deleteRegistrationSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            name, accept, requestOptions, Context.NONE);
    }

    /**
     * List Registration resources.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     name: String (Required)
     *     storageModel (Required): {
     *         blobStorageEndpoint: String (Required)
     *         inputContainerName: String (Required)
     *         outputContainerName: String (Required)
     *         processedContainerName: String (Required)
     *         errorOutputContainerName: String (Required)
     *     }
     *     processingModel (Required): {
     *         deliveryMode: String (Required)
     *         subjectEndsWith: String (Optional)
     *         systemTopicResourceId: String (Optional)
     *     }
     *     batchTranscriptionModel (Required): {
     *         locale: String (Optional)
     *         modelX (Optional): {
     *             self: String (Required)
     *         }
     *         customDomain: String (Required)
     *         transcriptionProperties (Optional): {
     *             wordLevelTimestampsEnabled: Boolean (Optional)
     *             displayFormWordLevelTimestampsEnabled: Boolean (Optional)
     *             channels (Optional): [
     *                 int (Optional)
     *             ]
     *             punctuationMode: String (Optional)
     *             profanityFilterMode: String (Optional)
     *             diarizationEnabled: Boolean (Optional)
     *             diarization (Optional): {
     *                 speakers (Required): {
     *                     minCount: Integer (Optional)
     *                     maxCount: Integer (Optional)
     *                 }
     *             }
     *             languageIdentification (Optional): {
     *                 mode: String (Required)
     *                 candidateLocales (Required): [
     *                     String (Required)
     *                 ]
     *                 speechModelMapping (Optional): {
     *                     String (Required): (recursive schema, see String above)
     *                 }
     *             }
     *         }
     *     }
     *     analyticsModel (Optional): {
     *         endpoint: String (Required)
     *     }
     *     statusModel (Required): {
     *         code: String (Required)
     *         message: String (Optional)
     *     }
     * }
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of Registration items along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listRegistrationsSinglePageAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listRegistrations(this.client.getEndpoint(),
                this.client.getServiceVersion().getVersion(), accept, requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null));
    }

    /**
     * List Registration resources.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     name: String (Required)
     *     storageModel (Required): {
     *         blobStorageEndpoint: String (Required)
     *         inputContainerName: String (Required)
     *         outputContainerName: String (Required)
     *         processedContainerName: String (Required)
     *         errorOutputContainerName: String (Required)
     *     }
     *     processingModel (Required): {
     *         deliveryMode: String (Required)
     *         subjectEndsWith: String (Optional)
     *         systemTopicResourceId: String (Optional)
     *     }
     *     batchTranscriptionModel (Required): {
     *         locale: String (Optional)
     *         modelX (Optional): {
     *             self: String (Required)
     *         }
     *         customDomain: String (Required)
     *         transcriptionProperties (Optional): {
     *             wordLevelTimestampsEnabled: Boolean (Optional)
     *             displayFormWordLevelTimestampsEnabled: Boolean (Optional)
     *             channels (Optional): [
     *                 int (Optional)
     *             ]
     *             punctuationMode: String (Optional)
     *             profanityFilterMode: String (Optional)
     *             diarizationEnabled: Boolean (Optional)
     *             diarization (Optional): {
     *                 speakers (Required): {
     *                     minCount: Integer (Optional)
     *                     maxCount: Integer (Optional)
     *                 }
     *             }
     *             languageIdentification (Optional): {
     *                 mode: String (Required)
     *                 candidateLocales (Required): [
     *                     String (Required)
     *                 ]
     *                 speechModelMapping (Optional): {
     *                     String (Required): (recursive schema, see String above)
     *                 }
     *             }
     *         }
     *     }
     *     analyticsModel (Optional): {
     *         endpoint: String (Required)
     *     }
     *     statusModel (Required): {
     *         code: String (Required)
     *         message: String (Optional)
     *     }
     * }
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of Registration items as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listRegistrationsAsync(RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedFlux<>(() -> listRegistrationsSinglePageAsync(requestOptions),
            nextLink -> listRegistrationsNextSinglePageAsync(nextLink, requestOptionsForNextPage));
    }

    /**
     * List Registration resources.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     name: String (Required)
     *     storageModel (Required): {
     *         blobStorageEndpoint: String (Required)
     *         inputContainerName: String (Required)
     *         outputContainerName: String (Required)
     *         processedContainerName: String (Required)
     *         errorOutputContainerName: String (Required)
     *     }
     *     processingModel (Required): {
     *         deliveryMode: String (Required)
     *         subjectEndsWith: String (Optional)
     *         systemTopicResourceId: String (Optional)
     *     }
     *     batchTranscriptionModel (Required): {
     *         locale: String (Optional)
     *         modelX (Optional): {
     *             self: String (Required)
     *         }
     *         customDomain: String (Required)
     *         transcriptionProperties (Optional): {
     *             wordLevelTimestampsEnabled: Boolean (Optional)
     *             displayFormWordLevelTimestampsEnabled: Boolean (Optional)
     *             channels (Optional): [
     *                 int (Optional)
     *             ]
     *             punctuationMode: String (Optional)
     *             profanityFilterMode: String (Optional)
     *             diarizationEnabled: Boolean (Optional)
     *             diarization (Optional): {
     *                 speakers (Required): {
     *                     minCount: Integer (Optional)
     *                     maxCount: Integer (Optional)
     *                 }
     *             }
     *             languageIdentification (Optional): {
     *                 mode: String (Required)
     *                 candidateLocales (Required): [
     *                     String (Required)
     *                 ]
     *                 speechModelMapping (Optional): {
     *                     String (Required): (recursive schema, see String above)
     *                 }
     *             }
     *         }
     *     }
     *     analyticsModel (Optional): {
     *         endpoint: String (Required)
     *     }
     *     statusModel (Required): {
     *         code: String (Required)
     *         message: String (Optional)
     *     }
     * }
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of Registration items along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listRegistrationsSinglePage(RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res = service.listRegistrationsSync(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), accept, requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null);
    }

    /**
     * List Registration resources.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     name: String (Required)
     *     storageModel (Required): {
     *         blobStorageEndpoint: String (Required)
     *         inputContainerName: String (Required)
     *         outputContainerName: String (Required)
     *         processedContainerName: String (Required)
     *         errorOutputContainerName: String (Required)
     *     }
     *     processingModel (Required): {
     *         deliveryMode: String (Required)
     *         subjectEndsWith: String (Optional)
     *         systemTopicResourceId: String (Optional)
     *     }
     *     batchTranscriptionModel (Required): {
     *         locale: String (Optional)
     *         modelX (Optional): {
     *             self: String (Required)
     *         }
     *         customDomain: String (Required)
     *         transcriptionProperties (Optional): {
     *             wordLevelTimestampsEnabled: Boolean (Optional)
     *             displayFormWordLevelTimestampsEnabled: Boolean (Optional)
     *             channels (Optional): [
     *                 int (Optional)
     *             ]
     *             punctuationMode: String (Optional)
     *             profanityFilterMode: String (Optional)
     *             diarizationEnabled: Boolean (Optional)
     *             diarization (Optional): {
     *                 speakers (Required): {
     *                     minCount: Integer (Optional)
     *                     maxCount: Integer (Optional)
     *                 }
     *             }
     *             languageIdentification (Optional): {
     *                 mode: String (Required)
     *                 candidateLocales (Required): [
     *                     String (Required)
     *                 ]
     *                 speechModelMapping (Optional): {
     *                     String (Required): (recursive schema, see String above)
     *                 }
     *             }
     *         }
     *     }
     *     analyticsModel (Optional): {
     *         endpoint: String (Required)
     *     }
     *     statusModel (Required): {
     *         code: String (Required)
     *         message: String (Optional)
     *     }
     * }
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of Registration items as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listRegistrations(RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedIterable<>(() -> listRegistrationsSinglePage(requestOptions),
            nextLink -> listRegistrationsNextSinglePage(nextLink, requestOptionsForNextPage));
    }

    /**
     * Get the next page of items.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     name: String (Required)
     *     storageModel (Required): {
     *         blobStorageEndpoint: String (Required)
     *         inputContainerName: String (Required)
     *         outputContainerName: String (Required)
     *         processedContainerName: String (Required)
     *         errorOutputContainerName: String (Required)
     *     }
     *     processingModel (Required): {
     *         deliveryMode: String (Required)
     *         subjectEndsWith: String (Optional)
     *         systemTopicResourceId: String (Optional)
     *     }
     *     batchTranscriptionModel (Required): {
     *         locale: String (Optional)
     *         modelX (Optional): {
     *             self: String (Required)
     *         }
     *         customDomain: String (Required)
     *         transcriptionProperties (Optional): {
     *             wordLevelTimestampsEnabled: Boolean (Optional)
     *             displayFormWordLevelTimestampsEnabled: Boolean (Optional)
     *             channels (Optional): [
     *                 int (Optional)
     *             ]
     *             punctuationMode: String (Optional)
     *             profanityFilterMode: String (Optional)
     *             diarizationEnabled: Boolean (Optional)
     *             diarization (Optional): {
     *                 speakers (Required): {
     *                     minCount: Integer (Optional)
     *                     maxCount: Integer (Optional)
     *                 }
     *             }
     *             languageIdentification (Optional): {
     *                 mode: String (Required)
     *                 candidateLocales (Required): [
     *                     String (Required)
     *                 ]
     *                 speechModelMapping (Optional): {
     *                     String (Required): (recursive schema, see String above)
     *                 }
     *             }
     *         }
     *     }
     *     analyticsModel (Optional): {
     *         endpoint: String (Required)
     *     }
     *     statusModel (Required): {
     *         code: String (Required)
     *         message: String (Optional)
     *     }
     * }
     * }</pre>
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of Registration items along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listRegistrationsNextSinglePageAsync(String nextLink,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listRegistrationsNext(nextLink, this.client.getEndpoint(), accept,
                requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null));
    }

    /**
     * Get the next page of items.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     name: String (Required)
     *     storageModel (Required): {
     *         blobStorageEndpoint: String (Required)
     *         inputContainerName: String (Required)
     *         outputContainerName: String (Required)
     *         processedContainerName: String (Required)
     *         errorOutputContainerName: String (Required)
     *     }
     *     processingModel (Required): {
     *         deliveryMode: String (Required)
     *         subjectEndsWith: String (Optional)
     *         systemTopicResourceId: String (Optional)
     *     }
     *     batchTranscriptionModel (Required): {
     *         locale: String (Optional)
     *         modelX (Optional): {
     *             self: String (Required)
     *         }
     *         customDomain: String (Required)
     *         transcriptionProperties (Optional): {
     *             wordLevelTimestampsEnabled: Boolean (Optional)
     *             displayFormWordLevelTimestampsEnabled: Boolean (Optional)
     *             channels (Optional): [
     *                 int (Optional)
     *             ]
     *             punctuationMode: String (Optional)
     *             profanityFilterMode: String (Optional)
     *             diarizationEnabled: Boolean (Optional)
     *             diarization (Optional): {
     *                 speakers (Required): {
     *                     minCount: Integer (Optional)
     *                     maxCount: Integer (Optional)
     *                 }
     *             }
     *             languageIdentification (Optional): {
     *                 mode: String (Required)
     *                 candidateLocales (Required): [
     *                     String (Required)
     *                 ]
     *                 speechModelMapping (Optional): {
     *                     String (Required): (recursive schema, see String above)
     *                 }
     *             }
     *         }
     *     }
     *     analyticsModel (Optional): {
     *         endpoint: String (Required)
     *     }
     *     statusModel (Required): {
     *         code: String (Required)
     *         message: String (Optional)
     *     }
     * }
     * }</pre>
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of Registration items along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listRegistrationsNextSinglePage(String nextLink, RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res = service.listRegistrationsNextSync(nextLink, this.client.getEndpoint(), accept,
            requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null);
    }

    private List<BinaryData> getValues(BinaryData binaryData, String path) {
        try {
            Map<?, ?> obj = binaryData.toObject(Map.class);
            List<?> values = (List<?>) obj.get(path);
            return values.stream().map(BinaryData::fromObject).collect(Collectors.toList());
        } catch (RuntimeException e) {
            return null;
        }
    }

    private String getNextLink(BinaryData binaryData, String path) {
        try {
            Map<?, ?> obj = binaryData.toObject(Map.class);
            return (String) obj.get(path);
        } catch (RuntimeException e) {
            return null;
        }
    }
}
