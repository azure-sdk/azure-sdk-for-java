// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.workloadsmicrosoftworkloadsmonitors.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Resource health details.
 */
@Immutable
public final class Health implements JsonSerializable<Health> {
    /*
     * Health state of the resource
     */
    private WorkloadProviderInstanceHealthState healthState;

    /*
     * Reasons impacting health state
     */
    private String impactingReasons;

    /**
     * Creates an instance of Health class.
     */
    public Health() {
    }

    /**
     * Get the healthState property: Health state of the resource.
     * 
     * @return the healthState value.
     */
    public WorkloadProviderInstanceHealthState healthState() {
        return this.healthState;
    }

    /**
     * Get the impactingReasons property: Reasons impacting health state.
     * 
     * @return the impactingReasons value.
     */
    public String impactingReasons() {
        return this.impactingReasons;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Health from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Health if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the Health.
     */
    public static Health fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Health deserializedHealth = new Health();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("healthState".equals(fieldName)) {
                    deserializedHealth.healthState = WorkloadProviderInstanceHealthState.fromString(reader.getString());
                } else if ("impactingReasons".equals(fieldName)) {
                    deserializedHealth.impactingReasons = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedHealth;
        });
    }
}
