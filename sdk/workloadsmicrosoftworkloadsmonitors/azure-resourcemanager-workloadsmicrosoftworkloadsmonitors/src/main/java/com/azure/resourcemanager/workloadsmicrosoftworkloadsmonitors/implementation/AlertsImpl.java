// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.workloadsmicrosoftworkloadsmonitors.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.workloadsmicrosoftworkloadsmonitors.fluent.AlertsClient;
import com.azure.resourcemanager.workloadsmicrosoftworkloadsmonitors.fluent.models.AlertInner;
import com.azure.resourcemanager.workloadsmicrosoftworkloadsmonitors.models.Alert;
import com.azure.resourcemanager.workloadsmicrosoftworkloadsmonitors.models.Alerts;

public final class AlertsImpl implements Alerts {
    private static final ClientLogger LOGGER = new ClientLogger(AlertsImpl.class);

    private final AlertsClient innerClient;

    private final com.azure.resourcemanager.workloadsmicrosoftworkloadsmonitors.WorkloadsManager serviceManager;

    public AlertsImpl(AlertsClient innerClient,
        com.azure.resourcemanager.workloadsmicrosoftworkloadsmonitors.WorkloadsManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<Alert> list(String resourceGroupName, String monitorName) {
        PagedIterable<AlertInner> inner = this.serviceClient().list(resourceGroupName, monitorName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new AlertImpl(inner1, this.manager()));
    }

    public PagedIterable<Alert> list(String resourceGroupName, String monitorName, Context context) {
        PagedIterable<AlertInner> inner = this.serviceClient().list(resourceGroupName, monitorName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new AlertImpl(inner1, this.manager()));
    }

    public Response<Alert> getWithResponse(String resourceGroupName, String monitorName, String alertName,
        Context context) {
        Response<AlertInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, monitorName, alertName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new AlertImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Alert get(String resourceGroupName, String monitorName, String alertName) {
        AlertInner inner = this.serviceClient().get(resourceGroupName, monitorName, alertName);
        if (inner != null) {
            return new AlertImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String monitorName, String alertName) {
        this.serviceClient().delete(resourceGroupName, monitorName, alertName);
    }

    public void delete(String resourceGroupName, String monitorName, String alertName, Context context) {
        this.serviceClient().delete(resourceGroupName, monitorName, alertName, context);
    }

    public Alert getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String monitorName = ResourceManagerUtils.getValueFromIdByName(id, "monitors");
        if (monitorName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'monitors'.", id)));
        }
        String alertName = ResourceManagerUtils.getValueFromIdByName(id, "alerts");
        if (alertName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'alerts'.", id)));
        }
        return this.getWithResponse(resourceGroupName, monitorName, alertName, Context.NONE).getValue();
    }

    public Response<Alert> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String monitorName = ResourceManagerUtils.getValueFromIdByName(id, "monitors");
        if (monitorName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'monitors'.", id)));
        }
        String alertName = ResourceManagerUtils.getValueFromIdByName(id, "alerts");
        if (alertName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'alerts'.", id)));
        }
        return this.getWithResponse(resourceGroupName, monitorName, alertName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String monitorName = ResourceManagerUtils.getValueFromIdByName(id, "monitors");
        if (monitorName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'monitors'.", id)));
        }
        String alertName = ResourceManagerUtils.getValueFromIdByName(id, "alerts");
        if (alertName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'alerts'.", id)));
        }
        this.delete(resourceGroupName, monitorName, alertName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String monitorName = ResourceManagerUtils.getValueFromIdByName(id, "monitors");
        if (monitorName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'monitors'.", id)));
        }
        String alertName = ResourceManagerUtils.getValueFromIdByName(id, "alerts");
        if (alertName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'alerts'.", id)));
        }
        this.delete(resourceGroupName, monitorName, alertName, context);
    }

    private AlertsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.workloadsmicrosoftworkloadsmonitors.WorkloadsManager manager() {
        return this.serviceManager;
    }

    public AlertImpl define(String name) {
        return new AlertImpl(name, this.manager());
    }
}
