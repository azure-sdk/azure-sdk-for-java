// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.workloadsmicrosoftworkloadsmonitors.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.exception.ManagementError;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.workloadsmicrosoftworkloadsmonitors.models.AlertRuleProperties;
import com.azure.resourcemanager.workloadsmicrosoftworkloadsmonitors.models.WorkloadMonitorProvisioningState;
import java.io.IOException;
import java.util.List;

/**
 * Describes the properties of an Alert for SAP monitor.
 */
@Fluent
public final class AlertProperties implements JsonSerializable<AlertProperties> {
    /*
     * Defines the alert instance errors.
     */
    private ManagementError errors;

    /*
     * ID of the alert rule resource created.
     */
    private String alertRuleResourceId;

    /*
     * Name of the alert template from which it was created.
     */
    private String templateName;

    /*
     * The provider type for alert. For example, the value can be SapHana.
     */
    private String providerType;

    /*
     * Name of provider instances associated with the alert.
     */
    private List<String> providerNames;

    /*
     * Describes the properties of an alert.
     */
    private AlertRuleProperties alertRuleProperties;

    /*
     * State of provisioning of the alert instance
     */
    private WorkloadMonitorProvisioningState provisioningState;

    /**
     * Creates an instance of AlertProperties class.
     */
    public AlertProperties() {
    }

    /**
     * Get the errors property: Defines the alert instance errors.
     * 
     * @return the errors value.
     */
    public ManagementError errors() {
        return this.errors;
    }

    /**
     * Get the alertRuleResourceId property: ID of the alert rule resource created.
     * 
     * @return the alertRuleResourceId value.
     */
    public String alertRuleResourceId() {
        return this.alertRuleResourceId;
    }

    /**
     * Get the templateName property: Name of the alert template from which it was created.
     * 
     * @return the templateName value.
     */
    public String templateName() {
        return this.templateName;
    }

    /**
     * Set the templateName property: Name of the alert template from which it was created.
     * 
     * @param templateName the templateName value to set.
     * @return the AlertProperties object itself.
     */
    public AlertProperties withTemplateName(String templateName) {
        this.templateName = templateName;
        return this;
    }

    /**
     * Get the providerType property: The provider type for alert. For example, the value can be SapHana.
     * 
     * @return the providerType value.
     */
    public String providerType() {
        return this.providerType;
    }

    /**
     * Set the providerType property: The provider type for alert. For example, the value can be SapHana.
     * 
     * @param providerType the providerType value to set.
     * @return the AlertProperties object itself.
     */
    public AlertProperties withProviderType(String providerType) {
        this.providerType = providerType;
        return this;
    }

    /**
     * Get the providerNames property: Name of provider instances associated with the alert.
     * 
     * @return the providerNames value.
     */
    public List<String> providerNames() {
        return this.providerNames;
    }

    /**
     * Set the providerNames property: Name of provider instances associated with the alert.
     * 
     * @param providerNames the providerNames value to set.
     * @return the AlertProperties object itself.
     */
    public AlertProperties withProviderNames(List<String> providerNames) {
        this.providerNames = providerNames;
        return this;
    }

    /**
     * Get the alertRuleProperties property: Describes the properties of an alert.
     * 
     * @return the alertRuleProperties value.
     */
    public AlertRuleProperties alertRuleProperties() {
        return this.alertRuleProperties;
    }

    /**
     * Set the alertRuleProperties property: Describes the properties of an alert.
     * 
     * @param alertRuleProperties the alertRuleProperties value to set.
     * @return the AlertProperties object itself.
     */
    public AlertProperties withAlertRuleProperties(AlertRuleProperties alertRuleProperties) {
        this.alertRuleProperties = alertRuleProperties;
        return this;
    }

    /**
     * Get the provisioningState property: State of provisioning of the alert instance.
     * 
     * @return the provisioningState value.
     */
    public WorkloadMonitorProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (alertRuleProperties() != null) {
            alertRuleProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("templateName", this.templateName);
        jsonWriter.writeStringField("providerType", this.providerType);
        jsonWriter.writeArrayField("providerNames", this.providerNames,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("alertRuleProperties", this.alertRuleProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AlertProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AlertProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the AlertProperties.
     */
    public static AlertProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AlertProperties deserializedAlertProperties = new AlertProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("errors".equals(fieldName)) {
                    deserializedAlertProperties.errors = ManagementError.fromJson(reader);
                } else if ("alertRuleResourceId".equals(fieldName)) {
                    deserializedAlertProperties.alertRuleResourceId = reader.getString();
                } else if ("templateName".equals(fieldName)) {
                    deserializedAlertProperties.templateName = reader.getString();
                } else if ("providerType".equals(fieldName)) {
                    deserializedAlertProperties.providerType = reader.getString();
                } else if ("providerNames".equals(fieldName)) {
                    List<String> providerNames = reader.readArray(reader1 -> reader1.getString());
                    deserializedAlertProperties.providerNames = providerNames;
                } else if ("alertRuleProperties".equals(fieldName)) {
                    deserializedAlertProperties.alertRuleProperties = AlertRuleProperties.fromJson(reader);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedAlertProperties.provisioningState
                        = WorkloadMonitorProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAlertProperties;
        });
    }
}
