// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.workloadsmicrosoftworkloadsmonitors.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Defines the Alert Template MetricMeasurement Properties.
 */
@Fluent
public final class AlertTemplateMetricMeasurement implements JsonSerializable<AlertTemplateMetricMeasurement> {
    /*
     * Operator used for threshold comparison.
     */
    private ConditionalOperator thresholdOperator;

    /*
     * The Threshold Value Associated with the Alert Template for Metric Measurement.
     */
    private Integer threshold;

    /*
     * Metric Trigger Type Associated with the Alert Template for Metric Measurement.
     */
    private AlertTemplateMetricTriggerType metricTriggerType;

    /*
     * Metric Column Associated with the Alert Template for Metric Measurement.
     */
    private String metricColumn;

    /*
     * Frequency (mins) value Associated with the Alert Template for Metric Measurement.
     */
    private Integer frequencyInMinutes;

    /*
     * Time Window (mins) Value Associated with the Alert Template for Metric Measurement.
     */
    private Integer timeWindowInMinutes;

    /**
     * Creates an instance of AlertTemplateMetricMeasurement class.
     */
    public AlertTemplateMetricMeasurement() {
    }

    /**
     * Get the thresholdOperator property: Operator used for threshold comparison.
     * 
     * @return the thresholdOperator value.
     */
    public ConditionalOperator thresholdOperator() {
        return this.thresholdOperator;
    }

    /**
     * Set the thresholdOperator property: Operator used for threshold comparison.
     * 
     * @param thresholdOperator the thresholdOperator value to set.
     * @return the AlertTemplateMetricMeasurement object itself.
     */
    public AlertTemplateMetricMeasurement withThresholdOperator(ConditionalOperator thresholdOperator) {
        this.thresholdOperator = thresholdOperator;
        return this;
    }

    /**
     * Get the threshold property: The Threshold Value Associated with the Alert Template for Metric Measurement.
     * 
     * @return the threshold value.
     */
    public Integer threshold() {
        return this.threshold;
    }

    /**
     * Set the threshold property: The Threshold Value Associated with the Alert Template for Metric Measurement.
     * 
     * @param threshold the threshold value to set.
     * @return the AlertTemplateMetricMeasurement object itself.
     */
    public AlertTemplateMetricMeasurement withThreshold(Integer threshold) {
        this.threshold = threshold;
        return this;
    }

    /**
     * Get the metricTriggerType property: Metric Trigger Type Associated with the Alert Template for Metric
     * Measurement.
     * 
     * @return the metricTriggerType value.
     */
    public AlertTemplateMetricTriggerType metricTriggerType() {
        return this.metricTriggerType;
    }

    /**
     * Set the metricTriggerType property: Metric Trigger Type Associated with the Alert Template for Metric
     * Measurement.
     * 
     * @param metricTriggerType the metricTriggerType value to set.
     * @return the AlertTemplateMetricMeasurement object itself.
     */
    public AlertTemplateMetricMeasurement withMetricTriggerType(AlertTemplateMetricTriggerType metricTriggerType) {
        this.metricTriggerType = metricTriggerType;
        return this;
    }

    /**
     * Get the metricColumn property: Metric Column Associated with the Alert Template for Metric Measurement.
     * 
     * @return the metricColumn value.
     */
    public String metricColumn() {
        return this.metricColumn;
    }

    /**
     * Set the metricColumn property: Metric Column Associated with the Alert Template for Metric Measurement.
     * 
     * @param metricColumn the metricColumn value to set.
     * @return the AlertTemplateMetricMeasurement object itself.
     */
    public AlertTemplateMetricMeasurement withMetricColumn(String metricColumn) {
        this.metricColumn = metricColumn;
        return this;
    }

    /**
     * Get the frequencyInMinutes property: Frequency (mins) value Associated with the Alert Template for Metric
     * Measurement.
     * 
     * @return the frequencyInMinutes value.
     */
    public Integer frequencyInMinutes() {
        return this.frequencyInMinutes;
    }

    /**
     * Set the frequencyInMinutes property: Frequency (mins) value Associated with the Alert Template for Metric
     * Measurement.
     * 
     * @param frequencyInMinutes the frequencyInMinutes value to set.
     * @return the AlertTemplateMetricMeasurement object itself.
     */
    public AlertTemplateMetricMeasurement withFrequencyInMinutes(Integer frequencyInMinutes) {
        this.frequencyInMinutes = frequencyInMinutes;
        return this;
    }

    /**
     * Get the timeWindowInMinutes property: Time Window (mins) Value Associated with the Alert Template for Metric
     * Measurement.
     * 
     * @return the timeWindowInMinutes value.
     */
    public Integer timeWindowInMinutes() {
        return this.timeWindowInMinutes;
    }

    /**
     * Set the timeWindowInMinutes property: Time Window (mins) Value Associated with the Alert Template for Metric
     * Measurement.
     * 
     * @param timeWindowInMinutes the timeWindowInMinutes value to set.
     * @return the AlertTemplateMetricMeasurement object itself.
     */
    public AlertTemplateMetricMeasurement withTimeWindowInMinutes(Integer timeWindowInMinutes) {
        this.timeWindowInMinutes = timeWindowInMinutes;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("thresholdOperator",
            this.thresholdOperator == null ? null : this.thresholdOperator.toString());
        jsonWriter.writeNumberField("threshold", this.threshold);
        jsonWriter.writeStringField("metricTriggerType",
            this.metricTriggerType == null ? null : this.metricTriggerType.toString());
        jsonWriter.writeStringField("metricColumn", this.metricColumn);
        jsonWriter.writeNumberField("frequencyInMinutes", this.frequencyInMinutes);
        jsonWriter.writeNumberField("timeWindowInMinutes", this.timeWindowInMinutes);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AlertTemplateMetricMeasurement from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AlertTemplateMetricMeasurement if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AlertTemplateMetricMeasurement.
     */
    public static AlertTemplateMetricMeasurement fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AlertTemplateMetricMeasurement deserializedAlertTemplateMetricMeasurement
                = new AlertTemplateMetricMeasurement();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("thresholdOperator".equals(fieldName)) {
                    deserializedAlertTemplateMetricMeasurement.thresholdOperator
                        = ConditionalOperator.fromString(reader.getString());
                } else if ("threshold".equals(fieldName)) {
                    deserializedAlertTemplateMetricMeasurement.threshold = reader.getNullable(JsonReader::getInt);
                } else if ("metricTriggerType".equals(fieldName)) {
                    deserializedAlertTemplateMetricMeasurement.metricTriggerType
                        = AlertTemplateMetricTriggerType.fromString(reader.getString());
                } else if ("metricColumn".equals(fieldName)) {
                    deserializedAlertTemplateMetricMeasurement.metricColumn = reader.getString();
                } else if ("frequencyInMinutes".equals(fieldName)) {
                    deserializedAlertTemplateMetricMeasurement.frequencyInMinutes
                        = reader.getNullable(JsonReader::getInt);
                } else if ("timeWindowInMinutes".equals(fieldName)) {
                    deserializedAlertTemplateMetricMeasurement.timeWindowInMinutes
                        = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAlertTemplateMetricMeasurement;
        });
    }
}
