// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.workloadsmicrosoftworkloadsmonitors.models;

import com.azure.core.annotation.Immutable;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeId;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Gets or sets the provider specific properties.
 */
@JsonTypeInfo(
    use = JsonTypeInfo.Id.NAME,
    property = "providerType",
    defaultImpl = ProviderSpecificProperties.class,
    visible = true)
@JsonTypeName("ProviderSpecificProperties")
@JsonSubTypes({
    @JsonSubTypes.Type(name = "Db2", value = Db2ProviderInstanceProperties.class),
    @JsonSubTypes.Type(name = "SapHana", value = HanaDbProviderInstanceProperties.class),
    @JsonSubTypes.Type(name = "MsSqlServer", value = MsSqlServerProviderInstanceProperties.class),
    @JsonSubTypes.Type(name = "PrometheusHaCluster", value = PrometheusHaClusterProviderInstanceProperties.class),
    @JsonSubTypes.Type(name = "PrometheusOS", value = PrometheusOsProviderInstanceProperties.class),
    @JsonSubTypes.Type(name = "SapNetWeaver", value = SapNetWeaverProviderInstanceProperties.class) })
@Immutable
public class ProviderSpecificProperties {
    /*
     * The provider type. For example, the value can be SapHana.
     */
    @JsonTypeId
    @JsonProperty(value = "providerType", required = true)
    private String providerType;

    /**
     * Creates an instance of ProviderSpecificProperties class.
     */
    public ProviderSpecificProperties() {
        this.providerType = "ProviderSpecificProperties";
    }

    /**
     * Get the providerType property: The provider type. For example, the value can be SapHana.
     * 
     * @return the providerType value.
     */
    public String providerType() {
        return this.providerType;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
