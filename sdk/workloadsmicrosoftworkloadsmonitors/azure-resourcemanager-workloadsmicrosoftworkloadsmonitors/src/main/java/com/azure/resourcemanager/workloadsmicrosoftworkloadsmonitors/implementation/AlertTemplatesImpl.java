// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.workloadsmicrosoftworkloadsmonitors.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.workloadsmicrosoftworkloadsmonitors.fluent.AlertTemplatesClient;
import com.azure.resourcemanager.workloadsmicrosoftworkloadsmonitors.fluent.models.AlertTemplateInner;
import com.azure.resourcemanager.workloadsmicrosoftworkloadsmonitors.models.AlertTemplate;
import com.azure.resourcemanager.workloadsmicrosoftworkloadsmonitors.models.AlertTemplates;

public final class AlertTemplatesImpl implements AlertTemplates {
    private static final ClientLogger LOGGER = new ClientLogger(AlertTemplatesImpl.class);

    private final AlertTemplatesClient innerClient;

    private final com.azure.resourcemanager.workloadsmicrosoftworkloadsmonitors.WorkloadsManager serviceManager;

    public AlertTemplatesImpl(AlertTemplatesClient innerClient,
        com.azure.resourcemanager.workloadsmicrosoftworkloadsmonitors.WorkloadsManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<AlertTemplate> list(String resourceGroupName, String monitorName) {
        PagedIterable<AlertTemplateInner> inner = this.serviceClient().list(resourceGroupName, monitorName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new AlertTemplateImpl(inner1, this.manager()));
    }

    public PagedIterable<AlertTemplate> list(String resourceGroupName, String monitorName, String providerType,
        Context context) {
        PagedIterable<AlertTemplateInner> inner
            = this.serviceClient().list(resourceGroupName, monitorName, providerType, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new AlertTemplateImpl(inner1, this.manager()));
    }

    public Response<AlertTemplate> getWithResponse(String resourceGroupName, String monitorName,
        String alertTemplateName, Context context) {
        Response<AlertTemplateInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, monitorName, alertTemplateName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new AlertTemplateImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public AlertTemplate get(String resourceGroupName, String monitorName, String alertTemplateName) {
        AlertTemplateInner inner = this.serviceClient().get(resourceGroupName, monitorName, alertTemplateName);
        if (inner != null) {
            return new AlertTemplateImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    private AlertTemplatesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.workloadsmicrosoftworkloadsmonitors.WorkloadsManager manager() {
        return this.serviceManager;
    }
}
