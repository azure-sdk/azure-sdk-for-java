// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.workloadsmicrosoftworkloadsmonitors.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.core.management.exception.ManagementError;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.workloadsmicrosoftworkloadsmonitors.models.AlertTemplateMetricMeasurement;
import com.azure.resourcemanager.workloadsmicrosoftworkloadsmonitors.models.AlertTemplateQueryInputParameter;
import com.azure.resourcemanager.workloadsmicrosoftworkloadsmonitors.models.ConditionalOperator;
import com.azure.resourcemanager.workloadsmicrosoftworkloadsmonitors.models.DefaultThresholdInputOption;
import com.azure.resourcemanager.workloadsmicrosoftworkloadsmonitors.models.WorkloadMonitorProvisioningState;
import java.io.IOException;
import java.util.List;

/**
 * Concrete proxy resource types can be created by aliasing this type using a specific property type.
 */
@Fluent
public final class AlertTemplateInner extends ProxyResource {
    /*
     * Alert Template properties
     */
    private AlertTemplateProperties innerProperties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of AlertTemplateInner class.
     */
    public AlertTemplateInner() {
    }

    /**
     * Get the innerProperties property: Alert Template properties.
     * 
     * @return the innerProperties value.
     */
    private AlertTemplateProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the errors property: Defines the SAP monitor Alert Template errors.
     * 
     * @return the errors value.
     */
    public ManagementError errors() {
        return this.innerProperties() == null ? null : this.innerProperties().errors();
    }

    /**
     * Get the provisioningState property: State of provisioning of the Alert Template.
     * 
     * @return the provisioningState value.
     */
    public WorkloadMonitorProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the templateDisplayName property: Display name of the alert template.
     * 
     * @return the templateDisplayName value.
     */
    public String templateDisplayName() {
        return this.innerProperties() == null ? null : this.innerProperties().templateDisplayName();
    }

    /**
     * Set the templateDisplayName property: Display name of the alert template.
     * 
     * @param templateDisplayName the templateDisplayName value to set.
     * @return the AlertTemplateInner object itself.
     */
    public AlertTemplateInner withTemplateDisplayName(String templateDisplayName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AlertTemplateProperties();
        }
        this.innerProperties().withTemplateDisplayName(templateDisplayName);
        return this;
    }

    /**
     * Get the providerType property: The provider type for alert template. For example, the value can be SapHana.
     * 
     * @return the providerType value.
     */
    public String providerType() {
        return this.innerProperties() == null ? null : this.innerProperties().providerType();
    }

    /**
     * Set the providerType property: The provider type for alert template. For example, the value can be SapHana.
     * 
     * @param providerType the providerType value to set.
     * @return the AlertTemplateInner object itself.
     */
    public AlertTemplateInner withProviderType(String providerType) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AlertTemplateProperties();
        }
        this.innerProperties().withProviderType(providerType);
        return this;
    }

    /**
     * Get the description property: Description of the template.
     * 
     * @return the description value.
     */
    public String description() {
        return this.innerProperties() == null ? null : this.innerProperties().description();
    }

    /**
     * Set the description property: Description of the template.
     * 
     * @param description the description value to set.
     * @return the AlertTemplateInner object itself.
     */
    public AlertTemplateInner withDescription(String description) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AlertTemplateProperties();
        }
        this.innerProperties().withDescription(description);
        return this;
    }

    /**
     * Get the severity property: Severity of the alert. Should be an integer between [0-4]. Value of 0 is most severe
     * and value of 4 is least severe.
     * 
     * @return the severity value.
     */
    public Integer severity() {
        return this.innerProperties() == null ? null : this.innerProperties().severity();
    }

    /**
     * Set the severity property: Severity of the alert. Should be an integer between [0-4]. Value of 0 is most severe
     * and value of 4 is least severe.
     * 
     * @param severity the severity value to set.
     * @return the AlertTemplateInner object itself.
     */
    public AlertTemplateInner withSeverity(Integer severity) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AlertTemplateProperties();
        }
        this.innerProperties().withSeverity(severity);
        return this;
    }

    /**
     * Get the query property: Query associated with the alert template.
     * 
     * @return the query value.
     */
    public String query() {
        return this.innerProperties() == null ? null : this.innerProperties().query();
    }

    /**
     * Set the query property: Query associated with the alert template.
     * 
     * @param query the query value to set.
     * @return the AlertTemplateInner object itself.
     */
    public AlertTemplateInner withQuery(String query) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AlertTemplateProperties();
        }
        this.innerProperties().withQuery(query);
        return this;
    }

    /**
     * Get the thresholdOperator property: Operator used for threshold comparison.
     * 
     * @return the thresholdOperator value.
     */
    public ConditionalOperator thresholdOperator() {
        return this.innerProperties() == null ? null : this.innerProperties().thresholdOperator();
    }

    /**
     * Set the thresholdOperator property: Operator used for threshold comparison.
     * 
     * @param thresholdOperator the thresholdOperator value to set.
     * @return the AlertTemplateInner object itself.
     */
    public AlertTemplateInner withThresholdOperator(ConditionalOperator thresholdOperator) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AlertTemplateProperties();
        }
        this.innerProperties().withThresholdOperator(thresholdOperator);
        return this;
    }

    /**
     * Get the defaultThreshold property: Default threshold value.
     * 
     * @return the defaultThreshold value.
     */
    public Integer defaultThreshold() {
        return this.innerProperties() == null ? null : this.innerProperties().defaultThreshold();
    }

    /**
     * Set the defaultThreshold property: Default threshold value.
     * 
     * @param defaultThreshold the defaultThreshold value to set.
     * @return the AlertTemplateInner object itself.
     */
    public AlertTemplateInner withDefaultThreshold(Integer defaultThreshold) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AlertTemplateProperties();
        }
        this.innerProperties().withDefaultThreshold(defaultThreshold);
        return this;
    }

    /**
     * Get the lowerBound property: Minimum possible Default Threshold Value Associated with the Alert Template.
     * 
     * @return the lowerBound value.
     */
    public Integer lowerBound() {
        return this.innerProperties() == null ? null : this.innerProperties().lowerBound();
    }

    /**
     * Set the lowerBound property: Minimum possible Default Threshold Value Associated with the Alert Template.
     * 
     * @param lowerBound the lowerBound value to set.
     * @return the AlertTemplateInner object itself.
     */
    public AlertTemplateInner withLowerBound(Integer lowerBound) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AlertTemplateProperties();
        }
        this.innerProperties().withLowerBound(lowerBound);
        return this;
    }

    /**
     * Get the upperBound property: Maximum possible Default Threshold Value Associated with the Alert Template.
     * 
     * @return the upperBound value.
     */
    public Integer upperBound() {
        return this.innerProperties() == null ? null : this.innerProperties().upperBound();
    }

    /**
     * Set the upperBound property: Maximum possible Default Threshold Value Associated with the Alert Template.
     * 
     * @param upperBound the upperBound value to set.
     * @return the AlertTemplateInner object itself.
     */
    public AlertTemplateInner withUpperBound(Integer upperBound) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AlertTemplateProperties();
        }
        this.innerProperties().withUpperBound(upperBound);
        return this;
    }

    /**
     * Get the defaultThresholdInputOption property: Input option for the default threshold.
     * 
     * @return the defaultThresholdInputOption value.
     */
    public DefaultThresholdInputOption defaultThresholdInputOption() {
        return this.innerProperties() == null ? null : this.innerProperties().defaultThresholdInputOption();
    }

    /**
     * Set the defaultThresholdInputOption property: Input option for the default threshold.
     * 
     * @param defaultThresholdInputOption the defaultThresholdInputOption value to set.
     * @return the AlertTemplateInner object itself.
     */
    public AlertTemplateInner withDefaultThresholdInputOption(DefaultThresholdInputOption defaultThresholdInputOption) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AlertTemplateProperties();
        }
        this.innerProperties().withDefaultThresholdInputOption(defaultThresholdInputOption);
        return this;
    }

    /**
     * Get the alertUnit property: Unit of the alert.
     * 
     * @return the alertUnit value.
     */
    public String alertUnit() {
        return this.innerProperties() == null ? null : this.innerProperties().alertUnit();
    }

    /**
     * Set the alertUnit property: Unit of the alert.
     * 
     * @param alertUnit the alertUnit value to set.
     * @return the AlertTemplateInner object itself.
     */
    public AlertTemplateInner withAlertUnit(String alertUnit) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AlertTemplateProperties();
        }
        this.innerProperties().withAlertUnit(alertUnit);
        return this;
    }

    /**
     * Get the metricMeasurement property: Describes the properties for metric measurement in alerts template.
     * 
     * @return the metricMeasurement value.
     */
    public AlertTemplateMetricMeasurement metricMeasurement() {
        return this.innerProperties() == null ? null : this.innerProperties().metricMeasurement();
    }

    /**
     * Set the metricMeasurement property: Describes the properties for metric measurement in alerts template.
     * 
     * @param metricMeasurement the metricMeasurement value to set.
     * @return the AlertTemplateInner object itself.
     */
    public AlertTemplateInner withMetricMeasurement(AlertTemplateMetricMeasurement metricMeasurement) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AlertTemplateProperties();
        }
        this.innerProperties().withMetricMeasurement(metricMeasurement);
        return this;
    }

    /**
     * Get the queryInputParameters property: Describes the Query Input Parameter properties in alerts template.
     * 
     * @return the queryInputParameters value.
     */
    public List<AlertTemplateQueryInputParameter> queryInputParameters() {
        return this.innerProperties() == null ? null : this.innerProperties().queryInputParameters();
    }

    /**
     * Set the queryInputParameters property: Describes the Query Input Parameter properties in alerts template.
     * 
     * @param queryInputParameters the queryInputParameters value to set.
     * @return the AlertTemplateInner object itself.
     */
    public AlertTemplateInner withQueryInputParameters(List<AlertTemplateQueryInputParameter> queryInputParameters) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AlertTemplateProperties();
        }
        this.innerProperties().withQueryInputParameters(queryInputParameters);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AlertTemplateInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AlertTemplateInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AlertTemplateInner.
     */
    public static AlertTemplateInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AlertTemplateInner deserializedAlertTemplateInner = new AlertTemplateInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedAlertTemplateInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedAlertTemplateInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedAlertTemplateInner.type = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedAlertTemplateInner.innerProperties = AlertTemplateProperties.fromJson(reader);
                } else if ("systemData".equals(fieldName)) {
                    deserializedAlertTemplateInner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAlertTemplateInner;
        });
    }
}
