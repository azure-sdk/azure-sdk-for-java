// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.workloadsmicrosoftworkloadsmonitors.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.core.management.exception.ManagementError;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.workloadsmicrosoftworkloadsmonitors.models.AlertRuleProperties;
import com.azure.resourcemanager.workloadsmicrosoftworkloadsmonitors.models.WorkloadMonitorProvisioningState;
import java.io.IOException;
import java.util.List;

/**
 * A alert associated with SAP monitor.
 */
@Fluent
public final class AlertInner extends ProxyResource {
    /*
     * Alert Instance properties
     */
    private AlertProperties innerProperties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of AlertInner class.
     */
    public AlertInner() {
    }

    /**
     * Get the innerProperties property: Alert Instance properties.
     * 
     * @return the innerProperties value.
     */
    private AlertProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the errors property: Defines the alert instance errors.
     * 
     * @return the errors value.
     */
    public ManagementError errors() {
        return this.innerProperties() == null ? null : this.innerProperties().errors();
    }

    /**
     * Get the alertRuleResourceId property: ID of the alert rule resource created.
     * 
     * @return the alertRuleResourceId value.
     */
    public String alertRuleResourceId() {
        return this.innerProperties() == null ? null : this.innerProperties().alertRuleResourceId();
    }

    /**
     * Get the templateName property: Name of the alert template from which it was created.
     * 
     * @return the templateName value.
     */
    public String templateName() {
        return this.innerProperties() == null ? null : this.innerProperties().templateName();
    }

    /**
     * Set the templateName property: Name of the alert template from which it was created.
     * 
     * @param templateName the templateName value to set.
     * @return the AlertInner object itself.
     */
    public AlertInner withTemplateName(String templateName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AlertProperties();
        }
        this.innerProperties().withTemplateName(templateName);
        return this;
    }

    /**
     * Get the providerType property: The provider type for alert. For example, the value can be SapHana.
     * 
     * @return the providerType value.
     */
    public String providerType() {
        return this.innerProperties() == null ? null : this.innerProperties().providerType();
    }

    /**
     * Set the providerType property: The provider type for alert. For example, the value can be SapHana.
     * 
     * @param providerType the providerType value to set.
     * @return the AlertInner object itself.
     */
    public AlertInner withProviderType(String providerType) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AlertProperties();
        }
        this.innerProperties().withProviderType(providerType);
        return this;
    }

    /**
     * Get the providerNames property: Name of provider instances associated with the alert.
     * 
     * @return the providerNames value.
     */
    public List<String> providerNames() {
        return this.innerProperties() == null ? null : this.innerProperties().providerNames();
    }

    /**
     * Set the providerNames property: Name of provider instances associated with the alert.
     * 
     * @param providerNames the providerNames value to set.
     * @return the AlertInner object itself.
     */
    public AlertInner withProviderNames(List<String> providerNames) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AlertProperties();
        }
        this.innerProperties().withProviderNames(providerNames);
        return this;
    }

    /**
     * Get the alertRuleProperties property: Describes the properties of an alert.
     * 
     * @return the alertRuleProperties value.
     */
    public AlertRuleProperties alertRuleProperties() {
        return this.innerProperties() == null ? null : this.innerProperties().alertRuleProperties();
    }

    /**
     * Set the alertRuleProperties property: Describes the properties of an alert.
     * 
     * @param alertRuleProperties the alertRuleProperties value to set.
     * @return the AlertInner object itself.
     */
    public AlertInner withAlertRuleProperties(AlertRuleProperties alertRuleProperties) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AlertProperties();
        }
        this.innerProperties().withAlertRuleProperties(alertRuleProperties);
        return this;
    }

    /**
     * Get the provisioningState property: State of provisioning of the alert instance.
     * 
     * @return the provisioningState value.
     */
    public WorkloadMonitorProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AlertInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AlertInner if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AlertInner.
     */
    public static AlertInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AlertInner deserializedAlertInner = new AlertInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedAlertInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedAlertInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedAlertInner.type = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedAlertInner.innerProperties = AlertProperties.fromJson(reader);
                } else if ("systemData".equals(fieldName)) {
                    deserializedAlertInner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAlertInner;
        });
    }
}
