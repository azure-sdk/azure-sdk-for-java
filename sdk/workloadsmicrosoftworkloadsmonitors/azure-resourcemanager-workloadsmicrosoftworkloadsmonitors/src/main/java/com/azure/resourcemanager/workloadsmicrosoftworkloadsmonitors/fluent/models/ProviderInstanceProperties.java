// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.workloadsmicrosoftworkloadsmonitors.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.exception.ManagementError;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.workloadsmicrosoftworkloadsmonitors.models.Health;
import com.azure.resourcemanager.workloadsmicrosoftworkloadsmonitors.models.ProviderSpecificProperties;
import com.azure.resourcemanager.workloadsmicrosoftworkloadsmonitors.models.WorkloadMonitorProvisioningState;
import java.io.IOException;

/**
 * Describes the properties of a provider instance.
 */
@Fluent
public final class ProviderInstanceProperties implements JsonSerializable<ProviderInstanceProperties> {
    /*
     * State of provisioning of the provider instance
     */
    private WorkloadMonitorProvisioningState provisioningState;

    /*
     * Resource health details
     */
    private Health health;

    /*
     * Defines the provider instance errors.
     */
    private ManagementError errors;

    /*
     * Defines the provider specific properties.
     */
    private ProviderSpecificProperties providerSettings;

    /**
     * Creates an instance of ProviderInstanceProperties class.
     */
    public ProviderInstanceProperties() {
    }

    /**
     * Get the provisioningState property: State of provisioning of the provider instance.
     * 
     * @return the provisioningState value.
     */
    public WorkloadMonitorProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the health property: Resource health details.
     * 
     * @return the health value.
     */
    public Health health() {
        return this.health;
    }

    /**
     * Get the errors property: Defines the provider instance errors.
     * 
     * @return the errors value.
     */
    public ManagementError errors() {
        return this.errors;
    }

    /**
     * Get the providerSettings property: Defines the provider specific properties.
     * 
     * @return the providerSettings value.
     */
    public ProviderSpecificProperties providerSettings() {
        return this.providerSettings;
    }

    /**
     * Set the providerSettings property: Defines the provider specific properties.
     * 
     * @param providerSettings the providerSettings value to set.
     * @return the ProviderInstanceProperties object itself.
     */
    public ProviderInstanceProperties withProviderSettings(ProviderSpecificProperties providerSettings) {
        this.providerSettings = providerSettings;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (health() != null) {
            health().validate();
        }
        if (providerSettings() != null) {
            providerSettings().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("providerSettings", this.providerSettings);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ProviderInstanceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ProviderInstanceProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ProviderInstanceProperties.
     */
    public static ProviderInstanceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ProviderInstanceProperties deserializedProviderInstanceProperties = new ProviderInstanceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedProviderInstanceProperties.provisioningState
                        = WorkloadMonitorProvisioningState.fromString(reader.getString());
                } else if ("health".equals(fieldName)) {
                    deserializedProviderInstanceProperties.health = Health.fromJson(reader);
                } else if ("errors".equals(fieldName)) {
                    deserializedProviderInstanceProperties.errors = ManagementError.fromJson(reader);
                } else if ("providerSettings".equals(fieldName)) {
                    deserializedProviderInstanceProperties.providerSettings
                        = ProviderSpecificProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedProviderInstanceProperties;
        });
    }
}
