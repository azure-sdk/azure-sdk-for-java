// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.workloadsmicrosoftworkloadsmonitors.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.exception.ManagementError;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.workloadsmicrosoftworkloadsmonitors.models.AlertTemplateMetricMeasurement;
import com.azure.resourcemanager.workloadsmicrosoftworkloadsmonitors.models.AlertTemplateQueryInputParameter;
import com.azure.resourcemanager.workloadsmicrosoftworkloadsmonitors.models.ConditionalOperator;
import com.azure.resourcemanager.workloadsmicrosoftworkloadsmonitors.models.DefaultThresholdInputOption;
import com.azure.resourcemanager.workloadsmicrosoftworkloadsmonitors.models.WorkloadMonitorProvisioningState;
import java.io.IOException;
import java.util.List;

/**
 * Describes the properties of an Alert Template for SAP monitor.
 */
@Fluent
public final class AlertTemplateProperties implements JsonSerializable<AlertTemplateProperties> {
    /*
     * Defines the SAP monitor Alert Template errors.
     */
    private ManagementError errors;

    /*
     * State of provisioning of the Alert Template.
     */
    private WorkloadMonitorProvisioningState provisioningState;

    /*
     * Display name of the alert template.
     */
    private String templateDisplayName;

    /*
     * The provider type for alert template. For example, the value can be SapHana.
     */
    private String providerType;

    /*
     * Description of the template.
     */
    private String description;

    /*
     * Severity of the alert. Should be an integer between [0-4]. Value of 0 is most severe and value of 4 is least
     * severe.
     */
    private Integer severity;

    /*
     * Query associated with the alert template.
     */
    private String query;

    /*
     * Operator used for threshold comparison.
     */
    private ConditionalOperator thresholdOperator;

    /*
     * Default threshold value.
     */
    private Integer defaultThreshold;

    /*
     * Minimum possible Default Threshold Value Associated with the Alert Template.
     */
    private Integer lowerBound;

    /*
     * Maximum possible Default Threshold Value Associated with the Alert Template.
     */
    private Integer upperBound;

    /*
     * Input option for the default threshold.
     */
    private DefaultThresholdInputOption defaultThresholdInputOption;

    /*
     * Unit of the alert.
     */
    private String alertUnit;

    /*
     * Describes the properties for metric measurement in alerts template.
     */
    private AlertTemplateMetricMeasurement metricMeasurement;

    /*
     * Describes the Query Input Parameter properties in alerts template.
     */
    private List<AlertTemplateQueryInputParameter> queryInputParameters;

    /**
     * Creates an instance of AlertTemplateProperties class.
     */
    public AlertTemplateProperties() {
    }

    /**
     * Get the errors property: Defines the SAP monitor Alert Template errors.
     * 
     * @return the errors value.
     */
    public ManagementError errors() {
        return this.errors;
    }

    /**
     * Get the provisioningState property: State of provisioning of the Alert Template.
     * 
     * @return the provisioningState value.
     */
    public WorkloadMonitorProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the templateDisplayName property: Display name of the alert template.
     * 
     * @return the templateDisplayName value.
     */
    public String templateDisplayName() {
        return this.templateDisplayName;
    }

    /**
     * Set the templateDisplayName property: Display name of the alert template.
     * 
     * @param templateDisplayName the templateDisplayName value to set.
     * @return the AlertTemplateProperties object itself.
     */
    public AlertTemplateProperties withTemplateDisplayName(String templateDisplayName) {
        this.templateDisplayName = templateDisplayName;
        return this;
    }

    /**
     * Get the providerType property: The provider type for alert template. For example, the value can be SapHana.
     * 
     * @return the providerType value.
     */
    public String providerType() {
        return this.providerType;
    }

    /**
     * Set the providerType property: The provider type for alert template. For example, the value can be SapHana.
     * 
     * @param providerType the providerType value to set.
     * @return the AlertTemplateProperties object itself.
     */
    public AlertTemplateProperties withProviderType(String providerType) {
        this.providerType = providerType;
        return this;
    }

    /**
     * Get the description property: Description of the template.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: Description of the template.
     * 
     * @param description the description value to set.
     * @return the AlertTemplateProperties object itself.
     */
    public AlertTemplateProperties withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the severity property: Severity of the alert. Should be an integer between [0-4]. Value of 0 is most severe
     * and value of 4 is least severe.
     * 
     * @return the severity value.
     */
    public Integer severity() {
        return this.severity;
    }

    /**
     * Set the severity property: Severity of the alert. Should be an integer between [0-4]. Value of 0 is most severe
     * and value of 4 is least severe.
     * 
     * @param severity the severity value to set.
     * @return the AlertTemplateProperties object itself.
     */
    public AlertTemplateProperties withSeverity(Integer severity) {
        this.severity = severity;
        return this;
    }

    /**
     * Get the query property: Query associated with the alert template.
     * 
     * @return the query value.
     */
    public String query() {
        return this.query;
    }

    /**
     * Set the query property: Query associated with the alert template.
     * 
     * @param query the query value to set.
     * @return the AlertTemplateProperties object itself.
     */
    public AlertTemplateProperties withQuery(String query) {
        this.query = query;
        return this;
    }

    /**
     * Get the thresholdOperator property: Operator used for threshold comparison.
     * 
     * @return the thresholdOperator value.
     */
    public ConditionalOperator thresholdOperator() {
        return this.thresholdOperator;
    }

    /**
     * Set the thresholdOperator property: Operator used for threshold comparison.
     * 
     * @param thresholdOperator the thresholdOperator value to set.
     * @return the AlertTemplateProperties object itself.
     */
    public AlertTemplateProperties withThresholdOperator(ConditionalOperator thresholdOperator) {
        this.thresholdOperator = thresholdOperator;
        return this;
    }

    /**
     * Get the defaultThreshold property: Default threshold value.
     * 
     * @return the defaultThreshold value.
     */
    public Integer defaultThreshold() {
        return this.defaultThreshold;
    }

    /**
     * Set the defaultThreshold property: Default threshold value.
     * 
     * @param defaultThreshold the defaultThreshold value to set.
     * @return the AlertTemplateProperties object itself.
     */
    public AlertTemplateProperties withDefaultThreshold(Integer defaultThreshold) {
        this.defaultThreshold = defaultThreshold;
        return this;
    }

    /**
     * Get the lowerBound property: Minimum possible Default Threshold Value Associated with the Alert Template.
     * 
     * @return the lowerBound value.
     */
    public Integer lowerBound() {
        return this.lowerBound;
    }

    /**
     * Set the lowerBound property: Minimum possible Default Threshold Value Associated with the Alert Template.
     * 
     * @param lowerBound the lowerBound value to set.
     * @return the AlertTemplateProperties object itself.
     */
    public AlertTemplateProperties withLowerBound(Integer lowerBound) {
        this.lowerBound = lowerBound;
        return this;
    }

    /**
     * Get the upperBound property: Maximum possible Default Threshold Value Associated with the Alert Template.
     * 
     * @return the upperBound value.
     */
    public Integer upperBound() {
        return this.upperBound;
    }

    /**
     * Set the upperBound property: Maximum possible Default Threshold Value Associated with the Alert Template.
     * 
     * @param upperBound the upperBound value to set.
     * @return the AlertTemplateProperties object itself.
     */
    public AlertTemplateProperties withUpperBound(Integer upperBound) {
        this.upperBound = upperBound;
        return this;
    }

    /**
     * Get the defaultThresholdInputOption property: Input option for the default threshold.
     * 
     * @return the defaultThresholdInputOption value.
     */
    public DefaultThresholdInputOption defaultThresholdInputOption() {
        return this.defaultThresholdInputOption;
    }

    /**
     * Set the defaultThresholdInputOption property: Input option for the default threshold.
     * 
     * @param defaultThresholdInputOption the defaultThresholdInputOption value to set.
     * @return the AlertTemplateProperties object itself.
     */
    public AlertTemplateProperties
        withDefaultThresholdInputOption(DefaultThresholdInputOption defaultThresholdInputOption) {
        this.defaultThresholdInputOption = defaultThresholdInputOption;
        return this;
    }

    /**
     * Get the alertUnit property: Unit of the alert.
     * 
     * @return the alertUnit value.
     */
    public String alertUnit() {
        return this.alertUnit;
    }

    /**
     * Set the alertUnit property: Unit of the alert.
     * 
     * @param alertUnit the alertUnit value to set.
     * @return the AlertTemplateProperties object itself.
     */
    public AlertTemplateProperties withAlertUnit(String alertUnit) {
        this.alertUnit = alertUnit;
        return this;
    }

    /**
     * Get the metricMeasurement property: Describes the properties for metric measurement in alerts template.
     * 
     * @return the metricMeasurement value.
     */
    public AlertTemplateMetricMeasurement metricMeasurement() {
        return this.metricMeasurement;
    }

    /**
     * Set the metricMeasurement property: Describes the properties for metric measurement in alerts template.
     * 
     * @param metricMeasurement the metricMeasurement value to set.
     * @return the AlertTemplateProperties object itself.
     */
    public AlertTemplateProperties withMetricMeasurement(AlertTemplateMetricMeasurement metricMeasurement) {
        this.metricMeasurement = metricMeasurement;
        return this;
    }

    /**
     * Get the queryInputParameters property: Describes the Query Input Parameter properties in alerts template.
     * 
     * @return the queryInputParameters value.
     */
    public List<AlertTemplateQueryInputParameter> queryInputParameters() {
        return this.queryInputParameters;
    }

    /**
     * Set the queryInputParameters property: Describes the Query Input Parameter properties in alerts template.
     * 
     * @param queryInputParameters the queryInputParameters value to set.
     * @return the AlertTemplateProperties object itself.
     */
    public AlertTemplateProperties
        withQueryInputParameters(List<AlertTemplateQueryInputParameter> queryInputParameters) {
        this.queryInputParameters = queryInputParameters;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (metricMeasurement() != null) {
            metricMeasurement().validate();
        }
        if (queryInputParameters() != null) {
            queryInputParameters().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("templateDisplayName", this.templateDisplayName);
        jsonWriter.writeStringField("providerType", this.providerType);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeNumberField("severity", this.severity);
        jsonWriter.writeStringField("query", this.query);
        jsonWriter.writeStringField("thresholdOperator",
            this.thresholdOperator == null ? null : this.thresholdOperator.toString());
        jsonWriter.writeNumberField("defaultThreshold", this.defaultThreshold);
        jsonWriter.writeNumberField("lowerBound", this.lowerBound);
        jsonWriter.writeNumberField("upperBound", this.upperBound);
        jsonWriter.writeStringField("defaultThresholdInputOption",
            this.defaultThresholdInputOption == null ? null : this.defaultThresholdInputOption.toString());
        jsonWriter.writeStringField("alertUnit", this.alertUnit);
        jsonWriter.writeJsonField("metricMeasurement", this.metricMeasurement);
        jsonWriter.writeArrayField("queryInputParameters", this.queryInputParameters,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AlertTemplateProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AlertTemplateProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AlertTemplateProperties.
     */
    public static AlertTemplateProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AlertTemplateProperties deserializedAlertTemplateProperties = new AlertTemplateProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("errors".equals(fieldName)) {
                    deserializedAlertTemplateProperties.errors = ManagementError.fromJson(reader);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedAlertTemplateProperties.provisioningState
                        = WorkloadMonitorProvisioningState.fromString(reader.getString());
                } else if ("templateDisplayName".equals(fieldName)) {
                    deserializedAlertTemplateProperties.templateDisplayName = reader.getString();
                } else if ("providerType".equals(fieldName)) {
                    deserializedAlertTemplateProperties.providerType = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedAlertTemplateProperties.description = reader.getString();
                } else if ("severity".equals(fieldName)) {
                    deserializedAlertTemplateProperties.severity = reader.getNullable(JsonReader::getInt);
                } else if ("query".equals(fieldName)) {
                    deserializedAlertTemplateProperties.query = reader.getString();
                } else if ("thresholdOperator".equals(fieldName)) {
                    deserializedAlertTemplateProperties.thresholdOperator
                        = ConditionalOperator.fromString(reader.getString());
                } else if ("defaultThreshold".equals(fieldName)) {
                    deserializedAlertTemplateProperties.defaultThreshold = reader.getNullable(JsonReader::getInt);
                } else if ("lowerBound".equals(fieldName)) {
                    deserializedAlertTemplateProperties.lowerBound = reader.getNullable(JsonReader::getInt);
                } else if ("upperBound".equals(fieldName)) {
                    deserializedAlertTemplateProperties.upperBound = reader.getNullable(JsonReader::getInt);
                } else if ("defaultThresholdInputOption".equals(fieldName)) {
                    deserializedAlertTemplateProperties.defaultThresholdInputOption
                        = DefaultThresholdInputOption.fromString(reader.getString());
                } else if ("alertUnit".equals(fieldName)) {
                    deserializedAlertTemplateProperties.alertUnit = reader.getString();
                } else if ("metricMeasurement".equals(fieldName)) {
                    deserializedAlertTemplateProperties.metricMeasurement
                        = AlertTemplateMetricMeasurement.fromJson(reader);
                } else if ("queryInputParameters".equals(fieldName)) {
                    List<AlertTemplateQueryInputParameter> queryInputParameters
                        = reader.readArray(reader1 -> AlertTemplateQueryInputParameter.fromJson(reader1));
                    deserializedAlertTemplateProperties.queryInputParameters = queryInputParameters;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAlertTemplateProperties;
        });
    }
}
