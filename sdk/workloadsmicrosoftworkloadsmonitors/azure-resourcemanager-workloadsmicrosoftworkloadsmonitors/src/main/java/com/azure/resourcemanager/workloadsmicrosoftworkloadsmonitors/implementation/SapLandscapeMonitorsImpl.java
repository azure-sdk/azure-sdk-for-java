// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.workloadsmicrosoftworkloadsmonitors.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.workloadsmicrosoftworkloadsmonitors.fluent.SapLandscapeMonitorsClient;
import com.azure.resourcemanager.workloadsmicrosoftworkloadsmonitors.fluent.models.SapLandscapeMonitorResourceInner;
import com.azure.resourcemanager.workloadsmicrosoftworkloadsmonitors.models.SapLandscapeMonitorResource;
import com.azure.resourcemanager.workloadsmicrosoftworkloadsmonitors.models.SapLandscapeMonitors;

public final class SapLandscapeMonitorsImpl implements SapLandscapeMonitors {
    private static final ClientLogger LOGGER = new ClientLogger(SapLandscapeMonitorsImpl.class);

    private final SapLandscapeMonitorsClient innerClient;

    private final com.azure.resourcemanager.workloadsmicrosoftworkloadsmonitors.WorkloadsManager serviceManager;

    public SapLandscapeMonitorsImpl(SapLandscapeMonitorsClient innerClient,
        com.azure.resourcemanager.workloadsmicrosoftworkloadsmonitors.WorkloadsManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<SapLandscapeMonitorResource> listByMonitor(String resourceGroupName, String monitorName) {
        PagedIterable<SapLandscapeMonitorResourceInner> inner
            = this.serviceClient().listByMonitor(resourceGroupName, monitorName);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new SapLandscapeMonitorResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<SapLandscapeMonitorResource> listByMonitor(String resourceGroupName, String monitorName,
        Context context) {
        PagedIterable<SapLandscapeMonitorResourceInner> inner
            = this.serviceClient().listByMonitor(resourceGroupName, monitorName, context);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new SapLandscapeMonitorResourceImpl(inner1, this.manager()));
    }

    public Response<SapLandscapeMonitorResource> getWithResponse(String resourceGroupName, String monitorName,
        Context context) {
        Response<SapLandscapeMonitorResourceInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, monitorName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new SapLandscapeMonitorResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SapLandscapeMonitorResource get(String resourceGroupName, String monitorName) {
        SapLandscapeMonitorResourceInner inner = this.serviceClient().get(resourceGroupName, monitorName);
        if (inner != null) {
            return new SapLandscapeMonitorResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SapLandscapeMonitorResource> createWithResponse(String resourceGroupName, String monitorName,
        SapLandscapeMonitorResourceInner resource, Context context) {
        Response<SapLandscapeMonitorResourceInner> inner
            = this.serviceClient().createWithResponse(resourceGroupName, monitorName, resource, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new SapLandscapeMonitorResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SapLandscapeMonitorResource create(String resourceGroupName, String monitorName,
        SapLandscapeMonitorResourceInner resource) {
        SapLandscapeMonitorResourceInner inner = this.serviceClient().create(resourceGroupName, monitorName, resource);
        if (inner != null) {
            return new SapLandscapeMonitorResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SapLandscapeMonitorResource> updateWithResponse(String resourceGroupName, String monitorName,
        SapLandscapeMonitorResourceInner properties, Context context) {
        Response<SapLandscapeMonitorResourceInner> inner
            = this.serviceClient().updateWithResponse(resourceGroupName, monitorName, properties, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new SapLandscapeMonitorResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SapLandscapeMonitorResource update(String resourceGroupName, String monitorName,
        SapLandscapeMonitorResourceInner properties) {
        SapLandscapeMonitorResourceInner inner
            = this.serviceClient().update(resourceGroupName, monitorName, properties);
        if (inner != null) {
            return new SapLandscapeMonitorResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteByResourceGroupWithResponse(String resourceGroupName, String monitorName,
        Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, monitorName, context);
    }

    public void deleteByResourceGroup(String resourceGroupName, String monitorName) {
        this.serviceClient().delete(resourceGroupName, monitorName);
    }

    private SapLandscapeMonitorsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.workloadsmicrosoftworkloadsmonitors.WorkloadsManager manager() {
        return this.serviceManager;
    }
}
