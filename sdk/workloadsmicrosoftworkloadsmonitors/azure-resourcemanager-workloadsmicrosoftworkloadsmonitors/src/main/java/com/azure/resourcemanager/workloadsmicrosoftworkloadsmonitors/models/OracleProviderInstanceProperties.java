// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.workloadsmicrosoftworkloadsmonitors.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Gets or sets the Oracle provider properties.
 */
@Fluent
public final class OracleProviderInstanceProperties extends ProviderSpecificProperties {
    /*
     * The provider type. For example, the value can be SapHana.
     */
    private String providerType = "Oracle";

    /*
     * Gets or sets the target virtual machine name.
     */
    private String hostname;

    /*
     * Gets or sets the oracle database sql port.
     */
    private String dbPort;

    /*
     * Gets or sets the oracle database name.
     */
    private String dbName;

    /*
     * Gets or sets the oracle database user name.
     */
    private String dbUsername;

    /*
     * Gets or sets the oracle database password.
     */
    private String dbPassword;

    /*
     * Gets or sets the key vault URI to secret with the database password.
     */
    private String dbPasswordUri;

    /*
     * Gets or sets the SAP System Identifier
     */
    private String sapSid;

    /*
     * Gets or sets certificate preference if secure communication is enabled.
     */
    private SslPreference sslPreference;

    /*
     * Gets or sets the blob URI to SSL certificate for the Oracle Database.
     */
    private String sslCertificateUri;

    /**
     * Creates an instance of OracleProviderInstanceProperties class.
     */
    public OracleProviderInstanceProperties() {
    }

    /**
     * Get the providerType property: The provider type. For example, the value can be SapHana.
     * 
     * @return the providerType value.
     */
    @Override
    public String providerType() {
        return this.providerType;
    }

    /**
     * Get the hostname property: Gets or sets the target virtual machine name.
     * 
     * @return the hostname value.
     */
    public String hostname() {
        return this.hostname;
    }

    /**
     * Set the hostname property: Gets or sets the target virtual machine name.
     * 
     * @param hostname the hostname value to set.
     * @return the OracleProviderInstanceProperties object itself.
     */
    public OracleProviderInstanceProperties withHostname(String hostname) {
        this.hostname = hostname;
        return this;
    }

    /**
     * Get the dbPort property: Gets or sets the oracle database sql port.
     * 
     * @return the dbPort value.
     */
    public String dbPort() {
        return this.dbPort;
    }

    /**
     * Set the dbPort property: Gets or sets the oracle database sql port.
     * 
     * @param dbPort the dbPort value to set.
     * @return the OracleProviderInstanceProperties object itself.
     */
    public OracleProviderInstanceProperties withDbPort(String dbPort) {
        this.dbPort = dbPort;
        return this;
    }

    /**
     * Get the dbName property: Gets or sets the oracle database name.
     * 
     * @return the dbName value.
     */
    public String dbName() {
        return this.dbName;
    }

    /**
     * Set the dbName property: Gets or sets the oracle database name.
     * 
     * @param dbName the dbName value to set.
     * @return the OracleProviderInstanceProperties object itself.
     */
    public OracleProviderInstanceProperties withDbName(String dbName) {
        this.dbName = dbName;
        return this;
    }

    /**
     * Get the dbUsername property: Gets or sets the oracle database user name.
     * 
     * @return the dbUsername value.
     */
    public String dbUsername() {
        return this.dbUsername;
    }

    /**
     * Set the dbUsername property: Gets or sets the oracle database user name.
     * 
     * @param dbUsername the dbUsername value to set.
     * @return the OracleProviderInstanceProperties object itself.
     */
    public OracleProviderInstanceProperties withDbUsername(String dbUsername) {
        this.dbUsername = dbUsername;
        return this;
    }

    /**
     * Get the dbPassword property: Gets or sets the oracle database password.
     * 
     * @return the dbPassword value.
     */
    public String dbPassword() {
        return this.dbPassword;
    }

    /**
     * Set the dbPassword property: Gets or sets the oracle database password.
     * 
     * @param dbPassword the dbPassword value to set.
     * @return the OracleProviderInstanceProperties object itself.
     */
    public OracleProviderInstanceProperties withDbPassword(String dbPassword) {
        this.dbPassword = dbPassword;
        return this;
    }

    /**
     * Get the dbPasswordUri property: Gets or sets the key vault URI to secret with the database password.
     * 
     * @return the dbPasswordUri value.
     */
    public String dbPasswordUri() {
        return this.dbPasswordUri;
    }

    /**
     * Set the dbPasswordUri property: Gets or sets the key vault URI to secret with the database password.
     * 
     * @param dbPasswordUri the dbPasswordUri value to set.
     * @return the OracleProviderInstanceProperties object itself.
     */
    public OracleProviderInstanceProperties withDbPasswordUri(String dbPasswordUri) {
        this.dbPasswordUri = dbPasswordUri;
        return this;
    }

    /**
     * Get the sapSid property: Gets or sets the SAP System Identifier.
     * 
     * @return the sapSid value.
     */
    public String sapSid() {
        return this.sapSid;
    }

    /**
     * Set the sapSid property: Gets or sets the SAP System Identifier.
     * 
     * @param sapSid the sapSid value to set.
     * @return the OracleProviderInstanceProperties object itself.
     */
    public OracleProviderInstanceProperties withSapSid(String sapSid) {
        this.sapSid = sapSid;
        return this;
    }

    /**
     * Get the sslPreference property: Gets or sets certificate preference if secure communication is enabled.
     * 
     * @return the sslPreference value.
     */
    public SslPreference sslPreference() {
        return this.sslPreference;
    }

    /**
     * Set the sslPreference property: Gets or sets certificate preference if secure communication is enabled.
     * 
     * @param sslPreference the sslPreference value to set.
     * @return the OracleProviderInstanceProperties object itself.
     */
    public OracleProviderInstanceProperties withSslPreference(SslPreference sslPreference) {
        this.sslPreference = sslPreference;
        return this;
    }

    /**
     * Get the sslCertificateUri property: Gets or sets the blob URI to SSL certificate for the Oracle Database.
     * 
     * @return the sslCertificateUri value.
     */
    public String sslCertificateUri() {
        return this.sslCertificateUri;
    }

    /**
     * Set the sslCertificateUri property: Gets or sets the blob URI to SSL certificate for the Oracle Database.
     * 
     * @param sslCertificateUri the sslCertificateUri value to set.
     * @return the OracleProviderInstanceProperties object itself.
     */
    public OracleProviderInstanceProperties withSslCertificateUri(String sslCertificateUri) {
        this.sslCertificateUri = sslCertificateUri;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("providerType", this.providerType);
        jsonWriter.writeStringField("hostname", this.hostname);
        jsonWriter.writeStringField("dbPort", this.dbPort);
        jsonWriter.writeStringField("dbName", this.dbName);
        jsonWriter.writeStringField("dbUsername", this.dbUsername);
        jsonWriter.writeStringField("dbPassword", this.dbPassword);
        jsonWriter.writeStringField("dbPasswordUri", this.dbPasswordUri);
        jsonWriter.writeStringField("sapSid", this.sapSid);
        jsonWriter.writeStringField("sslPreference", this.sslPreference == null ? null : this.sslPreference.toString());
        jsonWriter.writeStringField("sslCertificateUri", this.sslCertificateUri);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OracleProviderInstanceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OracleProviderInstanceProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the OracleProviderInstanceProperties.
     */
    public static OracleProviderInstanceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OracleProviderInstanceProperties deserializedOracleProviderInstanceProperties
                = new OracleProviderInstanceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("providerType".equals(fieldName)) {
                    deserializedOracleProviderInstanceProperties.providerType = reader.getString();
                } else if ("hostname".equals(fieldName)) {
                    deserializedOracleProviderInstanceProperties.hostname = reader.getString();
                } else if ("dbPort".equals(fieldName)) {
                    deserializedOracleProviderInstanceProperties.dbPort = reader.getString();
                } else if ("dbName".equals(fieldName)) {
                    deserializedOracleProviderInstanceProperties.dbName = reader.getString();
                } else if ("dbUsername".equals(fieldName)) {
                    deserializedOracleProviderInstanceProperties.dbUsername = reader.getString();
                } else if ("dbPassword".equals(fieldName)) {
                    deserializedOracleProviderInstanceProperties.dbPassword = reader.getString();
                } else if ("dbPasswordUri".equals(fieldName)) {
                    deserializedOracleProviderInstanceProperties.dbPasswordUri = reader.getString();
                } else if ("sapSid".equals(fieldName)) {
                    deserializedOracleProviderInstanceProperties.sapSid = reader.getString();
                } else if ("sslPreference".equals(fieldName)) {
                    deserializedOracleProviderInstanceProperties.sslPreference
                        = SslPreference.fromString(reader.getString());
                } else if ("sslCertificateUri".equals(fieldName)) {
                    deserializedOracleProviderInstanceProperties.sslCertificateUri = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOracleProviderInstanceProperties;
        });
    }
}
