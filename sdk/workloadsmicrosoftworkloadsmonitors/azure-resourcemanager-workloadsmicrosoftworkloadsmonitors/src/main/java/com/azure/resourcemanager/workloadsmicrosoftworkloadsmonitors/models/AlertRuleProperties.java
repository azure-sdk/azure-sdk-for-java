// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.workloadsmicrosoftworkloadsmonitors.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Describes the properties of an alert.
 */
@Fluent
public final class AlertRuleProperties implements JsonSerializable<AlertRuleProperties> {
    /*
     * Indicates whether the alert is in an enabled state.
     */
    private AlertRuleStatus status;

    /*
     * Severity of the alert. Should be an integer between [0-4]. Value of 0 is severest.
     */
    private Integer severity;

    /*
     * Action Group resource Ids to invoke when the alert fires
     */
    private List<String> actionGroups;

    /*
     * The threshold of the alert.
     */
    private Integer threshold;

    /*
     * The threshold operator of the alert.
     */
    private ConditionalOperator thresholdOperator;

    /*
     * The period of time on which the Alert query will be executed.
     */
    private Integer windowSize;

    /*
     * How often the scheduled query rule is evaluated.
     */
    private Integer evaluationFrequency;

    /*
     * The number of failing periods to trigger an alert.
     */
    private Integer failingPeriodsToAlert;

    /*
     * The operator for failing periods.
     */
    private ConditionalOperator failingPeriodsOperator;

    /*
     * Mute actions for the chosen period of time after the alert is fired.
     */
    private Integer muteActionsDuration;

    /*
     * The value that indicates whether the alert should be automatically resolved or not. The default is Disable.
     */
    private AlertAutoMitigate autoMitigate;

    /*
     * Evaluation of metric on a particular column.
     */
    private String dimension;

    /*
     * The alert query parameters.
     */
    private List<AlertQueryParameter> alertQueryParameters;

    /**
     * Creates an instance of AlertRuleProperties class.
     */
    public AlertRuleProperties() {
    }

    /**
     * Get the status property: Indicates whether the alert is in an enabled state.
     * 
     * @return the status value.
     */
    public AlertRuleStatus status() {
        return this.status;
    }

    /**
     * Set the status property: Indicates whether the alert is in an enabled state.
     * 
     * @param status the status value to set.
     * @return the AlertRuleProperties object itself.
     */
    public AlertRuleProperties withStatus(AlertRuleStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Get the severity property: Severity of the alert. Should be an integer between [0-4]. Value of 0 is severest.
     * 
     * @return the severity value.
     */
    public Integer severity() {
        return this.severity;
    }

    /**
     * Set the severity property: Severity of the alert. Should be an integer between [0-4]. Value of 0 is severest.
     * 
     * @param severity the severity value to set.
     * @return the AlertRuleProperties object itself.
     */
    public AlertRuleProperties withSeverity(Integer severity) {
        this.severity = severity;
        return this;
    }

    /**
     * Get the actionGroups property: Action Group resource Ids to invoke when the alert fires.
     * 
     * @return the actionGroups value.
     */
    public List<String> actionGroups() {
        return this.actionGroups;
    }

    /**
     * Set the actionGroups property: Action Group resource Ids to invoke when the alert fires.
     * 
     * @param actionGroups the actionGroups value to set.
     * @return the AlertRuleProperties object itself.
     */
    public AlertRuleProperties withActionGroups(List<String> actionGroups) {
        this.actionGroups = actionGroups;
        return this;
    }

    /**
     * Get the threshold property: The threshold of the alert.
     * 
     * @return the threshold value.
     */
    public Integer threshold() {
        return this.threshold;
    }

    /**
     * Set the threshold property: The threshold of the alert.
     * 
     * @param threshold the threshold value to set.
     * @return the AlertRuleProperties object itself.
     */
    public AlertRuleProperties withThreshold(Integer threshold) {
        this.threshold = threshold;
        return this;
    }

    /**
     * Get the thresholdOperator property: The threshold operator of the alert.
     * 
     * @return the thresholdOperator value.
     */
    public ConditionalOperator thresholdOperator() {
        return this.thresholdOperator;
    }

    /**
     * Set the thresholdOperator property: The threshold operator of the alert.
     * 
     * @param thresholdOperator the thresholdOperator value to set.
     * @return the AlertRuleProperties object itself.
     */
    public AlertRuleProperties withThresholdOperator(ConditionalOperator thresholdOperator) {
        this.thresholdOperator = thresholdOperator;
        return this;
    }

    /**
     * Get the windowSize property: The period of time on which the Alert query will be executed.
     * 
     * @return the windowSize value.
     */
    public Integer windowSize() {
        return this.windowSize;
    }

    /**
     * Set the windowSize property: The period of time on which the Alert query will be executed.
     * 
     * @param windowSize the windowSize value to set.
     * @return the AlertRuleProperties object itself.
     */
    public AlertRuleProperties withWindowSize(Integer windowSize) {
        this.windowSize = windowSize;
        return this;
    }

    /**
     * Get the evaluationFrequency property: How often the scheduled query rule is evaluated.
     * 
     * @return the evaluationFrequency value.
     */
    public Integer evaluationFrequency() {
        return this.evaluationFrequency;
    }

    /**
     * Set the evaluationFrequency property: How often the scheduled query rule is evaluated.
     * 
     * @param evaluationFrequency the evaluationFrequency value to set.
     * @return the AlertRuleProperties object itself.
     */
    public AlertRuleProperties withEvaluationFrequency(Integer evaluationFrequency) {
        this.evaluationFrequency = evaluationFrequency;
        return this;
    }

    /**
     * Get the failingPeriodsToAlert property: The number of failing periods to trigger an alert.
     * 
     * @return the failingPeriodsToAlert value.
     */
    public Integer failingPeriodsToAlert() {
        return this.failingPeriodsToAlert;
    }

    /**
     * Set the failingPeriodsToAlert property: The number of failing periods to trigger an alert.
     * 
     * @param failingPeriodsToAlert the failingPeriodsToAlert value to set.
     * @return the AlertRuleProperties object itself.
     */
    public AlertRuleProperties withFailingPeriodsToAlert(Integer failingPeriodsToAlert) {
        this.failingPeriodsToAlert = failingPeriodsToAlert;
        return this;
    }

    /**
     * Get the failingPeriodsOperator property: The operator for failing periods.
     * 
     * @return the failingPeriodsOperator value.
     */
    public ConditionalOperator failingPeriodsOperator() {
        return this.failingPeriodsOperator;
    }

    /**
     * Set the failingPeriodsOperator property: The operator for failing periods.
     * 
     * @param failingPeriodsOperator the failingPeriodsOperator value to set.
     * @return the AlertRuleProperties object itself.
     */
    public AlertRuleProperties withFailingPeriodsOperator(ConditionalOperator failingPeriodsOperator) {
        this.failingPeriodsOperator = failingPeriodsOperator;
        return this;
    }

    /**
     * Get the muteActionsDuration property: Mute actions for the chosen period of time after the alert is fired.
     * 
     * @return the muteActionsDuration value.
     */
    public Integer muteActionsDuration() {
        return this.muteActionsDuration;
    }

    /**
     * Set the muteActionsDuration property: Mute actions for the chosen period of time after the alert is fired.
     * 
     * @param muteActionsDuration the muteActionsDuration value to set.
     * @return the AlertRuleProperties object itself.
     */
    public AlertRuleProperties withMuteActionsDuration(Integer muteActionsDuration) {
        this.muteActionsDuration = muteActionsDuration;
        return this;
    }

    /**
     * Get the autoMitigate property: The value that indicates whether the alert should be automatically resolved or
     * not. The default is Disable.
     * 
     * @return the autoMitigate value.
     */
    public AlertAutoMitigate autoMitigate() {
        return this.autoMitigate;
    }

    /**
     * Set the autoMitigate property: The value that indicates whether the alert should be automatically resolved or
     * not. The default is Disable.
     * 
     * @param autoMitigate the autoMitigate value to set.
     * @return the AlertRuleProperties object itself.
     */
    public AlertRuleProperties withAutoMitigate(AlertAutoMitigate autoMitigate) {
        this.autoMitigate = autoMitigate;
        return this;
    }

    /**
     * Get the dimension property: Evaluation of metric on a particular column.
     * 
     * @return the dimension value.
     */
    public String dimension() {
        return this.dimension;
    }

    /**
     * Set the dimension property: Evaluation of metric on a particular column.
     * 
     * @param dimension the dimension value to set.
     * @return the AlertRuleProperties object itself.
     */
    public AlertRuleProperties withDimension(String dimension) {
        this.dimension = dimension;
        return this;
    }

    /**
     * Get the alertQueryParameters property: The alert query parameters.
     * 
     * @return the alertQueryParameters value.
     */
    public List<AlertQueryParameter> alertQueryParameters() {
        return this.alertQueryParameters;
    }

    /**
     * Set the alertQueryParameters property: The alert query parameters.
     * 
     * @param alertQueryParameters the alertQueryParameters value to set.
     * @return the AlertRuleProperties object itself.
     */
    public AlertRuleProperties withAlertQueryParameters(List<AlertQueryParameter> alertQueryParameters) {
        this.alertQueryParameters = alertQueryParameters;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (alertQueryParameters() != null) {
            alertQueryParameters().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        jsonWriter.writeNumberField("severity", this.severity);
        jsonWriter.writeArrayField("actionGroups", this.actionGroups, (writer, element) -> writer.writeString(element));
        jsonWriter.writeNumberField("threshold", this.threshold);
        jsonWriter.writeStringField("thresholdOperator",
            this.thresholdOperator == null ? null : this.thresholdOperator.toString());
        jsonWriter.writeNumberField("windowSize", this.windowSize);
        jsonWriter.writeNumberField("evaluationFrequency", this.evaluationFrequency);
        jsonWriter.writeNumberField("failingPeriodsToAlert", this.failingPeriodsToAlert);
        jsonWriter.writeStringField("failingPeriodsOperator",
            this.failingPeriodsOperator == null ? null : this.failingPeriodsOperator.toString());
        jsonWriter.writeNumberField("muteActionsDuration", this.muteActionsDuration);
        jsonWriter.writeStringField("autoMitigate", this.autoMitigate == null ? null : this.autoMitigate.toString());
        jsonWriter.writeStringField("dimension", this.dimension);
        jsonWriter.writeArrayField("alertQueryParameters", this.alertQueryParameters,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AlertRuleProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AlertRuleProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the AlertRuleProperties.
     */
    public static AlertRuleProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AlertRuleProperties deserializedAlertRuleProperties = new AlertRuleProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("status".equals(fieldName)) {
                    deserializedAlertRuleProperties.status = AlertRuleStatus.fromString(reader.getString());
                } else if ("severity".equals(fieldName)) {
                    deserializedAlertRuleProperties.severity = reader.getNullable(JsonReader::getInt);
                } else if ("actionGroups".equals(fieldName)) {
                    List<String> actionGroups = reader.readArray(reader1 -> reader1.getString());
                    deserializedAlertRuleProperties.actionGroups = actionGroups;
                } else if ("threshold".equals(fieldName)) {
                    deserializedAlertRuleProperties.threshold = reader.getNullable(JsonReader::getInt);
                } else if ("thresholdOperator".equals(fieldName)) {
                    deserializedAlertRuleProperties.thresholdOperator
                        = ConditionalOperator.fromString(reader.getString());
                } else if ("windowSize".equals(fieldName)) {
                    deserializedAlertRuleProperties.windowSize = reader.getNullable(JsonReader::getInt);
                } else if ("evaluationFrequency".equals(fieldName)) {
                    deserializedAlertRuleProperties.evaluationFrequency = reader.getNullable(JsonReader::getInt);
                } else if ("failingPeriodsToAlert".equals(fieldName)) {
                    deserializedAlertRuleProperties.failingPeriodsToAlert = reader.getNullable(JsonReader::getInt);
                } else if ("failingPeriodsOperator".equals(fieldName)) {
                    deserializedAlertRuleProperties.failingPeriodsOperator
                        = ConditionalOperator.fromString(reader.getString());
                } else if ("muteActionsDuration".equals(fieldName)) {
                    deserializedAlertRuleProperties.muteActionsDuration = reader.getNullable(JsonReader::getInt);
                } else if ("autoMitigate".equals(fieldName)) {
                    deserializedAlertRuleProperties.autoMitigate = AlertAutoMitigate.fromString(reader.getString());
                } else if ("dimension".equals(fieldName)) {
                    deserializedAlertRuleProperties.dimension = reader.getString();
                } else if ("alertQueryParameters".equals(fieldName)) {
                    List<AlertQueryParameter> alertQueryParameters
                        = reader.readArray(reader1 -> AlertQueryParameter.fromJson(reader1));
                    deserializedAlertRuleProperties.alertQueryParameters = alertQueryParameters;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAlertRuleProperties;
        });
    }
}
