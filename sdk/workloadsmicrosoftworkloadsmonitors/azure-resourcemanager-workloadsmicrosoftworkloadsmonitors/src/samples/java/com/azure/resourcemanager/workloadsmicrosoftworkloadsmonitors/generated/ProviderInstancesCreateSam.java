// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.workloadsmicrosoftworkloadsmonitors.generated;

import com.azure.resourcemanager.workloadsmicrosoftworkloadsmonitors.models.Db2ProviderInstanceProperties;
import com.azure.resourcemanager.workloadsmicrosoftworkloadsmonitors.models.HanaDbProviderInstanceProperties;
import com.azure.resourcemanager.workloadsmicrosoftworkloadsmonitors.models.MsSqlServerProviderInstanceProperties;
import com.azure.resourcemanager.workloadsmicrosoftworkloadsmonitors.models.OracleProviderInstanceProperties;
import com.azure.resourcemanager.workloadsmicrosoftworkloadsmonitors.models.PrometheusHaClusterProviderInstanceProperties;
import com.azure.resourcemanager.workloadsmicrosoftworkloadsmonitors.models.PrometheusOsProviderInstanceProperties;
import com.azure.resourcemanager.workloadsmicrosoftworkloadsmonitors.models.SapNetWeaverProviderInstanceProperties;
import com.azure.resourcemanager.workloadsmicrosoftworkloadsmonitors.models.SslPreference;
import java.util.Arrays;

/**
 * Samples for ProviderInstances Create.
 */
public final class ProviderInstancesCreateSam {
    /*
     * x-ms-original-file:
     * specification/workloads/resource-manager/Microsoft.Workloads/monitors/preview/2024-02-01-preview/examples/
     * ProviderInstances_Create_Create_A_Db2_Provider_With_Root_Certificate.json
     */
    /**
     * Sample code: Create a Db2 provider with Root Certificate.
     * 
     * @param manager Entry point to WorkloadsManager.
     */
    public static void createADb2ProviderWithRootCertificate(
        com.azure.resourcemanager.workloadsmicrosoftworkloadsmonitors.WorkloadsManager manager) {
        manager.providerInstances()
            .define("myProviderInstance")
            .withExistingMonitor("myResourceGroup", "mySapMonitor")
            .withProviderSettings(new Db2ProviderInstanceProperties().withHostname("hostname")
                .withDbName("dbName")
                .withDbPort("dbPort")
                .withDbUsername("username")
                .withDbPassword("fakeTokenPlaceholder")
                .withDbPasswordUri("fakeTokenPlaceholder")
                .withSapSid("SID")
                .withSslPreference(SslPreference.ROOT_CERTIFICATE))
            .create();
    }

    /*
     * x-ms-original-file:
     * specification/workloads/resource-manager/Microsoft.Workloads/monitors/preview/2024-02-01-preview/examples/
     * ProviderInstances_Create_Create_A_Sap_Monitor_Oracle_provider.json
     */
    /**
     * Sample code: Create a Oracle provider.
     * 
     * @param manager Entry point to WorkloadsManager.
     */
    public static void
        createAOracleProvider(com.azure.resourcemanager.workloadsmicrosoftworkloadsmonitors.WorkloadsManager manager) {
        manager.providerInstances()
            .define("myProviderInstance")
            .withExistingMonitor("myResourceGroup", "mySapMonitor")
            .withProviderSettings(new OracleProviderInstanceProperties().withHostname("hostname")
                .withDbPort("dbPort")
                .withDbName("dbName")
                .withDbUsername("username")
                .withDbPassword("fakeTokenPlaceholder")
                .withDbPasswordUri("fakeTokenPlaceholder")
                .withSapSid("SID")
                .withSslPreference(SslPreference.SERVER_CERTIFICATE)
                .withSslCertificateUri("https://storageaccount.blob.core.windows.net/containername/filename"))
            .create();
    }

    /*
     * x-ms-original-file:
     * specification/workloads/resource-manager/Microsoft.Workloads/monitors/preview/2024-02-01-preview/examples/
     * ProviderInstances_Create_Create_A_Sap_Monitor_Hana_Provider.json
     */
    /**
     * Sample code: Create a SAP monitor Hana provider.
     * 
     * @param manager Entry point to WorkloadsManager.
     */
    public static void createASAPMonitorHanaProvider(
        com.azure.resourcemanager.workloadsmicrosoftworkloadsmonitors.WorkloadsManager manager) {
        manager.providerInstances()
            .define("myProviderInstance")
            .withExistingMonitor("myResourceGroup", "mySapMonitor")
            .withProviderSettings(new HanaDbProviderInstanceProperties().withHostname("name")
                .withDbName("db")
                .withSqlPort("0000")
                .withInstanceNumber("00")
                .withDbUsername("user")
                .withDbPassword("fakeTokenPlaceholder")
                .withDbPasswordUri("fakeTokenPlaceholder")
                .withSslCertificateUri("https://storageaccount.blob.core.windows.net/containername/filename")
                .withSslHostnameInCertificate("xyz.domain.com")
                .withSslPreference(SslPreference.SERVER_CERTIFICATE)
                .withSapSid("SID"))
            .create();
    }

    /*
     * x-ms-original-file:
     * specification/workloads/resource-manager/Microsoft.Workloads/monitors/preview/2024-02-01-preview/examples/
     * ProviderInstances_Create_Create_A_Sap_Monitor_Net_Weaver_Provider_With_Root_Certificate.json
     */
    /**
     * Sample code: Create a SAP monitor NetWeaver provider with Root Certificate.
     * 
     * @param manager Entry point to WorkloadsManager.
     */
    public static void createASAPMonitorNetWeaverProviderWithRootCertificate(
        com.azure.resourcemanager.workloadsmicrosoftworkloadsmonitors.WorkloadsManager manager) {
        manager.providerInstances()
            .define("myProviderInstance")
            .withExistingMonitor("myResourceGroup", "mySapMonitor")
            .withProviderSettings(new SapNetWeaverProviderInstanceProperties().withSapSid("SID")
                .withSapHostname("name")
                .withSapInstanceNr("00")
                .withSapHostFileEntries(Arrays.asList("127.0.0.1 name fqdn"))
                .withSapUsername("username")
                .withSapPassword("fakeTokenPlaceholder")
                .withSapPasswordUri("fakeTokenPlaceholder")
                .withSapClientId("111")
                .withSapPortNumber("1234")
                .withSslPreference(SslPreference.ROOT_CERTIFICATE))
            .create();
    }

    /*
     * x-ms-original-file:
     * specification/workloads/resource-manager/Microsoft.Workloads/monitors/preview/2024-02-01-preview/examples/
     * ProviderInstances_Create_Create_A_Ms_Sql_Server_Provider_With_Root_Certificate.json
     */
    /**
     * Sample code: Create a MsSqlServer provider with Root Certificate.
     * 
     * @param manager Entry point to WorkloadsManager.
     */
    public static void createAMsSqlServerProviderWithRootCertificate(
        com.azure.resourcemanager.workloadsmicrosoftworkloadsmonitors.WorkloadsManager manager) {
        manager.providerInstances()
            .define("myProviderInstance")
            .withExistingMonitor("myResourceGroup", "mySapMonitor")
            .withProviderSettings(new MsSqlServerProviderInstanceProperties().withHostname("hostname")
                .withDbPort("5912")
                .withDbUsername("user")
                .withDbPassword("fakeTokenPlaceholder")
                .withDbPasswordUri("fakeTokenPlaceholder")
                .withSapSid("sid")
                .withSslPreference(SslPreference.ROOT_CERTIFICATE))
            .create();
    }

    /*
     * x-ms-original-file:
     * specification/workloads/resource-manager/Microsoft.Workloads/monitors/preview/2024-02-01-preview/examples/
     * ProviderInstances_Create_Create_A_Os_Provider_With_Root_Certificate.json
     */
    /**
     * Sample code: Create a OS provider with Root Certificate.
     * 
     * @param manager Entry point to WorkloadsManager.
     */
    public static void createAOSProviderWithRootCertificate(
        com.azure.resourcemanager.workloadsmicrosoftworkloadsmonitors.WorkloadsManager manager) {
        manager.providerInstances()
            .define("myProviderInstance")
            .withExistingMonitor("myResourceGroup", "mySapMonitor")
            .withProviderSettings(
                new PrometheusOsProviderInstanceProperties().withPrometheusUrl("http://192.168.0.0:9090/metrics")
                    .withSslPreference(SslPreference.ROOT_CERTIFICATE)
                    .withSapSid("SID"))
            .create();
    }

    /*
     * x-ms-original-file:
     * specification/workloads/resource-manager/Microsoft.Workloads/monitors/preview/2024-02-01-preview/examples/
     * ProviderInstances_Create_Create_A_Sap_Monitor_Hana_Provider_With_Root_Certificate.json
     */
    /**
     * Sample code: Create a SAP monitor Hana provider with Root Certificate.
     * 
     * @param manager Entry point to WorkloadsManager.
     */
    public static void createASAPMonitorHanaProviderWithRootCertificate(
        com.azure.resourcemanager.workloadsmicrosoftworkloadsmonitors.WorkloadsManager manager) {
        manager.providerInstances()
            .define("myProviderInstance")
            .withExistingMonitor("myResourceGroup", "mySapMonitor")
            .withProviderSettings(new HanaDbProviderInstanceProperties().withHostname("name")
                .withDbName("db")
                .withSqlPort("0000")
                .withInstanceNumber("00")
                .withDbUsername("user")
                .withDbPassword("fakeTokenPlaceholder")
                .withDbPasswordUri("fakeTokenPlaceholder")
                .withSslHostnameInCertificate("xyz.domain.com")
                .withSslPreference(SslPreference.ROOT_CERTIFICATE)
                .withSapSid("SID"))
            .create();
    }

    /*
     * x-ms-original-file:
     * specification/workloads/resource-manager/Microsoft.Workloads/monitors/preview/2024-02-01-preview/examples/
     * ProviderInstances_Create_Create_A_Ms_Sql_Server_Provider.json
     */
    /**
     * Sample code: Create a MsSqlServer provider.
     * 
     * @param manager Entry point to WorkloadsManager.
     */
    public static void createAMsSqlServerProvider(
        com.azure.resourcemanager.workloadsmicrosoftworkloadsmonitors.WorkloadsManager manager) {
        manager.providerInstances()
            .define("myProviderInstance")
            .withExistingMonitor("myResourceGroup", "mySapMonitor")
            .withProviderSettings(new MsSqlServerProviderInstanceProperties().withHostname("hostname")
                .withDbPort("5912")
                .withDbUsername("user")
                .withDbPassword("fakeTokenPlaceholder")
                .withDbPasswordUri("fakeTokenPlaceholder")
                .withSapSid("sid")
                .withSslPreference(SslPreference.SERVER_CERTIFICATE)
                .withSslCertificateUri("https://storageaccount.blob.core.windows.net/containername/filename"))
            .create();
    }

    /*
     * x-ms-original-file:
     * specification/workloads/resource-manager/Microsoft.Workloads/monitors/preview/2024-02-01-preview/examples/
     * ProviderInstances_Create_Create_A_Sap_Monitor_Oracle_Provider_With_Root_Certificate.json
     */
    /**
     * Sample code: Create a SAP monitor Oracle provider with Root Certificate.
     * 
     * @param manager Entry point to WorkloadsManager.
     */
    public static void createASAPMonitorOracleProviderWithRootCertificate(
        com.azure.resourcemanager.workloadsmicrosoftworkloadsmonitors.WorkloadsManager manager) {
        manager.providerInstances()
            .define("myProviderInstance")
            .withExistingMonitor("myResourceGroup", "mySapMonitor")
            .withProviderSettings(new OracleProviderInstanceProperties().withHostname("hostname")
                .withDbPort("dbPort")
                .withDbName("dbName")
                .withDbUsername("username")
                .withDbPassword("fakeTokenPlaceholder")
                .withDbPasswordUri("fakeTokenPlaceholder")
                .withSapSid("SID")
                .withSslPreference(SslPreference.ROOT_CERTIFICATE))
            .create();
    }

    /*
     * x-ms-original-file:
     * specification/workloads/resource-manager/Microsoft.Workloads/monitors/preview/2024-02-01-preview/examples/
     * ProviderInstances_Create_Create_A_Prometheus_Ha_Cluster_Provider.json
     */
    /**
     * Sample code: Create a PrometheusHaCluster provider.
     * 
     * @param manager Entry point to WorkloadsManager.
     */
    public static void createAPrometheusHaClusterProvider(
        com.azure.resourcemanager.workloadsmicrosoftworkloadsmonitors.WorkloadsManager manager) {
        manager.providerInstances()
            .define("myProviderInstance")
            .withExistingMonitor("myResourceGroup", "mySapMonitor")
            .withProviderSettings(
                new PrometheusHaClusterProviderInstanceProperties().withPrometheusUrl("http://192.168.0.0:9090/metrics")
                    .withHostname("hostname")
                    .withSid("sid")
                    .withClusterName("clusterName")
                    .withSslPreference(SslPreference.SERVER_CERTIFICATE)
                    .withSslCertificateUri("https://storageaccount.blob.core.windows.net/containername/filename"))
            .create();
    }

    /*
     * x-ms-original-file:
     * specification/workloads/resource-manager/Microsoft.Workloads/monitors/preview/2024-02-01-preview/examples/
     * ProviderInstances_Create_Create_A_Prometheus_Ha_Cluster_Provider_With_Root_Certificate.json
     */
    /**
     * Sample code: Create a PrometheusHaCluster provider with Root Certificate.
     * 
     * @param manager Entry point to WorkloadsManager.
     */
    public static void createAPrometheusHaClusterProviderWithRootCertificate(
        com.azure.resourcemanager.workloadsmicrosoftworkloadsmonitors.WorkloadsManager manager) {
        manager.providerInstances()
            .define("myProviderInstance")
            .withExistingMonitor("myResourceGroup", "mySapMonitor")
            .withProviderSettings(
                new PrometheusHaClusterProviderInstanceProperties().withPrometheusUrl("http://192.168.0.0:9090/metrics")
                    .withHostname("hostname")
                    .withSid("sid")
                    .withClusterName("clusterName")
                    .withSslPreference(SslPreference.ROOT_CERTIFICATE))
            .create();
    }

    /*
     * x-ms-original-file:
     * specification/workloads/resource-manager/Microsoft.Workloads/monitors/preview/2024-02-01-preview/examples/
     * ProviderInstances_Create_Create_A_Db2_Provider.json
     */
    /**
     * Sample code: Create a Db2 provider.
     * 
     * @param manager Entry point to WorkloadsManager.
     */
    public static void
        createADb2Provider(com.azure.resourcemanager.workloadsmicrosoftworkloadsmonitors.WorkloadsManager manager) {
        manager.providerInstances()
            .define("myProviderInstance")
            .withExistingMonitor("myResourceGroup", "mySapMonitor")
            .withProviderSettings(new Db2ProviderInstanceProperties().withHostname("hostname")
                .withDbName("dbName")
                .withDbPort("dbPort")
                .withDbUsername("username")
                .withDbPassword("fakeTokenPlaceholder")
                .withDbPasswordUri("fakeTokenPlaceholder")
                .withSapSid("SID")
                .withSslPreference(SslPreference.SERVER_CERTIFICATE)
                .withSslCertificateUri("https://storageaccount.blob.core.windows.net/containername/filename"))
            .create();
    }

    /*
     * x-ms-original-file:
     * specification/workloads/resource-manager/Microsoft.Workloads/monitors/preview/2024-02-01-preview/examples/
     * ProviderInstances_Create_Create_A_Os_Provider.json
     */
    /**
     * Sample code: Create a OS provider.
     * 
     * @param manager Entry point to WorkloadsManager.
     */
    public static void
        createAOSProvider(com.azure.resourcemanager.workloadsmicrosoftworkloadsmonitors.WorkloadsManager manager) {
        manager.providerInstances()
            .define("myProviderInstance")
            .withExistingMonitor("myResourceGroup", "mySapMonitor")
            .withProviderSettings(
                new PrometheusOsProviderInstanceProperties().withPrometheusUrl("http://192.168.0.0:9090/metrics")
                    .withSslPreference(SslPreference.SERVER_CERTIFICATE)
                    .withSslCertificateUri("https://storageaccount.blob.core.windows.net/containername/filename")
                    .withSapSid("SID"))
            .create();
    }

    /*
     * x-ms-original-file:
     * specification/workloads/resource-manager/Microsoft.Workloads/monitors/preview/2024-02-01-preview/examples/
     * ProviderInstances_Create_Create_A_Sap_Monitor_Net_Weaver_Provider.json
     */
    /**
     * Sample code: Create a SAP monitor NetWeaver provider.
     * 
     * @param manager Entry point to WorkloadsManager.
     */
    public static void createASAPMonitorNetWeaverProvider(
        com.azure.resourcemanager.workloadsmicrosoftworkloadsmonitors.WorkloadsManager manager) {
        manager.providerInstances()
            .define("myProviderInstance")
            .withExistingMonitor("myResourceGroup", "mySapMonitor")
            .withProviderSettings(new SapNetWeaverProviderInstanceProperties().withSapSid("SID")
                .withSapHostname("name")
                .withSapInstanceNr("00")
                .withSapHostFileEntries(Arrays.asList("127.0.0.1 name fqdn"))
                .withSapUsername("username")
                .withSapPassword("fakeTokenPlaceholder")
                .withSapPasswordUri("fakeTokenPlaceholder")
                .withSapClientId("111")
                .withSapPortNumber("1234")
                .withSslCertificateUri("https://storageaccount.blob.core.windows.net/containername/filename")
                .withSslPreference(SslPreference.SERVER_CERTIFICATE))
            .create();
    }
}
