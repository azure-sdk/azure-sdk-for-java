// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.workloadsmicrosoftworkloadsmonitors.generated;

import com.azure.resourcemanager.workloadsmicrosoftworkloadsmonitors.models.AlertAutoMitigate;
import com.azure.resourcemanager.workloadsmicrosoftworkloadsmonitors.models.AlertQueryParameter;
import com.azure.resourcemanager.workloadsmicrosoftworkloadsmonitors.models.AlertRuleProperties;
import com.azure.resourcemanager.workloadsmicrosoftworkloadsmonitors.models.AlertRuleStatus;
import com.azure.resourcemanager.workloadsmicrosoftworkloadsmonitors.models.ConditionalOperator;
import java.util.Arrays;

/**
 * Samples for Alerts Create.
 */
public final class AlertsCreateSamples {
    /*
     * x-ms-original-file:
     * specification/workloads/resource-manager/Microsoft.Workloads/monitors/preview/2024-02-01-preview/examples/
     * Alerts_Create.json
     */
    /**
     * Sample code: Creates an Alert.
     * 
     * @param manager Entry point to WorkloadsManager.
     */
    public static void
        createsAnAlert(com.azure.resourcemanager.workloadsmicrosoftworkloadsmonitors.WorkloadsManager manager) {
        manager.alerts()
            .define("myAlert")
            .withExistingMonitor("myResourceGroup", "mySapMonitor")
            .withTemplateName("saphana-cpu-memory-health")
            .withProviderType("SapHana")
            .withProviderNames(Arrays.asList("hana-provider-1", "hana-provider-2"))
            .withAlertRuleProperties(new AlertRuleProperties().withStatus(AlertRuleStatus.ENABLED)
                .withSeverity(3)
                .withActionGroups(Arrays.asList(
                    "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.insights/actiongroups/actiongroup1",
                    "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.insights/actiongroups/actiongroup2"))
                .withThreshold(80)
                .withThresholdOperator(ConditionalOperator.GREATER_THAN)
                .withWindowSize(15)
                .withEvaluationFrequency(5)
                .withFailingPeriodsToAlert(3)
                .withFailingPeriodsOperator(ConditionalOperator.GREATER_THAN)
                .withMuteActionsDuration(0)
                .withAutoMitigate(AlertAutoMitigate.DISABLE)
                .withDimension("cpu")
                .withAlertQueryParameters(
                    Arrays.asList(new AlertQueryParameter().withName("providerInstance").withValue(""),
                        new AlertQueryParameter().withName("workType").withValue(""))))
            .create();
    }
}
