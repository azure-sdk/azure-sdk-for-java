// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.workloadsmicrosoftworkloadsmonitors.generated;

import com.azure.resourcemanager.workloadsmicrosoftworkloadsmonitors.models.AppServicePlanConfiguration;
import com.azure.resourcemanager.workloadsmicrosoftworkloadsmonitors.models.AppServicePlanTier;
import com.azure.resourcemanager.workloadsmicrosoftworkloadsmonitors.models.ManagedResourceGroupConfiguration;
import com.azure.resourcemanager.workloadsmicrosoftworkloadsmonitors.models.ManagedServiceIdentity;
import com.azure.resourcemanager.workloadsmicrosoftworkloadsmonitors.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.workloadsmicrosoftworkloadsmonitors.models.RoutingPreference;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for Monitors Create.
 */
public final class MonitorsCreateSamples {
    /*
     * x-ms-original-file:
     * specification/workloads/resource-manager/Microsoft.Workloads/monitors/preview/2024-02-01-preview/examples/
     * Monitors_Create_Create_A_Sap_Monitor.json
     */
    /**
     * Sample code: Create a SAP monitor.
     * 
     * @param manager Entry point to WorkloadsManager.
     */
    public static void
        createASAPMonitor(com.azure.resourcemanager.workloadsmicrosoftworkloadsmonitors.WorkloadsManager manager) {
        manager.monitors()
            .define("mySapMonitor")
            .withRegion("westus")
            .withExistingResourceGroup("myResourceGroup")
            .withTags(mapOf("key", "fakeTokenPlaceholder"))
            .withAppLocation("westus")
            .withRoutingPreference(RoutingPreference.ROUTE_ALL)
            .withManagedResourceGroupConfiguration(new ManagedResourceGroupConfiguration().withName("myManagedRg"))
            .withLogAnalyticsWorkspaceArmId(
                "/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/microsoft.operationalinsights/workspaces/myWorkspace")
            .withMonitorSubnet(
                "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/myVnet/subnets/mySubnet")
            .withAppServicePlanConfiguration(
                new AppServicePlanConfiguration().withTier(AppServicePlanTier.ELASTIC_PREMIUM).withCapacity(1))
            .create();
    }

    /*
     * x-ms-original-file:
     * specification/workloads/resource-manager/Microsoft.Workloads/monitors/preview/2024-02-01-preview/examples/
     * Monitors_Create_Create_A_Sap_Monitor_With_System_Assigned_Identity.json
     */
    /**
     * Sample code: Create a SAP monitor with system assigned identity.
     * 
     * @param manager Entry point to WorkloadsManager.
     */
    public static void createASAPMonitorWithSystemAssignedIdentity(
        com.azure.resourcemanager.workloadsmicrosoftworkloadsmonitors.WorkloadsManager manager) {
        manager.monitors()
            .define("mySapMonitor")
            .withRegion("westus")
            .withExistingResourceGroup("myResourceGroup")
            .withTags(mapOf("key", "fakeTokenPlaceholder"))
            .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED))
            .withAppLocation("westus")
            .withRoutingPreference(RoutingPreference.ROUTE_ALL)
            .withManagedResourceGroupConfiguration(new ManagedResourceGroupConfiguration().withName("myManagedRg"))
            .withLogAnalyticsWorkspaceArmId(
                "/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/microsoft.operationalinsights/workspaces/myWorkspace")
            .withMonitorSubnet(
                "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/myVnet/subnets/mySubnet")
            .withAppServicePlanConfiguration(
                new AppServicePlanConfiguration().withTier(AppServicePlanTier.ELASTIC_PREMIUM).withCapacity(1))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
