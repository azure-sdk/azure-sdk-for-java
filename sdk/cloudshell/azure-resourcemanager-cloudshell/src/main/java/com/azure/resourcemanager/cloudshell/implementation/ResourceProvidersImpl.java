// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cloudshell.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.cloudshell.fluent.ResourceProvidersClient;
import com.azure.resourcemanager.cloudshell.fluent.models.CloudShellConsoleInner;
import com.azure.resourcemanager.cloudshell.fluent.models.UserSettingsResponseInner;
import com.azure.resourcemanager.cloudshell.models.CloudShellConsole;
import com.azure.resourcemanager.cloudshell.models.CloudShellPatchUserSettings;
import com.azure.resourcemanager.cloudshell.models.CloudShellUserSettings;
import com.azure.resourcemanager.cloudshell.models.ConsoleDefinition;
import com.azure.resourcemanager.cloudshell.models.ResourceProviders;
import com.azure.resourcemanager.cloudshell.models.ResourceProvidersGetUserSettingsResponse;
import com.azure.resourcemanager.cloudshell.models.ResourceProvidersGetUserSettingsWithLocationResponse;
import com.azure.resourcemanager.cloudshell.models.ResourceProvidersKeepAliveResponse;
import com.azure.resourcemanager.cloudshell.models.ResourceProvidersKeepAliveWithLocationResponse;
import com.azure.resourcemanager.cloudshell.models.UserSettingsResponse;

public final class ResourceProvidersImpl implements ResourceProviders {
    private static final ClientLogger LOGGER = new ClientLogger(ResourceProvidersImpl.class);

    private final ResourceProvidersClient innerClient;

    private final com.azure.resourcemanager.cloudshell.CloudShellManager serviceManager;

    public ResourceProvidersImpl(
        ResourceProvidersClient innerClient, com.azure.resourcemanager.cloudshell.CloudShellManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<UserSettingsResponse> getUserSettingsWithLocationWithResponse(
        String userSettingsName, String location, Context context) {
        ResourceProvidersGetUserSettingsWithLocationResponse inner =
            this.serviceClient().getUserSettingsWithLocationWithResponse(userSettingsName, location, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new UserSettingsResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public UserSettingsResponse getUserSettingsWithLocation(String userSettingsName, String location) {
        UserSettingsResponseInner inner = this.serviceClient().getUserSettingsWithLocation(userSettingsName, location);
        if (inner != null) {
            return new UserSettingsResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<UserSettingsResponse> patchUserSettingsWithLocationWithResponse(
        String userSettingsName, String location, CloudShellPatchUserSettings parameters, Context context) {
        Response<UserSettingsResponseInner> inner =
            this
                .serviceClient()
                .patchUserSettingsWithLocationWithResponse(userSettingsName, location, parameters, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new UserSettingsResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public UserSettingsResponse patchUserSettingsWithLocation(
        String userSettingsName, String location, CloudShellPatchUserSettings parameters) {
        UserSettingsResponseInner inner =
            this.serviceClient().patchUserSettingsWithLocation(userSettingsName, location, parameters);
        if (inner != null) {
            return new UserSettingsResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteUserSettingsWithLocationWithResponse(
        String userSettingsName, String location, Context context) {
        return this.serviceClient().deleteUserSettingsWithLocationWithResponse(userSettingsName, location, context);
    }

    public void deleteUserSettingsWithLocation(String userSettingsName, String location) {
        this.serviceClient().deleteUserSettingsWithLocation(userSettingsName, location);
    }

    public Response<UserSettingsResponse> putUserSettingsWithLocationWithResponse(
        String userSettingsName, String location, CloudShellUserSettings parameters, Context context) {
        Response<UserSettingsResponseInner> inner =
            this
                .serviceClient()
                .putUserSettingsWithLocationWithResponse(userSettingsName, location, parameters, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new UserSettingsResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public UserSettingsResponse putUserSettingsWithLocation(
        String userSettingsName, String location, CloudShellUserSettings parameters) {
        UserSettingsResponseInner inner =
            this.serviceClient().putUserSettingsWithLocation(userSettingsName, location, parameters);
        if (inner != null) {
            return new UserSettingsResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<CloudShellConsole> getConsoleWithLocationWithResponse(
        String consoleName, String location, Context context) {
        Response<CloudShellConsoleInner> inner =
            this.serviceClient().getConsoleWithLocationWithResponse(consoleName, location, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new CloudShellConsoleImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public CloudShellConsole getConsoleWithLocation(String consoleName, String location) {
        CloudShellConsoleInner inner = this.serviceClient().getConsoleWithLocation(consoleName, location);
        if (inner != null) {
            return new CloudShellConsoleImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<CloudShellConsole> putConsoleWithLocationWithResponse(
        String consoleName, String location, Context context) {
        Response<CloudShellConsoleInner> inner =
            this.serviceClient().putConsoleWithLocationWithResponse(consoleName, location, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new CloudShellConsoleImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public CloudShellConsole putConsoleWithLocation(String consoleName, String location) {
        CloudShellConsoleInner inner = this.serviceClient().putConsoleWithLocation(consoleName, location);
        if (inner != null) {
            return new CloudShellConsoleImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteConsoleWithLocationWithResponse(String consoleName, String location, Context context) {
        return this.serviceClient().deleteConsoleWithLocationWithResponse(consoleName, location, context);
    }

    public void deleteConsoleWithLocation(String consoleName, String location) {
        this.serviceClient().deleteConsoleWithLocation(consoleName, location);
    }

    public ResourceProvidersKeepAliveWithLocationResponse keepAliveWithLocationWithResponse(
        String consoleName, String location, Context context) {
        return this.serviceClient().keepAliveWithLocationWithResponse(consoleName, location, context);
    }

    public void keepAliveWithLocation(String consoleName, String location) {
        this.serviceClient().keepAliveWithLocation(consoleName, location);
    }

    public Response<UserSettingsResponse> getUserSettingsWithResponse(String userSettingsName, Context context) {
        ResourceProvidersGetUserSettingsResponse inner =
            this.serviceClient().getUserSettingsWithResponse(userSettingsName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new UserSettingsResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public UserSettingsResponse getUserSettings(String userSettingsName) {
        UserSettingsResponseInner inner = this.serviceClient().getUserSettings(userSettingsName);
        if (inner != null) {
            return new UserSettingsResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<UserSettingsResponse> patchUserSettingsWithResponse(
        String userSettingsName, CloudShellPatchUserSettings parameters, Context context) {
        Response<UserSettingsResponseInner> inner =
            this.serviceClient().patchUserSettingsWithResponse(userSettingsName, parameters, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new UserSettingsResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public UserSettingsResponse patchUserSettings(String userSettingsName, CloudShellPatchUserSettings parameters) {
        UserSettingsResponseInner inner = this.serviceClient().patchUserSettings(userSettingsName, parameters);
        if (inner != null) {
            return new UserSettingsResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteUserSettingsWithResponse(String userSettingsName, Context context) {
        return this.serviceClient().deleteUserSettingsWithResponse(userSettingsName, context);
    }

    public void deleteUserSettings(String userSettingsName) {
        this.serviceClient().deleteUserSettings(userSettingsName);
    }

    public Response<UserSettingsResponse> putUserSettingsWithResponse(
        String userSettingsName, CloudShellUserSettings parameters, Context context) {
        Response<UserSettingsResponseInner> inner =
            this.serviceClient().putUserSettingsWithResponse(userSettingsName, parameters, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new UserSettingsResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public UserSettingsResponse putUserSettings(String userSettingsName, CloudShellUserSettings parameters) {
        UserSettingsResponseInner inner = this.serviceClient().putUserSettings(userSettingsName, parameters);
        if (inner != null) {
            return new UserSettingsResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<CloudShellConsole> getConsoleWithResponse(String consoleName, Context context) {
        Response<CloudShellConsoleInner> inner = this.serviceClient().getConsoleWithResponse(consoleName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new CloudShellConsoleImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public CloudShellConsole getConsole(String consoleName) {
        CloudShellConsoleInner inner = this.serviceClient().getConsole(consoleName);
        if (inner != null) {
            return new CloudShellConsoleImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<CloudShellConsole> putConsoleWithResponse(
        String consoleName, ConsoleDefinition parameters, Context context) {
        Response<CloudShellConsoleInner> inner =
            this.serviceClient().putConsoleWithResponse(consoleName, parameters, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new CloudShellConsoleImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public CloudShellConsole putConsole(String consoleName, ConsoleDefinition parameters) {
        CloudShellConsoleInner inner = this.serviceClient().putConsole(consoleName, parameters);
        if (inner != null) {
            return new CloudShellConsoleImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteConsoleWithResponse(String consoleName, Context context) {
        return this.serviceClient().deleteConsoleWithResponse(consoleName, context);
    }

    public void deleteConsole(String consoleName) {
        this.serviceClient().deleteConsole(consoleName);
    }

    public ResourceProvidersKeepAliveResponse keepAliveWithResponse(String consoleName, Context context) {
        return this.serviceClient().keepAliveWithResponse(consoleName, context);
    }

    public void keepAlive(String consoleName) {
        this.serviceClient().keepAlive(consoleName);
    }

    private ResourceProvidersClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.cloudshell.CloudShellManager manager() {
        return this.serviceManager;
    }
}
