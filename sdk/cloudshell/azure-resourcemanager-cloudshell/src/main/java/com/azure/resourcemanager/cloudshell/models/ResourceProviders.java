// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cloudshell.models;

import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/** Resource collection API of ResourceProviders. */
public interface ResourceProviders {
    /**
     * Get user settings.
     *
     * <p>Get current user settings for current signed in user. This operation returns settings for the user's cloud
     * shell preferences including preferred location, storage profile, shell type, font and size settings.
     *
     * @param userSettingsName The name of the user settings.
     * @param location The name of Azure region.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return current user settings for current signed in user.
     */
    Response<UserSettingsResponse> getUserSettingsWithLocationWithResponse(
        String userSettingsName, String location, Context context);

    /**
     * Get user settings.
     *
     * <p>Get current user settings for current signed in user. This operation returns settings for the user's cloud
     * shell preferences including preferred location, storage profile, shell type, font and size settings.
     *
     * @param userSettingsName The name of the user settings.
     * @param location The name of Azure region.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return current user settings for current signed in user.
     */
    UserSettingsResponse getUserSettingsWithLocation(String userSettingsName, String location);

    /**
     * patch user settings.
     *
     * <p>Patch cloud shell settings for current signed in user.
     *
     * @param userSettingsName The name of the user settings.
     * @param location The name of Azure region.
     * @param parameters The properties of the user settings to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response to get user settings along with {@link Response}.
     */
    Response<UserSettingsResponse> patchUserSettingsWithLocationWithResponse(
        String userSettingsName, String location, CloudShellPatchUserSettings parameters, Context context);

    /**
     * patch user settings.
     *
     * <p>Patch cloud shell settings for current signed in user.
     *
     * @param userSettingsName The name of the user settings.
     * @param location The name of Azure region.
     * @param parameters The properties of the user settings to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response to get user settings.
     */
    UserSettingsResponse patchUserSettingsWithLocation(
        String userSettingsName, String location, CloudShellPatchUserSettings parameters);

    /**
     * delete user settings.
     *
     * <p>Delete cloud shell settings for current signed in user.
     *
     * @param userSettingsName The name of the user settings.
     * @param location The name of Azure region.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    Response<Void> deleteUserSettingsWithLocationWithResponse(
        String userSettingsName, String location, Context context);

    /**
     * delete user settings.
     *
     * <p>Delete cloud shell settings for current signed in user.
     *
     * @param userSettingsName The name of the user settings.
     * @param location The name of Azure region.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteUserSettingsWithLocation(String userSettingsName, String location);

    /**
     * put user settings.
     *
     * <p>Create or update cloud shell settings for current signed in user.
     *
     * @param userSettingsName The name of the user settings.
     * @param location The name of Azure region.
     * @param parameters The properties of the user settings to be created or updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response to get user settings along with {@link Response}.
     */
    Response<UserSettingsResponse> putUserSettingsWithLocationWithResponse(
        String userSettingsName, String location, CloudShellUserSettings parameters, Context context);

    /**
     * put user settings.
     *
     * <p>Create or update cloud shell settings for current signed in user.
     *
     * @param userSettingsName The name of the user settings.
     * @param location The name of Azure region.
     * @param parameters The properties of the user settings to be created or updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response to get user settings.
     */
    UserSettingsResponse putUserSettingsWithLocation(
        String userSettingsName, String location, CloudShellUserSettings parameters);

    /**
     * Get console
     *
     * <p>Gets the console for the user.
     *
     * @param consoleName The name of the console.
     * @param location The name of Azure region.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the console for the user along with {@link Response}.
     */
    Response<CloudShellConsole> getConsoleWithLocationWithResponse(
        String consoleName, String location, Context context);

    /**
     * Get console
     *
     * <p>Gets the console for the user.
     *
     * @param consoleName The name of the console.
     * @param location The name of Azure region.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the console for the user.
     */
    CloudShellConsole getConsoleWithLocation(String consoleName, String location);

    /**
     * Put console
     *
     * <p>Puts a request for a console.
     *
     * @param consoleName The name of the console.
     * @param location The name of Azure region.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return cloud shell console along with {@link Response}.
     */
    Response<CloudShellConsole> putConsoleWithLocationWithResponse(
        String consoleName, String location, Context context);

    /**
     * Put console
     *
     * <p>Puts a request for a console.
     *
     * @param consoleName The name of the console.
     * @param location The name of Azure region.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return cloud shell console.
     */
    CloudShellConsole putConsoleWithLocation(String consoleName, String location);

    /**
     * Delete console
     *
     * <p>Deletes the console.
     *
     * @param consoleName The name of the console.
     * @param location The name of Azure region.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    Response<Void> deleteConsoleWithLocationWithResponse(String consoleName, String location, Context context);

    /**
     * Delete console
     *
     * <p>Deletes the console.
     *
     * @param consoleName The name of the console.
     * @param location The name of Azure region.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteConsoleWithLocation(String consoleName, String location);

    /**
     * Keep alive
     *
     * <p>Keep console alive.
     *
     * @param consoleName The name of the console.
     * @param location The name of Azure region.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    ResourceProvidersKeepAliveWithLocationResponse keepAliveWithLocationWithResponse(
        String consoleName, String location, Context context);

    /**
     * Keep alive
     *
     * <p>Keep console alive.
     *
     * @param consoleName The name of the console.
     * @param location The name of Azure region.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void keepAliveWithLocation(String consoleName, String location);

    /**
     * Get user settings.
     *
     * <p>Get current user settings for current signed in user. This operation returns settings for the user's cloud
     * shell preferences including preferred location, storage profile, shell type, font and size settings.
     *
     * @param userSettingsName The name of the user settings.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return current user settings for current signed in user.
     */
    Response<UserSettingsResponse> getUserSettingsWithResponse(String userSettingsName, Context context);

    /**
     * Get user settings.
     *
     * <p>Get current user settings for current signed in user. This operation returns settings for the user's cloud
     * shell preferences including preferred location, storage profile, shell type, font and size settings.
     *
     * @param userSettingsName The name of the user settings.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return current user settings for current signed in user.
     */
    UserSettingsResponse getUserSettings(String userSettingsName);

    /**
     * patch user settings.
     *
     * <p>Patch cloud shell settings for current signed in user.
     *
     * @param userSettingsName The name of the user settings.
     * @param parameters The properties of the user settings to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response to get user settings along with {@link Response}.
     */
    Response<UserSettingsResponse> patchUserSettingsWithResponse(
        String userSettingsName, CloudShellPatchUserSettings parameters, Context context);

    /**
     * patch user settings.
     *
     * <p>Patch cloud shell settings for current signed in user.
     *
     * @param userSettingsName The name of the user settings.
     * @param parameters The properties of the user settings to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response to get user settings.
     */
    UserSettingsResponse patchUserSettings(String userSettingsName, CloudShellPatchUserSettings parameters);

    /**
     * delete user settings.
     *
     * <p>Delete cloud shell settings for current signed in user.
     *
     * @param userSettingsName The name of the user settings.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    Response<Void> deleteUserSettingsWithResponse(String userSettingsName, Context context);

    /**
     * delete user settings.
     *
     * <p>Delete cloud shell settings for current signed in user.
     *
     * @param userSettingsName The name of the user settings.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteUserSettings(String userSettingsName);

    /**
     * put user settings.
     *
     * <p>Create or update cloud shell settings for current signed in user.
     *
     * @param userSettingsName The name of the user settings.
     * @param parameters The properties of the user settings to be created or updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response to get user settings along with {@link Response}.
     */
    Response<UserSettingsResponse> putUserSettingsWithResponse(
        String userSettingsName, CloudShellUserSettings parameters, Context context);

    /**
     * put user settings.
     *
     * <p>Create or update cloud shell settings for current signed in user.
     *
     * @param userSettingsName The name of the user settings.
     * @param parameters The properties of the user settings to be created or updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response to get user settings.
     */
    UserSettingsResponse putUserSettings(String userSettingsName, CloudShellUserSettings parameters);

    /**
     * Get console
     *
     * <p>Gets the console for the user.
     *
     * @param consoleName The name of the console.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the console for the user along with {@link Response}.
     */
    Response<CloudShellConsole> getConsoleWithResponse(String consoleName, Context context);

    /**
     * Get console
     *
     * <p>Gets the console for the user.
     *
     * @param consoleName The name of the console.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the console for the user.
     */
    CloudShellConsole getConsole(String consoleName);

    /**
     * Put console
     *
     * <p>Puts a request for a console.
     *
     * @param consoleName The name of the console.
     * @param parameters The console definition.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return cloud shell console along with {@link Response}.
     */
    Response<CloudShellConsole> putConsoleWithResponse(
        String consoleName, ConsoleDefinition parameters, Context context);

    /**
     * Put console
     *
     * <p>Puts a request for a console.
     *
     * @param consoleName The name of the console.
     * @param parameters The console definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return cloud shell console.
     */
    CloudShellConsole putConsole(String consoleName, ConsoleDefinition parameters);

    /**
     * Delete console
     *
     * <p>Deletes the console.
     *
     * @param consoleName The name of the console.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    Response<Void> deleteConsoleWithResponse(String consoleName, Context context);

    /**
     * Delete console
     *
     * <p>Deletes the console.
     *
     * @param consoleName The name of the console.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteConsole(String consoleName);

    /**
     * Keep alive
     *
     * <p>Keep console alive.
     *
     * @param consoleName The name of the console.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    ResourceProvidersKeepAliveResponse keepAliveWithResponse(String consoleName, Context context);

    /**
     * Keep alive
     *
     * <p>Keep console alive.
     *
     * @param consoleName The name of the console.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void keepAlive(String consoleName);
}
