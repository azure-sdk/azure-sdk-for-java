// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cloudshell.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;

/** The cloud shell user settings properties. */
@Fluent
public final class UserProperties {
    /*
     * The operating system type of the cloud shell. Deprecated, use preferredShellType.
     */
    @JsonProperty(value = "preferredOsType", required = true)
    private OsType preferredOsType;

    /*
     * The preferred location of the cloud shell.
     */
    @JsonProperty(value = "preferredLocation", required = true)
    private String preferredLocation;

    /*
     * The storage profile of the user settings.
     */
    @JsonProperty(value = "storageProfile", required = true)
    private StorageProfile storageProfile;

    /*
     * Settings for terminal appearance.
     */
    @JsonProperty(value = "terminalSettings", required = true)
    private TerminalSettings terminalSettings;

    /*
     * The shell type of the cloud shell.
     */
    @JsonProperty(value = "preferredShellType", required = true)
    private ShellType preferredShellType;

    /** Creates an instance of UserProperties class. */
    public UserProperties() {
    }

    /**
     * Get the preferredOsType property: The operating system type of the cloud shell. Deprecated, use
     * preferredShellType.
     *
     * @return the preferredOsType value.
     */
    public OsType preferredOsType() {
        return this.preferredOsType;
    }

    /**
     * Set the preferredOsType property: The operating system type of the cloud shell. Deprecated, use
     * preferredShellType.
     *
     * @param preferredOsType the preferredOsType value to set.
     * @return the UserProperties object itself.
     */
    public UserProperties withPreferredOsType(OsType preferredOsType) {
        this.preferredOsType = preferredOsType;
        return this;
    }

    /**
     * Get the preferredLocation property: The preferred location of the cloud shell.
     *
     * @return the preferredLocation value.
     */
    public String preferredLocation() {
        return this.preferredLocation;
    }

    /**
     * Set the preferredLocation property: The preferred location of the cloud shell.
     *
     * @param preferredLocation the preferredLocation value to set.
     * @return the UserProperties object itself.
     */
    public UserProperties withPreferredLocation(String preferredLocation) {
        this.preferredLocation = preferredLocation;
        return this;
    }

    /**
     * Get the storageProfile property: The storage profile of the user settings.
     *
     * @return the storageProfile value.
     */
    public StorageProfile storageProfile() {
        return this.storageProfile;
    }

    /**
     * Set the storageProfile property: The storage profile of the user settings.
     *
     * @param storageProfile the storageProfile value to set.
     * @return the UserProperties object itself.
     */
    public UserProperties withStorageProfile(StorageProfile storageProfile) {
        this.storageProfile = storageProfile;
        return this;
    }

    /**
     * Get the terminalSettings property: Settings for terminal appearance.
     *
     * @return the terminalSettings value.
     */
    public TerminalSettings terminalSettings() {
        return this.terminalSettings;
    }

    /**
     * Set the terminalSettings property: Settings for terminal appearance.
     *
     * @param terminalSettings the terminalSettings value to set.
     * @return the UserProperties object itself.
     */
    public UserProperties withTerminalSettings(TerminalSettings terminalSettings) {
        this.terminalSettings = terminalSettings;
        return this;
    }

    /**
     * Get the preferredShellType property: The shell type of the cloud shell.
     *
     * @return the preferredShellType value.
     */
    public ShellType preferredShellType() {
        return this.preferredShellType;
    }

    /**
     * Set the preferredShellType property: The shell type of the cloud shell.
     *
     * @param preferredShellType the preferredShellType value to set.
     * @return the UserProperties object itself.
     */
    public UserProperties withPreferredShellType(ShellType preferredShellType) {
        this.preferredShellType = preferredShellType;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (preferredOsType() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property preferredOsType in model UserProperties"));
        }
        if (preferredLocation() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property preferredLocation in model UserProperties"));
        }
        if (storageProfile() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property storageProfile in model UserProperties"));
        } else {
            storageProfile().validate();
        }
        if (terminalSettings() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property terminalSettings in model UserProperties"));
        } else {
            terminalSettings().validate();
        }
        if (preferredShellType() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property preferredShellType in model UserProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(UserProperties.class);
}
