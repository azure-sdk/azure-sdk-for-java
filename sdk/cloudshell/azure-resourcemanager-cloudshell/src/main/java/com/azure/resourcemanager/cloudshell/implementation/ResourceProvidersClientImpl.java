// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cloudshell.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.cloudshell.fluent.ResourceProvidersClient;
import com.azure.resourcemanager.cloudshell.fluent.models.CloudShellConsoleInner;
import com.azure.resourcemanager.cloudshell.fluent.models.UserSettingsResponseInner;
import com.azure.resourcemanager.cloudshell.models.CloudShellPatchUserSettings;
import com.azure.resourcemanager.cloudshell.models.CloudShellUserSettings;
import com.azure.resourcemanager.cloudshell.models.ConsoleDefinition;
import com.azure.resourcemanager.cloudshell.models.ResourceProvidersGetUserSettingsResponse;
import com.azure.resourcemanager.cloudshell.models.ResourceProvidersGetUserSettingsWithLocationResponse;
import com.azure.resourcemanager.cloudshell.models.ResourceProvidersKeepAliveResponse;
import com.azure.resourcemanager.cloudshell.models.ResourceProvidersKeepAliveWithLocationResponse;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in ResourceProvidersClient. */
public final class ResourceProvidersClientImpl implements ResourceProvidersClient {
    /** The proxy service used to perform REST calls. */
    private final ResourceProvidersService service;

    /** The service client containing this operation class. */
    private final CloudShellClientImpl client;

    /**
     * Initializes an instance of ResourceProvidersClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    ResourceProvidersClientImpl(CloudShellClientImpl client) {
        this.service =
            RestProxy.create(ResourceProvidersService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for CloudShellClientResourceProviders to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "CloudShellClientReso")
    private interface ResourceProvidersService {
        @Headers({"Content-Type: application/json"})
        @Get("/providers/Microsoft.Portal/locations/{location}/userSettings/{userSettingsName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<ResourceProvidersGetUserSettingsWithLocationResponse> getUserSettingsWithLocation(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("userSettingsName") String userSettingsName,
            @PathParam("location") String location,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Patch("/providers/Microsoft.Portal/locations/{location}/userSettings/{userSettingsName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<UserSettingsResponseInner>> patchUserSettingsWithLocation(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("userSettingsName") String userSettingsName,
            @PathParam("location") String location,
            @BodyParam("application/json") CloudShellPatchUserSettings parameters,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete("/providers/Microsoft.Portal/locations/{location}/userSettings/{userSettingsName}")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> deleteUserSettingsWithLocation(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("userSettingsName") String userSettingsName,
            @PathParam("location") String location,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put("/providers/Microsoft.Portal/locations/{location}/userSettings/{userSettingsName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<UserSettingsResponseInner>> putUserSettingsWithLocation(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("userSettingsName") String userSettingsName,
            @PathParam("location") String location,
            @BodyParam("application/json") CloudShellUserSettings parameters,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("/providers/Microsoft.Portal/locations/{location}/consoles/{consoleName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<CloudShellConsoleInner>> getConsoleWithLocation(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("consoleName") String consoleName,
            @PathParam("location") String location,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put("/providers/Microsoft.Portal/locations/{location}/consoles/{consoleName}")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<CloudShellConsoleInner>> putConsoleWithLocation(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("consoleName") String consoleName,
            @PathParam("location") String location,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete("/providers/Microsoft.Portal/locations/{location}/consoles/{consoleName}")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> deleteConsoleWithLocation(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("consoleName") String consoleName,
            @PathParam("location") String location,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post("/providers/Microsoft.Portal/locations/{location}/consoles/{consoleName}/keepAlive")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<ResourceProvidersKeepAliveWithLocationResponse> keepAliveWithLocation(
            @HostParam("$host") String endpoint,
            @PathParam("consoleName") String consoleName,
            @PathParam("location") String location,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("/providers/Microsoft.Portal/userSettings/{userSettingsName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<ResourceProvidersGetUserSettingsResponse> getUserSettings(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("userSettingsName") String userSettingsName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Patch("/providers/Microsoft.Portal/userSettings/{userSettingsName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<UserSettingsResponseInner>> patchUserSettings(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("userSettingsName") String userSettingsName,
            @BodyParam("application/json") CloudShellPatchUserSettings parameters,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete("/providers/Microsoft.Portal/userSettings/{userSettingsName}")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> deleteUserSettings(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("userSettingsName") String userSettingsName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put("/providers/Microsoft.Portal/userSettings/{userSettingsName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<UserSettingsResponseInner>> putUserSettings(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("userSettingsName") String userSettingsName,
            @BodyParam("application/json") CloudShellUserSettings parameters,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("/providers/Microsoft.Portal/consoles/{consoleName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<CloudShellConsoleInner>> getConsole(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("consoleName") String consoleName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put("/providers/Microsoft.Portal/consoles/{consoleName}")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<CloudShellConsoleInner>> putConsole(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("consoleName") String consoleName,
            @BodyParam("application/json") ConsoleDefinition parameters,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete("/providers/Microsoft.Portal/consoles/{consoleName}")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> deleteConsole(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("consoleName") String consoleName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post("/providers/Microsoft.Portal/consoles/{consoleName}/keepAlive")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<ResourceProvidersKeepAliveResponse> keepAlive(
            @HostParam("$host") String endpoint,
            @PathParam("consoleName") String consoleName,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Get user settings.
     *
     * <p>Get current user settings for current signed in user. This operation returns settings for the user's cloud
     * shell preferences including preferred location, storage profile, shell type, font and size settings.
     *
     * @param userSettingsName The name of the user settings.
     * @param location The name of Azure region.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return current user settings for current signed in user on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ResourceProvidersGetUserSettingsWithLocationResponse> getUserSettingsWithLocationWithResponseAsync(
        String userSettingsName, String location) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (userSettingsName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter userSettingsName is required and cannot be null."));
        }
        if (location == null) {
            return Mono.error(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getUserSettingsWithLocation(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            userSettingsName,
                            location,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get user settings.
     *
     * <p>Get current user settings for current signed in user. This operation returns settings for the user's cloud
     * shell preferences including preferred location, storage profile, shell type, font and size settings.
     *
     * @param userSettingsName The name of the user settings.
     * @param location The name of Azure region.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return current user settings for current signed in user on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ResourceProvidersGetUserSettingsWithLocationResponse> getUserSettingsWithLocationWithResponseAsync(
        String userSettingsName, String location, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (userSettingsName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter userSettingsName is required and cannot be null."));
        }
        if (location == null) {
            return Mono.error(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .getUserSettingsWithLocation(
                this.client.getEndpoint(), this.client.getApiVersion(), userSettingsName, location, accept, context);
    }

    /**
     * Get user settings.
     *
     * <p>Get current user settings for current signed in user. This operation returns settings for the user's cloud
     * shell preferences including preferred location, storage profile, shell type, font and size settings.
     *
     * @param userSettingsName The name of the user settings.
     * @param location The name of Azure region.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return current user settings for current signed in user on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<UserSettingsResponseInner> getUserSettingsWithLocationAsync(String userSettingsName, String location) {
        return getUserSettingsWithLocationWithResponseAsync(userSettingsName, location)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get user settings.
     *
     * <p>Get current user settings for current signed in user. This operation returns settings for the user's cloud
     * shell preferences including preferred location, storage profile, shell type, font and size settings.
     *
     * @param userSettingsName The name of the user settings.
     * @param location The name of Azure region.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return current user settings for current signed in user.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ResourceProvidersGetUserSettingsWithLocationResponse getUserSettingsWithLocationWithResponse(
        String userSettingsName, String location, Context context) {
        return getUserSettingsWithLocationWithResponseAsync(userSettingsName, location, context).block();
    }

    /**
     * Get user settings.
     *
     * <p>Get current user settings for current signed in user. This operation returns settings for the user's cloud
     * shell preferences including preferred location, storage profile, shell type, font and size settings.
     *
     * @param userSettingsName The name of the user settings.
     * @param location The name of Azure region.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return current user settings for current signed in user.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public UserSettingsResponseInner getUserSettingsWithLocation(String userSettingsName, String location) {
        return getUserSettingsWithLocationWithResponse(userSettingsName, location, Context.NONE).getValue();
    }

    /**
     * patch user settings.
     *
     * <p>Patch cloud shell settings for current signed in user.
     *
     * @param userSettingsName The name of the user settings.
     * @param location The name of Azure region.
     * @param parameters The properties of the user settings to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response to get user settings along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<UserSettingsResponseInner>> patchUserSettingsWithLocationWithResponseAsync(
        String userSettingsName, String location, CloudShellPatchUserSettings parameters) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (userSettingsName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter userSettingsName is required and cannot be null."));
        }
        if (location == null) {
            return Mono.error(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .patchUserSettingsWithLocation(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            userSettingsName,
                            location,
                            parameters,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * patch user settings.
     *
     * <p>Patch cloud shell settings for current signed in user.
     *
     * @param userSettingsName The name of the user settings.
     * @param location The name of Azure region.
     * @param parameters The properties of the user settings to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response to get user settings along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<UserSettingsResponseInner>> patchUserSettingsWithLocationWithResponseAsync(
        String userSettingsName, String location, CloudShellPatchUserSettings parameters, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (userSettingsName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter userSettingsName is required and cannot be null."));
        }
        if (location == null) {
            return Mono.error(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .patchUserSettingsWithLocation(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                userSettingsName,
                location,
                parameters,
                accept,
                context);
    }

    /**
     * patch user settings.
     *
     * <p>Patch cloud shell settings for current signed in user.
     *
     * @param userSettingsName The name of the user settings.
     * @param location The name of Azure region.
     * @param parameters The properties of the user settings to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response to get user settings on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<UserSettingsResponseInner> patchUserSettingsWithLocationAsync(
        String userSettingsName, String location, CloudShellPatchUserSettings parameters) {
        return patchUserSettingsWithLocationWithResponseAsync(userSettingsName, location, parameters)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * patch user settings.
     *
     * <p>Patch cloud shell settings for current signed in user.
     *
     * @param userSettingsName The name of the user settings.
     * @param location The name of Azure region.
     * @param parameters The properties of the user settings to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response to get user settings along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<UserSettingsResponseInner> patchUserSettingsWithLocationWithResponse(
        String userSettingsName, String location, CloudShellPatchUserSettings parameters, Context context) {
        return patchUserSettingsWithLocationWithResponseAsync(userSettingsName, location, parameters, context).block();
    }

    /**
     * patch user settings.
     *
     * <p>Patch cloud shell settings for current signed in user.
     *
     * @param userSettingsName The name of the user settings.
     * @param location The name of Azure region.
     * @param parameters The properties of the user settings to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response to get user settings.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public UserSettingsResponseInner patchUserSettingsWithLocation(
        String userSettingsName, String location, CloudShellPatchUserSettings parameters) {
        return patchUserSettingsWithLocationWithResponse(userSettingsName, location, parameters, Context.NONE)
            .getValue();
    }

    /**
     * delete user settings.
     *
     * <p>Delete cloud shell settings for current signed in user.
     *
     * @param userSettingsName The name of the user settings.
     * @param location The name of Azure region.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteUserSettingsWithLocationWithResponseAsync(
        String userSettingsName, String location) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (userSettingsName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter userSettingsName is required and cannot be null."));
        }
        if (location == null) {
            return Mono.error(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .deleteUserSettingsWithLocation(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            userSettingsName,
                            location,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * delete user settings.
     *
     * <p>Delete cloud shell settings for current signed in user.
     *
     * @param userSettingsName The name of the user settings.
     * @param location The name of Azure region.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteUserSettingsWithLocationWithResponseAsync(
        String userSettingsName, String location, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (userSettingsName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter userSettingsName is required and cannot be null."));
        }
        if (location == null) {
            return Mono.error(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .deleteUserSettingsWithLocation(
                this.client.getEndpoint(), this.client.getApiVersion(), userSettingsName, location, accept, context);
    }

    /**
     * delete user settings.
     *
     * <p>Delete cloud shell settings for current signed in user.
     *
     * @param userSettingsName The name of the user settings.
     * @param location The name of Azure region.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteUserSettingsWithLocationAsync(String userSettingsName, String location) {
        return deleteUserSettingsWithLocationWithResponseAsync(userSettingsName, location)
            .flatMap(ignored -> Mono.empty());
    }

    /**
     * delete user settings.
     *
     * <p>Delete cloud shell settings for current signed in user.
     *
     * @param userSettingsName The name of the user settings.
     * @param location The name of Azure region.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteUserSettingsWithLocationWithResponse(
        String userSettingsName, String location, Context context) {
        return deleteUserSettingsWithLocationWithResponseAsync(userSettingsName, location, context).block();
    }

    /**
     * delete user settings.
     *
     * <p>Delete cloud shell settings for current signed in user.
     *
     * @param userSettingsName The name of the user settings.
     * @param location The name of Azure region.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteUserSettingsWithLocation(String userSettingsName, String location) {
        deleteUserSettingsWithLocationWithResponse(userSettingsName, location, Context.NONE);
    }

    /**
     * put user settings.
     *
     * <p>Create or update cloud shell settings for current signed in user.
     *
     * @param userSettingsName The name of the user settings.
     * @param location The name of Azure region.
     * @param parameters The properties of the user settings to be created or updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response to get user settings along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<UserSettingsResponseInner>> putUserSettingsWithLocationWithResponseAsync(
        String userSettingsName, String location, CloudShellUserSettings parameters) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (userSettingsName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter userSettingsName is required and cannot be null."));
        }
        if (location == null) {
            return Mono.error(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .putUserSettingsWithLocation(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            userSettingsName,
                            location,
                            parameters,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * put user settings.
     *
     * <p>Create or update cloud shell settings for current signed in user.
     *
     * @param userSettingsName The name of the user settings.
     * @param location The name of Azure region.
     * @param parameters The properties of the user settings to be created or updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response to get user settings along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<UserSettingsResponseInner>> putUserSettingsWithLocationWithResponseAsync(
        String userSettingsName, String location, CloudShellUserSettings parameters, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (userSettingsName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter userSettingsName is required and cannot be null."));
        }
        if (location == null) {
            return Mono.error(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .putUserSettingsWithLocation(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                userSettingsName,
                location,
                parameters,
                accept,
                context);
    }

    /**
     * put user settings.
     *
     * <p>Create or update cloud shell settings for current signed in user.
     *
     * @param userSettingsName The name of the user settings.
     * @param location The name of Azure region.
     * @param parameters The properties of the user settings to be created or updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response to get user settings on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<UserSettingsResponseInner> putUserSettingsWithLocationAsync(
        String userSettingsName, String location, CloudShellUserSettings parameters) {
        return putUserSettingsWithLocationWithResponseAsync(userSettingsName, location, parameters)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * put user settings.
     *
     * <p>Create or update cloud shell settings for current signed in user.
     *
     * @param userSettingsName The name of the user settings.
     * @param location The name of Azure region.
     * @param parameters The properties of the user settings to be created or updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response to get user settings along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<UserSettingsResponseInner> putUserSettingsWithLocationWithResponse(
        String userSettingsName, String location, CloudShellUserSettings parameters, Context context) {
        return putUserSettingsWithLocationWithResponseAsync(userSettingsName, location, parameters, context).block();
    }

    /**
     * put user settings.
     *
     * <p>Create or update cloud shell settings for current signed in user.
     *
     * @param userSettingsName The name of the user settings.
     * @param location The name of Azure region.
     * @param parameters The properties of the user settings to be created or updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response to get user settings.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public UserSettingsResponseInner putUserSettingsWithLocation(
        String userSettingsName, String location, CloudShellUserSettings parameters) {
        return putUserSettingsWithLocationWithResponse(userSettingsName, location, parameters, Context.NONE).getValue();
    }

    /**
     * Get console
     *
     * <p>Gets the console for the user.
     *
     * @param consoleName The name of the console.
     * @param location The name of Azure region.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the console for the user along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<CloudShellConsoleInner>> getConsoleWithLocationWithResponseAsync(
        String consoleName, String location) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (consoleName == null) {
            return Mono.error(new IllegalArgumentException("Parameter consoleName is required and cannot be null."));
        }
        if (location == null) {
            return Mono.error(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getConsoleWithLocation(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            consoleName,
                            location,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get console
     *
     * <p>Gets the console for the user.
     *
     * @param consoleName The name of the console.
     * @param location The name of Azure region.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the console for the user along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<CloudShellConsoleInner>> getConsoleWithLocationWithResponseAsync(
        String consoleName, String location, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (consoleName == null) {
            return Mono.error(new IllegalArgumentException("Parameter consoleName is required and cannot be null."));
        }
        if (location == null) {
            return Mono.error(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .getConsoleWithLocation(
                this.client.getEndpoint(), this.client.getApiVersion(), consoleName, location, accept, context);
    }

    /**
     * Get console
     *
     * <p>Gets the console for the user.
     *
     * @param consoleName The name of the console.
     * @param location The name of Azure region.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the console for the user on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<CloudShellConsoleInner> getConsoleWithLocationAsync(String consoleName, String location) {
        return getConsoleWithLocationWithResponseAsync(consoleName, location)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get console
     *
     * <p>Gets the console for the user.
     *
     * @param consoleName The name of the console.
     * @param location The name of Azure region.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the console for the user along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<CloudShellConsoleInner> getConsoleWithLocationWithResponse(
        String consoleName, String location, Context context) {
        return getConsoleWithLocationWithResponseAsync(consoleName, location, context).block();
    }

    /**
     * Get console
     *
     * <p>Gets the console for the user.
     *
     * @param consoleName The name of the console.
     * @param location The name of Azure region.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the console for the user.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CloudShellConsoleInner getConsoleWithLocation(String consoleName, String location) {
        return getConsoleWithLocationWithResponse(consoleName, location, Context.NONE).getValue();
    }

    /**
     * Put console
     *
     * <p>Puts a request for a console.
     *
     * @param consoleName The name of the console.
     * @param location The name of Azure region.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return cloud shell console along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<CloudShellConsoleInner>> putConsoleWithLocationWithResponseAsync(
        String consoleName, String location) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (consoleName == null) {
            return Mono.error(new IllegalArgumentException("Parameter consoleName is required and cannot be null."));
        }
        if (location == null) {
            return Mono.error(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .putConsoleWithLocation(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            consoleName,
                            location,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Put console
     *
     * <p>Puts a request for a console.
     *
     * @param consoleName The name of the console.
     * @param location The name of Azure region.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return cloud shell console along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<CloudShellConsoleInner>> putConsoleWithLocationWithResponseAsync(
        String consoleName, String location, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (consoleName == null) {
            return Mono.error(new IllegalArgumentException("Parameter consoleName is required and cannot be null."));
        }
        if (location == null) {
            return Mono.error(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .putConsoleWithLocation(
                this.client.getEndpoint(), this.client.getApiVersion(), consoleName, location, accept, context);
    }

    /**
     * Put console
     *
     * <p>Puts a request for a console.
     *
     * @param consoleName The name of the console.
     * @param location The name of Azure region.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return cloud shell console on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<CloudShellConsoleInner> putConsoleWithLocationAsync(String consoleName, String location) {
        return putConsoleWithLocationWithResponseAsync(consoleName, location)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Put console
     *
     * <p>Puts a request for a console.
     *
     * @param consoleName The name of the console.
     * @param location The name of Azure region.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return cloud shell console along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<CloudShellConsoleInner> putConsoleWithLocationWithResponse(
        String consoleName, String location, Context context) {
        return putConsoleWithLocationWithResponseAsync(consoleName, location, context).block();
    }

    /**
     * Put console
     *
     * <p>Puts a request for a console.
     *
     * @param consoleName The name of the console.
     * @param location The name of Azure region.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return cloud shell console.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CloudShellConsoleInner putConsoleWithLocation(String consoleName, String location) {
        return putConsoleWithLocationWithResponse(consoleName, location, Context.NONE).getValue();
    }

    /**
     * Delete console
     *
     * <p>Deletes the console.
     *
     * @param consoleName The name of the console.
     * @param location The name of Azure region.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteConsoleWithLocationWithResponseAsync(String consoleName, String location) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (consoleName == null) {
            return Mono.error(new IllegalArgumentException("Parameter consoleName is required and cannot be null."));
        }
        if (location == null) {
            return Mono.error(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .deleteConsoleWithLocation(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            consoleName,
                            location,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Delete console
     *
     * <p>Deletes the console.
     *
     * @param consoleName The name of the console.
     * @param location The name of Azure region.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteConsoleWithLocationWithResponseAsync(
        String consoleName, String location, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (consoleName == null) {
            return Mono.error(new IllegalArgumentException("Parameter consoleName is required and cannot be null."));
        }
        if (location == null) {
            return Mono.error(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .deleteConsoleWithLocation(
                this.client.getEndpoint(), this.client.getApiVersion(), consoleName, location, accept, context);
    }

    /**
     * Delete console
     *
     * <p>Deletes the console.
     *
     * @param consoleName The name of the console.
     * @param location The name of Azure region.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteConsoleWithLocationAsync(String consoleName, String location) {
        return deleteConsoleWithLocationWithResponseAsync(consoleName, location).flatMap(ignored -> Mono.empty());
    }

    /**
     * Delete console
     *
     * <p>Deletes the console.
     *
     * @param consoleName The name of the console.
     * @param location The name of Azure region.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteConsoleWithLocationWithResponse(String consoleName, String location, Context context) {
        return deleteConsoleWithLocationWithResponseAsync(consoleName, location, context).block();
    }

    /**
     * Delete console
     *
     * <p>Deletes the console.
     *
     * @param consoleName The name of the console.
     * @param location The name of Azure region.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteConsoleWithLocation(String consoleName, String location) {
        deleteConsoleWithLocationWithResponse(consoleName, location, Context.NONE);
    }

    /**
     * Keep alive
     *
     * <p>Keep console alive.
     *
     * @param consoleName The name of the console.
     * @param location The name of Azure region.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ResourceProvidersKeepAliveWithLocationResponse> keepAliveWithLocationWithResponseAsync(
        String consoleName, String location) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (consoleName == null) {
            return Mono.error(new IllegalArgumentException("Parameter consoleName is required and cannot be null."));
        }
        if (location == null) {
            return Mono.error(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service.keepAliveWithLocation(this.client.getEndpoint(), consoleName, location, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Keep alive
     *
     * <p>Keep console alive.
     *
     * @param consoleName The name of the console.
     * @param location The name of Azure region.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ResourceProvidersKeepAliveWithLocationResponse> keepAliveWithLocationWithResponseAsync(
        String consoleName, String location, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (consoleName == null) {
            return Mono.error(new IllegalArgumentException("Parameter consoleName is required and cannot be null."));
        }
        if (location == null) {
            return Mono.error(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.keepAliveWithLocation(this.client.getEndpoint(), consoleName, location, accept, context);
    }

    /**
     * Keep alive
     *
     * <p>Keep console alive.
     *
     * @param consoleName The name of the console.
     * @param location The name of Azure region.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> keepAliveWithLocationAsync(String consoleName, String location) {
        return keepAliveWithLocationWithResponseAsync(consoleName, location).flatMap(ignored -> Mono.empty());
    }

    /**
     * Keep alive
     *
     * <p>Keep console alive.
     *
     * @param consoleName The name of the console.
     * @param location The name of Azure region.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ResourceProvidersKeepAliveWithLocationResponse keepAliveWithLocationWithResponse(
        String consoleName, String location, Context context) {
        return keepAliveWithLocationWithResponseAsync(consoleName, location, context).block();
    }

    /**
     * Keep alive
     *
     * <p>Keep console alive.
     *
     * @param consoleName The name of the console.
     * @param location The name of Azure region.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void keepAliveWithLocation(String consoleName, String location) {
        keepAliveWithLocationWithResponse(consoleName, location, Context.NONE);
    }

    /**
     * Get user settings.
     *
     * <p>Get current user settings for current signed in user. This operation returns settings for the user's cloud
     * shell preferences including preferred location, storage profile, shell type, font and size settings.
     *
     * @param userSettingsName The name of the user settings.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return current user settings for current signed in user on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ResourceProvidersGetUserSettingsResponse> getUserSettingsWithResponseAsync(String userSettingsName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (userSettingsName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter userSettingsName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getUserSettings(
                            this.client.getEndpoint(), this.client.getApiVersion(), userSettingsName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get user settings.
     *
     * <p>Get current user settings for current signed in user. This operation returns settings for the user's cloud
     * shell preferences including preferred location, storage profile, shell type, font and size settings.
     *
     * @param userSettingsName The name of the user settings.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return current user settings for current signed in user on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ResourceProvidersGetUserSettingsResponse> getUserSettingsWithResponseAsync(
        String userSettingsName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (userSettingsName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter userSettingsName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .getUserSettings(this.client.getEndpoint(), this.client.getApiVersion(), userSettingsName, accept, context);
    }

    /**
     * Get user settings.
     *
     * <p>Get current user settings for current signed in user. This operation returns settings for the user's cloud
     * shell preferences including preferred location, storage profile, shell type, font and size settings.
     *
     * @param userSettingsName The name of the user settings.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return current user settings for current signed in user on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<UserSettingsResponseInner> getUserSettingsAsync(String userSettingsName) {
        return getUserSettingsWithResponseAsync(userSettingsName).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get user settings.
     *
     * <p>Get current user settings for current signed in user. This operation returns settings for the user's cloud
     * shell preferences including preferred location, storage profile, shell type, font and size settings.
     *
     * @param userSettingsName The name of the user settings.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return current user settings for current signed in user.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ResourceProvidersGetUserSettingsResponse getUserSettingsWithResponse(
        String userSettingsName, Context context) {
        return getUserSettingsWithResponseAsync(userSettingsName, context).block();
    }

    /**
     * Get user settings.
     *
     * <p>Get current user settings for current signed in user. This operation returns settings for the user's cloud
     * shell preferences including preferred location, storage profile, shell type, font and size settings.
     *
     * @param userSettingsName The name of the user settings.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return current user settings for current signed in user.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public UserSettingsResponseInner getUserSettings(String userSettingsName) {
        return getUserSettingsWithResponse(userSettingsName, Context.NONE).getValue();
    }

    /**
     * patch user settings.
     *
     * <p>Patch cloud shell settings for current signed in user.
     *
     * @param userSettingsName The name of the user settings.
     * @param parameters The properties of the user settings to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response to get user settings along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<UserSettingsResponseInner>> patchUserSettingsWithResponseAsync(
        String userSettingsName, CloudShellPatchUserSettings parameters) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (userSettingsName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter userSettingsName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .patchUserSettings(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            userSettingsName,
                            parameters,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * patch user settings.
     *
     * <p>Patch cloud shell settings for current signed in user.
     *
     * @param userSettingsName The name of the user settings.
     * @param parameters The properties of the user settings to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response to get user settings along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<UserSettingsResponseInner>> patchUserSettingsWithResponseAsync(
        String userSettingsName, CloudShellPatchUserSettings parameters, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (userSettingsName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter userSettingsName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .patchUserSettings(
                this.client.getEndpoint(), this.client.getApiVersion(), userSettingsName, parameters, accept, context);
    }

    /**
     * patch user settings.
     *
     * <p>Patch cloud shell settings for current signed in user.
     *
     * @param userSettingsName The name of the user settings.
     * @param parameters The properties of the user settings to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response to get user settings on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<UserSettingsResponseInner> patchUserSettingsAsync(
        String userSettingsName, CloudShellPatchUserSettings parameters) {
        return patchUserSettingsWithResponseAsync(userSettingsName, parameters)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * patch user settings.
     *
     * <p>Patch cloud shell settings for current signed in user.
     *
     * @param userSettingsName The name of the user settings.
     * @param parameters The properties of the user settings to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response to get user settings along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<UserSettingsResponseInner> patchUserSettingsWithResponse(
        String userSettingsName, CloudShellPatchUserSettings parameters, Context context) {
        return patchUserSettingsWithResponseAsync(userSettingsName, parameters, context).block();
    }

    /**
     * patch user settings.
     *
     * <p>Patch cloud shell settings for current signed in user.
     *
     * @param userSettingsName The name of the user settings.
     * @param parameters The properties of the user settings to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response to get user settings.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public UserSettingsResponseInner patchUserSettings(
        String userSettingsName, CloudShellPatchUserSettings parameters) {
        return patchUserSettingsWithResponse(userSettingsName, parameters, Context.NONE).getValue();
    }

    /**
     * delete user settings.
     *
     * <p>Delete cloud shell settings for current signed in user.
     *
     * @param userSettingsName The name of the user settings.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteUserSettingsWithResponseAsync(String userSettingsName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (userSettingsName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter userSettingsName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .deleteUserSettings(
                            this.client.getEndpoint(), this.client.getApiVersion(), userSettingsName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * delete user settings.
     *
     * <p>Delete cloud shell settings for current signed in user.
     *
     * @param userSettingsName The name of the user settings.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteUserSettingsWithResponseAsync(String userSettingsName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (userSettingsName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter userSettingsName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .deleteUserSettings(
                this.client.getEndpoint(), this.client.getApiVersion(), userSettingsName, accept, context);
    }

    /**
     * delete user settings.
     *
     * <p>Delete cloud shell settings for current signed in user.
     *
     * @param userSettingsName The name of the user settings.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteUserSettingsAsync(String userSettingsName) {
        return deleteUserSettingsWithResponseAsync(userSettingsName).flatMap(ignored -> Mono.empty());
    }

    /**
     * delete user settings.
     *
     * <p>Delete cloud shell settings for current signed in user.
     *
     * @param userSettingsName The name of the user settings.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteUserSettingsWithResponse(String userSettingsName, Context context) {
        return deleteUserSettingsWithResponseAsync(userSettingsName, context).block();
    }

    /**
     * delete user settings.
     *
     * <p>Delete cloud shell settings for current signed in user.
     *
     * @param userSettingsName The name of the user settings.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteUserSettings(String userSettingsName) {
        deleteUserSettingsWithResponse(userSettingsName, Context.NONE);
    }

    /**
     * put user settings.
     *
     * <p>Create or update cloud shell settings for current signed in user.
     *
     * @param userSettingsName The name of the user settings.
     * @param parameters The properties of the user settings to be created or updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response to get user settings along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<UserSettingsResponseInner>> putUserSettingsWithResponseAsync(
        String userSettingsName, CloudShellUserSettings parameters) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (userSettingsName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter userSettingsName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .putUserSettings(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            userSettingsName,
                            parameters,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * put user settings.
     *
     * <p>Create or update cloud shell settings for current signed in user.
     *
     * @param userSettingsName The name of the user settings.
     * @param parameters The properties of the user settings to be created or updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response to get user settings along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<UserSettingsResponseInner>> putUserSettingsWithResponseAsync(
        String userSettingsName, CloudShellUserSettings parameters, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (userSettingsName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter userSettingsName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .putUserSettings(
                this.client.getEndpoint(), this.client.getApiVersion(), userSettingsName, parameters, accept, context);
    }

    /**
     * put user settings.
     *
     * <p>Create or update cloud shell settings for current signed in user.
     *
     * @param userSettingsName The name of the user settings.
     * @param parameters The properties of the user settings to be created or updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response to get user settings on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<UserSettingsResponseInner> putUserSettingsAsync(
        String userSettingsName, CloudShellUserSettings parameters) {
        return putUserSettingsWithResponseAsync(userSettingsName, parameters)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * put user settings.
     *
     * <p>Create or update cloud shell settings for current signed in user.
     *
     * @param userSettingsName The name of the user settings.
     * @param parameters The properties of the user settings to be created or updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response to get user settings along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<UserSettingsResponseInner> putUserSettingsWithResponse(
        String userSettingsName, CloudShellUserSettings parameters, Context context) {
        return putUserSettingsWithResponseAsync(userSettingsName, parameters, context).block();
    }

    /**
     * put user settings.
     *
     * <p>Create or update cloud shell settings for current signed in user.
     *
     * @param userSettingsName The name of the user settings.
     * @param parameters The properties of the user settings to be created or updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response to get user settings.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public UserSettingsResponseInner putUserSettings(String userSettingsName, CloudShellUserSettings parameters) {
        return putUserSettingsWithResponse(userSettingsName, parameters, Context.NONE).getValue();
    }

    /**
     * Get console
     *
     * <p>Gets the console for the user.
     *
     * @param consoleName The name of the console.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the console for the user along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<CloudShellConsoleInner>> getConsoleWithResponseAsync(String consoleName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (consoleName == null) {
            return Mono.error(new IllegalArgumentException("Parameter consoleName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getConsole(
                            this.client.getEndpoint(), this.client.getApiVersion(), consoleName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get console
     *
     * <p>Gets the console for the user.
     *
     * @param consoleName The name of the console.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the console for the user along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<CloudShellConsoleInner>> getConsoleWithResponseAsync(String consoleName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (consoleName == null) {
            return Mono.error(new IllegalArgumentException("Parameter consoleName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.getConsole(this.client.getEndpoint(), this.client.getApiVersion(), consoleName, accept, context);
    }

    /**
     * Get console
     *
     * <p>Gets the console for the user.
     *
     * @param consoleName The name of the console.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the console for the user on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<CloudShellConsoleInner> getConsoleAsync(String consoleName) {
        return getConsoleWithResponseAsync(consoleName).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get console
     *
     * <p>Gets the console for the user.
     *
     * @param consoleName The name of the console.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the console for the user along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<CloudShellConsoleInner> getConsoleWithResponse(String consoleName, Context context) {
        return getConsoleWithResponseAsync(consoleName, context).block();
    }

    /**
     * Get console
     *
     * <p>Gets the console for the user.
     *
     * @param consoleName The name of the console.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the console for the user.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CloudShellConsoleInner getConsole(String consoleName) {
        return getConsoleWithResponse(consoleName, Context.NONE).getValue();
    }

    /**
     * Put console
     *
     * <p>Puts a request for a console.
     *
     * @param consoleName The name of the console.
     * @param parameters The console definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return cloud shell console along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<CloudShellConsoleInner>> putConsoleWithResponseAsync(
        String consoleName, ConsoleDefinition parameters) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (consoleName == null) {
            return Mono.error(new IllegalArgumentException("Parameter consoleName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .putConsole(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            consoleName,
                            parameters,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Put console
     *
     * <p>Puts a request for a console.
     *
     * @param consoleName The name of the console.
     * @param parameters The console definition.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return cloud shell console along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<CloudShellConsoleInner>> putConsoleWithResponseAsync(
        String consoleName, ConsoleDefinition parameters, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (consoleName == null) {
            return Mono.error(new IllegalArgumentException("Parameter consoleName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .putConsole(
                this.client.getEndpoint(), this.client.getApiVersion(), consoleName, parameters, accept, context);
    }

    /**
     * Put console
     *
     * <p>Puts a request for a console.
     *
     * @param consoleName The name of the console.
     * @param parameters The console definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return cloud shell console on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<CloudShellConsoleInner> putConsoleAsync(String consoleName, ConsoleDefinition parameters) {
        return putConsoleWithResponseAsync(consoleName, parameters).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Put console
     *
     * <p>Puts a request for a console.
     *
     * @param consoleName The name of the console.
     * @param parameters The console definition.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return cloud shell console along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<CloudShellConsoleInner> putConsoleWithResponse(
        String consoleName, ConsoleDefinition parameters, Context context) {
        return putConsoleWithResponseAsync(consoleName, parameters, context).block();
    }

    /**
     * Put console
     *
     * <p>Puts a request for a console.
     *
     * @param consoleName The name of the console.
     * @param parameters The console definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return cloud shell console.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CloudShellConsoleInner putConsole(String consoleName, ConsoleDefinition parameters) {
        return putConsoleWithResponse(consoleName, parameters, Context.NONE).getValue();
    }

    /**
     * Delete console
     *
     * <p>Deletes the console.
     *
     * @param consoleName The name of the console.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteConsoleWithResponseAsync(String consoleName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (consoleName == null) {
            return Mono.error(new IllegalArgumentException("Parameter consoleName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .deleteConsole(
                            this.client.getEndpoint(), this.client.getApiVersion(), consoleName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Delete console
     *
     * <p>Deletes the console.
     *
     * @param consoleName The name of the console.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteConsoleWithResponseAsync(String consoleName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (consoleName == null) {
            return Mono.error(new IllegalArgumentException("Parameter consoleName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .deleteConsole(this.client.getEndpoint(), this.client.getApiVersion(), consoleName, accept, context);
    }

    /**
     * Delete console
     *
     * <p>Deletes the console.
     *
     * @param consoleName The name of the console.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteConsoleAsync(String consoleName) {
        return deleteConsoleWithResponseAsync(consoleName).flatMap(ignored -> Mono.empty());
    }

    /**
     * Delete console
     *
     * <p>Deletes the console.
     *
     * @param consoleName The name of the console.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteConsoleWithResponse(String consoleName, Context context) {
        return deleteConsoleWithResponseAsync(consoleName, context).block();
    }

    /**
     * Delete console
     *
     * <p>Deletes the console.
     *
     * @param consoleName The name of the console.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteConsole(String consoleName) {
        deleteConsoleWithResponse(consoleName, Context.NONE);
    }

    /**
     * Keep alive
     *
     * <p>Keep console alive.
     *
     * @param consoleName The name of the console.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ResourceProvidersKeepAliveResponse> keepAliveWithResponseAsync(String consoleName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (consoleName == null) {
            return Mono.error(new IllegalArgumentException("Parameter consoleName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.keepAlive(this.client.getEndpoint(), consoleName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Keep alive
     *
     * <p>Keep console alive.
     *
     * @param consoleName The name of the console.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ResourceProvidersKeepAliveResponse> keepAliveWithResponseAsync(String consoleName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (consoleName == null) {
            return Mono.error(new IllegalArgumentException("Parameter consoleName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.keepAlive(this.client.getEndpoint(), consoleName, accept, context);
    }

    /**
     * Keep alive
     *
     * <p>Keep console alive.
     *
     * @param consoleName The name of the console.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> keepAliveAsync(String consoleName) {
        return keepAliveWithResponseAsync(consoleName).flatMap(ignored -> Mono.empty());
    }

    /**
     * Keep alive
     *
     * <p>Keep console alive.
     *
     * @param consoleName The name of the console.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ResourceProvidersKeepAliveResponse keepAliveWithResponse(String consoleName, Context context) {
        return keepAliveWithResponseAsync(consoleName, context).block();
    }

    /**
     * Keep alive
     *
     * <p>Keep console alive.
     *
     * @param consoleName The name of the console.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void keepAlive(String consoleName) {
        keepAliveWithResponse(consoleName, Context.NONE);
    }
}
