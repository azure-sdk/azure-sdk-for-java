// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Databricks Job activity properties.
 */
@Fluent
public final class DatabricksJobActivityTypeProperties
    implements JsonSerializable<DatabricksJobActivityTypeProperties> {
    /*
     * The Id of the Databricks Job to be executed. Type: string (or Expression with resultType string).
     */
    private Object jobId;

    /*
     * Job parameters to be used for each run of this job. If the job takes a parameter that is not specified, the
     * default value from the job will be used.
     */
    private Map<String, Object> jobParameters;

    /**
     * Creates an instance of DatabricksJobActivityTypeProperties class.
     */
    public DatabricksJobActivityTypeProperties() {
    }

    /**
     * Get the jobId property: The Id of the Databricks Job to be executed. Type: string (or Expression with resultType
     * string).
     * 
     * @return the jobId value.
     */
    public Object jobId() {
        return this.jobId;
    }

    /**
     * Set the jobId property: The Id of the Databricks Job to be executed. Type: string (or Expression with resultType
     * string).
     * 
     * @param jobId the jobId value to set.
     * @return the DatabricksJobActivityTypeProperties object itself.
     */
    public DatabricksJobActivityTypeProperties withJobId(Object jobId) {
        this.jobId = jobId;
        return this;
    }

    /**
     * Get the jobParameters property: Job parameters to be used for each run of this job. If the job takes a parameter
     * that is not specified, the default value from the job will be used.
     * 
     * @return the jobParameters value.
     */
    public Map<String, Object> jobParameters() {
        return this.jobParameters;
    }

    /**
     * Set the jobParameters property: Job parameters to be used for each run of this job. If the job takes a parameter
     * that is not specified, the default value from the job will be used.
     * 
     * @param jobParameters the jobParameters value to set.
     * @return the DatabricksJobActivityTypeProperties object itself.
     */
    public DatabricksJobActivityTypeProperties withJobParameters(Map<String, Object> jobParameters) {
        this.jobParameters = jobParameters;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (jobId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property jobId in model DatabricksJobActivityTypeProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DatabricksJobActivityTypeProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeUntypedField("jobId", this.jobId);
        jsonWriter.writeMapField("jobParameters", this.jobParameters,
            (writer, element) -> writer.writeUntyped(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DatabricksJobActivityTypeProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DatabricksJobActivityTypeProperties if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DatabricksJobActivityTypeProperties.
     */
    public static DatabricksJobActivityTypeProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DatabricksJobActivityTypeProperties deserializedDatabricksJobActivityTypeProperties
                = new DatabricksJobActivityTypeProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("jobId".equals(fieldName)) {
                    deserializedDatabricksJobActivityTypeProperties.jobId = reader.readUntyped();
                } else if ("jobParameters".equals(fieldName)) {
                    Map<String, Object> jobParameters = reader.readMap(reader1 -> reader1.readUntyped());
                    deserializedDatabricksJobActivityTypeProperties.jobParameters = jobParameters;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDatabricksJobActivityTypeProperties;
        });
    }
}
