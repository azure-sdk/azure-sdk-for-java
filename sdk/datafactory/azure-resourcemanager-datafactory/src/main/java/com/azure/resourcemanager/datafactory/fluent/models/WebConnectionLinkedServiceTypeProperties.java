// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.datafactory.models.CredentialReference;
import com.azure.resourcemanager.datafactory.models.SecretBase;
import com.azure.resourcemanager.datafactory.models.WebConnectionAuthenticationType;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Web Connection linked service properties.
 */
@Fluent
public final class WebConnectionLinkedServiceTypeProperties {
    /*
     * The base URL of the WEB CONNECTION service. Type: string (or Expression with resultType string).
     */
    @JsonProperty(value = "url", required = true)
    private Object url;

    /*
     * Whether to validate server side SSL certificate when connecting to the endpoint.The default value is true. Type:
     * boolean (or Expression with resultType boolean).
     */
    @JsonProperty(value = "enableServerCertificateValidation")
    private Object enableServerCertificateValidation;

    /*
     * Type of authentication used to connect to the WEB CONNECTION service.
     */
    @JsonProperty(value = "authenticationType", required = true)
    private WebConnectionAuthenticationType authenticationType;

    /*
     * The user name used in Basic authentication type. Type: string (or Expression with resultType string).
     */
    @JsonProperty(value = "userName")
    private Object username;

    /*
     * The password used in Basic & ClientCertificate authentication type.
     */
    @JsonProperty(value = "password")
    private SecretBase password;

    /*
     * The certificate used in ClientCertificate authentication type.
     */
    @JsonProperty(value = "pfx")
    private SecretBase pfx;

    /*
     * The application's client ID used in AadServicePrincipal authentication type. Type: string (or Expression with
     * resultType string).
     */
    @JsonProperty(value = "servicePrincipalId")
    private Object servicePrincipalId;

    /*
     * The application's key used in AadServicePrincipal authentication type.
     */
    @JsonProperty(value = "servicePrincipalKey")
    private SecretBase servicePrincipalKey;

    /*
     * The tenant information (domain name or tenant ID) used in AadServicePrincipal authentication type under which
     * your application resides. Type: string (or Expression with resultType string).
     */
    @JsonProperty(value = "tenant")
    private Object tenant;

    /*
     * The resource you are requesting authorization to use. Type: string (or Expression with resultType string).
     */
    @JsonProperty(value = "aadResourceId")
    private Object aadResourceId;

    /*
     * The credential reference containing authentication information.
     */
    @JsonProperty(value = "credential")
    private CredentialReference credential;

    /**
     * Creates an instance of WebConnectionLinkedServiceTypeProperties class.
     */
    public WebConnectionLinkedServiceTypeProperties() {
    }

    /**
     * Get the url property: The base URL of the WEB CONNECTION service. Type: string (or Expression with resultType
     * string).
     * 
     * @return the url value.
     */
    public Object url() {
        return this.url;
    }

    /**
     * Set the url property: The base URL of the WEB CONNECTION service. Type: string (or Expression with resultType
     * string).
     * 
     * @param url the url value to set.
     * @return the WebConnectionLinkedServiceTypeProperties object itself.
     */
    public WebConnectionLinkedServiceTypeProperties withUrl(Object url) {
        this.url = url;
        return this;
    }

    /**
     * Get the enableServerCertificateValidation property: Whether to validate server side SSL certificate when
     * connecting to the endpoint.The default value is true. Type: boolean (or Expression with resultType boolean).
     * 
     * @return the enableServerCertificateValidation value.
     */
    public Object enableServerCertificateValidation() {
        return this.enableServerCertificateValidation;
    }

    /**
     * Set the enableServerCertificateValidation property: Whether to validate server side SSL certificate when
     * connecting to the endpoint.The default value is true. Type: boolean (or Expression with resultType boolean).
     * 
     * @param enableServerCertificateValidation the enableServerCertificateValidation value to set.
     * @return the WebConnectionLinkedServiceTypeProperties object itself.
     */
    public WebConnectionLinkedServiceTypeProperties
        withEnableServerCertificateValidation(Object enableServerCertificateValidation) {
        this.enableServerCertificateValidation = enableServerCertificateValidation;
        return this;
    }

    /**
     * Get the authenticationType property: Type of authentication used to connect to the WEB CONNECTION service.
     * 
     * @return the authenticationType value.
     */
    public WebConnectionAuthenticationType authenticationType() {
        return this.authenticationType;
    }

    /**
     * Set the authenticationType property: Type of authentication used to connect to the WEB CONNECTION service.
     * 
     * @param authenticationType the authenticationType value to set.
     * @return the WebConnectionLinkedServiceTypeProperties object itself.
     */
    public WebConnectionLinkedServiceTypeProperties
        withAuthenticationType(WebConnectionAuthenticationType authenticationType) {
        this.authenticationType = authenticationType;
        return this;
    }

    /**
     * Get the username property: The user name used in Basic authentication type. Type: string (or Expression with
     * resultType string).
     * 
     * @return the username value.
     */
    public Object username() {
        return this.username;
    }

    /**
     * Set the username property: The user name used in Basic authentication type. Type: string (or Expression with
     * resultType string).
     * 
     * @param username the username value to set.
     * @return the WebConnectionLinkedServiceTypeProperties object itself.
     */
    public WebConnectionLinkedServiceTypeProperties withUsername(Object username) {
        this.username = username;
        return this;
    }

    /**
     * Get the password property: The password used in Basic &amp; ClientCertificate authentication type.
     * 
     * @return the password value.
     */
    public SecretBase password() {
        return this.password;
    }

    /**
     * Set the password property: The password used in Basic &amp; ClientCertificate authentication type.
     * 
     * @param password the password value to set.
     * @return the WebConnectionLinkedServiceTypeProperties object itself.
     */
    public WebConnectionLinkedServiceTypeProperties withPassword(SecretBase password) {
        this.password = password;
        return this;
    }

    /**
     * Get the pfx property: The certificate used in ClientCertificate authentication type.
     * 
     * @return the pfx value.
     */
    public SecretBase pfx() {
        return this.pfx;
    }

    /**
     * Set the pfx property: The certificate used in ClientCertificate authentication type.
     * 
     * @param pfx the pfx value to set.
     * @return the WebConnectionLinkedServiceTypeProperties object itself.
     */
    public WebConnectionLinkedServiceTypeProperties withPfx(SecretBase pfx) {
        this.pfx = pfx;
        return this;
    }

    /**
     * Get the servicePrincipalId property: The application's client ID used in AadServicePrincipal authentication
     * type. Type: string (or Expression with resultType string).
     * 
     * @return the servicePrincipalId value.
     */
    public Object servicePrincipalId() {
        return this.servicePrincipalId;
    }

    /**
     * Set the servicePrincipalId property: The application's client ID used in AadServicePrincipal authentication
     * type. Type: string (or Expression with resultType string).
     * 
     * @param servicePrincipalId the servicePrincipalId value to set.
     * @return the WebConnectionLinkedServiceTypeProperties object itself.
     */
    public WebConnectionLinkedServiceTypeProperties withServicePrincipalId(Object servicePrincipalId) {
        this.servicePrincipalId = servicePrincipalId;
        return this;
    }

    /**
     * Get the servicePrincipalKey property: The application's key used in AadServicePrincipal authentication type.
     * 
     * @return the servicePrincipalKey value.
     */
    public SecretBase servicePrincipalKey() {
        return this.servicePrincipalKey;
    }

    /**
     * Set the servicePrincipalKey property: The application's key used in AadServicePrincipal authentication type.
     * 
     * @param servicePrincipalKey the servicePrincipalKey value to set.
     * @return the WebConnectionLinkedServiceTypeProperties object itself.
     */
    public WebConnectionLinkedServiceTypeProperties withServicePrincipalKey(SecretBase servicePrincipalKey) {
        this.servicePrincipalKey = servicePrincipalKey;
        return this;
    }

    /**
     * Get the tenant property: The tenant information (domain name or tenant ID) used in AadServicePrincipal
     * authentication type under which your application resides. Type: string (or Expression with resultType string).
     * 
     * @return the tenant value.
     */
    public Object tenant() {
        return this.tenant;
    }

    /**
     * Set the tenant property: The tenant information (domain name or tenant ID) used in AadServicePrincipal
     * authentication type under which your application resides. Type: string (or Expression with resultType string).
     * 
     * @param tenant the tenant value to set.
     * @return the WebConnectionLinkedServiceTypeProperties object itself.
     */
    public WebConnectionLinkedServiceTypeProperties withTenant(Object tenant) {
        this.tenant = tenant;
        return this;
    }

    /**
     * Get the aadResourceId property: The resource you are requesting authorization to use. Type: string (or
     * Expression with resultType string).
     * 
     * @return the aadResourceId value.
     */
    public Object aadResourceId() {
        return this.aadResourceId;
    }

    /**
     * Set the aadResourceId property: The resource you are requesting authorization to use. Type: string (or
     * Expression with resultType string).
     * 
     * @param aadResourceId the aadResourceId value to set.
     * @return the WebConnectionLinkedServiceTypeProperties object itself.
     */
    public WebConnectionLinkedServiceTypeProperties withAadResourceId(Object aadResourceId) {
        this.aadResourceId = aadResourceId;
        return this;
    }

    /**
     * Get the credential property: The credential reference containing authentication information.
     * 
     * @return the credential value.
     */
    public CredentialReference credential() {
        return this.credential;
    }

    /**
     * Set the credential property: The credential reference containing authentication information.
     * 
     * @param credential the credential value to set.
     * @return the WebConnectionLinkedServiceTypeProperties object itself.
     */
    public WebConnectionLinkedServiceTypeProperties withCredential(CredentialReference credential) {
        this.credential = credential;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (url() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property url in model WebConnectionLinkedServiceTypeProperties"));
        }
        if (authenticationType() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property authenticationType in model WebConnectionLinkedServiceTypeProperties"));
        }
        if (password() != null) {
            password().validate();
        }
        if (pfx() != null) {
            pfx().validate();
        }
        if (servicePrincipalKey() != null) {
            servicePrincipalKey().validate();
        }
        if (credential() != null) {
            credential().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(WebConnectionLinkedServiceTypeProperties.class);
}
