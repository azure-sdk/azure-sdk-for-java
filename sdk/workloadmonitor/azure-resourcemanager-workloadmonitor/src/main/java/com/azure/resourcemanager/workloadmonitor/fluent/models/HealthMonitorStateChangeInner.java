// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.workloadmonitor.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.resourcemanager.workloadmonitor.models.HealthState;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Information about the monitorâ€™s health state change at the provided timestamp. */
@Fluent
public final class HealthMonitorStateChangeInner extends ProxyResource {
    /*
     * Properties of the monitor's state change.
     */
    @JsonProperty(value = "properties")
    private HealthMonitorStateChangeProperties innerProperties;

    /** Creates an instance of HealthMonitorStateChangeInner class. */
    public HealthMonitorStateChangeInner() {
    }

    /**
     * Get the innerProperties property: Properties of the monitor's state change.
     *
     * @return the innerProperties value.
     */
    private HealthMonitorStateChangeProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the monitorName property: Human-readable name of the monitor.
     *
     * @return the monitorName value.
     */
    public String monitorName() {
        return this.innerProperties() == null ? null : this.innerProperties().monitorName();
    }

    /**
     * Set the monitorName property: Human-readable name of the monitor.
     *
     * @param monitorName the monitorName value to set.
     * @return the HealthMonitorStateChangeInner object itself.
     */
    public HealthMonitorStateChangeInner withMonitorName(String monitorName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new HealthMonitorStateChangeProperties();
        }
        this.innerProperties().withMonitorName(monitorName);
        return this;
    }

    /**
     * Get the monitorType property: Type of the monitor.
     *
     * @return the monitorType value.
     */
    public String monitorType() {
        return this.innerProperties() == null ? null : this.innerProperties().monitorType();
    }

    /**
     * Set the monitorType property: Type of the monitor.
     *
     * @param monitorType the monitorType value to set.
     * @return the HealthMonitorStateChangeInner object itself.
     */
    public HealthMonitorStateChangeInner withMonitorType(String monitorType) {
        if (this.innerProperties() == null) {
            this.innerProperties = new HealthMonitorStateChangeProperties();
        }
        this.innerProperties().withMonitorType(monitorType);
        return this;
    }

    /**
     * Get the monitoredObject property: Dynamic monitored object of the monitor.
     *
     * @return the monitoredObject value.
     */
    public String monitoredObject() {
        return this.innerProperties() == null ? null : this.innerProperties().monitoredObject();
    }

    /**
     * Set the monitoredObject property: Dynamic monitored object of the monitor.
     *
     * @param monitoredObject the monitoredObject value to set.
     * @return the HealthMonitorStateChangeInner object itself.
     */
    public HealthMonitorStateChangeInner withMonitoredObject(String monitoredObject) {
        if (this.innerProperties() == null) {
            this.innerProperties = new HealthMonitorStateChangeProperties();
        }
        this.innerProperties().withMonitoredObject(monitoredObject);
        return this;
    }

    /**
     * Get the evaluationTimestamp property: Timestamp of the monitor's last health evaluation.
     *
     * @return the evaluationTimestamp value.
     */
    public String evaluationTimestamp() {
        return this.innerProperties() == null ? null : this.innerProperties().evaluationTimestamp();
    }

    /**
     * Set the evaluationTimestamp property: Timestamp of the monitor's last health evaluation.
     *
     * @param evaluationTimestamp the evaluationTimestamp value to set.
     * @return the HealthMonitorStateChangeInner object itself.
     */
    public HealthMonitorStateChangeInner withEvaluationTimestamp(String evaluationTimestamp) {
        if (this.innerProperties() == null) {
            this.innerProperties = new HealthMonitorStateChangeProperties();
        }
        this.innerProperties().withEvaluationTimestamp(evaluationTimestamp);
        return this;
    }

    /**
     * Get the currentStateFirstObservedTimestamp property: Timestamp of the monitor's last health state change.
     *
     * @return the currentStateFirstObservedTimestamp value.
     */
    public String currentStateFirstObservedTimestamp() {
        return this.innerProperties() == null ? null : this.innerProperties().currentStateFirstObservedTimestamp();
    }

    /**
     * Set the currentStateFirstObservedTimestamp property: Timestamp of the monitor's last health state change.
     *
     * @param currentStateFirstObservedTimestamp the currentStateFirstObservedTimestamp value to set.
     * @return the HealthMonitorStateChangeInner object itself.
     */
    public HealthMonitorStateChangeInner withCurrentStateFirstObservedTimestamp(
        String currentStateFirstObservedTimestamp) {
        if (this.innerProperties() == null) {
            this.innerProperties = new HealthMonitorStateChangeProperties();
        }
        this.innerProperties().withCurrentStateFirstObservedTimestamp(currentStateFirstObservedTimestamp);
        return this;
    }

    /**
     * Get the previousMonitorState property: One of health states - healthy, critical, warning, unknown, none,
     * disabled.
     *
     * <p>Previous health state of the monitor.
     *
     * @return the previousMonitorState value.
     */
    public HealthState previousMonitorState() {
        return this.innerProperties() == null ? null : this.innerProperties().previousMonitorState();
    }

    /**
     * Get the currentMonitorState property: One of health states - healthy, critical, warning, unknown, none, disabled.
     *
     * <p>Current health state of the monitor.
     *
     * @return the currentMonitorState value.
     */
    public HealthState currentMonitorState() {
        return this.innerProperties() == null ? null : this.innerProperties().currentMonitorState();
    }

    /**
     * Get the evidence property: Evidence validating the monitor's current health state.
     *
     * @return the evidence value.
     */
    public Object evidence() {
        return this.innerProperties() == null ? null : this.innerProperties().evidence();
    }

    /**
     * Set the evidence property: Evidence validating the monitor's current health state.
     *
     * @param evidence the evidence value to set.
     * @return the HealthMonitorStateChangeInner object itself.
     */
    public HealthMonitorStateChangeInner withEvidence(Object evidence) {
        if (this.innerProperties() == null) {
            this.innerProperties = new HealthMonitorStateChangeProperties();
        }
        this.innerProperties().withEvidence(evidence);
        return this;
    }

    /**
     * Get the monitorConfiguration property: The configuration settings at the time of the monitor's health evaluation.
     *
     * @return the monitorConfiguration value.
     */
    public Object monitorConfiguration() {
        return this.innerProperties() == null ? null : this.innerProperties().monitorConfiguration();
    }

    /**
     * Set the monitorConfiguration property: The configuration settings at the time of the monitor's health evaluation.
     *
     * @param monitorConfiguration the monitorConfiguration value to set.
     * @return the HealthMonitorStateChangeInner object itself.
     */
    public HealthMonitorStateChangeInner withMonitorConfiguration(Object monitorConfiguration) {
        if (this.innerProperties() == null) {
            this.innerProperties = new HealthMonitorStateChangeProperties();
        }
        this.innerProperties().withMonitorConfiguration(monitorConfiguration);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
