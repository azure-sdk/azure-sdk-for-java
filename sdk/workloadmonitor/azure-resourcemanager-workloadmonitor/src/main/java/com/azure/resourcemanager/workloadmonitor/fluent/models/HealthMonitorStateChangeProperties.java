// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.workloadmonitor.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.workloadmonitor.models.HealthState;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Properties of the monitor. */
@Fluent
public final class HealthMonitorStateChangeProperties {
    /*
     * Human-readable name of the monitor.
     */
    @JsonProperty(value = "monitorName")
    private String monitorName;

    /*
     * Type of the monitor.
     */
    @JsonProperty(value = "monitorType")
    private String monitorType;

    /*
     * Dynamic monitored object of the monitor.
     */
    @JsonProperty(value = "monitoredObject")
    private String monitoredObject;

    /*
     * Timestamp of the monitor's last health evaluation.
     */
    @JsonProperty(value = "evaluationTimestamp")
    private String evaluationTimestamp;

    /*
     * Timestamp of the monitor's last health state change.
     */
    @JsonProperty(value = "currentStateFirstObservedTimestamp")
    private String currentStateFirstObservedTimestamp;

    /*
     * One of health states - healthy, critical, warning, unknown, none, disabled.
     *
     * Previous health state of the monitor.
     */
    @JsonProperty(value = "previousMonitorState", access = JsonProperty.Access.WRITE_ONLY)
    private HealthState previousMonitorState;

    /*
     * One of health states - healthy, critical, warning, unknown, none, disabled.
     *
     * Current health state of the monitor.
     */
    @JsonProperty(value = "currentMonitorState", access = JsonProperty.Access.WRITE_ONLY)
    private HealthState currentMonitorState;

    /*
     * Evidence validating the monitor's current health state.
     */
    @JsonProperty(value = "evidence")
    private Object evidence;

    /*
     * The configuration settings at the time of the monitor's health evaluation.
     */
    @JsonProperty(value = "monitorConfiguration")
    private Object monitorConfiguration;

    /** Creates an instance of HealthMonitorStateChangeProperties class. */
    public HealthMonitorStateChangeProperties() {
    }

    /**
     * Get the monitorName property: Human-readable name of the monitor.
     *
     * @return the monitorName value.
     */
    public String monitorName() {
        return this.monitorName;
    }

    /**
     * Set the monitorName property: Human-readable name of the monitor.
     *
     * @param monitorName the monitorName value to set.
     * @return the HealthMonitorStateChangeProperties object itself.
     */
    public HealthMonitorStateChangeProperties withMonitorName(String monitorName) {
        this.monitorName = monitorName;
        return this;
    }

    /**
     * Get the monitorType property: Type of the monitor.
     *
     * @return the monitorType value.
     */
    public String monitorType() {
        return this.monitorType;
    }

    /**
     * Set the monitorType property: Type of the monitor.
     *
     * @param monitorType the monitorType value to set.
     * @return the HealthMonitorStateChangeProperties object itself.
     */
    public HealthMonitorStateChangeProperties withMonitorType(String monitorType) {
        this.monitorType = monitorType;
        return this;
    }

    /**
     * Get the monitoredObject property: Dynamic monitored object of the monitor.
     *
     * @return the monitoredObject value.
     */
    public String monitoredObject() {
        return this.monitoredObject;
    }

    /**
     * Set the monitoredObject property: Dynamic monitored object of the monitor.
     *
     * @param monitoredObject the monitoredObject value to set.
     * @return the HealthMonitorStateChangeProperties object itself.
     */
    public HealthMonitorStateChangeProperties withMonitoredObject(String monitoredObject) {
        this.monitoredObject = monitoredObject;
        return this;
    }

    /**
     * Get the evaluationTimestamp property: Timestamp of the monitor's last health evaluation.
     *
     * @return the evaluationTimestamp value.
     */
    public String evaluationTimestamp() {
        return this.evaluationTimestamp;
    }

    /**
     * Set the evaluationTimestamp property: Timestamp of the monitor's last health evaluation.
     *
     * @param evaluationTimestamp the evaluationTimestamp value to set.
     * @return the HealthMonitorStateChangeProperties object itself.
     */
    public HealthMonitorStateChangeProperties withEvaluationTimestamp(String evaluationTimestamp) {
        this.evaluationTimestamp = evaluationTimestamp;
        return this;
    }

    /**
     * Get the currentStateFirstObservedTimestamp property: Timestamp of the monitor's last health state change.
     *
     * @return the currentStateFirstObservedTimestamp value.
     */
    public String currentStateFirstObservedTimestamp() {
        return this.currentStateFirstObservedTimestamp;
    }

    /**
     * Set the currentStateFirstObservedTimestamp property: Timestamp of the monitor's last health state change.
     *
     * @param currentStateFirstObservedTimestamp the currentStateFirstObservedTimestamp value to set.
     * @return the HealthMonitorStateChangeProperties object itself.
     */
    public HealthMonitorStateChangeProperties withCurrentStateFirstObservedTimestamp(
        String currentStateFirstObservedTimestamp) {
        this.currentStateFirstObservedTimestamp = currentStateFirstObservedTimestamp;
        return this;
    }

    /**
     * Get the previousMonitorState property: One of health states - healthy, critical, warning, unknown, none,
     * disabled.
     *
     * <p>Previous health state of the monitor.
     *
     * @return the previousMonitorState value.
     */
    public HealthState previousMonitorState() {
        return this.previousMonitorState;
    }

    /**
     * Get the currentMonitorState property: One of health states - healthy, critical, warning, unknown, none, disabled.
     *
     * <p>Current health state of the monitor.
     *
     * @return the currentMonitorState value.
     */
    public HealthState currentMonitorState() {
        return this.currentMonitorState;
    }

    /**
     * Get the evidence property: Evidence validating the monitor's current health state.
     *
     * @return the evidence value.
     */
    public Object evidence() {
        return this.evidence;
    }

    /**
     * Set the evidence property: Evidence validating the monitor's current health state.
     *
     * @param evidence the evidence value to set.
     * @return the HealthMonitorStateChangeProperties object itself.
     */
    public HealthMonitorStateChangeProperties withEvidence(Object evidence) {
        this.evidence = evidence;
        return this;
    }

    /**
     * Get the monitorConfiguration property: The configuration settings at the time of the monitor's health evaluation.
     *
     * @return the monitorConfiguration value.
     */
    public Object monitorConfiguration() {
        return this.monitorConfiguration;
    }

    /**
     * Set the monitorConfiguration property: The configuration settings at the time of the monitor's health evaluation.
     *
     * @param monitorConfiguration the monitorConfiguration value to set.
     * @return the HealthMonitorStateChangeProperties object itself.
     */
    public HealthMonitorStateChangeProperties withMonitorConfiguration(Object monitorConfiguration) {
        this.monitorConfiguration = monitorConfiguration;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
