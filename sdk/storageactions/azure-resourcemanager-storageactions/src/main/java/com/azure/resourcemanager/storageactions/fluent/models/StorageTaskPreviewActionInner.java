// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.storageactions.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.storageactions.models.StorageTaskPreviewActionCondition;
import com.azure.resourcemanager.storageactions.models.StorageTaskPreviewBlobProperties;
import com.azure.resourcemanager.storageactions.models.StorageTaskPreviewContainerProperties;
import java.io.IOException;
import java.util.List;

/**
 * Storage Task Preview Action.
 */
@Fluent
public final class StorageTaskPreviewActionInner implements JsonSerializable<StorageTaskPreviewActionInner> {
    /*
     * Properties of the storage task preview.
     */
    private StorageTaskPreviewActionProperties innerProperties = new StorageTaskPreviewActionProperties();

    /**
     * Creates an instance of StorageTaskPreviewActionInner class.
     */
    public StorageTaskPreviewActionInner() {
    }

    /**
     * Get the innerProperties property: Properties of the storage task preview.
     * 
     * @return the innerProperties value.
     */
    private StorageTaskPreviewActionProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the container property: Properties of a sample container to test for a match with the preview action.
     * 
     * @return the container value.
     */
    public StorageTaskPreviewContainerProperties container() {
        return this.innerProperties() == null ? null : this.innerProperties().container();
    }

    /**
     * Set the container property: Properties of a sample container to test for a match with the preview action.
     * 
     * @param container the container value to set.
     * @return the StorageTaskPreviewActionInner object itself.
     */
    public StorageTaskPreviewActionInner withContainer(StorageTaskPreviewContainerProperties container) {
        if (this.innerProperties() == null) {
            this.innerProperties = new StorageTaskPreviewActionProperties();
        }
        this.innerProperties().withContainer(container);
        return this;
    }

    /**
     * Get the blobs property: Properties of some sample blobs in the container to test for matches with the preview
     * action.
     * 
     * @return the blobs value.
     */
    public List<StorageTaskPreviewBlobProperties> blobs() {
        return this.innerProperties() == null ? null : this.innerProperties().blobs();
    }

    /**
     * Set the blobs property: Properties of some sample blobs in the container to test for matches with the preview
     * action.
     * 
     * @param blobs the blobs value to set.
     * @return the StorageTaskPreviewActionInner object itself.
     */
    public StorageTaskPreviewActionInner withBlobs(List<StorageTaskPreviewBlobProperties> blobs) {
        if (this.innerProperties() == null) {
            this.innerProperties = new StorageTaskPreviewActionProperties();
        }
        this.innerProperties().withBlobs(blobs);
        return this;
    }

    /**
     * Get the action property: Preview action to test.
     * 
     * @return the action value.
     */
    public StorageTaskPreviewActionCondition action() {
        return this.innerProperties() == null ? null : this.innerProperties().action();
    }

    /**
     * Set the action property: Preview action to test.
     * 
     * @param action the action value to set.
     * @return the StorageTaskPreviewActionInner object itself.
     */
    public StorageTaskPreviewActionInner withAction(StorageTaskPreviewActionCondition action) {
        if (this.innerProperties() == null) {
            this.innerProperties = new StorageTaskPreviewActionProperties();
        }
        this.innerProperties().withAction(action);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property innerProperties in model StorageTaskPreviewActionInner"));
        } else {
            innerProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(StorageTaskPreviewActionInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StorageTaskPreviewActionInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StorageTaskPreviewActionInner if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the StorageTaskPreviewActionInner.
     */
    public static StorageTaskPreviewActionInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StorageTaskPreviewActionInner deserializedStorageTaskPreviewActionInner
                = new StorageTaskPreviewActionInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("properties".equals(fieldName)) {
                    deserializedStorageTaskPreviewActionInner.innerProperties
                        = StorageTaskPreviewActionProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStorageTaskPreviewActionInner;
        });
    }
}
