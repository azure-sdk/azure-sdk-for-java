// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.storageactions.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.storageactions.fluent.models.StorageTaskUpdateProperties;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Map;

/**
 * Parameters of the storage task update request.
 */
@Fluent
public final class StorageTaskUpdateParameters implements JsonSerializable<StorageTaskUpdateParameters> {
    /*
     * The identity of the resource.
     */
    private ManagedServiceIdentity identity;

    /*
     * Gets or sets a list of key value pairs that describe the resource. These tags can be used in viewing and grouping
     * this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a
     * key no greater in length than 128 characters and a value no greater in length than 256 characters.
     */
    private Map<String, String> tags;

    /*
     * Properties of the storage task.
     */
    private StorageTaskUpdateProperties innerProperties;

    /**
     * Creates an instance of StorageTaskUpdateParameters class.
     */
    public StorageTaskUpdateParameters() {
    }

    /**
     * Get the identity property: The identity of the resource.
     * 
     * @return the identity value.
     */
    public ManagedServiceIdentity identity() {
        return this.identity;
    }

    /**
     * Set the identity property: The identity of the resource.
     * 
     * @param identity the identity value to set.
     * @return the StorageTaskUpdateParameters object itself.
     */
    public StorageTaskUpdateParameters withIdentity(ManagedServiceIdentity identity) {
        this.identity = identity;
        return this;
    }

    /**
     * Get the tags property: Gets or sets a list of key value pairs that describe the resource. These tags can be used
     * in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a
     * resource. Each tag must have a key no greater in length than 128 characters and a value no greater in length than
     * 256 characters.
     * 
     * @return the tags value.
     */
    public Map<String, String> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: Gets or sets a list of key value pairs that describe the resource. These tags can be used
     * in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a
     * resource. Each tag must have a key no greater in length than 128 characters and a value no greater in length than
     * 256 characters.
     * 
     * @param tags the tags value to set.
     * @return the StorageTaskUpdateParameters object itself.
     */
    public StorageTaskUpdateParameters withTags(Map<String, String> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the innerProperties property: Properties of the storage task.
     * 
     * @return the innerProperties value.
     */
    private StorageTaskUpdateProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the taskVersion property: Storage task version.
     * 
     * @return the taskVersion value.
     */
    public Long taskVersion() {
        return this.innerProperties() == null ? null : this.innerProperties().taskVersion();
    }

    /**
     * Get the enabled property: Storage Task is enabled when set to true and disabled when set to false.
     * 
     * @return the enabled value.
     */
    public Boolean enabled() {
        return this.innerProperties() == null ? null : this.innerProperties().enabled();
    }

    /**
     * Set the enabled property: Storage Task is enabled when set to true and disabled when set to false.
     * 
     * @param enabled the enabled value to set.
     * @return the StorageTaskUpdateParameters object itself.
     */
    public StorageTaskUpdateParameters withEnabled(Boolean enabled) {
        if (this.innerProperties() == null) {
            this.innerProperties = new StorageTaskUpdateProperties();
        }
        this.innerProperties().withEnabled(enabled);
        return this;
    }

    /**
     * Get the description property: Text that describes the purpose of the storage task.
     * 
     * @return the description value.
     */
    public String description() {
        return this.innerProperties() == null ? null : this.innerProperties().description();
    }

    /**
     * Set the description property: Text that describes the purpose of the storage task.
     * 
     * @param description the description value to set.
     * @return the StorageTaskUpdateParameters object itself.
     */
    public StorageTaskUpdateParameters withDescription(String description) {
        if (this.innerProperties() == null) {
            this.innerProperties = new StorageTaskUpdateProperties();
        }
        this.innerProperties().withDescription(description);
        return this;
    }

    /**
     * Get the action property: The storage task action that is executed.
     * 
     * @return the action value.
     */
    public StorageTaskAction action() {
        return this.innerProperties() == null ? null : this.innerProperties().action();
    }

    /**
     * Set the action property: The storage task action that is executed.
     * 
     * @param action the action value to set.
     * @return the StorageTaskUpdateParameters object itself.
     */
    public StorageTaskUpdateParameters withAction(StorageTaskAction action) {
        if (this.innerProperties() == null) {
            this.innerProperties = new StorageTaskUpdateProperties();
        }
        this.innerProperties().withAction(action);
        return this;
    }

    /**
     * Get the provisioningState property: Represents the provisioning state of the storage task.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the creationTimeInUtc property: The creation date and time of the storage task in UTC.
     * 
     * @return the creationTimeInUtc value.
     */
    public OffsetDateTime creationTimeInUtc() {
        return this.innerProperties() == null ? null : this.innerProperties().creationTimeInUtc();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (identity() != null) {
            identity().validate();
        }
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("identity", this.identity);
        jsonWriter.writeMapField("tags", this.tags, (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StorageTaskUpdateParameters from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StorageTaskUpdateParameters if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the StorageTaskUpdateParameters.
     */
    public static StorageTaskUpdateParameters fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StorageTaskUpdateParameters deserializedStorageTaskUpdateParameters = new StorageTaskUpdateParameters();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("identity".equals(fieldName)) {
                    deserializedStorageTaskUpdateParameters.identity = ManagedServiceIdentity.fromJson(reader);
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedStorageTaskUpdateParameters.tags = tags;
                } else if ("properties".equals(fieldName)) {
                    deserializedStorageTaskUpdateParameters.innerProperties
                        = StorageTaskUpdateProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStorageTaskUpdateParameters;
        });
    }
}
