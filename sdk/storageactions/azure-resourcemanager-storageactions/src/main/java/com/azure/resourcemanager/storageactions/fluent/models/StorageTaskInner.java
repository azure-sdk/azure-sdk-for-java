// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.storageactions.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.core.management.SystemData;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.storageactions.models.ManagedServiceIdentity;
import com.azure.resourcemanager.storageactions.models.ProvisioningState;
import com.azure.resourcemanager.storageactions.models.StorageTaskAction;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Map;

/**
 * Represents Storage Task.
 */
@Fluent
public final class StorageTaskInner extends Resource {
    /*
     * The managed service identity of the resource.
     */
    private ManagedServiceIdentity identity;

    /*
     * Properties of the storage task.
     */
    private StorageTaskProperties innerProperties = new StorageTaskProperties();

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of StorageTaskInner class.
     */
    public StorageTaskInner() {
    }

    /**
     * Get the identity property: The managed service identity of the resource.
     * 
     * @return the identity value.
     */
    public ManagedServiceIdentity identity() {
        return this.identity;
    }

    /**
     * Set the identity property: The managed service identity of the resource.
     * 
     * @param identity the identity value to set.
     * @return the StorageTaskInner object itself.
     */
    public StorageTaskInner withIdentity(ManagedServiceIdentity identity) {
        this.identity = identity;
        return this;
    }

    /**
     * Get the innerProperties property: Properties of the storage task.
     * 
     * @return the innerProperties value.
     */
    private StorageTaskProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public StorageTaskInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public StorageTaskInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the taskVersion property: Storage task version.
     * 
     * @return the taskVersion value.
     */
    public Long taskVersion() {
        return this.innerProperties() == null ? null : this.innerProperties().taskVersion();
    }

    /**
     * Get the enabled property: Storage Task is enabled when set to true and disabled when set to false.
     * 
     * @return the enabled value.
     */
    public boolean enabled() {
        return this.innerProperties() == null ? false : this.innerProperties().enabled();
    }

    /**
     * Set the enabled property: Storage Task is enabled when set to true and disabled when set to false.
     * 
     * @param enabled the enabled value to set.
     * @return the StorageTaskInner object itself.
     */
    public StorageTaskInner withEnabled(boolean enabled) {
        if (this.innerProperties() == null) {
            this.innerProperties = new StorageTaskProperties();
        }
        this.innerProperties().withEnabled(enabled);
        return this;
    }

    /**
     * Get the description property: Text that describes the purpose of the storage task.
     * 
     * @return the description value.
     */
    public String description() {
        return this.innerProperties() == null ? null : this.innerProperties().description();
    }

    /**
     * Set the description property: Text that describes the purpose of the storage task.
     * 
     * @param description the description value to set.
     * @return the StorageTaskInner object itself.
     */
    public StorageTaskInner withDescription(String description) {
        if (this.innerProperties() == null) {
            this.innerProperties = new StorageTaskProperties();
        }
        this.innerProperties().withDescription(description);
        return this;
    }

    /**
     * Get the action property: The storage task action that is executed.
     * 
     * @return the action value.
     */
    public StorageTaskAction action() {
        return this.innerProperties() == null ? null : this.innerProperties().action();
    }

    /**
     * Set the action property: The storage task action that is executed.
     * 
     * @param action the action value to set.
     * @return the StorageTaskInner object itself.
     */
    public StorageTaskInner withAction(StorageTaskAction action) {
        if (this.innerProperties() == null) {
            this.innerProperties = new StorageTaskProperties();
        }
        this.innerProperties().withAction(action);
        return this;
    }

    /**
     * Get the provisioningState property: Represents the provisioning state of the storage task.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the creationTimeInUtc property: The creation date and time of the storage task in UTC.
     * 
     * @return the creationTimeInUtc value.
     */
    public OffsetDateTime creationTimeInUtc() {
        return this.innerProperties() == null ? null : this.innerProperties().creationTimeInUtc();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (identity() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property identity in model StorageTaskInner"));
        } else {
            identity().validate();
        }
        if (innerProperties() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property innerProperties in model StorageTaskInner"));
        } else {
            innerProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(StorageTaskInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("location", location());
        jsonWriter.writeMapField("tags", tags(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("identity", this.identity);
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StorageTaskInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StorageTaskInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the StorageTaskInner.
     */
    public static StorageTaskInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StorageTaskInner deserializedStorageTaskInner = new StorageTaskInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedStorageTaskInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedStorageTaskInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedStorageTaskInner.type = reader.getString();
                } else if ("location".equals(fieldName)) {
                    deserializedStorageTaskInner.withLocation(reader.getString());
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedStorageTaskInner.withTags(tags);
                } else if ("identity".equals(fieldName)) {
                    deserializedStorageTaskInner.identity = ManagedServiceIdentity.fromJson(reader);
                } else if ("properties".equals(fieldName)) {
                    deserializedStorageTaskInner.innerProperties = StorageTaskProperties.fromJson(reader);
                } else if ("systemData".equals(fieldName)) {
                    deserializedStorageTaskInner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStorageTaskInner;
        });
    }
}
