// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.search.documents.generated;

import com.azure.core.http.MatchConditions;
import com.azure.identity.DefaultAzureCredentialBuilder;
import com.azure.search.documents.IndexersClient;
import com.azure.search.documents.SearchClientBuilder;
import com.azure.search.documents.models.AzureActiveDirectoryApplicationCredentials;
import com.azure.search.documents.models.BlobIndexerParsingMode;
import com.azure.search.documents.models.IndexingParameters;
import com.azure.search.documents.models.IndexingParametersConfiguration;
import com.azure.search.documents.models.IndexingSchedule;
import com.azure.search.documents.models.MarkdownParsingSubmode;
import com.azure.search.documents.models.SearchIndexer;
import com.azure.search.documents.models.SearchResourceEncryptionKey;
import java.time.Duration;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

public class SearchServiceCreateOrUpdateIndexer {
    public static void main(String[] args) {
        IndexersClient indexersClient
            = new SearchClientBuilder().credential(new DefaultAzureCredentialBuilder().build())
                .endpoint("https://previewexampleservice.search.windows.net")
                .buildIndexersClient();
        // BEGIN:com.azure.search.documents.generated.indexerscreateorupdate.searchservicecreateorupdateindexer
        SearchIndexer response
            = indexersClient
                .createOrUpdate("myindexer",
                    new SearchIndexer("myindexer", "mydocdbdatasource", "preview-test")
                        .setDescription("Description of the indexer")
                        .setSkillsetName("myskillset")
                        .setSchedule(new IndexingSchedule(Duration.parse("P1D")))
                        .setParameters(
                            new IndexingParameters().setMaxFailedItems(10)
                                .setMaxFailedItemsPerBatch(5)
                                .setConfiguration(new IndexingParametersConfiguration()
                                    .setParsingMode(BlobIndexerParsingMode.MARKDOWN)
                                    .setMarkdownParsingSubmode(MarkdownParsingSubmode.ONE_TO_ONE)
                                    .setAdditionalProperties(mapOf())))
                        .setFieldMappings(Arrays.asList())
                        .setOutputFieldMappings(Arrays.asList())
                        .setIsDisabled(false)
                        .setEncryptionKey(new SearchResourceEncryptionKey("fakeTokenPlaceholder",
                            "fakeTokenPlaceholder", "fakeTokenPlaceholder").setAccessCredentials(
                                new AzureActiveDirectoryApplicationCredentials("00000000-0000-0000-0000-000000000000")
                                    .setApplicationSecret("fakeTokenPlaceholder"))),
                    null, null, new MatchConditions());
        // END:com.azure.search.documents.generated.indexerscreateorupdate.searchservicecreateorupdateindexer
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
