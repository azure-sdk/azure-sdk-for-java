// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.search.documents.generated;

import com.azure.core.http.MatchConditions;
import com.azure.identity.DefaultAzureCredentialBuilder;
import com.azure.search.documents.IndexersClient;
import com.azure.search.documents.SearchClientBuilder;
import com.azure.search.documents.models.AzureActiveDirectoryApplicationCredentials;
import com.azure.search.documents.models.BlobIndexerDataToExtract;
import com.azure.search.documents.models.BlobIndexerImageAction;
import com.azure.search.documents.models.BlobIndexerPDFTextRotationAlgorithm;
import com.azure.search.documents.models.BlobIndexerParsingMode;
import com.azure.search.documents.models.FieldMapping;
import com.azure.search.documents.models.FieldMappingFunction;
import com.azure.search.documents.models.IndexerExecutionEnvironment;
import com.azure.search.documents.models.IndexingParameters;
import com.azure.search.documents.models.IndexingParametersConfiguration;
import com.azure.search.documents.models.IndexingSchedule;
import com.azure.search.documents.models.MarkdownHeaderDepth;
import com.azure.search.documents.models.MarkdownParsingSubmode;
import com.azure.search.documents.models.SearchIndexer;
import com.azure.search.documents.models.SearchResourceEncryptionKey;
import java.time.Duration;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

public class SearchServiceCreateOrUpdateIndexer {
    public static void main(String[] args) {
        IndexersClient indexersClient
            = new SearchClientBuilder().credential(new DefaultAzureCredentialBuilder().build())
                .endpoint("https://previewexampleservice.search.windows.net")
                .buildIndexersClient();
        // BEGIN:com.azure.search.documents.generated.indexerscreateorupdate.searchservicecreateorupdateindexer
        SearchIndexer response
            = indexersClient
                .createOrUpdate("myindexer",
                    new SearchIndexer("myindexer", "mydocdbdatasource", "preview-test")
                        .setDescription("Description of the indexer")
                        .setSkillsetName("myskillset")
                        .setSchedule(new IndexingSchedule(Duration.parse("P1D"))
                            .setStartTime(OffsetDateTime.parse("2025-01-07T19:30:00Z")))
                        .setParameters(
                            new IndexingParameters().setBatchSize(10)
                                .setMaxFailedItems(10)
                                .setMaxFailedItemsPerBatch(5)
                                .setConfiguration(new IndexingParametersConfiguration()
                                    .setParsingMode(BlobIndexerParsingMode.MARKDOWN)
                                    .setExcludedFileNameExtensions(".png,.mp4")
                                    .setIndexedFileNameExtensions(".docx,.pptx")
                                    .setFailOnUnsupportedContentType(true)
                                    .setFailOnUnprocessableDocument(false)
                                    .setIndexStorageMetadataOnlyForOversizedDocuments(true)
                                    .setDelimitedTextHeaders("Header1,Header2")
                                    .setDelimitedTextDelimiter("|")
                                    .setFirstLineContainsHeaders(true)
                                    .setMarkdownParsingSubmode(MarkdownParsingSubmode.ONE_TO_ONE)
                                    .setMarkdownHeaderDepth(MarkdownHeaderDepth.H6)
                                    .setDocumentRoot("/root")
                                    .setDataToExtract(BlobIndexerDataToExtract.STORAGE_METADATA)
                                    .setImageAction(BlobIndexerImageAction.NONE)
                                    .setAllowSkillsetToReadFileData(false)
                                    .setPdfTextRotationAlgorithm(BlobIndexerPDFTextRotationAlgorithm.NONE)
                                    .setExecutionEnvironment(IndexerExecutionEnvironment.STANDARD)
                                    .setAdditionalProperties(mapOf())))
                        .setFieldMappings(Arrays.asList(new FieldMapping("/document").setTargetFieldName("name")
                            .setMappingFunction(new FieldMappingFunction("base64Encode"))))
                        .setOutputFieldMappings(Arrays.asList(new FieldMapping("/document").setTargetFieldName("name")
                            .setMappingFunction(new FieldMappingFunction("base64Encode"))))
                        .setIsDisabled(false)
                        .setEncryptionKey(
                            new SearchResourceEncryptionKey("fakeTokenPlaceholder", "fakeTokenPlaceholder")
                                .setKeyVersion("fakeTokenPlaceholder")
                                .setAccessCredentials(new AzureActiveDirectoryApplicationCredentials(
                                    "00000000-0000-0000-0000-000000000000")
                                        .setApplicationSecret("fakeTokenPlaceholder"))),
                    null, null, new MatchConditions());
        // END:com.azure.search.documents.generated.indexerscreateorupdate.searchservicecreateorupdateindexer
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
