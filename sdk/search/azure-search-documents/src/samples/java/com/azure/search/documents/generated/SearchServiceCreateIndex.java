// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.search.documents.generated;

import com.azure.identity.DefaultAzureCredentialBuilder;
import com.azure.search.documents.IndexesClient;
import com.azure.search.documents.SearchClientBuilder;
import com.azure.search.documents.models.AIStudioModelCatalogName;
import com.azure.search.documents.models.AzureMachineLearningParameters;
import com.azure.search.documents.models.AzureMachineLearningVectorizer;
import com.azure.search.documents.models.AzureOpenAIModelName;
import com.azure.search.documents.models.AzureOpenAIVectorizer;
import com.azure.search.documents.models.AzureOpenAIVectorizerParameters;
import com.azure.search.documents.models.BinaryQuantizationCompression;
import com.azure.search.documents.models.CharFilterName;
import com.azure.search.documents.models.CustomAnalyzer;
import com.azure.search.documents.models.HnswAlgorithmConfiguration;
import com.azure.search.documents.models.HnswParameters;
import com.azure.search.documents.models.LexicalAnalyzerName;
import com.azure.search.documents.models.LexicalTokenizerName;
import com.azure.search.documents.models.RescoringOptions;
import com.azure.search.documents.models.ScalarQuantizationCompression;
import com.azure.search.documents.models.ScalarQuantizationParameters;
import com.azure.search.documents.models.ScoringProfile;
import com.azure.search.documents.models.SearchField;
import com.azure.search.documents.models.SearchFieldDataType;
import com.azure.search.documents.models.SearchIndex;
import com.azure.search.documents.models.SearchIndexerDataNoneIdentity;
import com.azure.search.documents.models.SearchSuggester;
import com.azure.search.documents.models.SemanticSearch;
import com.azure.search.documents.models.TagScoringFunction;
import com.azure.search.documents.models.TagScoringParameters;
import com.azure.search.documents.models.TextWeights;
import com.azure.search.documents.models.TokenFilterName;
import com.azure.search.documents.models.VectorSearch;
import com.azure.search.documents.models.VectorSearchAlgorithmMetric;
import com.azure.search.documents.models.VectorSearchCompressionRescoreStorageMethod;
import com.azure.search.documents.models.VectorSearchCompressionTarget;
import com.azure.search.documents.models.VectorSearchProfile;
import com.azure.search.documents.models.WebApiVectorizer;
import com.azure.search.documents.models.WebApiVectorizerParameters;
import java.time.Duration;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

public class SearchServiceCreateIndex {
    public static void main(String[] args) {
        IndexesClient indexesClient = new SearchClientBuilder().credential(new DefaultAzureCredentialBuilder().build())
            .endpoint("https://previewexampleservice.search.windows.net")
            .buildIndexesClient();
        // BEGIN:com.azure.search.documents.generated.indexescreate.searchservicecreateindex
        SearchIndex response = indexesClient.create(new SearchIndex("temp-preview-test", Arrays.asList(
            new SearchField("id", SearchFieldDataType.STRING).setKey(true).setSortable(true),
            new SearchField("vector1", SearchFieldDataType.fromString("Collection(Edm.Single)")).setRetrievable(true)
                .setSearchable(true)
                .setVectorSearchDimensions(20)
                .setVectorSearchProfileName("config1"),
            new SearchField("vector1b", SearchFieldDataType.fromString("Collection(Edm.Single)")).setRetrievable(true)
                .setSearchable(true)
                .setVectorSearchDimensions(10)
                .setVectorSearchProfileName("config2"),
            new SearchField("vector2", SearchFieldDataType.fromString("Collection(Edm.Single)")).setRetrievable(true)
                .setSearchable(true)
                .setVectorSearchDimensions(5)
                .setVectorSearchProfileName("config3"),
            new SearchField("vector3", SearchFieldDataType.fromString("Collection(Edm.Single)")).setRetrievable(true)
                .setSearchable(true)
                .setVectorSearchDimensions(5)
                .setVectorSearchProfileName("config3"),
            new SearchField("vector22", SearchFieldDataType.fromString("Collection(Edm.Single)")).setRetrievable(true)
                .setSearchable(true)
                .setVectorSearchDimensions(10)
                .setVectorSearchProfileName("config2"),
            new SearchField("name", SearchFieldDataType.STRING).setRetrievable(true)
                .setSearchable(true)
                .setFilterable(true)
                .setSortable(true)
                .setFacetable(true)
                .setAnalyzer(LexicalAnalyzerName.EN_LUCENE),
            new SearchField("description", SearchFieldDataType.STRING).setRetrievable(true)
                .setSearchable(true)
                .setFilterable(true)
                .setSortable(true)
                .setFacetable(true)
                .setAnalyzer(LexicalAnalyzerName.STANDARD_LUCENE),
            new SearchField("category", SearchFieldDataType.STRING).setRetrievable(true)
                .setSearchable(true)
                .setFilterable(true)
                .setSortable(true)
                .setFacetable(true)
                .setAnalyzer(LexicalAnalyzerName.EN_LUCENE),
            new SearchField("ownerId", SearchFieldDataType.STRING).setRetrievable(true)
                .setSearchable(true)
                .setFilterable(true)
                .setSortable(true)
                .setFacetable(true)
                .setAnalyzer(LexicalAnalyzerName.EN_LUCENE)))
                    .setScoringProfiles(Arrays.asList(new ScoringProfile("stringFieldBoost")
                        .setTextWeights(
                            new TextWeights(mapOf("name", 3.0, "description", 1.0, "category", 2.0, "ownerId", 1.0)))
                        .setFunctions(Arrays
                            .asList(new TagScoringFunction("category", 2.0, new TagScoringParameters("categoryTag"))))))
                    .setSuggesters(Arrays.asList(new SearchSuggester("sg", Arrays.asList("category", "ownerId"))))
                    .setAnalyzers(Arrays.asList(new CustomAnalyzer("tagsAnalyzer", LexicalTokenizerName.STANDARD)
                        .setTokenFilters(Arrays.asList(TokenFilterName.COMMON_GRAM))
                        .setCharFilters(Arrays.asList(CharFilterName.HTML_STRIP))))
                    .setTokenizers(Arrays.asList())
                    .setTokenFilters(Arrays.asList())
                    .setCharFilters(Arrays.asList())
                    .setNormalizers(Arrays.asList())
                    .setSemanticSearch(new SemanticSearch())
                    .setVectorSearch(new VectorSearch()
                        .setProfiles(Arrays.asList(
                            new VectorSearchProfile("config1", "cosine").setVectorizerName("openai")
                                .setCompressionName("mySQ8"),
                            new VectorSearchProfile("config2", "euclidean").setVectorizerName("custom-web-api")
                                .setCompressionName("mySQ8"),
                            new VectorSearchProfile("config3", "dotProduct").setVectorizerName("custom-web-api")
                                .setCompressionName("myBQC")))
                        .setAlgorithms(Arrays.asList(
                            new HnswAlgorithmConfiguration("cosine")
                                .setParameters(new HnswParameters().setMetric(VectorSearchAlgorithmMetric.COSINE)),
                            new HnswAlgorithmConfiguration("euclidean")
                                .setParameters(new HnswParameters().setMetric(VectorSearchAlgorithmMetric.EUCLIDEAN)),
                            new HnswAlgorithmConfiguration("dotProduct").setParameters(
                                new HnswParameters().setMetric(VectorSearchAlgorithmMetric.DOT_PRODUCT))))
                        .setVectorizers(Arrays.asList(
                            new AzureOpenAIVectorizer("openai").setParameters(new AzureOpenAIVectorizerParameters()
                                .setResourceUrl("https://test-sample.openai.azure.com/")
                                .setDeploymentName("model")
                                .setApiKey("fakeTokenPlaceholder")
                                .setModelName(AzureOpenAIModelName.TEXT_EMBEDDING3LARGE)),
                            new WebApiVectorizer("custom-web-api").setWebApiParameters(
                                new WebApiVectorizerParameters().setUrl("https://my-custom-endpoint.org/")
                                    .setHttpHeaders(mapOf("header1", "value1", "header2", "value2"))
                                    .setHttpMethod("POST")
                                    .setTimeout(Duration.parse("PT1M"))
                                    .setAuthResourceId("api://f89d1c93-58a7-4b07-9a5b-5f89048b927b")
                                    .setAuthIdentity(new SearchIndexerDataNoneIdentity())),
                            new AzureMachineLearningVectorizer("aml")
                                .setAMLParameters(new AzureMachineLearningParameters("https://my-custom-endpoint.org/")
                                    .setResourceId("aml resource id")
                                    .setTimeout(Duration.parse("PT1M"))
                                    .setRegion("aml region")
                                    .setModelName(
                                        AIStudioModelCatalogName.OPEN_AICLIPIMAGE_TEXT_EMBEDDINGS_VIT_BASE_PATCH32))))
                        .setCompressions(Arrays.asList(
                            new ScalarQuantizationCompression("mySQ8")
                                .setRescoringOptions(new RescoringOptions().setEnableRescoring(true)
                                    .setDefaultOversampling(10.0D)
                                    .setRescoreStorageMethod(
                                        VectorSearchCompressionRescoreStorageMethod.PRESERVE_ORIGINALS))
                                .setTruncationDimension(2)
                                .setParameters(new ScalarQuantizationParameters()
                                    .setQuantizedDataType(VectorSearchCompressionTarget.INT8)),
                            new BinaryQuantizationCompression("myBQC")
                                .setRescoringOptions(new RescoringOptions().setEnableRescoring(true)
                                    .setDefaultOversampling(10.0D)
                                    .setRescoreStorageMethod(
                                        VectorSearchCompressionRescoreStorageMethod.PRESERVE_ORIGINALS))
                                .setTruncationDimension(2)))));
        // END:com.azure.search.documents.generated.indexescreate.searchservicecreateindex
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
