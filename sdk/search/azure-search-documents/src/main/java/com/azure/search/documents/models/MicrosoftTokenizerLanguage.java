// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.search.documents.models;

import com.azure.core.annotation.Generated;
import com.azure.core.util.ExpandableStringEnum;
import java.util.Collection;

/**
 * Lists the languages supported by the Microsoft language tokenizer.
 */
public final class MicrosoftTokenizerLanguage extends ExpandableStringEnum<MicrosoftTokenizerLanguage> {
    /**
     * Selects the Microsoft tokenizer for Bangla.
     */
    @Generated
    public static final MicrosoftTokenizerLanguage BANGLA = fromString("bangla");

    /**
     * Selects the Microsoft tokenizer for Bulgarian.
     */
    @Generated
    public static final MicrosoftTokenizerLanguage BULGARIAN = fromString("bulgarian");

    /**
     * Selects the Microsoft tokenizer for Catalan.
     */
    @Generated
    public static final MicrosoftTokenizerLanguage CATALAN = fromString("catalan");

    /**
     * Selects the Microsoft tokenizer for Chinese (Simplified).
     */
    @Generated
    public static final MicrosoftTokenizerLanguage CHINESE_SIMPLIFIED = fromString("chineseSimplified");

    /**
     * Selects the Microsoft tokenizer for Chinese (Traditional).
     */
    @Generated
    public static final MicrosoftTokenizerLanguage CHINESE_TRADITIONAL = fromString("chineseTraditional");

    /**
     * Selects the Microsoft tokenizer for Croatian.
     */
    @Generated
    public static final MicrosoftTokenizerLanguage CROATIAN = fromString("croatian");

    /**
     * Selects the Microsoft tokenizer for Czech.
     */
    @Generated
    public static final MicrosoftTokenizerLanguage CZECH = fromString("czech");

    /**
     * Selects the Microsoft tokenizer for Danish.
     */
    @Generated
    public static final MicrosoftTokenizerLanguage DANISH = fromString("danish");

    /**
     * Selects the Microsoft tokenizer for Dutch.
     */
    @Generated
    public static final MicrosoftTokenizerLanguage DUTCH = fromString("dutch");

    /**
     * Selects the Microsoft tokenizer for English.
     */
    @Generated
    public static final MicrosoftTokenizerLanguage ENGLISH = fromString("english");

    /**
     * Selects the Microsoft tokenizer for French.
     */
    @Generated
    public static final MicrosoftTokenizerLanguage FRENCH = fromString("french");

    /**
     * Selects the Microsoft tokenizer for German.
     */
    @Generated
    public static final MicrosoftTokenizerLanguage GERMAN = fromString("german");

    /**
     * Selects the Microsoft tokenizer for Greek.
     */
    @Generated
    public static final MicrosoftTokenizerLanguage GREEK = fromString("greek");

    /**
     * Selects the Microsoft tokenizer for Gujarati.
     */
    @Generated
    public static final MicrosoftTokenizerLanguage GUJARATI = fromString("gujarati");

    /**
     * Selects the Microsoft tokenizer for Hindi.
     */
    @Generated
    public static final MicrosoftTokenizerLanguage HINDI = fromString("hindi");

    /**
     * Selects the Microsoft tokenizer for Icelandic.
     */
    @Generated
    public static final MicrosoftTokenizerLanguage ICELANDIC = fromString("icelandic");

    /**
     * Selects the Microsoft tokenizer for Indonesian.
     */
    @Generated
    public static final MicrosoftTokenizerLanguage INDONESIAN = fromString("indonesian");

    /**
     * Selects the Microsoft tokenizer for Italian.
     */
    @Generated
    public static final MicrosoftTokenizerLanguage ITALIAN = fromString("italian");

    /**
     * Selects the Microsoft tokenizer for Japanese.
     */
    @Generated
    public static final MicrosoftTokenizerLanguage JAPANESE = fromString("japanese");

    /**
     * Selects the Microsoft tokenizer for Kannada.
     */
    @Generated
    public static final MicrosoftTokenizerLanguage KANNADA = fromString("kannada");

    /**
     * Selects the Microsoft tokenizer for Korean.
     */
    @Generated
    public static final MicrosoftTokenizerLanguage KOREAN = fromString("korean");

    /**
     * Selects the Microsoft tokenizer for Malay.
     */
    @Generated
    public static final MicrosoftTokenizerLanguage MALAY = fromString("malay");

    /**
     * Selects the Microsoft tokenizer for Malayalam.
     */
    @Generated
    public static final MicrosoftTokenizerLanguage MALAYALAM = fromString("malayalam");

    /**
     * Selects the Microsoft tokenizer for Marathi.
     */
    @Generated
    public static final MicrosoftTokenizerLanguage MARATHI = fromString("marathi");

    /**
     * Selects the Microsoft tokenizer for Norwegian (Bokm√•l).
     */
    @Generated
    public static final MicrosoftTokenizerLanguage NORWEGIAN_BOKMAAL = fromString("norwegianBokmaal");

    /**
     * Selects the Microsoft tokenizer for Polish.
     */
    @Generated
    public static final MicrosoftTokenizerLanguage POLISH = fromString("polish");

    /**
     * Selects the Microsoft tokenizer for Portuguese.
     */
    @Generated
    public static final MicrosoftTokenizerLanguage PORTUGUESE = fromString("portuguese");

    /**
     * Selects the Microsoft tokenizer for Portuguese (Brazil).
     */
    @Generated
    public static final MicrosoftTokenizerLanguage PORTUGUESE_BRAZILIAN = fromString("portugueseBrazilian");

    /**
     * Selects the Microsoft tokenizer for Punjabi.
     */
    @Generated
    public static final MicrosoftTokenizerLanguage PUNJABI = fromString("punjabi");

    /**
     * Selects the Microsoft tokenizer for Romanian.
     */
    @Generated
    public static final MicrosoftTokenizerLanguage ROMANIAN = fromString("romanian");

    /**
     * Selects the Microsoft tokenizer for Russian.
     */
    @Generated
    public static final MicrosoftTokenizerLanguage RUSSIAN = fromString("russian");

    /**
     * Selects the Microsoft tokenizer for Serbian (Cyrillic).
     */
    @Generated
    public static final MicrosoftTokenizerLanguage SERBIAN_CYRILLIC = fromString("serbianCyrillic");

    /**
     * Selects the Microsoft tokenizer for Serbian (Latin).
     */
    @Generated
    public static final MicrosoftTokenizerLanguage SERBIAN_LATIN = fromString("serbianLatin");

    /**
     * Selects the Microsoft tokenizer for Slovenian.
     */
    @Generated
    public static final MicrosoftTokenizerLanguage SLOVENIAN = fromString("slovenian");

    /**
     * Selects the Microsoft tokenizer for Spanish.
     */
    @Generated
    public static final MicrosoftTokenizerLanguage SPANISH = fromString("spanish");

    /**
     * Selects the Microsoft tokenizer for Swedish.
     */
    @Generated
    public static final MicrosoftTokenizerLanguage SWEDISH = fromString("swedish");

    /**
     * Selects the Microsoft tokenizer for Tamil.
     */
    @Generated
    public static final MicrosoftTokenizerLanguage TAMIL = fromString("tamil");

    /**
     * Selects the Microsoft tokenizer for Telugu.
     */
    @Generated
    public static final MicrosoftTokenizerLanguage TELUGU = fromString("telugu");

    /**
     * Selects the Microsoft tokenizer for Thai.
     */
    @Generated
    public static final MicrosoftTokenizerLanguage THAI = fromString("thai");

    /**
     * Selects the Microsoft tokenizer for Ukrainian.
     */
    @Generated
    public static final MicrosoftTokenizerLanguage UKRAINIAN = fromString("ukrainian");

    /**
     * Selects the Microsoft tokenizer for Urdu.
     */
    @Generated
    public static final MicrosoftTokenizerLanguage URDU = fromString("urdu");

    /**
     * Selects the Microsoft tokenizer for Vietnamese.
     */
    @Generated
    public static final MicrosoftTokenizerLanguage VIETNAMESE = fromString("vietnamese");

    /**
     * Creates a new instance of MicrosoftTokenizerLanguage value.
     * 
     * @deprecated Use the {@link #fromString(String)} factory method.
     */
    @Generated
    @Deprecated
    public MicrosoftTokenizerLanguage() {
    }

    /**
     * Creates or finds a MicrosoftTokenizerLanguage from its string representation.
     * 
     * @param name a name to look for.
     * @return the corresponding MicrosoftTokenizerLanguage.
     */
    @Generated
    public static MicrosoftTokenizerLanguage fromString(String name) {
        return fromString(name, MicrosoftTokenizerLanguage.class);
    }

    /**
     * Gets known MicrosoftTokenizerLanguage values.
     * 
     * @return known MicrosoftTokenizerLanguage values.
     */
    @Generated
    public static Collection<MicrosoftTokenizerLanguage> values() {
        return values(MicrosoftTokenizerLanguage.class);
    }
}
