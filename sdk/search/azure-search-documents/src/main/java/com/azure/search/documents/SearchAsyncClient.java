// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.search.documents;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.FluxUtil;
import com.azure.search.documents.implementation.SearchClientImpl;
import com.azure.search.documents.models.IndexStatisticsSummary;
import com.azure.search.documents.models.SearchServiceStatistics;
import java.util.stream.Collectors;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the asynchronous SearchClient type.
 */
@ServiceClient(builder = SearchClientBuilder.class, isAsync = true)
public final class SearchAsyncClient {
    @Generated
    private final SearchClientImpl serviceClient;

    /**
     * Initializes an instance of SearchAsyncClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    SearchAsyncClient(SearchClientImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Gets service level statistics for a search service.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     counters (Required): {
     *         aliasesCount (Required): {
     *             usage: long (Required)
     *             quota: Long (Optional)
     *         }
     *         documentCount (Required): (recursive schema, see documentCount above)
     *         indexesCount (Required): (recursive schema, see indexesCount above)
     *         indexersCount (Required): (recursive schema, see indexersCount above)
     *         dataSourcesCount (Required): (recursive schema, see dataSourcesCount above)
     *         storageSize (Required): (recursive schema, see storageSize above)
     *         synonymMaps (Required): (recursive schema, see synonymMaps above)
     *         skillsetCount (Required): (recursive schema, see skillsetCount above)
     *         vectorIndexSize (Required): (recursive schema, see vectorIndexSize above)
     *     }
     *     limits (Required): {
     *         maxFieldsPerIndex: Integer (Optional)
     *         maxFieldNestingDepthPerIndex: Integer (Optional)
     *         maxComplexCollectionFieldsPerIndex: Integer (Optional)
     *         maxComplexObjectsInCollectionsPerDocument: Integer (Optional)
     *         maxStoragePerIndex: Long (Optional)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return service level statistics for a search service along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getServiceStatisticsWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.getServiceStatisticsWithResponseAsync(requestOptions);
    }

    /**
     * Retrieves a summary of statistics for all indexes in the search service.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     documentCount: long (Required)
     *     storageSize: long (Required)
     *     vectorIndexSize: Long (Optional)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response from a request to retrieve stats summary of all indexes as paginated response with
     * {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> getIndexStatsSummary(RequestOptions requestOptions) {
        return this.serviceClient.getIndexStatsSummaryAsync(requestOptions);
    }

    /**
     * Gets service level statistics for a search service.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return service level statistics for a search service on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SearchServiceStatistics> getServiceStatistics() {
        // Generated convenience method for getServiceStatisticsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getServiceStatisticsWithResponse(requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(SearchServiceStatistics.class));
    }

    /**
     * Retrieves a summary of statistics for all indexes in the search service.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response from a request to retrieve stats summary of all indexes as paginated response with
     * {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<IndexStatisticsSummary> getIndexStatsSummary() {
        // Generated convenience method for getIndexStatsSummary
        RequestOptions requestOptions = new RequestOptions();
        PagedFlux<BinaryData> pagedFluxResponse = getIndexStatsSummary(requestOptions);
        return PagedFlux.create(() -> (continuationTokenParam, pageSizeParam) -> {
            Flux<PagedResponse<BinaryData>> flux = (continuationTokenParam == null)
                ? pagedFluxResponse.byPage().take(1)
                : pagedFluxResponse.byPage(continuationTokenParam).take(1);
            return flux
                .map(pagedResponse -> new PagedResponseBase<Void, IndexStatisticsSummary>(pagedResponse.getRequest(),
                    pagedResponse.getStatusCode(), pagedResponse.getHeaders(),
                    pagedResponse.getValue()
                        .stream()
                        .map(protocolMethodData -> protocolMethodData.toObject(IndexStatisticsSummary.class))
                        .collect(Collectors.toList()),
                    pagedResponse.getContinuationToken(), null));
        });
    }
}
