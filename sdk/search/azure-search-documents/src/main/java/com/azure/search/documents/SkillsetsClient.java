// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.search.documents;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.HttpHeaderName;
import com.azure.core.http.MatchConditions;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.search.documents.implementation.SkillsetsImpl;
import com.azure.search.documents.models.ListSkillsetsResult;
import com.azure.search.documents.models.SearchIndexerSkillset;
import com.azure.search.documents.models.SkillNames;

/**
 * Initializes a new instance of the synchronous SearchClient type.
 */
@ServiceClient(builder = SearchClientBuilder.class)
public final class SkillsetsClient {
    @Generated
    private final SkillsetsImpl serviceClient;

    /**
     * Initializes an instance of SkillsetsClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    SkillsetsClient(SkillsetsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Creates a new skillset in a search service or updates the skillset if it
     * already exists.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>ignoreResetRequirements</td><td>Boolean</td><td>No</td><td>Ignores cache reset requirements.</td></tr>
     * <tr><td>disableCacheReprocessingChangeDetection</td><td>Boolean</td><td>No</td><td>Disables cache reprocessing
     * change detection.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>Defines the If-Match condition. The operation will be
     * performed only if the ETag on the server matches this value.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>Defines the If-None-Match condition. The operation will
     * be performed only if the ETag on the server does not match this value.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     description: String (Optional)
     *     skills (Required): [
     *          (Required){
     *             &#64;odata.type: String (Required)
     *             name: String (Optional)
     *             description: String (Optional)
     *             context: String (Optional)
     *             inputs (Required): [
     *                  (Required){
     *                     name: String (Required)
     *                     source: String (Optional)
     *                     sourceContext: String (Optional)
     *                     inputs (Optional): [
     *                         (recursive schema, see above)
     *                     ]
     *                 }
     *             ]
     *             outputs (Required): [
     *                  (Required){
     *                     name: String (Required)
     *                     targetName: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     cognitiveServices (Optional): {
     *         &#64;odata.type: String (Required)
     *         description: String (Optional)
     *     }
     *     knowledgeStore (Optional): {
     *         storageConnectionString: String (Required)
     *         projections (Required): [
     *              (Required){
     *                 tables (Optional): [
     *                      (Optional){
     *                         referenceKeyName: String (Optional)
     *                         generatedKeyName: String (Optional)
     *                         source: String (Optional)
     *                         sourceContext: String (Optional)
     *                         inputs (Optional): [
     *                             (recursive schema, see above)
     *                         ]
     *                         tableName: String (Required)
     *                     }
     *                 ]
     *                 objects (Optional): [
     *                      (Optional){
     *                         referenceKeyName: String (Optional)
     *                         generatedKeyName: String (Optional)
     *                         source: String (Optional)
     *                         sourceContext: String (Optional)
     *                         inputs (Optional): [
     *                             (recursive schema, see above)
     *                         ]
     *                         storageContainer: String (Required)
     *                     }
     *                 ]
     *                 files (Optional): [
     *                      (Optional){
     *                         referenceKeyName: String (Optional)
     *                         generatedKeyName: String (Optional)
     *                         source: String (Optional)
     *                         sourceContext: String (Optional)
     *                         inputs (Optional): [
     *                             (recursive schema, see above)
     *                         ]
     *                         storageContainer: String (Required)
     *                     }
     *                 ]
     *             }
     *         ]
     *         identity (Optional): {
     *             &#64;odata.type: String (Required)
     *         }
     *         parameters (Optional): {
     *             synthesizeGeneratedKeyName: Boolean (Optional)
     *              (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *         }
     *     }
     *     indexProjections (Optional): {
     *         selectors (Required): [
     *              (Required){
     *                 targetIndexName: String (Required)
     *                 parentKeyFieldName: String (Required)
     *                 sourceContext: String (Required)
     *                 mappings (Required): [
     *                     (recursive schema, see above)
     *                 ]
     *             }
     *         ]
     *         parameters (Optional): {
     *             projectionMode: String(skipIndexingParentDocuments/includeIndexingParentDocuments) (Optional)
     *              (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *         }
     *     }
     *     &#64;odata.etag: String (Optional)
     *     encryptionKey (Optional): {
     *         keyVaultKeyName: String (Required)
     *         keyVaultKeyVersion: String (Optional)
     *         keyVaultUri: String (Required)
     *         accessCredentials (Optional): {
     *             applicationId: String (Required)
     *             applicationSecret: String (Optional)
     *         }
     *         identity (Optional): (recursive schema, see identity above)
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     description: String (Optional)
     *     skills (Required): [
     *          (Required){
     *             &#64;odata.type: String (Required)
     *             name: String (Optional)
     *             description: String (Optional)
     *             context: String (Optional)
     *             inputs (Required): [
     *                  (Required){
     *                     name: String (Required)
     *                     source: String (Optional)
     *                     sourceContext: String (Optional)
     *                     inputs (Optional): [
     *                         (recursive schema, see above)
     *                     ]
     *                 }
     *             ]
     *             outputs (Required): [
     *                  (Required){
     *                     name: String (Required)
     *                     targetName: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     cognitiveServices (Optional): {
     *         &#64;odata.type: String (Required)
     *         description: String (Optional)
     *     }
     *     knowledgeStore (Optional): {
     *         storageConnectionString: String (Required)
     *         projections (Required): [
     *              (Required){
     *                 tables (Optional): [
     *                      (Optional){
     *                         referenceKeyName: String (Optional)
     *                         generatedKeyName: String (Optional)
     *                         source: String (Optional)
     *                         sourceContext: String (Optional)
     *                         inputs (Optional): [
     *                             (recursive schema, see above)
     *                         ]
     *                         tableName: String (Required)
     *                     }
     *                 ]
     *                 objects (Optional): [
     *                      (Optional){
     *                         referenceKeyName: String (Optional)
     *                         generatedKeyName: String (Optional)
     *                         source: String (Optional)
     *                         sourceContext: String (Optional)
     *                         inputs (Optional): [
     *                             (recursive schema, see above)
     *                         ]
     *                         storageContainer: String (Required)
     *                     }
     *                 ]
     *                 files (Optional): [
     *                      (Optional){
     *                         referenceKeyName: String (Optional)
     *                         generatedKeyName: String (Optional)
     *                         source: String (Optional)
     *                         sourceContext: String (Optional)
     *                         inputs (Optional): [
     *                             (recursive schema, see above)
     *                         ]
     *                         storageContainer: String (Required)
     *                     }
     *                 ]
     *             }
     *         ]
     *         identity (Optional): {
     *             &#64;odata.type: String (Required)
     *         }
     *         parameters (Optional): {
     *             synthesizeGeneratedKeyName: Boolean (Optional)
     *              (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *         }
     *     }
     *     indexProjections (Optional): {
     *         selectors (Required): [
     *              (Required){
     *                 targetIndexName: String (Required)
     *                 parentKeyFieldName: String (Required)
     *                 sourceContext: String (Required)
     *                 mappings (Required): [
     *                     (recursive schema, see above)
     *                 ]
     *             }
     *         ]
     *         parameters (Optional): {
     *             projectionMode: String(skipIndexingParentDocuments/includeIndexingParentDocuments) (Optional)
     *              (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *         }
     *     }
     *     &#64;odata.etag: String (Optional)
     *     encryptionKey (Optional): {
     *         keyVaultKeyName: String (Required)
     *         keyVaultKeyVersion: String (Optional)
     *         keyVaultUri: String (Required)
     *         accessCredentials (Optional): {
     *             applicationId: String (Required)
     *             applicationSecret: String (Optional)
     *         }
     *         identity (Optional): (recursive schema, see identity above)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param skillsetName The name of the skillset.
     * @param skillset The skillset containing one or more skills to create or update in a search
     * service.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of skills along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createOrUpdateWithResponse(String skillsetName, BinaryData skillset,
        RequestOptions requestOptions) {
        return this.serviceClient.createOrUpdateWithResponse(skillsetName, skillset, requestOptions);
    }

    /**
     * Deletes a skillset in a search service.
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>Defines the If-Match condition. The operation will be
     * performed only if the ETag on the server matches this value.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>Defines the If-None-Match condition. The operation will
     * be performed only if the ETag on the server does not match this value.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param skillsetName The name of the skillset.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(String skillsetName, RequestOptions requestOptions) {
        return this.serviceClient.deleteWithResponse(skillsetName, requestOptions);
    }

    /**
     * Retrieves a skillset in a search service.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     description: String (Optional)
     *     skills (Required): [
     *          (Required){
     *             &#64;odata.type: String (Required)
     *             name: String (Optional)
     *             description: String (Optional)
     *             context: String (Optional)
     *             inputs (Required): [
     *                  (Required){
     *                     name: String (Required)
     *                     source: String (Optional)
     *                     sourceContext: String (Optional)
     *                     inputs (Optional): [
     *                         (recursive schema, see above)
     *                     ]
     *                 }
     *             ]
     *             outputs (Required): [
     *                  (Required){
     *                     name: String (Required)
     *                     targetName: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     cognitiveServices (Optional): {
     *         &#64;odata.type: String (Required)
     *         description: String (Optional)
     *     }
     *     knowledgeStore (Optional): {
     *         storageConnectionString: String (Required)
     *         projections (Required): [
     *              (Required){
     *                 tables (Optional): [
     *                      (Optional){
     *                         referenceKeyName: String (Optional)
     *                         generatedKeyName: String (Optional)
     *                         source: String (Optional)
     *                         sourceContext: String (Optional)
     *                         inputs (Optional): [
     *                             (recursive schema, see above)
     *                         ]
     *                         tableName: String (Required)
     *                     }
     *                 ]
     *                 objects (Optional): [
     *                      (Optional){
     *                         referenceKeyName: String (Optional)
     *                         generatedKeyName: String (Optional)
     *                         source: String (Optional)
     *                         sourceContext: String (Optional)
     *                         inputs (Optional): [
     *                             (recursive schema, see above)
     *                         ]
     *                         storageContainer: String (Required)
     *                     }
     *                 ]
     *                 files (Optional): [
     *                      (Optional){
     *                         referenceKeyName: String (Optional)
     *                         generatedKeyName: String (Optional)
     *                         source: String (Optional)
     *                         sourceContext: String (Optional)
     *                         inputs (Optional): [
     *                             (recursive schema, see above)
     *                         ]
     *                         storageContainer: String (Required)
     *                     }
     *                 ]
     *             }
     *         ]
     *         identity (Optional): {
     *             &#64;odata.type: String (Required)
     *         }
     *         parameters (Optional): {
     *             synthesizeGeneratedKeyName: Boolean (Optional)
     *              (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *         }
     *     }
     *     indexProjections (Optional): {
     *         selectors (Required): [
     *              (Required){
     *                 targetIndexName: String (Required)
     *                 parentKeyFieldName: String (Required)
     *                 sourceContext: String (Required)
     *                 mappings (Required): [
     *                     (recursive schema, see above)
     *                 ]
     *             }
     *         ]
     *         parameters (Optional): {
     *             projectionMode: String(skipIndexingParentDocuments/includeIndexingParentDocuments) (Optional)
     *              (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *         }
     *     }
     *     &#64;odata.etag: String (Optional)
     *     encryptionKey (Optional): {
     *         keyVaultKeyName: String (Required)
     *         keyVaultKeyVersion: String (Optional)
     *         keyVaultUri: String (Required)
     *         accessCredentials (Optional): {
     *             applicationId: String (Required)
     *             applicationSecret: String (Optional)
     *         }
     *         identity (Optional): (recursive schema, see identity above)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param skillsetName The name of the skillset.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of skills along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getWithResponse(String skillsetName, RequestOptions requestOptions) {
        return this.serviceClient.getWithResponse(skillsetName, requestOptions);
    }

    /**
     * List all skillsets in a search service.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>$select</td><td>String</td><td>No</td><td>Selects which top-level properties to retrieve.
     * Specified as a comma-separated list of JSON property names,
     * or '*' for all properties. The default is all properties.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     value (Required): [
     *          (Required){
     *             name: String (Required)
     *             description: String (Optional)
     *             skills (Required): [
     *                  (Required){
     *                     &#64;odata.type: String (Required)
     *                     name: String (Optional)
     *                     description: String (Optional)
     *                     context: String (Optional)
     *                     inputs (Required): [
     *                          (Required){
     *                             name: String (Required)
     *                             source: String (Optional)
     *                             sourceContext: String (Optional)
     *                             inputs (Optional): [
     *                                 (recursive schema, see above)
     *                             ]
     *                         }
     *                     ]
     *                     outputs (Required): [
     *                          (Required){
     *                             name: String (Required)
     *                             targetName: String (Optional)
     *                         }
     *                     ]
     *                 }
     *             ]
     *             cognitiveServices (Optional): {
     *                 &#64;odata.type: String (Required)
     *                 description: String (Optional)
     *             }
     *             knowledgeStore (Optional): {
     *                 storageConnectionString: String (Required)
     *                 projections (Required): [
     *                      (Required){
     *                         tables (Optional): [
     *                              (Optional){
     *                                 referenceKeyName: String (Optional)
     *                                 generatedKeyName: String (Optional)
     *                                 source: String (Optional)
     *                                 sourceContext: String (Optional)
     *                                 inputs (Optional): [
     *                                     (recursive schema, see above)
     *                                 ]
     *                                 tableName: String (Required)
     *                             }
     *                         ]
     *                         objects (Optional): [
     *                              (Optional){
     *                                 referenceKeyName: String (Optional)
     *                                 generatedKeyName: String (Optional)
     *                                 source: String (Optional)
     *                                 sourceContext: String (Optional)
     *                                 inputs (Optional): [
     *                                     (recursive schema, see above)
     *                                 ]
     *                                 storageContainer: String (Required)
     *                             }
     *                         ]
     *                         files (Optional): [
     *                              (Optional){
     *                                 referenceKeyName: String (Optional)
     *                                 generatedKeyName: String (Optional)
     *                                 source: String (Optional)
     *                                 sourceContext: String (Optional)
     *                                 inputs (Optional): [
     *                                     (recursive schema, see above)
     *                                 ]
     *                                 storageContainer: String (Required)
     *                             }
     *                         ]
     *                     }
     *                 ]
     *                 identity (Optional): {
     *                     &#64;odata.type: String (Required)
     *                 }
     *                 parameters (Optional): {
     *                     synthesizeGeneratedKeyName: Boolean (Optional)
     *                      (Optional): {
     *                         String: BinaryData (Required)
     *                     }
     *                 }
     *             }
     *             indexProjections (Optional): {
     *                 selectors (Required): [
     *                      (Required){
     *                         targetIndexName: String (Required)
     *                         parentKeyFieldName: String (Required)
     *                         sourceContext: String (Required)
     *                         mappings (Required): [
     *                             (recursive schema, see above)
     *                         ]
     *                     }
     *                 ]
     *                 parameters (Optional): {
     *                     projectionMode: String(skipIndexingParentDocuments/includeIndexingParentDocuments) (Optional)
     *                      (Optional): {
     *                         String: BinaryData (Required)
     *                     }
     *                 }
     *             }
     *             &#64;odata.etag: String (Optional)
     *             encryptionKey (Optional): {
     *                 keyVaultKeyName: String (Required)
     *                 keyVaultKeyVersion: String (Optional)
     *                 keyVaultUri: String (Required)
     *                 accessCredentials (Optional): {
     *                     applicationId: String (Required)
     *                     applicationSecret: String (Optional)
     *                 }
     *                 identity (Optional): (recursive schema, see identity above)
     *             }
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response from a list skillset request along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.listWithResponse(requestOptions);
    }

    /**
     * Creates a new skillset in a search service.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     description: String (Optional)
     *     skills (Required): [
     *          (Required){
     *             &#64;odata.type: String (Required)
     *             name: String (Optional)
     *             description: String (Optional)
     *             context: String (Optional)
     *             inputs (Required): [
     *                  (Required){
     *                     name: String (Required)
     *                     source: String (Optional)
     *                     sourceContext: String (Optional)
     *                     inputs (Optional): [
     *                         (recursive schema, see above)
     *                     ]
     *                 }
     *             ]
     *             outputs (Required): [
     *                  (Required){
     *                     name: String (Required)
     *                     targetName: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     cognitiveServices (Optional): {
     *         &#64;odata.type: String (Required)
     *         description: String (Optional)
     *     }
     *     knowledgeStore (Optional): {
     *         storageConnectionString: String (Required)
     *         projections (Required): [
     *              (Required){
     *                 tables (Optional): [
     *                      (Optional){
     *                         referenceKeyName: String (Optional)
     *                         generatedKeyName: String (Optional)
     *                         source: String (Optional)
     *                         sourceContext: String (Optional)
     *                         inputs (Optional): [
     *                             (recursive schema, see above)
     *                         ]
     *                         tableName: String (Required)
     *                     }
     *                 ]
     *                 objects (Optional): [
     *                      (Optional){
     *                         referenceKeyName: String (Optional)
     *                         generatedKeyName: String (Optional)
     *                         source: String (Optional)
     *                         sourceContext: String (Optional)
     *                         inputs (Optional): [
     *                             (recursive schema, see above)
     *                         ]
     *                         storageContainer: String (Required)
     *                     }
     *                 ]
     *                 files (Optional): [
     *                      (Optional){
     *                         referenceKeyName: String (Optional)
     *                         generatedKeyName: String (Optional)
     *                         source: String (Optional)
     *                         sourceContext: String (Optional)
     *                         inputs (Optional): [
     *                             (recursive schema, see above)
     *                         ]
     *                         storageContainer: String (Required)
     *                     }
     *                 ]
     *             }
     *         ]
     *         identity (Optional): {
     *             &#64;odata.type: String (Required)
     *         }
     *         parameters (Optional): {
     *             synthesizeGeneratedKeyName: Boolean (Optional)
     *              (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *         }
     *     }
     *     indexProjections (Optional): {
     *         selectors (Required): [
     *              (Required){
     *                 targetIndexName: String (Required)
     *                 parentKeyFieldName: String (Required)
     *                 sourceContext: String (Required)
     *                 mappings (Required): [
     *                     (recursive schema, see above)
     *                 ]
     *             }
     *         ]
     *         parameters (Optional): {
     *             projectionMode: String(skipIndexingParentDocuments/includeIndexingParentDocuments) (Optional)
     *              (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *         }
     *     }
     *     &#64;odata.etag: String (Optional)
     *     encryptionKey (Optional): {
     *         keyVaultKeyName: String (Required)
     *         keyVaultKeyVersion: String (Optional)
     *         keyVaultUri: String (Required)
     *         accessCredentials (Optional): {
     *             applicationId: String (Required)
     *             applicationSecret: String (Optional)
     *         }
     *         identity (Optional): (recursive schema, see identity above)
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     description: String (Optional)
     *     skills (Required): [
     *          (Required){
     *             &#64;odata.type: String (Required)
     *             name: String (Optional)
     *             description: String (Optional)
     *             context: String (Optional)
     *             inputs (Required): [
     *                  (Required){
     *                     name: String (Required)
     *                     source: String (Optional)
     *                     sourceContext: String (Optional)
     *                     inputs (Optional): [
     *                         (recursive schema, see above)
     *                     ]
     *                 }
     *             ]
     *             outputs (Required): [
     *                  (Required){
     *                     name: String (Required)
     *                     targetName: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     cognitiveServices (Optional): {
     *         &#64;odata.type: String (Required)
     *         description: String (Optional)
     *     }
     *     knowledgeStore (Optional): {
     *         storageConnectionString: String (Required)
     *         projections (Required): [
     *              (Required){
     *                 tables (Optional): [
     *                      (Optional){
     *                         referenceKeyName: String (Optional)
     *                         generatedKeyName: String (Optional)
     *                         source: String (Optional)
     *                         sourceContext: String (Optional)
     *                         inputs (Optional): [
     *                             (recursive schema, see above)
     *                         ]
     *                         tableName: String (Required)
     *                     }
     *                 ]
     *                 objects (Optional): [
     *                      (Optional){
     *                         referenceKeyName: String (Optional)
     *                         generatedKeyName: String (Optional)
     *                         source: String (Optional)
     *                         sourceContext: String (Optional)
     *                         inputs (Optional): [
     *                             (recursive schema, see above)
     *                         ]
     *                         storageContainer: String (Required)
     *                     }
     *                 ]
     *                 files (Optional): [
     *                      (Optional){
     *                         referenceKeyName: String (Optional)
     *                         generatedKeyName: String (Optional)
     *                         source: String (Optional)
     *                         sourceContext: String (Optional)
     *                         inputs (Optional): [
     *                             (recursive schema, see above)
     *                         ]
     *                         storageContainer: String (Required)
     *                     }
     *                 ]
     *             }
     *         ]
     *         identity (Optional): {
     *             &#64;odata.type: String (Required)
     *         }
     *         parameters (Optional): {
     *             synthesizeGeneratedKeyName: Boolean (Optional)
     *              (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *         }
     *     }
     *     indexProjections (Optional): {
     *         selectors (Required): [
     *              (Required){
     *                 targetIndexName: String (Required)
     *                 parentKeyFieldName: String (Required)
     *                 sourceContext: String (Required)
     *                 mappings (Required): [
     *                     (recursive schema, see above)
     *                 ]
     *             }
     *         ]
     *         parameters (Optional): {
     *             projectionMode: String(skipIndexingParentDocuments/includeIndexingParentDocuments) (Optional)
     *              (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *         }
     *     }
     *     &#64;odata.etag: String (Optional)
     *     encryptionKey (Optional): {
     *         keyVaultKeyName: String (Required)
     *         keyVaultKeyVersion: String (Optional)
     *         keyVaultUri: String (Required)
     *         accessCredentials (Optional): {
     *             applicationId: String (Required)
     *             applicationSecret: String (Optional)
     *         }
     *         identity (Optional): (recursive schema, see identity above)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param skillset The skillset containing one or more skills to create in a search service.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of skills along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createWithResponse(BinaryData skillset, RequestOptions requestOptions) {
        return this.serviceClient.createWithResponse(skillset, requestOptions);
    }

    /**
     * Reset an existing skillset in a search service.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     skillNames (Optional): [
     *         String (Optional)
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param skillsetName The name of the skillset.
     * @param skillNames The names of the skills to reset. If not specified, all skills in the skillset
     * will be reset.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> resetSkillsWithResponse(String skillsetName, BinaryData skillNames,
        RequestOptions requestOptions) {
        return this.serviceClient.resetSkillsWithResponse(skillsetName, skillNames, requestOptions);
    }

    /**
     * Creates a new skillset in a search service or updates the skillset if it
     * already exists.
     * 
     * @param skillsetName The name of the skillset.
     * @param skillset The skillset containing one or more skills to create or update in a search
     * service.
     * @param skipIndexerResetRequirementForCache Ignores cache reset requirements.
     * @param disableCacheReprocessingChangeDetection Disables cache reprocessing change detection.
     * @param matchConditions Specifies HTTP options for conditional requests.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of skills.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SearchIndexerSkillset createOrUpdate(String skillsetName, SearchIndexerSkillset skillset,
        Boolean skipIndexerResetRequirementForCache, Boolean disableCacheReprocessingChangeDetection,
        MatchConditions matchConditions) {
        // Generated convenience method for createOrUpdateWithResponse
        RequestOptions requestOptions = new RequestOptions();
        String ifMatch = matchConditions == null ? null : matchConditions.getIfMatch();
        String ifNoneMatch = matchConditions == null ? null : matchConditions.getIfNoneMatch();
        if (skipIndexerResetRequirementForCache != null) {
            requestOptions.addQueryParam("ignoreResetRequirements", String.valueOf(skipIndexerResetRequirementForCache),
                false);
        }
        if (disableCacheReprocessingChangeDetection != null) {
            requestOptions.addQueryParam("disableCacheReprocessingChangeDetection",
                String.valueOf(disableCacheReprocessingChangeDetection), false);
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        return createOrUpdateWithResponse(skillsetName, BinaryData.fromObject(skillset), requestOptions).getValue()
            .toObject(SearchIndexerSkillset.class);
    }

    /**
     * Creates a new skillset in a search service or updates the skillset if it
     * already exists.
     * 
     * @param skillsetName The name of the skillset.
     * @param skillset The skillset containing one or more skills to create or update in a search
     * service.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of skills.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SearchIndexerSkillset createOrUpdate(String skillsetName, SearchIndexerSkillset skillset) {
        // Generated convenience method for createOrUpdateWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createOrUpdateWithResponse(skillsetName, BinaryData.fromObject(skillset), requestOptions).getValue()
            .toObject(SearchIndexerSkillset.class);
    }

    /**
     * Deletes a skillset in a search service.
     * 
     * @param skillsetName The name of the skillset.
     * @param matchConditions Specifies HTTP options for conditional requests.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String skillsetName, MatchConditions matchConditions) {
        // Generated convenience method for deleteWithResponse
        RequestOptions requestOptions = new RequestOptions();
        String ifMatch = matchConditions == null ? null : matchConditions.getIfMatch();
        String ifNoneMatch = matchConditions == null ? null : matchConditions.getIfNoneMatch();
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        deleteWithResponse(skillsetName, requestOptions).getValue();
    }

    /**
     * Deletes a skillset in a search service.
     * 
     * @param skillsetName The name of the skillset.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String skillsetName) {
        // Generated convenience method for deleteWithResponse
        RequestOptions requestOptions = new RequestOptions();
        deleteWithResponse(skillsetName, requestOptions).getValue();
    }

    /**
     * Retrieves a skillset in a search service.
     * 
     * @param skillsetName The name of the skillset.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of skills.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SearchIndexerSkillset get(String skillsetName) {
        // Generated convenience method for getWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getWithResponse(skillsetName, requestOptions).getValue().toObject(SearchIndexerSkillset.class);
    }

    /**
     * List all skillsets in a search service.
     * 
     * @param select Selects which top-level properties to retrieve.
     * Specified as a comma-separated list of JSON property names,
     * or '*' for all properties. The default is all properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response from a list skillset request.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ListSkillsetsResult list(String select) {
        // Generated convenience method for listWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (select != null) {
            requestOptions.addQueryParam("$select", select, false);
        }
        return listWithResponse(requestOptions).getValue().toObject(ListSkillsetsResult.class);
    }

    /**
     * List all skillsets in a search service.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response from a list skillset request.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ListSkillsetsResult list() {
        // Generated convenience method for listWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return listWithResponse(requestOptions).getValue().toObject(ListSkillsetsResult.class);
    }

    /**
     * Creates a new skillset in a search service.
     * 
     * @param skillset The skillset containing one or more skills to create in a search service.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of skills.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SearchIndexerSkillset create(SearchIndexerSkillset skillset) {
        // Generated convenience method for createWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createWithResponse(BinaryData.fromObject(skillset), requestOptions).getValue()
            .toObject(SearchIndexerSkillset.class);
    }

    /**
     * Reset an existing skillset in a search service.
     * 
     * @param skillsetName The name of the skillset.
     * @param skillNames The names of the skills to reset. If not specified, all skills in the skillset
     * will be reset.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void resetSkills(String skillsetName, SkillNames skillNames) {
        // Generated convenience method for resetSkillsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        resetSkillsWithResponse(skillsetName, BinaryData.fromObject(skillNames), requestOptions).getValue();
    }
}
