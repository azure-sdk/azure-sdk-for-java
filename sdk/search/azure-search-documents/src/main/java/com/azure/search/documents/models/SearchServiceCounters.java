// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.search.documents.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Represents service-level resource counters and quotas.
 */
@Immutable
public final class SearchServiceCounters implements JsonSerializable<SearchServiceCounters> {
    /*
     * Total number of aliases.
     */
    @Generated
    private final ResourceCounter aliasCounter;

    /*
     * Total number of documents across all indexes in the service.
     */
    @Generated
    private final ResourceCounter documentCounter;

    /*
     * Total number of indexes.
     */
    @Generated
    private final ResourceCounter indexCounter;

    /*
     * Total number of indexers.
     */
    @Generated
    private final ResourceCounter indexerCounter;

    /*
     * Total number of data sources.
     */
    @Generated
    private final ResourceCounter dataSourceCounter;

    /*
     * Total size of used storage in bytes.
     */
    @Generated
    private final ResourceCounter storageSizeCounter;

    /*
     * Total number of synonym maps.
     */
    @Generated
    private final ResourceCounter synonymMapCounter;

    /*
     * Total number of skillsets.
     */
    @Generated
    private final ResourceCounter skillsetCounter;

    /*
     * Total memory consumption of all vector indexes within the service, in bytes.
     */
    @Generated
    private final ResourceCounter vectorIndexSizeCounter;

    /**
     * Creates an instance of SearchServiceCounters class.
     * 
     * @param aliasCounter the aliasCounter value to set.
     * @param documentCounter the documentCounter value to set.
     * @param indexCounter the indexCounter value to set.
     * @param indexerCounter the indexerCounter value to set.
     * @param dataSourceCounter the dataSourceCounter value to set.
     * @param storageSizeCounter the storageSizeCounter value to set.
     * @param synonymMapCounter the synonymMapCounter value to set.
     * @param skillsetCounter the skillsetCounter value to set.
     * @param vectorIndexSizeCounter the vectorIndexSizeCounter value to set.
     */
    @Generated
    private SearchServiceCounters(ResourceCounter aliasCounter, ResourceCounter documentCounter,
        ResourceCounter indexCounter, ResourceCounter indexerCounter, ResourceCounter dataSourceCounter,
        ResourceCounter storageSizeCounter, ResourceCounter synonymMapCounter, ResourceCounter skillsetCounter,
        ResourceCounter vectorIndexSizeCounter) {
        this.aliasCounter = aliasCounter;
        this.documentCounter = documentCounter;
        this.indexCounter = indexCounter;
        this.indexerCounter = indexerCounter;
        this.dataSourceCounter = dataSourceCounter;
        this.storageSizeCounter = storageSizeCounter;
        this.synonymMapCounter = synonymMapCounter;
        this.skillsetCounter = skillsetCounter;
        this.vectorIndexSizeCounter = vectorIndexSizeCounter;
    }

    /**
     * Get the aliasCounter property: Total number of aliases.
     * 
     * @return the aliasCounter value.
     */
    @Generated
    public ResourceCounter getAliasCounter() {
        return this.aliasCounter;
    }

    /**
     * Get the documentCounter property: Total number of documents across all indexes in the service.
     * 
     * @return the documentCounter value.
     */
    @Generated
    public ResourceCounter getDocumentCounter() {
        return this.documentCounter;
    }

    /**
     * Get the indexCounter property: Total number of indexes.
     * 
     * @return the indexCounter value.
     */
    @Generated
    public ResourceCounter getIndexCounter() {
        return this.indexCounter;
    }

    /**
     * Get the indexerCounter property: Total number of indexers.
     * 
     * @return the indexerCounter value.
     */
    @Generated
    public ResourceCounter getIndexerCounter() {
        return this.indexerCounter;
    }

    /**
     * Get the dataSourceCounter property: Total number of data sources.
     * 
     * @return the dataSourceCounter value.
     */
    @Generated
    public ResourceCounter getDataSourceCounter() {
        return this.dataSourceCounter;
    }

    /**
     * Get the storageSizeCounter property: Total size of used storage in bytes.
     * 
     * @return the storageSizeCounter value.
     */
    @Generated
    public ResourceCounter getStorageSizeCounter() {
        return this.storageSizeCounter;
    }

    /**
     * Get the synonymMapCounter property: Total number of synonym maps.
     * 
     * @return the synonymMapCounter value.
     */
    @Generated
    public ResourceCounter getSynonymMapCounter() {
        return this.synonymMapCounter;
    }

    /**
     * Get the skillsetCounter property: Total number of skillsets.
     * 
     * @return the skillsetCounter value.
     */
    @Generated
    public ResourceCounter getSkillsetCounter() {
        return this.skillsetCounter;
    }

    /**
     * Get the vectorIndexSizeCounter property: Total memory consumption of all vector indexes within the service, in
     * bytes.
     * 
     * @return the vectorIndexSizeCounter value.
     */
    @Generated
    public ResourceCounter getVectorIndexSizeCounter() {
        return this.vectorIndexSizeCounter;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("aliasesCount", this.aliasCounter);
        jsonWriter.writeJsonField("documentCount", this.documentCounter);
        jsonWriter.writeJsonField("indexesCount", this.indexCounter);
        jsonWriter.writeJsonField("indexersCount", this.indexerCounter);
        jsonWriter.writeJsonField("dataSourcesCount", this.dataSourceCounter);
        jsonWriter.writeJsonField("storageSize", this.storageSizeCounter);
        jsonWriter.writeJsonField("synonymMaps", this.synonymMapCounter);
        jsonWriter.writeJsonField("skillsetCount", this.skillsetCounter);
        jsonWriter.writeJsonField("vectorIndexSize", this.vectorIndexSizeCounter);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SearchServiceCounters from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SearchServiceCounters if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SearchServiceCounters.
     */
    @Generated
    public static SearchServiceCounters fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ResourceCounter aliasCounter = null;
            ResourceCounter documentCounter = null;
            ResourceCounter indexCounter = null;
            ResourceCounter indexerCounter = null;
            ResourceCounter dataSourceCounter = null;
            ResourceCounter storageSizeCounter = null;
            ResourceCounter synonymMapCounter = null;
            ResourceCounter skillsetCounter = null;
            ResourceCounter vectorIndexSizeCounter = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("aliasesCount".equals(fieldName)) {
                    aliasCounter = ResourceCounter.fromJson(reader);
                } else if ("documentCount".equals(fieldName)) {
                    documentCounter = ResourceCounter.fromJson(reader);
                } else if ("indexesCount".equals(fieldName)) {
                    indexCounter = ResourceCounter.fromJson(reader);
                } else if ("indexersCount".equals(fieldName)) {
                    indexerCounter = ResourceCounter.fromJson(reader);
                } else if ("dataSourcesCount".equals(fieldName)) {
                    dataSourceCounter = ResourceCounter.fromJson(reader);
                } else if ("storageSize".equals(fieldName)) {
                    storageSizeCounter = ResourceCounter.fromJson(reader);
                } else if ("synonymMaps".equals(fieldName)) {
                    synonymMapCounter = ResourceCounter.fromJson(reader);
                } else if ("skillsetCount".equals(fieldName)) {
                    skillsetCounter = ResourceCounter.fromJson(reader);
                } else if ("vectorIndexSize".equals(fieldName)) {
                    vectorIndexSizeCounter = ResourceCounter.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            return new SearchServiceCounters(aliasCounter, documentCounter, indexCounter, indexerCounter,
                dataSourceCounter, storageSizeCounter, synonymMapCounter, skillsetCounter, vectorIndexSizeCounter);
        });
    }
}
