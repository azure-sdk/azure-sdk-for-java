// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.search.documents;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.HttpHeaderName;
import com.azure.core.http.MatchConditions;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.FluxUtil;
import com.azure.search.documents.implementation.DataSourcesImpl;
import com.azure.search.documents.models.ListDataSourcesResult;
import com.azure.search.documents.models.SearchIndexerDataSource;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the asynchronous SearchClient type.
 */
@ServiceClient(builder = SearchClientBuilder.class, isAsync = true)
public final class DataSourcesAsyncClient {
    @Generated
    private final DataSourcesImpl serviceClient;

    /**
     * Initializes an instance of DataSourcesAsyncClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    DataSourcesAsyncClient(DataSourcesImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Creates a new datasource or updates a datasource if it already exists.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>ignoreResetRequirements</td><td>Boolean</td><td>No</td><td>Ignores cache reset requirements.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>Defines the If-Match condition. The operation will be
     * performed only if the ETag on the server matches this value.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>Defines the If-None-Match condition. The operation will
     * be performed only if the ETag on the server does not match this value.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     description: String (Optional)
     *     type: String(azuresql/cosmosdb/azureblob/azuretable/mysql/adlsgen2/onelake) (Required)
     *     credentials (Required): {
     *         connectionString: String (Optional)
     *     }
     *     container (Required): {
     *         name: String (Required)
     *         query: String (Optional)
     *     }
     *     identity (Optional): {
     *         &#64;odata.type: String (Required)
     *     }
     *     dataChangeDetectionPolicy (Optional): {
     *         &#64;odata.type: String (Required)
     *     }
     *     dataDeletionDetectionPolicy (Optional): {
     *         &#64;odata.type: String (Required)
     *     }
     *     &#64;odata.etag: String (Optional)
     *     encryptionKey (Optional): {
     *         keyVaultKeyName: String (Required)
     *         keyVaultKeyVersion: String (Required)
     *         keyVaultUri: String (Required)
     *         accessCredentials (Optional): {
     *             applicationId: String (Required)
     *             applicationSecret: String (Optional)
     *         }
     *         identity (Optional): (recursive schema, see identity above)
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     description: String (Optional)
     *     type: String(azuresql/cosmosdb/azureblob/azuretable/mysql/adlsgen2/onelake) (Required)
     *     credentials (Required): {
     *         connectionString: String (Optional)
     *     }
     *     container (Required): {
     *         name: String (Required)
     *         query: String (Optional)
     *     }
     *     identity (Optional): {
     *         &#64;odata.type: String (Required)
     *     }
     *     dataChangeDetectionPolicy (Optional): {
     *         &#64;odata.type: String (Required)
     *     }
     *     dataDeletionDetectionPolicy (Optional): {
     *         &#64;odata.type: String (Required)
     *     }
     *     &#64;odata.etag: String (Optional)
     *     encryptionKey (Optional): {
     *         keyVaultKeyName: String (Required)
     *         keyVaultKeyVersion: String (Required)
     *         keyVaultUri: String (Required)
     *         accessCredentials (Optional): {
     *             applicationId: String (Required)
     *             applicationSecret: String (Optional)
     *         }
     *         identity (Optional): (recursive schema, see identity above)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param dataSourceName The name of the datasource.
     * @param dataSource The definition of the datasource to create or update.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents a datasource definition, which can be used to configure an indexer along with {@link Response}
     * on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createOrUpdateWithResponse(String dataSourceName, BinaryData dataSource,
        RequestOptions requestOptions) {
        return this.serviceClient.createOrUpdateWithResponseAsync(dataSourceName, dataSource, requestOptions);
    }

    /**
     * Deletes a datasource.
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>Defines the If-Match condition. The operation will be
     * performed only if the ETag on the server matches this value.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>Defines the If-None-Match condition. The operation will
     * be performed only if the ETag on the server does not match this value.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param dataSourceName The name of the datasource.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteWithResponse(String dataSourceName, RequestOptions requestOptions) {
        return this.serviceClient.deleteWithResponseAsync(dataSourceName, requestOptions);
    }

    /**
     * Retrieves a datasource definition.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     description: String (Optional)
     *     type: String(azuresql/cosmosdb/azureblob/azuretable/mysql/adlsgen2/onelake) (Required)
     *     credentials (Required): {
     *         connectionString: String (Optional)
     *     }
     *     container (Required): {
     *         name: String (Required)
     *         query: String (Optional)
     *     }
     *     identity (Optional): {
     *         &#64;odata.type: String (Required)
     *     }
     *     dataChangeDetectionPolicy (Optional): {
     *         &#64;odata.type: String (Required)
     *     }
     *     dataDeletionDetectionPolicy (Optional): {
     *         &#64;odata.type: String (Required)
     *     }
     *     &#64;odata.etag: String (Optional)
     *     encryptionKey (Optional): {
     *         keyVaultKeyName: String (Required)
     *         keyVaultKeyVersion: String (Required)
     *         keyVaultUri: String (Required)
     *         accessCredentials (Optional): {
     *             applicationId: String (Required)
     *             applicationSecret: String (Optional)
     *         }
     *         identity (Optional): (recursive schema, see identity above)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param dataSourceName The name of the datasource.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents a datasource definition, which can be used to configure an indexer along with {@link Response}
     * on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getWithResponse(String dataSourceName, RequestOptions requestOptions) {
        return this.serviceClient.getWithResponseAsync(dataSourceName, requestOptions);
    }

    /**
     * Lists all datasources available for a search service.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>$select</td><td>String</td><td>No</td><td>Selects which top-level properties to retrieve.
     * Specified as a comma-separated list of JSON property names,
     * or '*' for all properties. The default is all properties.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     value (Required): [
     *          (Required){
     *             name: String (Required)
     *             description: String (Optional)
     *             type: String(azuresql/cosmosdb/azureblob/azuretable/mysql/adlsgen2/onelake) (Required)
     *             credentials (Required): {
     *                 connectionString: String (Optional)
     *             }
     *             container (Required): {
     *                 name: String (Required)
     *                 query: String (Optional)
     *             }
     *             identity (Optional): {
     *                 &#64;odata.type: String (Required)
     *             }
     *             dataChangeDetectionPolicy (Optional): {
     *                 &#64;odata.type: String (Required)
     *             }
     *             dataDeletionDetectionPolicy (Optional): {
     *                 &#64;odata.type: String (Required)
     *             }
     *             &#64;odata.etag: String (Optional)
     *             encryptionKey (Optional): {
     *                 keyVaultKeyName: String (Required)
     *                 keyVaultKeyVersion: String (Required)
     *                 keyVaultUri: String (Required)
     *                 accessCredentials (Optional): {
     *                     applicationId: String (Required)
     *                     applicationSecret: String (Optional)
     *                 }
     *                 identity (Optional): (recursive schema, see identity above)
     *             }
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response from a List Datasources request along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.listWithResponseAsync(requestOptions);
    }

    /**
     * Creates a new datasource.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     description: String (Optional)
     *     type: String(azuresql/cosmosdb/azureblob/azuretable/mysql/adlsgen2/onelake) (Required)
     *     credentials (Required): {
     *         connectionString: String (Optional)
     *     }
     *     container (Required): {
     *         name: String (Required)
     *         query: String (Optional)
     *     }
     *     identity (Optional): {
     *         &#64;odata.type: String (Required)
     *     }
     *     dataChangeDetectionPolicy (Optional): {
     *         &#64;odata.type: String (Required)
     *     }
     *     dataDeletionDetectionPolicy (Optional): {
     *         &#64;odata.type: String (Required)
     *     }
     *     &#64;odata.etag: String (Optional)
     *     encryptionKey (Optional): {
     *         keyVaultKeyName: String (Required)
     *         keyVaultKeyVersion: String (Required)
     *         keyVaultUri: String (Required)
     *         accessCredentials (Optional): {
     *             applicationId: String (Required)
     *             applicationSecret: String (Optional)
     *         }
     *         identity (Optional): (recursive schema, see identity above)
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     description: String (Optional)
     *     type: String(azuresql/cosmosdb/azureblob/azuretable/mysql/adlsgen2/onelake) (Required)
     *     credentials (Required): {
     *         connectionString: String (Optional)
     *     }
     *     container (Required): {
     *         name: String (Required)
     *         query: String (Optional)
     *     }
     *     identity (Optional): {
     *         &#64;odata.type: String (Required)
     *     }
     *     dataChangeDetectionPolicy (Optional): {
     *         &#64;odata.type: String (Required)
     *     }
     *     dataDeletionDetectionPolicy (Optional): {
     *         &#64;odata.type: String (Required)
     *     }
     *     &#64;odata.etag: String (Optional)
     *     encryptionKey (Optional): {
     *         keyVaultKeyName: String (Required)
     *         keyVaultKeyVersion: String (Required)
     *         keyVaultUri: String (Required)
     *         accessCredentials (Optional): {
     *             applicationId: String (Required)
     *             applicationSecret: String (Optional)
     *         }
     *         identity (Optional): (recursive schema, see identity above)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param dataSource The definition of the datasource to create.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents a datasource definition, which can be used to configure an indexer along with {@link Response}
     * on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createWithResponse(BinaryData dataSource, RequestOptions requestOptions) {
        return this.serviceClient.createWithResponseAsync(dataSource, requestOptions);
    }

    /**
     * Creates a new datasource or updates a datasource if it already exists.
     * 
     * @param dataSourceName The name of the datasource.
     * @param dataSource The definition of the datasource to create or update.
     * @param skipIndexerResetRequirementForCache Ignores cache reset requirements.
     * @param matchConditions Specifies HTTP options for conditional requests.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a datasource definition, which can be used to configure an indexer on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SearchIndexerDataSource> createOrUpdate(String dataSourceName, SearchIndexerDataSource dataSource,
        Boolean skipIndexerResetRequirementForCache, MatchConditions matchConditions) {
        // Generated convenience method for createOrUpdateWithResponse
        RequestOptions requestOptions = new RequestOptions();
        String ifMatch = matchConditions == null ? null : matchConditions.getIfMatch();
        String ifNoneMatch = matchConditions == null ? null : matchConditions.getIfNoneMatch();
        if (skipIndexerResetRequirementForCache != null) {
            requestOptions.addQueryParam("ignoreResetRequirements", String.valueOf(skipIndexerResetRequirementForCache),
                false);
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        return createOrUpdateWithResponse(dataSourceName, BinaryData.fromObject(dataSource), requestOptions)
            .flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(SearchIndexerDataSource.class));
    }

    /**
     * Creates a new datasource or updates a datasource if it already exists.
     * 
     * @param dataSourceName The name of the datasource.
     * @param dataSource The definition of the datasource to create or update.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a datasource definition, which can be used to configure an indexer on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SearchIndexerDataSource> createOrUpdate(String dataSourceName, SearchIndexerDataSource dataSource) {
        // Generated convenience method for createOrUpdateWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createOrUpdateWithResponse(dataSourceName, BinaryData.fromObject(dataSource), requestOptions)
            .flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(SearchIndexerDataSource.class));
    }

    /**
     * Deletes a datasource.
     * 
     * @param dataSourceName The name of the datasource.
     * @param matchConditions Specifies HTTP options for conditional requests.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> delete(String dataSourceName, MatchConditions matchConditions) {
        // Generated convenience method for deleteWithResponse
        RequestOptions requestOptions = new RequestOptions();
        String ifMatch = matchConditions == null ? null : matchConditions.getIfMatch();
        String ifNoneMatch = matchConditions == null ? null : matchConditions.getIfNoneMatch();
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        return deleteWithResponse(dataSourceName, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Deletes a datasource.
     * 
     * @param dataSourceName The name of the datasource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> delete(String dataSourceName) {
        // Generated convenience method for deleteWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return deleteWithResponse(dataSourceName, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Retrieves a datasource definition.
     * 
     * @param dataSourceName The name of the datasource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a datasource definition, which can be used to configure an indexer on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SearchIndexerDataSource> get(String dataSourceName) {
        // Generated convenience method for getWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getWithResponse(dataSourceName, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(SearchIndexerDataSource.class));
    }

    /**
     * Lists all datasources available for a search service.
     * 
     * @param select Selects which top-level properties to retrieve.
     * Specified as a comma-separated list of JSON property names,
     * or '*' for all properties. The default is all properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response from a List Datasources request on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ListDataSourcesResult> list(String select) {
        // Generated convenience method for listWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (select != null) {
            requestOptions.addQueryParam("$select", select, false);
        }
        return listWithResponse(requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(ListDataSourcesResult.class));
    }

    /**
     * Lists all datasources available for a search service.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response from a List Datasources request on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ListDataSourcesResult> list() {
        // Generated convenience method for listWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return listWithResponse(requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(ListDataSourcesResult.class));
    }

    /**
     * Creates a new datasource.
     * 
     * @param dataSource The definition of the datasource to create.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a datasource definition, which can be used to configure an indexer on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SearchIndexerDataSource> create(SearchIndexerDataSource dataSource) {
        // Generated convenience method for createWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createWithResponse(BinaryData.fromObject(dataSource), requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(SearchIndexerDataSource.class));
    }
}
