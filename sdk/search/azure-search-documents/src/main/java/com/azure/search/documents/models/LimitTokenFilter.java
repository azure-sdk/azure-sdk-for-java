// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.search.documents.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Limits the number of tokens while indexing. This token filter is implemented
 * using Apache Lucene.
 */
@Fluent
public final class LimitTokenFilter extends TokenFilter {
    /*
     * The discriminator for derived types.
     */
    @Generated
    private String odataType = "#Microsoft.Azure.Search.LimitTokenFilter";

    /*
     * The maximum number of tokens to produce. Default is 1.
     */
    @Generated
    private Integer maxTokenCount;

    /*
     * A value indicating whether all tokens from the input must be consumed even if
     * maxTokenCount is reached. Default is false.
     */
    @Generated
    private Boolean consumeAllTokens;

    /**
     * Creates an instance of LimitTokenFilter class.
     * 
     * @param name the name value to set.
     */
    @Generated
    public LimitTokenFilter(String name) {
        super(name);
    }

    /**
     * Get the odataType property: The discriminator for derived types.
     * 
     * @return the odataType value.
     */
    @Generated
    @Override
    public String getOdataType() {
        return this.odataType;
    }

    /**
     * Get the maxTokenCount property: The maximum number of tokens to produce. Default is 1.
     * 
     * @return the maxTokenCount value.
     */
    @Generated
    public Integer getMaxTokenCount() {
        return this.maxTokenCount;
    }

    /**
     * Set the maxTokenCount property: The maximum number of tokens to produce. Default is 1.
     * 
     * @param maxTokenCount the maxTokenCount value to set.
     * @return the LimitTokenFilter object itself.
     */
    @Generated
    public LimitTokenFilter setMaxTokenCount(Integer maxTokenCount) {
        this.maxTokenCount = maxTokenCount;
        return this;
    }

    /**
     * Get the consumeAllTokens property: A value indicating whether all tokens from the input must be consumed even if
     * maxTokenCount is reached. Default is false.
     * 
     * @return the consumeAllTokens value.
     */
    @Generated
    public Boolean isConsumeAllTokens() {
        return this.consumeAllTokens;
    }

    /**
     * Set the consumeAllTokens property: A value indicating whether all tokens from the input must be consumed even if
     * maxTokenCount is reached. Default is false.
     * 
     * @param consumeAllTokens the consumeAllTokens value to set.
     * @return the LimitTokenFilter object itself.
     */
    @Generated
    public LimitTokenFilter setConsumeAllTokens(Boolean consumeAllTokens) {
        this.consumeAllTokens = consumeAllTokens;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", getName());
        jsonWriter.writeStringField("@odata.type", this.odataType);
        jsonWriter.writeNumberField("maxTokenCount", this.maxTokenCount);
        jsonWriter.writeBooleanField("consumeAllTokens", this.consumeAllTokens);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LimitTokenFilter from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LimitTokenFilter if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the LimitTokenFilter.
     */
    @Generated
    public static LimitTokenFilter fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String name = null;
            String odataType = "#Microsoft.Azure.Search.LimitTokenFilter";
            Integer maxTokenCount = null;
            Boolean consumeAllTokens = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else if ("@odata.type".equals(fieldName)) {
                    odataType = reader.getString();
                } else if ("maxTokenCount".equals(fieldName)) {
                    maxTokenCount = reader.getNullable(JsonReader::getInt);
                } else if ("consumeAllTokens".equals(fieldName)) {
                    consumeAllTokens = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }
            LimitTokenFilter deserializedLimitTokenFilter = new LimitTokenFilter(name);
            deserializedLimitTokenFilter.odataType = odataType;
            deserializedLimitTokenFilter.maxTokenCount = maxTokenCount;
            deserializedLimitTokenFilter.consumeAllTokens = consumeAllTokens;

            return deserializedLimitTokenFilter;
        });
    }
}
