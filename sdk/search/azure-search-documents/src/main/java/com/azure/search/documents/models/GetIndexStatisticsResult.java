// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.search.documents.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Statistics for a given index. Statistics are collected periodically and are not
 * guaranteed to always be up-to-date.
 */
@Immutable
public final class GetIndexStatisticsResult implements JsonSerializable<GetIndexStatisticsResult> {
    /*
     * The number of documents in the index.
     */
    @Generated
    private final long documentCount;

    /*
     * The amount of storage in bytes consumed by the index.
     */
    @Generated
    private final long storageSize;

    /*
     * The amount of memory in bytes consumed by vectors in the index.
     */
    @Generated
    private final long vectorIndexSize;

    /**
     * Creates an instance of GetIndexStatisticsResult class.
     * 
     * @param documentCount the documentCount value to set.
     * @param storageSize the storageSize value to set.
     * @param vectorIndexSize the vectorIndexSize value to set.
     */
    @Generated
    private GetIndexStatisticsResult(long documentCount, long storageSize, long vectorIndexSize) {
        this.documentCount = documentCount;
        this.storageSize = storageSize;
        this.vectorIndexSize = vectorIndexSize;
    }

    /**
     * Get the documentCount property: The number of documents in the index.
     * 
     * @return the documentCount value.
     */
    @Generated
    public long getDocumentCount() {
        return this.documentCount;
    }

    /**
     * Get the storageSize property: The amount of storage in bytes consumed by the index.
     * 
     * @return the storageSize value.
     */
    @Generated
    public long getStorageSize() {
        return this.storageSize;
    }

    /**
     * Get the vectorIndexSize property: The amount of memory in bytes consumed by vectors in the index.
     * 
     * @return the vectorIndexSize value.
     */
    @Generated
    public long getVectorIndexSize() {
        return this.vectorIndexSize;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeLongField("documentCount", this.documentCount);
        jsonWriter.writeLongField("storageSize", this.storageSize);
        jsonWriter.writeLongField("vectorIndexSize", this.vectorIndexSize);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GetIndexStatisticsResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GetIndexStatisticsResult if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the GetIndexStatisticsResult.
     */
    @Generated
    public static GetIndexStatisticsResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            long documentCount = 0L;
            long storageSize = 0L;
            long vectorIndexSize = 0L;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("documentCount".equals(fieldName)) {
                    documentCount = reader.getLong();
                } else if ("storageSize".equals(fieldName)) {
                    storageSize = reader.getLong();
                } else if ("vectorIndexSize".equals(fieldName)) {
                    vectorIndexSize = reader.getLong();
                } else {
                    reader.skipChildren();
                }
            }
            return new GetIndexStatisticsResult(documentCount, storageSize, vectorIndexSize);
        });
    }
}
