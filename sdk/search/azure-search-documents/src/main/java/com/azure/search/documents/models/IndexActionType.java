// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.search.documents.models;

import com.azure.core.annotation.Generated;
import com.azure.core.util.ExpandableStringEnum;
import java.util.Collection;

/**
 * The operation to perform on a document in an indexing batch.
 */
public final class IndexActionType extends ExpandableStringEnum<IndexActionType> {
    /**
     * Inserts the document into the index if it is new and updates it if it exists.
     * All fields are replaced in the update case.
     */
    @Generated
    public static final IndexActionType UPLOAD = fromString("upload");

    /**
     * Merges the specified field values with an existing document. If the document
     * does not exist, the merge will fail. Any field you specify in a merge will
     * replace the existing field in the document. This also applies to collections of
     * primitive and complex types.
     */
    @Generated
    public static final IndexActionType MERGE = fromString("merge");

    /**
     * Behaves like merge if a document with the given key already exists in the
     * index. If the document does not exist, it behaves like upload with a new
     * document.
     */
    @Generated
    public static final IndexActionType MERGE_OR_UPLOAD = fromString("mergeOrUpload");

    /**
     * Removes the specified document from the index. Any field you specify in a
     * delete operation other than the key field will be ignored. If you want to
     * remove an individual field from a document, use merge instead and set the field
     * explicitly to null.
     */
    @Generated
    public static final IndexActionType DELETE = fromString("delete");

    /**
     * Creates a new instance of IndexActionType value.
     * 
     * @deprecated Use the {@link #fromString(String)} factory method.
     */
    @Generated
    @Deprecated
    public IndexActionType() {
    }

    /**
     * Creates or finds a IndexActionType from its string representation.
     * 
     * @param name a name to look for.
     * @return the corresponding IndexActionType.
     */
    @Generated
    public static IndexActionType fromString(String name) {
        return fromString(name, IndexActionType.class);
    }

    /**
     * Gets known IndexActionType values.
     * 
     * @return known IndexActionType values.
     */
    @Generated
    public static Collection<IndexActionType> values() {
        return values(IndexActionType.class);
    }
}
