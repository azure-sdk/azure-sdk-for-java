// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.search.documents.models;

import com.azure.core.annotation.Generated;
import com.azure.core.util.ExpandableStringEnum;
import java.util.Collection;

/**
 * Represents the status of an individual indexer execution.
 */
public final class IndexerExecutionStatus extends ExpandableStringEnum<IndexerExecutionStatus> {
    /**
     * An indexer invocation has failed, but the failure may be transient. Indexer
     * invocations will continue per schedule.
     */
    @Generated
    public static final IndexerExecutionStatus TRANSIENT_FAILURE = fromString("transientFailure");

    /**
     * Indexer execution completed successfully.
     */
    @Generated
    public static final IndexerExecutionStatus SUCCESS = fromString("success");

    /**
     * Indexer execution is in progress.
     */
    @Generated
    public static final IndexerExecutionStatus IN_PROGRESS = fromString("inProgress");

    /**
     * Indexer has been reset.
     */
    @Generated
    public static final IndexerExecutionStatus RESET = fromString("reset");

    /**
     * Creates a new instance of IndexerExecutionStatus value.
     * 
     * @deprecated Use the {@link #fromString(String)} factory method.
     */
    @Generated
    @Deprecated
    public IndexerExecutionStatus() {
    }

    /**
     * Creates or finds a IndexerExecutionStatus from its string representation.
     * 
     * @param name a name to look for.
     * @return the corresponding IndexerExecutionStatus.
     */
    @Generated
    public static IndexerExecutionStatus fromString(String name) {
        return fromString(name, IndexerExecutionStatus.class);
    }

    /**
     * Gets known IndexerExecutionStatus values.
     * 
     * @return known IndexerExecutionStatus values.
     */
    @Generated
    public static Collection<IndexerExecutionStatus> values() {
        return values(IndexerExecutionStatus.class);
    }
}
