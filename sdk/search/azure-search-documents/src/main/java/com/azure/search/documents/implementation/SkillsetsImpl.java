// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.search.documents.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.search.documents.SearchServiceVersion;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in Skillsets.
 */
public final class SkillsetsImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final SkillsetsService service;

    /**
     * The service client containing this operation class.
     */
    private final SearchClientImpl client;

    /**
     * Initializes an instance of SkillsetsImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    SkillsetsImpl(SearchClientImpl client) {
        this.service
            = RestProxy.create(SkillsetsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * Gets Service version.
     * 
     * @return the serviceVersion value.
     */
    public SearchServiceVersion getServiceVersion() {
        return client.getServiceVersion();
    }

    /**
     * The interface defining all the services for SearchClientSkillsets to be used by the proxy service to perform REST
     * calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "SearchClientSkillset")
    public interface SkillsetsService {
        @Put("/skillsets('{skillsetName}')")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> createOrUpdate(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Prefer") String prefer,
            @PathParam("skillsetName") String skillsetName, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData skillset,
            RequestOptions requestOptions, Context context);

        @Put("/skillsets('{skillsetName}')")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> createOrUpdateSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Prefer") String prefer,
            @PathParam("skillsetName") String skillsetName, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData skillset,
            RequestOptions requestOptions, Context context);

        @Delete("/skillsets('{skillsetName}')")
        @ExpectedResponses({ 204, 404 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> delete(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("skillsetName") String skillsetName,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Delete("/skillsets('{skillsetName}')")
        @ExpectedResponses({ 204, 404 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> deleteSync(@HostParam("endpoint") String endpoint, @QueryParam("api-version") String apiVersion,
            @PathParam("skillsetName") String skillsetName, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/skillsets('{skillsetName}')")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> get(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("skillsetName") String skillsetName,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/skillsets('{skillsetName}')")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("skillsetName") String skillsetName,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/skillsets")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> list(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/skillsets")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Post("/skillsets")
        @ExpectedResponses({ 201 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> create(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData skillset,
            RequestOptions requestOptions, Context context);

        @Post("/skillsets")
        @ExpectedResponses({ 201 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> createSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData skillset,
            RequestOptions requestOptions, Context context);

        @Post("/skillsets('{skillsetName}')/search.resetskills")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> resetSkills(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("skillsetName") String skillsetName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData skillNames, RequestOptions requestOptions, Context context);

        @Post("/skillsets('{skillsetName}')/search.resetskills")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> resetSkillsSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("skillsetName") String skillsetName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData skillNames, RequestOptions requestOptions, Context context);
    }

    /**
     * Creates a new skillset in a search service or updates the skillset if it
     * already exists.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>ignoreResetRequirements</td><td>Boolean</td><td>No</td><td>Ignores cache reset requirements.</td></tr>
     * <tr><td>disableCacheReprocessingChangeDetection</td><td>Boolean</td><td>No</td><td>Disables cache reprocessing
     * change detection.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>Defines the If-Match condition. The operation will be
     * performed only if the ETag on the server matches this value.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>Defines the If-None-Match condition. The operation will
     * be performed only if the ETag on the server does not match this value.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     description: String (Optional)
     *     skills (Required): [
     *          (Required){
     *             &#64;odata.type: String (Required)
     *             name: String (Optional)
     *             description: String (Optional)
     *             context: String (Optional)
     *             inputs (Required): [
     *                  (Required){
     *                     name: String (Required)
     *                     source: String (Optional)
     *                     sourceContext: String (Optional)
     *                     inputs (Optional): [
     *                         (recursive schema, see above)
     *                     ]
     *                 }
     *             ]
     *             outputs (Required): [
     *                  (Required){
     *                     name: String (Required)
     *                     targetName: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     cognitiveServices (Optional): {
     *         &#64;odata.type: String (Required)
     *         description: String (Optional)
     *     }
     *     knowledgeStore (Optional): {
     *         storageConnectionString: String (Required)
     *         projections (Required): [
     *              (Required){
     *                 tables (Optional): [
     *                      (Optional){
     *                         referenceKeyName: String (Optional)
     *                         generatedKeyName: String (Optional)
     *                         source: String (Optional)
     *                         sourceContext: String (Optional)
     *                         inputs (Optional): [
     *                             (recursive schema, see above)
     *                         ]
     *                         tableName: String (Required)
     *                     }
     *                 ]
     *                 objects (Optional): [
     *                      (Optional){
     *                         referenceKeyName: String (Optional)
     *                         generatedKeyName: String (Optional)
     *                         source: String (Optional)
     *                         sourceContext: String (Optional)
     *                         inputs (Optional): [
     *                             (recursive schema, see above)
     *                         ]
     *                         storageContainer: String (Required)
     *                     }
     *                 ]
     *                 files (Optional): [
     *                      (Optional){
     *                         referenceKeyName: String (Optional)
     *                         generatedKeyName: String (Optional)
     *                         source: String (Optional)
     *                         sourceContext: String (Optional)
     *                         inputs (Optional): [
     *                             (recursive schema, see above)
     *                         ]
     *                         storageContainer: String (Required)
     *                     }
     *                 ]
     *             }
     *         ]
     *         identity (Optional): {
     *             &#64;odata.type: String (Required)
     *         }
     *         parameters (Optional): {
     *             synthesizeGeneratedKeyName: Boolean (Optional)
     *              (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *         }
     *     }
     *     indexProjections (Optional): {
     *         selectors (Required): [
     *              (Required){
     *                 targetIndexName: String (Required)
     *                 parentKeyFieldName: String (Required)
     *                 sourceContext: String (Required)
     *                 mappings (Required): [
     *                     (recursive schema, see above)
     *                 ]
     *             }
     *         ]
     *         parameters (Optional): {
     *             projectionMode: String(skipIndexingParentDocuments/includeIndexingParentDocuments) (Optional)
     *              (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *         }
     *     }
     *     &#64;odata.etag: String (Optional)
     *     encryptionKey (Optional): {
     *         keyVaultKeyName: String (Required)
     *         keyVaultKeyVersion: String (Optional)
     *         keyVaultUri: String (Required)
     *         accessCredentials (Optional): {
     *             applicationId: String (Required)
     *             applicationSecret: String (Optional)
     *         }
     *         identity (Optional): (recursive schema, see identity above)
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     description: String (Optional)
     *     skills (Required): [
     *          (Required){
     *             &#64;odata.type: String (Required)
     *             name: String (Optional)
     *             description: String (Optional)
     *             context: String (Optional)
     *             inputs (Required): [
     *                  (Required){
     *                     name: String (Required)
     *                     source: String (Optional)
     *                     sourceContext: String (Optional)
     *                     inputs (Optional): [
     *                         (recursive schema, see above)
     *                     ]
     *                 }
     *             ]
     *             outputs (Required): [
     *                  (Required){
     *                     name: String (Required)
     *                     targetName: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     cognitiveServices (Optional): {
     *         &#64;odata.type: String (Required)
     *         description: String (Optional)
     *     }
     *     knowledgeStore (Optional): {
     *         storageConnectionString: String (Required)
     *         projections (Required): [
     *              (Required){
     *                 tables (Optional): [
     *                      (Optional){
     *                         referenceKeyName: String (Optional)
     *                         generatedKeyName: String (Optional)
     *                         source: String (Optional)
     *                         sourceContext: String (Optional)
     *                         inputs (Optional): [
     *                             (recursive schema, see above)
     *                         ]
     *                         tableName: String (Required)
     *                     }
     *                 ]
     *                 objects (Optional): [
     *                      (Optional){
     *                         referenceKeyName: String (Optional)
     *                         generatedKeyName: String (Optional)
     *                         source: String (Optional)
     *                         sourceContext: String (Optional)
     *                         inputs (Optional): [
     *                             (recursive schema, see above)
     *                         ]
     *                         storageContainer: String (Required)
     *                     }
     *                 ]
     *                 files (Optional): [
     *                      (Optional){
     *                         referenceKeyName: String (Optional)
     *                         generatedKeyName: String (Optional)
     *                         source: String (Optional)
     *                         sourceContext: String (Optional)
     *                         inputs (Optional): [
     *                             (recursive schema, see above)
     *                         ]
     *                         storageContainer: String (Required)
     *                     }
     *                 ]
     *             }
     *         ]
     *         identity (Optional): {
     *             &#64;odata.type: String (Required)
     *         }
     *         parameters (Optional): {
     *             synthesizeGeneratedKeyName: Boolean (Optional)
     *              (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *         }
     *     }
     *     indexProjections (Optional): {
     *         selectors (Required): [
     *              (Required){
     *                 targetIndexName: String (Required)
     *                 parentKeyFieldName: String (Required)
     *                 sourceContext: String (Required)
     *                 mappings (Required): [
     *                     (recursive schema, see above)
     *                 ]
     *             }
     *         ]
     *         parameters (Optional): {
     *             projectionMode: String(skipIndexingParentDocuments/includeIndexingParentDocuments) (Optional)
     *              (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *         }
     *     }
     *     &#64;odata.etag: String (Optional)
     *     encryptionKey (Optional): {
     *         keyVaultKeyName: String (Required)
     *         keyVaultKeyVersion: String (Optional)
     *         keyVaultUri: String (Required)
     *         accessCredentials (Optional): {
     *             applicationId: String (Required)
     *             applicationSecret: String (Optional)
     *         }
     *         identity (Optional): (recursive schema, see identity above)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param skillsetName The name of the skillset.
     * @param skillset The skillset containing one or more skills to create or update in a search
     * service.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of skills along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createOrUpdateWithResponseAsync(String skillsetName, BinaryData skillset,
        RequestOptions requestOptions) {
        final String prefer = "return=representation";
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.createOrUpdate(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
                prefer, skillsetName, contentType, accept, skillset, requestOptions, context));
    }

    /**
     * Creates a new skillset in a search service or updates the skillset if it
     * already exists.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>ignoreResetRequirements</td><td>Boolean</td><td>No</td><td>Ignores cache reset requirements.</td></tr>
     * <tr><td>disableCacheReprocessingChangeDetection</td><td>Boolean</td><td>No</td><td>Disables cache reprocessing
     * change detection.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>Defines the If-Match condition. The operation will be
     * performed only if the ETag on the server matches this value.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>Defines the If-None-Match condition. The operation will
     * be performed only if the ETag on the server does not match this value.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     description: String (Optional)
     *     skills (Required): [
     *          (Required){
     *             &#64;odata.type: String (Required)
     *             name: String (Optional)
     *             description: String (Optional)
     *             context: String (Optional)
     *             inputs (Required): [
     *                  (Required){
     *                     name: String (Required)
     *                     source: String (Optional)
     *                     sourceContext: String (Optional)
     *                     inputs (Optional): [
     *                         (recursive schema, see above)
     *                     ]
     *                 }
     *             ]
     *             outputs (Required): [
     *                  (Required){
     *                     name: String (Required)
     *                     targetName: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     cognitiveServices (Optional): {
     *         &#64;odata.type: String (Required)
     *         description: String (Optional)
     *     }
     *     knowledgeStore (Optional): {
     *         storageConnectionString: String (Required)
     *         projections (Required): [
     *              (Required){
     *                 tables (Optional): [
     *                      (Optional){
     *                         referenceKeyName: String (Optional)
     *                         generatedKeyName: String (Optional)
     *                         source: String (Optional)
     *                         sourceContext: String (Optional)
     *                         inputs (Optional): [
     *                             (recursive schema, see above)
     *                         ]
     *                         tableName: String (Required)
     *                     }
     *                 ]
     *                 objects (Optional): [
     *                      (Optional){
     *                         referenceKeyName: String (Optional)
     *                         generatedKeyName: String (Optional)
     *                         source: String (Optional)
     *                         sourceContext: String (Optional)
     *                         inputs (Optional): [
     *                             (recursive schema, see above)
     *                         ]
     *                         storageContainer: String (Required)
     *                     }
     *                 ]
     *                 files (Optional): [
     *                      (Optional){
     *                         referenceKeyName: String (Optional)
     *                         generatedKeyName: String (Optional)
     *                         source: String (Optional)
     *                         sourceContext: String (Optional)
     *                         inputs (Optional): [
     *                             (recursive schema, see above)
     *                         ]
     *                         storageContainer: String (Required)
     *                     }
     *                 ]
     *             }
     *         ]
     *         identity (Optional): {
     *             &#64;odata.type: String (Required)
     *         }
     *         parameters (Optional): {
     *             synthesizeGeneratedKeyName: Boolean (Optional)
     *              (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *         }
     *     }
     *     indexProjections (Optional): {
     *         selectors (Required): [
     *              (Required){
     *                 targetIndexName: String (Required)
     *                 parentKeyFieldName: String (Required)
     *                 sourceContext: String (Required)
     *                 mappings (Required): [
     *                     (recursive schema, see above)
     *                 ]
     *             }
     *         ]
     *         parameters (Optional): {
     *             projectionMode: String(skipIndexingParentDocuments/includeIndexingParentDocuments) (Optional)
     *              (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *         }
     *     }
     *     &#64;odata.etag: String (Optional)
     *     encryptionKey (Optional): {
     *         keyVaultKeyName: String (Required)
     *         keyVaultKeyVersion: String (Optional)
     *         keyVaultUri: String (Required)
     *         accessCredentials (Optional): {
     *             applicationId: String (Required)
     *             applicationSecret: String (Optional)
     *         }
     *         identity (Optional): (recursive schema, see identity above)
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     description: String (Optional)
     *     skills (Required): [
     *          (Required){
     *             &#64;odata.type: String (Required)
     *             name: String (Optional)
     *             description: String (Optional)
     *             context: String (Optional)
     *             inputs (Required): [
     *                  (Required){
     *                     name: String (Required)
     *                     source: String (Optional)
     *                     sourceContext: String (Optional)
     *                     inputs (Optional): [
     *                         (recursive schema, see above)
     *                     ]
     *                 }
     *             ]
     *             outputs (Required): [
     *                  (Required){
     *                     name: String (Required)
     *                     targetName: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     cognitiveServices (Optional): {
     *         &#64;odata.type: String (Required)
     *         description: String (Optional)
     *     }
     *     knowledgeStore (Optional): {
     *         storageConnectionString: String (Required)
     *         projections (Required): [
     *              (Required){
     *                 tables (Optional): [
     *                      (Optional){
     *                         referenceKeyName: String (Optional)
     *                         generatedKeyName: String (Optional)
     *                         source: String (Optional)
     *                         sourceContext: String (Optional)
     *                         inputs (Optional): [
     *                             (recursive schema, see above)
     *                         ]
     *                         tableName: String (Required)
     *                     }
     *                 ]
     *                 objects (Optional): [
     *                      (Optional){
     *                         referenceKeyName: String (Optional)
     *                         generatedKeyName: String (Optional)
     *                         source: String (Optional)
     *                         sourceContext: String (Optional)
     *                         inputs (Optional): [
     *                             (recursive schema, see above)
     *                         ]
     *                         storageContainer: String (Required)
     *                     }
     *                 ]
     *                 files (Optional): [
     *                      (Optional){
     *                         referenceKeyName: String (Optional)
     *                         generatedKeyName: String (Optional)
     *                         source: String (Optional)
     *                         sourceContext: String (Optional)
     *                         inputs (Optional): [
     *                             (recursive schema, see above)
     *                         ]
     *                         storageContainer: String (Required)
     *                     }
     *                 ]
     *             }
     *         ]
     *         identity (Optional): {
     *             &#64;odata.type: String (Required)
     *         }
     *         parameters (Optional): {
     *             synthesizeGeneratedKeyName: Boolean (Optional)
     *              (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *         }
     *     }
     *     indexProjections (Optional): {
     *         selectors (Required): [
     *              (Required){
     *                 targetIndexName: String (Required)
     *                 parentKeyFieldName: String (Required)
     *                 sourceContext: String (Required)
     *                 mappings (Required): [
     *                     (recursive schema, see above)
     *                 ]
     *             }
     *         ]
     *         parameters (Optional): {
     *             projectionMode: String(skipIndexingParentDocuments/includeIndexingParentDocuments) (Optional)
     *              (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *         }
     *     }
     *     &#64;odata.etag: String (Optional)
     *     encryptionKey (Optional): {
     *         keyVaultKeyName: String (Required)
     *         keyVaultKeyVersion: String (Optional)
     *         keyVaultUri: String (Required)
     *         accessCredentials (Optional): {
     *             applicationId: String (Required)
     *             applicationSecret: String (Optional)
     *         }
     *         identity (Optional): (recursive schema, see identity above)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param skillsetName The name of the skillset.
     * @param skillset The skillset containing one or more skills to create or update in a search
     * service.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of skills along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createOrUpdateWithResponse(String skillsetName, BinaryData skillset,
        RequestOptions requestOptions) {
        final String prefer = "return=representation";
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.createOrUpdateSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            prefer, skillsetName, contentType, accept, skillset, requestOptions, Context.NONE);
    }

    /**
     * Deletes a skillset in a search service.
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>Defines the If-Match condition. The operation will be
     * performed only if the ETag on the server matches this value.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>Defines the If-None-Match condition. The operation will
     * be performed only if the ETag on the server does not match this value.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param skillsetName The name of the skillset.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteWithResponseAsync(String skillsetName, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.delete(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), skillsetName, accept, requestOptions, context));
    }

    /**
     * Deletes a skillset in a search service.
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>Defines the If-Match condition. The operation will be
     * performed only if the ETag on the server matches this value.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>Defines the If-None-Match condition. The operation will
     * be performed only if the ETag on the server does not match this value.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param skillsetName The name of the skillset.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(String skillsetName, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.deleteSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(), skillsetName,
            accept, requestOptions, Context.NONE);
    }

    /**
     * Retrieves a skillset in a search service.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     description: String (Optional)
     *     skills (Required): [
     *          (Required){
     *             &#64;odata.type: String (Required)
     *             name: String (Optional)
     *             description: String (Optional)
     *             context: String (Optional)
     *             inputs (Required): [
     *                  (Required){
     *                     name: String (Required)
     *                     source: String (Optional)
     *                     sourceContext: String (Optional)
     *                     inputs (Optional): [
     *                         (recursive schema, see above)
     *                     ]
     *                 }
     *             ]
     *             outputs (Required): [
     *                  (Required){
     *                     name: String (Required)
     *                     targetName: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     cognitiveServices (Optional): {
     *         &#64;odata.type: String (Required)
     *         description: String (Optional)
     *     }
     *     knowledgeStore (Optional): {
     *         storageConnectionString: String (Required)
     *         projections (Required): [
     *              (Required){
     *                 tables (Optional): [
     *                      (Optional){
     *                         referenceKeyName: String (Optional)
     *                         generatedKeyName: String (Optional)
     *                         source: String (Optional)
     *                         sourceContext: String (Optional)
     *                         inputs (Optional): [
     *                             (recursive schema, see above)
     *                         ]
     *                         tableName: String (Required)
     *                     }
     *                 ]
     *                 objects (Optional): [
     *                      (Optional){
     *                         referenceKeyName: String (Optional)
     *                         generatedKeyName: String (Optional)
     *                         source: String (Optional)
     *                         sourceContext: String (Optional)
     *                         inputs (Optional): [
     *                             (recursive schema, see above)
     *                         ]
     *                         storageContainer: String (Required)
     *                     }
     *                 ]
     *                 files (Optional): [
     *                      (Optional){
     *                         referenceKeyName: String (Optional)
     *                         generatedKeyName: String (Optional)
     *                         source: String (Optional)
     *                         sourceContext: String (Optional)
     *                         inputs (Optional): [
     *                             (recursive schema, see above)
     *                         ]
     *                         storageContainer: String (Required)
     *                     }
     *                 ]
     *             }
     *         ]
     *         identity (Optional): {
     *             &#64;odata.type: String (Required)
     *         }
     *         parameters (Optional): {
     *             synthesizeGeneratedKeyName: Boolean (Optional)
     *              (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *         }
     *     }
     *     indexProjections (Optional): {
     *         selectors (Required): [
     *              (Required){
     *                 targetIndexName: String (Required)
     *                 parentKeyFieldName: String (Required)
     *                 sourceContext: String (Required)
     *                 mappings (Required): [
     *                     (recursive schema, see above)
     *                 ]
     *             }
     *         ]
     *         parameters (Optional): {
     *             projectionMode: String(skipIndexingParentDocuments/includeIndexingParentDocuments) (Optional)
     *              (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *         }
     *     }
     *     &#64;odata.etag: String (Optional)
     *     encryptionKey (Optional): {
     *         keyVaultKeyName: String (Required)
     *         keyVaultKeyVersion: String (Optional)
     *         keyVaultUri: String (Required)
     *         accessCredentials (Optional): {
     *             applicationId: String (Required)
     *             applicationSecret: String (Optional)
     *         }
     *         identity (Optional): (recursive schema, see identity above)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param skillsetName The name of the skillset.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of skills along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getWithResponseAsync(String skillsetName, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.get(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), skillsetName, accept, requestOptions, context));
    }

    /**
     * Retrieves a skillset in a search service.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     description: String (Optional)
     *     skills (Required): [
     *          (Required){
     *             &#64;odata.type: String (Required)
     *             name: String (Optional)
     *             description: String (Optional)
     *             context: String (Optional)
     *             inputs (Required): [
     *                  (Required){
     *                     name: String (Required)
     *                     source: String (Optional)
     *                     sourceContext: String (Optional)
     *                     inputs (Optional): [
     *                         (recursive schema, see above)
     *                     ]
     *                 }
     *             ]
     *             outputs (Required): [
     *                  (Required){
     *                     name: String (Required)
     *                     targetName: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     cognitiveServices (Optional): {
     *         &#64;odata.type: String (Required)
     *         description: String (Optional)
     *     }
     *     knowledgeStore (Optional): {
     *         storageConnectionString: String (Required)
     *         projections (Required): [
     *              (Required){
     *                 tables (Optional): [
     *                      (Optional){
     *                         referenceKeyName: String (Optional)
     *                         generatedKeyName: String (Optional)
     *                         source: String (Optional)
     *                         sourceContext: String (Optional)
     *                         inputs (Optional): [
     *                             (recursive schema, see above)
     *                         ]
     *                         tableName: String (Required)
     *                     }
     *                 ]
     *                 objects (Optional): [
     *                      (Optional){
     *                         referenceKeyName: String (Optional)
     *                         generatedKeyName: String (Optional)
     *                         source: String (Optional)
     *                         sourceContext: String (Optional)
     *                         inputs (Optional): [
     *                             (recursive schema, see above)
     *                         ]
     *                         storageContainer: String (Required)
     *                     }
     *                 ]
     *                 files (Optional): [
     *                      (Optional){
     *                         referenceKeyName: String (Optional)
     *                         generatedKeyName: String (Optional)
     *                         source: String (Optional)
     *                         sourceContext: String (Optional)
     *                         inputs (Optional): [
     *                             (recursive schema, see above)
     *                         ]
     *                         storageContainer: String (Required)
     *                     }
     *                 ]
     *             }
     *         ]
     *         identity (Optional): {
     *             &#64;odata.type: String (Required)
     *         }
     *         parameters (Optional): {
     *             synthesizeGeneratedKeyName: Boolean (Optional)
     *              (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *         }
     *     }
     *     indexProjections (Optional): {
     *         selectors (Required): [
     *              (Required){
     *                 targetIndexName: String (Required)
     *                 parentKeyFieldName: String (Required)
     *                 sourceContext: String (Required)
     *                 mappings (Required): [
     *                     (recursive schema, see above)
     *                 ]
     *             }
     *         ]
     *         parameters (Optional): {
     *             projectionMode: String(skipIndexingParentDocuments/includeIndexingParentDocuments) (Optional)
     *              (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *         }
     *     }
     *     &#64;odata.etag: String (Optional)
     *     encryptionKey (Optional): {
     *         keyVaultKeyName: String (Required)
     *         keyVaultKeyVersion: String (Optional)
     *         keyVaultUri: String (Required)
     *         accessCredentials (Optional): {
     *             applicationId: String (Required)
     *             applicationSecret: String (Optional)
     *         }
     *         identity (Optional): (recursive schema, see identity above)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param skillsetName The name of the skillset.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of skills along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getWithResponse(String skillsetName, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(), skillsetName,
            accept, requestOptions, Context.NONE);
    }

    /**
     * List all skillsets in a search service.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>$select</td><td>String</td><td>No</td><td>Selects which top-level properties to retrieve.
     * Specified as a comma-separated list of JSON property names,
     * or '*' for all properties. The default is all properties.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     value (Required): [
     *          (Required){
     *             name: String (Required)
     *             description: String (Optional)
     *             skills (Required): [
     *                  (Required){
     *                     &#64;odata.type: String (Required)
     *                     name: String (Optional)
     *                     description: String (Optional)
     *                     context: String (Optional)
     *                     inputs (Required): [
     *                          (Required){
     *                             name: String (Required)
     *                             source: String (Optional)
     *                             sourceContext: String (Optional)
     *                             inputs (Optional): [
     *                                 (recursive schema, see above)
     *                             ]
     *                         }
     *                     ]
     *                     outputs (Required): [
     *                          (Required){
     *                             name: String (Required)
     *                             targetName: String (Optional)
     *                         }
     *                     ]
     *                 }
     *             ]
     *             cognitiveServices (Optional): {
     *                 &#64;odata.type: String (Required)
     *                 description: String (Optional)
     *             }
     *             knowledgeStore (Optional): {
     *                 storageConnectionString: String (Required)
     *                 projections (Required): [
     *                      (Required){
     *                         tables (Optional): [
     *                              (Optional){
     *                                 referenceKeyName: String (Optional)
     *                                 generatedKeyName: String (Optional)
     *                                 source: String (Optional)
     *                                 sourceContext: String (Optional)
     *                                 inputs (Optional): [
     *                                     (recursive schema, see above)
     *                                 ]
     *                                 tableName: String (Required)
     *                             }
     *                         ]
     *                         objects (Optional): [
     *                              (Optional){
     *                                 referenceKeyName: String (Optional)
     *                                 generatedKeyName: String (Optional)
     *                                 source: String (Optional)
     *                                 sourceContext: String (Optional)
     *                                 inputs (Optional): [
     *                                     (recursive schema, see above)
     *                                 ]
     *                                 storageContainer: String (Required)
     *                             }
     *                         ]
     *                         files (Optional): [
     *                              (Optional){
     *                                 referenceKeyName: String (Optional)
     *                                 generatedKeyName: String (Optional)
     *                                 source: String (Optional)
     *                                 sourceContext: String (Optional)
     *                                 inputs (Optional): [
     *                                     (recursive schema, see above)
     *                                 ]
     *                                 storageContainer: String (Required)
     *                             }
     *                         ]
     *                     }
     *                 ]
     *                 identity (Optional): {
     *                     &#64;odata.type: String (Required)
     *                 }
     *                 parameters (Optional): {
     *                     synthesizeGeneratedKeyName: Boolean (Optional)
     *                      (Optional): {
     *                         String: BinaryData (Required)
     *                     }
     *                 }
     *             }
     *             indexProjections (Optional): {
     *                 selectors (Required): [
     *                      (Required){
     *                         targetIndexName: String (Required)
     *                         parentKeyFieldName: String (Required)
     *                         sourceContext: String (Required)
     *                         mappings (Required): [
     *                             (recursive schema, see above)
     *                         ]
     *                     }
     *                 ]
     *                 parameters (Optional): {
     *                     projectionMode: String(skipIndexingParentDocuments/includeIndexingParentDocuments) (Optional)
     *                      (Optional): {
     *                         String: BinaryData (Required)
     *                     }
     *                 }
     *             }
     *             &#64;odata.etag: String (Optional)
     *             encryptionKey (Optional): {
     *                 keyVaultKeyName: String (Required)
     *                 keyVaultKeyVersion: String (Optional)
     *                 keyVaultUri: String (Required)
     *                 accessCredentials (Optional): {
     *                     applicationId: String (Required)
     *                     applicationSecret: String (Optional)
     *                 }
     *                 identity (Optional): (recursive schema, see identity above)
     *             }
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response from a list skillset request along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listWithResponseAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.list(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), accept, requestOptions, context));
    }

    /**
     * List all skillsets in a search service.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>$select</td><td>String</td><td>No</td><td>Selects which top-level properties to retrieve.
     * Specified as a comma-separated list of JSON property names,
     * or '*' for all properties. The default is all properties.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     value (Required): [
     *          (Required){
     *             name: String (Required)
     *             description: String (Optional)
     *             skills (Required): [
     *                  (Required){
     *                     &#64;odata.type: String (Required)
     *                     name: String (Optional)
     *                     description: String (Optional)
     *                     context: String (Optional)
     *                     inputs (Required): [
     *                          (Required){
     *                             name: String (Required)
     *                             source: String (Optional)
     *                             sourceContext: String (Optional)
     *                             inputs (Optional): [
     *                                 (recursive schema, see above)
     *                             ]
     *                         }
     *                     ]
     *                     outputs (Required): [
     *                          (Required){
     *                             name: String (Required)
     *                             targetName: String (Optional)
     *                         }
     *                     ]
     *                 }
     *             ]
     *             cognitiveServices (Optional): {
     *                 &#64;odata.type: String (Required)
     *                 description: String (Optional)
     *             }
     *             knowledgeStore (Optional): {
     *                 storageConnectionString: String (Required)
     *                 projections (Required): [
     *                      (Required){
     *                         tables (Optional): [
     *                              (Optional){
     *                                 referenceKeyName: String (Optional)
     *                                 generatedKeyName: String (Optional)
     *                                 source: String (Optional)
     *                                 sourceContext: String (Optional)
     *                                 inputs (Optional): [
     *                                     (recursive schema, see above)
     *                                 ]
     *                                 tableName: String (Required)
     *                             }
     *                         ]
     *                         objects (Optional): [
     *                              (Optional){
     *                                 referenceKeyName: String (Optional)
     *                                 generatedKeyName: String (Optional)
     *                                 source: String (Optional)
     *                                 sourceContext: String (Optional)
     *                                 inputs (Optional): [
     *                                     (recursive schema, see above)
     *                                 ]
     *                                 storageContainer: String (Required)
     *                             }
     *                         ]
     *                         files (Optional): [
     *                              (Optional){
     *                                 referenceKeyName: String (Optional)
     *                                 generatedKeyName: String (Optional)
     *                                 source: String (Optional)
     *                                 sourceContext: String (Optional)
     *                                 inputs (Optional): [
     *                                     (recursive schema, see above)
     *                                 ]
     *                                 storageContainer: String (Required)
     *                             }
     *                         ]
     *                     }
     *                 ]
     *                 identity (Optional): {
     *                     &#64;odata.type: String (Required)
     *                 }
     *                 parameters (Optional): {
     *                     synthesizeGeneratedKeyName: Boolean (Optional)
     *                      (Optional): {
     *                         String: BinaryData (Required)
     *                     }
     *                 }
     *             }
     *             indexProjections (Optional): {
     *                 selectors (Required): [
     *                      (Required){
     *                         targetIndexName: String (Required)
     *                         parentKeyFieldName: String (Required)
     *                         sourceContext: String (Required)
     *                         mappings (Required): [
     *                             (recursive schema, see above)
     *                         ]
     *                     }
     *                 ]
     *                 parameters (Optional): {
     *                     projectionMode: String(skipIndexingParentDocuments/includeIndexingParentDocuments) (Optional)
     *                      (Optional): {
     *                         String: BinaryData (Required)
     *                     }
     *                 }
     *             }
     *             &#64;odata.etag: String (Optional)
     *             encryptionKey (Optional): {
     *                 keyVaultKeyName: String (Required)
     *                 keyVaultKeyVersion: String (Optional)
     *                 keyVaultUri: String (Required)
     *                 accessCredentials (Optional): {
     *                     applicationId: String (Required)
     *                     applicationSecret: String (Optional)
     *                 }
     *                 identity (Optional): (recursive schema, see identity above)
     *             }
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response from a list skillset request along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listWithResponse(RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.listSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(), accept,
            requestOptions, Context.NONE);
    }

    /**
     * Creates a new skillset in a search service.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     description: String (Optional)
     *     skills (Required): [
     *          (Required){
     *             &#64;odata.type: String (Required)
     *             name: String (Optional)
     *             description: String (Optional)
     *             context: String (Optional)
     *             inputs (Required): [
     *                  (Required){
     *                     name: String (Required)
     *                     source: String (Optional)
     *                     sourceContext: String (Optional)
     *                     inputs (Optional): [
     *                         (recursive schema, see above)
     *                     ]
     *                 }
     *             ]
     *             outputs (Required): [
     *                  (Required){
     *                     name: String (Required)
     *                     targetName: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     cognitiveServices (Optional): {
     *         &#64;odata.type: String (Required)
     *         description: String (Optional)
     *     }
     *     knowledgeStore (Optional): {
     *         storageConnectionString: String (Required)
     *         projections (Required): [
     *              (Required){
     *                 tables (Optional): [
     *                      (Optional){
     *                         referenceKeyName: String (Optional)
     *                         generatedKeyName: String (Optional)
     *                         source: String (Optional)
     *                         sourceContext: String (Optional)
     *                         inputs (Optional): [
     *                             (recursive schema, see above)
     *                         ]
     *                         tableName: String (Required)
     *                     }
     *                 ]
     *                 objects (Optional): [
     *                      (Optional){
     *                         referenceKeyName: String (Optional)
     *                         generatedKeyName: String (Optional)
     *                         source: String (Optional)
     *                         sourceContext: String (Optional)
     *                         inputs (Optional): [
     *                             (recursive schema, see above)
     *                         ]
     *                         storageContainer: String (Required)
     *                     }
     *                 ]
     *                 files (Optional): [
     *                      (Optional){
     *                         referenceKeyName: String (Optional)
     *                         generatedKeyName: String (Optional)
     *                         source: String (Optional)
     *                         sourceContext: String (Optional)
     *                         inputs (Optional): [
     *                             (recursive schema, see above)
     *                         ]
     *                         storageContainer: String (Required)
     *                     }
     *                 ]
     *             }
     *         ]
     *         identity (Optional): {
     *             &#64;odata.type: String (Required)
     *         }
     *         parameters (Optional): {
     *             synthesizeGeneratedKeyName: Boolean (Optional)
     *              (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *         }
     *     }
     *     indexProjections (Optional): {
     *         selectors (Required): [
     *              (Required){
     *                 targetIndexName: String (Required)
     *                 parentKeyFieldName: String (Required)
     *                 sourceContext: String (Required)
     *                 mappings (Required): [
     *                     (recursive schema, see above)
     *                 ]
     *             }
     *         ]
     *         parameters (Optional): {
     *             projectionMode: String(skipIndexingParentDocuments/includeIndexingParentDocuments) (Optional)
     *              (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *         }
     *     }
     *     &#64;odata.etag: String (Optional)
     *     encryptionKey (Optional): {
     *         keyVaultKeyName: String (Required)
     *         keyVaultKeyVersion: String (Optional)
     *         keyVaultUri: String (Required)
     *         accessCredentials (Optional): {
     *             applicationId: String (Required)
     *             applicationSecret: String (Optional)
     *         }
     *         identity (Optional): (recursive schema, see identity above)
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     description: String (Optional)
     *     skills (Required): [
     *          (Required){
     *             &#64;odata.type: String (Required)
     *             name: String (Optional)
     *             description: String (Optional)
     *             context: String (Optional)
     *             inputs (Required): [
     *                  (Required){
     *                     name: String (Required)
     *                     source: String (Optional)
     *                     sourceContext: String (Optional)
     *                     inputs (Optional): [
     *                         (recursive schema, see above)
     *                     ]
     *                 }
     *             ]
     *             outputs (Required): [
     *                  (Required){
     *                     name: String (Required)
     *                     targetName: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     cognitiveServices (Optional): {
     *         &#64;odata.type: String (Required)
     *         description: String (Optional)
     *     }
     *     knowledgeStore (Optional): {
     *         storageConnectionString: String (Required)
     *         projections (Required): [
     *              (Required){
     *                 tables (Optional): [
     *                      (Optional){
     *                         referenceKeyName: String (Optional)
     *                         generatedKeyName: String (Optional)
     *                         source: String (Optional)
     *                         sourceContext: String (Optional)
     *                         inputs (Optional): [
     *                             (recursive schema, see above)
     *                         ]
     *                         tableName: String (Required)
     *                     }
     *                 ]
     *                 objects (Optional): [
     *                      (Optional){
     *                         referenceKeyName: String (Optional)
     *                         generatedKeyName: String (Optional)
     *                         source: String (Optional)
     *                         sourceContext: String (Optional)
     *                         inputs (Optional): [
     *                             (recursive schema, see above)
     *                         ]
     *                         storageContainer: String (Required)
     *                     }
     *                 ]
     *                 files (Optional): [
     *                      (Optional){
     *                         referenceKeyName: String (Optional)
     *                         generatedKeyName: String (Optional)
     *                         source: String (Optional)
     *                         sourceContext: String (Optional)
     *                         inputs (Optional): [
     *                             (recursive schema, see above)
     *                         ]
     *                         storageContainer: String (Required)
     *                     }
     *                 ]
     *             }
     *         ]
     *         identity (Optional): {
     *             &#64;odata.type: String (Required)
     *         }
     *         parameters (Optional): {
     *             synthesizeGeneratedKeyName: Boolean (Optional)
     *              (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *         }
     *     }
     *     indexProjections (Optional): {
     *         selectors (Required): [
     *              (Required){
     *                 targetIndexName: String (Required)
     *                 parentKeyFieldName: String (Required)
     *                 sourceContext: String (Required)
     *                 mappings (Required): [
     *                     (recursive schema, see above)
     *                 ]
     *             }
     *         ]
     *         parameters (Optional): {
     *             projectionMode: String(skipIndexingParentDocuments/includeIndexingParentDocuments) (Optional)
     *              (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *         }
     *     }
     *     &#64;odata.etag: String (Optional)
     *     encryptionKey (Optional): {
     *         keyVaultKeyName: String (Required)
     *         keyVaultKeyVersion: String (Optional)
     *         keyVaultUri: String (Required)
     *         accessCredentials (Optional): {
     *             applicationId: String (Required)
     *             applicationSecret: String (Optional)
     *         }
     *         identity (Optional): (recursive schema, see identity above)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param skillset The skillset containing one or more skills to create in a search service.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of skills along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createWithResponseAsync(BinaryData skillset, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.create(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), contentType, accept, skillset, requestOptions, context));
    }

    /**
     * Creates a new skillset in a search service.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     description: String (Optional)
     *     skills (Required): [
     *          (Required){
     *             &#64;odata.type: String (Required)
     *             name: String (Optional)
     *             description: String (Optional)
     *             context: String (Optional)
     *             inputs (Required): [
     *                  (Required){
     *                     name: String (Required)
     *                     source: String (Optional)
     *                     sourceContext: String (Optional)
     *                     inputs (Optional): [
     *                         (recursive schema, see above)
     *                     ]
     *                 }
     *             ]
     *             outputs (Required): [
     *                  (Required){
     *                     name: String (Required)
     *                     targetName: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     cognitiveServices (Optional): {
     *         &#64;odata.type: String (Required)
     *         description: String (Optional)
     *     }
     *     knowledgeStore (Optional): {
     *         storageConnectionString: String (Required)
     *         projections (Required): [
     *              (Required){
     *                 tables (Optional): [
     *                      (Optional){
     *                         referenceKeyName: String (Optional)
     *                         generatedKeyName: String (Optional)
     *                         source: String (Optional)
     *                         sourceContext: String (Optional)
     *                         inputs (Optional): [
     *                             (recursive schema, see above)
     *                         ]
     *                         tableName: String (Required)
     *                     }
     *                 ]
     *                 objects (Optional): [
     *                      (Optional){
     *                         referenceKeyName: String (Optional)
     *                         generatedKeyName: String (Optional)
     *                         source: String (Optional)
     *                         sourceContext: String (Optional)
     *                         inputs (Optional): [
     *                             (recursive schema, see above)
     *                         ]
     *                         storageContainer: String (Required)
     *                     }
     *                 ]
     *                 files (Optional): [
     *                      (Optional){
     *                         referenceKeyName: String (Optional)
     *                         generatedKeyName: String (Optional)
     *                         source: String (Optional)
     *                         sourceContext: String (Optional)
     *                         inputs (Optional): [
     *                             (recursive schema, see above)
     *                         ]
     *                         storageContainer: String (Required)
     *                     }
     *                 ]
     *             }
     *         ]
     *         identity (Optional): {
     *             &#64;odata.type: String (Required)
     *         }
     *         parameters (Optional): {
     *             synthesizeGeneratedKeyName: Boolean (Optional)
     *              (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *         }
     *     }
     *     indexProjections (Optional): {
     *         selectors (Required): [
     *              (Required){
     *                 targetIndexName: String (Required)
     *                 parentKeyFieldName: String (Required)
     *                 sourceContext: String (Required)
     *                 mappings (Required): [
     *                     (recursive schema, see above)
     *                 ]
     *             }
     *         ]
     *         parameters (Optional): {
     *             projectionMode: String(skipIndexingParentDocuments/includeIndexingParentDocuments) (Optional)
     *              (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *         }
     *     }
     *     &#64;odata.etag: String (Optional)
     *     encryptionKey (Optional): {
     *         keyVaultKeyName: String (Required)
     *         keyVaultKeyVersion: String (Optional)
     *         keyVaultUri: String (Required)
     *         accessCredentials (Optional): {
     *             applicationId: String (Required)
     *             applicationSecret: String (Optional)
     *         }
     *         identity (Optional): (recursive schema, see identity above)
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     description: String (Optional)
     *     skills (Required): [
     *          (Required){
     *             &#64;odata.type: String (Required)
     *             name: String (Optional)
     *             description: String (Optional)
     *             context: String (Optional)
     *             inputs (Required): [
     *                  (Required){
     *                     name: String (Required)
     *                     source: String (Optional)
     *                     sourceContext: String (Optional)
     *                     inputs (Optional): [
     *                         (recursive schema, see above)
     *                     ]
     *                 }
     *             ]
     *             outputs (Required): [
     *                  (Required){
     *                     name: String (Required)
     *                     targetName: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     cognitiveServices (Optional): {
     *         &#64;odata.type: String (Required)
     *         description: String (Optional)
     *     }
     *     knowledgeStore (Optional): {
     *         storageConnectionString: String (Required)
     *         projections (Required): [
     *              (Required){
     *                 tables (Optional): [
     *                      (Optional){
     *                         referenceKeyName: String (Optional)
     *                         generatedKeyName: String (Optional)
     *                         source: String (Optional)
     *                         sourceContext: String (Optional)
     *                         inputs (Optional): [
     *                             (recursive schema, see above)
     *                         ]
     *                         tableName: String (Required)
     *                     }
     *                 ]
     *                 objects (Optional): [
     *                      (Optional){
     *                         referenceKeyName: String (Optional)
     *                         generatedKeyName: String (Optional)
     *                         source: String (Optional)
     *                         sourceContext: String (Optional)
     *                         inputs (Optional): [
     *                             (recursive schema, see above)
     *                         ]
     *                         storageContainer: String (Required)
     *                     }
     *                 ]
     *                 files (Optional): [
     *                      (Optional){
     *                         referenceKeyName: String (Optional)
     *                         generatedKeyName: String (Optional)
     *                         source: String (Optional)
     *                         sourceContext: String (Optional)
     *                         inputs (Optional): [
     *                             (recursive schema, see above)
     *                         ]
     *                         storageContainer: String (Required)
     *                     }
     *                 ]
     *             }
     *         ]
     *         identity (Optional): {
     *             &#64;odata.type: String (Required)
     *         }
     *         parameters (Optional): {
     *             synthesizeGeneratedKeyName: Boolean (Optional)
     *              (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *         }
     *     }
     *     indexProjections (Optional): {
     *         selectors (Required): [
     *              (Required){
     *                 targetIndexName: String (Required)
     *                 parentKeyFieldName: String (Required)
     *                 sourceContext: String (Required)
     *                 mappings (Required): [
     *                     (recursive schema, see above)
     *                 ]
     *             }
     *         ]
     *         parameters (Optional): {
     *             projectionMode: String(skipIndexingParentDocuments/includeIndexingParentDocuments) (Optional)
     *              (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *         }
     *     }
     *     &#64;odata.etag: String (Optional)
     *     encryptionKey (Optional): {
     *         keyVaultKeyName: String (Required)
     *         keyVaultKeyVersion: String (Optional)
     *         keyVaultUri: String (Required)
     *         accessCredentials (Optional): {
     *             applicationId: String (Required)
     *             applicationSecret: String (Optional)
     *         }
     *         identity (Optional): (recursive schema, see identity above)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param skillset The skillset containing one or more skills to create in a search service.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of skills along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createWithResponse(BinaryData skillset, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.createSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(), contentType,
            accept, skillset, requestOptions, Context.NONE);
    }

    /**
     * Reset an existing skillset in a search service.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     skillNames (Optional): [
     *         String (Optional)
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param skillsetName The name of the skillset.
     * @param skillNames The names of the skills to reset. If not specified, all skills in the skillset
     * will be reset.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> resetSkillsWithResponseAsync(String skillsetName, BinaryData skillNames,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.resetSkills(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
                skillsetName, contentType, accept, skillNames, requestOptions, context));
    }

    /**
     * Reset an existing skillset in a search service.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     skillNames (Optional): [
     *         String (Optional)
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param skillsetName The name of the skillset.
     * @param skillNames The names of the skills to reset. If not specified, all skills in the skillset
     * will be reset.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> resetSkillsWithResponse(String skillsetName, BinaryData skillNames,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.resetSkillsSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            skillsetName, contentType, accept, skillNames, requestOptions, Context.NONE);
    }
}
