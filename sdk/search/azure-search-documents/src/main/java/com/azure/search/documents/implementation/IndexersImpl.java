// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.search.documents.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.HttpHeaderName;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.search.documents.SearchServiceVersion;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in Indexers.
 */
public final class IndexersImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final IndexersService service;

    /**
     * The service client containing this operation class.
     */
    private final SearchClientImpl client;

    /**
     * Initializes an instance of IndexersImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    IndexersImpl(SearchClientImpl client) {
        this.service = RestProxy.create(IndexersService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * Gets Service version.
     * 
     * @return the serviceVersion value.
     */
    public SearchServiceVersion getServiceVersion() {
        return client.getServiceVersion();
    }

    /**
     * The interface defining all the services for SearchClientIndexers to be used by the proxy service to perform REST
     * calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "SearchClientIndexers")
    public interface IndexersService {
        @Post("/indexers('{indexerName}')/search.reset")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> reset(@HostParam("endpoint") String endpoint, @QueryParam("api-version") String apiVersion,
            @PathParam("indexerName") String indexerName, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Post("/indexers('{indexerName}')/search.reset")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> resetSync(@HostParam("endpoint") String endpoint, @QueryParam("api-version") String apiVersion,
            @PathParam("indexerName") String indexerName, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Post("/indexers('{indexerName}')/search.resetdocs")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> resetDocs(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("indexerName") String indexerName,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Post("/indexers('{indexerName}')/search.resetdocs")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> resetDocsSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("indexerName") String indexerName,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Post("/indexers('{indexerName}')/search.run")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> run(@HostParam("endpoint") String endpoint, @QueryParam("api-version") String apiVersion,
            @PathParam("indexerName") String indexerName, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Post("/indexers('{indexerName}')/search.run")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> runSync(@HostParam("endpoint") String endpoint, @QueryParam("api-version") String apiVersion,
            @PathParam("indexerName") String indexerName, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Put("/indexers('{indexerName}')")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> createOrUpdate(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Prefer") String prefer,
            @PathParam("indexerName") String indexerName, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData indexer,
            RequestOptions requestOptions, Context context);

        @Put("/indexers('{indexerName}')")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> createOrUpdateSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Prefer") String prefer,
            @PathParam("indexerName") String indexerName, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData indexer,
            RequestOptions requestOptions, Context context);

        @Delete("/indexers('{indexerName}')")
        @ExpectedResponses({ 204, 404 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> delete(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("indexerName") String indexerName,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Delete("/indexers('{indexerName}')")
        @ExpectedResponses({ 204, 404 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> deleteSync(@HostParam("endpoint") String endpoint, @QueryParam("api-version") String apiVersion,
            @PathParam("indexerName") String indexerName, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/indexers('{indexerName}')")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> get(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("indexerName") String indexerName,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/indexers('{indexerName}')")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("indexerName") String indexerName,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/indexers")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> list(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/indexers")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Post("/indexers")
        @ExpectedResponses({ 201 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> create(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData indexer,
            RequestOptions requestOptions, Context context);

        @Post("/indexers")
        @ExpectedResponses({ 201 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> createSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData indexer,
            RequestOptions requestOptions, Context context);

        @Get("/indexers('{indexerName}')/search.status")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getStatus(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("indexerName") String indexerName,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/indexers('{indexerName}')/search.status")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getStatusSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("indexerName") String indexerName,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);
    }

    /**
     * Resets the change tracking state associated with an indexer.
     * 
     * @param indexerName The name of the indexer.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> resetWithResponseAsync(String indexerName, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.reset(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), indexerName, accept, requestOptions, context));
    }

    /**
     * Resets the change tracking state associated with an indexer.
     * 
     * @param indexerName The name of the indexer.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> resetWithResponse(String indexerName, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.resetSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(), indexerName,
            accept, requestOptions, Context.NONE);
    }

    /**
     * Resets specific documents in the datasource to be selectively re-ingested by
     * the indexer.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>overwrite</td><td>Boolean</td><td>No</td><td>If false, keys or ids will be appended to existing ones. If
     * true, only the keys
     * or ids in this payload will be queued to be re-ingested.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Content-Type</td><td>String</td><td>No</td><td>The content type. Allowed values:
     * "application/json".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     documentKeys (Optional): [
     *         String (Optional)
     *     ]
     *     datasourceDocumentIds (Optional): [
     *         String (Optional)
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param indexerName The name of the indexer.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> resetDocsWithResponseAsync(String indexerName, RequestOptions requestOptions) {
        final String accept = "application/json";
        RequestOptions requestOptionsLocal = requestOptions == null ? new RequestOptions() : requestOptions;
        requestOptionsLocal.addRequestCallback(requestLocal -> {
            if (requestLocal.getBody() != null && requestLocal.getHeaders().get(HttpHeaderName.CONTENT_TYPE) == null) {
                requestLocal.getHeaders().set(HttpHeaderName.CONTENT_TYPE, "application/json");
            }
        });
        return FluxUtil.withContext(context -> service.resetDocs(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), indexerName, accept, requestOptionsLocal, context));
    }

    /**
     * Resets specific documents in the datasource to be selectively re-ingested by
     * the indexer.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>overwrite</td><td>Boolean</td><td>No</td><td>If false, keys or ids will be appended to existing ones. If
     * true, only the keys
     * or ids in this payload will be queued to be re-ingested.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Content-Type</td><td>String</td><td>No</td><td>The content type. Allowed values:
     * "application/json".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     documentKeys (Optional): [
     *         String (Optional)
     *     ]
     *     datasourceDocumentIds (Optional): [
     *         String (Optional)
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param indexerName The name of the indexer.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> resetDocsWithResponse(String indexerName, RequestOptions requestOptions) {
        final String accept = "application/json";
        RequestOptions requestOptionsLocal = requestOptions == null ? new RequestOptions() : requestOptions;
        requestOptionsLocal.addRequestCallback(requestLocal -> {
            if (requestLocal.getBody() != null && requestLocal.getHeaders().get(HttpHeaderName.CONTENT_TYPE) == null) {
                requestLocal.getHeaders().set(HttpHeaderName.CONTENT_TYPE, "application/json");
            }
        });
        return service.resetDocsSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            indexerName, accept, requestOptionsLocal, Context.NONE);
    }

    /**
     * Runs an indexer on-demand.
     * 
     * @param indexerName The name of the indexer.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> runWithResponseAsync(String indexerName, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.run(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), indexerName, accept, requestOptions, context));
    }

    /**
     * Runs an indexer on-demand.
     * 
     * @param indexerName The name of the indexer.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> runWithResponse(String indexerName, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.runSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(), indexerName,
            accept, requestOptions, Context.NONE);
    }

    /**
     * Creates a new indexer or updates an indexer if it already exists.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>ignoreResetRequirements</td><td>Boolean</td><td>No</td><td>Ignores cache reset requirements.</td></tr>
     * <tr><td>disableCacheReprocessingChangeDetection</td><td>Boolean</td><td>No</td><td>Disables cache reprocessing
     * change detection.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>Defines the If-Match condition. The operation will be
     * performed only if the ETag on the server matches this value.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>Defines the If-None-Match condition. The operation will
     * be performed only if the ETag on the server does not match this value.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     description: String (Optional)
     *     dataSourceName: String (Required)
     *     skillsetName: String (Optional)
     *     targetIndexName: String (Required)
     *     schedule (Optional): {
     *         interval: Duration (Required)
     *         startTime: OffsetDateTime (Optional)
     *     }
     *     parameters (Optional): {
     *         batchSize: Integer (Optional)
     *         maxFailedItems: Integer (Optional)
     *         maxFailedItemsPerBatch: Integer (Optional)
     *         configuration (Optional): {
     *             parsingMode: String(default/text/delimitedText/json/jsonArray/jsonLines/markdown) (Optional)
     *             excludedFileNameExtensions: String (Optional)
     *             indexedFileNameExtensions: String (Optional)
     *             failOnUnsupportedContentType: Boolean (Optional)
     *             failOnUnprocessableDocument: Boolean (Optional)
     *             indexStorageMetadataOnlyForOversizedDocuments: Boolean (Optional)
     *             delimitedTextHeaders: String (Optional)
     *             delimitedTextDelimiter: String (Optional)
     *             firstLineContainsHeaders: Boolean (Optional)
     *             markdownParsingSubmode: String(oneToMany/oneToOne) (Optional)
     *             markdownHeaderDepth: String(h1/h2/h3/h4/h5/h6) (Optional)
     *             documentRoot: String (Optional)
     *             dataToExtract: String(storageMetadata/allMetadata/contentAndMetadata) (Optional)
     *             imageAction: String(none/generateNormalizedImages/generateNormalizedImagePerPage) (Optional)
     *             allowSkillsetToReadFileData: Boolean (Optional)
     *             pdfTextRotationAlgorithm: String(none/detectAngles) (Optional)
     *             executionEnvironment: String(standard/private) (Optional)
     *             queryTimeout: String (Optional)
     *              (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *         }
     *     }
     *     fieldMappings (Optional): [
     *          (Optional){
     *             sourceFieldName: String (Required)
     *             targetFieldName: String (Optional)
     *             mappingFunction (Optional): {
     *                 name: String (Required)
     *                 parameters (Optional): {
     *                     String: BinaryData (Required)
     *                 }
     *             }
     *         }
     *     ]
     *     outputFieldMappings (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     disabled: Boolean (Optional)
     *     &#64;odata.etag: String (Optional)
     *     encryptionKey (Optional): {
     *         keyVaultKeyName: String (Required)
     *         keyVaultKeyVersion: String (Optional)
     *         keyVaultUri: String (Required)
     *         accessCredentials (Optional): {
     *             applicationId: String (Required)
     *             applicationSecret: String (Optional)
     *         }
     *         identity (Optional): {
     *             &#64;odata.type: String (Required)
     *         }
     *     }
     *     cache (Optional): {
     *         storageConnectionString: String (Optional)
     *         enableReprocessing: Boolean (Optional)
     *         identity (Optional): (recursive schema, see identity above)
     *         id: String (Optional)
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     description: String (Optional)
     *     dataSourceName: String (Required)
     *     skillsetName: String (Optional)
     *     targetIndexName: String (Required)
     *     schedule (Optional): {
     *         interval: Duration (Required)
     *         startTime: OffsetDateTime (Optional)
     *     }
     *     parameters (Optional): {
     *         batchSize: Integer (Optional)
     *         maxFailedItems: Integer (Optional)
     *         maxFailedItemsPerBatch: Integer (Optional)
     *         configuration (Optional): {
     *             parsingMode: String(default/text/delimitedText/json/jsonArray/jsonLines/markdown) (Optional)
     *             excludedFileNameExtensions: String (Optional)
     *             indexedFileNameExtensions: String (Optional)
     *             failOnUnsupportedContentType: Boolean (Optional)
     *             failOnUnprocessableDocument: Boolean (Optional)
     *             indexStorageMetadataOnlyForOversizedDocuments: Boolean (Optional)
     *             delimitedTextHeaders: String (Optional)
     *             delimitedTextDelimiter: String (Optional)
     *             firstLineContainsHeaders: Boolean (Optional)
     *             markdownParsingSubmode: String(oneToMany/oneToOne) (Optional)
     *             markdownHeaderDepth: String(h1/h2/h3/h4/h5/h6) (Optional)
     *             documentRoot: String (Optional)
     *             dataToExtract: String(storageMetadata/allMetadata/contentAndMetadata) (Optional)
     *             imageAction: String(none/generateNormalizedImages/generateNormalizedImagePerPage) (Optional)
     *             allowSkillsetToReadFileData: Boolean (Optional)
     *             pdfTextRotationAlgorithm: String(none/detectAngles) (Optional)
     *             executionEnvironment: String(standard/private) (Optional)
     *             queryTimeout: String (Optional)
     *              (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *         }
     *     }
     *     fieldMappings (Optional): [
     *          (Optional){
     *             sourceFieldName: String (Required)
     *             targetFieldName: String (Optional)
     *             mappingFunction (Optional): {
     *                 name: String (Required)
     *                 parameters (Optional): {
     *                     String: BinaryData (Required)
     *                 }
     *             }
     *         }
     *     ]
     *     outputFieldMappings (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     disabled: Boolean (Optional)
     *     &#64;odata.etag: String (Optional)
     *     encryptionKey (Optional): {
     *         keyVaultKeyName: String (Required)
     *         keyVaultKeyVersion: String (Optional)
     *         keyVaultUri: String (Required)
     *         accessCredentials (Optional): {
     *             applicationId: String (Required)
     *             applicationSecret: String (Optional)
     *         }
     *         identity (Optional): {
     *             &#64;odata.type: String (Required)
     *         }
     *     }
     *     cache (Optional): {
     *         storageConnectionString: String (Optional)
     *         enableReprocessing: Boolean (Optional)
     *         identity (Optional): (recursive schema, see identity above)
     *         id: String (Optional)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param indexerName The name of the indexer.
     * @param indexer The definition of the indexer to create or update.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents an indexer along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createOrUpdateWithResponseAsync(String indexerName, BinaryData indexer,
        RequestOptions requestOptions) {
        final String prefer = "return=representation";
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.createOrUpdate(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
                prefer, indexerName, contentType, accept, indexer, requestOptions, context));
    }

    /**
     * Creates a new indexer or updates an indexer if it already exists.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>ignoreResetRequirements</td><td>Boolean</td><td>No</td><td>Ignores cache reset requirements.</td></tr>
     * <tr><td>disableCacheReprocessingChangeDetection</td><td>Boolean</td><td>No</td><td>Disables cache reprocessing
     * change detection.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>Defines the If-Match condition. The operation will be
     * performed only if the ETag on the server matches this value.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>Defines the If-None-Match condition. The operation will
     * be performed only if the ETag on the server does not match this value.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     description: String (Optional)
     *     dataSourceName: String (Required)
     *     skillsetName: String (Optional)
     *     targetIndexName: String (Required)
     *     schedule (Optional): {
     *         interval: Duration (Required)
     *         startTime: OffsetDateTime (Optional)
     *     }
     *     parameters (Optional): {
     *         batchSize: Integer (Optional)
     *         maxFailedItems: Integer (Optional)
     *         maxFailedItemsPerBatch: Integer (Optional)
     *         configuration (Optional): {
     *             parsingMode: String(default/text/delimitedText/json/jsonArray/jsonLines/markdown) (Optional)
     *             excludedFileNameExtensions: String (Optional)
     *             indexedFileNameExtensions: String (Optional)
     *             failOnUnsupportedContentType: Boolean (Optional)
     *             failOnUnprocessableDocument: Boolean (Optional)
     *             indexStorageMetadataOnlyForOversizedDocuments: Boolean (Optional)
     *             delimitedTextHeaders: String (Optional)
     *             delimitedTextDelimiter: String (Optional)
     *             firstLineContainsHeaders: Boolean (Optional)
     *             markdownParsingSubmode: String(oneToMany/oneToOne) (Optional)
     *             markdownHeaderDepth: String(h1/h2/h3/h4/h5/h6) (Optional)
     *             documentRoot: String (Optional)
     *             dataToExtract: String(storageMetadata/allMetadata/contentAndMetadata) (Optional)
     *             imageAction: String(none/generateNormalizedImages/generateNormalizedImagePerPage) (Optional)
     *             allowSkillsetToReadFileData: Boolean (Optional)
     *             pdfTextRotationAlgorithm: String(none/detectAngles) (Optional)
     *             executionEnvironment: String(standard/private) (Optional)
     *             queryTimeout: String (Optional)
     *              (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *         }
     *     }
     *     fieldMappings (Optional): [
     *          (Optional){
     *             sourceFieldName: String (Required)
     *             targetFieldName: String (Optional)
     *             mappingFunction (Optional): {
     *                 name: String (Required)
     *                 parameters (Optional): {
     *                     String: BinaryData (Required)
     *                 }
     *             }
     *         }
     *     ]
     *     outputFieldMappings (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     disabled: Boolean (Optional)
     *     &#64;odata.etag: String (Optional)
     *     encryptionKey (Optional): {
     *         keyVaultKeyName: String (Required)
     *         keyVaultKeyVersion: String (Optional)
     *         keyVaultUri: String (Required)
     *         accessCredentials (Optional): {
     *             applicationId: String (Required)
     *             applicationSecret: String (Optional)
     *         }
     *         identity (Optional): {
     *             &#64;odata.type: String (Required)
     *         }
     *     }
     *     cache (Optional): {
     *         storageConnectionString: String (Optional)
     *         enableReprocessing: Boolean (Optional)
     *         identity (Optional): (recursive schema, see identity above)
     *         id: String (Optional)
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     description: String (Optional)
     *     dataSourceName: String (Required)
     *     skillsetName: String (Optional)
     *     targetIndexName: String (Required)
     *     schedule (Optional): {
     *         interval: Duration (Required)
     *         startTime: OffsetDateTime (Optional)
     *     }
     *     parameters (Optional): {
     *         batchSize: Integer (Optional)
     *         maxFailedItems: Integer (Optional)
     *         maxFailedItemsPerBatch: Integer (Optional)
     *         configuration (Optional): {
     *             parsingMode: String(default/text/delimitedText/json/jsonArray/jsonLines/markdown) (Optional)
     *             excludedFileNameExtensions: String (Optional)
     *             indexedFileNameExtensions: String (Optional)
     *             failOnUnsupportedContentType: Boolean (Optional)
     *             failOnUnprocessableDocument: Boolean (Optional)
     *             indexStorageMetadataOnlyForOversizedDocuments: Boolean (Optional)
     *             delimitedTextHeaders: String (Optional)
     *             delimitedTextDelimiter: String (Optional)
     *             firstLineContainsHeaders: Boolean (Optional)
     *             markdownParsingSubmode: String(oneToMany/oneToOne) (Optional)
     *             markdownHeaderDepth: String(h1/h2/h3/h4/h5/h6) (Optional)
     *             documentRoot: String (Optional)
     *             dataToExtract: String(storageMetadata/allMetadata/contentAndMetadata) (Optional)
     *             imageAction: String(none/generateNormalizedImages/generateNormalizedImagePerPage) (Optional)
     *             allowSkillsetToReadFileData: Boolean (Optional)
     *             pdfTextRotationAlgorithm: String(none/detectAngles) (Optional)
     *             executionEnvironment: String(standard/private) (Optional)
     *             queryTimeout: String (Optional)
     *              (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *         }
     *     }
     *     fieldMappings (Optional): [
     *          (Optional){
     *             sourceFieldName: String (Required)
     *             targetFieldName: String (Optional)
     *             mappingFunction (Optional): {
     *                 name: String (Required)
     *                 parameters (Optional): {
     *                     String: BinaryData (Required)
     *                 }
     *             }
     *         }
     *     ]
     *     outputFieldMappings (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     disabled: Boolean (Optional)
     *     &#64;odata.etag: String (Optional)
     *     encryptionKey (Optional): {
     *         keyVaultKeyName: String (Required)
     *         keyVaultKeyVersion: String (Optional)
     *         keyVaultUri: String (Required)
     *         accessCredentials (Optional): {
     *             applicationId: String (Required)
     *             applicationSecret: String (Optional)
     *         }
     *         identity (Optional): {
     *             &#64;odata.type: String (Required)
     *         }
     *     }
     *     cache (Optional): {
     *         storageConnectionString: String (Optional)
     *         enableReprocessing: Boolean (Optional)
     *         identity (Optional): (recursive schema, see identity above)
     *         id: String (Optional)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param indexerName The name of the indexer.
     * @param indexer The definition of the indexer to create or update.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents an indexer along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createOrUpdateWithResponse(String indexerName, BinaryData indexer,
        RequestOptions requestOptions) {
        final String prefer = "return=representation";
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.createOrUpdateSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            prefer, indexerName, contentType, accept, indexer, requestOptions, Context.NONE);
    }

    /**
     * Deletes an indexer.
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>Defines the If-Match condition. The operation will be
     * performed only if the ETag on the server matches this value.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>Defines the If-None-Match condition. The operation will
     * be performed only if the ETag on the server does not match this value.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param indexerName The name of the indexer.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteWithResponseAsync(String indexerName, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.delete(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), indexerName, accept, requestOptions, context));
    }

    /**
     * Deletes an indexer.
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>Defines the If-Match condition. The operation will be
     * performed only if the ETag on the server matches this value.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>Defines the If-None-Match condition. The operation will
     * be performed only if the ETag on the server does not match this value.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param indexerName The name of the indexer.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(String indexerName, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.deleteSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(), indexerName,
            accept, requestOptions, Context.NONE);
    }

    /**
     * Retrieves an indexer definition.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     description: String (Optional)
     *     dataSourceName: String (Required)
     *     skillsetName: String (Optional)
     *     targetIndexName: String (Required)
     *     schedule (Optional): {
     *         interval: Duration (Required)
     *         startTime: OffsetDateTime (Optional)
     *     }
     *     parameters (Optional): {
     *         batchSize: Integer (Optional)
     *         maxFailedItems: Integer (Optional)
     *         maxFailedItemsPerBatch: Integer (Optional)
     *         configuration (Optional): {
     *             parsingMode: String(default/text/delimitedText/json/jsonArray/jsonLines/markdown) (Optional)
     *             excludedFileNameExtensions: String (Optional)
     *             indexedFileNameExtensions: String (Optional)
     *             failOnUnsupportedContentType: Boolean (Optional)
     *             failOnUnprocessableDocument: Boolean (Optional)
     *             indexStorageMetadataOnlyForOversizedDocuments: Boolean (Optional)
     *             delimitedTextHeaders: String (Optional)
     *             delimitedTextDelimiter: String (Optional)
     *             firstLineContainsHeaders: Boolean (Optional)
     *             markdownParsingSubmode: String(oneToMany/oneToOne) (Optional)
     *             markdownHeaderDepth: String(h1/h2/h3/h4/h5/h6) (Optional)
     *             documentRoot: String (Optional)
     *             dataToExtract: String(storageMetadata/allMetadata/contentAndMetadata) (Optional)
     *             imageAction: String(none/generateNormalizedImages/generateNormalizedImagePerPage) (Optional)
     *             allowSkillsetToReadFileData: Boolean (Optional)
     *             pdfTextRotationAlgorithm: String(none/detectAngles) (Optional)
     *             executionEnvironment: String(standard/private) (Optional)
     *             queryTimeout: String (Optional)
     *              (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *         }
     *     }
     *     fieldMappings (Optional): [
     *          (Optional){
     *             sourceFieldName: String (Required)
     *             targetFieldName: String (Optional)
     *             mappingFunction (Optional): {
     *                 name: String (Required)
     *                 parameters (Optional): {
     *                     String: BinaryData (Required)
     *                 }
     *             }
     *         }
     *     ]
     *     outputFieldMappings (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     disabled: Boolean (Optional)
     *     &#64;odata.etag: String (Optional)
     *     encryptionKey (Optional): {
     *         keyVaultKeyName: String (Required)
     *         keyVaultKeyVersion: String (Optional)
     *         keyVaultUri: String (Required)
     *         accessCredentials (Optional): {
     *             applicationId: String (Required)
     *             applicationSecret: String (Optional)
     *         }
     *         identity (Optional): {
     *             &#64;odata.type: String (Required)
     *         }
     *     }
     *     cache (Optional): {
     *         storageConnectionString: String (Optional)
     *         enableReprocessing: Boolean (Optional)
     *         identity (Optional): (recursive schema, see identity above)
     *         id: String (Optional)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param indexerName The name of the indexer.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents an indexer along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getWithResponseAsync(String indexerName, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.get(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), indexerName, accept, requestOptions, context));
    }

    /**
     * Retrieves an indexer definition.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     description: String (Optional)
     *     dataSourceName: String (Required)
     *     skillsetName: String (Optional)
     *     targetIndexName: String (Required)
     *     schedule (Optional): {
     *         interval: Duration (Required)
     *         startTime: OffsetDateTime (Optional)
     *     }
     *     parameters (Optional): {
     *         batchSize: Integer (Optional)
     *         maxFailedItems: Integer (Optional)
     *         maxFailedItemsPerBatch: Integer (Optional)
     *         configuration (Optional): {
     *             parsingMode: String(default/text/delimitedText/json/jsonArray/jsonLines/markdown) (Optional)
     *             excludedFileNameExtensions: String (Optional)
     *             indexedFileNameExtensions: String (Optional)
     *             failOnUnsupportedContentType: Boolean (Optional)
     *             failOnUnprocessableDocument: Boolean (Optional)
     *             indexStorageMetadataOnlyForOversizedDocuments: Boolean (Optional)
     *             delimitedTextHeaders: String (Optional)
     *             delimitedTextDelimiter: String (Optional)
     *             firstLineContainsHeaders: Boolean (Optional)
     *             markdownParsingSubmode: String(oneToMany/oneToOne) (Optional)
     *             markdownHeaderDepth: String(h1/h2/h3/h4/h5/h6) (Optional)
     *             documentRoot: String (Optional)
     *             dataToExtract: String(storageMetadata/allMetadata/contentAndMetadata) (Optional)
     *             imageAction: String(none/generateNormalizedImages/generateNormalizedImagePerPage) (Optional)
     *             allowSkillsetToReadFileData: Boolean (Optional)
     *             pdfTextRotationAlgorithm: String(none/detectAngles) (Optional)
     *             executionEnvironment: String(standard/private) (Optional)
     *             queryTimeout: String (Optional)
     *              (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *         }
     *     }
     *     fieldMappings (Optional): [
     *          (Optional){
     *             sourceFieldName: String (Required)
     *             targetFieldName: String (Optional)
     *             mappingFunction (Optional): {
     *                 name: String (Required)
     *                 parameters (Optional): {
     *                     String: BinaryData (Required)
     *                 }
     *             }
     *         }
     *     ]
     *     outputFieldMappings (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     disabled: Boolean (Optional)
     *     &#64;odata.etag: String (Optional)
     *     encryptionKey (Optional): {
     *         keyVaultKeyName: String (Required)
     *         keyVaultKeyVersion: String (Optional)
     *         keyVaultUri: String (Required)
     *         accessCredentials (Optional): {
     *             applicationId: String (Required)
     *             applicationSecret: String (Optional)
     *         }
     *         identity (Optional): {
     *             &#64;odata.type: String (Required)
     *         }
     *     }
     *     cache (Optional): {
     *         storageConnectionString: String (Optional)
     *         enableReprocessing: Boolean (Optional)
     *         identity (Optional): (recursive schema, see identity above)
     *         id: String (Optional)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param indexerName The name of the indexer.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents an indexer along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getWithResponse(String indexerName, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(), indexerName,
            accept, requestOptions, Context.NONE);
    }

    /**
     * Lists all indexers available for a search service.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>$select</td><td>String</td><td>No</td><td>Selects which top-level properties to retrieve.
     * Specified as a comma-separated list of JSON property names,
     * or '*' for all properties. The default is all properties.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     value (Required): [
     *          (Required){
     *             name: String (Required)
     *             description: String (Optional)
     *             dataSourceName: String (Required)
     *             skillsetName: String (Optional)
     *             targetIndexName: String (Required)
     *             schedule (Optional): {
     *                 interval: Duration (Required)
     *                 startTime: OffsetDateTime (Optional)
     *             }
     *             parameters (Optional): {
     *                 batchSize: Integer (Optional)
     *                 maxFailedItems: Integer (Optional)
     *                 maxFailedItemsPerBatch: Integer (Optional)
     *                 configuration (Optional): {
     *                     parsingMode: String(default/text/delimitedText/json/jsonArray/jsonLines/markdown) (Optional)
     *                     excludedFileNameExtensions: String (Optional)
     *                     indexedFileNameExtensions: String (Optional)
     *                     failOnUnsupportedContentType: Boolean (Optional)
     *                     failOnUnprocessableDocument: Boolean (Optional)
     *                     indexStorageMetadataOnlyForOversizedDocuments: Boolean (Optional)
     *                     delimitedTextHeaders: String (Optional)
     *                     delimitedTextDelimiter: String (Optional)
     *                     firstLineContainsHeaders: Boolean (Optional)
     *                     markdownParsingSubmode: String(oneToMany/oneToOne) (Optional)
     *                     markdownHeaderDepth: String(h1/h2/h3/h4/h5/h6) (Optional)
     *                     documentRoot: String (Optional)
     *                     dataToExtract: String(storageMetadata/allMetadata/contentAndMetadata) (Optional)
     *                     imageAction: String(none/generateNormalizedImages/generateNormalizedImagePerPage) (Optional)
     *                     allowSkillsetToReadFileData: Boolean (Optional)
     *                     pdfTextRotationAlgorithm: String(none/detectAngles) (Optional)
     *                     executionEnvironment: String(standard/private) (Optional)
     *                     queryTimeout: String (Optional)
     *                      (Optional): {
     *                         String: BinaryData (Required)
     *                     }
     *                 }
     *             }
     *             fieldMappings (Optional): [
     *                  (Optional){
     *                     sourceFieldName: String (Required)
     *                     targetFieldName: String (Optional)
     *                     mappingFunction (Optional): {
     *                         name: String (Required)
     *                         parameters (Optional): {
     *                             String: BinaryData (Required)
     *                         }
     *                     }
     *                 }
     *             ]
     *             outputFieldMappings (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             disabled: Boolean (Optional)
     *             &#64;odata.etag: String (Optional)
     *             encryptionKey (Optional): {
     *                 keyVaultKeyName: String (Required)
     *                 keyVaultKeyVersion: String (Optional)
     *                 keyVaultUri: String (Required)
     *                 accessCredentials (Optional): {
     *                     applicationId: String (Required)
     *                     applicationSecret: String (Optional)
     *                 }
     *                 identity (Optional): {
     *                     &#64;odata.type: String (Required)
     *                 }
     *             }
     *             cache (Optional): {
     *                 storageConnectionString: String (Optional)
     *                 enableReprocessing: Boolean (Optional)
     *                 identity (Optional): (recursive schema, see identity above)
     *                 id: String (Optional)
     *             }
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response from a List Indexers request along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listWithResponseAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.list(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), accept, requestOptions, context));
    }

    /**
     * Lists all indexers available for a search service.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>$select</td><td>String</td><td>No</td><td>Selects which top-level properties to retrieve.
     * Specified as a comma-separated list of JSON property names,
     * or '*' for all properties. The default is all properties.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     value (Required): [
     *          (Required){
     *             name: String (Required)
     *             description: String (Optional)
     *             dataSourceName: String (Required)
     *             skillsetName: String (Optional)
     *             targetIndexName: String (Required)
     *             schedule (Optional): {
     *                 interval: Duration (Required)
     *                 startTime: OffsetDateTime (Optional)
     *             }
     *             parameters (Optional): {
     *                 batchSize: Integer (Optional)
     *                 maxFailedItems: Integer (Optional)
     *                 maxFailedItemsPerBatch: Integer (Optional)
     *                 configuration (Optional): {
     *                     parsingMode: String(default/text/delimitedText/json/jsonArray/jsonLines/markdown) (Optional)
     *                     excludedFileNameExtensions: String (Optional)
     *                     indexedFileNameExtensions: String (Optional)
     *                     failOnUnsupportedContentType: Boolean (Optional)
     *                     failOnUnprocessableDocument: Boolean (Optional)
     *                     indexStorageMetadataOnlyForOversizedDocuments: Boolean (Optional)
     *                     delimitedTextHeaders: String (Optional)
     *                     delimitedTextDelimiter: String (Optional)
     *                     firstLineContainsHeaders: Boolean (Optional)
     *                     markdownParsingSubmode: String(oneToMany/oneToOne) (Optional)
     *                     markdownHeaderDepth: String(h1/h2/h3/h4/h5/h6) (Optional)
     *                     documentRoot: String (Optional)
     *                     dataToExtract: String(storageMetadata/allMetadata/contentAndMetadata) (Optional)
     *                     imageAction: String(none/generateNormalizedImages/generateNormalizedImagePerPage) (Optional)
     *                     allowSkillsetToReadFileData: Boolean (Optional)
     *                     pdfTextRotationAlgorithm: String(none/detectAngles) (Optional)
     *                     executionEnvironment: String(standard/private) (Optional)
     *                     queryTimeout: String (Optional)
     *                      (Optional): {
     *                         String: BinaryData (Required)
     *                     }
     *                 }
     *             }
     *             fieldMappings (Optional): [
     *                  (Optional){
     *                     sourceFieldName: String (Required)
     *                     targetFieldName: String (Optional)
     *                     mappingFunction (Optional): {
     *                         name: String (Required)
     *                         parameters (Optional): {
     *                             String: BinaryData (Required)
     *                         }
     *                     }
     *                 }
     *             ]
     *             outputFieldMappings (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             disabled: Boolean (Optional)
     *             &#64;odata.etag: String (Optional)
     *             encryptionKey (Optional): {
     *                 keyVaultKeyName: String (Required)
     *                 keyVaultKeyVersion: String (Optional)
     *                 keyVaultUri: String (Required)
     *                 accessCredentials (Optional): {
     *                     applicationId: String (Required)
     *                     applicationSecret: String (Optional)
     *                 }
     *                 identity (Optional): {
     *                     &#64;odata.type: String (Required)
     *                 }
     *             }
     *             cache (Optional): {
     *                 storageConnectionString: String (Optional)
     *                 enableReprocessing: Boolean (Optional)
     *                 identity (Optional): (recursive schema, see identity above)
     *                 id: String (Optional)
     *             }
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response from a List Indexers request along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listWithResponse(RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.listSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(), accept,
            requestOptions, Context.NONE);
    }

    /**
     * Creates a new indexer.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     description: String (Optional)
     *     dataSourceName: String (Required)
     *     skillsetName: String (Optional)
     *     targetIndexName: String (Required)
     *     schedule (Optional): {
     *         interval: Duration (Required)
     *         startTime: OffsetDateTime (Optional)
     *     }
     *     parameters (Optional): {
     *         batchSize: Integer (Optional)
     *         maxFailedItems: Integer (Optional)
     *         maxFailedItemsPerBatch: Integer (Optional)
     *         configuration (Optional): {
     *             parsingMode: String(default/text/delimitedText/json/jsonArray/jsonLines/markdown) (Optional)
     *             excludedFileNameExtensions: String (Optional)
     *             indexedFileNameExtensions: String (Optional)
     *             failOnUnsupportedContentType: Boolean (Optional)
     *             failOnUnprocessableDocument: Boolean (Optional)
     *             indexStorageMetadataOnlyForOversizedDocuments: Boolean (Optional)
     *             delimitedTextHeaders: String (Optional)
     *             delimitedTextDelimiter: String (Optional)
     *             firstLineContainsHeaders: Boolean (Optional)
     *             markdownParsingSubmode: String(oneToMany/oneToOne) (Optional)
     *             markdownHeaderDepth: String(h1/h2/h3/h4/h5/h6) (Optional)
     *             documentRoot: String (Optional)
     *             dataToExtract: String(storageMetadata/allMetadata/contentAndMetadata) (Optional)
     *             imageAction: String(none/generateNormalizedImages/generateNormalizedImagePerPage) (Optional)
     *             allowSkillsetToReadFileData: Boolean (Optional)
     *             pdfTextRotationAlgorithm: String(none/detectAngles) (Optional)
     *             executionEnvironment: String(standard/private) (Optional)
     *             queryTimeout: String (Optional)
     *              (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *         }
     *     }
     *     fieldMappings (Optional): [
     *          (Optional){
     *             sourceFieldName: String (Required)
     *             targetFieldName: String (Optional)
     *             mappingFunction (Optional): {
     *                 name: String (Required)
     *                 parameters (Optional): {
     *                     String: BinaryData (Required)
     *                 }
     *             }
     *         }
     *     ]
     *     outputFieldMappings (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     disabled: Boolean (Optional)
     *     &#64;odata.etag: String (Optional)
     *     encryptionKey (Optional): {
     *         keyVaultKeyName: String (Required)
     *         keyVaultKeyVersion: String (Optional)
     *         keyVaultUri: String (Required)
     *         accessCredentials (Optional): {
     *             applicationId: String (Required)
     *             applicationSecret: String (Optional)
     *         }
     *         identity (Optional): {
     *             &#64;odata.type: String (Required)
     *         }
     *     }
     *     cache (Optional): {
     *         storageConnectionString: String (Optional)
     *         enableReprocessing: Boolean (Optional)
     *         identity (Optional): (recursive schema, see identity above)
     *         id: String (Optional)
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     description: String (Optional)
     *     dataSourceName: String (Required)
     *     skillsetName: String (Optional)
     *     targetIndexName: String (Required)
     *     schedule (Optional): {
     *         interval: Duration (Required)
     *         startTime: OffsetDateTime (Optional)
     *     }
     *     parameters (Optional): {
     *         batchSize: Integer (Optional)
     *         maxFailedItems: Integer (Optional)
     *         maxFailedItemsPerBatch: Integer (Optional)
     *         configuration (Optional): {
     *             parsingMode: String(default/text/delimitedText/json/jsonArray/jsonLines/markdown) (Optional)
     *             excludedFileNameExtensions: String (Optional)
     *             indexedFileNameExtensions: String (Optional)
     *             failOnUnsupportedContentType: Boolean (Optional)
     *             failOnUnprocessableDocument: Boolean (Optional)
     *             indexStorageMetadataOnlyForOversizedDocuments: Boolean (Optional)
     *             delimitedTextHeaders: String (Optional)
     *             delimitedTextDelimiter: String (Optional)
     *             firstLineContainsHeaders: Boolean (Optional)
     *             markdownParsingSubmode: String(oneToMany/oneToOne) (Optional)
     *             markdownHeaderDepth: String(h1/h2/h3/h4/h5/h6) (Optional)
     *             documentRoot: String (Optional)
     *             dataToExtract: String(storageMetadata/allMetadata/contentAndMetadata) (Optional)
     *             imageAction: String(none/generateNormalizedImages/generateNormalizedImagePerPage) (Optional)
     *             allowSkillsetToReadFileData: Boolean (Optional)
     *             pdfTextRotationAlgorithm: String(none/detectAngles) (Optional)
     *             executionEnvironment: String(standard/private) (Optional)
     *             queryTimeout: String (Optional)
     *              (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *         }
     *     }
     *     fieldMappings (Optional): [
     *          (Optional){
     *             sourceFieldName: String (Required)
     *             targetFieldName: String (Optional)
     *             mappingFunction (Optional): {
     *                 name: String (Required)
     *                 parameters (Optional): {
     *                     String: BinaryData (Required)
     *                 }
     *             }
     *         }
     *     ]
     *     outputFieldMappings (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     disabled: Boolean (Optional)
     *     &#64;odata.etag: String (Optional)
     *     encryptionKey (Optional): {
     *         keyVaultKeyName: String (Required)
     *         keyVaultKeyVersion: String (Optional)
     *         keyVaultUri: String (Required)
     *         accessCredentials (Optional): {
     *             applicationId: String (Required)
     *             applicationSecret: String (Optional)
     *         }
     *         identity (Optional): {
     *             &#64;odata.type: String (Required)
     *         }
     *     }
     *     cache (Optional): {
     *         storageConnectionString: String (Optional)
     *         enableReprocessing: Boolean (Optional)
     *         identity (Optional): (recursive schema, see identity above)
     *         id: String (Optional)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param indexer The definition of the indexer to create.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents an indexer along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createWithResponseAsync(BinaryData indexer, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.create(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), contentType, accept, indexer, requestOptions, context));
    }

    /**
     * Creates a new indexer.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     description: String (Optional)
     *     dataSourceName: String (Required)
     *     skillsetName: String (Optional)
     *     targetIndexName: String (Required)
     *     schedule (Optional): {
     *         interval: Duration (Required)
     *         startTime: OffsetDateTime (Optional)
     *     }
     *     parameters (Optional): {
     *         batchSize: Integer (Optional)
     *         maxFailedItems: Integer (Optional)
     *         maxFailedItemsPerBatch: Integer (Optional)
     *         configuration (Optional): {
     *             parsingMode: String(default/text/delimitedText/json/jsonArray/jsonLines/markdown) (Optional)
     *             excludedFileNameExtensions: String (Optional)
     *             indexedFileNameExtensions: String (Optional)
     *             failOnUnsupportedContentType: Boolean (Optional)
     *             failOnUnprocessableDocument: Boolean (Optional)
     *             indexStorageMetadataOnlyForOversizedDocuments: Boolean (Optional)
     *             delimitedTextHeaders: String (Optional)
     *             delimitedTextDelimiter: String (Optional)
     *             firstLineContainsHeaders: Boolean (Optional)
     *             markdownParsingSubmode: String(oneToMany/oneToOne) (Optional)
     *             markdownHeaderDepth: String(h1/h2/h3/h4/h5/h6) (Optional)
     *             documentRoot: String (Optional)
     *             dataToExtract: String(storageMetadata/allMetadata/contentAndMetadata) (Optional)
     *             imageAction: String(none/generateNormalizedImages/generateNormalizedImagePerPage) (Optional)
     *             allowSkillsetToReadFileData: Boolean (Optional)
     *             pdfTextRotationAlgorithm: String(none/detectAngles) (Optional)
     *             executionEnvironment: String(standard/private) (Optional)
     *             queryTimeout: String (Optional)
     *              (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *         }
     *     }
     *     fieldMappings (Optional): [
     *          (Optional){
     *             sourceFieldName: String (Required)
     *             targetFieldName: String (Optional)
     *             mappingFunction (Optional): {
     *                 name: String (Required)
     *                 parameters (Optional): {
     *                     String: BinaryData (Required)
     *                 }
     *             }
     *         }
     *     ]
     *     outputFieldMappings (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     disabled: Boolean (Optional)
     *     &#64;odata.etag: String (Optional)
     *     encryptionKey (Optional): {
     *         keyVaultKeyName: String (Required)
     *         keyVaultKeyVersion: String (Optional)
     *         keyVaultUri: String (Required)
     *         accessCredentials (Optional): {
     *             applicationId: String (Required)
     *             applicationSecret: String (Optional)
     *         }
     *         identity (Optional): {
     *             &#64;odata.type: String (Required)
     *         }
     *     }
     *     cache (Optional): {
     *         storageConnectionString: String (Optional)
     *         enableReprocessing: Boolean (Optional)
     *         identity (Optional): (recursive schema, see identity above)
     *         id: String (Optional)
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     description: String (Optional)
     *     dataSourceName: String (Required)
     *     skillsetName: String (Optional)
     *     targetIndexName: String (Required)
     *     schedule (Optional): {
     *         interval: Duration (Required)
     *         startTime: OffsetDateTime (Optional)
     *     }
     *     parameters (Optional): {
     *         batchSize: Integer (Optional)
     *         maxFailedItems: Integer (Optional)
     *         maxFailedItemsPerBatch: Integer (Optional)
     *         configuration (Optional): {
     *             parsingMode: String(default/text/delimitedText/json/jsonArray/jsonLines/markdown) (Optional)
     *             excludedFileNameExtensions: String (Optional)
     *             indexedFileNameExtensions: String (Optional)
     *             failOnUnsupportedContentType: Boolean (Optional)
     *             failOnUnprocessableDocument: Boolean (Optional)
     *             indexStorageMetadataOnlyForOversizedDocuments: Boolean (Optional)
     *             delimitedTextHeaders: String (Optional)
     *             delimitedTextDelimiter: String (Optional)
     *             firstLineContainsHeaders: Boolean (Optional)
     *             markdownParsingSubmode: String(oneToMany/oneToOne) (Optional)
     *             markdownHeaderDepth: String(h1/h2/h3/h4/h5/h6) (Optional)
     *             documentRoot: String (Optional)
     *             dataToExtract: String(storageMetadata/allMetadata/contentAndMetadata) (Optional)
     *             imageAction: String(none/generateNormalizedImages/generateNormalizedImagePerPage) (Optional)
     *             allowSkillsetToReadFileData: Boolean (Optional)
     *             pdfTextRotationAlgorithm: String(none/detectAngles) (Optional)
     *             executionEnvironment: String(standard/private) (Optional)
     *             queryTimeout: String (Optional)
     *              (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *         }
     *     }
     *     fieldMappings (Optional): [
     *          (Optional){
     *             sourceFieldName: String (Required)
     *             targetFieldName: String (Optional)
     *             mappingFunction (Optional): {
     *                 name: String (Required)
     *                 parameters (Optional): {
     *                     String: BinaryData (Required)
     *                 }
     *             }
     *         }
     *     ]
     *     outputFieldMappings (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     disabled: Boolean (Optional)
     *     &#64;odata.etag: String (Optional)
     *     encryptionKey (Optional): {
     *         keyVaultKeyName: String (Required)
     *         keyVaultKeyVersion: String (Optional)
     *         keyVaultUri: String (Required)
     *         accessCredentials (Optional): {
     *             applicationId: String (Required)
     *             applicationSecret: String (Optional)
     *         }
     *         identity (Optional): {
     *             &#64;odata.type: String (Required)
     *         }
     *     }
     *     cache (Optional): {
     *         storageConnectionString: String (Optional)
     *         enableReprocessing: Boolean (Optional)
     *         identity (Optional): (recursive schema, see identity above)
     *         id: String (Optional)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param indexer The definition of the indexer to create.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents an indexer along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createWithResponse(BinaryData indexer, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.createSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(), contentType,
            accept, indexer, requestOptions, Context.NONE);
    }

    /**
     * Returns the current status and execution history of an indexer.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     status: String(unknown/error/running) (Required)
     *     lastResult (Optional): {
     *         status: String(transientFailure/success/inProgress/reset) (Required)
     *         statusDetail: String(resetDocs) (Optional)
     *         currentState (Optional): {
     *             mode: String(indexingAllDocs/indexingResetDocs) (Optional)
     *             allDocsInitialChangeTrackingState: String (Optional)
     *             allDocsFinalChangeTrackingState: String (Optional)
     *             resetDocsInitialChangeTrackingState: String (Optional)
     *             resetDocsFinalChangeTrackingState: String (Optional)
     *             resetDocumentKeys (Optional): [
     *                 String (Optional)
     *             ]
     *             resetDatasourceDocumentIds (Optional): [
     *                 String (Optional)
     *             ]
     *         }
     *         errorMessage: String (Optional)
     *         startTime: OffsetDateTime (Optional)
     *         endTime: OffsetDateTime (Optional)
     *         errors (Required): [
     *              (Required){
     *                 key: String (Optional)
     *                 errorMessage: String (Required)
     *                 statusCode: int (Required)
     *                 name: String (Optional)
     *                 details: String (Optional)
     *                 documentationLink: String (Optional)
     *             }
     *         ]
     *         warnings (Required): [
     *              (Required){
     *                 key: String (Optional)
     *                 message: String (Required)
     *                 name: String (Optional)
     *                 details: String (Optional)
     *                 documentationLink: String (Optional)
     *             }
     *         ]
     *         itemsProcessed: int (Required)
     *         itemsFailed: int (Required)
     *         initialTrackingState: String (Optional)
     *         finalTrackingState: String (Optional)
     *     }
     *     executionHistory (Required): [
     *         (recursive schema, see above)
     *     ]
     *     limits (Required): {
     *         maxRunTime: Duration (Optional)
     *         maxDocumentExtractionSize: Long (Optional)
     *         maxDocumentContentCharactersToExtract: Long (Optional)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param indexerName The name of the indexer.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents the current status and execution history of an indexer along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getStatusWithResponseAsync(String indexerName, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getStatus(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), indexerName, accept, requestOptions, context));
    }

    /**
     * Returns the current status and execution history of an indexer.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     status: String(unknown/error/running) (Required)
     *     lastResult (Optional): {
     *         status: String(transientFailure/success/inProgress/reset) (Required)
     *         statusDetail: String(resetDocs) (Optional)
     *         currentState (Optional): {
     *             mode: String(indexingAllDocs/indexingResetDocs) (Optional)
     *             allDocsInitialChangeTrackingState: String (Optional)
     *             allDocsFinalChangeTrackingState: String (Optional)
     *             resetDocsInitialChangeTrackingState: String (Optional)
     *             resetDocsFinalChangeTrackingState: String (Optional)
     *             resetDocumentKeys (Optional): [
     *                 String (Optional)
     *             ]
     *             resetDatasourceDocumentIds (Optional): [
     *                 String (Optional)
     *             ]
     *         }
     *         errorMessage: String (Optional)
     *         startTime: OffsetDateTime (Optional)
     *         endTime: OffsetDateTime (Optional)
     *         errors (Required): [
     *              (Required){
     *                 key: String (Optional)
     *                 errorMessage: String (Required)
     *                 statusCode: int (Required)
     *                 name: String (Optional)
     *                 details: String (Optional)
     *                 documentationLink: String (Optional)
     *             }
     *         ]
     *         warnings (Required): [
     *              (Required){
     *                 key: String (Optional)
     *                 message: String (Required)
     *                 name: String (Optional)
     *                 details: String (Optional)
     *                 documentationLink: String (Optional)
     *             }
     *         ]
     *         itemsProcessed: int (Required)
     *         itemsFailed: int (Required)
     *         initialTrackingState: String (Optional)
     *         finalTrackingState: String (Optional)
     *     }
     *     executionHistory (Required): [
     *         (recursive schema, see above)
     *     ]
     *     limits (Required): {
     *         maxRunTime: Duration (Optional)
     *         maxDocumentExtractionSize: Long (Optional)
     *         maxDocumentContentCharactersToExtract: Long (Optional)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param indexerName The name of the indexer.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents the current status and execution history of an indexer along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getStatusWithResponse(String indexerName, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getStatusSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            indexerName, accept, requestOptions, Context.NONE);
    }
}
