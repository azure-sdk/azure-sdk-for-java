// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.search.documents.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Defines a function that boosts scores of documents with string values matching
 * a given list of tags.
 */
@Fluent
public final class TagScoringFunction extends ScoringFunction {
    /*
     * Type of ScoringFunction.
     */
    @Generated
    private String type = "tag";

    /*
     * Parameter values for the tag scoring function.
     */
    @Generated
    private final TagScoringParameters parameters;

    /**
     * Creates an instance of TagScoringFunction class.
     * 
     * @param fieldName the fieldName value to set.
     * @param boost the boost value to set.
     * @param parameters the parameters value to set.
     */
    @Generated
    public TagScoringFunction(String fieldName, double boost, TagScoringParameters parameters) {
        super(fieldName, boost);
        this.parameters = parameters;
    }

    /**
     * Get the type property: Type of ScoringFunction.
     * 
     * @return the type value.
     */
    @Generated
    @Override
    public String getType() {
        return this.type;
    }

    /**
     * Get the parameters property: Parameter values for the tag scoring function.
     * 
     * @return the parameters value.
     */
    @Generated
    public TagScoringParameters getParameters() {
        return this.parameters;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public TagScoringFunction setInterpolation(ScoringFunctionInterpolation interpolation) {
        super.setInterpolation(interpolation);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("fieldName", getFieldName());
        jsonWriter.writeDoubleField("boost", getBoost());
        jsonWriter.writeStringField("interpolation", getInterpolation() == null ? null : getInterpolation().toString());
        jsonWriter.writeJsonField("tag", this.parameters);
        jsonWriter.writeStringField("type", this.type);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TagScoringFunction from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TagScoringFunction if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TagScoringFunction.
     */
    @Generated
    public static TagScoringFunction fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String fieldName = null;
            double boost = 0.0;
            ScoringFunctionInterpolation interpolation = null;
            TagScoringParameters parameters = null;
            String type = "tag";
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String jsonFieldName = reader.getFieldName();
                reader.nextToken();

                if ("fieldName".equals(jsonFieldName)) {
                    fieldName = reader.getString();
                } else if ("boost".equals(jsonFieldName)) {
                    boost = reader.getDouble();
                } else if ("interpolation".equals(jsonFieldName)) {
                    interpolation = ScoringFunctionInterpolation.fromString(reader.getString());
                } else if ("tag".equals(jsonFieldName)) {
                    parameters = TagScoringParameters.fromJson(reader);
                } else if ("type".equals(jsonFieldName)) {
                    type = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            TagScoringFunction deserializedTagScoringFunction = new TagScoringFunction(fieldName, boost, parameters);
            deserializedTagScoringFunction.setInterpolation(interpolation);
            deserializedTagScoringFunction.type = type;

            return deserializedTagScoringFunction;
        });
    }
}
