// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.search.documents.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Base type for normalizers.
 */
@Immutable
public class LexicalNormalizer implements JsonSerializable<LexicalNormalizer> {
    /*
     * The discriminator for derived types.
     */
    @Generated
    private String odataType = "LexicalNormalizer";

    /*
     * The name of the char filter. It must only contain letters, digits, spaces,
     * dashes or underscores, can only start and end with alphanumeric characters, and
     * is limited to 128 characters.
     */
    @Generated
    private final String name;

    /**
     * Creates an instance of LexicalNormalizer class.
     * 
     * @param name the name value to set.
     */
    @Generated
    public LexicalNormalizer(String name) {
        this.name = name;
    }

    /**
     * Get the odataType property: The discriminator for derived types.
     * 
     * @return the odataType value.
     */
    @Generated
    public String getOdataType() {
        return this.odataType;
    }

    /**
     * Get the name property: The name of the char filter. It must only contain letters, digits, spaces,
     * dashes or underscores, can only start and end with alphanumeric characters, and
     * is limited to 128 characters.
     * 
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("@odata.type", this.odataType);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LexicalNormalizer from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LexicalNormalizer if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the LexicalNormalizer.
     */
    @Generated
    public static LexicalNormalizer fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("@odata.type".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("#Microsoft.Azure.Search.CustomNormalizer".equals(discriminatorValue)) {
                    return CustomNormalizer.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    @Generated
    static LexicalNormalizer fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String name = null;
            String odataType = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else if ("@odata.type".equals(fieldName)) {
                    odataType = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            LexicalNormalizer deserializedLexicalNormalizer = new LexicalNormalizer(name);
            deserializedLexicalNormalizer.odataType = odataType;

            return deserializedLexicalNormalizer;
        });
    }
}
