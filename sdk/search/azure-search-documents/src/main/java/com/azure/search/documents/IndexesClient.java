// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.search.documents;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.HttpHeaderName;
import com.azure.core.http.MatchConditions;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.search.documents.implementation.IndexesImpl;
import com.azure.search.documents.models.AnalyzeRequest;
import com.azure.search.documents.models.AnalyzeResult;
import com.azure.search.documents.models.GetIndexStatisticsResult;
import com.azure.search.documents.models.SearchIndex;

/**
 * Initializes a new instance of the synchronous SearchClient type.
 */
@ServiceClient(builder = SearchClientBuilder.class)
public final class IndexesClient {
    @Generated
    private final IndexesImpl serviceClient;

    /**
     * Initializes an instance of IndexesClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    IndexesClient(IndexesImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Creates a new search index.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     fields (Required): [
     *          (Required){
     *             name: String (Required)
     *             type: String(Edm.String/Edm.Int32/Edm.Int64/Edm.Double/Edm.Boolean/Edm.DateTimeOffset/Edm.GeographyPoint/Edm.ComplexType/Edm.Single/Edm.Half/Edm.Int16/Edm.SByte/Edm.Byte) (Required)
     *             key: Boolean (Optional)
     *             retrievable: Boolean (Optional)
     *             stored: Boolean (Optional)
     *             searchable: Boolean (Optional)
     *             filterable: Boolean (Optional)
     *             sortable: Boolean (Optional)
     *             facetable: Boolean (Optional)
     *             analyzer: String(ar.microsoft/ar.lucene/hy.lucene/bn.microsoft/eu.lucene/bg.microsoft/bg.lucene/ca.microsoft/ca.lucene/zh-Hans.microsoft/zh-Hans.lucene/zh-Hant.microsoft/zh-Hant.lucene/hr.microsoft/cs.microsoft/cs.lucene/da.microsoft/da.lucene/nl.microsoft/nl.lucene/en.microsoft/en.lucene/et.microsoft/fi.microsoft/fi.lucene/fr.microsoft/fr.lucene/gl.lucene/de.microsoft/de.lucene/el.microsoft/el.lucene/gu.microsoft/he.microsoft/hi.microsoft/hi.lucene/hu.microsoft/hu.lucene/is.microsoft/id.microsoft/id.lucene/ga.lucene/it.microsoft/it.lucene/ja.microsoft/ja.lucene/kn.microsoft/ko.microsoft/ko.lucene/lv.microsoft/lv.lucene/lt.microsoft/ml.microsoft/ms.microsoft/mr.microsoft/nb.microsoft/no.lucene/fa.lucene/pl.microsoft/pl.lucene/pt-BR.microsoft/pt-BR.lucene/pt-PT.microsoft/pt-PT.lucene/pa.microsoft/ro.microsoft/ro.lucene/ru.microsoft/ru.lucene/sr-cyrillic.microsoft/sr-latin.microsoft/sk.microsoft/sl.microsoft/es.microsoft/es.lucene/sv.microsoft/sv.lucene/ta.microsoft/te.microsoft/th.microsoft/th.lucene/tr.microsoft/tr.lucene/uk.microsoft/ur.microsoft/vi.microsoft/standard.lucene/standardasciifolding.lucene/keyword/pattern/simple/stop/whitespace) (Optional)
     *             searchAnalyzer: String(ar.microsoft/ar.lucene/hy.lucene/bn.microsoft/eu.lucene/bg.microsoft/bg.lucene/ca.microsoft/ca.lucene/zh-Hans.microsoft/zh-Hans.lucene/zh-Hant.microsoft/zh-Hant.lucene/hr.microsoft/cs.microsoft/cs.lucene/da.microsoft/da.lucene/nl.microsoft/nl.lucene/en.microsoft/en.lucene/et.microsoft/fi.microsoft/fi.lucene/fr.microsoft/fr.lucene/gl.lucene/de.microsoft/de.lucene/el.microsoft/el.lucene/gu.microsoft/he.microsoft/hi.microsoft/hi.lucene/hu.microsoft/hu.lucene/is.microsoft/id.microsoft/id.lucene/ga.lucene/it.microsoft/it.lucene/ja.microsoft/ja.lucene/kn.microsoft/ko.microsoft/ko.lucene/lv.microsoft/lv.lucene/lt.microsoft/ml.microsoft/ms.microsoft/mr.microsoft/nb.microsoft/no.lucene/fa.lucene/pl.microsoft/pl.lucene/pt-BR.microsoft/pt-BR.lucene/pt-PT.microsoft/pt-PT.lucene/pa.microsoft/ro.microsoft/ro.lucene/ru.microsoft/ru.lucene/sr-cyrillic.microsoft/sr-latin.microsoft/sk.microsoft/sl.microsoft/es.microsoft/es.lucene/sv.microsoft/sv.lucene/ta.microsoft/te.microsoft/th.microsoft/th.lucene/tr.microsoft/tr.lucene/uk.microsoft/ur.microsoft/vi.microsoft/standard.lucene/standardasciifolding.lucene/keyword/pattern/simple/stop/whitespace) (Optional)
     *             indexAnalyzer: String(ar.microsoft/ar.lucene/hy.lucene/bn.microsoft/eu.lucene/bg.microsoft/bg.lucene/ca.microsoft/ca.lucene/zh-Hans.microsoft/zh-Hans.lucene/zh-Hant.microsoft/zh-Hant.lucene/hr.microsoft/cs.microsoft/cs.lucene/da.microsoft/da.lucene/nl.microsoft/nl.lucene/en.microsoft/en.lucene/et.microsoft/fi.microsoft/fi.lucene/fr.microsoft/fr.lucene/gl.lucene/de.microsoft/de.lucene/el.microsoft/el.lucene/gu.microsoft/he.microsoft/hi.microsoft/hi.lucene/hu.microsoft/hu.lucene/is.microsoft/id.microsoft/id.lucene/ga.lucene/it.microsoft/it.lucene/ja.microsoft/ja.lucene/kn.microsoft/ko.microsoft/ko.lucene/lv.microsoft/lv.lucene/lt.microsoft/ml.microsoft/ms.microsoft/mr.microsoft/nb.microsoft/no.lucene/fa.lucene/pl.microsoft/pl.lucene/pt-BR.microsoft/pt-BR.lucene/pt-PT.microsoft/pt-PT.lucene/pa.microsoft/ro.microsoft/ro.lucene/ru.microsoft/ru.lucene/sr-cyrillic.microsoft/sr-latin.microsoft/sk.microsoft/sl.microsoft/es.microsoft/es.lucene/sv.microsoft/sv.lucene/ta.microsoft/te.microsoft/th.microsoft/th.lucene/tr.microsoft/tr.lucene/uk.microsoft/ur.microsoft/vi.microsoft/standard.lucene/standardasciifolding.lucene/keyword/pattern/simple/stop/whitespace) (Optional)
     *             normalizer: String(asciifolding/elision/lowercase/standard/uppercase) (Optional)
     *             dimensions: Integer (Optional)
     *             vectorSearchProfile: String (Optional)
     *             vectorEncoding: String(packedBit) (Optional)
     *             synonymMaps (Optional): [
     *                 String (Optional)
     *             ]
     *             fields (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *     ]
     *     scoringProfiles (Optional): [
     *          (Optional){
     *             name: String (Required)
     *             text (Optional): {
     *                 weights (Required): {
     *                     String: double (Required)
     *                 }
     *             }
     *             functions (Optional): [
     *                  (Optional){
     *                     type: String (Required)
     *                     fieldName: String (Required)
     *                     boost: double (Required)
     *                     interpolation: String(linear/constant/quadratic/logarithmic) (Optional)
     *                 }
     *             ]
     *             functionAggregation: String(sum/average/minimum/maximum/firstMatching) (Optional)
     *         }
     *     ]
     *     defaultScoringProfile: String (Optional)
     *     corsOptions (Optional): {
     *         allowedOrigins (Required): [
     *             String (Required)
     *         ]
     *         maxAgeInSeconds: Long (Optional)
     *     }
     *     suggesters (Optional): [
     *          (Optional){
     *             name: String (Required)
     *             searchMode: String (Required)
     *             sourceFields (Required): [
     *                 String (Required)
     *             ]
     *         }
     *     ]
     *     analyzers (Optional): [
     *          (Optional){
     *             &#64;odata.type: String (Required)
     *             name: String (Required)
     *         }
     *     ]
     *     tokenizers (Optional): [
     *          (Optional){
     *             &#64;odata.type: String (Required)
     *             name: String (Required)
     *         }
     *     ]
     *     tokenFilters (Optional): [
     *          (Optional){
     *             &#64;odata.type: String (Required)
     *             name: String (Required)
     *         }
     *     ]
     *     charFilters (Optional): [
     *          (Optional){
     *             &#64;odata.type: String (Required)
     *             name: String (Required)
     *         }
     *     ]
     *     normalizers (Optional): [
     *          (Optional){
     *             &#64;odata.type: String (Required)
     *             name: String (Required)
     *         }
     *     ]
     *     encryptionKey (Optional): {
     *         keyVaultKeyName: String (Required)
     *         keyVaultKeyVersion: String (Optional)
     *         keyVaultUri: String (Required)
     *         accessCredentials (Optional): {
     *             applicationId: String (Required)
     *             applicationSecret: String (Optional)
     *         }
     *         identity (Optional): {
     *             &#64;odata.type: String (Required)
     *         }
     *     }
     *     similarity (Optional): {
     *         &#64;odata.type: String (Required)
     *     }
     *     semantic (Optional): {
     *         defaultConfiguration: String (Optional)
     *         configurations (Optional): [
     *              (Optional){
     *                 name: String (Required)
     *                 prioritizedFields (Required): {
     *                     titleField (Optional): {
     *                         fieldName: String (Required)
     *                     }
     *                     prioritizedContentFields (Optional): [
     *                         (recursive schema, see above)
     *                     ]
     *                     prioritizedKeywordsFields (Optional): [
     *                         (recursive schema, see above)
     *                     ]
     *                 }
     *                 flightingOptIn: Boolean (Optional)
     *             }
     *         ]
     *     }
     *     vectorSearch (Optional): {
     *         profiles (Optional): [
     *              (Optional){
     *                 name: String (Required)
     *                 algorithm: String (Required)
     *                 vectorizer: String (Optional)
     *                 compression: String (Optional)
     *             }
     *         ]
     *         algorithms (Optional): [
     *              (Optional){
     *                 kind: String(hnsw/exhaustiveKnn) (Required)
     *                 name: String (Required)
     *             }
     *         ]
     *         vectorizers (Optional): [
     *              (Optional){
     *                 kind: String(azureOpenAI/customWebApi/aiServicesVision/aml) (Required)
     *                 name: String (Required)
     *             }
     *         ]
     *         compressions (Optional): [
     *              (Optional){
     *                 kind: String(scalarQuantization/binaryQuantization) (Required)
     *                 name: String (Required)
     *                 rerankWithOriginalVectors: Boolean (Optional)
     *                 defaultOversampling: Double (Optional)
     *                 rescoringOptions (Optional): {
     *                     enableRescoring: Boolean (Optional)
     *                     defaultOversampling: Double (Optional)
     *                     rescoreStorageMethod: String(preserveOriginals/discardOriginals) (Optional)
     *                 }
     *                 truncationDimension: Integer (Optional)
     *             }
     *         ]
     *     }
     *     &#64;odata.etag: String (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     fields (Required): [
     *          (Required){
     *             name: String (Required)
     *             type: String(Edm.String/Edm.Int32/Edm.Int64/Edm.Double/Edm.Boolean/Edm.DateTimeOffset/Edm.GeographyPoint/Edm.ComplexType/Edm.Single/Edm.Half/Edm.Int16/Edm.SByte/Edm.Byte) (Required)
     *             key: Boolean (Optional)
     *             retrievable: Boolean (Optional)
     *             stored: Boolean (Optional)
     *             searchable: Boolean (Optional)
     *             filterable: Boolean (Optional)
     *             sortable: Boolean (Optional)
     *             facetable: Boolean (Optional)
     *             analyzer: String(ar.microsoft/ar.lucene/hy.lucene/bn.microsoft/eu.lucene/bg.microsoft/bg.lucene/ca.microsoft/ca.lucene/zh-Hans.microsoft/zh-Hans.lucene/zh-Hant.microsoft/zh-Hant.lucene/hr.microsoft/cs.microsoft/cs.lucene/da.microsoft/da.lucene/nl.microsoft/nl.lucene/en.microsoft/en.lucene/et.microsoft/fi.microsoft/fi.lucene/fr.microsoft/fr.lucene/gl.lucene/de.microsoft/de.lucene/el.microsoft/el.lucene/gu.microsoft/he.microsoft/hi.microsoft/hi.lucene/hu.microsoft/hu.lucene/is.microsoft/id.microsoft/id.lucene/ga.lucene/it.microsoft/it.lucene/ja.microsoft/ja.lucene/kn.microsoft/ko.microsoft/ko.lucene/lv.microsoft/lv.lucene/lt.microsoft/ml.microsoft/ms.microsoft/mr.microsoft/nb.microsoft/no.lucene/fa.lucene/pl.microsoft/pl.lucene/pt-BR.microsoft/pt-BR.lucene/pt-PT.microsoft/pt-PT.lucene/pa.microsoft/ro.microsoft/ro.lucene/ru.microsoft/ru.lucene/sr-cyrillic.microsoft/sr-latin.microsoft/sk.microsoft/sl.microsoft/es.microsoft/es.lucene/sv.microsoft/sv.lucene/ta.microsoft/te.microsoft/th.microsoft/th.lucene/tr.microsoft/tr.lucene/uk.microsoft/ur.microsoft/vi.microsoft/standard.lucene/standardasciifolding.lucene/keyword/pattern/simple/stop/whitespace) (Optional)
     *             searchAnalyzer: String(ar.microsoft/ar.lucene/hy.lucene/bn.microsoft/eu.lucene/bg.microsoft/bg.lucene/ca.microsoft/ca.lucene/zh-Hans.microsoft/zh-Hans.lucene/zh-Hant.microsoft/zh-Hant.lucene/hr.microsoft/cs.microsoft/cs.lucene/da.microsoft/da.lucene/nl.microsoft/nl.lucene/en.microsoft/en.lucene/et.microsoft/fi.microsoft/fi.lucene/fr.microsoft/fr.lucene/gl.lucene/de.microsoft/de.lucene/el.microsoft/el.lucene/gu.microsoft/he.microsoft/hi.microsoft/hi.lucene/hu.microsoft/hu.lucene/is.microsoft/id.microsoft/id.lucene/ga.lucene/it.microsoft/it.lucene/ja.microsoft/ja.lucene/kn.microsoft/ko.microsoft/ko.lucene/lv.microsoft/lv.lucene/lt.microsoft/ml.microsoft/ms.microsoft/mr.microsoft/nb.microsoft/no.lucene/fa.lucene/pl.microsoft/pl.lucene/pt-BR.microsoft/pt-BR.lucene/pt-PT.microsoft/pt-PT.lucene/pa.microsoft/ro.microsoft/ro.lucene/ru.microsoft/ru.lucene/sr-cyrillic.microsoft/sr-latin.microsoft/sk.microsoft/sl.microsoft/es.microsoft/es.lucene/sv.microsoft/sv.lucene/ta.microsoft/te.microsoft/th.microsoft/th.lucene/tr.microsoft/tr.lucene/uk.microsoft/ur.microsoft/vi.microsoft/standard.lucene/standardasciifolding.lucene/keyword/pattern/simple/stop/whitespace) (Optional)
     *             indexAnalyzer: String(ar.microsoft/ar.lucene/hy.lucene/bn.microsoft/eu.lucene/bg.microsoft/bg.lucene/ca.microsoft/ca.lucene/zh-Hans.microsoft/zh-Hans.lucene/zh-Hant.microsoft/zh-Hant.lucene/hr.microsoft/cs.microsoft/cs.lucene/da.microsoft/da.lucene/nl.microsoft/nl.lucene/en.microsoft/en.lucene/et.microsoft/fi.microsoft/fi.lucene/fr.microsoft/fr.lucene/gl.lucene/de.microsoft/de.lucene/el.microsoft/el.lucene/gu.microsoft/he.microsoft/hi.microsoft/hi.lucene/hu.microsoft/hu.lucene/is.microsoft/id.microsoft/id.lucene/ga.lucene/it.microsoft/it.lucene/ja.microsoft/ja.lucene/kn.microsoft/ko.microsoft/ko.lucene/lv.microsoft/lv.lucene/lt.microsoft/ml.microsoft/ms.microsoft/mr.microsoft/nb.microsoft/no.lucene/fa.lucene/pl.microsoft/pl.lucene/pt-BR.microsoft/pt-BR.lucene/pt-PT.microsoft/pt-PT.lucene/pa.microsoft/ro.microsoft/ro.lucene/ru.microsoft/ru.lucene/sr-cyrillic.microsoft/sr-latin.microsoft/sk.microsoft/sl.microsoft/es.microsoft/es.lucene/sv.microsoft/sv.lucene/ta.microsoft/te.microsoft/th.microsoft/th.lucene/tr.microsoft/tr.lucene/uk.microsoft/ur.microsoft/vi.microsoft/standard.lucene/standardasciifolding.lucene/keyword/pattern/simple/stop/whitespace) (Optional)
     *             normalizer: String(asciifolding/elision/lowercase/standard/uppercase) (Optional)
     *             dimensions: Integer (Optional)
     *             vectorSearchProfile: String (Optional)
     *             vectorEncoding: String(packedBit) (Optional)
     *             synonymMaps (Optional): [
     *                 String (Optional)
     *             ]
     *             fields (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *     ]
     *     scoringProfiles (Optional): [
     *          (Optional){
     *             name: String (Required)
     *             text (Optional): {
     *                 weights (Required): {
     *                     String: double (Required)
     *                 }
     *             }
     *             functions (Optional): [
     *                  (Optional){
     *                     type: String (Required)
     *                     fieldName: String (Required)
     *                     boost: double (Required)
     *                     interpolation: String(linear/constant/quadratic/logarithmic) (Optional)
     *                 }
     *             ]
     *             functionAggregation: String(sum/average/minimum/maximum/firstMatching) (Optional)
     *         }
     *     ]
     *     defaultScoringProfile: String (Optional)
     *     corsOptions (Optional): {
     *         allowedOrigins (Required): [
     *             String (Required)
     *         ]
     *         maxAgeInSeconds: Long (Optional)
     *     }
     *     suggesters (Optional): [
     *          (Optional){
     *             name: String (Required)
     *             searchMode: String (Required)
     *             sourceFields (Required): [
     *                 String (Required)
     *             ]
     *         }
     *     ]
     *     analyzers (Optional): [
     *          (Optional){
     *             &#64;odata.type: String (Required)
     *             name: String (Required)
     *         }
     *     ]
     *     tokenizers (Optional): [
     *          (Optional){
     *             &#64;odata.type: String (Required)
     *             name: String (Required)
     *         }
     *     ]
     *     tokenFilters (Optional): [
     *          (Optional){
     *             &#64;odata.type: String (Required)
     *             name: String (Required)
     *         }
     *     ]
     *     charFilters (Optional): [
     *          (Optional){
     *             &#64;odata.type: String (Required)
     *             name: String (Required)
     *         }
     *     ]
     *     normalizers (Optional): [
     *          (Optional){
     *             &#64;odata.type: String (Required)
     *             name: String (Required)
     *         }
     *     ]
     *     encryptionKey (Optional): {
     *         keyVaultKeyName: String (Required)
     *         keyVaultKeyVersion: String (Optional)
     *         keyVaultUri: String (Required)
     *         accessCredentials (Optional): {
     *             applicationId: String (Required)
     *             applicationSecret: String (Optional)
     *         }
     *         identity (Optional): {
     *             &#64;odata.type: String (Required)
     *         }
     *     }
     *     similarity (Optional): {
     *         &#64;odata.type: String (Required)
     *     }
     *     semantic (Optional): {
     *         defaultConfiguration: String (Optional)
     *         configurations (Optional): [
     *              (Optional){
     *                 name: String (Required)
     *                 prioritizedFields (Required): {
     *                     titleField (Optional): {
     *                         fieldName: String (Required)
     *                     }
     *                     prioritizedContentFields (Optional): [
     *                         (recursive schema, see above)
     *                     ]
     *                     prioritizedKeywordsFields (Optional): [
     *                         (recursive schema, see above)
     *                     ]
     *                 }
     *                 flightingOptIn: Boolean (Optional)
     *             }
     *         ]
     *     }
     *     vectorSearch (Optional): {
     *         profiles (Optional): [
     *              (Optional){
     *                 name: String (Required)
     *                 algorithm: String (Required)
     *                 vectorizer: String (Optional)
     *                 compression: String (Optional)
     *             }
     *         ]
     *         algorithms (Optional): [
     *              (Optional){
     *                 kind: String(hnsw/exhaustiveKnn) (Required)
     *                 name: String (Required)
     *             }
     *         ]
     *         vectorizers (Optional): [
     *              (Optional){
     *                 kind: String(azureOpenAI/customWebApi/aiServicesVision/aml) (Required)
     *                 name: String (Required)
     *             }
     *         ]
     *         compressions (Optional): [
     *              (Optional){
     *                 kind: String(scalarQuantization/binaryQuantization) (Required)
     *                 name: String (Required)
     *                 rerankWithOriginalVectors: Boolean (Optional)
     *                 defaultOversampling: Double (Optional)
     *                 rescoringOptions (Optional): {
     *                     enableRescoring: Boolean (Optional)
     *                     defaultOversampling: Double (Optional)
     *                     rescoreStorageMethod: String(preserveOriginals/discardOriginals) (Optional)
     *                 }
     *                 truncationDimension: Integer (Optional)
     *             }
     *         ]
     *     }
     *     &#64;odata.etag: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param index The definition of the index to create.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents a search index definition, which describes the fields and search
     * behavior of an index along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createWithResponse(BinaryData index, RequestOptions requestOptions) {
        return this.serviceClient.createWithResponse(index, requestOptions);
    }

    /**
     * Lists all indexes available for a search service.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>$select</td><td>String</td><td>No</td><td>Selects which top-level properties to retrieve.
     * Specified as a comma-separated list of JSON property names,
     * or '*' for all properties. The default is all properties.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     fields (Required): [
     *          (Required){
     *             name: String (Required)
     *             type: String(Edm.String/Edm.Int32/Edm.Int64/Edm.Double/Edm.Boolean/Edm.DateTimeOffset/Edm.GeographyPoint/Edm.ComplexType/Edm.Single/Edm.Half/Edm.Int16/Edm.SByte/Edm.Byte) (Required)
     *             key: Boolean (Optional)
     *             retrievable: Boolean (Optional)
     *             stored: Boolean (Optional)
     *             searchable: Boolean (Optional)
     *             filterable: Boolean (Optional)
     *             sortable: Boolean (Optional)
     *             facetable: Boolean (Optional)
     *             analyzer: String(ar.microsoft/ar.lucene/hy.lucene/bn.microsoft/eu.lucene/bg.microsoft/bg.lucene/ca.microsoft/ca.lucene/zh-Hans.microsoft/zh-Hans.lucene/zh-Hant.microsoft/zh-Hant.lucene/hr.microsoft/cs.microsoft/cs.lucene/da.microsoft/da.lucene/nl.microsoft/nl.lucene/en.microsoft/en.lucene/et.microsoft/fi.microsoft/fi.lucene/fr.microsoft/fr.lucene/gl.lucene/de.microsoft/de.lucene/el.microsoft/el.lucene/gu.microsoft/he.microsoft/hi.microsoft/hi.lucene/hu.microsoft/hu.lucene/is.microsoft/id.microsoft/id.lucene/ga.lucene/it.microsoft/it.lucene/ja.microsoft/ja.lucene/kn.microsoft/ko.microsoft/ko.lucene/lv.microsoft/lv.lucene/lt.microsoft/ml.microsoft/ms.microsoft/mr.microsoft/nb.microsoft/no.lucene/fa.lucene/pl.microsoft/pl.lucene/pt-BR.microsoft/pt-BR.lucene/pt-PT.microsoft/pt-PT.lucene/pa.microsoft/ro.microsoft/ro.lucene/ru.microsoft/ru.lucene/sr-cyrillic.microsoft/sr-latin.microsoft/sk.microsoft/sl.microsoft/es.microsoft/es.lucene/sv.microsoft/sv.lucene/ta.microsoft/te.microsoft/th.microsoft/th.lucene/tr.microsoft/tr.lucene/uk.microsoft/ur.microsoft/vi.microsoft/standard.lucene/standardasciifolding.lucene/keyword/pattern/simple/stop/whitespace) (Optional)
     *             searchAnalyzer: String(ar.microsoft/ar.lucene/hy.lucene/bn.microsoft/eu.lucene/bg.microsoft/bg.lucene/ca.microsoft/ca.lucene/zh-Hans.microsoft/zh-Hans.lucene/zh-Hant.microsoft/zh-Hant.lucene/hr.microsoft/cs.microsoft/cs.lucene/da.microsoft/da.lucene/nl.microsoft/nl.lucene/en.microsoft/en.lucene/et.microsoft/fi.microsoft/fi.lucene/fr.microsoft/fr.lucene/gl.lucene/de.microsoft/de.lucene/el.microsoft/el.lucene/gu.microsoft/he.microsoft/hi.microsoft/hi.lucene/hu.microsoft/hu.lucene/is.microsoft/id.microsoft/id.lucene/ga.lucene/it.microsoft/it.lucene/ja.microsoft/ja.lucene/kn.microsoft/ko.microsoft/ko.lucene/lv.microsoft/lv.lucene/lt.microsoft/ml.microsoft/ms.microsoft/mr.microsoft/nb.microsoft/no.lucene/fa.lucene/pl.microsoft/pl.lucene/pt-BR.microsoft/pt-BR.lucene/pt-PT.microsoft/pt-PT.lucene/pa.microsoft/ro.microsoft/ro.lucene/ru.microsoft/ru.lucene/sr-cyrillic.microsoft/sr-latin.microsoft/sk.microsoft/sl.microsoft/es.microsoft/es.lucene/sv.microsoft/sv.lucene/ta.microsoft/te.microsoft/th.microsoft/th.lucene/tr.microsoft/tr.lucene/uk.microsoft/ur.microsoft/vi.microsoft/standard.lucene/standardasciifolding.lucene/keyword/pattern/simple/stop/whitespace) (Optional)
     *             indexAnalyzer: String(ar.microsoft/ar.lucene/hy.lucene/bn.microsoft/eu.lucene/bg.microsoft/bg.lucene/ca.microsoft/ca.lucene/zh-Hans.microsoft/zh-Hans.lucene/zh-Hant.microsoft/zh-Hant.lucene/hr.microsoft/cs.microsoft/cs.lucene/da.microsoft/da.lucene/nl.microsoft/nl.lucene/en.microsoft/en.lucene/et.microsoft/fi.microsoft/fi.lucene/fr.microsoft/fr.lucene/gl.lucene/de.microsoft/de.lucene/el.microsoft/el.lucene/gu.microsoft/he.microsoft/hi.microsoft/hi.lucene/hu.microsoft/hu.lucene/is.microsoft/id.microsoft/id.lucene/ga.lucene/it.microsoft/it.lucene/ja.microsoft/ja.lucene/kn.microsoft/ko.microsoft/ko.lucene/lv.microsoft/lv.lucene/lt.microsoft/ml.microsoft/ms.microsoft/mr.microsoft/nb.microsoft/no.lucene/fa.lucene/pl.microsoft/pl.lucene/pt-BR.microsoft/pt-BR.lucene/pt-PT.microsoft/pt-PT.lucene/pa.microsoft/ro.microsoft/ro.lucene/ru.microsoft/ru.lucene/sr-cyrillic.microsoft/sr-latin.microsoft/sk.microsoft/sl.microsoft/es.microsoft/es.lucene/sv.microsoft/sv.lucene/ta.microsoft/te.microsoft/th.microsoft/th.lucene/tr.microsoft/tr.lucene/uk.microsoft/ur.microsoft/vi.microsoft/standard.lucene/standardasciifolding.lucene/keyword/pattern/simple/stop/whitespace) (Optional)
     *             normalizer: String(asciifolding/elision/lowercase/standard/uppercase) (Optional)
     *             dimensions: Integer (Optional)
     *             vectorSearchProfile: String (Optional)
     *             vectorEncoding: String(packedBit) (Optional)
     *             synonymMaps (Optional): [
     *                 String (Optional)
     *             ]
     *             fields (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *     ]
     *     scoringProfiles (Optional): [
     *          (Optional){
     *             name: String (Required)
     *             text (Optional): {
     *                 weights (Required): {
     *                     String: double (Required)
     *                 }
     *             }
     *             functions (Optional): [
     *                  (Optional){
     *                     type: String (Required)
     *                     fieldName: String (Required)
     *                     boost: double (Required)
     *                     interpolation: String(linear/constant/quadratic/logarithmic) (Optional)
     *                 }
     *             ]
     *             functionAggregation: String(sum/average/minimum/maximum/firstMatching) (Optional)
     *         }
     *     ]
     *     defaultScoringProfile: String (Optional)
     *     corsOptions (Optional): {
     *         allowedOrigins (Required): [
     *             String (Required)
     *         ]
     *         maxAgeInSeconds: Long (Optional)
     *     }
     *     suggesters (Optional): [
     *          (Optional){
     *             name: String (Required)
     *             searchMode: String (Required)
     *             sourceFields (Required): [
     *                 String (Required)
     *             ]
     *         }
     *     ]
     *     analyzers (Optional): [
     *          (Optional){
     *             &#64;odata.type: String (Required)
     *             name: String (Required)
     *         }
     *     ]
     *     tokenizers (Optional): [
     *          (Optional){
     *             &#64;odata.type: String (Required)
     *             name: String (Required)
     *         }
     *     ]
     *     tokenFilters (Optional): [
     *          (Optional){
     *             &#64;odata.type: String (Required)
     *             name: String (Required)
     *         }
     *     ]
     *     charFilters (Optional): [
     *          (Optional){
     *             &#64;odata.type: String (Required)
     *             name: String (Required)
     *         }
     *     ]
     *     normalizers (Optional): [
     *          (Optional){
     *             &#64;odata.type: String (Required)
     *             name: String (Required)
     *         }
     *     ]
     *     encryptionKey (Optional): {
     *         keyVaultKeyName: String (Required)
     *         keyVaultKeyVersion: String (Optional)
     *         keyVaultUri: String (Required)
     *         accessCredentials (Optional): {
     *             applicationId: String (Required)
     *             applicationSecret: String (Optional)
     *         }
     *         identity (Optional): {
     *             &#64;odata.type: String (Required)
     *         }
     *     }
     *     similarity (Optional): {
     *         &#64;odata.type: String (Required)
     *     }
     *     semantic (Optional): {
     *         defaultConfiguration: String (Optional)
     *         configurations (Optional): [
     *              (Optional){
     *                 name: String (Required)
     *                 prioritizedFields (Required): {
     *                     titleField (Optional): {
     *                         fieldName: String (Required)
     *                     }
     *                     prioritizedContentFields (Optional): [
     *                         (recursive schema, see above)
     *                     ]
     *                     prioritizedKeywordsFields (Optional): [
     *                         (recursive schema, see above)
     *                     ]
     *                 }
     *                 flightingOptIn: Boolean (Optional)
     *             }
     *         ]
     *     }
     *     vectorSearch (Optional): {
     *         profiles (Optional): [
     *              (Optional){
     *                 name: String (Required)
     *                 algorithm: String (Required)
     *                 vectorizer: String (Optional)
     *                 compression: String (Optional)
     *             }
     *         ]
     *         algorithms (Optional): [
     *              (Optional){
     *                 kind: String(hnsw/exhaustiveKnn) (Required)
     *                 name: String (Required)
     *             }
     *         ]
     *         vectorizers (Optional): [
     *              (Optional){
     *                 kind: String(azureOpenAI/customWebApi/aiServicesVision/aml) (Required)
     *                 name: String (Required)
     *             }
     *         ]
     *         compressions (Optional): [
     *              (Optional){
     *                 kind: String(scalarQuantization/binaryQuantization) (Required)
     *                 name: String (Required)
     *                 rerankWithOriginalVectors: Boolean (Optional)
     *                 defaultOversampling: Double (Optional)
     *                 rescoringOptions (Optional): {
     *                     enableRescoring: Boolean (Optional)
     *                     defaultOversampling: Double (Optional)
     *                     rescoreStorageMethod: String(preserveOriginals/discardOriginals) (Optional)
     *                 }
     *                 truncationDimension: Integer (Optional)
     *             }
     *         ]
     *     }
     *     &#64;odata.etag: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response from a List Indexes request as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> list(RequestOptions requestOptions) {
        return this.serviceClient.list(requestOptions);
    }

    /**
     * Creates a new search index or updates an index if it already exists.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>allowIndexDowntime</td><td>Boolean</td><td>No</td><td>Allows new analyzers, tokenizers, token filters, or
     * char filters to be added to
     * an index by taking the index offline for at least a few seconds. This
     * temporarily causes indexing and query requests to fail. Performance and write
     * availability of the index can be impaired for several minutes after the index
     * is updated, or longer for very large indexes.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>Defines the If-Match condition. The operation will be
     * performed only if the ETag on the server matches this value.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>Defines the If-None-Match condition. The operation will
     * be performed only if the ETag on the server does not match this value.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     fields (Required): [
     *          (Required){
     *             name: String (Required)
     *             type: String(Edm.String/Edm.Int32/Edm.Int64/Edm.Double/Edm.Boolean/Edm.DateTimeOffset/Edm.GeographyPoint/Edm.ComplexType/Edm.Single/Edm.Half/Edm.Int16/Edm.SByte/Edm.Byte) (Required)
     *             key: Boolean (Optional)
     *             retrievable: Boolean (Optional)
     *             stored: Boolean (Optional)
     *             searchable: Boolean (Optional)
     *             filterable: Boolean (Optional)
     *             sortable: Boolean (Optional)
     *             facetable: Boolean (Optional)
     *             analyzer: String(ar.microsoft/ar.lucene/hy.lucene/bn.microsoft/eu.lucene/bg.microsoft/bg.lucene/ca.microsoft/ca.lucene/zh-Hans.microsoft/zh-Hans.lucene/zh-Hant.microsoft/zh-Hant.lucene/hr.microsoft/cs.microsoft/cs.lucene/da.microsoft/da.lucene/nl.microsoft/nl.lucene/en.microsoft/en.lucene/et.microsoft/fi.microsoft/fi.lucene/fr.microsoft/fr.lucene/gl.lucene/de.microsoft/de.lucene/el.microsoft/el.lucene/gu.microsoft/he.microsoft/hi.microsoft/hi.lucene/hu.microsoft/hu.lucene/is.microsoft/id.microsoft/id.lucene/ga.lucene/it.microsoft/it.lucene/ja.microsoft/ja.lucene/kn.microsoft/ko.microsoft/ko.lucene/lv.microsoft/lv.lucene/lt.microsoft/ml.microsoft/ms.microsoft/mr.microsoft/nb.microsoft/no.lucene/fa.lucene/pl.microsoft/pl.lucene/pt-BR.microsoft/pt-BR.lucene/pt-PT.microsoft/pt-PT.lucene/pa.microsoft/ro.microsoft/ro.lucene/ru.microsoft/ru.lucene/sr-cyrillic.microsoft/sr-latin.microsoft/sk.microsoft/sl.microsoft/es.microsoft/es.lucene/sv.microsoft/sv.lucene/ta.microsoft/te.microsoft/th.microsoft/th.lucene/tr.microsoft/tr.lucene/uk.microsoft/ur.microsoft/vi.microsoft/standard.lucene/standardasciifolding.lucene/keyword/pattern/simple/stop/whitespace) (Optional)
     *             searchAnalyzer: String(ar.microsoft/ar.lucene/hy.lucene/bn.microsoft/eu.lucene/bg.microsoft/bg.lucene/ca.microsoft/ca.lucene/zh-Hans.microsoft/zh-Hans.lucene/zh-Hant.microsoft/zh-Hant.lucene/hr.microsoft/cs.microsoft/cs.lucene/da.microsoft/da.lucene/nl.microsoft/nl.lucene/en.microsoft/en.lucene/et.microsoft/fi.microsoft/fi.lucene/fr.microsoft/fr.lucene/gl.lucene/de.microsoft/de.lucene/el.microsoft/el.lucene/gu.microsoft/he.microsoft/hi.microsoft/hi.lucene/hu.microsoft/hu.lucene/is.microsoft/id.microsoft/id.lucene/ga.lucene/it.microsoft/it.lucene/ja.microsoft/ja.lucene/kn.microsoft/ko.microsoft/ko.lucene/lv.microsoft/lv.lucene/lt.microsoft/ml.microsoft/ms.microsoft/mr.microsoft/nb.microsoft/no.lucene/fa.lucene/pl.microsoft/pl.lucene/pt-BR.microsoft/pt-BR.lucene/pt-PT.microsoft/pt-PT.lucene/pa.microsoft/ro.microsoft/ro.lucene/ru.microsoft/ru.lucene/sr-cyrillic.microsoft/sr-latin.microsoft/sk.microsoft/sl.microsoft/es.microsoft/es.lucene/sv.microsoft/sv.lucene/ta.microsoft/te.microsoft/th.microsoft/th.lucene/tr.microsoft/tr.lucene/uk.microsoft/ur.microsoft/vi.microsoft/standard.lucene/standardasciifolding.lucene/keyword/pattern/simple/stop/whitespace) (Optional)
     *             indexAnalyzer: String(ar.microsoft/ar.lucene/hy.lucene/bn.microsoft/eu.lucene/bg.microsoft/bg.lucene/ca.microsoft/ca.lucene/zh-Hans.microsoft/zh-Hans.lucene/zh-Hant.microsoft/zh-Hant.lucene/hr.microsoft/cs.microsoft/cs.lucene/da.microsoft/da.lucene/nl.microsoft/nl.lucene/en.microsoft/en.lucene/et.microsoft/fi.microsoft/fi.lucene/fr.microsoft/fr.lucene/gl.lucene/de.microsoft/de.lucene/el.microsoft/el.lucene/gu.microsoft/he.microsoft/hi.microsoft/hi.lucene/hu.microsoft/hu.lucene/is.microsoft/id.microsoft/id.lucene/ga.lucene/it.microsoft/it.lucene/ja.microsoft/ja.lucene/kn.microsoft/ko.microsoft/ko.lucene/lv.microsoft/lv.lucene/lt.microsoft/ml.microsoft/ms.microsoft/mr.microsoft/nb.microsoft/no.lucene/fa.lucene/pl.microsoft/pl.lucene/pt-BR.microsoft/pt-BR.lucene/pt-PT.microsoft/pt-PT.lucene/pa.microsoft/ro.microsoft/ro.lucene/ru.microsoft/ru.lucene/sr-cyrillic.microsoft/sr-latin.microsoft/sk.microsoft/sl.microsoft/es.microsoft/es.lucene/sv.microsoft/sv.lucene/ta.microsoft/te.microsoft/th.microsoft/th.lucene/tr.microsoft/tr.lucene/uk.microsoft/ur.microsoft/vi.microsoft/standard.lucene/standardasciifolding.lucene/keyword/pattern/simple/stop/whitespace) (Optional)
     *             normalizer: String(asciifolding/elision/lowercase/standard/uppercase) (Optional)
     *             dimensions: Integer (Optional)
     *             vectorSearchProfile: String (Optional)
     *             vectorEncoding: String(packedBit) (Optional)
     *             synonymMaps (Optional): [
     *                 String (Optional)
     *             ]
     *             fields (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *     ]
     *     scoringProfiles (Optional): [
     *          (Optional){
     *             name: String (Required)
     *             text (Optional): {
     *                 weights (Required): {
     *                     String: double (Required)
     *                 }
     *             }
     *             functions (Optional): [
     *                  (Optional){
     *                     type: String (Required)
     *                     fieldName: String (Required)
     *                     boost: double (Required)
     *                     interpolation: String(linear/constant/quadratic/logarithmic) (Optional)
     *                 }
     *             ]
     *             functionAggregation: String(sum/average/minimum/maximum/firstMatching) (Optional)
     *         }
     *     ]
     *     defaultScoringProfile: String (Optional)
     *     corsOptions (Optional): {
     *         allowedOrigins (Required): [
     *             String (Required)
     *         ]
     *         maxAgeInSeconds: Long (Optional)
     *     }
     *     suggesters (Optional): [
     *          (Optional){
     *             name: String (Required)
     *             searchMode: String (Required)
     *             sourceFields (Required): [
     *                 String (Required)
     *             ]
     *         }
     *     ]
     *     analyzers (Optional): [
     *          (Optional){
     *             &#64;odata.type: String (Required)
     *             name: String (Required)
     *         }
     *     ]
     *     tokenizers (Optional): [
     *          (Optional){
     *             &#64;odata.type: String (Required)
     *             name: String (Required)
     *         }
     *     ]
     *     tokenFilters (Optional): [
     *          (Optional){
     *             &#64;odata.type: String (Required)
     *             name: String (Required)
     *         }
     *     ]
     *     charFilters (Optional): [
     *          (Optional){
     *             &#64;odata.type: String (Required)
     *             name: String (Required)
     *         }
     *     ]
     *     normalizers (Optional): [
     *          (Optional){
     *             &#64;odata.type: String (Required)
     *             name: String (Required)
     *         }
     *     ]
     *     encryptionKey (Optional): {
     *         keyVaultKeyName: String (Required)
     *         keyVaultKeyVersion: String (Optional)
     *         keyVaultUri: String (Required)
     *         accessCredentials (Optional): {
     *             applicationId: String (Required)
     *             applicationSecret: String (Optional)
     *         }
     *         identity (Optional): {
     *             &#64;odata.type: String (Required)
     *         }
     *     }
     *     similarity (Optional): {
     *         &#64;odata.type: String (Required)
     *     }
     *     semantic (Optional): {
     *         defaultConfiguration: String (Optional)
     *         configurations (Optional): [
     *              (Optional){
     *                 name: String (Required)
     *                 prioritizedFields (Required): {
     *                     titleField (Optional): {
     *                         fieldName: String (Required)
     *                     }
     *                     prioritizedContentFields (Optional): [
     *                         (recursive schema, see above)
     *                     ]
     *                     prioritizedKeywordsFields (Optional): [
     *                         (recursive schema, see above)
     *                     ]
     *                 }
     *                 flightingOptIn: Boolean (Optional)
     *             }
     *         ]
     *     }
     *     vectorSearch (Optional): {
     *         profiles (Optional): [
     *              (Optional){
     *                 name: String (Required)
     *                 algorithm: String (Required)
     *                 vectorizer: String (Optional)
     *                 compression: String (Optional)
     *             }
     *         ]
     *         algorithms (Optional): [
     *              (Optional){
     *                 kind: String(hnsw/exhaustiveKnn) (Required)
     *                 name: String (Required)
     *             }
     *         ]
     *         vectorizers (Optional): [
     *              (Optional){
     *                 kind: String(azureOpenAI/customWebApi/aiServicesVision/aml) (Required)
     *                 name: String (Required)
     *             }
     *         ]
     *         compressions (Optional): [
     *              (Optional){
     *                 kind: String(scalarQuantization/binaryQuantization) (Required)
     *                 name: String (Required)
     *                 rerankWithOriginalVectors: Boolean (Optional)
     *                 defaultOversampling: Double (Optional)
     *                 rescoringOptions (Optional): {
     *                     enableRescoring: Boolean (Optional)
     *                     defaultOversampling: Double (Optional)
     *                     rescoreStorageMethod: String(preserveOriginals/discardOriginals) (Optional)
     *                 }
     *                 truncationDimension: Integer (Optional)
     *             }
     *         ]
     *     }
     *     &#64;odata.etag: String (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     fields (Required): [
     *          (Required){
     *             name: String (Required)
     *             type: String(Edm.String/Edm.Int32/Edm.Int64/Edm.Double/Edm.Boolean/Edm.DateTimeOffset/Edm.GeographyPoint/Edm.ComplexType/Edm.Single/Edm.Half/Edm.Int16/Edm.SByte/Edm.Byte) (Required)
     *             key: Boolean (Optional)
     *             retrievable: Boolean (Optional)
     *             stored: Boolean (Optional)
     *             searchable: Boolean (Optional)
     *             filterable: Boolean (Optional)
     *             sortable: Boolean (Optional)
     *             facetable: Boolean (Optional)
     *             analyzer: String(ar.microsoft/ar.lucene/hy.lucene/bn.microsoft/eu.lucene/bg.microsoft/bg.lucene/ca.microsoft/ca.lucene/zh-Hans.microsoft/zh-Hans.lucene/zh-Hant.microsoft/zh-Hant.lucene/hr.microsoft/cs.microsoft/cs.lucene/da.microsoft/da.lucene/nl.microsoft/nl.lucene/en.microsoft/en.lucene/et.microsoft/fi.microsoft/fi.lucene/fr.microsoft/fr.lucene/gl.lucene/de.microsoft/de.lucene/el.microsoft/el.lucene/gu.microsoft/he.microsoft/hi.microsoft/hi.lucene/hu.microsoft/hu.lucene/is.microsoft/id.microsoft/id.lucene/ga.lucene/it.microsoft/it.lucene/ja.microsoft/ja.lucene/kn.microsoft/ko.microsoft/ko.lucene/lv.microsoft/lv.lucene/lt.microsoft/ml.microsoft/ms.microsoft/mr.microsoft/nb.microsoft/no.lucene/fa.lucene/pl.microsoft/pl.lucene/pt-BR.microsoft/pt-BR.lucene/pt-PT.microsoft/pt-PT.lucene/pa.microsoft/ro.microsoft/ro.lucene/ru.microsoft/ru.lucene/sr-cyrillic.microsoft/sr-latin.microsoft/sk.microsoft/sl.microsoft/es.microsoft/es.lucene/sv.microsoft/sv.lucene/ta.microsoft/te.microsoft/th.microsoft/th.lucene/tr.microsoft/tr.lucene/uk.microsoft/ur.microsoft/vi.microsoft/standard.lucene/standardasciifolding.lucene/keyword/pattern/simple/stop/whitespace) (Optional)
     *             searchAnalyzer: String(ar.microsoft/ar.lucene/hy.lucene/bn.microsoft/eu.lucene/bg.microsoft/bg.lucene/ca.microsoft/ca.lucene/zh-Hans.microsoft/zh-Hans.lucene/zh-Hant.microsoft/zh-Hant.lucene/hr.microsoft/cs.microsoft/cs.lucene/da.microsoft/da.lucene/nl.microsoft/nl.lucene/en.microsoft/en.lucene/et.microsoft/fi.microsoft/fi.lucene/fr.microsoft/fr.lucene/gl.lucene/de.microsoft/de.lucene/el.microsoft/el.lucene/gu.microsoft/he.microsoft/hi.microsoft/hi.lucene/hu.microsoft/hu.lucene/is.microsoft/id.microsoft/id.lucene/ga.lucene/it.microsoft/it.lucene/ja.microsoft/ja.lucene/kn.microsoft/ko.microsoft/ko.lucene/lv.microsoft/lv.lucene/lt.microsoft/ml.microsoft/ms.microsoft/mr.microsoft/nb.microsoft/no.lucene/fa.lucene/pl.microsoft/pl.lucene/pt-BR.microsoft/pt-BR.lucene/pt-PT.microsoft/pt-PT.lucene/pa.microsoft/ro.microsoft/ro.lucene/ru.microsoft/ru.lucene/sr-cyrillic.microsoft/sr-latin.microsoft/sk.microsoft/sl.microsoft/es.microsoft/es.lucene/sv.microsoft/sv.lucene/ta.microsoft/te.microsoft/th.microsoft/th.lucene/tr.microsoft/tr.lucene/uk.microsoft/ur.microsoft/vi.microsoft/standard.lucene/standardasciifolding.lucene/keyword/pattern/simple/stop/whitespace) (Optional)
     *             indexAnalyzer: String(ar.microsoft/ar.lucene/hy.lucene/bn.microsoft/eu.lucene/bg.microsoft/bg.lucene/ca.microsoft/ca.lucene/zh-Hans.microsoft/zh-Hans.lucene/zh-Hant.microsoft/zh-Hant.lucene/hr.microsoft/cs.microsoft/cs.lucene/da.microsoft/da.lucene/nl.microsoft/nl.lucene/en.microsoft/en.lucene/et.microsoft/fi.microsoft/fi.lucene/fr.microsoft/fr.lucene/gl.lucene/de.microsoft/de.lucene/el.microsoft/el.lucene/gu.microsoft/he.microsoft/hi.microsoft/hi.lucene/hu.microsoft/hu.lucene/is.microsoft/id.microsoft/id.lucene/ga.lucene/it.microsoft/it.lucene/ja.microsoft/ja.lucene/kn.microsoft/ko.microsoft/ko.lucene/lv.microsoft/lv.lucene/lt.microsoft/ml.microsoft/ms.microsoft/mr.microsoft/nb.microsoft/no.lucene/fa.lucene/pl.microsoft/pl.lucene/pt-BR.microsoft/pt-BR.lucene/pt-PT.microsoft/pt-PT.lucene/pa.microsoft/ro.microsoft/ro.lucene/ru.microsoft/ru.lucene/sr-cyrillic.microsoft/sr-latin.microsoft/sk.microsoft/sl.microsoft/es.microsoft/es.lucene/sv.microsoft/sv.lucene/ta.microsoft/te.microsoft/th.microsoft/th.lucene/tr.microsoft/tr.lucene/uk.microsoft/ur.microsoft/vi.microsoft/standard.lucene/standardasciifolding.lucene/keyword/pattern/simple/stop/whitespace) (Optional)
     *             normalizer: String(asciifolding/elision/lowercase/standard/uppercase) (Optional)
     *             dimensions: Integer (Optional)
     *             vectorSearchProfile: String (Optional)
     *             vectorEncoding: String(packedBit) (Optional)
     *             synonymMaps (Optional): [
     *                 String (Optional)
     *             ]
     *             fields (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *     ]
     *     scoringProfiles (Optional): [
     *          (Optional){
     *             name: String (Required)
     *             text (Optional): {
     *                 weights (Required): {
     *                     String: double (Required)
     *                 }
     *             }
     *             functions (Optional): [
     *                  (Optional){
     *                     type: String (Required)
     *                     fieldName: String (Required)
     *                     boost: double (Required)
     *                     interpolation: String(linear/constant/quadratic/logarithmic) (Optional)
     *                 }
     *             ]
     *             functionAggregation: String(sum/average/minimum/maximum/firstMatching) (Optional)
     *         }
     *     ]
     *     defaultScoringProfile: String (Optional)
     *     corsOptions (Optional): {
     *         allowedOrigins (Required): [
     *             String (Required)
     *         ]
     *         maxAgeInSeconds: Long (Optional)
     *     }
     *     suggesters (Optional): [
     *          (Optional){
     *             name: String (Required)
     *             searchMode: String (Required)
     *             sourceFields (Required): [
     *                 String (Required)
     *             ]
     *         }
     *     ]
     *     analyzers (Optional): [
     *          (Optional){
     *             &#64;odata.type: String (Required)
     *             name: String (Required)
     *         }
     *     ]
     *     tokenizers (Optional): [
     *          (Optional){
     *             &#64;odata.type: String (Required)
     *             name: String (Required)
     *         }
     *     ]
     *     tokenFilters (Optional): [
     *          (Optional){
     *             &#64;odata.type: String (Required)
     *             name: String (Required)
     *         }
     *     ]
     *     charFilters (Optional): [
     *          (Optional){
     *             &#64;odata.type: String (Required)
     *             name: String (Required)
     *         }
     *     ]
     *     normalizers (Optional): [
     *          (Optional){
     *             &#64;odata.type: String (Required)
     *             name: String (Required)
     *         }
     *     ]
     *     encryptionKey (Optional): {
     *         keyVaultKeyName: String (Required)
     *         keyVaultKeyVersion: String (Optional)
     *         keyVaultUri: String (Required)
     *         accessCredentials (Optional): {
     *             applicationId: String (Required)
     *             applicationSecret: String (Optional)
     *         }
     *         identity (Optional): {
     *             &#64;odata.type: String (Required)
     *         }
     *     }
     *     similarity (Optional): {
     *         &#64;odata.type: String (Required)
     *     }
     *     semantic (Optional): {
     *         defaultConfiguration: String (Optional)
     *         configurations (Optional): [
     *              (Optional){
     *                 name: String (Required)
     *                 prioritizedFields (Required): {
     *                     titleField (Optional): {
     *                         fieldName: String (Required)
     *                     }
     *                     prioritizedContentFields (Optional): [
     *                         (recursive schema, see above)
     *                     ]
     *                     prioritizedKeywordsFields (Optional): [
     *                         (recursive schema, see above)
     *                     ]
     *                 }
     *                 flightingOptIn: Boolean (Optional)
     *             }
     *         ]
     *     }
     *     vectorSearch (Optional): {
     *         profiles (Optional): [
     *              (Optional){
     *                 name: String (Required)
     *                 algorithm: String (Required)
     *                 vectorizer: String (Optional)
     *                 compression: String (Optional)
     *             }
     *         ]
     *         algorithms (Optional): [
     *              (Optional){
     *                 kind: String(hnsw/exhaustiveKnn) (Required)
     *                 name: String (Required)
     *             }
     *         ]
     *         vectorizers (Optional): [
     *              (Optional){
     *                 kind: String(azureOpenAI/customWebApi/aiServicesVision/aml) (Required)
     *                 name: String (Required)
     *             }
     *         ]
     *         compressions (Optional): [
     *              (Optional){
     *                 kind: String(scalarQuantization/binaryQuantization) (Required)
     *                 name: String (Required)
     *                 rerankWithOriginalVectors: Boolean (Optional)
     *                 defaultOversampling: Double (Optional)
     *                 rescoringOptions (Optional): {
     *                     enableRescoring: Boolean (Optional)
     *                     defaultOversampling: Double (Optional)
     *                     rescoreStorageMethod: String(preserveOriginals/discardOriginals) (Optional)
     *                 }
     *                 truncationDimension: Integer (Optional)
     *             }
     *         ]
     *     }
     *     &#64;odata.etag: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param indexName The name of the index.
     * @param index The definition of the index to create or update.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents a search index definition, which describes the fields and search
     * behavior of an index along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createOrUpdateWithResponse(String indexName, BinaryData index,
        RequestOptions requestOptions) {
        return this.serviceClient.createOrUpdateWithResponse(indexName, index, requestOptions);
    }

    /**
     * Deletes a search index and all the documents it contains. This operation is
     * permanent, with no recovery option. Make sure you have a master copy of your
     * index definition, data ingestion code, and a backup of the primary data source
     * in case you need to re-build the index.
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>Defines the If-Match condition. The operation will be
     * performed only if the ETag on the server matches this value.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>Defines the If-None-Match condition. The operation will
     * be performed only if the ETag on the server does not match this value.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param indexName The name of the index.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(String indexName, RequestOptions requestOptions) {
        return this.serviceClient.deleteWithResponse(indexName, requestOptions);
    }

    /**
     * Retrieves an index definition.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     fields (Required): [
     *          (Required){
     *             name: String (Required)
     *             type: String(Edm.String/Edm.Int32/Edm.Int64/Edm.Double/Edm.Boolean/Edm.DateTimeOffset/Edm.GeographyPoint/Edm.ComplexType/Edm.Single/Edm.Half/Edm.Int16/Edm.SByte/Edm.Byte) (Required)
     *             key: Boolean (Optional)
     *             retrievable: Boolean (Optional)
     *             stored: Boolean (Optional)
     *             searchable: Boolean (Optional)
     *             filterable: Boolean (Optional)
     *             sortable: Boolean (Optional)
     *             facetable: Boolean (Optional)
     *             analyzer: String(ar.microsoft/ar.lucene/hy.lucene/bn.microsoft/eu.lucene/bg.microsoft/bg.lucene/ca.microsoft/ca.lucene/zh-Hans.microsoft/zh-Hans.lucene/zh-Hant.microsoft/zh-Hant.lucene/hr.microsoft/cs.microsoft/cs.lucene/da.microsoft/da.lucene/nl.microsoft/nl.lucene/en.microsoft/en.lucene/et.microsoft/fi.microsoft/fi.lucene/fr.microsoft/fr.lucene/gl.lucene/de.microsoft/de.lucene/el.microsoft/el.lucene/gu.microsoft/he.microsoft/hi.microsoft/hi.lucene/hu.microsoft/hu.lucene/is.microsoft/id.microsoft/id.lucene/ga.lucene/it.microsoft/it.lucene/ja.microsoft/ja.lucene/kn.microsoft/ko.microsoft/ko.lucene/lv.microsoft/lv.lucene/lt.microsoft/ml.microsoft/ms.microsoft/mr.microsoft/nb.microsoft/no.lucene/fa.lucene/pl.microsoft/pl.lucene/pt-BR.microsoft/pt-BR.lucene/pt-PT.microsoft/pt-PT.lucene/pa.microsoft/ro.microsoft/ro.lucene/ru.microsoft/ru.lucene/sr-cyrillic.microsoft/sr-latin.microsoft/sk.microsoft/sl.microsoft/es.microsoft/es.lucene/sv.microsoft/sv.lucene/ta.microsoft/te.microsoft/th.microsoft/th.lucene/tr.microsoft/tr.lucene/uk.microsoft/ur.microsoft/vi.microsoft/standard.lucene/standardasciifolding.lucene/keyword/pattern/simple/stop/whitespace) (Optional)
     *             searchAnalyzer: String(ar.microsoft/ar.lucene/hy.lucene/bn.microsoft/eu.lucene/bg.microsoft/bg.lucene/ca.microsoft/ca.lucene/zh-Hans.microsoft/zh-Hans.lucene/zh-Hant.microsoft/zh-Hant.lucene/hr.microsoft/cs.microsoft/cs.lucene/da.microsoft/da.lucene/nl.microsoft/nl.lucene/en.microsoft/en.lucene/et.microsoft/fi.microsoft/fi.lucene/fr.microsoft/fr.lucene/gl.lucene/de.microsoft/de.lucene/el.microsoft/el.lucene/gu.microsoft/he.microsoft/hi.microsoft/hi.lucene/hu.microsoft/hu.lucene/is.microsoft/id.microsoft/id.lucene/ga.lucene/it.microsoft/it.lucene/ja.microsoft/ja.lucene/kn.microsoft/ko.microsoft/ko.lucene/lv.microsoft/lv.lucene/lt.microsoft/ml.microsoft/ms.microsoft/mr.microsoft/nb.microsoft/no.lucene/fa.lucene/pl.microsoft/pl.lucene/pt-BR.microsoft/pt-BR.lucene/pt-PT.microsoft/pt-PT.lucene/pa.microsoft/ro.microsoft/ro.lucene/ru.microsoft/ru.lucene/sr-cyrillic.microsoft/sr-latin.microsoft/sk.microsoft/sl.microsoft/es.microsoft/es.lucene/sv.microsoft/sv.lucene/ta.microsoft/te.microsoft/th.microsoft/th.lucene/tr.microsoft/tr.lucene/uk.microsoft/ur.microsoft/vi.microsoft/standard.lucene/standardasciifolding.lucene/keyword/pattern/simple/stop/whitespace) (Optional)
     *             indexAnalyzer: String(ar.microsoft/ar.lucene/hy.lucene/bn.microsoft/eu.lucene/bg.microsoft/bg.lucene/ca.microsoft/ca.lucene/zh-Hans.microsoft/zh-Hans.lucene/zh-Hant.microsoft/zh-Hant.lucene/hr.microsoft/cs.microsoft/cs.lucene/da.microsoft/da.lucene/nl.microsoft/nl.lucene/en.microsoft/en.lucene/et.microsoft/fi.microsoft/fi.lucene/fr.microsoft/fr.lucene/gl.lucene/de.microsoft/de.lucene/el.microsoft/el.lucene/gu.microsoft/he.microsoft/hi.microsoft/hi.lucene/hu.microsoft/hu.lucene/is.microsoft/id.microsoft/id.lucene/ga.lucene/it.microsoft/it.lucene/ja.microsoft/ja.lucene/kn.microsoft/ko.microsoft/ko.lucene/lv.microsoft/lv.lucene/lt.microsoft/ml.microsoft/ms.microsoft/mr.microsoft/nb.microsoft/no.lucene/fa.lucene/pl.microsoft/pl.lucene/pt-BR.microsoft/pt-BR.lucene/pt-PT.microsoft/pt-PT.lucene/pa.microsoft/ro.microsoft/ro.lucene/ru.microsoft/ru.lucene/sr-cyrillic.microsoft/sr-latin.microsoft/sk.microsoft/sl.microsoft/es.microsoft/es.lucene/sv.microsoft/sv.lucene/ta.microsoft/te.microsoft/th.microsoft/th.lucene/tr.microsoft/tr.lucene/uk.microsoft/ur.microsoft/vi.microsoft/standard.lucene/standardasciifolding.lucene/keyword/pattern/simple/stop/whitespace) (Optional)
     *             normalizer: String(asciifolding/elision/lowercase/standard/uppercase) (Optional)
     *             dimensions: Integer (Optional)
     *             vectorSearchProfile: String (Optional)
     *             vectorEncoding: String(packedBit) (Optional)
     *             synonymMaps (Optional): [
     *                 String (Optional)
     *             ]
     *             fields (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *     ]
     *     scoringProfiles (Optional): [
     *          (Optional){
     *             name: String (Required)
     *             text (Optional): {
     *                 weights (Required): {
     *                     String: double (Required)
     *                 }
     *             }
     *             functions (Optional): [
     *                  (Optional){
     *                     type: String (Required)
     *                     fieldName: String (Required)
     *                     boost: double (Required)
     *                     interpolation: String(linear/constant/quadratic/logarithmic) (Optional)
     *                 }
     *             ]
     *             functionAggregation: String(sum/average/minimum/maximum/firstMatching) (Optional)
     *         }
     *     ]
     *     defaultScoringProfile: String (Optional)
     *     corsOptions (Optional): {
     *         allowedOrigins (Required): [
     *             String (Required)
     *         ]
     *         maxAgeInSeconds: Long (Optional)
     *     }
     *     suggesters (Optional): [
     *          (Optional){
     *             name: String (Required)
     *             searchMode: String (Required)
     *             sourceFields (Required): [
     *                 String (Required)
     *             ]
     *         }
     *     ]
     *     analyzers (Optional): [
     *          (Optional){
     *             &#64;odata.type: String (Required)
     *             name: String (Required)
     *         }
     *     ]
     *     tokenizers (Optional): [
     *          (Optional){
     *             &#64;odata.type: String (Required)
     *             name: String (Required)
     *         }
     *     ]
     *     tokenFilters (Optional): [
     *          (Optional){
     *             &#64;odata.type: String (Required)
     *             name: String (Required)
     *         }
     *     ]
     *     charFilters (Optional): [
     *          (Optional){
     *             &#64;odata.type: String (Required)
     *             name: String (Required)
     *         }
     *     ]
     *     normalizers (Optional): [
     *          (Optional){
     *             &#64;odata.type: String (Required)
     *             name: String (Required)
     *         }
     *     ]
     *     encryptionKey (Optional): {
     *         keyVaultKeyName: String (Required)
     *         keyVaultKeyVersion: String (Optional)
     *         keyVaultUri: String (Required)
     *         accessCredentials (Optional): {
     *             applicationId: String (Required)
     *             applicationSecret: String (Optional)
     *         }
     *         identity (Optional): {
     *             &#64;odata.type: String (Required)
     *         }
     *     }
     *     similarity (Optional): {
     *         &#64;odata.type: String (Required)
     *     }
     *     semantic (Optional): {
     *         defaultConfiguration: String (Optional)
     *         configurations (Optional): [
     *              (Optional){
     *                 name: String (Required)
     *                 prioritizedFields (Required): {
     *                     titleField (Optional): {
     *                         fieldName: String (Required)
     *                     }
     *                     prioritizedContentFields (Optional): [
     *                         (recursive schema, see above)
     *                     ]
     *                     prioritizedKeywordsFields (Optional): [
     *                         (recursive schema, see above)
     *                     ]
     *                 }
     *                 flightingOptIn: Boolean (Optional)
     *             }
     *         ]
     *     }
     *     vectorSearch (Optional): {
     *         profiles (Optional): [
     *              (Optional){
     *                 name: String (Required)
     *                 algorithm: String (Required)
     *                 vectorizer: String (Optional)
     *                 compression: String (Optional)
     *             }
     *         ]
     *         algorithms (Optional): [
     *              (Optional){
     *                 kind: String(hnsw/exhaustiveKnn) (Required)
     *                 name: String (Required)
     *             }
     *         ]
     *         vectorizers (Optional): [
     *              (Optional){
     *                 kind: String(azureOpenAI/customWebApi/aiServicesVision/aml) (Required)
     *                 name: String (Required)
     *             }
     *         ]
     *         compressions (Optional): [
     *              (Optional){
     *                 kind: String(scalarQuantization/binaryQuantization) (Required)
     *                 name: String (Required)
     *                 rerankWithOriginalVectors: Boolean (Optional)
     *                 defaultOversampling: Double (Optional)
     *                 rescoringOptions (Optional): {
     *                     enableRescoring: Boolean (Optional)
     *                     defaultOversampling: Double (Optional)
     *                     rescoreStorageMethod: String(preserveOriginals/discardOriginals) (Optional)
     *                 }
     *                 truncationDimension: Integer (Optional)
     *             }
     *         ]
     *     }
     *     &#64;odata.etag: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param indexName The name of the index.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents a search index definition, which describes the fields and search
     * behavior of an index along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getWithResponse(String indexName, RequestOptions requestOptions) {
        return this.serviceClient.getWithResponse(indexName, requestOptions);
    }

    /**
     * Returns statistics for the given index, including a document count and storage
     * usage.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     documentCount: long (Required)
     *     storageSize: long (Required)
     *     vectorIndexSize: long (Required)
     * }
     * }
     * </pre>
     * 
     * @param indexName The name of the index.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return statistics for a given index along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getStatisticsWithResponse(String indexName, RequestOptions requestOptions) {
        return this.serviceClient.getStatisticsWithResponse(indexName, requestOptions);
    }

    /**
     * Shows how an analyzer breaks text into tokens.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     text: String (Required)
     *     analyzer: String(ar.microsoft/ar.lucene/hy.lucene/bn.microsoft/eu.lucene/bg.microsoft/bg.lucene/ca.microsoft/ca.lucene/zh-Hans.microsoft/zh-Hans.lucene/zh-Hant.microsoft/zh-Hant.lucene/hr.microsoft/cs.microsoft/cs.lucene/da.microsoft/da.lucene/nl.microsoft/nl.lucene/en.microsoft/en.lucene/et.microsoft/fi.microsoft/fi.lucene/fr.microsoft/fr.lucene/gl.lucene/de.microsoft/de.lucene/el.microsoft/el.lucene/gu.microsoft/he.microsoft/hi.microsoft/hi.lucene/hu.microsoft/hu.lucene/is.microsoft/id.microsoft/id.lucene/ga.lucene/it.microsoft/it.lucene/ja.microsoft/ja.lucene/kn.microsoft/ko.microsoft/ko.lucene/lv.microsoft/lv.lucene/lt.microsoft/ml.microsoft/ms.microsoft/mr.microsoft/nb.microsoft/no.lucene/fa.lucene/pl.microsoft/pl.lucene/pt-BR.microsoft/pt-BR.lucene/pt-PT.microsoft/pt-PT.lucene/pa.microsoft/ro.microsoft/ro.lucene/ru.microsoft/ru.lucene/sr-cyrillic.microsoft/sr-latin.microsoft/sk.microsoft/sl.microsoft/es.microsoft/es.lucene/sv.microsoft/sv.lucene/ta.microsoft/te.microsoft/th.microsoft/th.lucene/tr.microsoft/tr.lucene/uk.microsoft/ur.microsoft/vi.microsoft/standard.lucene/standardasciifolding.lucene/keyword/pattern/simple/stop/whitespace) (Optional)
     *     tokenizer: String(classic/edgeNGram/keyword_v2/letter/lowercase/microsoft_language_tokenizer/microsoft_language_stemming_tokenizer/nGram/path_hierarchy_v2/pattern/standard_v2/uax_url_email/whitespace) (Optional)
     *     normalizer: String(asciifolding/elision/lowercase/standard/uppercase) (Optional)
     *     tokenFilters (Optional): [
     *         String(arabic_normalization/apostrophe/asciifolding/cjk_bigram/cjk_width/classic/common_grams/edgeNGram_v2/elision/german_normalization/hindi_normalization/indic_normalization/keyword_repeat/kstem/length/limit/lowercase/nGram_v2/persian_normalization/phonetic/porter_stem/reverse/scandinavian_normalization/scandinavian_folding/shingle/snowball/sorani_normalization/stemmer/stopwords/trim/truncate/unique/uppercase/word_delimiter) (Optional)
     *     ]
     *     charFilters (Optional): [
     *         String(html_strip) (Optional)
     *     ]
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     tokens (Required): [
     *          (Required){
     *             token: String (Required)
     *             startOffset: int (Required)
     *             endOffset: int (Required)
     *             position: int (Required)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param indexName The name of the index.
     * @param request The text and analyzer or analysis components to test.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the result of testing an analyzer on text along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> analyzeWithResponse(String indexName, BinaryData request,
        RequestOptions requestOptions) {
        return this.serviceClient.analyzeWithResponse(indexName, request, requestOptions);
    }

    /**
     * Creates a new search index.
     * 
     * @param index The definition of the index to create.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a search index definition, which describes the fields and search
     * behavior of an index.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SearchIndex create(SearchIndex index) {
        // Generated convenience method for createWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createWithResponse(BinaryData.fromObject(index), requestOptions).getValue().toObject(SearchIndex.class);
    }

    /**
     * Lists all indexes available for a search service.
     * 
     * @param select Selects which top-level properties to retrieve.
     * Specified as a comma-separated list of JSON property names,
     * or '*' for all properties. The default is all properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response from a List Indexes request as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SearchIndex> list(String select) {
        // Generated convenience method for list
        RequestOptions requestOptions = new RequestOptions();
        if (select != null) {
            requestOptions.addQueryParam("$select", select, false);
        }
        return serviceClient.list(requestOptions).mapPage(bodyItemValue -> bodyItemValue.toObject(SearchIndex.class));
    }

    /**
     * Lists all indexes available for a search service.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response from a List Indexes request as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SearchIndex> list() {
        // Generated convenience method for list
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.list(requestOptions).mapPage(bodyItemValue -> bodyItemValue.toObject(SearchIndex.class));
    }

    /**
     * Creates a new search index or updates an index if it already exists.
     * 
     * @param indexName The name of the index.
     * @param index The definition of the index to create or update.
     * @param allowIndexDowntime Allows new analyzers, tokenizers, token filters, or char filters to be added to
     * an index by taking the index offline for at least a few seconds. This
     * temporarily causes indexing and query requests to fail. Performance and write
     * availability of the index can be impaired for several minutes after the index
     * is updated, or longer for very large indexes.
     * @param matchConditions Specifies HTTP options for conditional requests.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a search index definition, which describes the fields and search
     * behavior of an index.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SearchIndex createOrUpdate(String indexName, SearchIndex index, Boolean allowIndexDowntime,
        MatchConditions matchConditions) {
        // Generated convenience method for createOrUpdateWithResponse
        RequestOptions requestOptions = new RequestOptions();
        String ifMatch = matchConditions == null ? null : matchConditions.getIfMatch();
        String ifNoneMatch = matchConditions == null ? null : matchConditions.getIfNoneMatch();
        if (allowIndexDowntime != null) {
            requestOptions.addQueryParam("allowIndexDowntime", String.valueOf(allowIndexDowntime), false);
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        return createOrUpdateWithResponse(indexName, BinaryData.fromObject(index), requestOptions).getValue()
            .toObject(SearchIndex.class);
    }

    /**
     * Creates a new search index or updates an index if it already exists.
     * 
     * @param indexName The name of the index.
     * @param index The definition of the index to create or update.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a search index definition, which describes the fields and search
     * behavior of an index.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SearchIndex createOrUpdate(String indexName, SearchIndex index) {
        // Generated convenience method for createOrUpdateWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createOrUpdateWithResponse(indexName, BinaryData.fromObject(index), requestOptions).getValue()
            .toObject(SearchIndex.class);
    }

    /**
     * Deletes a search index and all the documents it contains. This operation is
     * permanent, with no recovery option. Make sure you have a master copy of your
     * index definition, data ingestion code, and a backup of the primary data source
     * in case you need to re-build the index.
     * 
     * @param indexName The name of the index.
     * @param matchConditions Specifies HTTP options for conditional requests.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String indexName, MatchConditions matchConditions) {
        // Generated convenience method for deleteWithResponse
        RequestOptions requestOptions = new RequestOptions();
        String ifMatch = matchConditions == null ? null : matchConditions.getIfMatch();
        String ifNoneMatch = matchConditions == null ? null : matchConditions.getIfNoneMatch();
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        deleteWithResponse(indexName, requestOptions).getValue();
    }

    /**
     * Deletes a search index and all the documents it contains. This operation is
     * permanent, with no recovery option. Make sure you have a master copy of your
     * index definition, data ingestion code, and a backup of the primary data source
     * in case you need to re-build the index.
     * 
     * @param indexName The name of the index.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String indexName) {
        // Generated convenience method for deleteWithResponse
        RequestOptions requestOptions = new RequestOptions();
        deleteWithResponse(indexName, requestOptions).getValue();
    }

    /**
     * Retrieves an index definition.
     * 
     * @param indexName The name of the index.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a search index definition, which describes the fields and search
     * behavior of an index.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SearchIndex get(String indexName) {
        // Generated convenience method for getWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getWithResponse(indexName, requestOptions).getValue().toObject(SearchIndex.class);
    }

    /**
     * Returns statistics for the given index, including a document count and storage
     * usage.
     * 
     * @param indexName The name of the index.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return statistics for a given index.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public GetIndexStatisticsResult getStatistics(String indexName) {
        // Generated convenience method for getStatisticsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getStatisticsWithResponse(indexName, requestOptions).getValue().toObject(GetIndexStatisticsResult.class);
    }

    /**
     * Shows how an analyzer breaks text into tokens.
     * 
     * @param indexName The name of the index.
     * @param request The text and analyzer or analysis components to test.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of testing an analyzer on text.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AnalyzeResult analyze(String indexName, AnalyzeRequest request) {
        // Generated convenience method for analyzeWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return analyzeWithResponse(indexName, BinaryData.fromObject(request), requestOptions).getValue()
            .toObject(AnalyzeResult.class);
    }
}
