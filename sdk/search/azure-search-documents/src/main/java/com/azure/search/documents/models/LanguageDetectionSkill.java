// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.search.documents.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * A skill that detects the language of input text and reports a single language
 * code for every document submitted on the request. The language code is paired
 * with a score indicating the confidence of the analysis.
 */
@Fluent
public final class LanguageDetectionSkill extends SearchIndexerSkill {
    /*
     * The discriminator for derived types.
     */
    @Generated
    private String odataType = "#Microsoft.Skills.Text.LanguageDetectionSkill";

    /*
     * A country code to use as a hint to the language detection model if it cannot
     * disambiguate the language.
     */
    @Generated
    private String defaultCountryHint;

    /*
     * The version of the model to use when calling the Text Analytics service. It
     * will default to the latest available when not specified. We recommend you do
     * not specify this value unless absolutely necessary.
     */
    @Generated
    private String modelVersion;

    /**
     * Creates an instance of LanguageDetectionSkill class.
     * 
     * @param inputs the inputs value to set.
     * @param outputs the outputs value to set.
     */
    @Generated
    public LanguageDetectionSkill(List<InputFieldMappingEntry> inputs, List<OutputFieldMappingEntry> outputs) {
        super(inputs, outputs);
    }

    /**
     * Get the odataType property: The discriminator for derived types.
     * 
     * @return the odataType value.
     */
    @Generated
    @Override
    public String getOdataType() {
        return this.odataType;
    }

    /**
     * Get the defaultCountryHint property: A country code to use as a hint to the language detection model if it cannot
     * disambiguate the language.
     * 
     * @return the defaultCountryHint value.
     */
    @Generated
    public String getDefaultCountryHint() {
        return this.defaultCountryHint;
    }

    /**
     * Set the defaultCountryHint property: A country code to use as a hint to the language detection model if it cannot
     * disambiguate the language.
     * 
     * @param defaultCountryHint the defaultCountryHint value to set.
     * @return the LanguageDetectionSkill object itself.
     */
    @Generated
    public LanguageDetectionSkill setDefaultCountryHint(String defaultCountryHint) {
        this.defaultCountryHint = defaultCountryHint;
        return this;
    }

    /**
     * Get the modelVersion property: The version of the model to use when calling the Text Analytics service. It
     * will default to the latest available when not specified. We recommend you do
     * not specify this value unless absolutely necessary.
     * 
     * @return the modelVersion value.
     */
    @Generated
    public String getModelVersion() {
        return this.modelVersion;
    }

    /**
     * Set the modelVersion property: The version of the model to use when calling the Text Analytics service. It
     * will default to the latest available when not specified. We recommend you do
     * not specify this value unless absolutely necessary.
     * 
     * @param modelVersion the modelVersion value to set.
     * @return the LanguageDetectionSkill object itself.
     */
    @Generated
    public LanguageDetectionSkill setModelVersion(String modelVersion) {
        this.modelVersion = modelVersion;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public LanguageDetectionSkill setName(String name) {
        super.setName(name);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public LanguageDetectionSkill setDescription(String description) {
        super.setDescription(description);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public LanguageDetectionSkill setContext(String context) {
        super.setContext(context);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("inputs", getInputs(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("outputs", getOutputs(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("name", getName());
        jsonWriter.writeStringField("description", getDescription());
        jsonWriter.writeStringField("context", getContext());
        jsonWriter.writeStringField("@odata.type", this.odataType);
        jsonWriter.writeStringField("defaultCountryHint", this.defaultCountryHint);
        jsonWriter.writeStringField("modelVersion", this.modelVersion);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LanguageDetectionSkill from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LanguageDetectionSkill if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the LanguageDetectionSkill.
     */
    @Generated
    public static LanguageDetectionSkill fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            List<InputFieldMappingEntry> inputs = null;
            List<OutputFieldMappingEntry> outputs = null;
            String name = null;
            String description = null;
            String context = null;
            String odataType = "#Microsoft.Skills.Text.LanguageDetectionSkill";
            String defaultCountryHint = null;
            String modelVersion = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("inputs".equals(fieldName)) {
                    inputs = reader.readArray(reader1 -> InputFieldMappingEntry.fromJson(reader1));
                } else if ("outputs".equals(fieldName)) {
                    outputs = reader.readArray(reader1 -> OutputFieldMappingEntry.fromJson(reader1));
                } else if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else if ("description".equals(fieldName)) {
                    description = reader.getString();
                } else if ("context".equals(fieldName)) {
                    context = reader.getString();
                } else if ("@odata.type".equals(fieldName)) {
                    odataType = reader.getString();
                } else if ("defaultCountryHint".equals(fieldName)) {
                    defaultCountryHint = reader.getString();
                } else if ("modelVersion".equals(fieldName)) {
                    modelVersion = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            LanguageDetectionSkill deserializedLanguageDetectionSkill = new LanguageDetectionSkill(inputs, outputs);
            deserializedLanguageDetectionSkill.setName(name);
            deserializedLanguageDetectionSkill.setDescription(description);
            deserializedLanguageDetectionSkill.setContext(context);
            deserializedLanguageDetectionSkill.odataType = odataType;
            deserializedLanguageDetectionSkill.defaultCountryHint = defaultCountryHint;
            deserializedLanguageDetectionSkill.modelVersion = modelVersion;

            return deserializedLanguageDetectionSkill;
        });
    }
}
