// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.search.documents.models;

import com.azure.core.annotation.Generated;
import com.azure.core.util.ExpandableStringEnum;
import java.util.Collection;

/**
 * The language to use for a stemmer token filter.
 */
public final class StemmerTokenFilterLanguage extends ExpandableStringEnum<StemmerTokenFilterLanguage> {
    /**
     * Selects the Lucene stemming tokenizer for Arabic.
     */
    @Generated
    public static final StemmerTokenFilterLanguage ARABIC = fromString("arabic");

    /**
     * Selects the Lucene stemming tokenizer for Armenian.
     */
    @Generated
    public static final StemmerTokenFilterLanguage ARMENIAN = fromString("armenian");

    /**
     * Selects the Lucene stemming tokenizer for Basque.
     */
    @Generated
    public static final StemmerTokenFilterLanguage BASQUE = fromString("basque");

    /**
     * Selects the Lucene stemming tokenizer for Portuguese (Brazil).
     */
    @Generated
    public static final StemmerTokenFilterLanguage BRAZILIAN = fromString("brazilian");

    /**
     * Selects the Lucene stemming tokenizer for Bulgarian.
     */
    @Generated
    public static final StemmerTokenFilterLanguage BULGARIAN = fromString("bulgarian");

    /**
     * Selects the Lucene stemming tokenizer for Catalan.
     */
    @Generated
    public static final StemmerTokenFilterLanguage CATALAN = fromString("catalan");

    /**
     * Selects the Lucene stemming tokenizer for Czech.
     */
    @Generated
    public static final StemmerTokenFilterLanguage CZECH = fromString("czech");

    /**
     * Selects the Lucene stemming tokenizer for Danish.
     */
    @Generated
    public static final StemmerTokenFilterLanguage DANISH = fromString("danish");

    /**
     * Selects the Lucene stemming tokenizer for Dutch.
     */
    @Generated
    public static final StemmerTokenFilterLanguage DUTCH = fromString("dutch");

    /**
     * Selects the Lucene stemming tokenizer for Dutch that uses the Kraaij-Pohlmann
     * stemming algorithm.
     */
    @Generated
    public static final StemmerTokenFilterLanguage DUTCH_KP = fromString("dutchKp");

    /**
     * Selects the Lucene stemming tokenizer for English.
     */
    @Generated
    public static final StemmerTokenFilterLanguage ENGLISH = fromString("english");

    /**
     * Selects the Lucene stemming tokenizer for English that does light stemming.
     */
    @Generated
    public static final StemmerTokenFilterLanguage LIGHT_ENGLISH = fromString("lightEnglish");

    /**
     * Selects the Lucene stemming tokenizer for English that does minimal stemming.
     */
    @Generated
    public static final StemmerTokenFilterLanguage MINIMAL_ENGLISH = fromString("minimalEnglish");

    /**
     * Selects the Lucene stemming tokenizer for English that removes trailing
     * possessives from words.
     */
    @Generated
    public static final StemmerTokenFilterLanguage POSSESSIVE_ENGLISH = fromString("possessiveEnglish");

    /**
     * Selects the Lucene stemming tokenizer for English that uses the Porter2
     * stemming algorithm.
     */
    @Generated
    public static final StemmerTokenFilterLanguage PORTER2 = fromString("porter2");

    /**
     * Selects the Lucene stemming tokenizer for English that uses the Lovins stemming
     * algorithm.
     */
    @Generated
    public static final StemmerTokenFilterLanguage LOVINS = fromString("lovins");

    /**
     * Selects the Lucene stemming tokenizer for Finnish.
     */
    @Generated
    public static final StemmerTokenFilterLanguage FINNISH = fromString("finnish");

    /**
     * Selects the Lucene stemming tokenizer for Finnish that does light stemming.
     */
    @Generated
    public static final StemmerTokenFilterLanguage LIGHT_FINNISH = fromString("lightFinnish");

    /**
     * Selects the Lucene stemming tokenizer for French.
     */
    @Generated
    public static final StemmerTokenFilterLanguage FRENCH = fromString("french");

    /**
     * Selects the Lucene stemming tokenizer for French that does light stemming.
     */
    @Generated
    public static final StemmerTokenFilterLanguage LIGHT_FRENCH = fromString("lightFrench");

    /**
     * Selects the Lucene stemming tokenizer for French that does minimal stemming.
     */
    @Generated
    public static final StemmerTokenFilterLanguage MINIMAL_FRENCH = fromString("minimalFrench");

    /**
     * Selects the Lucene stemming tokenizer for Galician.
     */
    @Generated
    public static final StemmerTokenFilterLanguage GALICIAN = fromString("galician");

    /**
     * Selects the Lucene stemming tokenizer for Galician that does minimal stemming.
     */
    @Generated
    public static final StemmerTokenFilterLanguage MINIMAL_GALICIAN = fromString("minimalGalician");

    /**
     * Selects the Lucene stemming tokenizer for German.
     */
    @Generated
    public static final StemmerTokenFilterLanguage GERMAN = fromString("german");

    /**
     * Selects the Lucene stemming tokenizer that uses the German variant algorithm.
     */
    @Generated
    public static final StemmerTokenFilterLanguage GERMAN2 = fromString("german2");

    /**
     * Selects the Lucene stemming tokenizer for German that does light stemming.
     */
    @Generated
    public static final StemmerTokenFilterLanguage LIGHT_GERMAN = fromString("lightGerman");

    /**
     * Selects the Lucene stemming tokenizer for German that does minimal stemming.
     */
    @Generated
    public static final StemmerTokenFilterLanguage MINIMAL_GERMAN = fromString("minimalGerman");

    /**
     * Selects the Lucene stemming tokenizer for Greek.
     */
    @Generated
    public static final StemmerTokenFilterLanguage GREEK = fromString("greek");

    /**
     * Selects the Lucene stemming tokenizer for Hindi.
     */
    @Generated
    public static final StemmerTokenFilterLanguage HINDI = fromString("hindi");

    /**
     * Selects the Lucene stemming tokenizer for Hungarian.
     */
    @Generated
    public static final StemmerTokenFilterLanguage HUNGARIAN = fromString("hungarian");

    /**
     * Selects the Lucene stemming tokenizer for Hungarian that does light stemming.
     */
    @Generated
    public static final StemmerTokenFilterLanguage LIGHT_HUNGARIAN = fromString("lightHungarian");

    /**
     * Selects the Lucene stemming tokenizer for Indonesian.
     */
    @Generated
    public static final StemmerTokenFilterLanguage INDONESIAN = fromString("indonesian");

    /**
     * Selects the Lucene stemming tokenizer for Irish.
     */
    @Generated
    public static final StemmerTokenFilterLanguage IRISH = fromString("irish");

    /**
     * Selects the Lucene stemming tokenizer for Italian.
     */
    @Generated
    public static final StemmerTokenFilterLanguage ITALIAN = fromString("italian");

    /**
     * Selects the Lucene stemming tokenizer for Italian that does light stemming.
     */
    @Generated
    public static final StemmerTokenFilterLanguage LIGHT_ITALIAN = fromString("lightItalian");

    /**
     * Selects the Lucene stemming tokenizer for Sorani.
     */
    @Generated
    public static final StemmerTokenFilterLanguage SORANI = fromString("sorani");

    /**
     * Selects the Lucene stemming tokenizer for Latvian.
     */
    @Generated
    public static final StemmerTokenFilterLanguage LATVIAN = fromString("latvian");

    /**
     * Selects the Lucene stemming tokenizer for Norwegian (Bokmål).
     */
    @Generated
    public static final StemmerTokenFilterLanguage NORWEGIAN = fromString("norwegian");

    /**
     * Selects the Lucene stemming tokenizer for Norwegian (Bokmål) that does light
     * stemming.
     */
    @Generated
    public static final StemmerTokenFilterLanguage LIGHT_NORWEGIAN = fromString("lightNorwegian");

    /**
     * Selects the Lucene stemming tokenizer for Norwegian (Bokmål) that does minimal
     * stemming.
     */
    @Generated
    public static final StemmerTokenFilterLanguage MINIMAL_NORWEGIAN = fromString("minimalNorwegian");

    /**
     * Selects the Lucene stemming tokenizer for Norwegian (Nynorsk) that does light
     * stemming.
     */
    @Generated
    public static final StemmerTokenFilterLanguage LIGHT_NYNORSK = fromString("lightNynorsk");

    /**
     * Selects the Lucene stemming tokenizer for Norwegian (Nynorsk) that does minimal
     * stemming.
     */
    @Generated
    public static final StemmerTokenFilterLanguage MINIMAL_NYNORSK = fromString("minimalNynorsk");

    /**
     * Selects the Lucene stemming tokenizer for Portuguese.
     */
    @Generated
    public static final StemmerTokenFilterLanguage PORTUGUESE = fromString("portuguese");

    /**
     * Selects the Lucene stemming tokenizer for Portuguese that does light stemming.
     */
    @Generated
    public static final StemmerTokenFilterLanguage LIGHT_PORTUGUESE = fromString("lightPortuguese");

    /**
     * Selects the Lucene stemming tokenizer for Portuguese that does minimal stemming.
     */
    @Generated
    public static final StemmerTokenFilterLanguage MINIMAL_PORTUGUESE = fromString("minimalPortuguese");

    /**
     * Selects the Lucene stemming tokenizer for Portuguese that uses the RSLP
     * stemming algorithm.
     */
    @Generated
    public static final StemmerTokenFilterLanguage PORTUGUESE_RSLP = fromString("portugueseRslp");

    /**
     * Selects the Lucene stemming tokenizer for Romanian.
     */
    @Generated
    public static final StemmerTokenFilterLanguage ROMANIAN = fromString("romanian");

    /**
     * Selects the Lucene stemming tokenizer for Russian.
     */
    @Generated
    public static final StemmerTokenFilterLanguage RUSSIAN = fromString("russian");

    /**
     * Selects the Lucene stemming tokenizer for Russian that does light stemming.
     */
    @Generated
    public static final StemmerTokenFilterLanguage LIGHT_RUSSIAN = fromString("lightRussian");

    /**
     * Selects the Lucene stemming tokenizer for Spanish.
     */
    @Generated
    public static final StemmerTokenFilterLanguage SPANISH = fromString("spanish");

    /**
     * Selects the Lucene stemming tokenizer for Spanish that does light stemming.
     */
    @Generated
    public static final StemmerTokenFilterLanguage LIGHT_SPANISH = fromString("lightSpanish");

    /**
     * Selects the Lucene stemming tokenizer for Swedish.
     */
    @Generated
    public static final StemmerTokenFilterLanguage SWEDISH = fromString("swedish");

    /**
     * Selects the Lucene stemming tokenizer for Swedish that does light stemming.
     */
    @Generated
    public static final StemmerTokenFilterLanguage LIGHT_SWEDISH = fromString("lightSwedish");

    /**
     * Selects the Lucene stemming tokenizer for Turkish.
     */
    @Generated
    public static final StemmerTokenFilterLanguage TURKISH = fromString("turkish");

    /**
     * Creates a new instance of StemmerTokenFilterLanguage value.
     * 
     * @deprecated Use the {@link #fromString(String)} factory method.
     */
    @Generated
    @Deprecated
    public StemmerTokenFilterLanguage() {
    }

    /**
     * Creates or finds a StemmerTokenFilterLanguage from its string representation.
     * 
     * @param name a name to look for.
     * @return the corresponding StemmerTokenFilterLanguage.
     */
    @Generated
    public static StemmerTokenFilterLanguage fromString(String name) {
        return fromString(name, StemmerTokenFilterLanguage.class);
    }

    /**
     * Gets known StemmerTokenFilterLanguage values.
     * 
     * @return known StemmerTokenFilterLanguage values.
     */
    @Generated
    public static Collection<StemmerTokenFilterLanguage> values() {
        return values(StemmerTokenFilterLanguage.class);
    }
}
