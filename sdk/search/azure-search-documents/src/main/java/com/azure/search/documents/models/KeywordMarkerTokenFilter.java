// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.search.documents.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Marks terms as keywords. This token filter is implemented using Apache Lucene.
 */
@Fluent
public final class KeywordMarkerTokenFilter extends TokenFilter {
    /*
     * The discriminator for derived types.
     */
    @Generated
    private String odataType = "#Microsoft.Azure.Search.KeywordMarkerTokenFilter";

    /*
     * A list of words to mark as keywords.
     */
    @Generated
    private final List<String> keywords;

    /*
     * A value indicating whether to ignore case. If true, all words are converted to
     * lower case first. Default is false.
     */
    @Generated
    private Boolean ignoreCase;

    /**
     * Creates an instance of KeywordMarkerTokenFilter class.
     * 
     * @param name the name value to set.
     * @param keywords the keywords value to set.
     */
    @Generated
    public KeywordMarkerTokenFilter(String name, List<String> keywords) {
        super(name);
        this.keywords = keywords;
    }

    /**
     * Get the odataType property: The discriminator for derived types.
     * 
     * @return the odataType value.
     */
    @Generated
    @Override
    public String getOdataType() {
        return this.odataType;
    }

    /**
     * Get the keywords property: A list of words to mark as keywords.
     * 
     * @return the keywords value.
     */
    @Generated
    public List<String> getKeywords() {
        return this.keywords;
    }

    /**
     * Get the ignoreCase property: A value indicating whether to ignore case. If true, all words are converted to
     * lower case first. Default is false.
     * 
     * @return the ignoreCase value.
     */
    @Generated
    public Boolean isIgnoreCase() {
        return this.ignoreCase;
    }

    /**
     * Set the ignoreCase property: A value indicating whether to ignore case. If true, all words are converted to
     * lower case first. Default is false.
     * 
     * @param ignoreCase the ignoreCase value to set.
     * @return the KeywordMarkerTokenFilter object itself.
     */
    @Generated
    public KeywordMarkerTokenFilter setIgnoreCase(Boolean ignoreCase) {
        this.ignoreCase = ignoreCase;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", getName());
        jsonWriter.writeArrayField("keywords", this.keywords, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("@odata.type", this.odataType);
        jsonWriter.writeBooleanField("ignoreCase", this.ignoreCase);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of KeywordMarkerTokenFilter from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of KeywordMarkerTokenFilter if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the KeywordMarkerTokenFilter.
     */
    @Generated
    public static KeywordMarkerTokenFilter fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String name = null;
            List<String> keywords = null;
            String odataType = "#Microsoft.Azure.Search.KeywordMarkerTokenFilter";
            Boolean ignoreCase = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else if ("keywords".equals(fieldName)) {
                    keywords = reader.readArray(reader1 -> reader1.getString());
                } else if ("@odata.type".equals(fieldName)) {
                    odataType = reader.getString();
                } else if ("ignoreCase".equals(fieldName)) {
                    ignoreCase = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }
            KeywordMarkerTokenFilter deserializedKeywordMarkerTokenFilter
                = new KeywordMarkerTokenFilter(name, keywords);
            deserializedKeywordMarkerTokenFilter.odataType = odataType;
            deserializedKeywordMarkerTokenFilter.ignoreCase = ignoreCase;

            return deserializedKeywordMarkerTokenFilter;
        });
    }
}
