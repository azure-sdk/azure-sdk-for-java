// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.search.documents;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.HttpHeaderName;
import com.azure.core.http.MatchConditions;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.FluxUtil;
import com.azure.search.documents.implementation.SynonymMapsImpl;
import com.azure.search.documents.models.ListSynonymMapsResult;
import com.azure.search.documents.models.SynonymMap;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the asynchronous SearchClient type.
 */
@ServiceClient(builder = SearchClientBuilder.class, isAsync = true)
public final class SynonymMapsAsyncClient {
    @Generated
    private final SynonymMapsImpl serviceClient;

    /**
     * Initializes an instance of SynonymMapsAsyncClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    SynonymMapsAsyncClient(SynonymMapsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Creates a new synonym map or updates a synonym map if it already exists.
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>Defines the If-Match condition. The operation will be
     * performed only if the ETag on the server matches this value.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>Defines the If-None-Match condition. The operation will
     * be performed only if the ETag on the server does not match this value.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     format: String (Required)
     *     synonyms: String (Required)
     *     encryptionKey (Optional): {
     *         keyVaultKeyName: String (Required)
     *         keyVaultKeyVersion: String (Required)
     *         keyVaultUri: String (Required)
     *         accessCredentials (Optional): {
     *             applicationId: String (Required)
     *             applicationSecret: String (Optional)
     *         }
     *         identity (Optional): {
     *             &#64;odata.type: String (Required)
     *         }
     *     }
     *     &#64;odata.etag: String (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     format: String (Required)
     *     synonyms: String (Required)
     *     encryptionKey (Optional): {
     *         keyVaultKeyName: String (Required)
     *         keyVaultKeyVersion: String (Required)
     *         keyVaultUri: String (Required)
     *         accessCredentials (Optional): {
     *             applicationId: String (Required)
     *             applicationSecret: String (Optional)
     *         }
     *         identity (Optional): {
     *             &#64;odata.type: String (Required)
     *         }
     *     }
     *     &#64;odata.etag: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param synonymMapName The name of the synonym map.
     * @param synonymMap The definition of the synonym map to create or update.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents a synonym map definition along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createOrUpdateWithResponse(String synonymMapName, BinaryData synonymMap,
        RequestOptions requestOptions) {
        return this.serviceClient.createOrUpdateWithResponseAsync(synonymMapName, synonymMap, requestOptions);
    }

    /**
     * Deletes a synonym map.
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>Defines the If-Match condition. The operation will be
     * performed only if the ETag on the server matches this value.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>Defines the If-None-Match condition. The operation will
     * be performed only if the ETag on the server does not match this value.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param synonymMapName The name of the synonym map.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteWithResponse(String synonymMapName, RequestOptions requestOptions) {
        return this.serviceClient.deleteWithResponseAsync(synonymMapName, requestOptions);
    }

    /**
     * Retrieves a synonym map definition.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     format: String (Required)
     *     synonyms: String (Required)
     *     encryptionKey (Optional): {
     *         keyVaultKeyName: String (Required)
     *         keyVaultKeyVersion: String (Required)
     *         keyVaultUri: String (Required)
     *         accessCredentials (Optional): {
     *             applicationId: String (Required)
     *             applicationSecret: String (Optional)
     *         }
     *         identity (Optional): {
     *             &#64;odata.type: String (Required)
     *         }
     *     }
     *     &#64;odata.etag: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param synonymMapName The name of the synonym map.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents a synonym map definition along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getWithResponse(String synonymMapName, RequestOptions requestOptions) {
        return this.serviceClient.getWithResponseAsync(synonymMapName, requestOptions);
    }

    /**
     * Lists all synonym maps available for a search service.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>$select</td><td>String</td><td>No</td><td>Selects which top-level properties to retrieve.
     * Specified as a comma-separated list of JSON property names,
     * or '*' for all properties. The default is all properties.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     value (Required): [
     *          (Required){
     *             name: String (Required)
     *             format: String (Required)
     *             synonyms: String (Required)
     *             encryptionKey (Optional): {
     *                 keyVaultKeyName: String (Required)
     *                 keyVaultKeyVersion: String (Required)
     *                 keyVaultUri: String (Required)
     *                 accessCredentials (Optional): {
     *                     applicationId: String (Required)
     *                     applicationSecret: String (Optional)
     *                 }
     *                 identity (Optional): {
     *                     &#64;odata.type: String (Required)
     *                 }
     *             }
     *             &#64;odata.etag: String (Optional)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response from a List SynonymMaps request along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.listWithResponseAsync(requestOptions);
    }

    /**
     * Creates a new synonym map.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     format: String (Required)
     *     synonyms: String (Required)
     *     encryptionKey (Optional): {
     *         keyVaultKeyName: String (Required)
     *         keyVaultKeyVersion: String (Required)
     *         keyVaultUri: String (Required)
     *         accessCredentials (Optional): {
     *             applicationId: String (Required)
     *             applicationSecret: String (Optional)
     *         }
     *         identity (Optional): {
     *             &#64;odata.type: String (Required)
     *         }
     *     }
     *     &#64;odata.etag: String (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     format: String (Required)
     *     synonyms: String (Required)
     *     encryptionKey (Optional): {
     *         keyVaultKeyName: String (Required)
     *         keyVaultKeyVersion: String (Required)
     *         keyVaultUri: String (Required)
     *         accessCredentials (Optional): {
     *             applicationId: String (Required)
     *             applicationSecret: String (Optional)
     *         }
     *         identity (Optional): {
     *             &#64;odata.type: String (Required)
     *         }
     *     }
     *     &#64;odata.etag: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param synonymMap The definition of the synonym map to create.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents a synonym map definition along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createWithResponse(BinaryData synonymMap, RequestOptions requestOptions) {
        return this.serviceClient.createWithResponseAsync(synonymMap, requestOptions);
    }

    /**
     * Creates a new synonym map or updates a synonym map if it already exists.
     * 
     * @param synonymMapName The name of the synonym map.
     * @param synonymMap The definition of the synonym map to create or update.
     * @param matchConditions Specifies HTTP options for conditional requests.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a synonym map definition on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SynonymMap> createOrUpdate(String synonymMapName, SynonymMap synonymMap,
        MatchConditions matchConditions) {
        // Generated convenience method for createOrUpdateWithResponse
        RequestOptions requestOptions = new RequestOptions();
        String ifMatch = matchConditions == null ? null : matchConditions.getIfMatch();
        String ifNoneMatch = matchConditions == null ? null : matchConditions.getIfNoneMatch();
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        return createOrUpdateWithResponse(synonymMapName, BinaryData.fromObject(synonymMap), requestOptions)
            .flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(SynonymMap.class));
    }

    /**
     * Creates a new synonym map or updates a synonym map if it already exists.
     * 
     * @param synonymMapName The name of the synonym map.
     * @param synonymMap The definition of the synonym map to create or update.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a synonym map definition on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SynonymMap> createOrUpdate(String synonymMapName, SynonymMap synonymMap) {
        // Generated convenience method for createOrUpdateWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createOrUpdateWithResponse(synonymMapName, BinaryData.fromObject(synonymMap), requestOptions)
            .flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(SynonymMap.class));
    }

    /**
     * Deletes a synonym map.
     * 
     * @param synonymMapName The name of the synonym map.
     * @param matchConditions Specifies HTTP options for conditional requests.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> delete(String synonymMapName, MatchConditions matchConditions) {
        // Generated convenience method for deleteWithResponse
        RequestOptions requestOptions = new RequestOptions();
        String ifMatch = matchConditions == null ? null : matchConditions.getIfMatch();
        String ifNoneMatch = matchConditions == null ? null : matchConditions.getIfNoneMatch();
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        return deleteWithResponse(synonymMapName, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Deletes a synonym map.
     * 
     * @param synonymMapName The name of the synonym map.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> delete(String synonymMapName) {
        // Generated convenience method for deleteWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return deleteWithResponse(synonymMapName, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Retrieves a synonym map definition.
     * 
     * @param synonymMapName The name of the synonym map.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a synonym map definition on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SynonymMap> get(String synonymMapName) {
        // Generated convenience method for getWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getWithResponse(synonymMapName, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(SynonymMap.class));
    }

    /**
     * Lists all synonym maps available for a search service.
     * 
     * @param select Selects which top-level properties to retrieve.
     * Specified as a comma-separated list of JSON property names,
     * or '*' for all properties. The default is all properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response from a List SynonymMaps request on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ListSynonymMapsResult> list(String select) {
        // Generated convenience method for listWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (select != null) {
            requestOptions.addQueryParam("$select", select, false);
        }
        return listWithResponse(requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(ListSynonymMapsResult.class));
    }

    /**
     * Lists all synonym maps available for a search service.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response from a List SynonymMaps request on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ListSynonymMapsResult> list() {
        // Generated convenience method for listWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return listWithResponse(requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(ListSynonymMapsResult.class));
    }

    /**
     * Creates a new synonym map.
     * 
     * @param synonymMap The definition of the synonym map to create.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a synonym map definition on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SynonymMap> create(SynonymMap synonymMap) {
        // Generated convenience method for createWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createWithResponse(BinaryData.fromObject(synonymMap), requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(SynonymMap.class));
    }
}
