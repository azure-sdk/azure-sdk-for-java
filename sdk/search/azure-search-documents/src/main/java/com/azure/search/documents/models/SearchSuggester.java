// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.search.documents.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Defines how the Suggest API should apply to a group of fields in the index.
 */
@Immutable
public final class SearchSuggester implements JsonSerializable<SearchSuggester> {
    /*
     * The name of the suggester.
     */
    @Generated
    private final String name;

    /*
     * A value indicating the capabilities of the suggester.
     */
    @Generated
    private final String searchMode = "analyzingInfixMatching";

    /*
     * The list of field names to which the suggester applies. Each field must be
     * searchable.
     */
    @Generated
    private final List<String> sourceFields;

    /**
     * Creates an instance of SearchSuggester class.
     * 
     * @param name the name value to set.
     * @param sourceFields the sourceFields value to set.
     */
    @Generated
    public SearchSuggester(String name, List<String> sourceFields) {
        this.name = name;
        this.sourceFields = sourceFields;
    }

    /**
     * Get the name property: The name of the suggester.
     * 
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Get the searchMode property: A value indicating the capabilities of the suggester.
     * 
     * @return the searchMode value.
     */
    @Generated
    public String getSearchMode() {
        return this.searchMode;
    }

    /**
     * Get the sourceFields property: The list of field names to which the suggester applies. Each field must be
     * searchable.
     * 
     * @return the sourceFields value.
     */
    @Generated
    public List<String> getSourceFields() {
        return this.sourceFields;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("searchMode", this.searchMode);
        jsonWriter.writeArrayField("sourceFields", this.sourceFields, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SearchSuggester from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SearchSuggester if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SearchSuggester.
     */
    @Generated
    public static SearchSuggester fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String name = null;
            List<String> sourceFields = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else if ("sourceFields".equals(fieldName)) {
                    sourceFields = reader.readArray(reader1 -> reader1.getString());
                } else {
                    reader.skipChildren();
                }
            }
            return new SearchSuggester(name, sourceFields);
        });
    }
}
