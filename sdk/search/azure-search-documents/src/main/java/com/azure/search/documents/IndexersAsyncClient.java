// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.search.documents;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.HttpHeaderName;
import com.azure.core.http.MatchConditions;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.FluxUtil;
import com.azure.search.documents.implementation.IndexersImpl;
import com.azure.search.documents.models.DocumentKeysOrIds;
import com.azure.search.documents.models.ListIndexersResult;
import com.azure.search.documents.models.SearchIndexer;
import com.azure.search.documents.models.SearchIndexerStatus;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the asynchronous SearchClient type.
 */
@ServiceClient(builder = SearchClientBuilder.class, isAsync = true)
public final class IndexersAsyncClient {
    @Generated
    private final IndexersImpl serviceClient;

    /**
     * Initializes an instance of IndexersAsyncClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    IndexersAsyncClient(IndexersImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Resets the change tracking state associated with an indexer.
     * 
     * @param indexerName The name of the indexer.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> resetWithResponse(String indexerName, RequestOptions requestOptions) {
        return this.serviceClient.resetWithResponseAsync(indexerName, requestOptions);
    }

    /**
     * Resets specific documents in the datasource to be selectively re-ingested by
     * the indexer.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>overwrite</td><td>Boolean</td><td>No</td><td>If false, keys or ids will be appended to existing ones. If
     * true, only the keys
     * or ids in this payload will be queued to be re-ingested.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Content-Type</td><td>String</td><td>No</td><td>The content type. Allowed values:
     * "application/json".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     documentKeys (Optional): [
     *         String (Optional)
     *     ]
     *     datasourceDocumentIds (Optional): [
     *         String (Optional)
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param indexerName The name of the indexer.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> resetDocsWithResponse(String indexerName, RequestOptions requestOptions) {
        return this.serviceClient.resetDocsWithResponseAsync(indexerName, requestOptions);
    }

    /**
     * Runs an indexer on-demand.
     * 
     * @param indexerName The name of the indexer.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> runWithResponse(String indexerName, RequestOptions requestOptions) {
        return this.serviceClient.runWithResponseAsync(indexerName, requestOptions);
    }

    /**
     * Creates a new indexer or updates an indexer if it already exists.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>ignoreResetRequirements</td><td>Boolean</td><td>No</td><td>Ignores cache reset requirements.</td></tr>
     * <tr><td>disableCacheReprocessingChangeDetection</td><td>Boolean</td><td>No</td><td>Disables cache reprocessing
     * change detection.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>Defines the If-Match condition. The operation will be
     * performed only if the ETag on the server matches this value.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>Defines the If-None-Match condition. The operation will
     * be performed only if the ETag on the server does not match this value.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     description: String (Optional)
     *     dataSourceName: String (Required)
     *     skillsetName: String (Optional)
     *     targetIndexName: String (Required)
     *     schedule (Optional): {
     *         interval: Duration (Required)
     *         startTime: OffsetDateTime (Optional)
     *     }
     *     parameters (Optional): {
     *         batchSize: Integer (Optional)
     *         maxFailedItems: Integer (Optional)
     *         maxFailedItemsPerBatch: Integer (Optional)
     *         configuration (Optional): {
     *             parsingMode: String(default/text/delimitedText/json/jsonArray/jsonLines/markdown) (Optional)
     *             excludedFileNameExtensions: String (Optional)
     *             indexedFileNameExtensions: String (Optional)
     *             failOnUnsupportedContentType: Boolean (Optional)
     *             failOnUnprocessableDocument: Boolean (Optional)
     *             indexStorageMetadataOnlyForOversizedDocuments: Boolean (Optional)
     *             delimitedTextHeaders: String (Optional)
     *             delimitedTextDelimiter: String (Optional)
     *             firstLineContainsHeaders: Boolean (Optional)
     *             markdownParsingSubmode: String(oneToMany/oneToOne) (Optional)
     *             markdownHeaderDepth: String(h1/h2/h3/h4/h5/h6) (Optional)
     *             documentRoot: String (Optional)
     *             dataToExtract: String(storageMetadata/allMetadata/contentAndMetadata) (Optional)
     *             imageAction: String(none/generateNormalizedImages/generateNormalizedImagePerPage) (Optional)
     *             allowSkillsetToReadFileData: Boolean (Optional)
     *             pdfTextRotationAlgorithm: String(none/detectAngles) (Optional)
     *             executionEnvironment: String(standard/private) (Optional)
     *             queryTimeout: String (Optional)
     *              (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *         }
     *     }
     *     fieldMappings (Optional): [
     *          (Optional){
     *             sourceFieldName: String (Required)
     *             targetFieldName: String (Optional)
     *             mappingFunction (Optional): {
     *                 name: String (Required)
     *                 parameters (Optional): {
     *                     String: BinaryData (Required)
     *                 }
     *             }
     *         }
     *     ]
     *     outputFieldMappings (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     disabled: Boolean (Optional)
     *     &#64;odata.etag: String (Optional)
     *     encryptionKey (Optional): {
     *         keyVaultKeyName: String (Required)
     *         keyVaultKeyVersion: String (Optional)
     *         keyVaultUri: String (Required)
     *         accessCredentials (Optional): {
     *             applicationId: String (Required)
     *             applicationSecret: String (Optional)
     *         }
     *         identity (Optional): {
     *             &#64;odata.type: String (Required)
     *         }
     *     }
     *     cache (Optional): {
     *         storageConnectionString: String (Optional)
     *         enableReprocessing: Boolean (Optional)
     *         identity (Optional): (recursive schema, see identity above)
     *         id: String (Optional)
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     description: String (Optional)
     *     dataSourceName: String (Required)
     *     skillsetName: String (Optional)
     *     targetIndexName: String (Required)
     *     schedule (Optional): {
     *         interval: Duration (Required)
     *         startTime: OffsetDateTime (Optional)
     *     }
     *     parameters (Optional): {
     *         batchSize: Integer (Optional)
     *         maxFailedItems: Integer (Optional)
     *         maxFailedItemsPerBatch: Integer (Optional)
     *         configuration (Optional): {
     *             parsingMode: String(default/text/delimitedText/json/jsonArray/jsonLines/markdown) (Optional)
     *             excludedFileNameExtensions: String (Optional)
     *             indexedFileNameExtensions: String (Optional)
     *             failOnUnsupportedContentType: Boolean (Optional)
     *             failOnUnprocessableDocument: Boolean (Optional)
     *             indexStorageMetadataOnlyForOversizedDocuments: Boolean (Optional)
     *             delimitedTextHeaders: String (Optional)
     *             delimitedTextDelimiter: String (Optional)
     *             firstLineContainsHeaders: Boolean (Optional)
     *             markdownParsingSubmode: String(oneToMany/oneToOne) (Optional)
     *             markdownHeaderDepth: String(h1/h2/h3/h4/h5/h6) (Optional)
     *             documentRoot: String (Optional)
     *             dataToExtract: String(storageMetadata/allMetadata/contentAndMetadata) (Optional)
     *             imageAction: String(none/generateNormalizedImages/generateNormalizedImagePerPage) (Optional)
     *             allowSkillsetToReadFileData: Boolean (Optional)
     *             pdfTextRotationAlgorithm: String(none/detectAngles) (Optional)
     *             executionEnvironment: String(standard/private) (Optional)
     *             queryTimeout: String (Optional)
     *              (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *         }
     *     }
     *     fieldMappings (Optional): [
     *          (Optional){
     *             sourceFieldName: String (Required)
     *             targetFieldName: String (Optional)
     *             mappingFunction (Optional): {
     *                 name: String (Required)
     *                 parameters (Optional): {
     *                     String: BinaryData (Required)
     *                 }
     *             }
     *         }
     *     ]
     *     outputFieldMappings (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     disabled: Boolean (Optional)
     *     &#64;odata.etag: String (Optional)
     *     encryptionKey (Optional): {
     *         keyVaultKeyName: String (Required)
     *         keyVaultKeyVersion: String (Optional)
     *         keyVaultUri: String (Required)
     *         accessCredentials (Optional): {
     *             applicationId: String (Required)
     *             applicationSecret: String (Optional)
     *         }
     *         identity (Optional): {
     *             &#64;odata.type: String (Required)
     *         }
     *     }
     *     cache (Optional): {
     *         storageConnectionString: String (Optional)
     *         enableReprocessing: Boolean (Optional)
     *         identity (Optional): (recursive schema, see identity above)
     *         id: String (Optional)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param indexerName The name of the indexer.
     * @param indexer The definition of the indexer to create or update.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents an indexer along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createOrUpdateWithResponse(String indexerName, BinaryData indexer,
        RequestOptions requestOptions) {
        return this.serviceClient.createOrUpdateWithResponseAsync(indexerName, indexer, requestOptions);
    }

    /**
     * Deletes an indexer.
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>Defines the If-Match condition. The operation will be
     * performed only if the ETag on the server matches this value.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>Defines the If-None-Match condition. The operation will
     * be performed only if the ETag on the server does not match this value.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param indexerName The name of the indexer.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteWithResponse(String indexerName, RequestOptions requestOptions) {
        return this.serviceClient.deleteWithResponseAsync(indexerName, requestOptions);
    }

    /**
     * Retrieves an indexer definition.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     description: String (Optional)
     *     dataSourceName: String (Required)
     *     skillsetName: String (Optional)
     *     targetIndexName: String (Required)
     *     schedule (Optional): {
     *         interval: Duration (Required)
     *         startTime: OffsetDateTime (Optional)
     *     }
     *     parameters (Optional): {
     *         batchSize: Integer (Optional)
     *         maxFailedItems: Integer (Optional)
     *         maxFailedItemsPerBatch: Integer (Optional)
     *         configuration (Optional): {
     *             parsingMode: String(default/text/delimitedText/json/jsonArray/jsonLines/markdown) (Optional)
     *             excludedFileNameExtensions: String (Optional)
     *             indexedFileNameExtensions: String (Optional)
     *             failOnUnsupportedContentType: Boolean (Optional)
     *             failOnUnprocessableDocument: Boolean (Optional)
     *             indexStorageMetadataOnlyForOversizedDocuments: Boolean (Optional)
     *             delimitedTextHeaders: String (Optional)
     *             delimitedTextDelimiter: String (Optional)
     *             firstLineContainsHeaders: Boolean (Optional)
     *             markdownParsingSubmode: String(oneToMany/oneToOne) (Optional)
     *             markdownHeaderDepth: String(h1/h2/h3/h4/h5/h6) (Optional)
     *             documentRoot: String (Optional)
     *             dataToExtract: String(storageMetadata/allMetadata/contentAndMetadata) (Optional)
     *             imageAction: String(none/generateNormalizedImages/generateNormalizedImagePerPage) (Optional)
     *             allowSkillsetToReadFileData: Boolean (Optional)
     *             pdfTextRotationAlgorithm: String(none/detectAngles) (Optional)
     *             executionEnvironment: String(standard/private) (Optional)
     *             queryTimeout: String (Optional)
     *              (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *         }
     *     }
     *     fieldMappings (Optional): [
     *          (Optional){
     *             sourceFieldName: String (Required)
     *             targetFieldName: String (Optional)
     *             mappingFunction (Optional): {
     *                 name: String (Required)
     *                 parameters (Optional): {
     *                     String: BinaryData (Required)
     *                 }
     *             }
     *         }
     *     ]
     *     outputFieldMappings (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     disabled: Boolean (Optional)
     *     &#64;odata.etag: String (Optional)
     *     encryptionKey (Optional): {
     *         keyVaultKeyName: String (Required)
     *         keyVaultKeyVersion: String (Optional)
     *         keyVaultUri: String (Required)
     *         accessCredentials (Optional): {
     *             applicationId: String (Required)
     *             applicationSecret: String (Optional)
     *         }
     *         identity (Optional): {
     *             &#64;odata.type: String (Required)
     *         }
     *     }
     *     cache (Optional): {
     *         storageConnectionString: String (Optional)
     *         enableReprocessing: Boolean (Optional)
     *         identity (Optional): (recursive schema, see identity above)
     *         id: String (Optional)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param indexerName The name of the indexer.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents an indexer along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getWithResponse(String indexerName, RequestOptions requestOptions) {
        return this.serviceClient.getWithResponseAsync(indexerName, requestOptions);
    }

    /**
     * Lists all indexers available for a search service.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>$select</td><td>String</td><td>No</td><td>Selects which top-level properties to retrieve.
     * Specified as a comma-separated list of JSON property names,
     * or '*' for all properties. The default is all properties.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     value (Required): [
     *          (Required){
     *             name: String (Required)
     *             description: String (Optional)
     *             dataSourceName: String (Required)
     *             skillsetName: String (Optional)
     *             targetIndexName: String (Required)
     *             schedule (Optional): {
     *                 interval: Duration (Required)
     *                 startTime: OffsetDateTime (Optional)
     *             }
     *             parameters (Optional): {
     *                 batchSize: Integer (Optional)
     *                 maxFailedItems: Integer (Optional)
     *                 maxFailedItemsPerBatch: Integer (Optional)
     *                 configuration (Optional): {
     *                     parsingMode: String(default/text/delimitedText/json/jsonArray/jsonLines/markdown) (Optional)
     *                     excludedFileNameExtensions: String (Optional)
     *                     indexedFileNameExtensions: String (Optional)
     *                     failOnUnsupportedContentType: Boolean (Optional)
     *                     failOnUnprocessableDocument: Boolean (Optional)
     *                     indexStorageMetadataOnlyForOversizedDocuments: Boolean (Optional)
     *                     delimitedTextHeaders: String (Optional)
     *                     delimitedTextDelimiter: String (Optional)
     *                     firstLineContainsHeaders: Boolean (Optional)
     *                     markdownParsingSubmode: String(oneToMany/oneToOne) (Optional)
     *                     markdownHeaderDepth: String(h1/h2/h3/h4/h5/h6) (Optional)
     *                     documentRoot: String (Optional)
     *                     dataToExtract: String(storageMetadata/allMetadata/contentAndMetadata) (Optional)
     *                     imageAction: String(none/generateNormalizedImages/generateNormalizedImagePerPage) (Optional)
     *                     allowSkillsetToReadFileData: Boolean (Optional)
     *                     pdfTextRotationAlgorithm: String(none/detectAngles) (Optional)
     *                     executionEnvironment: String(standard/private) (Optional)
     *                     queryTimeout: String (Optional)
     *                      (Optional): {
     *                         String: BinaryData (Required)
     *                     }
     *                 }
     *             }
     *             fieldMappings (Optional): [
     *                  (Optional){
     *                     sourceFieldName: String (Required)
     *                     targetFieldName: String (Optional)
     *                     mappingFunction (Optional): {
     *                         name: String (Required)
     *                         parameters (Optional): {
     *                             String: BinaryData (Required)
     *                         }
     *                     }
     *                 }
     *             ]
     *             outputFieldMappings (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             disabled: Boolean (Optional)
     *             &#64;odata.etag: String (Optional)
     *             encryptionKey (Optional): {
     *                 keyVaultKeyName: String (Required)
     *                 keyVaultKeyVersion: String (Optional)
     *                 keyVaultUri: String (Required)
     *                 accessCredentials (Optional): {
     *                     applicationId: String (Required)
     *                     applicationSecret: String (Optional)
     *                 }
     *                 identity (Optional): {
     *                     &#64;odata.type: String (Required)
     *                 }
     *             }
     *             cache (Optional): {
     *                 storageConnectionString: String (Optional)
     *                 enableReprocessing: Boolean (Optional)
     *                 identity (Optional): (recursive schema, see identity above)
     *                 id: String (Optional)
     *             }
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response from a List Indexers request along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.listWithResponseAsync(requestOptions);
    }

    /**
     * Creates a new indexer.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     description: String (Optional)
     *     dataSourceName: String (Required)
     *     skillsetName: String (Optional)
     *     targetIndexName: String (Required)
     *     schedule (Optional): {
     *         interval: Duration (Required)
     *         startTime: OffsetDateTime (Optional)
     *     }
     *     parameters (Optional): {
     *         batchSize: Integer (Optional)
     *         maxFailedItems: Integer (Optional)
     *         maxFailedItemsPerBatch: Integer (Optional)
     *         configuration (Optional): {
     *             parsingMode: String(default/text/delimitedText/json/jsonArray/jsonLines/markdown) (Optional)
     *             excludedFileNameExtensions: String (Optional)
     *             indexedFileNameExtensions: String (Optional)
     *             failOnUnsupportedContentType: Boolean (Optional)
     *             failOnUnprocessableDocument: Boolean (Optional)
     *             indexStorageMetadataOnlyForOversizedDocuments: Boolean (Optional)
     *             delimitedTextHeaders: String (Optional)
     *             delimitedTextDelimiter: String (Optional)
     *             firstLineContainsHeaders: Boolean (Optional)
     *             markdownParsingSubmode: String(oneToMany/oneToOne) (Optional)
     *             markdownHeaderDepth: String(h1/h2/h3/h4/h5/h6) (Optional)
     *             documentRoot: String (Optional)
     *             dataToExtract: String(storageMetadata/allMetadata/contentAndMetadata) (Optional)
     *             imageAction: String(none/generateNormalizedImages/generateNormalizedImagePerPage) (Optional)
     *             allowSkillsetToReadFileData: Boolean (Optional)
     *             pdfTextRotationAlgorithm: String(none/detectAngles) (Optional)
     *             executionEnvironment: String(standard/private) (Optional)
     *             queryTimeout: String (Optional)
     *              (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *         }
     *     }
     *     fieldMappings (Optional): [
     *          (Optional){
     *             sourceFieldName: String (Required)
     *             targetFieldName: String (Optional)
     *             mappingFunction (Optional): {
     *                 name: String (Required)
     *                 parameters (Optional): {
     *                     String: BinaryData (Required)
     *                 }
     *             }
     *         }
     *     ]
     *     outputFieldMappings (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     disabled: Boolean (Optional)
     *     &#64;odata.etag: String (Optional)
     *     encryptionKey (Optional): {
     *         keyVaultKeyName: String (Required)
     *         keyVaultKeyVersion: String (Optional)
     *         keyVaultUri: String (Required)
     *         accessCredentials (Optional): {
     *             applicationId: String (Required)
     *             applicationSecret: String (Optional)
     *         }
     *         identity (Optional): {
     *             &#64;odata.type: String (Required)
     *         }
     *     }
     *     cache (Optional): {
     *         storageConnectionString: String (Optional)
     *         enableReprocessing: Boolean (Optional)
     *         identity (Optional): (recursive schema, see identity above)
     *         id: String (Optional)
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     description: String (Optional)
     *     dataSourceName: String (Required)
     *     skillsetName: String (Optional)
     *     targetIndexName: String (Required)
     *     schedule (Optional): {
     *         interval: Duration (Required)
     *         startTime: OffsetDateTime (Optional)
     *     }
     *     parameters (Optional): {
     *         batchSize: Integer (Optional)
     *         maxFailedItems: Integer (Optional)
     *         maxFailedItemsPerBatch: Integer (Optional)
     *         configuration (Optional): {
     *             parsingMode: String(default/text/delimitedText/json/jsonArray/jsonLines/markdown) (Optional)
     *             excludedFileNameExtensions: String (Optional)
     *             indexedFileNameExtensions: String (Optional)
     *             failOnUnsupportedContentType: Boolean (Optional)
     *             failOnUnprocessableDocument: Boolean (Optional)
     *             indexStorageMetadataOnlyForOversizedDocuments: Boolean (Optional)
     *             delimitedTextHeaders: String (Optional)
     *             delimitedTextDelimiter: String (Optional)
     *             firstLineContainsHeaders: Boolean (Optional)
     *             markdownParsingSubmode: String(oneToMany/oneToOne) (Optional)
     *             markdownHeaderDepth: String(h1/h2/h3/h4/h5/h6) (Optional)
     *             documentRoot: String (Optional)
     *             dataToExtract: String(storageMetadata/allMetadata/contentAndMetadata) (Optional)
     *             imageAction: String(none/generateNormalizedImages/generateNormalizedImagePerPage) (Optional)
     *             allowSkillsetToReadFileData: Boolean (Optional)
     *             pdfTextRotationAlgorithm: String(none/detectAngles) (Optional)
     *             executionEnvironment: String(standard/private) (Optional)
     *             queryTimeout: String (Optional)
     *              (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *         }
     *     }
     *     fieldMappings (Optional): [
     *          (Optional){
     *             sourceFieldName: String (Required)
     *             targetFieldName: String (Optional)
     *             mappingFunction (Optional): {
     *                 name: String (Required)
     *                 parameters (Optional): {
     *                     String: BinaryData (Required)
     *                 }
     *             }
     *         }
     *     ]
     *     outputFieldMappings (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     disabled: Boolean (Optional)
     *     &#64;odata.etag: String (Optional)
     *     encryptionKey (Optional): {
     *         keyVaultKeyName: String (Required)
     *         keyVaultKeyVersion: String (Optional)
     *         keyVaultUri: String (Required)
     *         accessCredentials (Optional): {
     *             applicationId: String (Required)
     *             applicationSecret: String (Optional)
     *         }
     *         identity (Optional): {
     *             &#64;odata.type: String (Required)
     *         }
     *     }
     *     cache (Optional): {
     *         storageConnectionString: String (Optional)
     *         enableReprocessing: Boolean (Optional)
     *         identity (Optional): (recursive schema, see identity above)
     *         id: String (Optional)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param indexer The definition of the indexer to create.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents an indexer along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createWithResponse(BinaryData indexer, RequestOptions requestOptions) {
        return this.serviceClient.createWithResponseAsync(indexer, requestOptions);
    }

    /**
     * Returns the current status and execution history of an indexer.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     status: String(unknown/error/running) (Required)
     *     lastResult (Optional): {
     *         status: String(transientFailure/success/inProgress/reset) (Required)
     *         statusDetail: String(resetDocs) (Optional)
     *         currentState (Optional): {
     *             mode: String(indexingAllDocs/indexingResetDocs) (Optional)
     *             allDocsInitialChangeTrackingState: String (Optional)
     *             allDocsFinalChangeTrackingState: String (Optional)
     *             resetDocsInitialChangeTrackingState: String (Optional)
     *             resetDocsFinalChangeTrackingState: String (Optional)
     *             resetDocumentKeys (Optional): [
     *                 String (Optional)
     *             ]
     *             resetDatasourceDocumentIds (Optional): [
     *                 String (Optional)
     *             ]
     *         }
     *         errorMessage: String (Optional)
     *         startTime: OffsetDateTime (Optional)
     *         endTime: OffsetDateTime (Optional)
     *         errors (Required): [
     *              (Required){
     *                 key: String (Optional)
     *                 errorMessage: String (Required)
     *                 statusCode: int (Required)
     *                 name: String (Optional)
     *                 details: String (Optional)
     *                 documentationLink: String (Optional)
     *             }
     *         ]
     *         warnings (Required): [
     *              (Required){
     *                 key: String (Optional)
     *                 message: String (Required)
     *                 name: String (Optional)
     *                 details: String (Optional)
     *                 documentationLink: String (Optional)
     *             }
     *         ]
     *         itemsProcessed: int (Required)
     *         itemsFailed: int (Required)
     *         initialTrackingState: String (Optional)
     *         finalTrackingState: String (Optional)
     *     }
     *     executionHistory (Required): [
     *         (recursive schema, see above)
     *     ]
     *     limits (Required): {
     *         maxRunTime: Duration (Optional)
     *         maxDocumentExtractionSize: Long (Optional)
     *         maxDocumentContentCharactersToExtract: Long (Optional)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param indexerName The name of the indexer.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents the current status and execution history of an indexer along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getStatusWithResponse(String indexerName, RequestOptions requestOptions) {
        return this.serviceClient.getStatusWithResponseAsync(indexerName, requestOptions);
    }

    /**
     * Resets the change tracking state associated with an indexer.
     * 
     * @param indexerName The name of the indexer.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> reset(String indexerName) {
        // Generated convenience method for resetWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return resetWithResponse(indexerName, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Resets specific documents in the datasource to be selectively re-ingested by
     * the indexer.
     * 
     * @param indexerName The name of the indexer.
     * @param overwrite If false, keys or ids will be appended to existing ones. If true, only the keys
     * or ids in this payload will be queued to be re-ingested.
     * @param keysOrIds The keys or ids of the documents to be re-ingested. If keys are provided, the
     * document key field must be specified in the indexer configuration. If ids are
     * provided, the document key field is ignored.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> resetDocs(String indexerName, Boolean overwrite, DocumentKeysOrIds keysOrIds) {
        // Generated convenience method for resetDocsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (overwrite != null) {
            requestOptions.addQueryParam("overwrite", String.valueOf(overwrite), false);
        }
        if (keysOrIds != null) {
            requestOptions.setBody(BinaryData.fromObject(keysOrIds));
        }
        return resetDocsWithResponse(indexerName, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Resets specific documents in the datasource to be selectively re-ingested by
     * the indexer.
     * 
     * @param indexerName The name of the indexer.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> resetDocs(String indexerName) {
        // Generated convenience method for resetDocsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return resetDocsWithResponse(indexerName, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Runs an indexer on-demand.
     * 
     * @param indexerName The name of the indexer.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> run(String indexerName) {
        // Generated convenience method for runWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return runWithResponse(indexerName, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Creates a new indexer or updates an indexer if it already exists.
     * 
     * @param indexerName The name of the indexer.
     * @param indexer The definition of the indexer to create or update.
     * @param skipIndexerResetRequirementForCache Ignores cache reset requirements.
     * @param disableCacheReprocessingChangeDetection Disables cache reprocessing change detection.
     * @param matchConditions Specifies HTTP options for conditional requests.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents an indexer on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SearchIndexer> createOrUpdate(String indexerName, SearchIndexer indexer,
        Boolean skipIndexerResetRequirementForCache, Boolean disableCacheReprocessingChangeDetection,
        MatchConditions matchConditions) {
        // Generated convenience method for createOrUpdateWithResponse
        RequestOptions requestOptions = new RequestOptions();
        String ifMatch = matchConditions == null ? null : matchConditions.getIfMatch();
        String ifNoneMatch = matchConditions == null ? null : matchConditions.getIfNoneMatch();
        if (skipIndexerResetRequirementForCache != null) {
            requestOptions.addQueryParam("ignoreResetRequirements", String.valueOf(skipIndexerResetRequirementForCache),
                false);
        }
        if (disableCacheReprocessingChangeDetection != null) {
            requestOptions.addQueryParam("disableCacheReprocessingChangeDetection",
                String.valueOf(disableCacheReprocessingChangeDetection), false);
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        return createOrUpdateWithResponse(indexerName, BinaryData.fromObject(indexer), requestOptions)
            .flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(SearchIndexer.class));
    }

    /**
     * Creates a new indexer or updates an indexer if it already exists.
     * 
     * @param indexerName The name of the indexer.
     * @param indexer The definition of the indexer to create or update.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents an indexer on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SearchIndexer> createOrUpdate(String indexerName, SearchIndexer indexer) {
        // Generated convenience method for createOrUpdateWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createOrUpdateWithResponse(indexerName, BinaryData.fromObject(indexer), requestOptions)
            .flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(SearchIndexer.class));
    }

    /**
     * Deletes an indexer.
     * 
     * @param indexerName The name of the indexer.
     * @param matchConditions Specifies HTTP options for conditional requests.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> delete(String indexerName, MatchConditions matchConditions) {
        // Generated convenience method for deleteWithResponse
        RequestOptions requestOptions = new RequestOptions();
        String ifMatch = matchConditions == null ? null : matchConditions.getIfMatch();
        String ifNoneMatch = matchConditions == null ? null : matchConditions.getIfNoneMatch();
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        return deleteWithResponse(indexerName, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Deletes an indexer.
     * 
     * @param indexerName The name of the indexer.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> delete(String indexerName) {
        // Generated convenience method for deleteWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return deleteWithResponse(indexerName, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Retrieves an indexer definition.
     * 
     * @param indexerName The name of the indexer.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents an indexer on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SearchIndexer> get(String indexerName) {
        // Generated convenience method for getWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getWithResponse(indexerName, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(SearchIndexer.class));
    }

    /**
     * Lists all indexers available for a search service.
     * 
     * @param select Selects which top-level properties to retrieve.
     * Specified as a comma-separated list of JSON property names,
     * or '*' for all properties. The default is all properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response from a List Indexers request on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ListIndexersResult> list(String select) {
        // Generated convenience method for listWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (select != null) {
            requestOptions.addQueryParam("$select", select, false);
        }
        return listWithResponse(requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(ListIndexersResult.class));
    }

    /**
     * Lists all indexers available for a search service.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response from a List Indexers request on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ListIndexersResult> list() {
        // Generated convenience method for listWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return listWithResponse(requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(ListIndexersResult.class));
    }

    /**
     * Creates a new indexer.
     * 
     * @param indexer The definition of the indexer to create.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents an indexer on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SearchIndexer> create(SearchIndexer indexer) {
        // Generated convenience method for createWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createWithResponse(BinaryData.fromObject(indexer), requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(SearchIndexer.class));
    }

    /**
     * Returns the current status and execution history of an indexer.
     * 
     * @param indexerName The name of the indexer.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents the current status and execution history of an indexer on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SearchIndexerStatus> getStatus(String indexerName) {
        // Generated convenience method for getStatusWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getStatusWithResponse(indexerName, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(SearchIndexerStatus.class));
    }
}
