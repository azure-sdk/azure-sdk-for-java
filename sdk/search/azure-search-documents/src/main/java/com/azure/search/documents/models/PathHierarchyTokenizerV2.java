// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.search.documents.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Tokenizer for path-like hierarchies. This tokenizer is implemented using Apache
 * Lucene.
 */
@Fluent
public final class PathHierarchyTokenizerV2 extends LexicalTokenizer {
    /*
     * The discriminator for derived types.
     */
    @Generated
    private String odataType = "#Microsoft.Azure.Search.PathHierarchyTokenizerV2";

    /*
     * The delimiter character to use. Default is "/".
     */
    @Generated
    private String delimiter;

    /*
     * A value that, if set, replaces the delimiter character. Default is "/".
     */
    @Generated
    private String replacement;

    /*
     * The maximum token length. Default and maximum is 300.
     */
    @Generated
    private Integer maxTokenLength;

    /*
     * A value indicating whether to generate tokens in reverse order. Default is
     * false.
     */
    @Generated
    private Boolean reverseTokenOrder;

    /*
     * The number of initial tokens to skip. Default is 0.
     */
    @Generated
    private Integer numberOfTokensToSkip;

    /**
     * Creates an instance of PathHierarchyTokenizerV2 class.
     * 
     * @param name the name value to set.
     */
    @Generated
    public PathHierarchyTokenizerV2(String name) {
        super(name);
    }

    /**
     * Get the odataType property: The discriminator for derived types.
     * 
     * @return the odataType value.
     */
    @Generated
    @Override
    public String getOdataType() {
        return this.odataType;
    }

    /**
     * Get the delimiter property: The delimiter character to use. Default is "/".
     * 
     * @return the delimiter value.
     */
    @Generated
    public String getDelimiter() {
        return this.delimiter;
    }

    /**
     * Set the delimiter property: The delimiter character to use. Default is "/".
     * 
     * @param delimiter the delimiter value to set.
     * @return the PathHierarchyTokenizerV2 object itself.
     */
    @Generated
    public PathHierarchyTokenizerV2 setDelimiter(String delimiter) {
        this.delimiter = delimiter;
        return this;
    }

    /**
     * Get the replacement property: A value that, if set, replaces the delimiter character. Default is "/".
     * 
     * @return the replacement value.
     */
    @Generated
    public String getReplacement() {
        return this.replacement;
    }

    /**
     * Set the replacement property: A value that, if set, replaces the delimiter character. Default is "/".
     * 
     * @param replacement the replacement value to set.
     * @return the PathHierarchyTokenizerV2 object itself.
     */
    @Generated
    public PathHierarchyTokenizerV2 setReplacement(String replacement) {
        this.replacement = replacement;
        return this;
    }

    /**
     * Get the maxTokenLength property: The maximum token length. Default and maximum is 300.
     * 
     * @return the maxTokenLength value.
     */
    @Generated
    public Integer getMaxTokenLength() {
        return this.maxTokenLength;
    }

    /**
     * Set the maxTokenLength property: The maximum token length. Default and maximum is 300.
     * 
     * @param maxTokenLength the maxTokenLength value to set.
     * @return the PathHierarchyTokenizerV2 object itself.
     */
    @Generated
    public PathHierarchyTokenizerV2 setMaxTokenLength(Integer maxTokenLength) {
        this.maxTokenLength = maxTokenLength;
        return this;
    }

    /**
     * Get the reverseTokenOrder property: A value indicating whether to generate tokens in reverse order. Default is
     * false.
     * 
     * @return the reverseTokenOrder value.
     */
    @Generated
    public Boolean isReverseTokenOrder() {
        return this.reverseTokenOrder;
    }

    /**
     * Set the reverseTokenOrder property: A value indicating whether to generate tokens in reverse order. Default is
     * false.
     * 
     * @param reverseTokenOrder the reverseTokenOrder value to set.
     * @return the PathHierarchyTokenizerV2 object itself.
     */
    @Generated
    public PathHierarchyTokenizerV2 setReverseTokenOrder(Boolean reverseTokenOrder) {
        this.reverseTokenOrder = reverseTokenOrder;
        return this;
    }

    /**
     * Get the numberOfTokensToSkip property: The number of initial tokens to skip. Default is 0.
     * 
     * @return the numberOfTokensToSkip value.
     */
    @Generated
    public Integer getNumberOfTokensToSkip() {
        return this.numberOfTokensToSkip;
    }

    /**
     * Set the numberOfTokensToSkip property: The number of initial tokens to skip. Default is 0.
     * 
     * @param numberOfTokensToSkip the numberOfTokensToSkip value to set.
     * @return the PathHierarchyTokenizerV2 object itself.
     */
    @Generated
    public PathHierarchyTokenizerV2 setNumberOfTokensToSkip(Integer numberOfTokensToSkip) {
        this.numberOfTokensToSkip = numberOfTokensToSkip;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", getName());
        jsonWriter.writeStringField("@odata.type", this.odataType);
        jsonWriter.writeStringField("delimiter", this.delimiter);
        jsonWriter.writeStringField("replacement", this.replacement);
        jsonWriter.writeNumberField("maxTokenLength", this.maxTokenLength);
        jsonWriter.writeBooleanField("reverse", this.reverseTokenOrder);
        jsonWriter.writeNumberField("skip", this.numberOfTokensToSkip);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PathHierarchyTokenizerV2 from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PathHierarchyTokenizerV2 if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the PathHierarchyTokenizerV2.
     */
    @Generated
    public static PathHierarchyTokenizerV2 fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String name = null;
            String odataType = "#Microsoft.Azure.Search.PathHierarchyTokenizerV2";
            String delimiter = null;
            String replacement = null;
            Integer maxTokenLength = null;
            Boolean reverseTokenOrder = null;
            Integer numberOfTokensToSkip = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else if ("@odata.type".equals(fieldName)) {
                    odataType = reader.getString();
                } else if ("delimiter".equals(fieldName)) {
                    delimiter = reader.getString();
                } else if ("replacement".equals(fieldName)) {
                    replacement = reader.getString();
                } else if ("maxTokenLength".equals(fieldName)) {
                    maxTokenLength = reader.getNullable(JsonReader::getInt);
                } else if ("reverse".equals(fieldName)) {
                    reverseTokenOrder = reader.getNullable(JsonReader::getBoolean);
                } else if ("skip".equals(fieldName)) {
                    numberOfTokensToSkip = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }
            PathHierarchyTokenizerV2 deserializedPathHierarchyTokenizerV2 = new PathHierarchyTokenizerV2(name);
            deserializedPathHierarchyTokenizerV2.odataType = odataType;
            deserializedPathHierarchyTokenizerV2.delimiter = delimiter;
            deserializedPathHierarchyTokenizerV2.replacement = replacement;
            deserializedPathHierarchyTokenizerV2.maxTokenLength = maxTokenLength;
            deserializedPathHierarchyTokenizerV2.reverseTokenOrder = reverseTokenOrder;
            deserializedPathHierarchyTokenizerV2.numberOfTokensToSkip = numberOfTokensToSkip;

            return deserializedPathHierarchyTokenizerV2;
        });
    }
}
