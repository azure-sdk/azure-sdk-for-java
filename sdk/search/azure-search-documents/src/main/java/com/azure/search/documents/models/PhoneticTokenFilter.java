// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.search.documents.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Create tokens for phonetic matches. This token filter is implemented using
 * Apache Lucene.
 */
@Fluent
public final class PhoneticTokenFilter extends TokenFilter {
    /*
     * The discriminator for derived types.
     */
    @Generated
    private String odataType = "#Microsoft.Azure.Search.PhoneticTokenFilter";

    /*
     * The phonetic encoder to use. Default is "metaphone".
     */
    @Generated
    private PhoneticEncoder encoder;

    /*
     * A value indicating whether encoded tokens should replace original tokens. If
     * false, encoded tokens are added as synonyms. Default is true.
     */
    @Generated
    private Boolean replaceOriginalTokens;

    /**
     * Creates an instance of PhoneticTokenFilter class.
     * 
     * @param name the name value to set.
     */
    @Generated
    public PhoneticTokenFilter(String name) {
        super(name);
    }

    /**
     * Get the odataType property: The discriminator for derived types.
     * 
     * @return the odataType value.
     */
    @Generated
    @Override
    public String getOdataType() {
        return this.odataType;
    }

    /**
     * Get the encoder property: The phonetic encoder to use. Default is "metaphone".
     * 
     * @return the encoder value.
     */
    @Generated
    public PhoneticEncoder getEncoder() {
        return this.encoder;
    }

    /**
     * Set the encoder property: The phonetic encoder to use. Default is "metaphone".
     * 
     * @param encoder the encoder value to set.
     * @return the PhoneticTokenFilter object itself.
     */
    @Generated
    public PhoneticTokenFilter setEncoder(PhoneticEncoder encoder) {
        this.encoder = encoder;
        return this;
    }

    /**
     * Get the replaceOriginalTokens property: A value indicating whether encoded tokens should replace original tokens.
     * If
     * false, encoded tokens are added as synonyms. Default is true.
     * 
     * @return the replaceOriginalTokens value.
     */
    @Generated
    public Boolean isReplaceOriginalTokens() {
        return this.replaceOriginalTokens;
    }

    /**
     * Set the replaceOriginalTokens property: A value indicating whether encoded tokens should replace original tokens.
     * If
     * false, encoded tokens are added as synonyms. Default is true.
     * 
     * @param replaceOriginalTokens the replaceOriginalTokens value to set.
     * @return the PhoneticTokenFilter object itself.
     */
    @Generated
    public PhoneticTokenFilter setReplaceOriginalTokens(Boolean replaceOriginalTokens) {
        this.replaceOriginalTokens = replaceOriginalTokens;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", getName());
        jsonWriter.writeStringField("@odata.type", this.odataType);
        jsonWriter.writeStringField("encoder", this.encoder == null ? null : this.encoder.toString());
        jsonWriter.writeBooleanField("replace", this.replaceOriginalTokens);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PhoneticTokenFilter from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PhoneticTokenFilter if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the PhoneticTokenFilter.
     */
    @Generated
    public static PhoneticTokenFilter fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String name = null;
            String odataType = "#Microsoft.Azure.Search.PhoneticTokenFilter";
            PhoneticEncoder encoder = null;
            Boolean replaceOriginalTokens = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else if ("@odata.type".equals(fieldName)) {
                    odataType = reader.getString();
                } else if ("encoder".equals(fieldName)) {
                    encoder = PhoneticEncoder.fromString(reader.getString());
                } else if ("replace".equals(fieldName)) {
                    replaceOriginalTokens = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }
            PhoneticTokenFilter deserializedPhoneticTokenFilter = new PhoneticTokenFilter(name);
            deserializedPhoneticTokenFilter.odataType = odataType;
            deserializedPhoneticTokenFilter.encoder = encoder;
            deserializedPhoneticTokenFilter.replaceOriginalTokens = replaceOriginalTokens;

            return deserializedPhoneticTokenFilter;
        });
    }
}
