// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.search.documents.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Tokenizer that uses regex pattern matching to construct distinct tokens. This
 * tokenizer is implemented using Apache Lucene.
 */
@Fluent
public final class PatternTokenizer extends LexicalTokenizer {
    /*
     * The discriminator for derived types.
     */
    @Generated
    private String odataType = "#Microsoft.Azure.Search.PatternTokenizer";

    /*
     * A regular expression pattern to match token separators. Default is an
     * expression that matches one or more non-word characters.
     */
    @Generated
    private String pattern;

    /*
     * Regular expression flags.
     */
    @Generated
    private RegexFlags flags;

    /*
     * The zero-based ordinal of the matching group in the regular expression pattern
     * to extract into tokens. Use -1 if you want to use the entire pattern to split
     * the input into tokens, irrespective of matching groups. Default is -1.
     */
    @Generated
    private Integer group;

    /**
     * Creates an instance of PatternTokenizer class.
     * 
     * @param name the name value to set.
     */
    @Generated
    public PatternTokenizer(String name) {
        super(name);
    }

    /**
     * Get the odataType property: The discriminator for derived types.
     * 
     * @return the odataType value.
     */
    @Generated
    @Override
    public String getOdataType() {
        return this.odataType;
    }

    /**
     * Get the pattern property: A regular expression pattern to match token separators. Default is an
     * expression that matches one or more non-word characters.
     * 
     * @return the pattern value.
     */
    @Generated
    public String getPattern() {
        return this.pattern;
    }

    /**
     * Set the pattern property: A regular expression pattern to match token separators. Default is an
     * expression that matches one or more non-word characters.
     * 
     * @param pattern the pattern value to set.
     * @return the PatternTokenizer object itself.
     */
    @Generated
    public PatternTokenizer setPattern(String pattern) {
        this.pattern = pattern;
        return this;
    }

    /**
     * Get the flags property: Regular expression flags.
     * 
     * @return the flags value.
     */
    @Generated
    public RegexFlags getFlags() {
        return this.flags;
    }

    /**
     * Set the flags property: Regular expression flags.
     * 
     * @param flags the flags value to set.
     * @return the PatternTokenizer object itself.
     */
    @Generated
    public PatternTokenizer setFlags(RegexFlags flags) {
        this.flags = flags;
        return this;
    }

    /**
     * Get the group property: The zero-based ordinal of the matching group in the regular expression pattern
     * to extract into tokens. Use -1 if you want to use the entire pattern to split
     * the input into tokens, irrespective of matching groups. Default is -1.
     * 
     * @return the group value.
     */
    @Generated
    public Integer getGroup() {
        return this.group;
    }

    /**
     * Set the group property: The zero-based ordinal of the matching group in the regular expression pattern
     * to extract into tokens. Use -1 if you want to use the entire pattern to split
     * the input into tokens, irrespective of matching groups. Default is -1.
     * 
     * @param group the group value to set.
     * @return the PatternTokenizer object itself.
     */
    @Generated
    public PatternTokenizer setGroup(Integer group) {
        this.group = group;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", getName());
        jsonWriter.writeStringField("@odata.type", this.odataType);
        jsonWriter.writeStringField("pattern", this.pattern);
        jsonWriter.writeStringField("flags", this.flags == null ? null : this.flags.toString());
        jsonWriter.writeNumberField("group", this.group);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PatternTokenizer from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PatternTokenizer if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the PatternTokenizer.
     */
    @Generated
    public static PatternTokenizer fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String name = null;
            String odataType = "#Microsoft.Azure.Search.PatternTokenizer";
            String pattern = null;
            RegexFlags flags = null;
            Integer group = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else if ("@odata.type".equals(fieldName)) {
                    odataType = reader.getString();
                } else if ("pattern".equals(fieldName)) {
                    pattern = reader.getString();
                } else if ("flags".equals(fieldName)) {
                    flags = RegexFlags.fromString(reader.getString());
                } else if ("group".equals(fieldName)) {
                    group = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }
            PatternTokenizer deserializedPatternTokenizer = new PatternTokenizer(name);
            deserializedPatternTokenizer.odataType = odataType;
            deserializedPatternTokenizer.pattern = pattern;
            deserializedPatternTokenizer.flags = flags;
            deserializedPatternTokenizer.group = group;

            return deserializedPatternTokenizer;
        });
    }
}
