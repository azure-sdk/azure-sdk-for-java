// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.search.documents.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Abstract class to share properties between concrete selectors.
 */
@Fluent
public class SearchIndexerKnowledgeStoreBlobProjectionSelector extends SearchIndexerKnowledgeStoreProjectionSelector {
    /*
     * Blob container to store projections in.
     */
    @Generated
    private final String storageContainer;

    /**
     * Creates an instance of SearchIndexerKnowledgeStoreBlobProjectionSelector class.
     * 
     * @param storageContainer the storageContainer value to set.
     */
    @Generated
    public SearchIndexerKnowledgeStoreBlobProjectionSelector(String storageContainer) {
        this.storageContainer = storageContainer;
    }

    /**
     * Get the storageContainer property: Blob container to store projections in.
     * 
     * @return the storageContainer value.
     */
    @Generated
    public String getStorageContainer() {
        return this.storageContainer;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public SearchIndexerKnowledgeStoreBlobProjectionSelector setReferenceKeyName(String referenceKeyName) {
        super.setReferenceKeyName(referenceKeyName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public SearchIndexerKnowledgeStoreBlobProjectionSelector setGeneratedKeyName(String generatedKeyName) {
        super.setGeneratedKeyName(generatedKeyName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public SearchIndexerKnowledgeStoreBlobProjectionSelector setSource(String source) {
        super.setSource(source);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public SearchIndexerKnowledgeStoreBlobProjectionSelector setSourceContext(String sourceContext) {
        super.setSourceContext(sourceContext);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public SearchIndexerKnowledgeStoreBlobProjectionSelector setInputs(List<InputFieldMappingEntry> inputs) {
        super.setInputs(inputs);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("referenceKeyName", getReferenceKeyName());
        jsonWriter.writeStringField("generatedKeyName", getGeneratedKeyName());
        jsonWriter.writeStringField("source", getSource());
        jsonWriter.writeStringField("sourceContext", getSourceContext());
        jsonWriter.writeArrayField("inputs", getInputs(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("storageContainer", this.storageContainer);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SearchIndexerKnowledgeStoreBlobProjectionSelector from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SearchIndexerKnowledgeStoreBlobProjectionSelector if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SearchIndexerKnowledgeStoreBlobProjectionSelector.
     */
    @Generated
    public static SearchIndexerKnowledgeStoreBlobProjectionSelector fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String referenceKeyName = null;
            String generatedKeyName = null;
            String source = null;
            String sourceContext = null;
            List<InputFieldMappingEntry> inputs = null;
            String storageContainer = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("referenceKeyName".equals(fieldName)) {
                    referenceKeyName = reader.getString();
                } else if ("generatedKeyName".equals(fieldName)) {
                    generatedKeyName = reader.getString();
                } else if ("source".equals(fieldName)) {
                    source = reader.getString();
                } else if ("sourceContext".equals(fieldName)) {
                    sourceContext = reader.getString();
                } else if ("inputs".equals(fieldName)) {
                    inputs = reader.readArray(reader1 -> InputFieldMappingEntry.fromJson(reader1));
                } else if ("storageContainer".equals(fieldName)) {
                    storageContainer = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            SearchIndexerKnowledgeStoreBlobProjectionSelector deserializedSearchIndexerKnowledgeStoreBlobProjectionSelector
                = new SearchIndexerKnowledgeStoreBlobProjectionSelector(storageContainer);
            deserializedSearchIndexerKnowledgeStoreBlobProjectionSelector.setReferenceKeyName(referenceKeyName);
            deserializedSearchIndexerKnowledgeStoreBlobProjectionSelector.setGeneratedKeyName(generatedKeyName);
            deserializedSearchIndexerKnowledgeStoreBlobProjectionSelector.setSource(source);
            deserializedSearchIndexerKnowledgeStoreBlobProjectionSelector.setSourceContext(sourceContext);
            deserializedSearchIndexerKnowledgeStoreBlobProjectionSelector.setInputs(inputs);

            return deserializedSearchIndexerKnowledgeStoreBlobProjectionSelector;
        });
    }
}
