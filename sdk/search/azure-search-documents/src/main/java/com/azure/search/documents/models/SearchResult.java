// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.search.documents.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.BinaryData;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

/**
 * Contains a document found by a search query, plus associated metadata.
 */
@Immutable
public final class SearchResult implements JsonSerializable<SearchResult> {
    /*
     * The relevance score of the document compared to other documents returned by the
     * query.
     */
    @Generated
    private final double score;

    /*
     * The relevance score computed by the semantic ranker for the top search results.
     * Search results are sorted by the RerankerScore first and then by the Score.
     * RerankerScore is only returned for queries of type 'semantic'.
     */
    @Generated
    private Double rerankerScore;

    /*
     * Text fragments from the document that indicate the matching search terms,
     * organized by each applicable field; null if hit highlighting was not enabled
     * for the query.
     */
    @Generated
    private Map<String, List<String>> highlights;

    /*
     * Captions are the most representative passages from the document relatively to
     * the search query. They are often used as document summary. Captions are only
     * returned for queries of type 'semantic'.
     */
    @Generated
    private List<QueryCaptionResult> captions;

    /*
     * Contains debugging information that can be used to further explore your search
     * results.
     */
    @Generated
    private List<DocumentDebugInfo> documentDebugInfo;

    /*
     * Contains a document found by a search query, plus associated metadata.
     */
    @Generated
    private Map<String, BinaryData> additionalProperties;

    /**
     * Creates an instance of SearchResult class.
     * 
     * @param score the score value to set.
     */
    @Generated
    private SearchResult(double score) {
        this.score = score;
    }

    /**
     * Get the score property: The relevance score of the document compared to other documents returned by the
     * query.
     * 
     * @return the score value.
     */
    @Generated
    public double getScore() {
        return this.score;
    }

    /**
     * Get the rerankerScore property: The relevance score computed by the semantic ranker for the top search results.
     * Search results are sorted by the RerankerScore first and then by the Score.
     * RerankerScore is only returned for queries of type 'semantic'.
     * 
     * @return the rerankerScore value.
     */
    @Generated
    public Double getRerankerScore() {
        return this.rerankerScore;
    }

    /**
     * Get the highlights property: Text fragments from the document that indicate the matching search terms,
     * organized by each applicable field; null if hit highlighting was not enabled
     * for the query.
     * 
     * @return the highlights value.
     */
    @Generated
    public Map<String, List<String>> getHighlights() {
        return this.highlights;
    }

    /**
     * Get the captions property: Captions are the most representative passages from the document relatively to
     * the search query. They are often used as document summary. Captions are only
     * returned for queries of type 'semantic'.
     * 
     * @return the captions value.
     */
    @Generated
    public List<QueryCaptionResult> getCaptions() {
        return this.captions;
    }

    /**
     * Get the documentDebugInfo property: Contains debugging information that can be used to further explore your
     * search
     * results.
     * 
     * @return the documentDebugInfo value.
     */
    @Generated
    public List<DocumentDebugInfo> getDocumentDebugInfo() {
        return this.documentDebugInfo;
    }

    /**
     * Get the additionalProperties property: Contains a document found by a search query, plus associated metadata.
     * 
     * @return the additionalProperties value.
     */
    @Generated
    public Map<String, BinaryData> getAdditionalProperties() {
        return this.additionalProperties;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeDoubleField("@search.score", this.score);
        jsonWriter.writeNumberField("@search.rerankerScore", this.rerankerScore);
        jsonWriter.writeMapField("@search.highlights", this.highlights,
            (writer, element) -> writer.writeArray(element, (writer1, element1) -> writer1.writeString(element1)));
        jsonWriter.writeArrayField("@search.captions", this.captions, (writer, element) -> writer.writeJson(element));
        if (additionalProperties != null) {
            for (Map.Entry<String, BinaryData> additionalProperty : additionalProperties.entrySet()) {
                jsonWriter.writeFieldName(additionalProperty.getKey());
                if (additionalProperty.getValue() == null) {
                    jsonWriter.writeNull();
                } else {
                    additionalProperty.getValue().writeTo(jsonWriter);
                }
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SearchResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SearchResult if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SearchResult.
     */
    @Generated
    public static SearchResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            double score = 0.0;
            Double rerankerScore = null;
            Map<String, List<String>> highlights = null;
            List<QueryCaptionResult> captions = null;
            List<DocumentDebugInfo> documentDebugInfo = null;
            Map<String, BinaryData> additionalProperties = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("@search.score".equals(fieldName)) {
                    score = reader.getDouble();
                } else if ("@search.rerankerScore".equals(fieldName)) {
                    rerankerScore = reader.getNullable(JsonReader::getDouble);
                } else if ("@search.highlights".equals(fieldName)) {
                    highlights = reader.readMap(reader1 -> reader1.readArray(reader2 -> reader2.getString()));
                } else if ("@search.captions".equals(fieldName)) {
                    captions = reader.readArray(reader1 -> QueryCaptionResult.fromJson(reader1));
                } else if ("@search.documentDebugInfo".equals(fieldName)) {
                    documentDebugInfo = reader.readArray(reader1 -> DocumentDebugInfo.fromJson(reader1));
                } else {
                    if (additionalProperties == null) {
                        additionalProperties = new LinkedHashMap<>();
                    }

                    additionalProperties.put(fieldName,
                        reader.getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped())));
                }
            }
            SearchResult deserializedSearchResult = new SearchResult(score);
            deserializedSearchResult.rerankerScore = rerankerScore;
            deserializedSearchResult.highlights = highlights;
            deserializedSearchResult.captions = captions;
            deserializedSearchResult.documentDebugInfo = documentDebugInfo;
            deserializedSearchResult.additionalProperties = additionalProperties;

            return deserializedSearchResult;
        });
    }
}
