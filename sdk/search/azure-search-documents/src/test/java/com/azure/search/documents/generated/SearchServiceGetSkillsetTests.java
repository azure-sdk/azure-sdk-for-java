// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.search.documents.generated;

import com.azure.search.documents.models.AzureActiveDirectoryApplicationCredentials;
import com.azure.search.documents.models.InputFieldMappingEntry;
import com.azure.search.documents.models.OutputFieldMappingEntry;
import com.azure.search.documents.models.SearchIndexerSkill;
import com.azure.search.documents.models.SearchIndexerSkillset;
import com.azure.search.documents.models.SearchResourceEncryptionKey;
import java.util.List;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

@Disabled
public final class SearchServiceGetSkillsetTests extends SearchClientTestBase {
    @Test
    @Disabled
    public void testSearchServiceGetSkillsetTests() {
        // method invocation
        SearchIndexerSkillset response = skillsetsClient.get("myskillset");

        // response assertion
        Assertions.assertNotNull(response);
        // verify property "name"
        Assertions.assertEquals("myskillset", response.getName());
        // verify property "description"
        Assertions.assertEquals("Skillset for extracting entities and more", response.getDescription());
        // verify property "skills"
        List<SearchIndexerSkill> responseSkills = response.getSkills();
        SearchIndexerSkill responseSkillsFirstItem = responseSkills.iterator().next();
        Assertions.assertNotNull(responseSkillsFirstItem);
        Assertions.assertEquals("#Microsoft.Skills.Text.LanguageDetectionSkill",
            responseSkillsFirstItem.getOdataType());
        Assertions.assertEquals("skill2", responseSkillsFirstItem.getName());
        Assertions.assertEquals("/document", responseSkillsFirstItem.getContext());
        List<InputFieldMappingEntry> responseSkillsFirstItemInputs = responseSkillsFirstItem.getInputs();
        InputFieldMappingEntry responseSkillsFirstItemInputsFirstItem = responseSkillsFirstItemInputs.iterator().next();
        Assertions.assertNotNull(responseSkillsFirstItemInputsFirstItem);
        Assertions.assertEquals("text", responseSkillsFirstItemInputsFirstItem.getName());
        Assertions.assertEquals("/document/content", responseSkillsFirstItemInputsFirstItem.getSource());
        List<InputFieldMappingEntry> responseSkillsFirstItemInputsFirstItemInputs
            = responseSkillsFirstItemInputsFirstItem.getInputs();
        Assertions.assertEquals(0, responseSkillsFirstItemInputsFirstItemInputs.size());
        List<OutputFieldMappingEntry> responseSkillsFirstItemOutputs = responseSkillsFirstItem.getOutputs();
        OutputFieldMappingEntry responseSkillsFirstItemOutputsFirstItem
            = responseSkillsFirstItemOutputs.iterator().next();
        Assertions.assertNotNull(responseSkillsFirstItemOutputsFirstItem);
        Assertions.assertEquals("languageCode", responseSkillsFirstItemOutputsFirstItem.getName());
        Assertions.assertEquals("languageCode", responseSkillsFirstItemOutputsFirstItem.getTargetName());
        // verify property "eTag"
        Assertions.assertEquals("0x1234568AE7E58A1", response.getETag());
        // verify property "encryptionKey"
        SearchResourceEncryptionKey responseEncryptionKey = response.getEncryptionKey();
        Assertions.assertNotNull(responseEncryptionKey);
        Assertions.assertEquals("myUserManagedEncryptionKey-createdinAzureKeyVault",
            responseEncryptionKey.getKeyName());
        Assertions.assertEquals("myKeyVersion-32charAlphaNumericString", responseEncryptionKey.getKeyVersion());
        Assertions.assertEquals("https://myKeyVault.vault.azure.net", responseEncryptionKey.getVaultUri());
        AzureActiveDirectoryApplicationCredentials responseEncryptionKeyAccessCredentials
            = responseEncryptionKey.getAccessCredentials();
        Assertions.assertNotNull(responseEncryptionKeyAccessCredentials);
        Assertions.assertEquals("00000000-0000-0000-0000-000000000000",
            responseEncryptionKeyAccessCredentials.getApplicationId());
        Assertions.assertEquals("<applicationSecret>", responseEncryptionKeyAccessCredentials.getApplicationSecret());
    }
}
