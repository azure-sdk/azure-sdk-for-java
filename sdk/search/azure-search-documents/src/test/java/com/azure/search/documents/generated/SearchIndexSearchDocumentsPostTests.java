// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.search.documents.generated;

import com.azure.search.documents.models.HybridCountAndFacetMode;
import com.azure.search.documents.models.HybridSearch;
import com.azure.search.documents.models.QueryAnswerResult;
import com.azure.search.documents.models.QueryAnswerType;
import com.azure.search.documents.models.QueryCaptionResult;
import com.azure.search.documents.models.QueryCaptionType;
import com.azure.search.documents.models.QueryLanguage;
import com.azure.search.documents.models.QueryRewritesType;
import com.azure.search.documents.models.QuerySpellerType;
import com.azure.search.documents.models.QueryType;
import com.azure.search.documents.models.ScoringStatistics;
import com.azure.search.documents.models.SearchDocumentsResult;
import com.azure.search.documents.models.SearchMode;
import com.azure.search.documents.models.SearchRequest;
import com.azure.search.documents.models.SearchResult;
import com.azure.search.documents.models.SemanticErrorMode;
import com.azure.search.documents.models.VectorFilterMode;
import com.azure.search.documents.models.VectorSimilarityThreshold;
import com.azure.search.documents.models.VectorizedQuery;
import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

@Disabled
public final class SearchIndexSearchDocumentsPostTests extends SearchClientTestBase {
    @Test
    @Disabled
    public void testSearchIndexSearchDocumentsPostTests() {
        // method invocation
        SearchDocumentsResult response = documentsClient.searchPost("preview-test",
            new SearchRequest().setIncludeTotalResultCount(true)
                .setFacets(Arrays.asList("ownerId", "price,metric:sum,default:10"))
                .setFilter("category eq 'purple' or category eq 'pink'")
                .setHighlightFields("category")
                .setHighlightPostTag("</em>")
                .setHighlightPreTag("</em>")
                .setMinimumCoverage(100.0D)
                .setQueryType(QueryType.SEMANTIC)
                .setScoringStatistics(ScoringStatistics.GLOBAL)
                .setSessionId("mysessionid")
                .setScoringParameters(Arrays.asList("categoryTag:desiredCategoryValue"))
                .setScoringProfile("stringFieldBoost")
                .setSearchText("purple")
                .setSearchFields("id,name,description,category,ownerId")
                .setSearchMode(SearchMode.ANY)
                .setQueryLanguage(QueryLanguage.EN_US)
                .setSpeller(QuerySpellerType.LEXICON)
                .setSelect("id,name,description,category,ownerId")
                .setSkip(0)
                .setTop(10)
                .setSemanticConfiguration("testconfig")
                .setSemanticErrorHandling(SemanticErrorMode.PARTIAL)
                .setSemanticMaxWaitInMilliseconds(5000)
                .setSemanticQuery("find all purple")
                .setAnswers(QueryAnswerType.EXTRACTIVE)
                .setCaptions(QueryCaptionType.EXTRACTIVE)
                .setQueryRewrites(QueryRewritesType.GENERATIVE)
                .setVectorQueries(
                    Arrays.asList(new VectorizedQuery(Arrays.asList(0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0))
                        .setKNearestNeighbors(50)
                        .setFields("vector22, vector1b")
                        .setOversampling(20.0D)
                        .setWeight(1.0D)
                        .setThreshold(new VectorSimilarityThreshold(0.984))
                        .setFilterOverride("ownerId eq 'sam'")))
                .setVectorFilterMode(VectorFilterMode.PRE_FILTER)
                .setHybridSearch(new HybridSearch().setMaxTextRecallSize(100)
                    .setCountAndFacetMode(HybridCountAndFacetMode.COUNT_ALL_RESULTS)));

        // response assertion
        Assertions.assertNotNull(response);
        // verify property "count"
        Assertions.assertEquals(27L, response.getCount());
        // verify property "coverage"
        Assertions.assertEquals(100.0D, response.getCoverage());
        // verify property "facets"
        Assertions.assertNotNull(response.getFacets());
        // verify property "answers"
        List<QueryAnswerResult> responseAnswers = response.getAnswers();
        QueryAnswerResult responseAnswersFirstItem = responseAnswers.iterator().next();
        Assertions.assertNotNull(responseAnswersFirstItem);
        Assertions.assertEquals(0.8240000009536743D, responseAnswersFirstItem.getScore());
        Assertions.assertEquals("empty-vectors", responseAnswersFirstItem.getKey());
        Assertions.assertEquals("no vector.", responseAnswersFirstItem.getText());
        Assertions.assertEquals("</em>no vector.</em>", responseAnswersFirstItem.getHighlights());
        // verify property "results"
        List<SearchResult> responseResults = response.getResults();
        SearchResult responseResultsFirstItem = responseResults.iterator().next();
        Assertions.assertNotNull(responseResultsFirstItem);
        Assertions.assertEquals(0.012820512987673283, responseResultsFirstItem.getScore());
        Assertions.assertEquals(1.788736343383789D, responseResultsFirstItem.getRerankerScore());
        Assertions.assertNotNull(responseResultsFirstItem.getHighlights());
        List<QueryCaptionResult> responseResultsFirstItemCaptions = responseResultsFirstItem.getCaptions();
        QueryCaptionResult responseResultsFirstItemCaptionsFirstItem
            = responseResultsFirstItemCaptions.iterator().next();
        Assertions.assertNotNull(responseResultsFirstItemCaptionsFirstItem);
        Assertions.assertEquals("no vector.", responseResultsFirstItemCaptionsFirstItem.getText());
        Assertions.assertEquals("</em>no vector.</em>", responseResultsFirstItemCaptionsFirstItem.getHighlights());
    }
}
