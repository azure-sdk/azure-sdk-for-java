// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.search.documents.generated;

import com.azure.search.documents.models.AzureActiveDirectoryApplicationCredentials;
import com.azure.search.documents.models.FieldMapping;
import com.azure.search.documents.models.IndexingParameters;
import com.azure.search.documents.models.IndexingParametersConfiguration;
import com.azure.search.documents.models.IndexingSchedule;
import com.azure.search.documents.models.SearchIndexer;
import com.azure.search.documents.models.SearchResourceEncryptionKey;
import java.util.List;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

@Disabled
public final class SearchServiceGetIndexerTests extends SearchClientTestBase {
    @Test
    @Disabled
    public void testSearchServiceGetIndexerTests() {
        // method invocation
        SearchIndexer response = indexersClient.get("myindexer");

        // response assertion
        Assertions.assertNotNull(response);
        // verify property "name"
        Assertions.assertEquals("myindexer", response.getName());
        // verify property "description"
        Assertions.assertEquals("Description of the indexer", response.getDescription());
        // verify property "dataSourceName"
        Assertions.assertEquals("mydocdbdatasource", response.getDataSourceName());
        // verify property "skillsetName"
        Assertions.assertEquals("myskillset", response.getSkillsetName());
        // verify property "targetIndexName"
        Assertions.assertEquals("preview-test", response.getTargetIndexName());
        // verify property "schedule"
        IndexingSchedule responseSchedule = response.getSchedule();
        Assertions.assertNotNull(responseSchedule);
        Assertions.assertNotNull(responseSchedule.getInterval());
        Assertions.assertNotNull(responseSchedule.getStartTime());
        // verify property "parameters"
        IndexingParameters responseParameters = response.getParameters();
        Assertions.assertNotNull(responseParameters);
        Assertions.assertEquals(10, responseParameters.getMaxFailedItems());
        Assertions.assertEquals(5, responseParameters.getMaxFailedItemsPerBatch());
        IndexingParametersConfiguration responseParametersConfiguration = responseParameters.getConfiguration();
        Assertions.assertNotNull(responseParametersConfiguration);
        // verify property "fieldMappings"
        List<FieldMapping> responseFieldMappings = response.getFieldMappings();
        Assertions.assertEquals(0, responseFieldMappings.size());
        // verify property "outputFieldMappings"
        List<FieldMapping> responseOutputFieldMappings = response.getOutputFieldMappings();
        Assertions.assertEquals(0, responseOutputFieldMappings.size());
        // verify property "isDisabled"
        Assertions.assertEquals(false, response.isDisabled());
        // verify property "eTag"
        Assertions.assertEquals("0x1234568AE7E58A1", response.getETag());
        // verify property "encryptionKey"
        SearchResourceEncryptionKey responseEncryptionKey = response.getEncryptionKey();
        Assertions.assertNotNull(responseEncryptionKey);
        Assertions.assertEquals("myUserManagedEncryptionKey-createdinAzureKeyVault",
            responseEncryptionKey.getKeyName());
        Assertions.assertEquals("myKeyVersion-32charAlphaNumericString", responseEncryptionKey.getKeyVersion());
        Assertions.assertEquals("https://myKeyVault.vault.azure.net", responseEncryptionKey.getVaultUri());
        AzureActiveDirectoryApplicationCredentials responseEncryptionKeyAccessCredentials
            = responseEncryptionKey.getAccessCredentials();
        Assertions.assertNotNull(responseEncryptionKeyAccessCredentials);
        Assertions.assertEquals("00000000-0000-0000-0000-000000000000",
            responseEncryptionKeyAccessCredentials.getApplicationId());
        Assertions.assertEquals("<applicationSecret>", responseEncryptionKeyAccessCredentials.getApplicationSecret());
    }
}
