// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.search.documents.generated;

import com.azure.core.http.MatchConditions;
import com.azure.search.documents.models.AzureActiveDirectoryApplicationCredentials;
import com.azure.search.documents.models.DataChangeDetectionPolicy;
import com.azure.search.documents.models.DataDeletionDetectionPolicy;
import com.azure.search.documents.models.DataSourceCredentials;
import com.azure.search.documents.models.HighWaterMarkChangeDetectionPolicy;
import com.azure.search.documents.models.SearchIndexerDataContainer;
import com.azure.search.documents.models.SearchIndexerDataSource;
import com.azure.search.documents.models.SearchIndexerDataSourceType;
import com.azure.search.documents.models.SearchResourceEncryptionKey;
import com.azure.search.documents.models.SoftDeleteColumnDeletionDetectionPolicy;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

@Disabled
public final class SearchServiceCreateOrUpdateDataSourceTests extends SearchClientTestBase {
    @Test
    @Disabled
    public void testSearchServiceCreateOrUpdateDataSourceTests() {
        // method invocation
        SearchIndexerDataSource response = dataSourcesClient.createOrUpdate("tempdatasource",
            new SearchIndexerDataSource("tempdatasource", SearchIndexerDataSourceType.AZURE_BLOB,
                new DataSourceCredentials().setConnectionString(
                    "DefaultEndpointsProtocol=https;AccountName=myAccountName;AccountKey=myAccountKey;EndpointSuffix=core.windows.net "),
                new SearchIndexerDataContainer("doc-extraction-skillset").setQuery("E2E_Dsat"))
                    .setDescription("My Azure Blob data source.")
                    .setDataChangeDetectionPolicy(
                        new HighWaterMarkChangeDetectionPolicy("metadata_storage_last_modified"))
                    .setDataDeletionDetectionPolicy(
                        new SoftDeleteColumnDeletionDetectionPolicy().setSoftDeleteColumnName("isDeleted")
                            .setSoftDeleteMarkerValue("true"))
                    .setEncryptionKey(new SearchResourceEncryptionKey("fakeTokenPlaceholder", "fakeTokenPlaceholder",
                        "fakeTokenPlaceholder").setAccessCredentials(
                            new AzureActiveDirectoryApplicationCredentials("00000000-0000-0000-0000-000000000000")
                                .setApplicationSecret("fakeTokenPlaceholder"))),
            null, new MatchConditions());

        // response assertion
        Assertions.assertNotNull(response);
        // verify property "name"
        Assertions.assertEquals("tempdatasource", response.getName());
        // verify property "description"
        Assertions.assertEquals("My Azure Blob data source.", response.getDescription());
        // verify property "type"
        Assertions.assertEquals(SearchIndexerDataSourceType.AZURE_BLOB, response.getType());
        // verify property "credentials"
        DataSourceCredentials responseCredentials = response.getCredentials();
        Assertions.assertNotNull(responseCredentials);
        Assertions.assertEquals(
            "DefaultEndpointsProtocol=https;AccountName=myAccountName;AccountKey=myAccountKey;EndpointSuffix=core.windows.net ",
            responseCredentials.getConnectionString());
        // verify property "container"
        SearchIndexerDataContainer responseContainer = response.getContainer();
        Assertions.assertNotNull(responseContainer);
        Assertions.assertEquals("doc-extraction-skillset", responseContainer.getName());
        Assertions.assertEquals("E2E_Dsat", responseContainer.getQuery());
        // verify property "dataChangeDetectionPolicy"
        DataChangeDetectionPolicy responseDataChangeDetectionPolicy = response.getDataChangeDetectionPolicy();
        Assertions.assertNotNull(responseDataChangeDetectionPolicy);
        Assertions.assertEquals("#Microsoft.Azure.Search.HighWaterMarkChangeDetectionPolicy",
            responseDataChangeDetectionPolicy.getOdataType());
        // verify property "dataDeletionDetectionPolicy"
        DataDeletionDetectionPolicy responseDataDeletionDetectionPolicy = response.getDataDeletionDetectionPolicy();
        Assertions.assertNotNull(responseDataDeletionDetectionPolicy);
        Assertions.assertEquals("#Microsoft.Azure.Search.SoftDeleteColumnDeletionDetectionPolicy",
            responseDataDeletionDetectionPolicy.getOdataType());
        // verify property "eTag"
        Assertions.assertEquals("0x1234568AE7E58A1", response.getETag());
        // verify property "encryptionKey"
        SearchResourceEncryptionKey responseEncryptionKey = response.getEncryptionKey();
        Assertions.assertNotNull(responseEncryptionKey);
        Assertions.assertEquals("myUserManagedEncryptionKey-createdinAzureKeyVault",
            responseEncryptionKey.getKeyName());
        Assertions.assertEquals("myKeyVersion-32charAlphaNumericString", responseEncryptionKey.getKeyVersion());
        Assertions.assertEquals("https://myKeyVault.vault.azure.net", responseEncryptionKey.getVaultUri());
        AzureActiveDirectoryApplicationCredentials responseEncryptionKeyAccessCredentials
            = responseEncryptionKey.getAccessCredentials();
        Assertions.assertNotNull(responseEncryptionKeyAccessCredentials);
        Assertions.assertEquals("00000000-0000-0000-0000-000000000000",
            responseEncryptionKeyAccessCredentials.getApplicationId());
        Assertions.assertEquals("<applicationSecret>", responseEncryptionKeyAccessCredentials.getApplicationSecret());
    }
}
