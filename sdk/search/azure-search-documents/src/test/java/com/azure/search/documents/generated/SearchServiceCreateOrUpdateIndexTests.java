// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.search.documents.generated;

import com.azure.core.http.MatchConditions;
import com.azure.search.documents.models.AIFoundryModelCatalogName;
import com.azure.search.documents.models.AsciiFoldingTokenFilter;
import com.azure.search.documents.models.AzureMachineLearningParameters;
import com.azure.search.documents.models.AzureMachineLearningVectorizer;
import com.azure.search.documents.models.AzureOpenAIModelName;
import com.azure.search.documents.models.AzureOpenAIVectorizer;
import com.azure.search.documents.models.AzureOpenAIVectorizerParameters;
import com.azure.search.documents.models.BM25SimilarityAlgorithm;
import com.azure.search.documents.models.BinaryQuantizationCompression;
import com.azure.search.documents.models.CharFilter;
import com.azure.search.documents.models.CharFilterName;
import com.azure.search.documents.models.CorsOptions;
import com.azure.search.documents.models.CustomAnalyzer;
import com.azure.search.documents.models.CustomNormalizer;
import com.azure.search.documents.models.HnswAlgorithmConfiguration;
import com.azure.search.documents.models.HnswParameters;
import com.azure.search.documents.models.LexicalAnalyzer;
import com.azure.search.documents.models.LexicalAnalyzerName;
import com.azure.search.documents.models.LexicalNormalizer;
import com.azure.search.documents.models.LexicalTokenizer;
import com.azure.search.documents.models.LexicalTokenizerName;
import com.azure.search.documents.models.LuceneStandardTokenizerV2;
import com.azure.search.documents.models.MappingCharFilter;
import com.azure.search.documents.models.RescoringOptions;
import com.azure.search.documents.models.ScalarQuantizationCompression;
import com.azure.search.documents.models.ScalarQuantizationParameters;
import com.azure.search.documents.models.ScoringFunction;
import com.azure.search.documents.models.ScoringFunctionAggregation;
import com.azure.search.documents.models.ScoringFunctionInterpolation;
import com.azure.search.documents.models.ScoringProfile;
import com.azure.search.documents.models.SearchField;
import com.azure.search.documents.models.SearchFieldDataType;
import com.azure.search.documents.models.SearchIndex;
import com.azure.search.documents.models.SearchIndexerDataNoneIdentity;
import com.azure.search.documents.models.SearchSuggester;
import com.azure.search.documents.models.SemanticConfiguration;
import com.azure.search.documents.models.SemanticField;
import com.azure.search.documents.models.SemanticPrioritizedFields;
import com.azure.search.documents.models.SemanticSearch;
import com.azure.search.documents.models.SimilarityAlgorithm;
import com.azure.search.documents.models.TagScoringFunction;
import com.azure.search.documents.models.TagScoringParameters;
import com.azure.search.documents.models.TextWeights;
import com.azure.search.documents.models.TokenFilter;
import com.azure.search.documents.models.TokenFilterName;
import com.azure.search.documents.models.VectorSearch;
import com.azure.search.documents.models.VectorSearchAlgorithmConfiguration;
import com.azure.search.documents.models.VectorSearchAlgorithmKind;
import com.azure.search.documents.models.VectorSearchAlgorithmMetric;
import com.azure.search.documents.models.VectorSearchCompression;
import com.azure.search.documents.models.VectorSearchCompressionKind;
import com.azure.search.documents.models.VectorSearchCompressionRescoreStorageMethod;
import com.azure.search.documents.models.VectorSearchCompressionTarget;
import com.azure.search.documents.models.VectorSearchProfile;
import com.azure.search.documents.models.VectorSearchVectorizer;
import com.azure.search.documents.models.VectorSearchVectorizerKind;
import com.azure.search.documents.models.WebApiVectorizer;
import com.azure.search.documents.models.WebApiVectorizerParameters;
import java.time.Duration;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

@Disabled
public final class SearchServiceCreateOrUpdateIndexTests extends SearchClientTestBase {
    @Test
    @Disabled
    public void testSearchServiceCreateOrUpdateIndexTests() {
        // method invocation
        SearchIndex response = indexesClient.createOrUpdate("temp-preview-test",
            new SearchIndex("temp-preview-test",
                Arrays.asList(new SearchField("id", SearchFieldDataType.STRING).setKey(true).setSortable(true),
                    new SearchField("vector1", SearchFieldDataType.fromString("Collection(Edm.Single)"))
                        .setRetrievable(true)
                        .setSearchable(true)
                        .setVectorSearchDimensions(20)
                        .setVectorSearchProfileName("config1"),
                    new SearchField("vector1b", SearchFieldDataType.fromString("Collection(Edm.Single)"))
                        .setRetrievable(true)
                        .setSearchable(true)
                        .setVectorSearchDimensions(10)
                        .setVectorSearchProfileName("config2"),
                    new SearchField("vector2", SearchFieldDataType.fromString("Collection(Edm.Single)"))
                        .setRetrievable(true)
                        .setSearchable(true)
                        .setVectorSearchDimensions(5)
                        .setVectorSearchProfileName("config3"),
                    new SearchField("vector3", SearchFieldDataType.fromString("Collection(Edm.Single)"))
                        .setRetrievable(true)
                        .setSearchable(true)
                        .setVectorSearchDimensions(5)
                        .setVectorSearchProfileName("config3"),
                    new SearchField("vector22", SearchFieldDataType.fromString("Collection(Edm.Single)"))
                        .setRetrievable(true)
                        .setSearchable(true)
                        .setVectorSearchDimensions(10)
                        .setVectorSearchProfileName("config2"),
                    new SearchField("vector4", SearchFieldDataType.fromString("Collection(Edm.Single)"))
                        .setRetrievable(true)
                        .setSearchable(true)
                        .setVectorSearchDimensions(32)
                        .setVectorSearchProfileName("config4"),
                    new SearchField("name", SearchFieldDataType.STRING).setRetrievable(true)
                        .setSearchable(true)
                        .setFilterable(true)
                        .setSortable(true)
                        .setFacetable(true)
                        .setAnalyzer(LexicalAnalyzerName.EN_LUCENE),
                    new SearchField("description", SearchFieldDataType.STRING).setRetrievable(true)
                        .setSearchable(true)
                        .setFilterable(true)
                        .setSortable(true)
                        .setFacetable(true)
                        .setAnalyzer(LexicalAnalyzerName.STANDARD_LUCENE),
                    new SearchField("category", SearchFieldDataType.STRING).setRetrievable(true)
                        .setSearchable(true)
                        .setFilterable(true)
                        .setSortable(true)
                        .setFacetable(true)
                        .setAnalyzer(LexicalAnalyzerName.EN_LUCENE),
                    new SearchField("ownerId", SearchFieldDataType.STRING).setRetrievable(true)
                        .setSearchable(true)
                        .setFilterable(true)
                        .setSortable(true)
                        .setFacetable(true)
                        .setAnalyzer(LexicalAnalyzerName.EN_LUCENE),
                    new SearchField("price", SearchFieldDataType.DOUBLE).setRetrievable(true)
                        .setFilterable(true)
                        .setSortable(true)
                        .setFacetable(true)))
                            .setScoringProfiles(Arrays.asList(new ScoringProfile("stringFieldBoost")
                                .setTextWeights(new TextWeights(
                                    mapOf("name", 3.0, "description", 1.0, "category", 2.0, "ownerId", 1.0)))
                                .setFunctions(Arrays.asList(
                                    new TagScoringFunction("category", 2.0, new TagScoringParameters("categoryTag"))))))
                            .setDefaultScoringProfile("stringFieldBoost")
                            .setCorsOptions(
                                new CorsOptions(Arrays.asList("https://www.example.com/foo")).setMaxAgeInSeconds(10L))
                            .setSuggesters(
                                Arrays.asList(new SearchSuggester("sg", Arrays.asList("category", "ownerId"))))
                            .setAnalyzers(
                                Arrays.asList(new CustomAnalyzer("tagsAnalyzer", LexicalTokenizerName.STANDARD)
                                    .setTokenFilters(Arrays.asList(TokenFilterName.COMMON_GRAM))
                                    .setCharFilters(Arrays.asList(CharFilterName.HTML_STRIP))))
                            .setTokenizers(
                                Arrays.asList(new LuceneStandardTokenizerV2("my_tokenizer").setMaxTokenLength(100)))
                            .setTokenFilters(
                                Arrays.asList(new AsciiFoldingTokenFilter("my_tokenFilter").setPreserveOriginal(false)))
                            .setCharFilters(
                                Arrays.asList(new MappingCharFilter("my_mapping", Arrays.asList(".=>,", "_=>-"))))
                            .setNormalizers(Arrays.asList(new CustomNormalizer("my_normalizer")
                                .setTokenFilters(Arrays.asList(TokenFilterName.fromString("my_tokenFilter")))
                                .setCharFilters(Arrays.asList(CharFilterName.fromString("my_mapping")))))
                            .setSimilarity(new BM25SimilarityAlgorithm().setK1(10.0D).setB(0.1D))
                            .setSemanticSearch(new SemanticSearch().setDefaultConfigurationName("testconfig")
                                .setConfigurations(Arrays.asList(new SemanticConfiguration("testconfig",
                                    new SemanticPrioritizedFields().setTitleField(new SemanticField("category"))
                                        .setContentFields(Arrays.asList(new SemanticField("description")))
                                        .setKeywordsFields(Arrays.asList(new SemanticField("ownerId"))))
                                            .setFlightingOptIn(true))))
                            .setVectorSearch(new VectorSearch()
                                .setProfiles(Arrays.asList(
                                    new VectorSearchProfile("config1", "cosine").setVectorizerName("openai")
                                        .setCompressionName("mySQ8"),
                                    new VectorSearchProfile("config2", "euclidean").setVectorizerName("custom-web-api")
                                        .setCompressionName("mySQ8"),
                                    new VectorSearchProfile("config3", "dotProduct").setVectorizerName("custom-web-api")
                                        .setCompressionName("myBQC"),
                                    new VectorSearchProfile("config4", "dotProduct").setVectorizerName("custom-web-api")
                                        .setCompressionName("myBQWithoutOriginals")))
                                .setAlgorithms(Arrays.asList(
                                    new HnswAlgorithmConfiguration("cosine").setParameters(
                                        new HnswParameters().setMetric(VectorSearchAlgorithmMetric.COSINE)),
                                    new HnswAlgorithmConfiguration("euclidean").setParameters(
                                        new HnswParameters().setMetric(VectorSearchAlgorithmMetric.EUCLIDEAN)),
                                    new HnswAlgorithmConfiguration("dotProduct").setParameters(
                                        new HnswParameters().setMetric(VectorSearchAlgorithmMetric.DOT_PRODUCT))))
                                .setVectorizers(Arrays.asList(
                                    new AzureOpenAIVectorizer("openai")
                                        .setParameters(new AzureOpenAIVectorizerParameters()
                                            .setResourceUrl("https://test-sample.openai.azure.com/")
                                            .setDeploymentName("model")
                                            .setApiKey("fakeTokenPlaceholder")
                                            .setModelName(AzureOpenAIModelName.TEXT_EMBEDDING3LARGE)),
                                    new WebApiVectorizer("custom-web-api")
                                        .setWebApiParameters(new WebApiVectorizerParameters()
                                            .setUrl("https://my-custom-endpoint.org/")
                                            .setHttpHeaders(mapOf("header1", "value1", "header2", "value2"))
                                            .setHttpMethod("POST")
                                            .setTimeout(Duration.parse("PT1M"))
                                            .setAuthResourceId("api://f89d1c93-58a7-4b07-9a5b-5f89048b927b")
                                            .setAuthIdentity(new SearchIndexerDataNoneIdentity())),
                                    new AzureMachineLearningVectorizer("aml").setAMLParameters(
                                        new AzureMachineLearningParameters("https://my-custom-endpoint.org/")
                                            .setResourceId("aml resource id")
                                            .setTimeout(Duration.parse("PT1M"))
                                            .setRegion("aml region")
                                            .setModelName(
                                                AIFoundryModelCatalogName.OPEN_AICLIPIMAGE_TEXT_EMBEDDINGS_VIT_BASE_PATCH32))))
                                .setCompressions(Arrays.asList(
                                    new ScalarQuantizationCompression("mySQ8")
                                        .setRescoringOptions(new RescoringOptions().setEnableRescoring(true)
                                            .setDefaultOversampling(10.0D)
                                            .setRescoreStorageMethod(
                                                VectorSearchCompressionRescoreStorageMethod.PRESERVE_ORIGINALS))
                                        .setTruncationDimension(2)
                                        .setParameters(new ScalarQuantizationParameters()
                                            .setQuantizedDataType(VectorSearchCompressionTarget.INT8)),
                                    new BinaryQuantizationCompression("myBQC")
                                        .setRescoringOptions(new RescoringOptions().setEnableRescoring(true)
                                            .setDefaultOversampling(10.0D)
                                            .setRescoreStorageMethod(
                                                VectorSearchCompressionRescoreStorageMethod.PRESERVE_ORIGINALS))
                                        .setTruncationDimension(2),
                                    new BinaryQuantizationCompression("myBQWithoutOriginals")
                                        .setRescoringOptions(new RescoringOptions().setEnableRescoring(true)
                                            .setDefaultOversampling(10.0D)
                                            .setRescoreStorageMethod(
                                                VectorSearchCompressionRescoreStorageMethod.DISCARD_ORIGINALS))
                                        .setTruncationDimension(2)))),
            null, new MatchConditions());

        // response assertion
        Assertions.assertNotNull(response);
        // verify property "name"
        Assertions.assertEquals("temp-preview-test", response.getName());
        // verify property "fields"
        List<SearchField> responseFields = response.getFields();
        SearchField responseFieldsFirstItem = responseFields.iterator().next();
        Assertions.assertNotNull(responseFieldsFirstItem);
        Assertions.assertEquals("id", responseFieldsFirstItem.getName());
        Assertions.assertEquals(SearchFieldDataType.STRING, responseFieldsFirstItem.getType());
        Assertions.assertEquals(true, responseFieldsFirstItem.isKey());
        Assertions.assertEquals(true, responseFieldsFirstItem.isRetrievable());
        Assertions.assertEquals(true, responseFieldsFirstItem.isStored());
        Assertions.assertEquals(true, responseFieldsFirstItem.isSearchable());
        Assertions.assertEquals(true, responseFieldsFirstItem.isFilterable());
        Assertions.assertEquals(true, responseFieldsFirstItem.isSortable());
        Assertions.assertEquals(true, responseFieldsFirstItem.isFacetable());
        List<String> responseFieldsFirstItemSynonymMaps = responseFieldsFirstItem.getSynonymMaps();
        Assertions.assertEquals(0, responseFieldsFirstItemSynonymMaps.size());
        // verify property "scoringProfiles"
        List<ScoringProfile> responseScoringProfiles = response.getScoringProfiles();
        ScoringProfile responseScoringProfilesFirstItem = responseScoringProfiles.iterator().next();
        Assertions.assertNotNull(responseScoringProfilesFirstItem);
        Assertions.assertEquals("stringFieldBoost", responseScoringProfilesFirstItem.getName());
        TextWeights responseScoringProfilesFirstItemTextWeights = responseScoringProfilesFirstItem.getTextWeights();
        Assertions.assertNotNull(responseScoringProfilesFirstItemTextWeights);
        Assertions.assertNotNull(responseScoringProfilesFirstItemTextWeights.getWeights());
        List<ScoringFunction> responseScoringProfilesFirstItemFunctions
            = responseScoringProfilesFirstItem.getFunctions();
        ScoringFunction responseScoringProfilesFirstItemFunctionsFirstItem
            = responseScoringProfilesFirstItemFunctions.iterator().next();
        Assertions.assertNotNull(responseScoringProfilesFirstItemFunctionsFirstItem);
        Assertions.assertEquals("tag", responseScoringProfilesFirstItemFunctionsFirstItem.getType());
        Assertions.assertEquals("category", responseScoringProfilesFirstItemFunctionsFirstItem.getFieldName());
        Assertions.assertEquals(2.0, responseScoringProfilesFirstItemFunctionsFirstItem.getBoost());
        Assertions.assertEquals(ScoringFunctionInterpolation.LINEAR,
            responseScoringProfilesFirstItemFunctionsFirstItem.getInterpolation());
        Assertions.assertEquals(ScoringFunctionAggregation.SUM,
            responseScoringProfilesFirstItem.getFunctionAggregation());
        // verify property "defaultScoringProfile"
        Assertions.assertEquals("stringFieldBoost", response.getDefaultScoringProfile());
        // verify property "corsOptions"
        CorsOptions responseCorsOptions = response.getCorsOptions();
        Assertions.assertNotNull(responseCorsOptions);
        List<String> responseCorsOptionsAllowedOrigins = responseCorsOptions.getAllowedOrigins();
        Assertions.assertEquals("https://www.example.com/foo", responseCorsOptionsAllowedOrigins.iterator().next());
        Assertions.assertEquals(10L, responseCorsOptions.getMaxAgeInSeconds());
        // verify property "suggesters"
        List<SearchSuggester> responseSuggesters = response.getSuggesters();
        SearchSuggester responseSuggestersFirstItem = responseSuggesters.iterator().next();
        Assertions.assertNotNull(responseSuggestersFirstItem);
        Assertions.assertEquals("sg", responseSuggestersFirstItem.getName());
        Assertions.assertEquals("analyzingInfixMatching", responseSuggestersFirstItem.getSearchMode());
        List<String> responseSuggestersFirstItemSourceFields = responseSuggestersFirstItem.getSourceFields();
        Assertions.assertEquals("category", responseSuggestersFirstItemSourceFields.iterator().next());
        // verify property "analyzers"
        List<LexicalAnalyzer> responseAnalyzers = response.getAnalyzers();
        LexicalAnalyzer responseAnalyzersFirstItem = responseAnalyzers.iterator().next();
        Assertions.assertNotNull(responseAnalyzersFirstItem);
        Assertions.assertEquals("#Microsoft.Azure.Search.CustomAnalyzer", responseAnalyzersFirstItem.getOdataType());
        Assertions.assertEquals("tagsAnalyzer", responseAnalyzersFirstItem.getName());
        // verify property "tokenizers"
        List<LexicalTokenizer> responseTokenizers = response.getTokenizers();
        LexicalTokenizer responseTokenizersFirstItem = responseTokenizers.iterator().next();
        Assertions.assertNotNull(responseTokenizersFirstItem);
        Assertions.assertEquals("#Microsoft.Azure.Search.StandardTokenizerV2",
            responseTokenizersFirstItem.getOdataType());
        Assertions.assertEquals("my_tokenizer", responseTokenizersFirstItem.getName());
        // verify property "tokenFilters"
        List<TokenFilter> responseTokenFilters = response.getTokenFilters();
        TokenFilter responseTokenFiltersFirstItem = responseTokenFilters.iterator().next();
        Assertions.assertNotNull(responseTokenFiltersFirstItem);
        Assertions.assertEquals("#Microsoft.Azure.Search.AsciiFoldingTokenFilter",
            responseTokenFiltersFirstItem.getOdataType());
        Assertions.assertEquals("my_tokenFilter", responseTokenFiltersFirstItem.getName());
        // verify property "charFilters"
        List<CharFilter> responseCharFilters = response.getCharFilters();
        CharFilter responseCharFiltersFirstItem = responseCharFilters.iterator().next();
        Assertions.assertNotNull(responseCharFiltersFirstItem);
        Assertions.assertEquals("#Microsoft.Azure.Search.MappingCharFilter",
            responseCharFiltersFirstItem.getOdataType());
        Assertions.assertEquals("my_mapping", responseCharFiltersFirstItem.getName());
        // verify property "normalizers"
        List<LexicalNormalizer> responseNormalizers = response.getNormalizers();
        LexicalNormalizer responseNormalizersFirstItem = responseNormalizers.iterator().next();
        Assertions.assertNotNull(responseNormalizersFirstItem);
        Assertions.assertEquals("#Microsoft.Azure.Search.CustomNormalizer",
            responseNormalizersFirstItem.getOdataType());
        Assertions.assertEquals("my_normalizer", responseNormalizersFirstItem.getName());
        // verify property "similarity"
        SimilarityAlgorithm responseSimilarity = response.getSimilarity();
        Assertions.assertNotNull(responseSimilarity);
        Assertions.assertEquals("#Microsoft.Azure.Search.BM25Similarity", responseSimilarity.getOdataType());
        // verify property "semanticSearch"
        SemanticSearch responseSemanticSearch = response.getSemanticSearch();
        Assertions.assertNotNull(responseSemanticSearch);
        Assertions.assertEquals("testconfig", responseSemanticSearch.getDefaultConfigurationName());
        List<SemanticConfiguration> responseSemanticSearchConfigurations = responseSemanticSearch.getConfigurations();
        SemanticConfiguration responseSemanticSearchConfigurationsFirstItem
            = responseSemanticSearchConfigurations.iterator().next();
        Assertions.assertNotNull(responseSemanticSearchConfigurationsFirstItem);
        Assertions.assertEquals("testconfig", responseSemanticSearchConfigurationsFirstItem.getName());
        SemanticPrioritizedFields responseSemanticSearchConfigurationsFirstItemPrioritizedFields
            = responseSemanticSearchConfigurationsFirstItem.getPrioritizedFields();
        Assertions.assertNotNull(responseSemanticSearchConfigurationsFirstItemPrioritizedFields);
        SemanticField responseSemanticSearchConfigurationsFirstItemPrioritizedFieldsTitleField
            = responseSemanticSearchConfigurationsFirstItemPrioritizedFields.getTitleField();
        Assertions.assertNotNull(responseSemanticSearchConfigurationsFirstItemPrioritizedFieldsTitleField);
        Assertions.assertEquals("category",
            responseSemanticSearchConfigurationsFirstItemPrioritizedFieldsTitleField.getFieldName());
        List<SemanticField> responseSemanticSearchConfigurationsFirstItemPrioritizedFieldsContentFields
            = responseSemanticSearchConfigurationsFirstItemPrioritizedFields.getContentFields();
        SemanticField responseSemanticSearchConfigurationsFirstItemPrioritizedFieldsContentFieldsFirstItem
            = responseSemanticSearchConfigurationsFirstItemPrioritizedFieldsContentFields.iterator().next();
        Assertions.assertNotNull(responseSemanticSearchConfigurationsFirstItemPrioritizedFieldsContentFieldsFirstItem);
        Assertions.assertEquals("description",
            responseSemanticSearchConfigurationsFirstItemPrioritizedFieldsContentFieldsFirstItem.getFieldName());
        List<SemanticField> responseSemanticSearchConfigurationsFirstItemPrioritizedFieldsKeywordsFields
            = responseSemanticSearchConfigurationsFirstItemPrioritizedFields.getKeywordsFields();
        SemanticField responseSemanticSearchConfigurationsFirstItemPrioritizedFieldsKeywordsFieldsFirstItem
            = responseSemanticSearchConfigurationsFirstItemPrioritizedFieldsKeywordsFields.iterator().next();
        Assertions.assertNotNull(responseSemanticSearchConfigurationsFirstItemPrioritizedFieldsKeywordsFieldsFirstItem);
        Assertions.assertEquals("ownerId",
            responseSemanticSearchConfigurationsFirstItemPrioritizedFieldsKeywordsFieldsFirstItem.getFieldName());
        Assertions.assertEquals(false, responseSemanticSearchConfigurationsFirstItem.isFlightingOptIn());
        // verify property "vectorSearch"
        VectorSearch responseVectorSearch = response.getVectorSearch();
        Assertions.assertNotNull(responseVectorSearch);
        List<VectorSearchProfile> responseVectorSearchProfiles = responseVectorSearch.getProfiles();
        VectorSearchProfile responseVectorSearchProfilesFirstItem = responseVectorSearchProfiles.iterator().next();
        Assertions.assertNotNull(responseVectorSearchProfilesFirstItem);
        Assertions.assertEquals("config1", responseVectorSearchProfilesFirstItem.getName());
        Assertions.assertEquals("cosine", responseVectorSearchProfilesFirstItem.getAlgorithmConfigurationName());
        Assertions.assertEquals("openai", responseVectorSearchProfilesFirstItem.getVectorizerName());
        Assertions.assertEquals("mySQ8", responseVectorSearchProfilesFirstItem.getCompressionName());
        List<VectorSearchAlgorithmConfiguration> responseVectorSearchAlgorithms = responseVectorSearch.getAlgorithms();
        VectorSearchAlgorithmConfiguration responseVectorSearchAlgorithmsFirstItem
            = responseVectorSearchAlgorithms.iterator().next();
        Assertions.assertNotNull(responseVectorSearchAlgorithmsFirstItem);
        Assertions.assertEquals(VectorSearchAlgorithmKind.HNSW, responseVectorSearchAlgorithmsFirstItem.getKind());
        Assertions.assertEquals("cosine", responseVectorSearchAlgorithmsFirstItem.getName());
        List<VectorSearchVectorizer> responseVectorSearchVectorizers = responseVectorSearch.getVectorizers();
        VectorSearchVectorizer responseVectorSearchVectorizersFirstItem
            = responseVectorSearchVectorizers.iterator().next();
        Assertions.assertNotNull(responseVectorSearchVectorizersFirstItem);
        Assertions.assertEquals(VectorSearchVectorizerKind.AZURE_OPEN_AI,
            responseVectorSearchVectorizersFirstItem.getKind());
        Assertions.assertEquals("openai", responseVectorSearchVectorizersFirstItem.getVectorizerName());
        List<VectorSearchCompression> responseVectorSearchCompressions = responseVectorSearch.getCompressions();
        VectorSearchCompression responseVectorSearchCompressionsFirstItem
            = responseVectorSearchCompressions.iterator().next();
        Assertions.assertNotNull(responseVectorSearchCompressionsFirstItem);
        Assertions.assertEquals(VectorSearchCompressionKind.SCALAR_QUANTIZATION,
            responseVectorSearchCompressionsFirstItem.getKind());
        Assertions.assertEquals("mySQ8", responseVectorSearchCompressionsFirstItem.getCompressionName());
        RescoringOptions responseVectorSearchCompressionsFirstItemRescoringOptions
            = responseVectorSearchCompressionsFirstItem.getRescoringOptions();
        Assertions.assertNotNull(responseVectorSearchCompressionsFirstItemRescoringOptions);
        Assertions.assertEquals(true, responseVectorSearchCompressionsFirstItemRescoringOptions.isEnableRescoring());
        Assertions.assertEquals(10.0D,
            responseVectorSearchCompressionsFirstItemRescoringOptions.getDefaultOversampling());
        Assertions.assertEquals(VectorSearchCompressionRescoreStorageMethod.PRESERVE_ORIGINALS,
            responseVectorSearchCompressionsFirstItemRescoringOptions.getRescoreStorageMethod());
        Assertions.assertEquals(2, responseVectorSearchCompressionsFirstItem.getTruncationDimension());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
