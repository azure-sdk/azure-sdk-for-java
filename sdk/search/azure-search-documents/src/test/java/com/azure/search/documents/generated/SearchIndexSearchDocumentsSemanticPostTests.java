// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.search.documents.generated;

import com.azure.search.documents.models.QueryAnswerResult;
import com.azure.search.documents.models.QueryAnswerType;
import com.azure.search.documents.models.QueryCaptionResult;
import com.azure.search.documents.models.QueryCaptionType;
import com.azure.search.documents.models.QueryType;
import com.azure.search.documents.models.SearchDocumentsResult;
import com.azure.search.documents.models.SearchRequest;
import com.azure.search.documents.models.SearchResult;
import com.azure.search.documents.models.SemanticErrorMode;
import java.util.List;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

@Disabled
public final class SearchIndexSearchDocumentsSemanticPostTests extends SearchClientTestBase {
    @Test
    @Disabled
    public void testSearchIndexSearchDocumentsSemanticPostTests() {
        // method invocation
        SearchDocumentsResult response = documentsClient.searchPost("myindex",
            new SearchRequest().setIncludeTotalResultCount(true)
                .setHighlightPostTag("</em>")
                .setHighlightPreTag("<em>")
                .setQueryType(QueryType.SEMANTIC)
                .setSearchText("how do clouds form")
                .setSemanticConfiguration("my-semantic-config")
                .setSemanticErrorHandling(SemanticErrorMode.PARTIAL)
                .setSemanticMaxWaitInMilliseconds(780)
                .setAnswers(QueryAnswerType.fromString("extractive|count-3"))
                .setCaptions(QueryCaptionType.fromString("extractive|highlight-true")));

        // response assertion
        Assertions.assertNotNull(response);
        // verify property "count"
        Assertions.assertEquals(25L, response.getCount());
        // verify property "answers"
        List<QueryAnswerResult> responseAnswers = response.getAnswers();
        QueryAnswerResult responseAnswersFirstItem = responseAnswers.iterator().next();
        Assertions.assertNotNull(responseAnswersFirstItem);
        Assertions.assertEquals(0.94639826D, responseAnswersFirstItem.getScore());
        Assertions.assertEquals("4123", responseAnswersFirstItem.getKey());
        Assertions.assertEquals(
            "Sunlight heats the land all day, warming that moist air and causing it to rise high into the   atmosphere until it cools and condenses into water droplets. Clouds generally form where air is ascending (over land in this case),   but not where it is descending (over the river).",
            responseAnswersFirstItem.getText());
        Assertions.assertEquals(
            "Sunlight heats the land all day, warming that moist air and causing it to rise high into the   atmosphere until it cools and condenses into water droplets. Clouds generally form<em> where air is ascending</em> (over land in this case),   but not where it is<em> descending</em> (over the river).",
            responseAnswersFirstItem.getHighlights());
        // verify property "nextPageParameters"
        SearchRequest responseNextPageParameters = response.getNextPageParameters();
        Assertions.assertNotNull(responseNextPageParameters);
        Assertions.assertEquals(true, responseNextPageParameters.isIncludeTotalResultCount());
        Assertions.assertEquals("</em>", responseNextPageParameters.getHighlightPostTag());
        Assertions.assertEquals("<em>", responseNextPageParameters.getHighlightPreTag());
        Assertions.assertEquals(QueryType.SEMANTIC, responseNextPageParameters.getQueryType());
        Assertions.assertEquals("how do clouds form", responseNextPageParameters.getSearchText());
        Assertions.assertEquals(2, responseNextPageParameters.getSkip());
        Assertions.assertEquals(8, responseNextPageParameters.getTop());
        Assertions.assertEquals("my-semantic-config", responseNextPageParameters.getSemanticConfiguration());
        Assertions.assertEquals(SemanticErrorMode.PARTIAL, responseNextPageParameters.getSemanticErrorHandling());
        Assertions.assertEquals(780, responseNextPageParameters.getSemanticMaxWaitInMilliseconds());
        Assertions.assertEquals(QueryAnswerType.fromString("extractive|count-3"),
            responseNextPageParameters.getAnswers());
        Assertions.assertEquals(QueryCaptionType.fromString("extractive|highlight-true"),
            responseNextPageParameters.getCaptions());
        // verify property "results"
        List<SearchResult> responseResults = response.getResults();
        SearchResult responseResultsFirstItem = responseResults.iterator().next();
        Assertions.assertNotNull(responseResultsFirstItem);
        Assertions.assertEquals(0.5479723, responseResultsFirstItem.getScore());
        Assertions.assertEquals(1.0321671911515296D, responseResultsFirstItem.getRerankerScore());
        List<QueryCaptionResult> responseResultsFirstItemCaptions = responseResultsFirstItem.getCaptions();
        QueryCaptionResult responseResultsFirstItemCaptionsFirstItem
            = responseResultsFirstItemCaptions.iterator().next();
        Assertions.assertNotNull(responseResultsFirstItemCaptionsFirstItem);
        Assertions.assertEquals(
            "Like all clouds, it forms when the air reaches its dew point—the temperature at which an air mass is cool enough for its water vapor to condense into liquid droplets. This false-color image shows valley fog, which is common in the Pacific Northwest of North America.",
            responseResultsFirstItemCaptionsFirstItem.getText());
        Assertions.assertEquals(
            "Like all<em> clouds</em>, it<em> forms</em> when the air reaches its dew point—the temperature at    which an air mass is cool enough for its water vapor to condense into liquid droplets. This false-color image shows valley<em> fog</em>, which is common in the Pacific Northwest of North America.",
            responseResultsFirstItemCaptionsFirstItem.getHighlights());
        // verify property "nextLink"
        Assertions.assertEquals(
            "https://myservice.search.windows.net/indexes('myindex')/docs/search.post.search?api-version=2025-03-01-preview",
            response.getNextLink());
    }
}
