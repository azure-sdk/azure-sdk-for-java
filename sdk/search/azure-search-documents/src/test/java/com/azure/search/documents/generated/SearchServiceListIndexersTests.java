// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.search.documents.generated;

import com.azure.search.documents.models.AzureActiveDirectoryApplicationCredentials;
import com.azure.search.documents.models.FieldMapping;
import com.azure.search.documents.models.FieldMappingFunction;
import com.azure.search.documents.models.IndexingParameters;
import com.azure.search.documents.models.IndexingParametersConfiguration;
import com.azure.search.documents.models.IndexingSchedule;
import com.azure.search.documents.models.ListIndexersResult;
import com.azure.search.documents.models.SearchIndexer;
import com.azure.search.documents.models.SearchResourceEncryptionKey;
import java.util.List;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

@Disabled
public final class SearchServiceListIndexersTests extends SearchClientTestBase {
    @Test
    @Disabled
    public void testSearchServiceListIndexersTests() {
        // method invocation
        ListIndexersResult response = indexersClient.list("*");

        // response assertion
        Assertions.assertNotNull(response);
        // verify property "indexers"
        List<SearchIndexer> responseIndexers = response.getIndexers();
        SearchIndexer responseIndexersFirstItem = responseIndexers.iterator().next();
        Assertions.assertNotNull(responseIndexersFirstItem);
        Assertions.assertEquals("myindexer", responseIndexersFirstItem.getName());
        Assertions.assertEquals("Description of the indexer", responseIndexersFirstItem.getDescription());
        Assertions.assertEquals("mydocdbdatasource", responseIndexersFirstItem.getDataSourceName());
        Assertions.assertEquals("myskillset", responseIndexersFirstItem.getSkillsetName());
        Assertions.assertEquals("preview-test", responseIndexersFirstItem.getTargetIndexName());
        IndexingSchedule responseIndexersFirstItemSchedule = responseIndexersFirstItem.getSchedule();
        Assertions.assertNotNull(responseIndexersFirstItemSchedule);
        Assertions.assertNotNull(responseIndexersFirstItemSchedule.getInterval());
        Assertions.assertNotNull(responseIndexersFirstItemSchedule.getStartTime());
        IndexingParameters responseIndexersFirstItemParameters = responseIndexersFirstItem.getParameters();
        Assertions.assertNotNull(responseIndexersFirstItemParameters);
        Assertions.assertEquals(10, responseIndexersFirstItemParameters.getBatchSize());
        Assertions.assertEquals(10, responseIndexersFirstItemParameters.getMaxFailedItems());
        Assertions.assertEquals(5, responseIndexersFirstItemParameters.getMaxFailedItemsPerBatch());
        IndexingParametersConfiguration responseIndexersFirstItemParametersConfiguration
            = responseIndexersFirstItemParameters.getConfiguration();
        Assertions.assertNotNull(responseIndexersFirstItemParametersConfiguration);
        List<FieldMapping> responseIndexersFirstItemFieldMappings = responseIndexersFirstItem.getFieldMappings();
        FieldMapping responseIndexersFirstItemFieldMappingsFirstItem
            = responseIndexersFirstItemFieldMappings.iterator().next();
        Assertions.assertNotNull(responseIndexersFirstItemFieldMappingsFirstItem);
        Assertions.assertEquals("/document", responseIndexersFirstItemFieldMappingsFirstItem.getSourceFieldName());
        Assertions.assertEquals("name", responseIndexersFirstItemFieldMappingsFirstItem.getTargetFieldName());
        FieldMappingFunction responseIndexersFirstItemFieldMappingsFirstItemMappingFunction
            = responseIndexersFirstItemFieldMappingsFirstItem.getMappingFunction();
        Assertions.assertNotNull(responseIndexersFirstItemFieldMappingsFirstItemMappingFunction);
        Assertions.assertEquals("base64Encode",
            responseIndexersFirstItemFieldMappingsFirstItemMappingFunction.getName());
        List<FieldMapping> responseIndexersFirstItemOutputFieldMappings
            = responseIndexersFirstItem.getOutputFieldMappings();
        FieldMapping responseIndexersFirstItemOutputFieldMappingsFirstItem
            = responseIndexersFirstItemOutputFieldMappings.iterator().next();
        Assertions.assertNotNull(responseIndexersFirstItemOutputFieldMappingsFirstItem);
        Assertions.assertEquals("/document",
            responseIndexersFirstItemOutputFieldMappingsFirstItem.getSourceFieldName());
        Assertions.assertEquals("name", responseIndexersFirstItemOutputFieldMappingsFirstItem.getTargetFieldName());
        FieldMappingFunction responseIndexersFirstItemOutputFieldMappingsFirstItemMappingFunction
            = responseIndexersFirstItemOutputFieldMappingsFirstItem.getMappingFunction();
        Assertions.assertNotNull(responseIndexersFirstItemOutputFieldMappingsFirstItemMappingFunction);
        Assertions.assertEquals("base64Encode",
            responseIndexersFirstItemOutputFieldMappingsFirstItemMappingFunction.getName());
        Assertions.assertEquals(false, responseIndexersFirstItem.isDisabled());
        SearchResourceEncryptionKey responseIndexersFirstItemEncryptionKey
            = responseIndexersFirstItem.getEncryptionKey();
        Assertions.assertNotNull(responseIndexersFirstItemEncryptionKey);
        Assertions.assertEquals("myUserManagedEncryptionKey-createdinAzureKeyVault",
            responseIndexersFirstItemEncryptionKey.getKeyName());
        Assertions.assertEquals("myKeyVersion-32charAlphaNumericString",
            responseIndexersFirstItemEncryptionKey.getKeyVersion());
        Assertions.assertEquals("https://myKeyVault.vault.azure.net",
            responseIndexersFirstItemEncryptionKey.getVaultUri());
        AzureActiveDirectoryApplicationCredentials responseIndexersFirstItemEncryptionKeyAccessCredentials
            = responseIndexersFirstItemEncryptionKey.getAccessCredentials();
        Assertions.assertNotNull(responseIndexersFirstItemEncryptionKeyAccessCredentials);
        Assertions.assertEquals("00000000-0000-0000-0000-000000000000",
            responseIndexersFirstItemEncryptionKeyAccessCredentials.getApplicationId());
        Assertions.assertEquals("<applicationSecret>",
            responseIndexersFirstItemEncryptionKeyAccessCredentials.getApplicationSecret());
    }
}
