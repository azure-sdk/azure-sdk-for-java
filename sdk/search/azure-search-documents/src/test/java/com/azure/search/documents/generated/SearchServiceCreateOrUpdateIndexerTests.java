// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.search.documents.generated;

import com.azure.core.http.MatchConditions;
import com.azure.search.documents.models.AzureActiveDirectoryApplicationCredentials;
import com.azure.search.documents.models.BlobIndexerDataToExtract;
import com.azure.search.documents.models.BlobIndexerImageAction;
import com.azure.search.documents.models.BlobIndexerPDFTextRotationAlgorithm;
import com.azure.search.documents.models.BlobIndexerParsingMode;
import com.azure.search.documents.models.FieldMapping;
import com.azure.search.documents.models.FieldMappingFunction;
import com.azure.search.documents.models.IndexerExecutionEnvironment;
import com.azure.search.documents.models.IndexingParameters;
import com.azure.search.documents.models.IndexingParametersConfiguration;
import com.azure.search.documents.models.IndexingSchedule;
import com.azure.search.documents.models.MarkdownHeaderDepth;
import com.azure.search.documents.models.MarkdownParsingSubmode;
import com.azure.search.documents.models.SearchIndexer;
import com.azure.search.documents.models.SearchResourceEncryptionKey;
import java.time.Duration;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

@Disabled
public final class SearchServiceCreateOrUpdateIndexerTests extends SearchClientTestBase {
    @Test
    @Disabled
    public void testSearchServiceCreateOrUpdateIndexerTests() {
        // method invocation
        SearchIndexer response
            = indexersClient
                .createOrUpdate("myindexer",
                    new SearchIndexer("myindexer", "mydocdbdatasource", "preview-test")
                        .setDescription("Description of the indexer")
                        .setSkillsetName("myskillset")
                        .setSchedule(new IndexingSchedule(Duration.parse("P1D"))
                            .setStartTime(OffsetDateTime.parse("2025-01-07T19:30:00Z")))
                        .setParameters(
                            new IndexingParameters().setBatchSize(10)
                                .setMaxFailedItems(10)
                                .setMaxFailedItemsPerBatch(5)
                                .setConfiguration(new IndexingParametersConfiguration()
                                    .setParsingMode(BlobIndexerParsingMode.MARKDOWN)
                                    .setExcludedFileNameExtensions(".png,.mp4")
                                    .setIndexedFileNameExtensions(".docx,.pptx")
                                    .setFailOnUnsupportedContentType(true)
                                    .setFailOnUnprocessableDocument(false)
                                    .setIndexStorageMetadataOnlyForOversizedDocuments(true)
                                    .setDelimitedTextHeaders("Header1,Header2")
                                    .setDelimitedTextDelimiter("|")
                                    .setFirstLineContainsHeaders(true)
                                    .setMarkdownParsingSubmode(MarkdownParsingSubmode.ONE_TO_ONE)
                                    .setMarkdownHeaderDepth(MarkdownHeaderDepth.H6)
                                    .setDocumentRoot("/root")
                                    .setDataToExtract(BlobIndexerDataToExtract.STORAGE_METADATA)
                                    .setImageAction(BlobIndexerImageAction.NONE)
                                    .setAllowSkillsetToReadFileData(false)
                                    .setPdfTextRotationAlgorithm(BlobIndexerPDFTextRotationAlgorithm.NONE)
                                    .setExecutionEnvironment(IndexerExecutionEnvironment.STANDARD)
                                    .setAdditionalProperties(mapOf())))
                        .setFieldMappings(Arrays.asList(new FieldMapping("/document").setTargetFieldName("name")
                            .setMappingFunction(new FieldMappingFunction("base64Encode"))))
                        .setOutputFieldMappings(Arrays.asList(new FieldMapping("/document").setTargetFieldName("name")
                            .setMappingFunction(new FieldMappingFunction("base64Encode"))))
                        .setIsDisabled(false)
                        .setEncryptionKey(
                            new SearchResourceEncryptionKey("fakeTokenPlaceholder", "fakeTokenPlaceholder")
                                .setKeyVersion("fakeTokenPlaceholder")
                                .setAccessCredentials(new AzureActiveDirectoryApplicationCredentials(
                                    "00000000-0000-0000-0000-000000000000")
                                        .setApplicationSecret("fakeTokenPlaceholder"))),
                    null, null, new MatchConditions());

        // response assertion
        Assertions.assertNotNull(response);
        // verify property "name"
        Assertions.assertEquals("myindexer", response.getName());
        // verify property "description"
        Assertions.assertEquals("Description of the indexer", response.getDescription());
        // verify property "dataSourceName"
        Assertions.assertEquals("mydocdbdatasource", response.getDataSourceName());
        // verify property "skillsetName"
        Assertions.assertEquals("myskillset", response.getSkillsetName());
        // verify property "targetIndexName"
        Assertions.assertEquals("preview-test", response.getTargetIndexName());
        // verify property "schedule"
        IndexingSchedule responseSchedule = response.getSchedule();
        Assertions.assertNotNull(responseSchedule);
        Assertions.assertNotNull(responseSchedule.getInterval());
        Assertions.assertNotNull(responseSchedule.getStartTime());
        // verify property "parameters"
        IndexingParameters responseParameters = response.getParameters();
        Assertions.assertNotNull(responseParameters);
        Assertions.assertEquals(10, responseParameters.getBatchSize());
        Assertions.assertEquals(10, responseParameters.getMaxFailedItems());
        Assertions.assertEquals(5, responseParameters.getMaxFailedItemsPerBatch());
        IndexingParametersConfiguration responseParametersConfiguration = responseParameters.getConfiguration();
        Assertions.assertNotNull(responseParametersConfiguration);
        Assertions.assertEquals(BlobIndexerParsingMode.MARKDOWN, responseParametersConfiguration.getParsingMode());
        Assertions.assertEquals(".png,.mp4", responseParametersConfiguration.getExcludedFileNameExtensions());
        Assertions.assertEquals(".docx,.pptx", responseParametersConfiguration.getIndexedFileNameExtensions());
        Assertions.assertEquals(true, responseParametersConfiguration.isFailOnUnsupportedContentType());
        Assertions.assertEquals(false, responseParametersConfiguration.isFailOnUnprocessableDocument());
        Assertions.assertEquals(true,
            responseParametersConfiguration.isIndexStorageMetadataOnlyForOversizedDocuments());
        Assertions.assertEquals("Header1,Header2", responseParametersConfiguration.getDelimitedTextHeaders());
        Assertions.assertEquals("|", responseParametersConfiguration.getDelimitedTextDelimiter());
        Assertions.assertEquals(true, responseParametersConfiguration.isFirstLineContainsHeaders());
        Assertions.assertEquals(MarkdownParsingSubmode.ONE_TO_ONE,
            responseParametersConfiguration.getMarkdownParsingSubmode());
        Assertions.assertEquals(MarkdownHeaderDepth.H6, responseParametersConfiguration.getMarkdownHeaderDepth());
        Assertions.assertEquals("/root", responseParametersConfiguration.getDocumentRoot());
        Assertions.assertEquals(BlobIndexerDataToExtract.STORAGE_METADATA,
            responseParametersConfiguration.getDataToExtract());
        Assertions.assertEquals(BlobIndexerImageAction.NONE, responseParametersConfiguration.getImageAction());
        Assertions.assertEquals(false, responseParametersConfiguration.isAllowSkillsetToReadFileData());
        Assertions.assertEquals(BlobIndexerPDFTextRotationAlgorithm.NONE,
            responseParametersConfiguration.getPdfTextRotationAlgorithm());
        Assertions.assertEquals(IndexerExecutionEnvironment.STANDARD,
            responseParametersConfiguration.getExecutionEnvironment());
        // verify property "fieldMappings"
        List<FieldMapping> responseFieldMappings = response.getFieldMappings();
        FieldMapping responseFieldMappingsFirstItem = responseFieldMappings.iterator().next();
        Assertions.assertNotNull(responseFieldMappingsFirstItem);
        Assertions.assertEquals("/document", responseFieldMappingsFirstItem.getSourceFieldName());
        Assertions.assertEquals("name", responseFieldMappingsFirstItem.getTargetFieldName());
        FieldMappingFunction responseFieldMappingsFirstItemMappingFunction
            = responseFieldMappingsFirstItem.getMappingFunction();
        Assertions.assertNotNull(responseFieldMappingsFirstItemMappingFunction);
        Assertions.assertEquals("base64Encode", responseFieldMappingsFirstItemMappingFunction.getName());
        // verify property "outputFieldMappings"
        List<FieldMapping> responseOutputFieldMappings = response.getOutputFieldMappings();
        FieldMapping responseOutputFieldMappingsFirstItem = responseOutputFieldMappings.iterator().next();
        Assertions.assertNotNull(responseOutputFieldMappingsFirstItem);
        Assertions.assertEquals("/document", responseOutputFieldMappingsFirstItem.getSourceFieldName());
        Assertions.assertEquals("name", responseOutputFieldMappingsFirstItem.getTargetFieldName());
        FieldMappingFunction responseOutputFieldMappingsFirstItemMappingFunction
            = responseOutputFieldMappingsFirstItem.getMappingFunction();
        Assertions.assertNotNull(responseOutputFieldMappingsFirstItemMappingFunction);
        Assertions.assertEquals("base64Encode", responseOutputFieldMappingsFirstItemMappingFunction.getName());
        // verify property "isDisabled"
        Assertions.assertEquals(false, response.isDisabled());
        // verify property "eTag"
        Assertions.assertEquals("0x1234568AE7E58A1", response.getETag());
        // verify property "encryptionKey"
        SearchResourceEncryptionKey responseEncryptionKey = response.getEncryptionKey();
        Assertions.assertNotNull(responseEncryptionKey);
        Assertions.assertEquals("myUserManagedEncryptionKey-createdinAzureKeyVault",
            responseEncryptionKey.getKeyName());
        Assertions.assertEquals("myKeyVersion-32charAlphaNumericString", responseEncryptionKey.getKeyVersion());
        Assertions.assertEquals("https://myKeyVault.vault.azure.net", responseEncryptionKey.getVaultUri());
        AzureActiveDirectoryApplicationCredentials responseEncryptionKeyAccessCredentials
            = responseEncryptionKey.getAccessCredentials();
        Assertions.assertNotNull(responseEncryptionKeyAccessCredentials);
        Assertions.assertEquals("00000000-0000-0000-0000-000000000000",
            responseEncryptionKeyAccessCredentials.getApplicationId());
        Assertions.assertEquals("<applicationSecret>", responseEncryptionKeyAccessCredentials.getApplicationSecret());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
