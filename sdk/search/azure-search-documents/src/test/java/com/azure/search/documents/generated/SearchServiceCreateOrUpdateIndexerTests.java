// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.search.documents.generated;

import com.azure.core.http.MatchConditions;
import com.azure.search.documents.models.AzureActiveDirectoryApplicationCredentials;
import com.azure.search.documents.models.BlobIndexerParsingMode;
import com.azure.search.documents.models.FieldMapping;
import com.azure.search.documents.models.IndexingParameters;
import com.azure.search.documents.models.IndexingParametersConfiguration;
import com.azure.search.documents.models.IndexingSchedule;
import com.azure.search.documents.models.MarkdownParsingSubmode;
import com.azure.search.documents.models.SearchIndexer;
import com.azure.search.documents.models.SearchResourceEncryptionKey;
import java.time.Duration;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

@Disabled
public final class SearchServiceCreateOrUpdateIndexerTests extends SearchClientTestBase {
    @Test
    @Disabled
    public void testSearchServiceCreateOrUpdateIndexerTests() {
        // method invocation
        SearchIndexer response
            = indexersClient
                .createOrUpdate("myindexer",
                    new SearchIndexer("myindexer", "mydocdbdatasource", "preview-test")
                        .setDescription("Description of the indexer")
                        .setSkillsetName("myskillset")
                        .setSchedule(new IndexingSchedule(Duration.parse("P1D")))
                        .setParameters(
                            new IndexingParameters().setMaxFailedItems(10)
                                .setMaxFailedItemsPerBatch(5)
                                .setConfiguration(new IndexingParametersConfiguration()
                                    .setParsingMode(BlobIndexerParsingMode.MARKDOWN)
                                    .setMarkdownParsingSubmode(MarkdownParsingSubmode.ONE_TO_ONE)
                                    .setAdditionalProperties(mapOf())))
                        .setFieldMappings(Arrays.asList())
                        .setOutputFieldMappings(Arrays.asList())
                        .setIsDisabled(false)
                        .setEncryptionKey(new SearchResourceEncryptionKey("fakeTokenPlaceholder",
                            "fakeTokenPlaceholder", "fakeTokenPlaceholder").setAccessCredentials(
                                new AzureActiveDirectoryApplicationCredentials("00000000-0000-0000-0000-000000000000")
                                    .setApplicationSecret("fakeTokenPlaceholder"))),
                    null, null, new MatchConditions());

        // response assertion
        Assertions.assertNotNull(response);
        // verify property "name"
        Assertions.assertEquals("myindexer", response.getName());
        // verify property "description"
        Assertions.assertEquals("Description of the indexer", response.getDescription());
        // verify property "dataSourceName"
        Assertions.assertEquals("mydocdbdatasource", response.getDataSourceName());
        // verify property "skillsetName"
        Assertions.assertEquals("myskillset", response.getSkillsetName());
        // verify property "targetIndexName"
        Assertions.assertEquals("preview-test", response.getTargetIndexName());
        // verify property "schedule"
        IndexingSchedule responseSchedule = response.getSchedule();
        Assertions.assertNotNull(responseSchedule);
        Assertions.assertNotNull(responseSchedule.getInterval());
        Assertions.assertNotNull(responseSchedule.getStartTime());
        // verify property "parameters"
        IndexingParameters responseParameters = response.getParameters();
        Assertions.assertNotNull(responseParameters);
        Assertions.assertEquals(10, responseParameters.getMaxFailedItems());
        Assertions.assertEquals(5, responseParameters.getMaxFailedItemsPerBatch());
        IndexingParametersConfiguration responseParametersConfiguration = responseParameters.getConfiguration();
        Assertions.assertNotNull(responseParametersConfiguration);
        Assertions.assertEquals(BlobIndexerParsingMode.MARKDOWN, responseParametersConfiguration.getParsingMode());
        Assertions.assertEquals(MarkdownParsingSubmode.ONE_TO_ONE,
            responseParametersConfiguration.getMarkdownParsingSubmode());
        // verify property "fieldMappings"
        List<FieldMapping> responseFieldMappings = response.getFieldMappings();
        Assertions.assertEquals(0, responseFieldMappings.size());
        // verify property "outputFieldMappings"
        List<FieldMapping> responseOutputFieldMappings = response.getOutputFieldMappings();
        Assertions.assertEquals(0, responseOutputFieldMappings.size());
        // verify property "isDisabled"
        Assertions.assertEquals(false, response.isDisabled());
        // verify property "eTag"
        Assertions.assertEquals("0x1234568AE7E58A1", response.getETag());
        // verify property "encryptionKey"
        SearchResourceEncryptionKey responseEncryptionKey = response.getEncryptionKey();
        Assertions.assertNotNull(responseEncryptionKey);
        Assertions.assertEquals("myUserManagedEncryptionKey-createdinAzureKeyVault",
            responseEncryptionKey.getKeyName());
        Assertions.assertEquals("myKeyVersion-32charAlphaNumericString", responseEncryptionKey.getKeyVersion());
        Assertions.assertEquals("https://myKeyVault.vault.azure.net", responseEncryptionKey.getVaultUri());
        AzureActiveDirectoryApplicationCredentials responseEncryptionKeyAccessCredentials
            = responseEncryptionKey.getAccessCredentials();
        Assertions.assertNotNull(responseEncryptionKeyAccessCredentials);
        Assertions.assertEquals("00000000-0000-0000-0000-000000000000",
            responseEncryptionKeyAccessCredentials.getApplicationId());
        Assertions.assertEquals("<applicationSecret>", responseEncryptionKeyAccessCredentials.getApplicationSecret());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
