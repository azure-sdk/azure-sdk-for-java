// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.search.documents.generated;

import com.azure.core.http.rest.PagedIterable;
import com.azure.search.documents.models.CharFilter;
import com.azure.search.documents.models.CorsOptions;
import com.azure.search.documents.models.LexicalAnalyzer;
import com.azure.search.documents.models.LexicalNormalizer;
import com.azure.search.documents.models.LexicalTokenizer;
import com.azure.search.documents.models.RescoringOptions;
import com.azure.search.documents.models.ScoringFunction;
import com.azure.search.documents.models.ScoringFunctionAggregation;
import com.azure.search.documents.models.ScoringFunctionInterpolation;
import com.azure.search.documents.models.ScoringProfile;
import com.azure.search.documents.models.SearchField;
import com.azure.search.documents.models.SearchFieldDataType;
import com.azure.search.documents.models.SearchIndex;
import com.azure.search.documents.models.SearchSuggester;
import com.azure.search.documents.models.SemanticConfiguration;
import com.azure.search.documents.models.SemanticField;
import com.azure.search.documents.models.SemanticPrioritizedFields;
import com.azure.search.documents.models.SemanticSearch;
import com.azure.search.documents.models.SimilarityAlgorithm;
import com.azure.search.documents.models.TextWeights;
import com.azure.search.documents.models.TokenFilter;
import com.azure.search.documents.models.VectorSearch;
import com.azure.search.documents.models.VectorSearchAlgorithmConfiguration;
import com.azure.search.documents.models.VectorSearchAlgorithmKind;
import com.azure.search.documents.models.VectorSearchCompression;
import com.azure.search.documents.models.VectorSearchCompressionKind;
import com.azure.search.documents.models.VectorSearchCompressionRescoreStorageMethod;
import com.azure.search.documents.models.VectorSearchProfile;
import com.azure.search.documents.models.VectorSearchVectorizer;
import com.azure.search.documents.models.VectorSearchVectorizerKind;
import java.util.List;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

@Disabled
public final class SearchServiceListIndexesTests extends SearchClientTestBase {
    @Test
    @Disabled
    public void testSearchServiceListIndexesTests() {
        // method invocation
        PagedIterable<SearchIndex> response = indexesClient.list(null);

        // response assertion
        Assertions.assertEquals(200, response.iterableByPage().iterator().next().getStatusCode());
        SearchIndex firstItem = response.iterator().next();
        Assertions.assertNotNull(firstItem);
        // verify property "name"
        Assertions.assertEquals("preview-test", firstItem.getName());
        // verify property "fields"
        List<SearchField> firstItemFields = firstItem.getFields();
        SearchField firstItemFieldsFirstItem = firstItemFields.iterator().next();
        Assertions.assertNotNull(firstItemFieldsFirstItem);
        Assertions.assertEquals("id", firstItemFieldsFirstItem.getName());
        Assertions.assertEquals(SearchFieldDataType.STRING, firstItemFieldsFirstItem.getType());
        Assertions.assertEquals(true, firstItemFieldsFirstItem.isKey());
        Assertions.assertEquals(true, firstItemFieldsFirstItem.isRetrievable());
        Assertions.assertEquals(true, firstItemFieldsFirstItem.isStored());
        Assertions.assertEquals(true, firstItemFieldsFirstItem.isSearchable());
        Assertions.assertEquals(true, firstItemFieldsFirstItem.isFilterable());
        Assertions.assertEquals(true, firstItemFieldsFirstItem.isSortable());
        Assertions.assertEquals(true, firstItemFieldsFirstItem.isFacetable());
        List<String> firstItemFieldsFirstItemSynonymMaps = firstItemFieldsFirstItem.getSynonymMaps();
        Assertions.assertEquals(0, firstItemFieldsFirstItemSynonymMaps.size());
        // verify property "scoringProfiles"
        List<ScoringProfile> firstItemScoringProfiles = firstItem.getScoringProfiles();
        ScoringProfile firstItemScoringProfilesFirstItem = firstItemScoringProfiles.iterator().next();
        Assertions.assertNotNull(firstItemScoringProfilesFirstItem);
        Assertions.assertEquals("stringFieldBoost", firstItemScoringProfilesFirstItem.getName());
        TextWeights firstItemScoringProfilesFirstItemTextWeights = firstItemScoringProfilesFirstItem.getTextWeights();
        Assertions.assertNotNull(firstItemScoringProfilesFirstItemTextWeights);
        Assertions.assertNotNull(firstItemScoringProfilesFirstItemTextWeights.getWeights());
        List<ScoringFunction> firstItemScoringProfilesFirstItemFunctions
            = firstItemScoringProfilesFirstItem.getFunctions();
        ScoringFunction firstItemScoringProfilesFirstItemFunctionsFirstItem
            = firstItemScoringProfilesFirstItemFunctions.iterator().next();
        Assertions.assertNotNull(firstItemScoringProfilesFirstItemFunctionsFirstItem);
        Assertions.assertEquals("tag", firstItemScoringProfilesFirstItemFunctionsFirstItem.getType());
        Assertions.assertEquals("category", firstItemScoringProfilesFirstItemFunctionsFirstItem.getFieldName());
        Assertions.assertEquals(2.0, firstItemScoringProfilesFirstItemFunctionsFirstItem.getBoost());
        Assertions.assertEquals(ScoringFunctionInterpolation.LINEAR,
            firstItemScoringProfilesFirstItemFunctionsFirstItem.getInterpolation());
        Assertions.assertEquals(ScoringFunctionAggregation.SUM,
            firstItemScoringProfilesFirstItem.getFunctionAggregation());
        // verify property "defaultScoringProfile"
        Assertions.assertEquals("stringFieldBoost", firstItem.getDefaultScoringProfile());
        // verify property "corsOptions"
        CorsOptions firstItemCorsOptions = firstItem.getCorsOptions();
        Assertions.assertNotNull(firstItemCorsOptions);
        List<String> firstItemCorsOptionsAllowedOrigins = firstItemCorsOptions.getAllowedOrigins();
        Assertions.assertEquals("https://www.example.com/foo", firstItemCorsOptionsAllowedOrigins.iterator().next());
        Assertions.assertEquals(10L, firstItemCorsOptions.getMaxAgeInSeconds());
        // verify property "suggesters"
        List<SearchSuggester> firstItemSuggesters = firstItem.getSuggesters();
        SearchSuggester firstItemSuggestersFirstItem = firstItemSuggesters.iterator().next();
        Assertions.assertNotNull(firstItemSuggestersFirstItem);
        Assertions.assertEquals("sg", firstItemSuggestersFirstItem.getName());
        Assertions.assertEquals("analyzingInfixMatching", firstItemSuggestersFirstItem.getSearchMode());
        List<String> firstItemSuggestersFirstItemSourceFields = firstItemSuggestersFirstItem.getSourceFields();
        Assertions.assertEquals("category", firstItemSuggestersFirstItemSourceFields.iterator().next());
        // verify property "analyzers"
        List<LexicalAnalyzer> firstItemAnalyzers = firstItem.getAnalyzers();
        LexicalAnalyzer firstItemAnalyzersFirstItem = firstItemAnalyzers.iterator().next();
        Assertions.assertNotNull(firstItemAnalyzersFirstItem);
        Assertions.assertEquals("#Microsoft.Azure.Search.CustomAnalyzer", firstItemAnalyzersFirstItem.getOdataType());
        Assertions.assertEquals("tagsAnalyzer", firstItemAnalyzersFirstItem.getName());
        // verify property "tokenizers"
        List<LexicalTokenizer> firstItemTokenizers = firstItem.getTokenizers();
        LexicalTokenizer firstItemTokenizersFirstItem = firstItemTokenizers.iterator().next();
        Assertions.assertNotNull(firstItemTokenizersFirstItem);
        Assertions.assertEquals("#Microsoft.Azure.Search.StandardTokenizerV2",
            firstItemTokenizersFirstItem.getOdataType());
        Assertions.assertEquals("my_tokenizer", firstItemTokenizersFirstItem.getName());
        // verify property "tokenFilters"
        List<TokenFilter> firstItemTokenFilters = firstItem.getTokenFilters();
        TokenFilter firstItemTokenFiltersFirstItem = firstItemTokenFilters.iterator().next();
        Assertions.assertNotNull(firstItemTokenFiltersFirstItem);
        Assertions.assertEquals("#Microsoft.Azure.Search.AsciiFoldingTokenFilter",
            firstItemTokenFiltersFirstItem.getOdataType());
        Assertions.assertEquals("my_tokenFilter", firstItemTokenFiltersFirstItem.getName());
        // verify property "charFilters"
        List<CharFilter> firstItemCharFilters = firstItem.getCharFilters();
        CharFilter firstItemCharFiltersFirstItem = firstItemCharFilters.iterator().next();
        Assertions.assertNotNull(firstItemCharFiltersFirstItem);
        Assertions.assertEquals("#Microsoft.Azure.Search.MappingCharFilter",
            firstItemCharFiltersFirstItem.getOdataType());
        Assertions.assertEquals("my_mapping", firstItemCharFiltersFirstItem.getName());
        // verify property "normalizers"
        List<LexicalNormalizer> firstItemNormalizers = firstItem.getNormalizers();
        LexicalNormalizer firstItemNormalizersFirstItem = firstItemNormalizers.iterator().next();
        Assertions.assertNotNull(firstItemNormalizersFirstItem);
        Assertions.assertEquals("#Microsoft.Azure.Search.CustomNormalizer",
            firstItemNormalizersFirstItem.getOdataType());
        Assertions.assertEquals("my_normalizer", firstItemNormalizersFirstItem.getName());
        // verify property "similarity"
        SimilarityAlgorithm firstItemSimilarity = firstItem.getSimilarity();
        Assertions.assertNotNull(firstItemSimilarity);
        Assertions.assertEquals("#Microsoft.Azure.Search.BM25Similarity", firstItemSimilarity.getOdataType());
        // verify property "semanticSearch"
        SemanticSearch firstItemSemanticSearch = firstItem.getSemanticSearch();
        Assertions.assertNotNull(firstItemSemanticSearch);
        Assertions.assertEquals("testconfig", firstItemSemanticSearch.getDefaultConfigurationName());
        List<SemanticConfiguration> firstItemSemanticSearchConfigurations = firstItemSemanticSearch.getConfigurations();
        SemanticConfiguration firstItemSemanticSearchConfigurationsFirstItem
            = firstItemSemanticSearchConfigurations.iterator().next();
        Assertions.assertNotNull(firstItemSemanticSearchConfigurationsFirstItem);
        Assertions.assertEquals("testconfig", firstItemSemanticSearchConfigurationsFirstItem.getName());
        SemanticPrioritizedFields firstItemSemanticSearchConfigurationsFirstItemPrioritizedFields
            = firstItemSemanticSearchConfigurationsFirstItem.getPrioritizedFields();
        Assertions.assertNotNull(firstItemSemanticSearchConfigurationsFirstItemPrioritizedFields);
        SemanticField firstItemSemanticSearchConfigurationsFirstItemPrioritizedFieldsTitleField
            = firstItemSemanticSearchConfigurationsFirstItemPrioritizedFields.getTitleField();
        Assertions.assertNotNull(firstItemSemanticSearchConfigurationsFirstItemPrioritizedFieldsTitleField);
        Assertions.assertEquals("category",
            firstItemSemanticSearchConfigurationsFirstItemPrioritizedFieldsTitleField.getFieldName());
        List<SemanticField> firstItemSemanticSearchConfigurationsFirstItemPrioritizedFieldsContentFields
            = firstItemSemanticSearchConfigurationsFirstItemPrioritizedFields.getContentFields();
        SemanticField firstItemSemanticSearchConfigurationsFirstItemPrioritizedFieldsContentFieldsFirstItem
            = firstItemSemanticSearchConfigurationsFirstItemPrioritizedFieldsContentFields.iterator().next();
        Assertions.assertNotNull(firstItemSemanticSearchConfigurationsFirstItemPrioritizedFieldsContentFieldsFirstItem);
        Assertions.assertEquals("description",
            firstItemSemanticSearchConfigurationsFirstItemPrioritizedFieldsContentFieldsFirstItem.getFieldName());
        List<SemanticField> firstItemSemanticSearchConfigurationsFirstItemPrioritizedFieldsKeywordsFields
            = firstItemSemanticSearchConfigurationsFirstItemPrioritizedFields.getKeywordsFields();
        SemanticField firstItemSemanticSearchConfigurationsFirstItemPrioritizedFieldsKeywordsFieldsFirstItem
            = firstItemSemanticSearchConfigurationsFirstItemPrioritizedFieldsKeywordsFields.iterator().next();
        Assertions
            .assertNotNull(firstItemSemanticSearchConfigurationsFirstItemPrioritizedFieldsKeywordsFieldsFirstItem);
        Assertions.assertEquals("ownerId",
            firstItemSemanticSearchConfigurationsFirstItemPrioritizedFieldsKeywordsFieldsFirstItem.getFieldName());
        Assertions.assertEquals(false, firstItemSemanticSearchConfigurationsFirstItem.isFlightingOptIn());
        // verify property "vectorSearch"
        VectorSearch firstItemVectorSearch = firstItem.getVectorSearch();
        Assertions.assertNotNull(firstItemVectorSearch);
        List<VectorSearchProfile> firstItemVectorSearchProfiles = firstItemVectorSearch.getProfiles();
        VectorSearchProfile firstItemVectorSearchProfilesFirstItem = firstItemVectorSearchProfiles.iterator().next();
        Assertions.assertNotNull(firstItemVectorSearchProfilesFirstItem);
        Assertions.assertEquals("config1", firstItemVectorSearchProfilesFirstItem.getName());
        Assertions.assertEquals("cosine", firstItemVectorSearchProfilesFirstItem.getAlgorithmConfigurationName());
        Assertions.assertEquals("openai", firstItemVectorSearchProfilesFirstItem.getVectorizerName());
        Assertions.assertEquals("mySQ8", firstItemVectorSearchProfilesFirstItem.getCompressionName());
        List<VectorSearchAlgorithmConfiguration> firstItemVectorSearchAlgorithms
            = firstItemVectorSearch.getAlgorithms();
        VectorSearchAlgorithmConfiguration firstItemVectorSearchAlgorithmsFirstItem
            = firstItemVectorSearchAlgorithms.iterator().next();
        Assertions.assertNotNull(firstItemVectorSearchAlgorithmsFirstItem);
        Assertions.assertEquals(VectorSearchAlgorithmKind.HNSW, firstItemVectorSearchAlgorithmsFirstItem.getKind());
        Assertions.assertEquals("cosine", firstItemVectorSearchAlgorithmsFirstItem.getName());
        List<VectorSearchVectorizer> firstItemVectorSearchVectorizers = firstItemVectorSearch.getVectorizers();
        VectorSearchVectorizer firstItemVectorSearchVectorizersFirstItem
            = firstItemVectorSearchVectorizers.iterator().next();
        Assertions.assertNotNull(firstItemVectorSearchVectorizersFirstItem);
        Assertions.assertEquals(VectorSearchVectorizerKind.AZURE_OPEN_AI,
            firstItemVectorSearchVectorizersFirstItem.getKind());
        Assertions.assertEquals("openai", firstItemVectorSearchVectorizersFirstItem.getVectorizerName());
        List<VectorSearchCompression> firstItemVectorSearchCompressions = firstItemVectorSearch.getCompressions();
        VectorSearchCompression firstItemVectorSearchCompressionsFirstItem
            = firstItemVectorSearchCompressions.iterator().next();
        Assertions.assertNotNull(firstItemVectorSearchCompressionsFirstItem);
        Assertions.assertEquals(VectorSearchCompressionKind.SCALAR_QUANTIZATION,
            firstItemVectorSearchCompressionsFirstItem.getKind());
        Assertions.assertEquals("mySQ8", firstItemVectorSearchCompressionsFirstItem.getCompressionName());
        RescoringOptions firstItemVectorSearchCompressionsFirstItemRescoringOptions
            = firstItemVectorSearchCompressionsFirstItem.getRescoringOptions();
        Assertions.assertNotNull(firstItemVectorSearchCompressionsFirstItemRescoringOptions);
        Assertions.assertEquals(true, firstItemVectorSearchCompressionsFirstItemRescoringOptions.isEnableRescoring());
        Assertions.assertEquals(10.0D,
            firstItemVectorSearchCompressionsFirstItemRescoringOptions.getDefaultOversampling());
        Assertions.assertEquals(VectorSearchCompressionRescoreStorageMethod.PRESERVE_ORIGINALS,
            firstItemVectorSearchCompressionsFirstItemRescoringOptions.getRescoreStorageMethod());
        Assertions.assertEquals(2, firstItemVectorSearchCompressionsFirstItem.getTruncationDimension());
        // verify property "eTag"
        Assertions.assertEquals("0x1234568AE7E58A1", firstItem.getETag());
    }
}
