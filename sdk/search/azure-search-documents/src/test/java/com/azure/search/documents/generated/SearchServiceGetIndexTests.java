// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.search.documents.generated;

import com.azure.search.documents.models.CharFilter;
import com.azure.search.documents.models.CorsOptions;
import com.azure.search.documents.models.LexicalAnalyzer;
import com.azure.search.documents.models.LexicalNormalizer;
import com.azure.search.documents.models.LexicalTokenizer;
import com.azure.search.documents.models.RescoringOptions;
import com.azure.search.documents.models.ScoringFunction;
import com.azure.search.documents.models.ScoringFunctionAggregation;
import com.azure.search.documents.models.ScoringFunctionInterpolation;
import com.azure.search.documents.models.ScoringProfile;
import com.azure.search.documents.models.SearchField;
import com.azure.search.documents.models.SearchFieldDataType;
import com.azure.search.documents.models.SearchIndex;
import com.azure.search.documents.models.SearchSuggester;
import com.azure.search.documents.models.SemanticConfiguration;
import com.azure.search.documents.models.SemanticField;
import com.azure.search.documents.models.SemanticPrioritizedFields;
import com.azure.search.documents.models.SemanticSearch;
import com.azure.search.documents.models.SimilarityAlgorithm;
import com.azure.search.documents.models.TextWeights;
import com.azure.search.documents.models.TokenFilter;
import com.azure.search.documents.models.VectorSearch;
import com.azure.search.documents.models.VectorSearchAlgorithmConfiguration;
import com.azure.search.documents.models.VectorSearchAlgorithmKind;
import com.azure.search.documents.models.VectorSearchCompression;
import com.azure.search.documents.models.VectorSearchCompressionKind;
import com.azure.search.documents.models.VectorSearchCompressionRescoreStorageMethod;
import com.azure.search.documents.models.VectorSearchProfile;
import com.azure.search.documents.models.VectorSearchVectorizer;
import com.azure.search.documents.models.VectorSearchVectorizerKind;
import java.util.List;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

@Disabled
public final class SearchServiceGetIndexTests extends SearchClientTestBase {
    @Test
    @Disabled
    public void testSearchServiceGetIndexTests() {
        // method invocation
        SearchIndex response = indexesClient.get("preview-test");

        // response assertion
        Assertions.assertNotNull(response);
        // verify property "name"
        Assertions.assertEquals("preview-test", response.getName());
        // verify property "fields"
        List<SearchField> responseFields = response.getFields();
        SearchField responseFieldsFirstItem = responseFields.iterator().next();
        Assertions.assertNotNull(responseFieldsFirstItem);
        Assertions.assertEquals("id", responseFieldsFirstItem.getName());
        Assertions.assertEquals(SearchFieldDataType.STRING, responseFieldsFirstItem.getType());
        Assertions.assertEquals(true, responseFieldsFirstItem.isKey());
        Assertions.assertEquals(true, responseFieldsFirstItem.isRetrievable());
        Assertions.assertEquals(true, responseFieldsFirstItem.isStored());
        Assertions.assertEquals(true, responseFieldsFirstItem.isSearchable());
        Assertions.assertEquals(true, responseFieldsFirstItem.isFilterable());
        Assertions.assertEquals(true, responseFieldsFirstItem.isSortable());
        Assertions.assertEquals(true, responseFieldsFirstItem.isFacetable());
        List<String> responseFieldsFirstItemSynonymMaps = responseFieldsFirstItem.getSynonymMaps();
        Assertions.assertEquals(0, responseFieldsFirstItemSynonymMaps.size());
        // verify property "scoringProfiles"
        List<ScoringProfile> responseScoringProfiles = response.getScoringProfiles();
        ScoringProfile responseScoringProfilesFirstItem = responseScoringProfiles.iterator().next();
        Assertions.assertNotNull(responseScoringProfilesFirstItem);
        Assertions.assertEquals("stringFieldBoost", responseScoringProfilesFirstItem.getName());
        TextWeights responseScoringProfilesFirstItemTextWeights = responseScoringProfilesFirstItem.getTextWeights();
        Assertions.assertNotNull(responseScoringProfilesFirstItemTextWeights);
        Assertions.assertNotNull(responseScoringProfilesFirstItemTextWeights.getWeights());
        List<ScoringFunction> responseScoringProfilesFirstItemFunctions
            = responseScoringProfilesFirstItem.getFunctions();
        ScoringFunction responseScoringProfilesFirstItemFunctionsFirstItem
            = responseScoringProfilesFirstItemFunctions.iterator().next();
        Assertions.assertNotNull(responseScoringProfilesFirstItemFunctionsFirstItem);
        Assertions.assertEquals("tag", responseScoringProfilesFirstItemFunctionsFirstItem.getType());
        Assertions.assertEquals("category", responseScoringProfilesFirstItemFunctionsFirstItem.getFieldName());
        Assertions.assertEquals(2.0, responseScoringProfilesFirstItemFunctionsFirstItem.getBoost());
        Assertions.assertEquals(ScoringFunctionInterpolation.LINEAR,
            responseScoringProfilesFirstItemFunctionsFirstItem.getInterpolation());
        Assertions.assertEquals(ScoringFunctionAggregation.SUM,
            responseScoringProfilesFirstItem.getFunctionAggregation());
        // verify property "defaultScoringProfile"
        Assertions.assertEquals("stringFieldBoost", response.getDefaultScoringProfile());
        // verify property "corsOptions"
        CorsOptions responseCorsOptions = response.getCorsOptions();
        Assertions.assertNotNull(responseCorsOptions);
        List<String> responseCorsOptionsAllowedOrigins = responseCorsOptions.getAllowedOrigins();
        Assertions.assertEquals("https://www.example.com/foo", responseCorsOptionsAllowedOrigins.iterator().next());
        Assertions.assertEquals(10L, responseCorsOptions.getMaxAgeInSeconds());
        // verify property "suggesters"
        List<SearchSuggester> responseSuggesters = response.getSuggesters();
        SearchSuggester responseSuggestersFirstItem = responseSuggesters.iterator().next();
        Assertions.assertNotNull(responseSuggestersFirstItem);
        Assertions.assertEquals("sg", responseSuggestersFirstItem.getName());
        Assertions.assertEquals("analyzingInfixMatching", responseSuggestersFirstItem.getSearchMode());
        List<String> responseSuggestersFirstItemSourceFields = responseSuggestersFirstItem.getSourceFields();
        Assertions.assertEquals("category", responseSuggestersFirstItemSourceFields.iterator().next());
        // verify property "analyzers"
        List<LexicalAnalyzer> responseAnalyzers = response.getAnalyzers();
        LexicalAnalyzer responseAnalyzersFirstItem = responseAnalyzers.iterator().next();
        Assertions.assertNotNull(responseAnalyzersFirstItem);
        Assertions.assertEquals("#Microsoft.Azure.Search.CustomAnalyzer", responseAnalyzersFirstItem.getOdataType());
        Assertions.assertEquals("tagsAnalyzer", responseAnalyzersFirstItem.getName());
        // verify property "tokenizers"
        List<LexicalTokenizer> responseTokenizers = response.getTokenizers();
        LexicalTokenizer responseTokenizersFirstItem = responseTokenizers.iterator().next();
        Assertions.assertNotNull(responseTokenizersFirstItem);
        Assertions.assertEquals("#Microsoft.Azure.Search.StandardTokenizerV2",
            responseTokenizersFirstItem.getOdataType());
        Assertions.assertEquals("my_tokenizer", responseTokenizersFirstItem.getName());
        // verify property "tokenFilters"
        List<TokenFilter> responseTokenFilters = response.getTokenFilters();
        TokenFilter responseTokenFiltersFirstItem = responseTokenFilters.iterator().next();
        Assertions.assertNotNull(responseTokenFiltersFirstItem);
        Assertions.assertEquals("#Microsoft.Azure.Search.AsciiFoldingTokenFilter",
            responseTokenFiltersFirstItem.getOdataType());
        Assertions.assertEquals("my_tokenFilter", responseTokenFiltersFirstItem.getName());
        // verify property "charFilters"
        List<CharFilter> responseCharFilters = response.getCharFilters();
        CharFilter responseCharFiltersFirstItem = responseCharFilters.iterator().next();
        Assertions.assertNotNull(responseCharFiltersFirstItem);
        Assertions.assertEquals("#Microsoft.Azure.Search.MappingCharFilter",
            responseCharFiltersFirstItem.getOdataType());
        Assertions.assertEquals("my_mapping", responseCharFiltersFirstItem.getName());
        // verify property "normalizers"
        List<LexicalNormalizer> responseNormalizers = response.getNormalizers();
        LexicalNormalizer responseNormalizersFirstItem = responseNormalizers.iterator().next();
        Assertions.assertNotNull(responseNormalizersFirstItem);
        Assertions.assertEquals("#Microsoft.Azure.Search.CustomNormalizer",
            responseNormalizersFirstItem.getOdataType());
        Assertions.assertEquals("my_normalizer", responseNormalizersFirstItem.getName());
        // verify property "similarity"
        SimilarityAlgorithm responseSimilarity = response.getSimilarity();
        Assertions.assertNotNull(responseSimilarity);
        Assertions.assertEquals("#Microsoft.Azure.Search.BM25Similarity", responseSimilarity.getOdataType());
        // verify property "semanticSearch"
        SemanticSearch responseSemanticSearch = response.getSemanticSearch();
        Assertions.assertNotNull(responseSemanticSearch);
        Assertions.assertEquals("testconfig", responseSemanticSearch.getDefaultConfigurationName());
        List<SemanticConfiguration> responseSemanticSearchConfigurations = responseSemanticSearch.getConfigurations();
        SemanticConfiguration responseSemanticSearchConfigurationsFirstItem
            = responseSemanticSearchConfigurations.iterator().next();
        Assertions.assertNotNull(responseSemanticSearchConfigurationsFirstItem);
        Assertions.assertEquals("testconfig", responseSemanticSearchConfigurationsFirstItem.getName());
        SemanticPrioritizedFields responseSemanticSearchConfigurationsFirstItemPrioritizedFields
            = responseSemanticSearchConfigurationsFirstItem.getPrioritizedFields();
        Assertions.assertNotNull(responseSemanticSearchConfigurationsFirstItemPrioritizedFields);
        SemanticField responseSemanticSearchConfigurationsFirstItemPrioritizedFieldsTitleField
            = responseSemanticSearchConfigurationsFirstItemPrioritizedFields.getTitleField();
        Assertions.assertNotNull(responseSemanticSearchConfigurationsFirstItemPrioritizedFieldsTitleField);
        Assertions.assertEquals("category",
            responseSemanticSearchConfigurationsFirstItemPrioritizedFieldsTitleField.getFieldName());
        List<SemanticField> responseSemanticSearchConfigurationsFirstItemPrioritizedFieldsContentFields
            = responseSemanticSearchConfigurationsFirstItemPrioritizedFields.getContentFields();
        SemanticField responseSemanticSearchConfigurationsFirstItemPrioritizedFieldsContentFieldsFirstItem
            = responseSemanticSearchConfigurationsFirstItemPrioritizedFieldsContentFields.iterator().next();
        Assertions.assertNotNull(responseSemanticSearchConfigurationsFirstItemPrioritizedFieldsContentFieldsFirstItem);
        Assertions.assertEquals("description",
            responseSemanticSearchConfigurationsFirstItemPrioritizedFieldsContentFieldsFirstItem.getFieldName());
        List<SemanticField> responseSemanticSearchConfigurationsFirstItemPrioritizedFieldsKeywordsFields
            = responseSemanticSearchConfigurationsFirstItemPrioritizedFields.getKeywordsFields();
        SemanticField responseSemanticSearchConfigurationsFirstItemPrioritizedFieldsKeywordsFieldsFirstItem
            = responseSemanticSearchConfigurationsFirstItemPrioritizedFieldsKeywordsFields.iterator().next();
        Assertions.assertNotNull(responseSemanticSearchConfigurationsFirstItemPrioritizedFieldsKeywordsFieldsFirstItem);
        Assertions.assertEquals("ownerId",
            responseSemanticSearchConfigurationsFirstItemPrioritizedFieldsKeywordsFieldsFirstItem.getFieldName());
        Assertions.assertEquals(false, responseSemanticSearchConfigurationsFirstItem.isFlightingOptIn());
        // verify property "vectorSearch"
        VectorSearch responseVectorSearch = response.getVectorSearch();
        Assertions.assertNotNull(responseVectorSearch);
        List<VectorSearchProfile> responseVectorSearchProfiles = responseVectorSearch.getProfiles();
        VectorSearchProfile responseVectorSearchProfilesFirstItem = responseVectorSearchProfiles.iterator().next();
        Assertions.assertNotNull(responseVectorSearchProfilesFirstItem);
        Assertions.assertEquals("config1", responseVectorSearchProfilesFirstItem.getName());
        Assertions.assertEquals("cosine", responseVectorSearchProfilesFirstItem.getAlgorithmConfigurationName());
        Assertions.assertEquals("openai", responseVectorSearchProfilesFirstItem.getVectorizerName());
        Assertions.assertEquals("mySQ8", responseVectorSearchProfilesFirstItem.getCompressionName());
        List<VectorSearchAlgorithmConfiguration> responseVectorSearchAlgorithms = responseVectorSearch.getAlgorithms();
        VectorSearchAlgorithmConfiguration responseVectorSearchAlgorithmsFirstItem
            = responseVectorSearchAlgorithms.iterator().next();
        Assertions.assertNotNull(responseVectorSearchAlgorithmsFirstItem);
        Assertions.assertEquals(VectorSearchAlgorithmKind.HNSW, responseVectorSearchAlgorithmsFirstItem.getKind());
        Assertions.assertEquals("cosine", responseVectorSearchAlgorithmsFirstItem.getName());
        List<VectorSearchVectorizer> responseVectorSearchVectorizers = responseVectorSearch.getVectorizers();
        VectorSearchVectorizer responseVectorSearchVectorizersFirstItem
            = responseVectorSearchVectorizers.iterator().next();
        Assertions.assertNotNull(responseVectorSearchVectorizersFirstItem);
        Assertions.assertEquals(VectorSearchVectorizerKind.AZURE_OPEN_AI,
            responseVectorSearchVectorizersFirstItem.getKind());
        Assertions.assertEquals("openai", responseVectorSearchVectorizersFirstItem.getVectorizerName());
        List<VectorSearchCompression> responseVectorSearchCompressions = responseVectorSearch.getCompressions();
        VectorSearchCompression responseVectorSearchCompressionsFirstItem
            = responseVectorSearchCompressions.iterator().next();
        Assertions.assertNotNull(responseVectorSearchCompressionsFirstItem);
        Assertions.assertEquals(VectorSearchCompressionKind.SCALAR_QUANTIZATION,
            responseVectorSearchCompressionsFirstItem.getKind());
        Assertions.assertEquals("mySQ8", responseVectorSearchCompressionsFirstItem.getCompressionName());
        RescoringOptions responseVectorSearchCompressionsFirstItemRescoringOptions
            = responseVectorSearchCompressionsFirstItem.getRescoringOptions();
        Assertions.assertNotNull(responseVectorSearchCompressionsFirstItemRescoringOptions);
        Assertions.assertEquals(true, responseVectorSearchCompressionsFirstItemRescoringOptions.isEnableRescoring());
        Assertions.assertEquals(10.0D,
            responseVectorSearchCompressionsFirstItemRescoringOptions.getDefaultOversampling());
        Assertions.assertEquals(VectorSearchCompressionRescoreStorageMethod.PRESERVE_ORIGINALS,
            responseVectorSearchCompressionsFirstItemRescoringOptions.getRescoreStorageMethod());
        Assertions.assertEquals(2, responseVectorSearchCompressionsFirstItem.getTruncationDimension());
        // verify property "eTag"
        Assertions.assertEquals("0x1234568AE7E58A1", response.getETag());
    }
}
