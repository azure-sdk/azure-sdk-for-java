// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.aodgv1.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.aodgv1.fluent.GroundStationsClient;
import com.azure.resourcemanager.aodgv1.fluent.models.GroundStationInner;
import com.azure.resourcemanager.aodgv1.fluent.models.ResourceIdListResultValueItemInner;
import com.azure.resourcemanager.aodgv1.models.GroundStation;
import com.azure.resourcemanager.aodgv1.models.GroundStations;
import com.azure.resourcemanager.aodgv1.models.ResourceIdListResultValueItem;

public final class GroundStationsImpl implements GroundStations {
    private static final ClientLogger LOGGER = new ClientLogger(GroundStationsImpl.class);

    private final GroundStationsClient innerClient;

    private final com.azure.resourcemanager.aodgv1.Aodgv1Manager serviceManager;

    public GroundStationsImpl(GroundStationsClient innerClient,
        com.azure.resourcemanager.aodgv1.Aodgv1Manager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<GroundStation> list() {
        PagedIterable<GroundStationInner> inner = this.serviceClient().list();
        return Utils.mapPage(inner, inner1 -> new GroundStationImpl(inner1, this.manager()));
    }

    public PagedIterable<GroundStation> list(String skiptoken, Context context) {
        PagedIterable<GroundStationInner> inner = this.serviceClient().list(skiptoken, context);
        return Utils.mapPage(inner, inner1 -> new GroundStationImpl(inner1, this.manager()));
    }

    public PagedIterable<GroundStation> listByResourceGroup(String resourceGroupName) {
        PagedIterable<GroundStationInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return Utils.mapPage(inner, inner1 -> new GroundStationImpl(inner1, this.manager()));
    }

    public PagedIterable<GroundStation> listByResourceGroup(String resourceGroupName, String skiptoken,
        Context context) {
        PagedIterable<GroundStationInner> inner
            = this.serviceClient().listByResourceGroup(resourceGroupName, skiptoken, context);
        return Utils.mapPage(inner, inner1 -> new GroundStationImpl(inner1, this.manager()));
    }

    public Response<GroundStation> getByResourceGroupWithResponse(String resourceGroupName, String groundStationName,
        Context context) {
        Response<GroundStationInner> inner
            = this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, groundStationName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new GroundStationImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public GroundStation getByResourceGroup(String resourceGroupName, String groundStationName) {
        GroundStationInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, groundStationName);
        if (inner != null) {
            return new GroundStationImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteByResourceGroupWithResponse(String resourceGroupName, String groundStationName,
        Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, groundStationName, context);
    }

    public void deleteByResourceGroup(String resourceGroupName, String groundStationName) {
        this.serviceClient().delete(resourceGroupName, groundStationName);
    }

    public PagedIterable<ResourceIdListResultValueItem> listL2Connections(String resourceGroupName,
        String groundStationName) {
        PagedIterable<ResourceIdListResultValueItemInner> inner
            = this.serviceClient().listL2Connections(resourceGroupName, groundStationName);
        return Utils.mapPage(inner, inner1 -> new ResourceIdListResultValueItemImpl(inner1, this.manager()));
    }

    public PagedIterable<ResourceIdListResultValueItem> listL2Connections(String resourceGroupName,
        String groundStationName, Context context) {
        PagedIterable<ResourceIdListResultValueItemInner> inner
            = this.serviceClient().listL2Connections(resourceGroupName, groundStationName, context);
        return Utils.mapPage(inner, inner1 -> new ResourceIdListResultValueItemImpl(inner1, this.manager()));
    }

    public GroundStation getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String groundStationName = Utils.getValueFromIdByName(id, "groundStations");
        if (groundStationName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'groundStations'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, groundStationName, Context.NONE).getValue();
    }

    public Response<GroundStation> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String groundStationName = Utils.getValueFromIdByName(id, "groundStations");
        if (groundStationName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'groundStations'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, groundStationName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String groundStationName = Utils.getValueFromIdByName(id, "groundStations");
        if (groundStationName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'groundStations'.", id)));
        }
        this.deleteByResourceGroupWithResponse(resourceGroupName, groundStationName, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String groundStationName = Utils.getValueFromIdByName(id, "groundStations");
        if (groundStationName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'groundStations'.", id)));
        }
        return this.deleteByResourceGroupWithResponse(resourceGroupName, groundStationName, context);
    }

    private GroundStationsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.aodgv1.Aodgv1Manager manager() {
        return this.serviceManager;
    }

    public GroundStationImpl define(String name) {
        return new GroundStationImpl(name, this.manager());
    }
}
