// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.aodgv1.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.aodgv1.fluent.models.L2ConnectionsPropertiesEdgeSite;
import com.azure.resourcemanager.aodgv1.fluent.models.L2ConnectionsPropertiesEdgeSitePartnerRouter;
import com.azure.resourcemanager.aodgv1.fluent.models.L2ConnectionsPropertiesGroundStation;
import com.azure.resourcemanager.aodgv1.fluent.models.L2ConnectionsPropertiesGroundStationPartnerRouter;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Properties object for an L2 Connection.
 */
@Fluent
public class L2ConnectionsProperties {
    /*
     * The current state of the resource's creation, deletion, or modification.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private L2ConnectionsPropertiesProvisioningState provisioningState;

    /*
     * Globally-unique identifier for this connection that is to be used as a circuit ID.
     */
    @JsonProperty(value = "circuitId", access = JsonProperty.Access.WRITE_ONLY)
    private String circuitId;

    /*
     * A reference to an Microsoft.Orbital/edgeSites resource to route traffic for.
     */
    @JsonProperty(value = "edgeSite", required = true)
    private L2ConnectionsPropertiesEdgeSite innerEdgeSite = new L2ConnectionsPropertiesEdgeSite();

    /*
     * The name of the partner router that cross-connects with the Orbital Edge Router at the edge site.
     */
    @JsonProperty(value = "edgeSitePartnerRouter", required = true)
    private L2ConnectionsPropertiesEdgeSitePartnerRouter innerEdgeSitePartnerRouter
        = new L2ConnectionsPropertiesEdgeSitePartnerRouter();

    /*
     * A reference to an Microsoft.Orbital/groundStations resource to route traffic for.
     */
    @JsonProperty(value = "groundStation", required = true)
    private L2ConnectionsPropertiesGroundStation innerGroundStation = new L2ConnectionsPropertiesGroundStation();

    /*
     * The name of the partner router to establish a connection to within the ground station.
     */
    @JsonProperty(value = "groundStationPartnerRouter", required = true)
    private L2ConnectionsPropertiesGroundStationPartnerRouter innerGroundStationPartnerRouter
        = new L2ConnectionsPropertiesGroundStationPartnerRouter();

    /*
     * The VLAN ID for the L2 connection.
     */
    @JsonProperty(value = "vlanId", required = true)
    private int vlanId;

    /**
     * Creates an instance of L2ConnectionsProperties class.
     */
    public L2ConnectionsProperties() {
    }

    /**
     * Get the provisioningState property: The current state of the resource's creation, deletion, or modification.
     * 
     * @return the provisioningState value.
     */
    public L2ConnectionsPropertiesProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the circuitId property: Globally-unique identifier for this connection that is to be used as a circuit ID.
     * 
     * @return the circuitId value.
     */
    public String circuitId() {
        return this.circuitId;
    }

    /**
     * Get the innerEdgeSite property: A reference to an Microsoft.Orbital/edgeSites resource to route traffic for.
     * 
     * @return the innerEdgeSite value.
     */
    private L2ConnectionsPropertiesEdgeSite innerEdgeSite() {
        return this.innerEdgeSite;
    }

    /**
     * Get the innerEdgeSitePartnerRouter property: The name of the partner router that cross-connects with the Orbital
     * Edge Router at the edge site.
     * 
     * @return the innerEdgeSitePartnerRouter value.
     */
    private L2ConnectionsPropertiesEdgeSitePartnerRouter innerEdgeSitePartnerRouter() {
        return this.innerEdgeSitePartnerRouter;
    }

    /**
     * Get the innerGroundStation property: A reference to an Microsoft.Orbital/groundStations resource to route
     * traffic for.
     * 
     * @return the innerGroundStation value.
     */
    private L2ConnectionsPropertiesGroundStation innerGroundStation() {
        return this.innerGroundStation;
    }

    /**
     * Get the innerGroundStationPartnerRouter property: The name of the partner router to establish a connection to
     * within the ground station.
     * 
     * @return the innerGroundStationPartnerRouter value.
     */
    private L2ConnectionsPropertiesGroundStationPartnerRouter innerGroundStationPartnerRouter() {
        return this.innerGroundStationPartnerRouter;
    }

    /**
     * Get the vlanId property: The VLAN ID for the L2 connection.
     * 
     * @return the vlanId value.
     */
    public int vlanId() {
        return this.vlanId;
    }

    /**
     * Set the vlanId property: The VLAN ID for the L2 connection.
     * 
     * @param vlanId the vlanId value to set.
     * @return the L2ConnectionsProperties object itself.
     */
    public L2ConnectionsProperties withVlanId(int vlanId) {
        this.vlanId = vlanId;
        return this;
    }

    /**
     * Get the id property: The edge site's resource ID.
     * 
     * @return the id value.
     */
    public String id() {
        return this.innerEdgeSite() == null ? null : this.innerEdgeSite().id();
    }

    /**
     * Set the id property: The edge site's resource ID.
     * 
     * @param id the id value to set.
     * @return the L2ConnectionsProperties object itself.
     */
    public L2ConnectionsProperties withId(String id) {
        if (this.innerEdgeSite() == null) {
            this.innerEdgeSite = new L2ConnectionsPropertiesEdgeSite();
        }
        this.innerEdgeSite().withId(id);
        return this;
    }

    /**
     * Get the name property: The unique name of the partner router that cross-connects with the Orbital Edge Router at
     * the edge site.
     * 
     * @return the name value.
     */
    public String name() {
        return this.innerEdgeSitePartnerRouter() == null ? null : this.innerEdgeSitePartnerRouter().name();
    }

    /**
     * Set the name property: The unique name of the partner router that cross-connects with the Orbital Edge Router at
     * the edge site.
     * 
     * @param name the name value to set.
     * @return the L2ConnectionsProperties object itself.
     */
    public L2ConnectionsProperties withName(String name) {
        if (this.innerEdgeSitePartnerRouter() == null) {
            this.innerEdgeSitePartnerRouter = new L2ConnectionsPropertiesEdgeSitePartnerRouter();
        }
        this.innerEdgeSitePartnerRouter().withName(name);
        return this;
    }

    /**
     * Get the id property: The ground station's resource ID.
     * 
     * @return the id value.
     */
    public String idGroundStationId() {
        return this.innerGroundStation() == null ? null : this.innerGroundStation().id();
    }

    /**
     * Set the id property: The ground station's resource ID.
     * 
     * @param id the id value to set.
     * @return the L2ConnectionsProperties object itself.
     */
    public L2ConnectionsProperties withIdGroundStationId(String id) {
        if (this.innerGroundStation() == null) {
            this.innerGroundStation = new L2ConnectionsPropertiesGroundStation();
        }
        this.innerGroundStation().withId(id);
        return this;
    }

    /**
     * Get the name property: The unique name of the partner router that cross-connects with the Orbital Edge Router at
     * the ground station site.
     * 
     * @return the name value.
     */
    public String nameGroundStationPartnerRouterName() {
        return this.innerGroundStationPartnerRouter() == null ? null : this.innerGroundStationPartnerRouter().name();
    }

    /**
     * Set the name property: The unique name of the partner router that cross-connects with the Orbital Edge Router at
     * the ground station site.
     * 
     * @param name the name value to set.
     * @return the L2ConnectionsProperties object itself.
     */
    public L2ConnectionsProperties withNameGroundStationPartnerRouterName(String name) {
        if (this.innerGroundStationPartnerRouter() == null) {
            this.innerGroundStationPartnerRouter = new L2ConnectionsPropertiesGroundStationPartnerRouter();
        }
        this.innerGroundStationPartnerRouter().withName(name);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerEdgeSite() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property innerEdgeSite in model L2ConnectionsProperties"));
        } else {
            innerEdgeSite().validate();
        }
        if (innerEdgeSitePartnerRouter() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property innerEdgeSitePartnerRouter in model L2ConnectionsProperties"));
        } else {
            innerEdgeSitePartnerRouter().validate();
        }
        if (innerGroundStation() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property innerGroundStation in model L2ConnectionsProperties"));
        } else {
            innerGroundStation().validate();
        }
        if (innerGroundStationPartnerRouter() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property innerGroundStationPartnerRouter in model L2ConnectionsProperties"));
        } else {
            innerGroundStationPartnerRouter().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(L2ConnectionsProperties.class);
}
