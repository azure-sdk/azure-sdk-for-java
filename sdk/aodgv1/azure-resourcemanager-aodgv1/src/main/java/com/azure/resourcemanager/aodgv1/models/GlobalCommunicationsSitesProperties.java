// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.aodgv1.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * Properties object for a Azure Orbital Digital Ground site.
 */
@Fluent
public class GlobalCommunicationsSitesProperties {
    /*
     * Describes the location of the Azure Orbital Digital Ground site.
     */
    @JsonProperty(value = "locationData")
    private GlobalCommunicationsSitesPropertiesLocationData locationData;

    /*
     * The type of the Azure Orbital Digital Ground site. EdgeSite or GroundStation.
     */
    @JsonProperty(value = "globalCommunicationsSiteType")
    private GlobalCommunicationsSitesPropertiesGlobalCommunicationsSiteType globalCommunicationsSiteType;

    /*
     * Partner routers connected to this site.
     */
    @JsonProperty(value = "partnerRouters", access = JsonProperty.Access.WRITE_ONLY)
    private List<PartnerRouter> partnerRouters;

    /*
     * The bandwidth per partner router cross-connection at this Azure Orbital Digital Ground site, measured in bits
     * per second.
     */
    @JsonProperty(value = "partnerSiteBandwidth", access = JsonProperty.Access.WRITE_ONLY)
    private Long partnerSiteBandwidth;

    /**
     * Creates an instance of GlobalCommunicationsSitesProperties class.
     */
    public GlobalCommunicationsSitesProperties() {
    }

    /**
     * Get the locationData property: Describes the location of the Azure Orbital Digital Ground site.
     * 
     * @return the locationData value.
     */
    public GlobalCommunicationsSitesPropertiesLocationData locationData() {
        return this.locationData;
    }

    /**
     * Set the locationData property: Describes the location of the Azure Orbital Digital Ground site.
     * 
     * @param locationData the locationData value to set.
     * @return the GlobalCommunicationsSitesProperties object itself.
     */
    public GlobalCommunicationsSitesProperties
        withLocationData(GlobalCommunicationsSitesPropertiesLocationData locationData) {
        this.locationData = locationData;
        return this;
    }

    /**
     * Get the globalCommunicationsSiteType property: The type of the Azure Orbital Digital Ground site. EdgeSite or
     * GroundStation.
     * 
     * @return the globalCommunicationsSiteType value.
     */
    public GlobalCommunicationsSitesPropertiesGlobalCommunicationsSiteType globalCommunicationsSiteType() {
        return this.globalCommunicationsSiteType;
    }

    /**
     * Set the globalCommunicationsSiteType property: The type of the Azure Orbital Digital Ground site. EdgeSite or
     * GroundStation.
     * 
     * @param globalCommunicationsSiteType the globalCommunicationsSiteType value to set.
     * @return the GlobalCommunicationsSitesProperties object itself.
     */
    public GlobalCommunicationsSitesProperties withGlobalCommunicationsSiteType(
        GlobalCommunicationsSitesPropertiesGlobalCommunicationsSiteType globalCommunicationsSiteType) {
        this.globalCommunicationsSiteType = globalCommunicationsSiteType;
        return this;
    }

    /**
     * Get the partnerRouters property: Partner routers connected to this site.
     * 
     * @return the partnerRouters value.
     */
    public List<PartnerRouter> partnerRouters() {
        return this.partnerRouters;
    }

    /**
     * Get the partnerSiteBandwidth property: The bandwidth per partner router cross-connection at this Azure Orbital
     * Digital Ground site, measured in bits per second.
     * 
     * @return the partnerSiteBandwidth value.
     */
    public Long partnerSiteBandwidth() {
        return this.partnerSiteBandwidth;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (locationData() != null) {
            locationData().validate();
        }
        if (partnerRouters() != null) {
            partnerRouters().forEach(e -> e.validate());
        }
    }
}
