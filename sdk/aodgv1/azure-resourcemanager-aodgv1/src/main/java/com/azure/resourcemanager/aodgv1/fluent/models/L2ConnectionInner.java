// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.aodgv1.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.core.management.SystemData;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.aodgv1.models.L2ConnectionsPropertiesProvisioningState;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Map;

/**
 * Connects an edge site to an orbital gateway and describes what layer 2 traffic to forward between them.
 */
@Fluent
public final class L2ConnectionInner extends Resource {
    /*
     * The properties bag for this resource.
     */
    @JsonProperty(value = "properties", required = true)
    private L2ConnectionProperties innerProperties = new L2ConnectionProperties();

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /**
     * Creates an instance of L2ConnectionInner class.
     */
    public L2ConnectionInner() {
    }

    /**
     * Get the innerProperties property: The properties bag for this resource.
     * 
     * @return the innerProperties value.
     */
    private L2ConnectionProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public L2ConnectionInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public L2ConnectionInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the provisioningState property: The current state of the resource's creation, deletion, or modification.
     * 
     * @return the provisioningState value.
     */
    public L2ConnectionsPropertiesProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the circuitId property: Globally-unique identifier for this connection that is to be used as a circuit ID.
     * 
     * @return the circuitId value.
     */
    public String circuitId() {
        return this.innerProperties() == null ? null : this.innerProperties().circuitId();
    }

    /**
     * Get the id property: The edge site's resource ID.
     * 
     * @return the id value.
     */
    public String idPropertiesId() {
        return this.innerProperties() == null ? null : this.innerProperties().id();
    }

    /**
     * Set the id property: The edge site's resource ID.
     * 
     * @param id the id value to set.
     * @return the L2ConnectionInner object itself.
     */
    public L2ConnectionInner withIdPropertiesId(String id) {
        if (this.innerProperties() == null) {
            this.innerProperties = new L2ConnectionProperties();
        }
        this.innerProperties().withId(id);
        return this;
    }

    /**
     * Get the name property: The unique name of the partner router that cross-connects with the Orbital Edge Router at
     * the edge site.
     * 
     * @return the name value.
     */
    public String namePropertiesName() {
        return this.innerProperties() == null ? null : this.innerProperties().name();
    }

    /**
     * Set the name property: The unique name of the partner router that cross-connects with the Orbital Edge Router at
     * the edge site.
     * 
     * @param name the name value to set.
     * @return the L2ConnectionInner object itself.
     */
    public L2ConnectionInner withNamePropertiesName(String name) {
        if (this.innerProperties() == null) {
            this.innerProperties = new L2ConnectionProperties();
        }
        this.innerProperties().withName(name);
        return this;
    }

    /**
     * Get the vlanId property: The VLAN ID for the L2 connection.
     * 
     * @return the vlanId value.
     */
    public int vlanId() {
        return this.innerProperties() == null ? 0 : this.innerProperties().vlanId();
    }

    /**
     * Set the vlanId property: The VLAN ID for the L2 connection.
     * 
     * @param vlanId the vlanId value to set.
     * @return the L2ConnectionInner object itself.
     */
    public L2ConnectionInner withVlanId(int vlanId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new L2ConnectionProperties();
        }
        this.innerProperties().withVlanId(vlanId);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property innerProperties in model L2ConnectionInner"));
        } else {
            innerProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(L2ConnectionInner.class);
}
