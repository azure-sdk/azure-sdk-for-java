// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.aodgv1.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Describes a location outside of Azure.
 */
@Fluent
public class LocationData {
    /*
     * The city of the location (e.g., Miami).
     */
    @JsonProperty(value = "city", required = true)
    private String city;

    /*
     * For example, the state (e.g., Florida), province (e.g., Ontario), or region (e.g., Tuscany) of the location.
     */
    @JsonProperty(value = "district", required = true)
    private String district;

    /*
     * The nation (e.g., United States of America) of the location.
     */
    @JsonProperty(value = "country", required = true)
    private String country;

    /*
     * The name of the closest Azure region, (e.g., westus2).
     */
    @JsonProperty(value = "closestAzureRegion")
    private String closestAzureRegion;

    /*
     * Any extra information needed to uniquely identify the location (e.g., zip code).
     */
    @JsonProperty(value = "extra")
    private String extra;

    /**
     * Creates an instance of LocationData class.
     */
    public LocationData() {
    }

    /**
     * Get the city property: The city of the location (e.g., Miami).
     * 
     * @return the city value.
     */
    public String city() {
        return this.city;
    }

    /**
     * Set the city property: The city of the location (e.g., Miami).
     * 
     * @param city the city value to set.
     * @return the LocationData object itself.
     */
    public LocationData withCity(String city) {
        this.city = city;
        return this;
    }

    /**
     * Get the district property: For example, the state (e.g., Florida), province (e.g., Ontario), or region (e.g.,
     * Tuscany) of the location.
     * 
     * @return the district value.
     */
    public String district() {
        return this.district;
    }

    /**
     * Set the district property: For example, the state (e.g., Florida), province (e.g., Ontario), or region (e.g.,
     * Tuscany) of the location.
     * 
     * @param district the district value to set.
     * @return the LocationData object itself.
     */
    public LocationData withDistrict(String district) {
        this.district = district;
        return this;
    }

    /**
     * Get the country property: The nation (e.g., United States of America) of the location.
     * 
     * @return the country value.
     */
    public String country() {
        return this.country;
    }

    /**
     * Set the country property: The nation (e.g., United States of America) of the location.
     * 
     * @param country the country value to set.
     * @return the LocationData object itself.
     */
    public LocationData withCountry(String country) {
        this.country = country;
        return this;
    }

    /**
     * Get the closestAzureRegion property: The name of the closest Azure region, (e.g., westus2).
     * 
     * @return the closestAzureRegion value.
     */
    public String closestAzureRegion() {
        return this.closestAzureRegion;
    }

    /**
     * Set the closestAzureRegion property: The name of the closest Azure region, (e.g., westus2).
     * 
     * @param closestAzureRegion the closestAzureRegion value to set.
     * @return the LocationData object itself.
     */
    public LocationData withClosestAzureRegion(String closestAzureRegion) {
        this.closestAzureRegion = closestAzureRegion;
        return this;
    }

    /**
     * Get the extra property: Any extra information needed to uniquely identify the location (e.g., zip code).
     * 
     * @return the extra value.
     */
    public String extra() {
        return this.extra;
    }

    /**
     * Set the extra property: Any extra information needed to uniquely identify the location (e.g., zip code).
     * 
     * @param extra the extra value to set.
     * @return the LocationData object itself.
     */
    public LocationData withExtra(String extra) {
        this.extra = extra;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (city() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property city in model LocationData"));
        }
        if (district() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property district in model LocationData"));
        }
        if (country() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property country in model LocationData"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(LocationData.class);
}
