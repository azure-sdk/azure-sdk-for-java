// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.aodgv1.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.aodgv1.fluent.EdgeSitesClient;
import com.azure.resourcemanager.aodgv1.fluent.models.EdgeSiteInner;
import com.azure.resourcemanager.aodgv1.fluent.models.ResourceIdListResultValueItemInner;
import com.azure.resourcemanager.aodgv1.models.EdgeSite;
import com.azure.resourcemanager.aodgv1.models.EdgeSites;
import com.azure.resourcemanager.aodgv1.models.ResourceIdListResultValueItem;

public final class EdgeSitesImpl implements EdgeSites {
    private static final ClientLogger LOGGER = new ClientLogger(EdgeSitesImpl.class);

    private final EdgeSitesClient innerClient;

    private final com.azure.resourcemanager.aodgv1.Aodgv1Manager serviceManager;

    public EdgeSitesImpl(EdgeSitesClient innerClient, com.azure.resourcemanager.aodgv1.Aodgv1Manager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<EdgeSite> getByResourceGroupWithResponse(String resourceGroupName, String edgeSiteName,
        Context context) {
        Response<EdgeSiteInner> inner
            = this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, edgeSiteName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new EdgeSiteImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public EdgeSite getByResourceGroup(String resourceGroupName, String edgeSiteName) {
        EdgeSiteInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, edgeSiteName);
        if (inner != null) {
            return new EdgeSiteImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteByResourceGroupWithResponse(String resourceGroupName, String edgeSiteName,
        Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, edgeSiteName, context);
    }

    public void deleteByResourceGroup(String resourceGroupName, String edgeSiteName) {
        this.serviceClient().delete(resourceGroupName, edgeSiteName);
    }

    public PagedIterable<EdgeSite> list() {
        PagedIterable<EdgeSiteInner> inner = this.serviceClient().list();
        return Utils.mapPage(inner, inner1 -> new EdgeSiteImpl(inner1, this.manager()));
    }

    public PagedIterable<EdgeSite> list(String skiptoken, Context context) {
        PagedIterable<EdgeSiteInner> inner = this.serviceClient().list(skiptoken, context);
        return Utils.mapPage(inner, inner1 -> new EdgeSiteImpl(inner1, this.manager()));
    }

    public PagedIterable<EdgeSite> listByResourceGroup(String resourceGroupName) {
        PagedIterable<EdgeSiteInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return Utils.mapPage(inner, inner1 -> new EdgeSiteImpl(inner1, this.manager()));
    }

    public PagedIterable<EdgeSite> listByResourceGroup(String resourceGroupName, String skiptoken, Context context) {
        PagedIterable<EdgeSiteInner> inner
            = this.serviceClient().listByResourceGroup(resourceGroupName, skiptoken, context);
        return Utils.mapPage(inner, inner1 -> new EdgeSiteImpl(inner1, this.manager()));
    }

    public PagedIterable<ResourceIdListResultValueItem> listL2Connections(String resourceGroupName,
        String edgeSiteName) {
        PagedIterable<ResourceIdListResultValueItemInner> inner
            = this.serviceClient().listL2Connections(resourceGroupName, edgeSiteName);
        return Utils.mapPage(inner, inner1 -> new ResourceIdListResultValueItemImpl(inner1, this.manager()));
    }

    public PagedIterable<ResourceIdListResultValueItem> listL2Connections(String resourceGroupName, String edgeSiteName,
        Context context) {
        PagedIterable<ResourceIdListResultValueItemInner> inner
            = this.serviceClient().listL2Connections(resourceGroupName, edgeSiteName, context);
        return Utils.mapPage(inner, inner1 -> new ResourceIdListResultValueItemImpl(inner1, this.manager()));
    }

    public EdgeSite getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String edgeSiteName = Utils.getValueFromIdByName(id, "edgeSites");
        if (edgeSiteName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'edgeSites'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, edgeSiteName, Context.NONE).getValue();
    }

    public Response<EdgeSite> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String edgeSiteName = Utils.getValueFromIdByName(id, "edgeSites");
        if (edgeSiteName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'edgeSites'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, edgeSiteName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String edgeSiteName = Utils.getValueFromIdByName(id, "edgeSites");
        if (edgeSiteName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'edgeSites'.", id)));
        }
        this.deleteByResourceGroupWithResponse(resourceGroupName, edgeSiteName, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String edgeSiteName = Utils.getValueFromIdByName(id, "edgeSites");
        if (edgeSiteName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'edgeSites'.", id)));
        }
        return this.deleteByResourceGroupWithResponse(resourceGroupName, edgeSiteName, context);
    }

    private EdgeSitesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.aodgv1.Aodgv1Manager manager() {
        return this.serviceManager;
    }

    public EdgeSiteImpl define(String name) {
        return new EdgeSiteImpl(name, this.manager());
    }
}
