// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.aodgv1.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.aodgv1.fluent.models.GroundStationInner;
import java.util.List;
import java.util.Map;

/**
 * An immutable client-side representation of GroundStation.
 */
public interface GroundStation {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     * 
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     * 
     * @return the type value.
     */
    String type();

    /**
     * Gets the location property: The geo-location where the resource lives.
     * 
     * @return the location value.
     */
    String location();

    /**
     * Gets the tags property: Resource tags.
     * 
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * Gets the city property: City of ground station.
     * 
     * @return the city value.
     */
    String city();

    /**
     * Gets the capabilities property: Ground station capabilities.
     * 
     * @return the capabilities value.
     */
    List<Capability> capabilities();

    /**
     * Gets the providerName property: Ground station provider name.
     * 
     * @return the providerName value.
     */
    String providerName();

    /**
     * Gets the longitudeDegrees property: Longitude of the ground station in decimal degrees.
     * 
     * @return the longitudeDegrees value.
     */
    Float longitudeDegrees();

    /**
     * Gets the latitudeDegrees property: Latitude of the ground station in decimal degrees.
     * 
     * @return the latitudeDegrees value.
     */
    Float latitudeDegrees();

    /**
     * Gets the altitudeMeters property: Altitude of the ground station.
     * 
     * @return the altitudeMeters value.
     */
    Float altitudeMeters();

    /**
     * Gets the releaseMode property: Release Status of a ground station.
     * 
     * @return the releaseMode value.
     */
    ReleaseMode releaseMode();

    /**
     * Gets the idPropertiesId property: The Azure Orbital Digital Ground site's resource ID.
     * 
     * @return the idPropertiesId value.
     */
    String idPropertiesId();

    /**
     * Gets the region of the resource.
     * 
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     * 
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the name of the resource group.
     * 
     * @return the name of the resource group.
     */
    String resourceGroupName();

    /**
     * Gets the inner com.azure.resourcemanager.aodgv1.fluent.models.GroundStationInner object.
     * 
     * @return the inner object.
     */
    GroundStationInner innerModel();

    /**
     * The entirety of the GroundStation definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithLocation,
        DefinitionStages.WithResourceGroup, DefinitionStages.WithCreate {
    }

    /**
     * The GroundStation definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of the GroundStation definition.
         */
        interface Blank extends WithLocation {
        }

        /**
         * The stage of the GroundStation definition allowing to specify location.
         */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             * 
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(Region location);

            /**
             * Specifies the region for the resource.
             * 
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(String location);
        }

        /**
         * The stage of the GroundStation definition allowing to specify parent resource.
         */
        interface WithResourceGroup {
            /**
             * Specifies resourceGroupName.
             * 
             * @param resourceGroupName The name of the resource group. The name is case insensitive.
             * @return the next definition stage.
             */
            WithCreate withExistingResourceGroup(String resourceGroupName);
        }

        /**
         * The stage of the GroundStation definition which contains all the minimum required properties for the resource
         * to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate extends DefinitionStages.WithTags, DefinitionStages.WithCity,
            DefinitionStages.WithCapabilities, DefinitionStages.WithProviderName, DefinitionStages.WithLongitudeDegrees,
            DefinitionStages.WithLatitudeDegrees, DefinitionStages.WithAltitudeMeters,
            DefinitionStages.WithIdPropertiesId {
            /**
             * Executes the create request.
             * 
             * @return the created resource.
             */
            GroundStation create();

            /**
             * Executes the create request.
             * 
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            GroundStation create(Context context);
        }

        /**
         * The stage of the GroundStation definition allowing to specify tags.
         */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             * 
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }

        /**
         * The stage of the GroundStation definition allowing to specify city.
         */
        interface WithCity {
            /**
             * Specifies the city property: City of ground station..
             * 
             * @param city City of ground station.
             * @return the next definition stage.
             */
            WithCreate withCity(String city);
        }

        /**
         * The stage of the GroundStation definition allowing to specify capabilities.
         */
        interface WithCapabilities {
            /**
             * Specifies the capabilities property: Ground station capabilities..
             * 
             * @param capabilities Ground station capabilities.
             * @return the next definition stage.
             */
            WithCreate withCapabilities(List<Capability> capabilities);
        }

        /**
         * The stage of the GroundStation definition allowing to specify providerName.
         */
        interface WithProviderName {
            /**
             * Specifies the providerName property: Ground station provider name..
             * 
             * @param providerName Ground station provider name.
             * @return the next definition stage.
             */
            WithCreate withProviderName(String providerName);
        }

        /**
         * The stage of the GroundStation definition allowing to specify longitudeDegrees.
         */
        interface WithLongitudeDegrees {
            /**
             * Specifies the longitudeDegrees property: Longitude of the ground station in decimal degrees..
             * 
             * @param longitudeDegrees Longitude of the ground station in decimal degrees.
             * @return the next definition stage.
             */
            WithCreate withLongitudeDegrees(Float longitudeDegrees);
        }

        /**
         * The stage of the GroundStation definition allowing to specify latitudeDegrees.
         */
        interface WithLatitudeDegrees {
            /**
             * Specifies the latitudeDegrees property: Latitude of the ground station in decimal degrees..
             * 
             * @param latitudeDegrees Latitude of the ground station in decimal degrees.
             * @return the next definition stage.
             */
            WithCreate withLatitudeDegrees(Float latitudeDegrees);
        }

        /**
         * The stage of the GroundStation definition allowing to specify altitudeMeters.
         */
        interface WithAltitudeMeters {
            /**
             * Specifies the altitudeMeters property: Altitude of the ground station..
             * 
             * @param altitudeMeters Altitude of the ground station.
             * @return the next definition stage.
             */
            WithCreate withAltitudeMeters(Float altitudeMeters);
        }

        /**
         * The stage of the GroundStation definition allowing to specify idPropertiesId.
         */
        interface WithIdPropertiesId {
            /**
             * Specifies the idPropertiesId property: The Azure Orbital Digital Ground site's resource ID..
             * 
             * @param idPropertiesId The Azure Orbital Digital Ground site's resource ID.
             * @return the next definition stage.
             */
            WithCreate withIdPropertiesId(String idPropertiesId);
        }
    }

    /**
     * Begins update for the GroundStation resource.
     * 
     * @return the stage of resource update.
     */
    GroundStation.Update update();

    /**
     * The template for GroundStation update.
     */
    interface Update extends UpdateStages.WithTags {
        /**
         * Executes the update request.
         * 
         * @return the updated resource.
         */
        GroundStation apply();

        /**
         * Executes the update request.
         * 
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        GroundStation apply(Context context);
    }

    /**
     * The GroundStation update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the GroundStation update allowing to specify tags.
         */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             * 
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }
    }

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @return the refreshed resource.
     */
    GroundStation refresh();

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    GroundStation refresh(Context context);

    /**
     * Returns a list of L2 Connections attached to an ground station.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for an API service call that lists the resource IDs of resources associated with another
     * resource as paginated response with {@link PagedIterable}.
     */
    PagedIterable<ResourceIdListResultValueItem> listL2Connections();

    /**
     * Returns a list of L2 Connections attached to an ground station.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for an API service call that lists the resource IDs of resources associated with another
     * resource as paginated response with {@link PagedIterable}.
     */
    PagedIterable<ResourceIdListResultValueItem> listL2Connections(Context context);
}
