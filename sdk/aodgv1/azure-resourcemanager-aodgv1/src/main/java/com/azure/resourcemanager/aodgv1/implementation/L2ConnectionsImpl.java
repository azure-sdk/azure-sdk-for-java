// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.aodgv1.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.aodgv1.fluent.L2ConnectionsClient;
import com.azure.resourcemanager.aodgv1.fluent.models.L2ConnectionInner;
import com.azure.resourcemanager.aodgv1.models.L2Connection;
import com.azure.resourcemanager.aodgv1.models.L2Connections;

public final class L2ConnectionsImpl implements L2Connections {
    private static final ClientLogger LOGGER = new ClientLogger(L2ConnectionsImpl.class);

    private final L2ConnectionsClient innerClient;

    private final com.azure.resourcemanager.aodgv1.Aodgv1Manager serviceManager;

    public L2ConnectionsImpl(L2ConnectionsClient innerClient,
        com.azure.resourcemanager.aodgv1.Aodgv1Manager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<L2Connection> getByResourceGroupWithResponse(String resourceGroupName, String l2ConnectionName,
        Context context) {
        Response<L2ConnectionInner> inner
            = this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, l2ConnectionName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new L2ConnectionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public L2Connection getByResourceGroup(String resourceGroupName, String l2ConnectionName) {
        L2ConnectionInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, l2ConnectionName);
        if (inner != null) {
            return new L2ConnectionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceGroupName, String l2ConnectionName) {
        this.serviceClient().delete(resourceGroupName, l2ConnectionName);
    }

    public void delete(String resourceGroupName, String l2ConnectionName, Context context) {
        this.serviceClient().delete(resourceGroupName, l2ConnectionName, context);
    }

    public PagedIterable<L2Connection> listByResourceGroup(String resourceGroupName) {
        PagedIterable<L2ConnectionInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return Utils.mapPage(inner, inner1 -> new L2ConnectionImpl(inner1, this.manager()));
    }

    public PagedIterable<L2Connection> listByResourceGroup(String resourceGroupName, String skiptoken,
        Context context) {
        PagedIterable<L2ConnectionInner> inner
            = this.serviceClient().listByResourceGroup(resourceGroupName, skiptoken, context);
        return Utils.mapPage(inner, inner1 -> new L2ConnectionImpl(inner1, this.manager()));
    }

    public PagedIterable<L2Connection> list() {
        PagedIterable<L2ConnectionInner> inner = this.serviceClient().list();
        return Utils.mapPage(inner, inner1 -> new L2ConnectionImpl(inner1, this.manager()));
    }

    public PagedIterable<L2Connection> list(String skiptoken, Context context) {
        PagedIterable<L2ConnectionInner> inner = this.serviceClient().list(skiptoken, context);
        return Utils.mapPage(inner, inner1 -> new L2ConnectionImpl(inner1, this.manager()));
    }

    public L2Connection getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String l2ConnectionName = Utils.getValueFromIdByName(id, "l2Connections");
        if (l2ConnectionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'l2Connections'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, l2ConnectionName, Context.NONE).getValue();
    }

    public Response<L2Connection> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String l2ConnectionName = Utils.getValueFromIdByName(id, "l2Connections");
        if (l2ConnectionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'l2Connections'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, l2ConnectionName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String l2ConnectionName = Utils.getValueFromIdByName(id, "l2Connections");
        if (l2ConnectionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'l2Connections'.", id)));
        }
        this.delete(resourceGroupName, l2ConnectionName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String l2ConnectionName = Utils.getValueFromIdByName(id, "l2Connections");
        if (l2ConnectionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'l2Connections'.", id)));
        }
        this.delete(resourceGroupName, l2ConnectionName, context);
    }

    private L2ConnectionsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.aodgv1.Aodgv1Manager manager() {
        return this.serviceManager;
    }

    public L2ConnectionImpl define(String name) {
        return new L2ConnectionImpl(name, this.manager());
    }
}
