// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.aodgv1.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.aodgv1.fluent.models.L2ConnectionInner;
import com.azure.resourcemanager.aodgv1.models.TagsObject;

/**
 * An instance of this class provides access to all the operations defined in L2ConnectionsClient.
 */
public interface L2ConnectionsClient {
    /**
     * Gets the specified L2 connection in a specified resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param l2ConnectionName L2 Connection name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specified L2 connection in a specified resource group along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<L2ConnectionInner> getByResourceGroupWithResponse(String resourceGroupName, String l2ConnectionName,
        Context context);

    /**
     * Gets the specified L2 connection in a specified resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param l2ConnectionName L2 Connection name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specified L2 connection in a specified resource group.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    L2ConnectionInner getByResourceGroup(String resourceGroupName, String l2ConnectionName);

    /**
     * Creates or updates an L2 Connection.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param l2ConnectionName L2 Connection name.
     * @param parameters The parameters to provide for the created L2 Connection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of connects an edge site to an orbital gateway and describes what
     * layer 2 traffic to forward between them.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<L2ConnectionInner>, L2ConnectionInner> beginCreateOrUpdate(String resourceGroupName,
        String l2ConnectionName, L2ConnectionInner parameters);

    /**
     * Creates or updates an L2 Connection.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param l2ConnectionName L2 Connection name.
     * @param parameters The parameters to provide for the created L2 Connection.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of connects an edge site to an orbital gateway and describes what
     * layer 2 traffic to forward between them.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<L2ConnectionInner>, L2ConnectionInner> beginCreateOrUpdate(String resourceGroupName,
        String l2ConnectionName, L2ConnectionInner parameters, Context context);

    /**
     * Creates or updates an L2 Connection.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param l2ConnectionName L2 Connection name.
     * @param parameters The parameters to provide for the created L2 Connection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return connects an edge site to an orbital gateway and describes what layer 2 traffic to forward between them.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    L2ConnectionInner createOrUpdate(String resourceGroupName, String l2ConnectionName, L2ConnectionInner parameters);

    /**
     * Creates or updates an L2 Connection.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param l2ConnectionName L2 Connection name.
     * @param parameters The parameters to provide for the created L2 Connection.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return connects an edge site to an orbital gateway and describes what layer 2 traffic to forward between them.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    L2ConnectionInner createOrUpdate(String resourceGroupName, String l2ConnectionName, L2ConnectionInner parameters,
        Context context);

    /**
     * Deletes a specified L2 Connection resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param l2ConnectionName L2 Connection name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String l2ConnectionName);

    /**
     * Deletes a specified L2 Connection resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param l2ConnectionName L2 Connection name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String l2ConnectionName, Context context);

    /**
     * Deletes a specified L2 Connection resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param l2ConnectionName L2 Connection name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String l2ConnectionName);

    /**
     * Deletes a specified L2 Connection resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param l2ConnectionName L2 Connection name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String l2ConnectionName, Context context);

    /**
     * Updates the specified L2 Connection's tags.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param l2ConnectionName L2 Connection name.
     * @param parameters Parameters supplied to update the L2 Connection's tags.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of connects an edge site to an orbital gateway and describes what
     * layer 2 traffic to forward between them.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<L2ConnectionInner>, L2ConnectionInner> beginUpdateTags(String resourceGroupName,
        String l2ConnectionName, TagsObject parameters);

    /**
     * Updates the specified L2 Connection's tags.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param l2ConnectionName L2 Connection name.
     * @param parameters Parameters supplied to update the L2 Connection's tags.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of connects an edge site to an orbital gateway and describes what
     * layer 2 traffic to forward between them.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<L2ConnectionInner>, L2ConnectionInner> beginUpdateTags(String resourceGroupName,
        String l2ConnectionName, TagsObject parameters, Context context);

    /**
     * Updates the specified L2 Connection's tags.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param l2ConnectionName L2 Connection name.
     * @param parameters Parameters supplied to update the L2 Connection's tags.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return connects an edge site to an orbital gateway and describes what layer 2 traffic to forward between them.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    L2ConnectionInner updateTags(String resourceGroupName, String l2ConnectionName, TagsObject parameters);

    /**
     * Updates the specified L2 Connection's tags.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param l2ConnectionName L2 Connection name.
     * @param parameters Parameters supplied to update the L2 Connection's tags.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return connects an edge site to an orbital gateway and describes what layer 2 traffic to forward between them.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    L2ConnectionInner updateTags(String resourceGroupName, String l2ConnectionName, TagsObject parameters,
        Context context);

    /**
     * Returns a list of L2 Connections attached to an orbital gateway.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for an API service call that lists L2 Connections as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<L2ConnectionInner> listByResourceGroup(String resourceGroupName);

    /**
     * Returns a list of L2 Connections attached to an orbital gateway.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param skiptoken An opaque string that the resource provider uses to skip over previously-returned results. This
     * is used when a previous list operation call returned a partial result. If a previous response contains a nextLink
     * element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to
     * use for subsequent calls.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for an API service call that lists L2 Connections as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<L2ConnectionInner> listByResourceGroup(String resourceGroupName, String skiptoken, Context context);

    /**
     * Returns a list of L2 Connections attached to a subscription.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for an API service call that lists L2 Connections as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<L2ConnectionInner> list();

    /**
     * Returns a list of L2 Connections attached to a subscription.
     * 
     * @param skiptoken An opaque string that the resource provider uses to skip over previously-returned results. This
     * is used when a previous list operation call returned a partial result. If a previous response contains a nextLink
     * element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to
     * use for subsequent calls.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for an API service call that lists L2 Connections as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<L2ConnectionInner> list(String skiptoken, Context context);
}
