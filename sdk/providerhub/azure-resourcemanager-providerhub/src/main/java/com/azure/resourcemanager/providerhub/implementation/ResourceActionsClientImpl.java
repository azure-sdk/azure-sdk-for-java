// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.providerhub.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.providerhub.fluent.ResourceActionsClient;
import com.azure.resourcemanager.providerhub.models.ResourceManagementAction;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in ResourceActionsClient.
 */
public final class ResourceActionsClientImpl implements ResourceActionsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final ResourceActionsService service;

    /**
     * The service client containing this operation class.
     */
    private final ProviderHubImpl client;

    /**
     * Initializes an instance of ResourceActionsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    ResourceActionsClientImpl(ProviderHubImpl client) {
        this.service
            = RestProxy.create(ResourceActionsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for ProviderHubResourceActions to be used by the proxy service to perform
     * REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "ProviderHubResourceA")
    public interface ResourceActionsService {
        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourceActions/{resourceActionName}/deleteResources")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> deleteResources(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("providerNamespace") String providerNamespace,
            @PathParam("resourceActionName") String resourceActionName, @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") ResourceManagementAction properties, @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Deletes resources.
     * 
     * @param providerNamespace The name of the resource provider hosted within ProviderHub.
     * @param resourceActionName The resource action name.
     * @param properties The properties supplied to the DeleteResources operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteResourcesWithResponseAsync(String providerNamespace,
        String resourceActionName, ResourceManagementAction properties) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (providerNamespace == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter providerNamespace is required and cannot be null."));
        }
        if (resourceActionName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceActionName is required and cannot be null."));
        }
        if (properties == null) {
            return Mono.error(new IllegalArgumentException("Parameter properties is required and cannot be null."));
        } else {
            properties.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.deleteResources(this.client.getEndpoint(), this.client.getSubscriptionId(),
                providerNamespace, resourceActionName, this.client.getApiVersion(), properties, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Deletes resources.
     * 
     * @param providerNamespace The name of the resource provider hosted within ProviderHub.
     * @param resourceActionName The resource action name.
     * @param properties The properties supplied to the DeleteResources operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteResourcesWithResponseAsync(String providerNamespace,
        String resourceActionName, ResourceManagementAction properties, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (providerNamespace == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter providerNamespace is required and cannot be null."));
        }
        if (resourceActionName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceActionName is required and cannot be null."));
        }
        if (properties == null) {
            return Mono.error(new IllegalArgumentException("Parameter properties is required and cannot be null."));
        } else {
            properties.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.deleteResources(this.client.getEndpoint(), this.client.getSubscriptionId(), providerNamespace,
            resourceActionName, this.client.getApiVersion(), properties, accept, context);
    }

    /**
     * Deletes resources.
     * 
     * @param providerNamespace The name of the resource provider hosted within ProviderHub.
     * @param resourceActionName The resource action name.
     * @param properties The properties supplied to the DeleteResources operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteResourcesAsync(String providerNamespace,
        String resourceActionName, ResourceManagementAction properties) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = deleteResourcesWithResponseAsync(providerNamespace, resourceActionName, properties);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            this.client.getContext());
    }

    /**
     * Deletes resources.
     * 
     * @param providerNamespace The name of the resource provider hosted within ProviderHub.
     * @param resourceActionName The resource action name.
     * @param properties The properties supplied to the DeleteResources operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteResourcesAsync(String providerNamespace,
        String resourceActionName, ResourceManagementAction properties, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono
            = deleteResourcesWithResponseAsync(providerNamespace, resourceActionName, properties, context);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            context);
    }

    /**
     * Deletes resources.
     * 
     * @param providerNamespace The name of the resource provider hosted within ProviderHub.
     * @param resourceActionName The resource action name.
     * @param properties The properties supplied to the DeleteResources operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDeleteResources(String providerNamespace, String resourceActionName,
        ResourceManagementAction properties) {
        return this.beginDeleteResourcesAsync(providerNamespace, resourceActionName, properties).getSyncPoller();
    }

    /**
     * Deletes resources.
     * 
     * @param providerNamespace The name of the resource provider hosted within ProviderHub.
     * @param resourceActionName The resource action name.
     * @param properties The properties supplied to the DeleteResources operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDeleteResources(String providerNamespace, String resourceActionName,
        ResourceManagementAction properties, Context context) {
        return this.beginDeleteResourcesAsync(providerNamespace, resourceActionName, properties, context)
            .getSyncPoller();
    }

    /**
     * Deletes resources.
     * 
     * @param providerNamespace The name of the resource provider hosted within ProviderHub.
     * @param resourceActionName The resource action name.
     * @param properties The properties supplied to the DeleteResources operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteResourcesAsync(String providerNamespace, String resourceActionName,
        ResourceManagementAction properties) {
        return beginDeleteResourcesAsync(providerNamespace, resourceActionName, properties).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes resources.
     * 
     * @param providerNamespace The name of the resource provider hosted within ProviderHub.
     * @param resourceActionName The resource action name.
     * @param properties The properties supplied to the DeleteResources operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteResourcesAsync(String providerNamespace, String resourceActionName,
        ResourceManagementAction properties, Context context) {
        return beginDeleteResourcesAsync(providerNamespace, resourceActionName, properties, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes resources.
     * 
     * @param providerNamespace The name of the resource provider hosted within ProviderHub.
     * @param resourceActionName The resource action name.
     * @param properties The properties supplied to the DeleteResources operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteResources(String providerNamespace, String resourceActionName,
        ResourceManagementAction properties) {
        deleteResourcesAsync(providerNamespace, resourceActionName, properties).block();
    }

    /**
     * Deletes resources.
     * 
     * @param providerNamespace The name of the resource provider hosted within ProviderHub.
     * @param resourceActionName The resource action name.
     * @param properties The properties supplied to the DeleteResources operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteResources(String providerNamespace, String resourceActionName,
        ResourceManagementAction properties, Context context) {
        deleteResourcesAsync(providerNamespace, resourceActionName, properties, context).block();
    }
}
