// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.edgemarketplace.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The sku operating system.
 */
@Fluent
public final class SkuOperatingSystem implements JsonSerializable<SkuOperatingSystem> {
    /*
     * The family of the operating system
     */
    private String family;

    /*
     * The type of the operating system
     */
    private String type;

    /*
     * The name of the operating system
     */
    private String name;

    /**
     * Creates an instance of SkuOperatingSystem class.
     */
    public SkuOperatingSystem() {
    }

    /**
     * Get the family property: The family of the operating system.
     * 
     * @return the family value.
     */
    public String family() {
        return this.family;
    }

    /**
     * Set the family property: The family of the operating system.
     * 
     * @param family the family value to set.
     * @return the SkuOperatingSystem object itself.
     */
    public SkuOperatingSystem withFamily(String family) {
        this.family = family;
        return this;
    }

    /**
     * Get the type property: The type of the operating system.
     * 
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Set the type property: The type of the operating system.
     * 
     * @param type the type value to set.
     * @return the SkuOperatingSystem object itself.
     */
    public SkuOperatingSystem withType(String type) {
        this.type = type;
        return this;
    }

    /**
     * Get the name property: The name of the operating system.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The name of the operating system.
     * 
     * @param name the name value to set.
     * @return the SkuOperatingSystem object itself.
     */
    public SkuOperatingSystem withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (name() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property name in model SkuOperatingSystem"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(SkuOperatingSystem.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("family", this.family);
        jsonWriter.writeStringField("type", this.type);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SkuOperatingSystem from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SkuOperatingSystem if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SkuOperatingSystem.
     */
    public static SkuOperatingSystem fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SkuOperatingSystem deserializedSkuOperatingSystem = new SkuOperatingSystem();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedSkuOperatingSystem.name = reader.getString();
                } else if ("family".equals(fieldName)) {
                    deserializedSkuOperatingSystem.family = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedSkuOperatingSystem.type = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSkuOperatingSystem;
        });
    }
}
