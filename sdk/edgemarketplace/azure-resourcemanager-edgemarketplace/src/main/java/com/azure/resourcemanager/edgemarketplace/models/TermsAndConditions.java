// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.edgemarketplace.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Terms and conditions.
 */
@Fluent
public final class TermsAndConditions implements JsonSerializable<TermsAndConditions> {
    /*
     * The legal terms and conditions uri
     */
    private String legalTermsUri;

    /*
     * The type of legal terms
     */
    private String legalTermsType;

    /*
     * The privacy policy uri
     */
    private String privacyPolicyUri;

    /**
     * Creates an instance of TermsAndConditions class.
     */
    public TermsAndConditions() {
    }

    /**
     * Get the legalTermsUri property: The legal terms and conditions uri.
     * 
     * @return the legalTermsUri value.
     */
    public String legalTermsUri() {
        return this.legalTermsUri;
    }

    /**
     * Set the legalTermsUri property: The legal terms and conditions uri.
     * 
     * @param legalTermsUri the legalTermsUri value to set.
     * @return the TermsAndConditions object itself.
     */
    public TermsAndConditions withLegalTermsUri(String legalTermsUri) {
        this.legalTermsUri = legalTermsUri;
        return this;
    }

    /**
     * Get the legalTermsType property: The type of legal terms.
     * 
     * @return the legalTermsType value.
     */
    public String legalTermsType() {
        return this.legalTermsType;
    }

    /**
     * Set the legalTermsType property: The type of legal terms.
     * 
     * @param legalTermsType the legalTermsType value to set.
     * @return the TermsAndConditions object itself.
     */
    public TermsAndConditions withLegalTermsType(String legalTermsType) {
        this.legalTermsType = legalTermsType;
        return this;
    }

    /**
     * Get the privacyPolicyUri property: The privacy policy uri.
     * 
     * @return the privacyPolicyUri value.
     */
    public String privacyPolicyUri() {
        return this.privacyPolicyUri;
    }

    /**
     * Set the privacyPolicyUri property: The privacy policy uri.
     * 
     * @param privacyPolicyUri the privacyPolicyUri value to set.
     * @return the TermsAndConditions object itself.
     */
    public TermsAndConditions withPrivacyPolicyUri(String privacyPolicyUri) {
        this.privacyPolicyUri = privacyPolicyUri;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("legalTermsUri", this.legalTermsUri);
        jsonWriter.writeStringField("legalTermsType", this.legalTermsType);
        jsonWriter.writeStringField("privacyPolicyUri", this.privacyPolicyUri);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TermsAndConditions from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TermsAndConditions if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the TermsAndConditions.
     */
    public static TermsAndConditions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TermsAndConditions deserializedTermsAndConditions = new TermsAndConditions();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("legalTermsUri".equals(fieldName)) {
                    deserializedTermsAndConditions.legalTermsUri = reader.getString();
                } else if ("legalTermsType".equals(fieldName)) {
                    deserializedTermsAndConditions.legalTermsType = reader.getString();
                } else if ("privacyPolicyUri".equals(fieldName)) {
                    deserializedTermsAndConditions.privacyPolicyUri = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTermsAndConditions;
        });
    }
}
