// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.edgemarketplace.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The disk access token.
 */
@Fluent
public final class DiskAccessTokenInner implements JsonSerializable<DiskAccessTokenInner> {
    /*
     * The disk id.
     */
    private String diskId;

    /*
     * The access token creation status.
     */
    private String status;

    /*
     * The access token.
     */
    private String accessToken;

    /**
     * Creates an instance of DiskAccessTokenInner class.
     */
    public DiskAccessTokenInner() {
    }

    /**
     * Get the diskId property: The disk id.
     * 
     * @return the diskId value.
     */
    public String diskId() {
        return this.diskId;
    }

    /**
     * Set the diskId property: The disk id.
     * 
     * @param diskId the diskId value to set.
     * @return the DiskAccessTokenInner object itself.
     */
    public DiskAccessTokenInner withDiskId(String diskId) {
        this.diskId = diskId;
        return this;
    }

    /**
     * Get the status property: The access token creation status.
     * 
     * @return the status value.
     */
    public String status() {
        return this.status;
    }

    /**
     * Set the status property: The access token creation status.
     * 
     * @param status the status value to set.
     * @return the DiskAccessTokenInner object itself.
     */
    public DiskAccessTokenInner withStatus(String status) {
        this.status = status;
        return this;
    }

    /**
     * Get the accessToken property: The access token.
     * 
     * @return the accessToken value.
     */
    public String accessToken() {
        return this.accessToken;
    }

    /**
     * Set the accessToken property: The access token.
     * 
     * @param accessToken the accessToken value to set.
     * @return the DiskAccessTokenInner object itself.
     */
    public DiskAccessTokenInner withAccessToken(String accessToken) {
        this.accessToken = accessToken;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (accessToken() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property accessToken in model DiskAccessTokenInner"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DiskAccessTokenInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("accessToken", this.accessToken);
        jsonWriter.writeStringField("diskId", this.diskId);
        jsonWriter.writeStringField("status", this.status);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DiskAccessTokenInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DiskAccessTokenInner if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DiskAccessTokenInner.
     */
    public static DiskAccessTokenInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DiskAccessTokenInner deserializedDiskAccessTokenInner = new DiskAccessTokenInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("accessToken".equals(fieldName)) {
                    deserializedDiskAccessTokenInner.accessToken = reader.getString();
                } else if ("diskId".equals(fieldName)) {
                    deserializedDiskAccessTokenInner.diskId = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedDiskAccessTokenInner.status = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDiskAccessTokenInner;
        });
    }
}
