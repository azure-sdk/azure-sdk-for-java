// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.edgemarketplace.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The offer properties.
 */
@Fluent
public final class OfferProperties implements JsonSerializable<OfferProperties> {
    /*
     * The content version
     */
    private String contentVersion;

    /*
     * The content url
     */
    private String contentUrl;

    /*
     * The offer content
     */
    private OfferContent offerContent;

    /*
     * The resource provisioning state
     */
    private ResourceProvisioningState provisioningState;

    /*
     * The marketplace skus
     */
    private List<MarketplaceSku> marketplaceSkus;

    /**
     * Creates an instance of OfferProperties class.
     */
    public OfferProperties() {
    }

    /**
     * Get the contentVersion property: The content version.
     * 
     * @return the contentVersion value.
     */
    public String contentVersion() {
        return this.contentVersion;
    }

    /**
     * Set the contentVersion property: The content version.
     * 
     * @param contentVersion the contentVersion value to set.
     * @return the OfferProperties object itself.
     */
    public OfferProperties withContentVersion(String contentVersion) {
        this.contentVersion = contentVersion;
        return this;
    }

    /**
     * Get the contentUrl property: The content url.
     * 
     * @return the contentUrl value.
     */
    public String contentUrl() {
        return this.contentUrl;
    }

    /**
     * Set the contentUrl property: The content url.
     * 
     * @param contentUrl the contentUrl value to set.
     * @return the OfferProperties object itself.
     */
    public OfferProperties withContentUrl(String contentUrl) {
        this.contentUrl = contentUrl;
        return this;
    }

    /**
     * Get the offerContent property: The offer content.
     * 
     * @return the offerContent value.
     */
    public OfferContent offerContent() {
        return this.offerContent;
    }

    /**
     * Set the offerContent property: The offer content.
     * 
     * @param offerContent the offerContent value to set.
     * @return the OfferProperties object itself.
     */
    public OfferProperties withOfferContent(OfferContent offerContent) {
        this.offerContent = offerContent;
        return this;
    }

    /**
     * Get the provisioningState property: The resource provisioning state.
     * 
     * @return the provisioningState value.
     */
    public ResourceProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Set the provisioningState property: The resource provisioning state.
     * 
     * @param provisioningState the provisioningState value to set.
     * @return the OfferProperties object itself.
     */
    public OfferProperties withProvisioningState(ResourceProvisioningState provisioningState) {
        this.provisioningState = provisioningState;
        return this;
    }

    /**
     * Get the marketplaceSkus property: The marketplace skus.
     * 
     * @return the marketplaceSkus value.
     */
    public List<MarketplaceSku> marketplaceSkus() {
        return this.marketplaceSkus;
    }

    /**
     * Set the marketplaceSkus property: The marketplace skus.
     * 
     * @param marketplaceSkus the marketplaceSkus value to set.
     * @return the OfferProperties object itself.
     */
    public OfferProperties withMarketplaceSkus(List<MarketplaceSku> marketplaceSkus) {
        this.marketplaceSkus = marketplaceSkus;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (offerContent() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property offerContent in model OfferProperties"));
        } else {
            offerContent().validate();
        }
        if (marketplaceSkus() != null) {
            marketplaceSkus().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(OfferProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("offerContent", this.offerContent);
        jsonWriter.writeStringField("contentVersion", this.contentVersion);
        jsonWriter.writeStringField("contentUrl", this.contentUrl);
        jsonWriter.writeStringField("provisioningState",
            this.provisioningState == null ? null : this.provisioningState.toString());
        jsonWriter.writeArrayField("marketplaceSkus", this.marketplaceSkus,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OfferProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OfferProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the OfferProperties.
     */
    public static OfferProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OfferProperties deserializedOfferProperties = new OfferProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("offerContent".equals(fieldName)) {
                    deserializedOfferProperties.offerContent = OfferContent.fromJson(reader);
                } else if ("contentVersion".equals(fieldName)) {
                    deserializedOfferProperties.contentVersion = reader.getString();
                } else if ("contentUrl".equals(fieldName)) {
                    deserializedOfferProperties.contentUrl = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedOfferProperties.provisioningState
                        = ResourceProvisioningState.fromString(reader.getString());
                } else if ("marketplaceSkus".equals(fieldName)) {
                    List<MarketplaceSku> marketplaceSkus
                        = reader.readArray(reader1 -> MarketplaceSku.fromJson(reader1));
                    deserializedOfferProperties.marketplaceSkus = marketplaceSkus;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOfferProperties;
        });
    }
}
