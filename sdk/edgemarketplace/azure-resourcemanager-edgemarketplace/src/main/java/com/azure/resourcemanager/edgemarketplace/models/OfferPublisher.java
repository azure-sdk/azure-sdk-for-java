// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.edgemarketplace.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The offer publisher.
 */
@Fluent
public final class OfferPublisher implements JsonSerializable<OfferPublisher> {
    /*
     * The publisher Id
     */
    private String publisherId;

    /*
     * The publisher name
     */
    private String publisherDisplayName;

    /**
     * Creates an instance of OfferPublisher class.
     */
    public OfferPublisher() {
    }

    /**
     * Get the publisherId property: The publisher Id.
     * 
     * @return the publisherId value.
     */
    public String publisherId() {
        return this.publisherId;
    }

    /**
     * Set the publisherId property: The publisher Id.
     * 
     * @param publisherId the publisherId value to set.
     * @return the OfferPublisher object itself.
     */
    public OfferPublisher withPublisherId(String publisherId) {
        this.publisherId = publisherId;
        return this;
    }

    /**
     * Get the publisherDisplayName property: The publisher name.
     * 
     * @return the publisherDisplayName value.
     */
    public String publisherDisplayName() {
        return this.publisherDisplayName;
    }

    /**
     * Set the publisherDisplayName property: The publisher name.
     * 
     * @param publisherDisplayName the publisherDisplayName value to set.
     * @return the OfferPublisher object itself.
     */
    public OfferPublisher withPublisherDisplayName(String publisherDisplayName) {
        this.publisherDisplayName = publisherDisplayName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (publisherId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property publisherId in model OfferPublisher"));
        }
        if (publisherDisplayName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property publisherDisplayName in model OfferPublisher"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(OfferPublisher.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("publisherId", this.publisherId);
        jsonWriter.writeStringField("publisherDisplayName", this.publisherDisplayName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OfferPublisher from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OfferPublisher if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the OfferPublisher.
     */
    public static OfferPublisher fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OfferPublisher deserializedOfferPublisher = new OfferPublisher();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("publisherId".equals(fieldName)) {
                    deserializedOfferPublisher.publisherId = reader.getString();
                } else if ("publisherDisplayName".equals(fieldName)) {
                    deserializedOfferPublisher.publisherDisplayName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOfferPublisher;
        });
    }
}
