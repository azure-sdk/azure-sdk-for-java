// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.edgemarketplace.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The marketplace sku version.
 */
@Fluent
public final class MarketplaceSkuVersion implements JsonSerializable<MarketplaceSkuVersion> {
    /*
     * The name of sku version
     */
    private String name;

    /*
     * The size of the image
     */
    private Integer sizeOnDiskInMb;

    /*
     * The size of the download
     */
    private Integer minimumDownloadSizeInMb;

    /*
     * The stage name
     */
    private String stageName;

    /**
     * Creates an instance of MarketplaceSkuVersion class.
     */
    public MarketplaceSkuVersion() {
    }

    /**
     * Get the name property: The name of sku version.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The name of sku version.
     * 
     * @param name the name value to set.
     * @return the MarketplaceSkuVersion object itself.
     */
    public MarketplaceSkuVersion withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the sizeOnDiskInMb property: The size of the image.
     * 
     * @return the sizeOnDiskInMb value.
     */
    public Integer sizeOnDiskInMb() {
        return this.sizeOnDiskInMb;
    }

    /**
     * Set the sizeOnDiskInMb property: The size of the image.
     * 
     * @param sizeOnDiskInMb the sizeOnDiskInMb value to set.
     * @return the MarketplaceSkuVersion object itself.
     */
    public MarketplaceSkuVersion withSizeOnDiskInMb(Integer sizeOnDiskInMb) {
        this.sizeOnDiskInMb = sizeOnDiskInMb;
        return this;
    }

    /**
     * Get the minimumDownloadSizeInMb property: The size of the download.
     * 
     * @return the minimumDownloadSizeInMb value.
     */
    public Integer minimumDownloadSizeInMb() {
        return this.minimumDownloadSizeInMb;
    }

    /**
     * Set the minimumDownloadSizeInMb property: The size of the download.
     * 
     * @param minimumDownloadSizeInMb the minimumDownloadSizeInMb value to set.
     * @return the MarketplaceSkuVersion object itself.
     */
    public MarketplaceSkuVersion withMinimumDownloadSizeInMb(Integer minimumDownloadSizeInMb) {
        this.minimumDownloadSizeInMb = minimumDownloadSizeInMb;
        return this;
    }

    /**
     * Get the stageName property: The stage name.
     * 
     * @return the stageName value.
     */
    public String stageName() {
        return this.stageName;
    }

    /**
     * Set the stageName property: The stage name.
     * 
     * @param stageName the stageName value to set.
     * @return the MarketplaceSkuVersion object itself.
     */
    public MarketplaceSkuVersion withStageName(String stageName) {
        this.stageName = stageName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (name() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property name in model MarketplaceSkuVersion"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(MarketplaceSkuVersion.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeNumberField("sizeOnDiskInMb", this.sizeOnDiskInMb);
        jsonWriter.writeNumberField("minimumDownloadSizeInMb", this.minimumDownloadSizeInMb);
        jsonWriter.writeStringField("stageName", this.stageName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MarketplaceSkuVersion from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MarketplaceSkuVersion if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MarketplaceSkuVersion.
     */
    public static MarketplaceSkuVersion fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MarketplaceSkuVersion deserializedMarketplaceSkuVersion = new MarketplaceSkuVersion();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedMarketplaceSkuVersion.name = reader.getString();
                } else if ("sizeOnDiskInMb".equals(fieldName)) {
                    deserializedMarketplaceSkuVersion.sizeOnDiskInMb = reader.getNullable(JsonReader::getInt);
                } else if ("minimumDownloadSizeInMb".equals(fieldName)) {
                    deserializedMarketplaceSkuVersion.minimumDownloadSizeInMb = reader.getNullable(JsonReader::getInt);
                } else if ("stageName".equals(fieldName)) {
                    deserializedMarketplaceSkuVersion.stageName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMarketplaceSkuVersion;
        });
    }
}
