// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.edgemarketplace.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** The offer content. */
@Fluent
public final class OfferContent {
    /*
     * The display name of the offer
     */
    @JsonProperty(value = "displayName", required = true)
    private String displayName;

    /*
     * The summary
     */
    @JsonProperty(value = "summary", required = true)
    private String summary;

    /*
     * The long summary
     */
    @JsonProperty(value = "longSummary", required = true)
    private String longSummary;

    /*
     * The description
     */
    @JsonProperty(value = "description", required = true)
    private String description;

    /*
     * The offer id
     */
    @JsonProperty(value = "offerId", required = true)
    private String offerId;

    /*
     * The offer type
     */
    @JsonProperty(value = "offerType", required = true)
    private String offerType;

    /*
     * The support uri
     */
    @JsonProperty(value = "supportUri", required = true)
    private String supportUri;

    /*
     * The popularity of the offer
     */
    @JsonProperty(value = "popularity", required = true)
    private int popularity;

    /*
     * The publisher of the offer
     */
    @JsonProperty(value = "offerPublisher", required = true)
    private OfferPublisher offerPublisher;

    /*
     * The availability of the offer
     */
    @JsonProperty(value = "availability", required = true)
    private OfferAvailability availability;

    /*
     * The release type of the offer
     */
    @JsonProperty(value = "releaseType", required = true)
    private OfferReleaseType releaseType;

    /*
     * The icon files
     */
    @JsonProperty(value = "iconFileUris", required = true)
    private IconFileUris iconFileUris;

    /*
     * The terms and conditions
     */
    @JsonProperty(value = "termsAndConditions", required = true)
    private TermsAndConditions termsAndConditions;

    /*
     * The category ids
     */
    @JsonProperty(value = "categoryIds")
    private List<String> categoryIds;

    /** Creates an instance of OfferContent class. */
    public OfferContent() {
    }

    /**
     * Get the displayName property: The display name of the offer.
     *
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: The display name of the offer.
     *
     * @param displayName the displayName value to set.
     * @return the OfferContent object itself.
     */
    public OfferContent withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the summary property: The summary.
     *
     * @return the summary value.
     */
    public String summary() {
        return this.summary;
    }

    /**
     * Set the summary property: The summary.
     *
     * @param summary the summary value to set.
     * @return the OfferContent object itself.
     */
    public OfferContent withSummary(String summary) {
        this.summary = summary;
        return this;
    }

    /**
     * Get the longSummary property: The long summary.
     *
     * @return the longSummary value.
     */
    public String longSummary() {
        return this.longSummary;
    }

    /**
     * Set the longSummary property: The long summary.
     *
     * @param longSummary the longSummary value to set.
     * @return the OfferContent object itself.
     */
    public OfferContent withLongSummary(String longSummary) {
        this.longSummary = longSummary;
        return this;
    }

    /**
     * Get the description property: The description.
     *
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: The description.
     *
     * @param description the description value to set.
     * @return the OfferContent object itself.
     */
    public OfferContent withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the offerId property: The offer id.
     *
     * @return the offerId value.
     */
    public String offerId() {
        return this.offerId;
    }

    /**
     * Set the offerId property: The offer id.
     *
     * @param offerId the offerId value to set.
     * @return the OfferContent object itself.
     */
    public OfferContent withOfferId(String offerId) {
        this.offerId = offerId;
        return this;
    }

    /**
     * Get the offerType property: The offer type.
     *
     * @return the offerType value.
     */
    public String offerType() {
        return this.offerType;
    }

    /**
     * Set the offerType property: The offer type.
     *
     * @param offerType the offerType value to set.
     * @return the OfferContent object itself.
     */
    public OfferContent withOfferType(String offerType) {
        this.offerType = offerType;
        return this;
    }

    /**
     * Get the supportUri property: The support uri.
     *
     * @return the supportUri value.
     */
    public String supportUri() {
        return this.supportUri;
    }

    /**
     * Set the supportUri property: The support uri.
     *
     * @param supportUri the supportUri value to set.
     * @return the OfferContent object itself.
     */
    public OfferContent withSupportUri(String supportUri) {
        this.supportUri = supportUri;
        return this;
    }

    /**
     * Get the popularity property: The popularity of the offer.
     *
     * @return the popularity value.
     */
    public int popularity() {
        return this.popularity;
    }

    /**
     * Set the popularity property: The popularity of the offer.
     *
     * @param popularity the popularity value to set.
     * @return the OfferContent object itself.
     */
    public OfferContent withPopularity(int popularity) {
        this.popularity = popularity;
        return this;
    }

    /**
     * Get the offerPublisher property: The publisher of the offer.
     *
     * @return the offerPublisher value.
     */
    public OfferPublisher offerPublisher() {
        return this.offerPublisher;
    }

    /**
     * Set the offerPublisher property: The publisher of the offer.
     *
     * @param offerPublisher the offerPublisher value to set.
     * @return the OfferContent object itself.
     */
    public OfferContent withOfferPublisher(OfferPublisher offerPublisher) {
        this.offerPublisher = offerPublisher;
        return this;
    }

    /**
     * Get the availability property: The availability of the offer.
     *
     * @return the availability value.
     */
    public OfferAvailability availability() {
        return this.availability;
    }

    /**
     * Set the availability property: The availability of the offer.
     *
     * @param availability the availability value to set.
     * @return the OfferContent object itself.
     */
    public OfferContent withAvailability(OfferAvailability availability) {
        this.availability = availability;
        return this;
    }

    /**
     * Get the releaseType property: The release type of the offer.
     *
     * @return the releaseType value.
     */
    public OfferReleaseType releaseType() {
        return this.releaseType;
    }

    /**
     * Set the releaseType property: The release type of the offer.
     *
     * @param releaseType the releaseType value to set.
     * @return the OfferContent object itself.
     */
    public OfferContent withReleaseType(OfferReleaseType releaseType) {
        this.releaseType = releaseType;
        return this;
    }

    /**
     * Get the iconFileUris property: The icon files.
     *
     * @return the iconFileUris value.
     */
    public IconFileUris iconFileUris() {
        return this.iconFileUris;
    }

    /**
     * Set the iconFileUris property: The icon files.
     *
     * @param iconFileUris the iconFileUris value to set.
     * @return the OfferContent object itself.
     */
    public OfferContent withIconFileUris(IconFileUris iconFileUris) {
        this.iconFileUris = iconFileUris;
        return this;
    }

    /**
     * Get the termsAndConditions property: The terms and conditions.
     *
     * @return the termsAndConditions value.
     */
    public TermsAndConditions termsAndConditions() {
        return this.termsAndConditions;
    }

    /**
     * Set the termsAndConditions property: The terms and conditions.
     *
     * @param termsAndConditions the termsAndConditions value to set.
     * @return the OfferContent object itself.
     */
    public OfferContent withTermsAndConditions(TermsAndConditions termsAndConditions) {
        this.termsAndConditions = termsAndConditions;
        return this;
    }

    /**
     * Get the categoryIds property: The category ids.
     *
     * @return the categoryIds value.
     */
    public List<String> categoryIds() {
        return this.categoryIds;
    }

    /**
     * Set the categoryIds property: The category ids.
     *
     * @param categoryIds the categoryIds value to set.
     * @return the OfferContent object itself.
     */
    public OfferContent withCategoryIds(List<String> categoryIds) {
        this.categoryIds = categoryIds;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (displayName() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property displayName in model OfferContent"));
        }
        if (summary() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property summary in model OfferContent"));
        }
        if (longSummary() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property longSummary in model OfferContent"));
        }
        if (description() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property description in model OfferContent"));
        }
        if (offerId() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property offerId in model OfferContent"));
        }
        if (offerType() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property offerType in model OfferContent"));
        }
        if (supportUri() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property supportUri in model OfferContent"));
        }
        if (offerPublisher() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property offerPublisher in model OfferContent"));
        } else {
            offerPublisher().validate();
        }
        if (availability() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property availability in model OfferContent"));
        }
        if (releaseType() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property releaseType in model OfferContent"));
        }
        if (iconFileUris() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property iconFileUris in model OfferContent"));
        } else {
            iconFileUris().validate();
        }
        if (termsAndConditions() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property termsAndConditions in model OfferContent"));
        } else {
            termsAndConditions().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(OfferContent.class);
}
