// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.chaos.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeId;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.util.List;

/**
 * Model that represents a list selector.
 */
@JsonTypeInfo(
    use = JsonTypeInfo.Id.NAME,
    property = "type",
    defaultImpl = ChaosTargetListSelector.class,
    visible = true)
@JsonTypeName("List")
@Fluent
public final class ChaosTargetListSelector extends ChaosTargetSelector {
    /*
     * Enum of the selector type.
     */
    @JsonTypeId
    @JsonProperty(value = "type", required = true)
    private SelectorType type = SelectorType.LIST;

    /*
     * List of Target references.
     */
    @JsonProperty(value = "targets", required = true)
    private List<TargetReference> targets;

    /**
     * Creates an instance of ChaosTargetListSelector class.
     */
    public ChaosTargetListSelector() {
    }

    /**
     * Get the type property: Enum of the selector type.
     * 
     * @return the type value.
     */
    @Override
    public SelectorType type() {
        return this.type;
    }

    /**
     * Get the targets property: List of Target references.
     * 
     * @return the targets value.
     */
    public List<TargetReference> targets() {
        return this.targets;
    }

    /**
     * Set the targets property: List of Target references.
     * 
     * @param targets the targets value to set.
     * @return the ChaosTargetListSelector object itself.
     */
    public ChaosTargetListSelector withTargets(List<TargetReference> targets) {
        this.targets = targets;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ChaosTargetListSelector withId(String id) {
        super.withId(id);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ChaosTargetListSelector withFilter(ChaosTargetFilter filter) {
        super.withFilter(filter);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (targets() == null) {
            throw LOGGER.atError()
                .log(
                    new IllegalArgumentException("Missing required property targets in model ChaosTargetListSelector"));
        } else {
            targets().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ChaosTargetListSelector.class);
}
