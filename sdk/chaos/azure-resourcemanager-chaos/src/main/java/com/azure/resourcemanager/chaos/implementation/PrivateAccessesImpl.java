// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.chaos.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.chaos.fluent.PrivateAccessesClient;
import com.azure.resourcemanager.chaos.fluent.models.PrivateAccessInner;
import com.azure.resourcemanager.chaos.fluent.models.PrivateEndpointConnectionInner;
import com.azure.resourcemanager.chaos.fluent.models.PrivateLinkResourceListResultInner;
import com.azure.resourcemanager.chaos.models.PrivateAccess;
import com.azure.resourcemanager.chaos.models.PrivateAccesses;
import com.azure.resourcemanager.chaos.models.PrivateEndpointConnection;
import com.azure.resourcemanager.chaos.models.PrivateLinkResourceListResult;

public final class PrivateAccessesImpl implements PrivateAccesses {
    private static final ClientLogger LOGGER = new ClientLogger(PrivateAccessesImpl.class);

    private final PrivateAccessesClient innerClient;

    private final com.azure.resourcemanager.chaos.ChaosManager serviceManager;

    public PrivateAccessesImpl(
        PrivateAccessesClient innerClient, com.azure.resourcemanager.chaos.ChaosManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<PrivateAccess> list() {
        PagedIterable<PrivateAccessInner> inner = this.serviceClient().list();
        return Utils.mapPage(inner, inner1 -> new PrivateAccessImpl(inner1, this.manager()));
    }

    public PagedIterable<PrivateAccess> list(String continuationToken, Context context) {
        PagedIterable<PrivateAccessInner> inner = this.serviceClient().list(continuationToken, context);
        return Utils.mapPage(inner, inner1 -> new PrivateAccessImpl(inner1, this.manager()));
    }

    public PagedIterable<PrivateAccess> listByResourceGroup(String resourceGroupName) {
        PagedIterable<PrivateAccessInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return Utils.mapPage(inner, inner1 -> new PrivateAccessImpl(inner1, this.manager()));
    }

    public PagedIterable<PrivateAccess> listByResourceGroup(
        String resourceGroupName, String continuationToken, Context context) {
        PagedIterable<PrivateAccessInner> inner =
            this.serviceClient().listByResourceGroup(resourceGroupName, continuationToken, context);
        return Utils.mapPage(inner, inner1 -> new PrivateAccessImpl(inner1, this.manager()));
    }

    public Response<PrivateAccess> getByResourceGroupWithResponse(
        String resourceGroupName, String privateAccessName, Context context) {
        Response<PrivateAccessInner> inner =
            this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, privateAccessName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new PrivateAccessImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PrivateAccess getByResourceGroup(String resourceGroupName, String privateAccessName) {
        PrivateAccessInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, privateAccessName);
        if (inner != null) {
            return new PrivateAccessImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteByResourceGroupWithResponse(
        String resourceGroupName, String privateAccessName, Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, privateAccessName, context);
    }

    public void deleteByResourceGroup(String resourceGroupName, String privateAccessName) {
        this.serviceClient().delete(resourceGroupName, privateAccessName);
    }

    public Response<PrivateLinkResourceListResult> getPrivateLinkResourcesWithResponse(
        String resourceGroupName, String privateAccessName, Context context) {
        Response<PrivateLinkResourceListResultInner> inner =
            this.serviceClient().getPrivateLinkResourcesWithResponse(resourceGroupName, privateAccessName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new PrivateLinkResourceListResultImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PrivateLinkResourceListResult getPrivateLinkResources(String resourceGroupName, String privateAccessName) {
        PrivateLinkResourceListResultInner inner =
            this.serviceClient().getPrivateLinkResources(resourceGroupName, privateAccessName);
        if (inner != null) {
            return new PrivateLinkResourceListResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PrivateEndpointConnection updateAPrivateEndpointConnection(
        String resourceGroupName,
        String privateAccessName,
        String privateEndpointConnectionName,
        PrivateEndpointConnectionInner privateEndpointConnection) {
        PrivateEndpointConnectionInner inner =
            this
                .serviceClient()
                .updateAPrivateEndpointConnection(
                    resourceGroupName, privateAccessName, privateEndpointConnectionName, privateEndpointConnection);
        if (inner != null) {
            return new PrivateEndpointConnectionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PrivateEndpointConnection updateAPrivateEndpointConnection(
        String resourceGroupName,
        String privateAccessName,
        String privateEndpointConnectionName,
        PrivateEndpointConnectionInner privateEndpointConnection,
        Context context) {
        PrivateEndpointConnectionInner inner =
            this
                .serviceClient()
                .updateAPrivateEndpointConnection(
                    resourceGroupName,
                    privateAccessName,
                    privateEndpointConnectionName,
                    privateEndpointConnection,
                    context);
        if (inner != null) {
            return new PrivateEndpointConnectionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<PrivateEndpointConnection> getAPrivateEndpointConnectionWithResponse(
        String resourceGroupName, String privateAccessName, String privateEndpointConnectionName, Context context) {
        Response<PrivateEndpointConnectionInner> inner =
            this
                .serviceClient()
                .getAPrivateEndpointConnectionWithResponse(
                    resourceGroupName, privateAccessName, privateEndpointConnectionName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new PrivateEndpointConnectionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PrivateEndpointConnection getAPrivateEndpointConnection(
        String resourceGroupName, String privateAccessName, String privateEndpointConnectionName) {
        PrivateEndpointConnectionInner inner =
            this
                .serviceClient()
                .getAPrivateEndpointConnection(resourceGroupName, privateAccessName, privateEndpointConnectionName);
        if (inner != null) {
            return new PrivateEndpointConnectionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteAPrivateEndpointConnection(
        String resourceGroupName, String privateAccessName, String privateEndpointConnectionName) {
        this
            .serviceClient()
            .deleteAPrivateEndpointConnection(resourceGroupName, privateAccessName, privateEndpointConnectionName);
    }

    public void deleteAPrivateEndpointConnection(
        String resourceGroupName, String privateAccessName, String privateEndpointConnectionName, Context context) {
        this
            .serviceClient()
            .deleteAPrivateEndpointConnection(
                resourceGroupName, privateAccessName, privateEndpointConnectionName, context);
    }

    public PagedIterable<PrivateEndpointConnection> listPrivateEndpointConnections(
        String resourceGroupName, String privateAccessName) {
        PagedIterable<PrivateEndpointConnectionInner> inner =
            this.serviceClient().listPrivateEndpointConnections(resourceGroupName, privateAccessName);
        return Utils.mapPage(inner, inner1 -> new PrivateEndpointConnectionImpl(inner1, this.manager()));
    }

    public PagedIterable<PrivateEndpointConnection> listPrivateEndpointConnections(
        String resourceGroupName, String privateAccessName, Context context) {
        PagedIterable<PrivateEndpointConnectionInner> inner =
            this.serviceClient().listPrivateEndpointConnections(resourceGroupName, privateAccessName, context);
        return Utils.mapPage(inner, inner1 -> new PrivateEndpointConnectionImpl(inner1, this.manager()));
    }

    public PrivateAccess getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String privateAccessName = Utils.getValueFromIdByName(id, "privateAccesses");
        if (privateAccessName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'privateAccesses'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, privateAccessName, Context.NONE).getValue();
    }

    public Response<PrivateAccess> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String privateAccessName = Utils.getValueFromIdByName(id, "privateAccesses");
        if (privateAccessName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'privateAccesses'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, privateAccessName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String privateAccessName = Utils.getValueFromIdByName(id, "privateAccesses");
        if (privateAccessName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'privateAccesses'.", id)));
        }
        this.deleteByResourceGroupWithResponse(resourceGroupName, privateAccessName, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String privateAccessName = Utils.getValueFromIdByName(id, "privateAccesses");
        if (privateAccessName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'privateAccesses'.", id)));
        }
        return this.deleteByResourceGroupWithResponse(resourceGroupName, privateAccessName, context);
    }

    private PrivateAccessesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.chaos.ChaosManager manager() {
        return this.serviceManager;
    }

    public PrivateAccessImpl define(String name) {
        return new PrivateAccessImpl(name, this.manager());
    }
}
