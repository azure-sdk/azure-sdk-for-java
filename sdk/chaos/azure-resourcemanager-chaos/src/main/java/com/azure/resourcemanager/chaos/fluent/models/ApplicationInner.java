// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.chaos.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.core.management.SystemData;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.chaos.models.Metadata;
import com.azure.resourcemanager.chaos.models.PlatformProperties;
import com.azure.resourcemanager.chaos.models.ProvisioningState;
import com.azure.resourcemanager.chaos.models.UserAssignedManagedIdentityProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/** Application tracked resource. */
@Fluent
public final class ApplicationInner extends Resource {
    /*
     * The resource-specific properties for this resource.
     */
    @JsonProperty(value = "properties", required = true)
    private ApplicationProperties innerProperties = new ApplicationProperties();

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /** Creates an instance of ApplicationInner class. */
    public ApplicationInner() {
    }

    /**
     * Get the innerProperties property: The resource-specific properties for this resource.
     *
     * @return the innerProperties value.
     */
    private ApplicationProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     *
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /** {@inheritDoc} */
    @Override
    public ApplicationInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public ApplicationInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the identities property: list of User assigned managed identities used by application.
     *
     * @return the identities value.
     */
    public List<UserAssignedManagedIdentityProperties> identities() {
        return this.innerProperties() == null ? null : this.innerProperties().identities();
    }

    /**
     * Set the identities property: list of User assigned managed identities used by application.
     *
     * @param identities the identities value to set.
     * @return the ApplicationInner object itself.
     */
    public ApplicationInner withIdentities(List<UserAssignedManagedIdentityProperties> identities) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ApplicationProperties();
        }
        this.innerProperties().withIdentities(identities);
        return this;
    }

    /**
     * Get the deployedPlatform property: Platform on which application will be deployed.
     *
     * @return the deployedPlatform value.
     */
    public PlatformProperties deployedPlatform() {
        return this.innerProperties() == null ? null : this.innerProperties().deployedPlatform();
    }

    /**
     * Set the deployedPlatform property: Platform on which application will be deployed.
     *
     * @param deployedPlatform the deployedPlatform value to set.
     * @return the ApplicationInner object itself.
     */
    public ApplicationInner withDeployedPlatform(PlatformProperties deployedPlatform) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ApplicationProperties();
        }
        this.innerProperties().withDeployedPlatform(deployedPlatform);
        return this;
    }

    /**
     * Get the profileId property: Chaos Studio profile id of an application resource.
     *
     * @return the profileId value.
     */
    public String profileId() {
        return this.innerProperties() == null ? null : this.innerProperties().profileId();
    }

    /**
     * Set the profileId property: Chaos Studio profile id of an application resource.
     *
     * @param profileId the profileId value to set.
     * @return the ApplicationInner object itself.
     */
    public ApplicationInner withProfileId(String profileId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ApplicationProperties();
        }
        this.innerProperties().withProfileId(profileId);
        return this;
    }

    /**
     * Get the faultMetadata property: List of fault metadata of an application resource.
     *
     * @return the faultMetadata value.
     */
    public List<Metadata> faultMetadata() {
        return this.innerProperties() == null ? null : this.innerProperties().faultMetadata();
    }

    /**
     * Set the faultMetadata property: List of fault metadata of an application resource.
     *
     * @param faultMetadata the faultMetadata value to set.
     * @return the ApplicationInner object itself.
     */
    public ApplicationInner withFaultMetadata(List<Metadata> faultMetadata) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ApplicationProperties();
        }
        this.innerProperties().withFaultMetadata(faultMetadata);
        return this;
    }

    /**
     * Get the provisioningState property: The status of the last operation.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property innerProperties in model ApplicationInner"));
        } else {
            innerProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ApplicationInner.class);
}
