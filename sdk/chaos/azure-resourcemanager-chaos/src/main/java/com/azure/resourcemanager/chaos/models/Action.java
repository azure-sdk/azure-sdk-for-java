// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.chaos.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Model that represents the base action model. 9 total per experiment.
 */
@Fluent
public class Action implements JsonSerializable<Action> {
    /*
     * Enum that discriminates between action models.
     */
    private String type = "Action";

    /*
     * String that represents a Capability URN.
     */
    private String name;

    /**
     * Creates an instance of Action class.
     */
    public Action() {
    }

    /**
     * Get the type property: Enum that discriminates between action models.
     * 
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: String that represents a Capability URN.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: String that represents a Capability URN.
     * 
     * @param name the name value to set.
     * @return the Action object itself.
     */
    public Action withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (name() == null) {
            throw LOGGER.atError().log(new IllegalArgumentException("Missing required property name in model Action"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(Action.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("type", this.type);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Action from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Action if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Action.
     */
    public static Action fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("type".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("delay".equals(discriminatorValue)) {
                    return DelayAction.fromJson(readerToUse.reset());
                } else if ("discrete".equals(discriminatorValue)) {
                    return DiscreteAction.fromJson(readerToUse.reset());
                } else if ("continuous".equals(discriminatorValue)) {
                    return ContinuousAction.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    static Action fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Action deserializedAction = new Action();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedAction.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedAction.type = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAction;
        });
    }
}
