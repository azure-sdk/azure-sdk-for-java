// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.chaos.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Model that represents a branch in the step. 9 total per experiment.
 */
@Fluent
public final class Branch implements JsonSerializable<Branch> {
    /*
     * String of the branch name.
     */
    private String name;

    /*
     * List of actions.
     */
    private List<Action> actions;

    /**
     * Creates an instance of Branch class.
     */
    public Branch() {
    }

    /**
     * Get the name property: String of the branch name.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: String of the branch name.
     * 
     * @param name the name value to set.
     * @return the Branch object itself.
     */
    public Branch withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the actions property: List of actions.
     * 
     * @return the actions value.
     */
    public List<Action> actions() {
        return this.actions;
    }

    /**
     * Set the actions property: List of actions.
     * 
     * @param actions the actions value to set.
     * @return the Branch object itself.
     */
    public Branch withActions(List<Action> actions) {
        this.actions = actions;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (name() == null) {
            throw LOGGER.atError().log(new IllegalArgumentException("Missing required property name in model Branch"));
        }
        if (actions() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property actions in model Branch"));
        } else {
            actions().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(Branch.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeArrayField("actions", this.actions, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Branch from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Branch if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Branch.
     */
    public static Branch fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Branch deserializedBranch = new Branch();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedBranch.name = reader.getString();
                } else if ("actions".equals(fieldName)) {
                    List<Action> actions = reader.readArray(reader1 -> Action.fromJson(reader1));
                    deserializedBranch.actions = actions;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBranch;
        });
    }
}
