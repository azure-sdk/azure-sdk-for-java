// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.chaos.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.chaos.fluent.models.ApplicationInner;
import com.azure.resourcemanager.chaos.models.Application;
import com.azure.resourcemanager.chaos.models.ApplicationUpdate;
import com.azure.resourcemanager.chaos.models.Metadata;
import com.azure.resourcemanager.chaos.models.PlatformProperties;
import com.azure.resourcemanager.chaos.models.ProvisioningState;
import com.azure.resourcemanager.chaos.models.UserAssignedManagedIdentityProperties;
import java.util.Collections;
import java.util.List;
import java.util.Map;

public final class ApplicationImpl implements Application, Application.Definition, Application.Update {
    private ApplicationInner innerObject;

    private final com.azure.resourcemanager.chaos.ChaosManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public List<UserAssignedManagedIdentityProperties> identities() {
        List<UserAssignedManagedIdentityProperties> inner = this.innerModel().identities();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public PlatformProperties deployedPlatform() {
        return this.innerModel().deployedPlatform();
    }

    public String profileId() {
        return this.innerModel().profileId();
    }

    public List<Metadata> faultMetadata() {
        List<Metadata> inner = this.innerModel().faultMetadata();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public ProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public ApplicationInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.chaos.ChaosManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String applicationName;

    private ApplicationUpdate updateParameters;

    public ApplicationImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public Application create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getApplications()
                .createOrUpdateWithResponse(resourceGroupName, applicationName, this.innerModel(), Context.NONE)
                .getValue();
        return this;
    }

    public Application create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getApplications()
                .createOrUpdateWithResponse(resourceGroupName, applicationName, this.innerModel(), context)
                .getValue();
        return this;
    }

    ApplicationImpl(String name, com.azure.resourcemanager.chaos.ChaosManager serviceManager) {
        this.innerObject = new ApplicationInner();
        this.serviceManager = serviceManager;
        this.applicationName = name;
    }

    public ApplicationImpl update() {
        this.updateParameters = new ApplicationUpdate();
        return this;
    }

    public Application apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getApplications()
                .updateWithResponse(resourceGroupName, applicationName, updateParameters, Context.NONE)
                .getValue();
        return this;
    }

    public Application apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getApplications()
                .updateWithResponse(resourceGroupName, applicationName, updateParameters, context)
                .getValue();
        return this;
    }

    ApplicationImpl(ApplicationInner innerObject, com.azure.resourcemanager.chaos.ChaosManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.applicationName = Utils.getValueFromIdByName(innerObject.id(), "applications");
    }

    public Application refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getApplications()
                .getByResourceGroupWithResponse(resourceGroupName, applicationName, Context.NONE)
                .getValue();
        return this;
    }

    public Application refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getApplications()
                .getByResourceGroupWithResponse(resourceGroupName, applicationName, context)
                .getValue();
        return this;
    }

    public ApplicationImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public ApplicationImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public ApplicationImpl withIdentities(List<UserAssignedManagedIdentityProperties> identities) {
        this.innerModel().withIdentities(identities);
        return this;
    }

    public ApplicationImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateParameters.withTags(tags);
            return this;
        }
    }

    public ApplicationImpl withDeployedPlatform(PlatformProperties deployedPlatform) {
        this.innerModel().withDeployedPlatform(deployedPlatform);
        return this;
    }

    public ApplicationImpl withProfileId(String profileId) {
        this.innerModel().withProfileId(profileId);
        return this;
    }

    public ApplicationImpl withFaultMetadata(List<Metadata> faultMetadata) {
        this.innerModel().withFaultMetadata(faultMetadata);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
