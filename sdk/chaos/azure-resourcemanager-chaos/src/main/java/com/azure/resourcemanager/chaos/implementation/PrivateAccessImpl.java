// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.chaos.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.chaos.fluent.models.PrivateAccessInner;
import com.azure.resourcemanager.chaos.fluent.models.PrivateEndpointConnectionInner;
import com.azure.resourcemanager.chaos.models.PrivateAccess;
import com.azure.resourcemanager.chaos.models.PrivateAccessUpdate;
import com.azure.resourcemanager.chaos.models.PrivateEndpointConnection;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

public final class PrivateAccessImpl implements PrivateAccess, PrivateAccess.Definition, PrivateAccess.Update {
    private PrivateAccessInner innerObject;

    private final com.azure.resourcemanager.chaos.ChaosManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public String location() {
        return this.innerModel().location();
    }

    public List<PrivateEndpointConnection> privateEndpointConnections() {
        List<PrivateEndpointConnectionInner> inner = this.innerModel().privateEndpointConnections();
        if (inner != null) {
            return Collections
                .unmodifiableList(
                    inner
                        .stream()
                        .map(inner1 -> new PrivateEndpointConnectionImpl(inner1, this.manager()))
                        .collect(Collectors.toList()));
        } else {
            return Collections.emptyList();
        }
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public PrivateAccessInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.chaos.ChaosManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String privateAccessName;

    private PrivateAccessUpdate updateParameters;

    public PrivateAccessImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public PrivateAccess create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getPrivateAccesses()
                .createOrUpdateWithResponse(resourceGroupName, privateAccessName, this.innerModel(), Context.NONE)
                .getValue();
        return this;
    }

    public PrivateAccess create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getPrivateAccesses()
                .createOrUpdateWithResponse(resourceGroupName, privateAccessName, this.innerModel(), context)
                .getValue();
        return this;
    }

    PrivateAccessImpl(String name, com.azure.resourcemanager.chaos.ChaosManager serviceManager) {
        this.innerObject = new PrivateAccessInner();
        this.serviceManager = serviceManager;
        this.privateAccessName = name;
    }

    public PrivateAccessImpl update() {
        this.updateParameters = new PrivateAccessUpdate();
        return this;
    }

    public PrivateAccess apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getPrivateAccesses()
                .updateWithResponse(resourceGroupName, privateAccessName, updateParameters, Context.NONE)
                .getValue();
        return this;
    }

    public PrivateAccess apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getPrivateAccesses()
                .updateWithResponse(resourceGroupName, privateAccessName, updateParameters, context)
                .getValue();
        return this;
    }

    PrivateAccessImpl(PrivateAccessInner innerObject, com.azure.resourcemanager.chaos.ChaosManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.privateAccessName = Utils.getValueFromIdByName(innerObject.id(), "privateAccesses");
    }

    public PrivateAccess refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getPrivateAccesses()
                .getByResourceGroupWithResponse(resourceGroupName, privateAccessName, Context.NONE)
                .getValue();
        return this;
    }

    public PrivateAccess refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getPrivateAccesses()
                .getByResourceGroupWithResponse(resourceGroupName, privateAccessName, context)
                .getValue();
        return this;
    }

    public PrivateAccessImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public PrivateAccessImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public PrivateAccessImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateParameters.withTags(tags);
            return this;
        }
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
