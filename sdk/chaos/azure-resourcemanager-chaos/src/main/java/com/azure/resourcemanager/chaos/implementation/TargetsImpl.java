// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.chaos.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.chaos.fluent.TargetsClient;
import com.azure.resourcemanager.chaos.fluent.models.TargetInner;
import com.azure.resourcemanager.chaos.models.Target;
import com.azure.resourcemanager.chaos.models.Targets;

public final class TargetsImpl implements Targets {
    private static final ClientLogger LOGGER = new ClientLogger(TargetsImpl.class);

    private final TargetsClient innerClient;

    private final com.azure.resourcemanager.chaos.ChaosManager serviceManager;

    public TargetsImpl(TargetsClient innerClient, com.azure.resourcemanager.chaos.ChaosManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<Target> listByLocation(String parentProviderNamespace, String parentResourceType,
        String parentResourceName, String location) {
        PagedIterable<TargetInner> inner = this.serviceClient().listByLocation(parentProviderNamespace,
            parentResourceType, parentResourceName, location);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new TargetImpl(inner1, this.manager()));
    }

    public PagedIterable<Target> listByLocation(String parentProviderNamespace, String parentResourceType,
        String parentResourceName, String location, String continuationToken, Context context) {
        PagedIterable<TargetInner> inner = this.serviceClient().listByLocation(parentProviderNamespace,
            parentResourceType, parentResourceName, location, continuationToken, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new TargetImpl(inner1, this.manager()));
    }

    public Response<Target> getWithResponse(String parentProviderNamespace, String parentResourceType,
        String parentResourceName, String location, String targetName, Context context) {
        Response<TargetInner> inner = this.serviceClient().getWithResponse(parentProviderNamespace, parentResourceType,
            parentResourceName, location, targetName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new TargetImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Target get(String parentProviderNamespace, String parentResourceType, String parentResourceName,
        String location, String targetName) {
        TargetInner inner = this.serviceClient().get(parentProviderNamespace, parentResourceType, parentResourceName,
            location, targetName);
        if (inner != null) {
            return new TargetImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Target> createOrUpdateWithResponse(String parentProviderNamespace, String parentResourceType,
        String parentResourceName, String location, String targetName, TargetInner resource, Context context) {
        Response<TargetInner> inner = this.serviceClient().createOrUpdateWithResponse(parentProviderNamespace,
            parentResourceType, parentResourceName, location, targetName, resource, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new TargetImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Target createOrUpdate(String parentProviderNamespace, String parentResourceType, String parentResourceName,
        String location, String targetName, TargetInner resource) {
        TargetInner inner = this.serviceClient().createOrUpdate(parentProviderNamespace, parentResourceType,
            parentResourceName, location, targetName, resource);
        if (inner != null) {
            return new TargetImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteWithResponse(String parentProviderNamespace, String parentResourceType,
        String parentResourceName, String location, String targetName, Context context) {
        return this.serviceClient().deleteWithResponse(parentProviderNamespace, parentResourceType, parentResourceName,
            location, targetName, context);
    }

    public void delete(String parentProviderNamespace, String parentResourceType, String parentResourceName,
        String location, String targetName) {
        this.serviceClient().delete(parentProviderNamespace, parentResourceType, parentResourceName, location,
            targetName);
    }

    private TargetsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.chaos.ChaosManager manager() {
        return this.serviceManager;
    }
}
