// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.chaos.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Model that represents the Customer Managed Storage for an Experiment.
 */
@Fluent
public final class CustomerDataStorageProperties implements JsonSerializable<CustomerDataStorageProperties> {
    /*
     * ARM Resource ID of the Storage account to use for Customer Data storage.
     */
    private String storageAccountResourceId;

    /*
     * Name of the Azure Blob Storage container to use or create.
     */
    private String blobContainerName;

    /**
     * Creates an instance of CustomerDataStorageProperties class.
     */
    public CustomerDataStorageProperties() {
    }

    /**
     * Get the storageAccountResourceId property: ARM Resource ID of the Storage account to use for Customer Data
     * storage.
     * 
     * @return the storageAccountResourceId value.
     */
    public String storageAccountResourceId() {
        return this.storageAccountResourceId;
    }

    /**
     * Set the storageAccountResourceId property: ARM Resource ID of the Storage account to use for Customer Data
     * storage.
     * 
     * @param storageAccountResourceId the storageAccountResourceId value to set.
     * @return the CustomerDataStorageProperties object itself.
     */
    public CustomerDataStorageProperties withStorageAccountResourceId(String storageAccountResourceId) {
        this.storageAccountResourceId = storageAccountResourceId;
        return this;
    }

    /**
     * Get the blobContainerName property: Name of the Azure Blob Storage container to use or create.
     * 
     * @return the blobContainerName value.
     */
    public String blobContainerName() {
        return this.blobContainerName;
    }

    /**
     * Set the blobContainerName property: Name of the Azure Blob Storage container to use or create.
     * 
     * @param blobContainerName the blobContainerName value to set.
     * @return the CustomerDataStorageProperties object itself.
     */
    public CustomerDataStorageProperties withBlobContainerName(String blobContainerName) {
        this.blobContainerName = blobContainerName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("storageAccountResourceId", this.storageAccountResourceId);
        jsonWriter.writeStringField("blobContainerName", this.blobContainerName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CustomerDataStorageProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CustomerDataStorageProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the CustomerDataStorageProperties.
     */
    public static CustomerDataStorageProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CustomerDataStorageProperties deserializedCustomerDataStorageProperties
                = new CustomerDataStorageProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("storageAccountResourceId".equals(fieldName)) {
                    deserializedCustomerDataStorageProperties.storageAccountResourceId = reader.getString();
                } else if ("blobContainerName".equals(fieldName)) {
                    deserializedCustomerDataStorageProperties.blobContainerName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCustomerDataStorageProperties;
        });
    }
}
