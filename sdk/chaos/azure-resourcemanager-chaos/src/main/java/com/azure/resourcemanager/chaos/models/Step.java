// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.chaos.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Model that represents a step in the Experiment resource.
 */
@Fluent
public final class Step implements JsonSerializable<Step> {
    /*
     * String of the step name.
     */
    private String name;

    /*
     * List of branches.
     */
    private List<Branch> branches;

    /**
     * Creates an instance of Step class.
     */
    public Step() {
    }

    /**
     * Get the name property: String of the step name.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: String of the step name.
     * 
     * @param name the name value to set.
     * @return the Step object itself.
     */
    public Step withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the branches property: List of branches.
     * 
     * @return the branches value.
     */
    public List<Branch> branches() {
        return this.branches;
    }

    /**
     * Set the branches property: List of branches.
     * 
     * @param branches the branches value to set.
     * @return the Step object itself.
     */
    public Step withBranches(List<Branch> branches) {
        this.branches = branches;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (name() == null) {
            throw LOGGER.atError().log(new IllegalArgumentException("Missing required property name in model Step"));
        }
        if (branches() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property branches in model Step"));
        } else {
            branches().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(Step.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeArrayField("branches", this.branches, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Step from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Step if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Step.
     */
    public static Step fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Step deserializedStep = new Step();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedStep.name = reader.getString();
                } else if ("branches".equals(fieldName)) {
                    List<Branch> branches = reader.readArray(reader1 -> Branch.fromJson(reader1));
                    deserializedStep.branches = branches;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStep;
        });
    }
}
