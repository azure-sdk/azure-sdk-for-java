// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.chaos.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeId;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.time.Duration;
import java.util.List;

/**
 * Model that represents a continuous action.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = "type", defaultImpl = ContinuousAction.class, visible = true)
@JsonTypeName("continuous")
@Fluent
public final class ContinuousAction extends ChaosExperimentAction {
    /*
     * Enum that discriminates between action models.
     */
    @JsonTypeId
    @JsonProperty(value = "type", required = true)
    private String type = "continuous";

    /*
     * ISO8601 formatted string that represents a duration.
     */
    @JsonProperty(value = "duration", required = true)
    private Duration duration;

    /*
     * List of key value pairs.
     */
    @JsonProperty(value = "parameters", required = true)
    private List<KeyValuePair> parameters;

    /*
     * String that represents a selector.
     */
    @JsonProperty(value = "selectorId", required = true)
    private String selectorId;

    /**
     * Creates an instance of ContinuousAction class.
     */
    public ContinuousAction() {
    }

    /**
     * Get the type property: Enum that discriminates between action models.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the duration property: ISO8601 formatted string that represents a duration.
     * 
     * @return the duration value.
     */
    public Duration duration() {
        return this.duration;
    }

    /**
     * Set the duration property: ISO8601 formatted string that represents a duration.
     * 
     * @param duration the duration value to set.
     * @return the ContinuousAction object itself.
     */
    public ContinuousAction withDuration(Duration duration) {
        this.duration = duration;
        return this;
    }

    /**
     * Get the parameters property: List of key value pairs.
     * 
     * @return the parameters value.
     */
    public List<KeyValuePair> parameters() {
        return this.parameters;
    }

    /**
     * Set the parameters property: List of key value pairs.
     * 
     * @param parameters the parameters value to set.
     * @return the ContinuousAction object itself.
     */
    public ContinuousAction withParameters(List<KeyValuePair> parameters) {
        this.parameters = parameters;
        return this;
    }

    /**
     * Get the selectorId property: String that represents a selector.
     * 
     * @return the selectorId value.
     */
    public String selectorId() {
        return this.selectorId;
    }

    /**
     * Set the selectorId property: String that represents a selector.
     * 
     * @param selectorId the selectorId value to set.
     * @return the ContinuousAction object itself.
     */
    public ContinuousAction withSelectorId(String selectorId) {
        this.selectorId = selectorId;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ContinuousAction withName(String name) {
        super.withName(name);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (duration() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property duration in model ContinuousAction"));
        }
        if (parameters() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property parameters in model ContinuousAction"));
        } else {
            parameters().forEach(e -> e.validate());
        }
        if (selectorId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property selectorId in model ContinuousAction"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ContinuousAction.class);
}
