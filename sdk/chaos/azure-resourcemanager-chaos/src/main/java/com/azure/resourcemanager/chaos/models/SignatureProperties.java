// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.chaos.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Defines the attributes of the function signature. */
@Fluent
public final class SignatureProperties {
    /*
     * Namespace in which the function is defined
     */
    @JsonProperty(value = "functionNamespace", required = true)
    private String functionNamespace;

    /*
     * ClassName in which the function is defined
     */
    @JsonProperty(value = "type", required = true)
    private String type;

    /*
     * Name of a function
     */
    @JsonProperty(value = "name", required = true)
    private String name;

    /*
     * Types defined if Class is a generic class
     */
    @JsonProperty(value = "genericTypes")
    private List<String> genericTypes;

    /*
     * Number of types defined in a generic
     */
    @JsonProperty(value = "genericCount")
    private Integer genericCount;

    /*
     * List of arguments of a function
     */
    @JsonProperty(value = "arguments")
    private List<FunctionArguments> arguments;

    /*
     * The archive property.
     */
    @JsonProperty(value = "archive")
    private SignaturePropertiesArchive archive;

    /** Creates an instance of SignatureProperties class. */
    public SignatureProperties() {
    }

    /**
     * Get the functionNamespace property: Namespace in which the function is defined.
     *
     * @return the functionNamespace value.
     */
    public String functionNamespace() {
        return this.functionNamespace;
    }

    /**
     * Set the functionNamespace property: Namespace in which the function is defined.
     *
     * @param functionNamespace the functionNamespace value to set.
     * @return the SignatureProperties object itself.
     */
    public SignatureProperties withFunctionNamespace(String functionNamespace) {
        this.functionNamespace = functionNamespace;
        return this;
    }

    /**
     * Get the type property: ClassName in which the function is defined.
     *
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Set the type property: ClassName in which the function is defined.
     *
     * @param type the type value to set.
     * @return the SignatureProperties object itself.
     */
    public SignatureProperties withType(String type) {
        this.type = type;
        return this;
    }

    /**
     * Get the name property: Name of a function.
     *
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Name of a function.
     *
     * @param name the name value to set.
     * @return the SignatureProperties object itself.
     */
    public SignatureProperties withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the genericTypes property: Types defined if Class is a generic class.
     *
     * @return the genericTypes value.
     */
    public List<String> genericTypes() {
        return this.genericTypes;
    }

    /**
     * Set the genericTypes property: Types defined if Class is a generic class.
     *
     * @param genericTypes the genericTypes value to set.
     * @return the SignatureProperties object itself.
     */
    public SignatureProperties withGenericTypes(List<String> genericTypes) {
        this.genericTypes = genericTypes;
        return this;
    }

    /**
     * Get the genericCount property: Number of types defined in a generic.
     *
     * @return the genericCount value.
     */
    public Integer genericCount() {
        return this.genericCount;
    }

    /**
     * Set the genericCount property: Number of types defined in a generic.
     *
     * @param genericCount the genericCount value to set.
     * @return the SignatureProperties object itself.
     */
    public SignatureProperties withGenericCount(Integer genericCount) {
        this.genericCount = genericCount;
        return this;
    }

    /**
     * Get the arguments property: List of arguments of a function.
     *
     * @return the arguments value.
     */
    public List<FunctionArguments> arguments() {
        return this.arguments;
    }

    /**
     * Set the arguments property: List of arguments of a function.
     *
     * @param arguments the arguments value to set.
     * @return the SignatureProperties object itself.
     */
    public SignatureProperties withArguments(List<FunctionArguments> arguments) {
        this.arguments = arguments;
        return this;
    }

    /**
     * Get the archive property: The archive property.
     *
     * @return the archive value.
     */
    public SignaturePropertiesArchive archive() {
        return this.archive;
    }

    /**
     * Set the archive property: The archive property.
     *
     * @param archive the archive value to set.
     * @return the SignatureProperties object itself.
     */
    public SignatureProperties withArchive(SignaturePropertiesArchive archive) {
        this.archive = archive;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (functionNamespace() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property functionNamespace in model SignatureProperties"));
        }
        if (type() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property type in model SignatureProperties"));
        }
        if (name() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property name in model SignatureProperties"));
        }
        if (arguments() != null) {
            arguments().forEach(e -> e.validate());
        }
        if (archive() != null) {
            archive().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(SignatureProperties.class);
}
