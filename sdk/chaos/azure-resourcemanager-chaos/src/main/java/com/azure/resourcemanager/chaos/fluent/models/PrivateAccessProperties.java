// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.chaos.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.chaos.models.ProvisioningState;
import com.azure.resourcemanager.chaos.models.PublicNetworkAccessOption;
import java.io.IOException;
import java.util.List;

/**
 * The properties of a private access resource.
 */
@Fluent
public final class PrivateAccessProperties implements JsonSerializable<PrivateAccessProperties> {
    /*
     * Most recent provisioning state for the given privateAccess resource.
     */
    private ProvisioningState provisioningState;

    /*
     * A readonly collection of private endpoint connection. Currently only one endpoint connection is supported.
     */
    private List<PrivateEndpointConnectionInner> privateEndpointConnections;

    /*
     * Public Network Access Control for PrivateAccess resource.
     */
    private PublicNetworkAccessOption publicNetworkAccess;

    /**
     * Creates an instance of PrivateAccessProperties class.
     */
    public PrivateAccessProperties() {
    }

    /**
     * Get the provisioningState property: Most recent provisioning state for the given privateAccess resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the privateEndpointConnections property: A readonly collection of private endpoint connection. Currently only
     * one endpoint connection is supported.
     * 
     * @return the privateEndpointConnections value.
     */
    public List<PrivateEndpointConnectionInner> privateEndpointConnections() {
        return this.privateEndpointConnections;
    }

    /**
     * Get the publicNetworkAccess property: Public Network Access Control for PrivateAccess resource.
     * 
     * @return the publicNetworkAccess value.
     */
    public PublicNetworkAccessOption publicNetworkAccess() {
        return this.publicNetworkAccess;
    }

    /**
     * Set the publicNetworkAccess property: Public Network Access Control for PrivateAccess resource.
     * 
     * @param publicNetworkAccess the publicNetworkAccess value to set.
     * @return the PrivateAccessProperties object itself.
     */
    public PrivateAccessProperties withPublicNetworkAccess(PublicNetworkAccessOption publicNetworkAccess) {
        this.publicNetworkAccess = publicNetworkAccess;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (privateEndpointConnections() != null) {
            privateEndpointConnections().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("publicNetworkAccess",
            this.publicNetworkAccess == null ? null : this.publicNetworkAccess.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PrivateAccessProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PrivateAccessProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the PrivateAccessProperties.
     */
    public static PrivateAccessProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PrivateAccessProperties deserializedPrivateAccessProperties = new PrivateAccessProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedPrivateAccessProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("privateEndpointConnections".equals(fieldName)) {
                    List<PrivateEndpointConnectionInner> privateEndpointConnections
                        = reader.readArray(reader1 -> PrivateEndpointConnectionInner.fromJson(reader1));
                    deserializedPrivateAccessProperties.privateEndpointConnections = privateEndpointConnections;
                } else if ("publicNetworkAccess".equals(fieldName)) {
                    deserializedPrivateAccessProperties.publicNetworkAccess
                        = PublicNetworkAccessOption.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPrivateAccessProperties;
        });
    }
}
