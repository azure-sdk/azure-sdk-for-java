// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.chaos.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.chaos.models.Metadata;
import com.azure.resourcemanager.chaos.models.PlatformProperties;
import com.azure.resourcemanager.chaos.models.ProvisioningState;
import com.azure.resourcemanager.chaos.models.UserAssignedManagedIdentityProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** The properties of an application resource. */
@Fluent
public final class ApplicationProperties {
    /*
     * list of User assigned managed identities used by application
     */
    @JsonProperty(value = "identities", required = true)
    private List<UserAssignedManagedIdentityProperties> identities;

    /*
     * Platform on which application will be deployed
     */
    @JsonProperty(value = "deployedPlatform")
    private PlatformProperties deployedPlatform;

    /*
     * Chaos Studio profile id of an application resource.
     */
    @JsonProperty(value = "profileId")
    private String profileId;

    /*
     * List of fault metadata of an application resource
     */
    @JsonProperty(value = "faultMetadata")
    private List<Metadata> faultMetadata;

    /*
     * The status of the last operation.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /** Creates an instance of ApplicationProperties class. */
    public ApplicationProperties() {
    }

    /**
     * Get the identities property: list of User assigned managed identities used by application.
     *
     * @return the identities value.
     */
    public List<UserAssignedManagedIdentityProperties> identities() {
        return this.identities;
    }

    /**
     * Set the identities property: list of User assigned managed identities used by application.
     *
     * @param identities the identities value to set.
     * @return the ApplicationProperties object itself.
     */
    public ApplicationProperties withIdentities(List<UserAssignedManagedIdentityProperties> identities) {
        this.identities = identities;
        return this;
    }

    /**
     * Get the deployedPlatform property: Platform on which application will be deployed.
     *
     * @return the deployedPlatform value.
     */
    public PlatformProperties deployedPlatform() {
        return this.deployedPlatform;
    }

    /**
     * Set the deployedPlatform property: Platform on which application will be deployed.
     *
     * @param deployedPlatform the deployedPlatform value to set.
     * @return the ApplicationProperties object itself.
     */
    public ApplicationProperties withDeployedPlatform(PlatformProperties deployedPlatform) {
        this.deployedPlatform = deployedPlatform;
        return this;
    }

    /**
     * Get the profileId property: Chaos Studio profile id of an application resource.
     *
     * @return the profileId value.
     */
    public String profileId() {
        return this.profileId;
    }

    /**
     * Set the profileId property: Chaos Studio profile id of an application resource.
     *
     * @param profileId the profileId value to set.
     * @return the ApplicationProperties object itself.
     */
    public ApplicationProperties withProfileId(String profileId) {
        this.profileId = profileId;
        return this;
    }

    /**
     * Get the faultMetadata property: List of fault metadata of an application resource.
     *
     * @return the faultMetadata value.
     */
    public List<Metadata> faultMetadata() {
        return this.faultMetadata;
    }

    /**
     * Set the faultMetadata property: List of fault metadata of an application resource.
     *
     * @param faultMetadata the faultMetadata value to set.
     * @return the ApplicationProperties object itself.
     */
    public ApplicationProperties withFaultMetadata(List<Metadata> faultMetadata) {
        this.faultMetadata = faultMetadata;
        return this;
    }

    /**
     * Get the provisioningState property: The status of the last operation.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (identities() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property identities in model ApplicationProperties"));
        } else {
            identities().forEach(e -> e.validate());
        }
        if (deployedPlatform() != null) {
            deployedPlatform().validate();
        }
        if (faultMetadata() != null) {
            faultMetadata().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ApplicationProperties.class);
}
