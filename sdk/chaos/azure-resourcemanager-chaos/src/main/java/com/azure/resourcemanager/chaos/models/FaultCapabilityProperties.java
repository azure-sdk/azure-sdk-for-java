// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.chaos.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Capabilities supported by the faults. */
@Fluent
public final class FaultCapabilityProperties {
    /*
     * URN for fault capability
     */
    @JsonProperty(value = "faultUrn")
    private String faultUrn;

    /*
     * Input Parameters supported by a fault
     */
    @JsonProperty(value = "parameters")
    private List<FaultParameter> parameters;

    /** Creates an instance of FaultCapabilityProperties class. */
    public FaultCapabilityProperties() {
    }

    /**
     * Get the faultUrn property: URN for fault capability.
     *
     * @return the faultUrn value.
     */
    public String faultUrn() {
        return this.faultUrn;
    }

    /**
     * Set the faultUrn property: URN for fault capability.
     *
     * @param faultUrn the faultUrn value to set.
     * @return the FaultCapabilityProperties object itself.
     */
    public FaultCapabilityProperties withFaultUrn(String faultUrn) {
        this.faultUrn = faultUrn;
        return this;
    }

    /**
     * Get the parameters property: Input Parameters supported by a fault.
     *
     * @return the parameters value.
     */
    public List<FaultParameter> parameters() {
        return this.parameters;
    }

    /**
     * Set the parameters property: Input Parameters supported by a fault.
     *
     * @param parameters the parameters value to set.
     * @return the FaultCapabilityProperties object itself.
     */
    public FaultCapabilityProperties withParameters(List<FaultParameter> parameters) {
        this.parameters = parameters;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (parameters() != null) {
            parameters().forEach(e -> e.validate());
        }
    }
}
