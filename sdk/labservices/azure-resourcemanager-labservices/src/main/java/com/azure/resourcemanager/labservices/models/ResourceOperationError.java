// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.labservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Error details of the latest operation failure on this resource.
 */
@Fluent
public final class ResourceOperationError implements JsonSerializable<ResourceOperationError> {
    /*
     * The datetime of when the error occured
     */
    private OffsetDateTime timestamp;

    /*
     * The code that corresponds to the type of operation failure
     */
    private String code;

    /*
     * The operation failure message
     */
    private String message;

    /*
     * The operation action that failed
     */
    private String action;

    /**
     * Creates an instance of ResourceOperationError class.
     */
    public ResourceOperationError() {
    }

    /**
     * Get the timestamp property: The datetime of when the error occured.
     * 
     * @return the timestamp value.
     */
    public OffsetDateTime timestamp() {
        return this.timestamp;
    }

    /**
     * Set the timestamp property: The datetime of when the error occured.
     * 
     * @param timestamp the timestamp value to set.
     * @return the ResourceOperationError object itself.
     */
    public ResourceOperationError withTimestamp(OffsetDateTime timestamp) {
        this.timestamp = timestamp;
        return this;
    }

    /**
     * Get the code property: The code that corresponds to the type of operation failure.
     * 
     * @return the code value.
     */
    public String code() {
        return this.code;
    }

    /**
     * Set the code property: The code that corresponds to the type of operation failure.
     * 
     * @param code the code value to set.
     * @return the ResourceOperationError object itself.
     */
    public ResourceOperationError withCode(String code) {
        this.code = code;
        return this;
    }

    /**
     * Get the message property: The operation failure message.
     * 
     * @return the message value.
     */
    public String message() {
        return this.message;
    }

    /**
     * Set the message property: The operation failure message.
     * 
     * @param message the message value to set.
     * @return the ResourceOperationError object itself.
     */
    public ResourceOperationError withMessage(String message) {
        this.message = message;
        return this;
    }

    /**
     * Get the action property: The operation action that failed.
     * 
     * @return the action value.
     */
    public String action() {
        return this.action;
    }

    /**
     * Set the action property: The operation action that failed.
     * 
     * @param action the action value to set.
     * @return the ResourceOperationError object itself.
     */
    public ResourceOperationError withAction(String action) {
        this.action = action;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("timestamp",
            this.timestamp == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.timestamp));
        jsonWriter.writeStringField("code", this.code);
        jsonWriter.writeStringField("message", this.message);
        jsonWriter.writeStringField("action", this.action);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResourceOperationError from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResourceOperationError if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ResourceOperationError.
     */
    public static ResourceOperationError fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ResourceOperationError deserializedResourceOperationError = new ResourceOperationError();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("timestamp".equals(fieldName)) {
                    deserializedResourceOperationError.timestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("code".equals(fieldName)) {
                    deserializedResourceOperationError.code = reader.getString();
                } else if ("message".equals(fieldName)) {
                    deserializedResourceOperationError.message = reader.getString();
                } else if ("action".equals(fieldName)) {
                    deserializedResourceOperationError.action = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedResourceOperationError;
        });
    }
}
