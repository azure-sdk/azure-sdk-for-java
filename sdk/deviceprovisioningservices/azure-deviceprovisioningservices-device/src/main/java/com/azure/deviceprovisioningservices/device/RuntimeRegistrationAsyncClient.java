// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.deviceprovisioningservices.device;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.polling.PollerFlux;
import com.azure.deviceprovisioningservices.device.implementation.RuntimeRegistrationsImpl;
import reactor.core.publisher.Mono;

/** Initializes a new instance of the asynchronous ProvisioningDeviceClient type. */
@ServiceClient(builder = RuntimeRegistrationClientBuilder.class, isAsync = true)
public final class RuntimeRegistrationAsyncClient {
    @Generated private final RuntimeRegistrationsImpl serviceClient;

    /**
     * Initializes an instance of RuntimeRegistrationAsyncClient class.
     *
     * @param serviceClient the service client implementation.
     */
    @Generated
    RuntimeRegistrationAsyncClient(RuntimeRegistrationsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Gets the registration operation status.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     operationId: String
     *     status: String(unassigned/assigning/assigned/failed/disabled)
     *     registrationState: {
     *         tpm: {
     *             authenticationKey: String
     *         }
     *         x509: {
     *             certificateInfo: {
     *                 subjectName: String
     *                 sha1Thumbprint: String
     *                 sha256Thumbprint: String
     *                 issuerName: String
     *                 notBeforeUtc: String
     *                 notAfterUtc: String
     *                 serialNumber: String
     *                 version: int
     *             }
     *             enrollmentGroupId: String
     *             signingCertificateInfo: (recursive schema, see signingCertificateInfo above)
     *         }
     *         symmetricKey: {
     *             enrollmentGroupId: String
     *         }
     *         registrationId: String
     *         createdDateTimeUtc: String
     *         assignedHub: String
     *         deviceId: String
     *         status: String(unassigned/assigning/assigned/failed/disabled)
     *         substatus: String(initialAssignment/deviceDataMigrated/deviceDataReset/reprovisionedToInitialAssignment)
     *         errorCode: Integer
     *         errorMessage: String
     *         lastUpdatedDateTimeUtc: String
     *         etag: String
     *         payload: Object
     *         trustBundle: {
     *             certificates: [
     *                 {
     *                     certificate: String
     *                     metadata: {
     *                         subjectName: String
     *                         sha1Thumbprint: String
     *                         sha256Thumbprint: String
     *                         issuerName: String
     *                         notBeforeUtc: String
     *                         notAfterUtc: String
     *                         serialNumber: String
     *                         version: Integer
     *                     }
     *                 }
     *             ]
     *             id: String
     *             createdDateTime: String
     *             lastModifiedDateTime: String
     *             etag: String
     *         }
     *         issuedClientCertificate: String
     *         deviceCertificateIssuanceSettings: {
     *             certificateIssuanceEndpoint: String
     *             certificateType: String(none/serverCertificate)
     *         }
     *         deviceHostname: String
     *         deviceIpAddress: String
     *     }
     * }
     * }</pre>
     *
     * @param idScope The service assigned ID scope.
     * @param registrationId Registration ID.
     * @param operationId Operation ID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the registration operation status along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> operationStatusLookupWithResponse(
            String idScope, String registrationId, String operationId, RequestOptions requestOptions) {
        return this.serviceClient.operationStatusLookupWithResponseAsync(
                idScope, registrationId, operationId, requestOptions);
    }

    /**
     * Gets the registration operation status.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     operationId: String
     *     status: String(unassigned/assigning/assigned/failed/disabled)
     *     registrationState: {
     *         tpm: {
     *             authenticationKey: String
     *         }
     *         x509: {
     *             certificateInfo: {
     *                 subjectName: String
     *                 sha1Thumbprint: String
     *                 sha256Thumbprint: String
     *                 issuerName: String
     *                 notBeforeUtc: String
     *                 notAfterUtc: String
     *                 serialNumber: String
     *                 version: int
     *             }
     *             enrollmentGroupId: String
     *             signingCertificateInfo: (recursive schema, see signingCertificateInfo above)
     *         }
     *         symmetricKey: {
     *             enrollmentGroupId: String
     *         }
     *         registrationId: String
     *         createdDateTimeUtc: String
     *         assignedHub: String
     *         deviceId: String
     *         status: String(unassigned/assigning/assigned/failed/disabled)
     *         substatus: String(initialAssignment/deviceDataMigrated/deviceDataReset/reprovisionedToInitialAssignment)
     *         errorCode: Integer
     *         errorMessage: String
     *         lastUpdatedDateTimeUtc: String
     *         etag: String
     *         payload: Object
     *         trustBundle: {
     *             certificates: [
     *                 {
     *                     certificate: String
     *                     metadata: {
     *                         subjectName: String
     *                         sha1Thumbprint: String
     *                         sha256Thumbprint: String
     *                         issuerName: String
     *                         notBeforeUtc: String
     *                         notAfterUtc: String
     *                         serialNumber: String
     *                         version: Integer
     *                     }
     *                 }
     *             ]
     *             id: String
     *             createdDateTime: String
     *             lastModifiedDateTime: String
     *             etag: String
     *         }
     *         issuedClientCertificate: String
     *         deviceCertificateIssuanceSettings: {
     *             certificateIssuanceEndpoint: String
     *             certificateType: String(none/serverCertificate)
     *         }
     *         deviceHostname: String
     *         deviceIpAddress: String
     *     }
     * }
     * }</pre>
     *
     * @param idScope The service assigned ID scope.
     * @param registrationId Registration ID.
     * @param operationId Operation ID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of the registration operation status.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, BinaryData> beginOperationStatusLookup(
            String idScope, String registrationId, String operationId, RequestOptions requestOptions) {
        return this.serviceClient.beginOperationStatusLookupAsync(idScope, registrationId, operationId, requestOptions);
    }

    /**
     * Gets the device registration status.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     registrationId: String
     *     tpm: {
     *         endorsementKey: String
     *         storageRootKey: String
     *     }
     *     payload: Object
     *     clientCertificateCsr: String
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     tpm: {
     *         authenticationKey: String
     *     }
     *     x509: {
     *         certificateInfo: {
     *             subjectName: String
     *             sha1Thumbprint: String
     *             sha256Thumbprint: String
     *             issuerName: String
     *             notBeforeUtc: String
     *             notAfterUtc: String
     *             serialNumber: String
     *             version: int
     *         }
     *         enrollmentGroupId: String
     *         signingCertificateInfo: (recursive schema, see signingCertificateInfo above)
     *     }
     *     symmetricKey: {
     *         enrollmentGroupId: String
     *     }
     *     registrationId: String
     *     createdDateTimeUtc: String
     *     assignedHub: String
     *     deviceId: String
     *     status: String(unassigned/assigning/assigned/failed/disabled)
     *     substatus: String(initialAssignment/deviceDataMigrated/deviceDataReset/reprovisionedToInitialAssignment)
     *     errorCode: Integer
     *     errorMessage: String
     *     lastUpdatedDateTimeUtc: String
     *     etag: String
     *     payload: Object
     *     trustBundle: {
     *         certificates: [
     *             {
     *                 certificate: String
     *                 metadata: {
     *                     subjectName: String
     *                     sha1Thumbprint: String
     *                     sha256Thumbprint: String
     *                     issuerName: String
     *                     notBeforeUtc: String
     *                     notAfterUtc: String
     *                     serialNumber: String
     *                     version: Integer
     *                 }
     *             }
     *         ]
     *         id: String
     *         createdDateTime: String
     *         lastModifiedDateTime: String
     *         etag: String
     *     }
     *     issuedClientCertificate: String
     *     deviceCertificateIssuanceSettings: {
     *         certificateIssuanceEndpoint: String
     *         certificateType: String(none/serverCertificate)
     *     }
     *     deviceHostname: String
     *     deviceIpAddress: String
     * }
     * }</pre>
     *
     * @param idScope The service assigned ID scope.
     * @param registrationId Registration ID.
     * @param deviceRegistration Device registration.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the device registration status along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> deviceRegistrationStatusLookupWithResponse(
            String idScope, String registrationId, BinaryData deviceRegistration, RequestOptions requestOptions) {
        return this.serviceClient.deviceRegistrationStatusLookupWithResponseAsync(
                idScope, registrationId, deviceRegistration, requestOptions);
    }

    /**
     * Registers the devices.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     registrationId: String
     *     tpm: {
     *         endorsementKey: String
     *         storageRootKey: String
     *     }
     *     payload: Object
     *     clientCertificateCsr: String
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     operationId: String
     *     status: String(unassigned/assigning/assigned/failed/disabled)
     *     registrationState: {
     *         tpm: {
     *             authenticationKey: String
     *         }
     *         x509: {
     *             certificateInfo: {
     *                 subjectName: String
     *                 sha1Thumbprint: String
     *                 sha256Thumbprint: String
     *                 issuerName: String
     *                 notBeforeUtc: String
     *                 notAfterUtc: String
     *                 serialNumber: String
     *                 version: int
     *             }
     *             enrollmentGroupId: String
     *             signingCertificateInfo: (recursive schema, see signingCertificateInfo above)
     *         }
     *         symmetricKey: {
     *             enrollmentGroupId: String
     *         }
     *         registrationId: String
     *         createdDateTimeUtc: String
     *         assignedHub: String
     *         deviceId: String
     *         status: String(unassigned/assigning/assigned/failed/disabled)
     *         substatus: String(initialAssignment/deviceDataMigrated/deviceDataReset/reprovisionedToInitialAssignment)
     *         errorCode: Integer
     *         errorMessage: String
     *         lastUpdatedDateTimeUtc: String
     *         etag: String
     *         payload: Object
     *         trustBundle: {
     *             certificates: [
     *                 {
     *                     certificate: String
     *                     metadata: {
     *                         subjectName: String
     *                         sha1Thumbprint: String
     *                         sha256Thumbprint: String
     *                         issuerName: String
     *                         notBeforeUtc: String
     *                         notAfterUtc: String
     *                         serialNumber: String
     *                         version: Integer
     *                     }
     *                 }
     *             ]
     *             id: String
     *             createdDateTime: String
     *             lastModifiedDateTime: String
     *             etag: String
     *         }
     *         issuedClientCertificate: String
     *         deviceCertificateIssuanceSettings: {
     *             certificateIssuanceEndpoint: String
     *             certificateType: String(none/serverCertificate)
     *         }
     *         deviceHostname: String
     *         deviceIpAddress: String
     *     }
     * }
     * }</pre>
     *
     * @param idScope The service assigned ID scope.
     * @param registrationId The registration ID is alphanumeric, lowercase, and may contain hyphens.
     * @param deviceRegistration Device registration request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return registration operation status along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> registerDeviceWithResponse(
            String idScope, String registrationId, BinaryData deviceRegistration, RequestOptions requestOptions) {
        return this.serviceClient.registerDeviceWithResponseAsync(
                idScope, registrationId, deviceRegistration, requestOptions);
    }

    /**
     * Registers the devices.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     registrationId: String
     *     tpm: {
     *         endorsementKey: String
     *         storageRootKey: String
     *     }
     *     payload: Object
     *     clientCertificateCsr: String
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     operationId: String
     *     status: String(unassigned/assigning/assigned/failed/disabled)
     *     registrationState: {
     *         tpm: {
     *             authenticationKey: String
     *         }
     *         x509: {
     *             certificateInfo: {
     *                 subjectName: String
     *                 sha1Thumbprint: String
     *                 sha256Thumbprint: String
     *                 issuerName: String
     *                 notBeforeUtc: String
     *                 notAfterUtc: String
     *                 serialNumber: String
     *                 version: int
     *             }
     *             enrollmentGroupId: String
     *             signingCertificateInfo: (recursive schema, see signingCertificateInfo above)
     *         }
     *         symmetricKey: {
     *             enrollmentGroupId: String
     *         }
     *         registrationId: String
     *         createdDateTimeUtc: String
     *         assignedHub: String
     *         deviceId: String
     *         status: String(unassigned/assigning/assigned/failed/disabled)
     *         substatus: String(initialAssignment/deviceDataMigrated/deviceDataReset/reprovisionedToInitialAssignment)
     *         errorCode: Integer
     *         errorMessage: String
     *         lastUpdatedDateTimeUtc: String
     *         etag: String
     *         payload: Object
     *         trustBundle: {
     *             certificates: [
     *                 {
     *                     certificate: String
     *                     metadata: {
     *                         subjectName: String
     *                         sha1Thumbprint: String
     *                         sha256Thumbprint: String
     *                         issuerName: String
     *                         notBeforeUtc: String
     *                         notAfterUtc: String
     *                         serialNumber: String
     *                         version: Integer
     *                     }
     *                 }
     *             ]
     *             id: String
     *             createdDateTime: String
     *             lastModifiedDateTime: String
     *             etag: String
     *         }
     *         issuedClientCertificate: String
     *         deviceCertificateIssuanceSettings: {
     *             certificateIssuanceEndpoint: String
     *             certificateType: String(none/serverCertificate)
     *         }
     *         deviceHostname: String
     *         deviceIpAddress: String
     *     }
     * }
     * }</pre>
     *
     * @param idScope The service assigned ID scope.
     * @param registrationId The registration ID is alphanumeric, lowercase, and may contain hyphens.
     * @param deviceRegistration Device registration request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of registration operation status.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, BinaryData> beginRegisterDevice(
            String idScope, String registrationId, BinaryData deviceRegistration, RequestOptions requestOptions) {
        return this.serviceClient.beginRegisterDeviceAsync(idScope, registrationId, deviceRegistration, requestOptions);
    }
}
