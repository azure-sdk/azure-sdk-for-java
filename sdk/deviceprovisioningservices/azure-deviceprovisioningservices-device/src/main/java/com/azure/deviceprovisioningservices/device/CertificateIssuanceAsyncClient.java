// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.deviceprovisioningservices.device;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.polling.PollerFlux;
import com.azure.deviceprovisioningservices.device.implementation.CertificateIssuancesImpl;
import reactor.core.publisher.Mono;

/** Initializes a new instance of the asynchronous ProvisioningDeviceClient type. */
@ServiceClient(builder = CertificateIssuanceClientBuilder.class, isAsync = true)
public final class CertificateIssuanceAsyncClient {
    @Generated private final CertificateIssuancesImpl serviceClient;

    /**
     * Initializes an instance of CertificateIssuanceAsyncClient class.
     *
     * @param serviceClient the service client implementation.
     */
    @Generated
    CertificateIssuanceAsyncClient(CertificateIssuancesImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Obtains the issued certificate.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     issuedCertificate: String
     *     certificateChain: [
     *         String
     *     ]
     * }
     * }</pre>
     *
     * @param idScope The service assigned ID scope.
     * @param registrationId The device registration ID. A case-insensitive string (up to 128 characters long) of
     *     alphanumeric characters plus certain special characters : . _ -. No special characters allowed at start or
     *     end.
     * @param certificateId Certificate ID. A case-insensitive string (up to 128 characters long) of alphanumeric
     *     characters plus certain special characters : . _ -. No special characters allowed at start or end.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getWithResponse(
            String idScope, String registrationId, String certificateId, RequestOptions requestOptions) {
        return this.serviceClient.getWithResponseAsync(idScope, registrationId, certificateId, requestOptions);
    }

    /**
     * API to issue certificates for IoT devices.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     certificateType: String(none/serverCertificate)
     *     csr: String
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     operationId: String
     *     deviceOperationStatus: String(unknown/notStarted/running/failed/succeeded)
     *     createdDateTimeUtc: String
     *     lastActionDateTimeUtc: String
     *     resourceLocation: String
     * }
     * }</pre>
     *
     * @param idScope The service assigned ID scope.
     * @param registrationId The device registration ID. A case-insensitive string (up to 128 characters long) of
     *     alphanumeric characters plus certain special characters : . _ -. No special characters allowed at start or
     *     end.
     * @param request Certificate signing request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> issueCertificateWithResponse(
            String idScope, String registrationId, BinaryData request, RequestOptions requestOptions) {
        return this.serviceClient.issueCertificateWithResponseAsync(idScope, registrationId, request, requestOptions);
    }

    /**
     * API to issue certificates for IoT devices.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     certificateType: String(none/serverCertificate)
     *     csr: String
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     operationId: String
     *     deviceOperationStatus: String(unknown/notStarted/running/failed/succeeded)
     *     createdDateTimeUtc: String
     *     lastActionDateTimeUtc: String
     *     resourceLocation: String
     * }
     * }</pre>
     *
     * @param idScope The service assigned ID scope.
     * @param registrationId The device registration ID. A case-insensitive string (up to 128 characters long) of
     *     alphanumeric characters plus certain special characters : . _ -. No special characters allowed at start or
     *     end.
     * @param request Certificate signing request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, BinaryData> beginIssueCertificate(
            String idScope, String registrationId, BinaryData request, RequestOptions requestOptions) {
        return this.serviceClient.beginIssueCertificateAsync(idScope, registrationId, request, requestOptions);
    }
}
