// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.deviceprovisioningservices.device.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.DefaultPollingStrategy;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.core.util.serializer.TypeReference;
import java.time.Duration;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in Devices. */
public final class DevicesImpl {
    /** The proxy service used to perform REST calls. */
    private final DevicesService service;

    /** The service client containing this operation class. */
    private final ProvisioningDeviceClientImpl client;

    /**
     * Initializes an instance of DevicesImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    DevicesImpl(ProvisioningDeviceClientImpl client) {
        this.service = RestProxy.create(DevicesService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for ProvisioningDeviceClientDevices to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "ProvisioningDeviceCl")
    private interface DevicesService {
        @Get("/{idScope}/devices/{registrationId}/operations/{operationId}")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> operationStatusLookup(
                @HostParam("$host") String host,
                @PathParam("idScope") String idScope,
                @PathParam("registrationId") String registrationId,
                @PathParam("operationId") String operationId,
                @QueryParam("api-version") String apiVersion,
                RequestOptions requestOptions,
                Context context);
    }

    /**
     * Obtains the device operation status.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     operationId: String
     *     deviceOperationStatus: String(unknown/notStarted/running/failed/succeeded)
     *     createdDateTimeUtc: String
     *     lastActionDateTimeUtc: String
     *     resourceLocation: String
     * }
     * }</pre>
     *
     * @param idScope The service assigned ID scope.
     * @param registrationId The device registration ID. A case-insensitive string (up to 128 characters long) of
     *     alphanumeric characters plus certain special characters : . _ -. No special characters allowed at start or
     *     end.
     * @param operationId Operation ID. A case-insensitive string (up to 128 characters long) of alphanumeric characters
     *     plus certain special characters : . _ -. No special characters allowed at start or end.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> operationStatusLookupWithResponseAsync(
            String idScope, String registrationId, String operationId, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context ->
                        service.operationStatusLookup(
                                this.client.getHost(),
                                idScope,
                                registrationId,
                                operationId,
                                this.client.getServiceVersion().getVersion(),
                                requestOptions,
                                context));
    }

    /**
     * Obtains the device operation status.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     operationId: String
     *     deviceOperationStatus: String(unknown/notStarted/running/failed/succeeded)
     *     createdDateTimeUtc: String
     *     lastActionDateTimeUtc: String
     *     resourceLocation: String
     * }
     * }</pre>
     *
     * @param idScope The service assigned ID scope.
     * @param registrationId The device registration ID. A case-insensitive string (up to 128 characters long) of
     *     alphanumeric characters plus certain special characters : . _ -. No special characters allowed at start or
     *     end.
     * @param operationId Operation ID. A case-insensitive string (up to 128 characters long) of alphanumeric characters
     *     plus certain special characters : . _ -. No special characters allowed at start or end.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> operationStatusLookupWithResponseAsync(
            String idScope, String registrationId, String operationId, RequestOptions requestOptions, Context context) {
        return service.operationStatusLookup(
                this.client.getHost(),
                idScope,
                registrationId,
                operationId,
                this.client.getServiceVersion().getVersion(),
                requestOptions,
                context);
    }

    /**
     * Obtains the device operation status.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     operationId: String
     *     deviceOperationStatus: String(unknown/notStarted/running/failed/succeeded)
     *     createdDateTimeUtc: String
     *     lastActionDateTimeUtc: String
     *     resourceLocation: String
     * }
     * }</pre>
     *
     * @param idScope The service assigned ID scope.
     * @param registrationId The device registration ID. A case-insensitive string (up to 128 characters long) of
     *     alphanumeric characters plus certain special characters : . _ -. No special characters allowed at start or
     *     end.
     * @param operationId Operation ID. A case-insensitive string (up to 128 characters long) of alphanumeric characters
     *     plus certain special characters : . _ -. No special characters allowed at start or end.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, BinaryData> beginOperationStatusLookupAsync(
            String idScope, String registrationId, String operationId, RequestOptions requestOptions) {
        return PollerFlux.create(
                Duration.ofSeconds(1),
                () -> this.operationStatusLookupWithResponseAsync(idScope, registrationId, operationId, requestOptions),
                new DefaultPollingStrategy<>(
                        this.client.getHttpPipeline(),
                        null,
                        requestOptions != null && requestOptions.getContext() != null
                                ? requestOptions.getContext()
                                : Context.NONE),
                new TypeReferenceBinaryData(),
                new TypeReferenceBinaryData());
    }

    /**
     * Obtains the device operation status.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     operationId: String
     *     deviceOperationStatus: String(unknown/notStarted/running/failed/succeeded)
     *     createdDateTimeUtc: String
     *     lastActionDateTimeUtc: String
     *     resourceLocation: String
     * }
     * }</pre>
     *
     * @param idScope The service assigned ID scope.
     * @param registrationId The device registration ID. A case-insensitive string (up to 128 characters long) of
     *     alphanumeric characters plus certain special characters : . _ -. No special characters allowed at start or
     *     end.
     * @param operationId Operation ID. A case-insensitive string (up to 128 characters long) of alphanumeric characters
     *     plus certain special characters : . _ -. No special characters allowed at start or end.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, BinaryData> beginOperationStatusLookupAsync(
            String idScope, String registrationId, String operationId, RequestOptions requestOptions, Context context) {
        return PollerFlux.create(
                Duration.ofSeconds(1),
                () ->
                        this.operationStatusLookupWithResponseAsync(
                                idScope, registrationId, operationId, requestOptions, context),
                new DefaultPollingStrategy<>(
                        this.client.getHttpPipeline(),
                        null,
                        requestOptions != null && requestOptions.getContext() != null
                                ? requestOptions.getContext()
                                : Context.NONE),
                new TypeReferenceBinaryData(),
                new TypeReferenceBinaryData());
    }

    /**
     * Obtains the device operation status.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     operationId: String
     *     deviceOperationStatus: String(unknown/notStarted/running/failed/succeeded)
     *     createdDateTimeUtc: String
     *     lastActionDateTimeUtc: String
     *     resourceLocation: String
     * }
     * }</pre>
     *
     * @param idScope The service assigned ID scope.
     * @param registrationId The device registration ID. A case-insensitive string (up to 128 characters long) of
     *     alphanumeric characters plus certain special characters : . _ -. No special characters allowed at start or
     *     end.
     * @param operationId Operation ID. A case-insensitive string (up to 128 characters long) of alphanumeric characters
     *     plus certain special characters : . _ -. No special characters allowed at start or end.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginOperationStatusLookup(
            String idScope, String registrationId, String operationId, RequestOptions requestOptions) {
        return this.beginOperationStatusLookupAsync(idScope, registrationId, operationId, requestOptions)
                .getSyncPoller();
    }

    private static final class TypeReferenceBinaryData extends TypeReference<BinaryData> {
        // empty
    }
}
