// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.deviceprovisioningservices.device.generated;

import com.azure.core.http.HttpClient;
import com.azure.core.http.policy.HttpLogDetailLevel;
import com.azure.core.http.policy.HttpLogOptions;
import com.azure.core.test.TestBase;
import com.azure.core.test.TestMode;
import com.azure.core.util.Configuration;
import com.azure.deviceprovisioningservices.device.CertificateIssuanceClient;
import com.azure.deviceprovisioningservices.device.CertificateIssuanceClientBuilder;
import com.azure.deviceprovisioningservices.device.DeviceClient;
import com.azure.deviceprovisioningservices.device.DeviceClientBuilder;
import com.azure.deviceprovisioningservices.device.RuntimeRegistrationClient;
import com.azure.deviceprovisioningservices.device.RuntimeRegistrationClientBuilder;

class ProvisioningDeviceClientTestBase extends TestBase {
    protected CertificateIssuanceClient certificateIssuanceClient;

    protected DeviceClient deviceClient;

    protected RuntimeRegistrationClient runtimeRegistrationClient;

    @Override
    protected void beforeTest() {
        CertificateIssuanceClientBuilder certificateIssuanceClientbuilder =
                new CertificateIssuanceClientBuilder()
                        .host(
                                Configuration.getGlobalConfiguration()
                                        .get("HOST", "https://global.azure-devices-provisioning.net"))
                        .httpClient(HttpClient.createDefault())
                        .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            certificateIssuanceClientbuilder.httpClient(interceptorManager.getPlaybackClient());
        } else if (getTestMode() == TestMode.RECORD) {
            certificateIssuanceClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        certificateIssuanceClient = certificateIssuanceClientbuilder.buildClient();

        DeviceClientBuilder deviceClientbuilder =
                new DeviceClientBuilder()
                        .host(
                                Configuration.getGlobalConfiguration()
                                        .get("HOST", "https://global.azure-devices-provisioning.net"))
                        .httpClient(HttpClient.createDefault())
                        .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            deviceClientbuilder.httpClient(interceptorManager.getPlaybackClient());
        } else if (getTestMode() == TestMode.RECORD) {
            deviceClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        deviceClient = deviceClientbuilder.buildClient();

        RuntimeRegistrationClientBuilder runtimeRegistrationClientbuilder =
                new RuntimeRegistrationClientBuilder()
                        .host(
                                Configuration.getGlobalConfiguration()
                                        .get("HOST", "https://global.azure-devices-provisioning.net"))
                        .httpClient(HttpClient.createDefault())
                        .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            runtimeRegistrationClientbuilder.httpClient(interceptorManager.getPlaybackClient());
        } else if (getTestMode() == TestMode.RECORD) {
            runtimeRegistrationClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        runtimeRegistrationClient = runtimeRegistrationClientbuilder.buildClient();
    }
}
