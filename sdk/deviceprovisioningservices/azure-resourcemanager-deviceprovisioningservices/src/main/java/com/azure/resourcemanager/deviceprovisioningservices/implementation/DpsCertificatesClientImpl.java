// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.deviceprovisioningservices.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.Base64Util;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.deviceprovisioningservices.fluent.DpsCertificatesClient;
import com.azure.resourcemanager.deviceprovisioningservices.fluent.models.CertificateListDescriptionInner;
import com.azure.resourcemanager.deviceprovisioningservices.fluent.models.CertificateResponseInner;
import com.azure.resourcemanager.deviceprovisioningservices.fluent.models.VerificationCodeResponseInner;
import com.azure.resourcemanager.deviceprovisioningservices.models.CertificatePurpose;
import com.azure.resourcemanager.deviceprovisioningservices.models.ErrorDetailsException;
import com.azure.resourcemanager.deviceprovisioningservices.models.VerificationCodeRequest;
import java.time.OffsetDateTime;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in DpsCertificatesClient.
 */
public final class DpsCertificatesClientImpl implements DpsCertificatesClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final DpsCertificatesService service;

    /**
     * The service client containing this operation class.
     */
    private final IotDpsClientImpl client;

    /**
     * Initializes an instance of DpsCertificatesClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    DpsCertificatesClientImpl(IotDpsClientImpl client) {
        this.service
            = RestProxy.create(DpsCertificatesService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for IotDpsClientDpsCertificates to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "IotDpsClientDpsCerti")
    public interface DpsCertificatesService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/certificates")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ErrorDetailsException.class)
        Mono<Response<CertificateListDescriptionInner>> list(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("provisioningServiceName") String provisioningServiceName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/certificates")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ErrorDetailsException.class)
        Response<CertificateListDescriptionInner> listSync(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("provisioningServiceName") String provisioningServiceName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/certificates/{certificateName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ErrorDetailsException.class)
        Mono<Response<CertificateResponseInner>> get(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("provisioningServiceName") String provisioningServiceName,
            @PathParam("certificateName") String certificateName, @HeaderParam("If-Match") String ifMatch,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/certificates/{certificateName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ErrorDetailsException.class)
        Response<CertificateResponseInner> getSync(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("provisioningServiceName") String provisioningServiceName,
            @PathParam("certificateName") String certificateName, @HeaderParam("If-Match") String ifMatch,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/certificates/{certificateName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ErrorDetailsException.class)
        Mono<Response<CertificateResponseInner>> createOrUpdate(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("provisioningServiceName") String provisioningServiceName,
            @PathParam("certificateName") String certificateName, @HeaderParam("If-Match") String ifMatch,
            @BodyParam("application/json") CertificateResponseInner certificateDescription,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/certificates/{certificateName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ErrorDetailsException.class)
        Response<CertificateResponseInner> createOrUpdateSync(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("provisioningServiceName") String provisioningServiceName,
            @PathParam("certificateName") String certificateName, @HeaderParam("If-Match") String ifMatch,
            @BodyParam("application/json") CertificateResponseInner certificateDescription,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/certificates/{certificateName}")
        @ExpectedResponses({ 200, 204 })
        @UnexpectedResponseExceptionType(ErrorDetailsException.class)
        Mono<Response<Void>> delete(@HostParam("$host") String endpoint, @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("provisioningServiceName") String provisioningServiceName,
            @PathParam("certificateName") String certificateName, @HeaderParam("If-Match") String ifMatch,
            @QueryParam("certificate.name") String certificateName1,
            @QueryParam("certificate.rawBytes") String certificateRawBytes,
            @QueryParam("certificate.isVerified") Boolean certificateIsVerified,
            @QueryParam("certificate.purpose") CertificatePurpose certificatePurpose,
            @QueryParam("certificate.created") OffsetDateTime certificateCreated,
            @QueryParam("certificate.lastUpdated") OffsetDateTime certificateLastUpdated,
            @QueryParam("certificate.hasPrivateKey") Boolean certificateHasPrivateKey,
            @QueryParam("certificate.nonce") String certificateNonce, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/certificates/{certificateName}")
        @ExpectedResponses({ 200, 204 })
        @UnexpectedResponseExceptionType(ErrorDetailsException.class)
        Response<Void> deleteSync(@HostParam("$host") String endpoint, @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("provisioningServiceName") String provisioningServiceName,
            @PathParam("certificateName") String certificateName, @HeaderParam("If-Match") String ifMatch,
            @QueryParam("certificate.name") String certificateName1,
            @QueryParam("certificate.rawBytes") String certificateRawBytes,
            @QueryParam("certificate.isVerified") Boolean certificateIsVerified,
            @QueryParam("certificate.purpose") CertificatePurpose certificatePurpose,
            @QueryParam("certificate.created") OffsetDateTime certificateCreated,
            @QueryParam("certificate.lastUpdated") OffsetDateTime certificateLastUpdated,
            @QueryParam("certificate.hasPrivateKey") Boolean certificateHasPrivateKey,
            @QueryParam("certificate.nonce") String certificateNonce, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/certificates/{certificateName}/generateVerificationCode")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ErrorDetailsException.class)
        Mono<Response<VerificationCodeResponseInner>> generateVerificationCode(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("provisioningServiceName") String provisioningServiceName,
            @PathParam("certificateName") String certificateName, @HeaderParam("If-Match") String ifMatch,
            @QueryParam("certificate.name") String certificateName1,
            @QueryParam("certificate.rawBytes") String certificateRawBytes,
            @QueryParam("certificate.isVerified") Boolean certificateIsVerified,
            @QueryParam("certificate.purpose") CertificatePurpose certificatePurpose,
            @QueryParam("certificate.created") OffsetDateTime certificateCreated,
            @QueryParam("certificate.lastUpdated") OffsetDateTime certificateLastUpdated,
            @QueryParam("certificate.hasPrivateKey") Boolean certificateHasPrivateKey,
            @QueryParam("certificate.nonce") String certificateNonce, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/certificates/{certificateName}/generateVerificationCode")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ErrorDetailsException.class)
        Response<VerificationCodeResponseInner> generateVerificationCodeSync(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("provisioningServiceName") String provisioningServiceName,
            @PathParam("certificateName") String certificateName, @HeaderParam("If-Match") String ifMatch,
            @QueryParam("certificate.name") String certificateName1,
            @QueryParam("certificate.rawBytes") String certificateRawBytes,
            @QueryParam("certificate.isVerified") Boolean certificateIsVerified,
            @QueryParam("certificate.purpose") CertificatePurpose certificatePurpose,
            @QueryParam("certificate.created") OffsetDateTime certificateCreated,
            @QueryParam("certificate.lastUpdated") OffsetDateTime certificateLastUpdated,
            @QueryParam("certificate.hasPrivateKey") Boolean certificateHasPrivateKey,
            @QueryParam("certificate.nonce") String certificateNonce, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/certificates/{certificateName}/verify")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ErrorDetailsException.class)
        Mono<Response<CertificateResponseInner>> verifyCertificate(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("provisioningServiceName") String provisioningServiceName,
            @PathParam("certificateName") String certificateName, @HeaderParam("If-Match") String ifMatch,
            @QueryParam("certificate.name") String certificateName1,
            @QueryParam("certificate.rawBytes") String certificateRawBytes,
            @QueryParam("certificate.isVerified") Boolean certificateIsVerified,
            @QueryParam("certificate.purpose") CertificatePurpose certificatePurpose,
            @QueryParam("certificate.created") OffsetDateTime certificateCreated,
            @QueryParam("certificate.lastUpdated") OffsetDateTime certificateLastUpdated,
            @QueryParam("certificate.hasPrivateKey") Boolean certificateHasPrivateKey,
            @QueryParam("certificate.nonce") String certificateNonce,
            @BodyParam("application/json") VerificationCodeRequest request, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/certificates/{certificateName}/verify")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ErrorDetailsException.class)
        Response<CertificateResponseInner> verifyCertificateSync(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("provisioningServiceName") String provisioningServiceName,
            @PathParam("certificateName") String certificateName, @HeaderParam("If-Match") String ifMatch,
            @QueryParam("certificate.name") String certificateName1,
            @QueryParam("certificate.rawBytes") String certificateRawBytes,
            @QueryParam("certificate.isVerified") Boolean certificateIsVerified,
            @QueryParam("certificate.purpose") CertificatePurpose certificatePurpose,
            @QueryParam("certificate.created") OffsetDateTime certificateCreated,
            @QueryParam("certificate.lastUpdated") OffsetDateTime certificateLastUpdated,
            @QueryParam("certificate.hasPrivateKey") Boolean certificateHasPrivateKey,
            @QueryParam("certificate.nonce") String certificateNonce,
            @BodyParam("application/json") VerificationCodeRequest request, @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Get all the certificates tied to the provisioning service.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningServiceName Name of the provisioning service to retrieve.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorDetailsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the certificates tied to the provisioning service along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<CertificateListDescriptionInner>> listWithResponseAsync(String resourceGroupName,
        String provisioningServiceName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (provisioningServiceName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter provisioningServiceName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.list(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, provisioningServiceName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get all the certificates tied to the provisioning service.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningServiceName Name of the provisioning service to retrieve.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorDetailsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the certificates tied to the provisioning service on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<CertificateListDescriptionInner> listAsync(String resourceGroupName, String provisioningServiceName) {
        return listWithResponseAsync(resourceGroupName, provisioningServiceName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get all the certificates tied to the provisioning service.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningServiceName Name of the provisioning service to retrieve.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorDetailsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the certificates tied to the provisioning service along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<CertificateListDescriptionInner> listWithResponse(String resourceGroupName,
        String provisioningServiceName, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (provisioningServiceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter provisioningServiceName is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.listSync(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, provisioningServiceName, accept, context);
    }

    /**
     * Get all the certificates tied to the provisioning service.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningServiceName Name of the provisioning service to retrieve.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorDetailsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the certificates tied to the provisioning service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CertificateListDescriptionInner list(String resourceGroupName, String provisioningServiceName) {
        return listWithResponse(resourceGroupName, provisioningServiceName, Context.NONE).getValue();
    }

    /**
     * Get the certificate from the provisioning service.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningServiceName Name of the provisioning service to retrieve.
     * @param certificateName Name of the certificate to retrieve.
     * @param ifMatch ETag of the certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorDetailsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the certificate from the provisioning service along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<CertificateResponseInner>> getWithResponseAsync(String resourceGroupName,
        String provisioningServiceName, String certificateName, String ifMatch) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (provisioningServiceName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter provisioningServiceName is required and cannot be null."));
        }
        if (certificateName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter certificateName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, provisioningServiceName, certificateName, ifMatch,
                accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the certificate from the provisioning service.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningServiceName Name of the provisioning service to retrieve.
     * @param certificateName Name of the certificate to retrieve.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorDetailsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the certificate from the provisioning service on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<CertificateResponseInner> getAsync(String resourceGroupName, String provisioningServiceName,
        String certificateName) {
        final String ifMatch = null;
        return getWithResponseAsync(resourceGroupName, provisioningServiceName, certificateName, ifMatch)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get the certificate from the provisioning service.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningServiceName Name of the provisioning service to retrieve.
     * @param certificateName Name of the certificate to retrieve.
     * @param ifMatch ETag of the certificate.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorDetailsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the certificate from the provisioning service along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<CertificateResponseInner> getWithResponse(String resourceGroupName, String provisioningServiceName,
        String certificateName, String ifMatch, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (provisioningServiceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter provisioningServiceName is required and cannot be null."));
        }
        if (certificateName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter certificateName is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.getSync(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, provisioningServiceName, certificateName, ifMatch, accept, context);
    }

    /**
     * Get the certificate from the provisioning service.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningServiceName Name of the provisioning service to retrieve.
     * @param certificateName Name of the certificate to retrieve.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorDetailsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the certificate from the provisioning service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CertificateResponseInner get(String resourceGroupName, String provisioningServiceName,
        String certificateName) {
        final String ifMatch = null;
        return getWithResponse(resourceGroupName, provisioningServiceName, certificateName, ifMatch, Context.NONE)
            .getValue();
    }

    /**
     * Add new certificate or update an existing certificate.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningServiceName Name of the provisioning service to retrieve.
     * @param certificateName Name of the certificate to retrieve.
     * @param certificateDescription The certificate body.
     * @param ifMatch ETag of the certificate. This is required to update an existing certificate, and ignored while
     * creating a brand new certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorDetailsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the X509 Certificate along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<CertificateResponseInner>> createOrUpdateWithResponseAsync(String resourceGroupName,
        String provisioningServiceName, String certificateName, CertificateResponseInner certificateDescription,
        String ifMatch) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (provisioningServiceName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter provisioningServiceName is required and cannot be null."));
        }
        if (certificateName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter certificateName is required and cannot be null."));
        }
        if (certificateDescription == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter certificateDescription is required and cannot be null."));
        } else {
            certificateDescription.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.createOrUpdate(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, provisioningServiceName, certificateName, ifMatch,
                certificateDescription, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Add new certificate or update an existing certificate.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningServiceName Name of the provisioning service to retrieve.
     * @param certificateName Name of the certificate to retrieve.
     * @param certificateDescription The certificate body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorDetailsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the X509 Certificate on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<CertificateResponseInner> createOrUpdateAsync(String resourceGroupName, String provisioningServiceName,
        String certificateName, CertificateResponseInner certificateDescription) {
        final String ifMatch = null;
        return createOrUpdateWithResponseAsync(resourceGroupName, provisioningServiceName, certificateName,
            certificateDescription, ifMatch).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Add new certificate or update an existing certificate.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningServiceName Name of the provisioning service to retrieve.
     * @param certificateName Name of the certificate to retrieve.
     * @param certificateDescription The certificate body.
     * @param ifMatch ETag of the certificate. This is required to update an existing certificate, and ignored while
     * creating a brand new certificate.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorDetailsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the X509 Certificate along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<CertificateResponseInner> createOrUpdateWithResponse(String resourceGroupName,
        String provisioningServiceName, String certificateName, CertificateResponseInner certificateDescription,
        String ifMatch, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (provisioningServiceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter provisioningServiceName is required and cannot be null."));
        }
        if (certificateName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter certificateName is required and cannot be null."));
        }
        if (certificateDescription == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter certificateDescription is required and cannot be null."));
        } else {
            certificateDescription.validate();
        }
        final String accept = "application/json";
        return service.createOrUpdateSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, provisioningServiceName, certificateName, ifMatch,
            certificateDescription, accept, context);
    }

    /**
     * Add new certificate or update an existing certificate.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningServiceName Name of the provisioning service to retrieve.
     * @param certificateName Name of the certificate to retrieve.
     * @param certificateDescription The certificate body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorDetailsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the X509 Certificate.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CertificateResponseInner createOrUpdate(String resourceGroupName, String provisioningServiceName,
        String certificateName, CertificateResponseInner certificateDescription) {
        final String ifMatch = null;
        return createOrUpdateWithResponse(resourceGroupName, provisioningServiceName, certificateName,
            certificateDescription, ifMatch, Context.NONE).getValue();
    }

    /**
     * Deletes the specified certificate associated with the Provisioning Service.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningServiceName Name of the provisioning service to retrieve.
     * @param certificateName Name of the certificate to retrieve.
     * @param ifMatch ETag of the certificate.
     * @param certificateName1 This is optional, and it is the Common Name of the certificate.
     * @param certificateRawBytes Raw data within the certificate.
     * @param certificateIsVerified Indicates if certificate has been verified by owner of the private key.
     * @param certificatePurpose A description that mentions the purpose of the certificate.
     * @param certificateCreated Time the certificate is created.
     * @param certificateLastUpdated Time the certificate is last updated.
     * @param certificateHasPrivateKey Indicates if the certificate contains a private key.
     * @param certificateNonce Random number generated to indicate Proof of Possession.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorDetailsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(String resourceGroupName, String provisioningServiceName,
        String certificateName, String ifMatch, String certificateName1, byte[] certificateRawBytes,
        Boolean certificateIsVerified, CertificatePurpose certificatePurpose, OffsetDateTime certificateCreated,
        OffsetDateTime certificateLastUpdated, Boolean certificateHasPrivateKey, String certificateNonce) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (provisioningServiceName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter provisioningServiceName is required and cannot be null."));
        }
        if (certificateName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter certificateName is required and cannot be null."));
        }
        if (ifMatch == null) {
            return Mono.error(new IllegalArgumentException("Parameter ifMatch is required and cannot be null."));
        }
        final String accept = "application/json";
        String certificateRawBytesConverted = Base64Util.encodeToString(certificateRawBytes);
        return FluxUtil.withContext(context -> service.delete(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, provisioningServiceName, certificateName, ifMatch,
            certificateName1, certificateRawBytesConverted, certificateIsVerified, certificatePurpose,
            certificateCreated, certificateLastUpdated, certificateHasPrivateKey, certificateNonce, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Deletes the specified certificate associated with the Provisioning Service.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningServiceName Name of the provisioning service to retrieve.
     * @param certificateName Name of the certificate to retrieve.
     * @param ifMatch ETag of the certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorDetailsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String provisioningServiceName, String certificateName,
        String ifMatch) {
        final String certificateName1 = null;
        final byte[] certificateRawBytes = new byte[0];
        final Boolean certificateIsVerified = null;
        final CertificatePurpose certificatePurpose = null;
        final OffsetDateTime certificateCreated = null;
        final OffsetDateTime certificateLastUpdated = null;
        final Boolean certificateHasPrivateKey = null;
        final String certificateNonce = null;
        return deleteWithResponseAsync(resourceGroupName, provisioningServiceName, certificateName, ifMatch,
            certificateName1, certificateRawBytes, certificateIsVerified, certificatePurpose, certificateCreated,
            certificateLastUpdated, certificateHasPrivateKey, certificateNonce).flatMap(ignored -> Mono.empty());
    }

    /**
     * Deletes the specified certificate associated with the Provisioning Service.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningServiceName Name of the provisioning service to retrieve.
     * @param certificateName Name of the certificate to retrieve.
     * @param ifMatch ETag of the certificate.
     * @param certificateName1 This is optional, and it is the Common Name of the certificate.
     * @param certificateRawBytes Raw data within the certificate.
     * @param certificateIsVerified Indicates if certificate has been verified by owner of the private key.
     * @param certificatePurpose A description that mentions the purpose of the certificate.
     * @param certificateCreated Time the certificate is created.
     * @param certificateLastUpdated Time the certificate is last updated.
     * @param certificateHasPrivateKey Indicates if the certificate contains a private key.
     * @param certificateNonce Random number generated to indicate Proof of Possession.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorDetailsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(String resourceGroupName, String provisioningServiceName,
        String certificateName, String ifMatch, String certificateName1, byte[] certificateRawBytes,
        Boolean certificateIsVerified, CertificatePurpose certificatePurpose, OffsetDateTime certificateCreated,
        OffsetDateTime certificateLastUpdated, Boolean certificateHasPrivateKey, String certificateNonce,
        Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (provisioningServiceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter provisioningServiceName is required and cannot be null."));
        }
        if (certificateName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter certificateName is required and cannot be null."));
        }
        if (ifMatch == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter ifMatch is required and cannot be null."));
        }
        final String accept = "application/json";
        String certificateRawBytesConverted = Base64Util.encodeToString(certificateRawBytes);
        return service.deleteSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, provisioningServiceName, certificateName, ifMatch,
            certificateName1, certificateRawBytesConverted, certificateIsVerified, certificatePurpose,
            certificateCreated, certificateLastUpdated, certificateHasPrivateKey, certificateNonce, accept, context);
    }

    /**
     * Deletes the specified certificate associated with the Provisioning Service.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningServiceName Name of the provisioning service to retrieve.
     * @param certificateName Name of the certificate to retrieve.
     * @param ifMatch ETag of the certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorDetailsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String provisioningServiceName, String certificateName,
        String ifMatch) {
        final String certificateName1 = null;
        final byte[] certificateRawBytes = new byte[0];
        final Boolean certificateIsVerified = null;
        final CertificatePurpose certificatePurpose = null;
        final OffsetDateTime certificateCreated = null;
        final OffsetDateTime certificateLastUpdated = null;
        final Boolean certificateHasPrivateKey = null;
        final String certificateNonce = null;
        deleteWithResponse(resourceGroupName, provisioningServiceName, certificateName, ifMatch, certificateName1,
            certificateRawBytes, certificateIsVerified, certificatePurpose, certificateCreated, certificateLastUpdated,
            certificateHasPrivateKey, certificateNonce, Context.NONE);
    }

    /**
     * Generate verification code for Proof of Possession.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningServiceName Name of the provisioning service to retrieve.
     * @param certificateName Name of the certificate to retrieve.
     * @param ifMatch ETag of the certificate. This is required to update an existing certificate, and ignored while
     * creating a brand new certificate.
     * @param certificateName1 Common Name for the certificate.
     * @param certificateRawBytes Raw data of certificate.
     * @param certificateIsVerified Indicates if the certificate has been verified by owner of the private key.
     * @param certificatePurpose Description mentioning the purpose of the certificate.
     * @param certificateCreated Certificate creation time.
     * @param certificateLastUpdated Certificate last updated time.
     * @param certificateHasPrivateKey Indicates if the certificate contains private key.
     * @param certificateNonce Random number generated to indicate Proof of Possession.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorDetailsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return description of the response of the verification code along with {@link Response} on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<VerificationCodeResponseInner>> generateVerificationCodeWithResponseAsync(
        String resourceGroupName, String provisioningServiceName, String certificateName, String ifMatch,
        String certificateName1, byte[] certificateRawBytes, Boolean certificateIsVerified,
        CertificatePurpose certificatePurpose, OffsetDateTime certificateCreated, OffsetDateTime certificateLastUpdated,
        Boolean certificateHasPrivateKey, String certificateNonce) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (provisioningServiceName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter provisioningServiceName is required and cannot be null."));
        }
        if (certificateName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter certificateName is required and cannot be null."));
        }
        if (ifMatch == null) {
            return Mono.error(new IllegalArgumentException("Parameter ifMatch is required and cannot be null."));
        }
        final String accept = "application/json";
        String certificateRawBytesConverted = Base64Util.encodeToString(certificateRawBytes);
        return FluxUtil
            .withContext(context -> service.generateVerificationCode(this.client.getEndpoint(),
                this.client.getApiVersion(), this.client.getSubscriptionId(), resourceGroupName,
                provisioningServiceName, certificateName, ifMatch, certificateName1, certificateRawBytesConverted,
                certificateIsVerified, certificatePurpose, certificateCreated, certificateLastUpdated,
                certificateHasPrivateKey, certificateNonce, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Generate verification code for Proof of Possession.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningServiceName Name of the provisioning service to retrieve.
     * @param certificateName Name of the certificate to retrieve.
     * @param ifMatch ETag of the certificate. This is required to update an existing certificate, and ignored while
     * creating a brand new certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorDetailsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return description of the response of the verification code on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<VerificationCodeResponseInner> generateVerificationCodeAsync(String resourceGroupName,
        String provisioningServiceName, String certificateName, String ifMatch) {
        final String certificateName1 = null;
        final byte[] certificateRawBytes = new byte[0];
        final Boolean certificateIsVerified = null;
        final CertificatePurpose certificatePurpose = null;
        final OffsetDateTime certificateCreated = null;
        final OffsetDateTime certificateLastUpdated = null;
        final Boolean certificateHasPrivateKey = null;
        final String certificateNonce = null;
        return generateVerificationCodeWithResponseAsync(resourceGroupName, provisioningServiceName, certificateName,
            ifMatch, certificateName1, certificateRawBytes, certificateIsVerified, certificatePurpose,
            certificateCreated, certificateLastUpdated, certificateHasPrivateKey, certificateNonce)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Generate verification code for Proof of Possession.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningServiceName Name of the provisioning service to retrieve.
     * @param certificateName Name of the certificate to retrieve.
     * @param ifMatch ETag of the certificate. This is required to update an existing certificate, and ignored while
     * creating a brand new certificate.
     * @param certificateName1 Common Name for the certificate.
     * @param certificateRawBytes Raw data of certificate.
     * @param certificateIsVerified Indicates if the certificate has been verified by owner of the private key.
     * @param certificatePurpose Description mentioning the purpose of the certificate.
     * @param certificateCreated Certificate creation time.
     * @param certificateLastUpdated Certificate last updated time.
     * @param certificateHasPrivateKey Indicates if the certificate contains private key.
     * @param certificateNonce Random number generated to indicate Proof of Possession.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorDetailsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return description of the response of the verification code along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<VerificationCodeResponseInner> generateVerificationCodeWithResponse(String resourceGroupName,
        String provisioningServiceName, String certificateName, String ifMatch, String certificateName1,
        byte[] certificateRawBytes, Boolean certificateIsVerified, CertificatePurpose certificatePurpose,
        OffsetDateTime certificateCreated, OffsetDateTime certificateLastUpdated, Boolean certificateHasPrivateKey,
        String certificateNonce, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (provisioningServiceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter provisioningServiceName is required and cannot be null."));
        }
        if (certificateName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter certificateName is required and cannot be null."));
        }
        if (ifMatch == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter ifMatch is required and cannot be null."));
        }
        final String accept = "application/json";
        String certificateRawBytesConverted = Base64Util.encodeToString(certificateRawBytes);
        return service.generateVerificationCodeSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, provisioningServiceName, certificateName, ifMatch,
            certificateName1, certificateRawBytesConverted, certificateIsVerified, certificatePurpose,
            certificateCreated, certificateLastUpdated, certificateHasPrivateKey, certificateNonce, accept, context);
    }

    /**
     * Generate verification code for Proof of Possession.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningServiceName Name of the provisioning service to retrieve.
     * @param certificateName Name of the certificate to retrieve.
     * @param ifMatch ETag of the certificate. This is required to update an existing certificate, and ignored while
     * creating a brand new certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorDetailsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return description of the response of the verification code.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public VerificationCodeResponseInner generateVerificationCode(String resourceGroupName,
        String provisioningServiceName, String certificateName, String ifMatch) {
        final String certificateName1 = null;
        final byte[] certificateRawBytes = new byte[0];
        final Boolean certificateIsVerified = null;
        final CertificatePurpose certificatePurpose = null;
        final OffsetDateTime certificateCreated = null;
        final OffsetDateTime certificateLastUpdated = null;
        final Boolean certificateHasPrivateKey = null;
        final String certificateNonce = null;
        return generateVerificationCodeWithResponse(resourceGroupName, provisioningServiceName, certificateName,
            ifMatch, certificateName1, certificateRawBytes, certificateIsVerified, certificatePurpose,
            certificateCreated, certificateLastUpdated, certificateHasPrivateKey, certificateNonce, Context.NONE)
                .getValue();
    }

    /**
     * Verifies the certificate's private key possession by providing the leaf cert issued by the verifying pre uploaded
     * certificate.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningServiceName Name of the provisioning service to retrieve.
     * @param certificateName Name of the certificate to retrieve.
     * @param ifMatch ETag of the certificate.
     * @param request The name of the certificate.
     * @param certificateName1 Common Name for the certificate.
     * @param certificateRawBytes Raw data of certificate.
     * @param certificateIsVerified Indicates if the certificate has been verified by owner of the private key.
     * @param certificatePurpose Describe the purpose of the certificate.
     * @param certificateCreated Certificate creation time.
     * @param certificateLastUpdated Certificate last updated time.
     * @param certificateHasPrivateKey Indicates if the certificate contains private key.
     * @param certificateNonce Random number generated to indicate Proof of Possession.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorDetailsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the X509 Certificate along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<CertificateResponseInner>> verifyCertificateWithResponseAsync(String resourceGroupName,
        String provisioningServiceName, String certificateName, String ifMatch, VerificationCodeRequest request,
        String certificateName1, byte[] certificateRawBytes, Boolean certificateIsVerified,
        CertificatePurpose certificatePurpose, OffsetDateTime certificateCreated, OffsetDateTime certificateLastUpdated,
        Boolean certificateHasPrivateKey, String certificateNonce) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (provisioningServiceName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter provisioningServiceName is required and cannot be null."));
        }
        if (certificateName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter certificateName is required and cannot be null."));
        }
        if (ifMatch == null) {
            return Mono.error(new IllegalArgumentException("Parameter ifMatch is required and cannot be null."));
        }
        if (request == null) {
            return Mono.error(new IllegalArgumentException("Parameter request is required and cannot be null."));
        } else {
            request.validate();
        }
        final String accept = "application/json";
        String certificateRawBytesConverted = Base64Util.encodeToString(certificateRawBytes);
        return FluxUtil
            .withContext(context -> service.verifyCertificate(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, provisioningServiceName, certificateName, ifMatch,
                certificateName1, certificateRawBytesConverted, certificateIsVerified, certificatePurpose,
                certificateCreated, certificateLastUpdated, certificateHasPrivateKey, certificateNonce, request, accept,
                context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Verifies the certificate's private key possession by providing the leaf cert issued by the verifying pre uploaded
     * certificate.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningServiceName Name of the provisioning service to retrieve.
     * @param certificateName Name of the certificate to retrieve.
     * @param ifMatch ETag of the certificate.
     * @param request The name of the certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorDetailsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the X509 Certificate on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<CertificateResponseInner> verifyCertificateAsync(String resourceGroupName,
        String provisioningServiceName, String certificateName, String ifMatch, VerificationCodeRequest request) {
        final String certificateName1 = null;
        final byte[] certificateRawBytes = new byte[0];
        final Boolean certificateIsVerified = null;
        final CertificatePurpose certificatePurpose = null;
        final OffsetDateTime certificateCreated = null;
        final OffsetDateTime certificateLastUpdated = null;
        final Boolean certificateHasPrivateKey = null;
        final String certificateNonce = null;
        return verifyCertificateWithResponseAsync(resourceGroupName, provisioningServiceName, certificateName, ifMatch,
            request, certificateName1, certificateRawBytes, certificateIsVerified, certificatePurpose,
            certificateCreated, certificateLastUpdated, certificateHasPrivateKey, certificateNonce)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Verifies the certificate's private key possession by providing the leaf cert issued by the verifying pre uploaded
     * certificate.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningServiceName Name of the provisioning service to retrieve.
     * @param certificateName Name of the certificate to retrieve.
     * @param ifMatch ETag of the certificate.
     * @param request The name of the certificate.
     * @param certificateName1 Common Name for the certificate.
     * @param certificateRawBytes Raw data of certificate.
     * @param certificateIsVerified Indicates if the certificate has been verified by owner of the private key.
     * @param certificatePurpose Describe the purpose of the certificate.
     * @param certificateCreated Certificate creation time.
     * @param certificateLastUpdated Certificate last updated time.
     * @param certificateHasPrivateKey Indicates if the certificate contains private key.
     * @param certificateNonce Random number generated to indicate Proof of Possession.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorDetailsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the X509 Certificate along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<CertificateResponseInner> verifyCertificateWithResponse(String resourceGroupName,
        String provisioningServiceName, String certificateName, String ifMatch, VerificationCodeRequest request,
        String certificateName1, byte[] certificateRawBytes, Boolean certificateIsVerified,
        CertificatePurpose certificatePurpose, OffsetDateTime certificateCreated, OffsetDateTime certificateLastUpdated,
        Boolean certificateHasPrivateKey, String certificateNonce, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (provisioningServiceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter provisioningServiceName is required and cannot be null."));
        }
        if (certificateName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter certificateName is required and cannot be null."));
        }
        if (ifMatch == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter ifMatch is required and cannot be null."));
        }
        if (request == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter request is required and cannot be null."));
        } else {
            request.validate();
        }
        final String accept = "application/json";
        String certificateRawBytesConverted = Base64Util.encodeToString(certificateRawBytes);
        return service.verifyCertificateSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, provisioningServiceName, certificateName, ifMatch,
            certificateName1, certificateRawBytesConverted, certificateIsVerified, certificatePurpose,
            certificateCreated, certificateLastUpdated, certificateHasPrivateKey, certificateNonce, request, accept,
            context);
    }

    /**
     * Verifies the certificate's private key possession by providing the leaf cert issued by the verifying pre uploaded
     * certificate.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param provisioningServiceName Name of the provisioning service to retrieve.
     * @param certificateName Name of the certificate to retrieve.
     * @param ifMatch ETag of the certificate.
     * @param request The name of the certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorDetailsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the X509 Certificate.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CertificateResponseInner verifyCertificate(String resourceGroupName, String provisioningServiceName,
        String certificateName, String ifMatch, VerificationCodeRequest request) {
        final String certificateName1 = null;
        final byte[] certificateRawBytes = new byte[0];
        final Boolean certificateIsVerified = null;
        final CertificatePurpose certificatePurpose = null;
        final OffsetDateTime certificateCreated = null;
        final OffsetDateTime certificateLastUpdated = null;
        final Boolean certificateHasPrivateKey = null;
        final String certificateNonce = null;
        return verifyCertificateWithResponse(resourceGroupName, provisioningServiceName, certificateName, ifMatch,
            request, certificateName1, certificateRawBytes, certificateIsVerified, certificatePurpose,
            certificateCreated, certificateLastUpdated, certificateHasPrivateKey, certificateNonce, Context.NONE)
                .getValue();
    }

    private static final ClientLogger LOGGER = new ClientLogger(DpsCertificatesClientImpl.class);
}
