// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.healthdataaiservices.deid;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.FluxUtil;
import com.azure.healthdataaiservices.deid.implementation.RealtimeOperationsImpl;
import com.azure.healthdataaiservices.deid.models.DeidRequest;
import com.azure.healthdataaiservices.deid.models.DeidResponse;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the asynchronous DeidentificationClient type.
 */
@ServiceClient(builder = DeidentificationClientBuilder.class, isAsync = true)
public final class RealtimeOperationsAsyncClient {
    @Generated
    private final RealtimeOperationsImpl serviceClient;

    /**
     * Initializes an instance of RealtimeOperationsAsyncClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    RealtimeOperationsAsyncClient(RealtimeOperationsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Realtime Synchronous Deidentification.
     * 
     * A remote procedure call (RPC) operation.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     inputText: String (Required)
     *     dataType: String(PlainText) (Required)
     *     operation: String(Redact/Surrogate/Tag) (Required)
     *     stringIndexType: String(TextElement_v8/UnicodeCodePoint/Utf16CodeUnit) (Required)
     *     redactionFormat: String (Optional)
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     outputText: String (Optional)
     *     taggerResult (Optional): {
     *         entities (Required): [
     *              (Required){
     *                 category: String(Unknown/Account/Age/BioID/City/CountryOrRegion/Date/Device/Doctor/Email/Fax/HealthPlan/Hospital/IDNum/IPAddress/License/LocationOther/MedicalRecord/Organization/Patient/Phone/Profession/SocialSecurity/State/Street/Url/Username/Vehicle/Zip) (Required)
     *                 offset: int (Required)
     *                 length: int (Required)
     *                 text: String (Optional)
     *                 confidenceScore: Double (Optional)
     *             }
     *         ]
     *         stringIndexType: String(TextElement_v8/UnicodeCodePoint/Utf16CodeUnit) (Required)
     *         path: String (Optional)
     *         etag: String (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param options The request body for realtime deidentification.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response for synchronous DeID operation along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> deidWithResponse(BinaryData options, RequestOptions requestOptions) {
        return this.serviceClient.deidWithResponseAsync(options, requestOptions);
    }

    /**
     * Realtime Synchronous Deidentification.
     * 
     * A remote procedure call (RPC) operation.
     * 
     * @param options The request body for realtime deidentification.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for synchronous DeID operation on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DeidResponse> deid(DeidRequest options) {
        // Generated convenience method for deidWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return deidWithResponse(BinaryData.fromObject(options), requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(DeidResponse.class));
    }
}
