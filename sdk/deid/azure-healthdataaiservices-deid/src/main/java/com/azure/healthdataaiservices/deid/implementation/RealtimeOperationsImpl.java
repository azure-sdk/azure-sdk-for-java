// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.healthdataaiservices.deid.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.healthdataaiservices.deid.DeidentificationServiceVersion;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in RealtimeOperations.
 */
public final class RealtimeOperationsImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final RealtimeOperationsService service;

    /**
     * The service client containing this operation class.
     */
    private final DeidentificationClientImpl client;

    /**
     * Initializes an instance of RealtimeOperationsImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    RealtimeOperationsImpl(DeidentificationClientImpl client) {
        this.service = RestProxy.create(RealtimeOperationsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * Gets Service version.
     * 
     * @return the serviceVersion value.
     */
    public DeidentificationServiceVersion getServiceVersion() {
        return client.getServiceVersion();
    }

    /**
     * The interface defining all the services for DeidentificationClientRealtimeOperations to be used by the proxy
     * service to perform REST calls.
     */
    @Host("https://{deid-service-uri}")
    @ServiceInterface(name = "DeidentificationClie")
    public interface RealtimeOperationsService {
        @Post("/deid")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> deid(@HostParam("deid-service-uri") String deidServiceUri,
            @QueryParam("api-version") String apiVersion, @HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData options, RequestOptions requestOptions, Context context);

        @Post("/deid")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> deidSync(@HostParam("deid-service-uri") String deidServiceUri,
            @QueryParam("api-version") String apiVersion, @HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData options, RequestOptions requestOptions, Context context);
    }

    /**
     * Realtime Synchronous Deidentification.
     * 
     * A remote procedure call (RPC) operation.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     inputText: String (Required)
     *     dataType: String(Unknown/PlainText) (Required)
     *     operation: String(Redact/Surrogate/Tag) (Required)
     *     stringIndexType: String(TextElement_v8/UnicodeCodePoint/Utf16CodeUnit) (Optional)
     *     redactionFormat: String (Optional)
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     outputText: String (Optional)
     *     taggerResult (Optional): {
     *         entities (Required): [
     *              (Required){
     *                 category: String(Unknown/Account/Age/BioID/City/CountryOrRegion/Date/Device/Doctor/Email/Fax/HealthPlan/Hospital/IDNum/IPAddress/License/LocationOther/MedicalRecord/Organization/Patient/Phone/Profession/SocialSecurity/State/Street/Url/Username/Vehicle/Zip) (Required)
     *                 offset: int (Required)
     *                 length: int (Required)
     *                 text: String (Optional)
     *                 confidenceScore: Double (Optional)
     *             }
     *         ]
     *         stringIndexType: String(TextElement_v8/UnicodeCodePoint/Utf16CodeUnit) (Required)
     *         path: String (Optional)
     *         checksum: String (Optional)
     *     }
     * }
     * }</pre>
     * 
     * @param options The request body for realtime deidentification.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response for synchronous DeID operation along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> deidWithResponseAsync(BinaryData options, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.deid(this.client.getDeidServiceUri(),
            this.client.getServiceVersion().getVersion(), accept, options, requestOptions, context));
    }

    /**
     * Realtime Synchronous Deidentification.
     * 
     * A remote procedure call (RPC) operation.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     inputText: String (Required)
     *     dataType: String(Unknown/PlainText) (Required)
     *     operation: String(Redact/Surrogate/Tag) (Required)
     *     stringIndexType: String(TextElement_v8/UnicodeCodePoint/Utf16CodeUnit) (Optional)
     *     redactionFormat: String (Optional)
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     outputText: String (Optional)
     *     taggerResult (Optional): {
     *         entities (Required): [
     *              (Required){
     *                 category: String(Unknown/Account/Age/BioID/City/CountryOrRegion/Date/Device/Doctor/Email/Fax/HealthPlan/Hospital/IDNum/IPAddress/License/LocationOther/MedicalRecord/Organization/Patient/Phone/Profession/SocialSecurity/State/Street/Url/Username/Vehicle/Zip) (Required)
     *                 offset: int (Required)
     *                 length: int (Required)
     *                 text: String (Optional)
     *                 confidenceScore: Double (Optional)
     *             }
     *         ]
     *         stringIndexType: String(TextElement_v8/UnicodeCodePoint/Utf16CodeUnit) (Required)
     *         path: String (Optional)
     *         checksum: String (Optional)
     *     }
     * }
     * }</pre>
     * 
     * @param options The request body for realtime deidentification.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response for synchronous DeID operation along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> deidWithResponse(BinaryData options, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.deidSync(this.client.getDeidServiceUri(), this.client.getServiceVersion().getVersion(), accept,
            options, requestOptions, Context.NONE);
    }
}
