// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.healthdataaiservices.deid;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.healthdataaiservices.deid.implementation.JobsImpl;
import com.azure.healthdataaiservices.deid.models.File;
import com.azure.healthdataaiservices.deid.models.Job;
import java.util.stream.Collectors;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the asynchronous DeidentificationClient type.
 */
@ServiceClient(builder = DeidentificationClientBuilder.class, isAsync = true)
public final class JobsAsyncClient {
    @Generated
    private final JobsImpl serviceClient;

    /**
     * Initializes an instance of JobsAsyncClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    JobsAsyncClient(JobsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Create a DeID Job
     * 
     * Long-running resource create or replace operation template.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     sourceLocation (Required): {
     *         location: String (Required)
     *         prefix: String (Required)
     *         extensions (Required): [
     *             String (Required)
     *         ]
     *     }
     *     targetLocation (Required): {
     *         location: String (Required)
     *         prefix: String (Required)
     *     }
     *     dataType: String(PlainText) (Required)
     *     operation: String(Redact/Surrogate/Tag) (Required)
     *     redactionFormat: String (Optional)
     *     status: String(NotStarted/Running/Succeeded/Failed/Canceled/PartialFailed) (Required)
     *     error (Optional): {
     *         code: String (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         details (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         innererror (Optional): {
     *             code: String (Optional)
     *             innererror (Optional): (recursive schema, see innererror above)
     *         }
     *     }
     *     createdAt: OffsetDateTime (Required)
     *     startedAt: OffsetDateTime (Optional)
     *     lastUpdatedAt: OffsetDateTime (Optional)
     *     summary (Optional): {
     *         successful: int (Required)
     *         failed: int (Required)
     *         canceled: int (Required)
     *         total: int (Required)
     *         bytesProcessed: long (Required)
     *     }
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     sourceLocation (Required): {
     *         location: String (Required)
     *         prefix: String (Required)
     *         extensions (Required): [
     *             String (Required)
     *         ]
     *     }
     *     targetLocation (Required): {
     *         location: String (Required)
     *         prefix: String (Required)
     *     }
     *     dataType: String(PlainText) (Required)
     *     operation: String(Redact/Surrogate/Tag) (Required)
     *     redactionFormat: String (Optional)
     *     status: String(NotStarted/Running/Succeeded/Failed/Canceled/PartialFailed) (Required)
     *     error (Optional): {
     *         code: String (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         details (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         innererror (Optional): {
     *             code: String (Optional)
     *             innererror (Optional): (recursive schema, see innererror above)
     *         }
     *     }
     *     createdAt: OffsetDateTime (Required)
     *     startedAt: OffsetDateTime (Optional)
     *     lastUpdatedAt: OffsetDateTime (Optional)
     *     summary (Optional): {
     *         successful: int (Required)
     *         failed: int (Required)
     *         canceled: int (Required)
     *         total: int (Required)
     *         bytesProcessed: long (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param name The name of a job.
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of a job containing a batch of documents to deidentify.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, BinaryData> beginCreate(String name, BinaryData resource,
        RequestOptions requestOptions) {
        return this.serviceClient.beginCreateAsync(name, resource, requestOptions);
    }

    /**
     * Get a DeID Job
     * 
     * Resource read operation template.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     sourceLocation (Required): {
     *         location: String (Required)
     *         prefix: String (Required)
     *         extensions (Required): [
     *             String (Required)
     *         ]
     *     }
     *     targetLocation (Required): {
     *         location: String (Required)
     *         prefix: String (Required)
     *     }
     *     dataType: String(PlainText) (Required)
     *     operation: String(Redact/Surrogate/Tag) (Required)
     *     redactionFormat: String (Optional)
     *     status: String(NotStarted/Running/Succeeded/Failed/Canceled/PartialFailed) (Required)
     *     error (Optional): {
     *         code: String (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         details (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         innererror (Optional): {
     *             code: String (Optional)
     *             innererror (Optional): (recursive schema, see innererror above)
     *         }
     *     }
     *     createdAt: OffsetDateTime (Required)
     *     startedAt: OffsetDateTime (Optional)
     *     lastUpdatedAt: OffsetDateTime (Optional)
     *     summary (Optional): {
     *         successful: int (Required)
     *         failed: int (Required)
     *         canceled: int (Required)
     *         total: int (Required)
     *         bytesProcessed: long (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param name The name of a job.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a job containing a batch of documents to deidentify along with {@link Response} on successful completion
     * of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getWithResponse(String name, RequestOptions requestOptions) {
        return this.serviceClient.getWithResponseAsync(name, requestOptions);
    }

    /**
     * List DeID Jobs
     * 
     * Resource list operation template.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>maxpagesize</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>The maximum number of result items per page.</td>
     * </tr>
     * <tr>
     * <td>continuationToken</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Token to continue a previous query.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     sourceLocation (Required): {
     *         location: String (Required)
     *         prefix: String (Required)
     *         extensions (Required): [
     *             String (Required)
     *         ]
     *     }
     *     targetLocation (Required): {
     *         location: String (Required)
     *         prefix: String (Required)
     *     }
     *     dataType: String(PlainText) (Required)
     *     operation: String(Redact/Surrogate/Tag) (Required)
     *     redactionFormat: String (Optional)
     *     status: String(NotStarted/Running/Succeeded/Failed/Canceled/PartialFailed) (Required)
     *     error (Optional): {
     *         code: String (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         details (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         innererror (Optional): {
     *             code: String (Optional)
     *             innererror (Optional): (recursive schema, see innererror above)
     *         }
     *     }
     *     createdAt: OffsetDateTime (Required)
     *     startedAt: OffsetDateTime (Optional)
     *     lastUpdatedAt: OffsetDateTime (Optional)
     *     summary (Optional): {
     *         successful: int (Required)
     *         failed: int (Required)
     *         canceled: int (Required)
     *         total: int (Required)
     *         bytesProcessed: long (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of Job items as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> list(RequestOptions requestOptions) {
        return this.serviceClient.listAsync(requestOptions);
    }

    /**
     * List processed files within a Job
     * 
     * Resource list operation template.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>maxpagesize</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>The maximum number of result items per page.</td>
     * </tr>
     * <tr>
     * <td>continuationToken</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Token to continue a previous query.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     input (Required): {
     *         path: String (Required)
     *         etag: String (Required)
     *     }
     *     output (Optional): (recursive schema, see output above)
     *     status: String(NotStarted/Running/Succeeded/Failed/Canceled) (Required)
     *     error (Optional): {
     *         code: String (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         details (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         innererror (Optional): {
     *             code: String (Optional)
     *             innererror (Optional): (recursive schema, see innererror above)
     *         }
     *     }
     * }
     * }</pre>
     * 
     * @param name The name of a job.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of File items as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listFiles(String name, RequestOptions requestOptions) {
        return this.serviceClient.listFilesAsync(name, requestOptions);
    }

    /**
     * Cancel a DeID Job
     * 
     * Cancels a job that is in progress.
     * 
     * The job will be marked as canceled and the service will stop processing the job. The service will not delete any
     * files that have already been processed.
     * 
     * If the job is already complete, this will have no effect.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     sourceLocation (Required): {
     *         location: String (Required)
     *         prefix: String (Required)
     *         extensions (Required): [
     *             String (Required)
     *         ]
     *     }
     *     targetLocation (Required): {
     *         location: String (Required)
     *         prefix: String (Required)
     *     }
     *     dataType: String(PlainText) (Required)
     *     operation: String(Redact/Surrogate/Tag) (Required)
     *     redactionFormat: String (Optional)
     *     status: String(NotStarted/Running/Succeeded/Failed/Canceled/PartialFailed) (Required)
     *     error (Optional): {
     *         code: String (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         details (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         innererror (Optional): {
     *             code: String (Optional)
     *             innererror (Optional): (recursive schema, see innererror above)
     *         }
     *     }
     *     createdAt: OffsetDateTime (Required)
     *     startedAt: OffsetDateTime (Optional)
     *     lastUpdatedAt: OffsetDateTime (Optional)
     *     summary (Optional): {
     *         successful: int (Required)
     *         failed: int (Required)
     *         canceled: int (Required)
     *         total: int (Required)
     *         bytesProcessed: long (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param name The name of a job.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a job containing a batch of documents to deidentify along with {@link Response} on successful completion
     * of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> cancelWithResponse(String name, RequestOptions requestOptions) {
        return this.serviceClient.cancelWithResponseAsync(name, requestOptions);
    }

    /**
     * Delete a DeID Job
     * 
     * Removes the record of the job from the service. Does not delete any files.
     * 
     * @param name The name of a job.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteWithResponse(String name, RequestOptions requestOptions) {
        return this.serviceClient.deleteWithResponseAsync(name, requestOptions);
    }

    /**
     * Create a DeID Job
     * 
     * Long-running resource create or replace operation template.
     * 
     * @param name The name of a job.
     * @param resource The resource instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of a job containing a batch of documents to deidentify.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<Job, Job> beginCreate(String name, Job resource) {
        // Generated convenience method for beginCreateWithModel
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.beginCreateWithModelAsync(name, BinaryData.fromObject(resource), requestOptions);
    }

    /**
     * Get a DeID Job
     * 
     * Resource read operation template.
     * 
     * @param name The name of a job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a job containing a batch of documents to deidentify on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Job> get(String name) {
        // Generated convenience method for getWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getWithResponse(name, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(Job.class));
    }

    /**
     * List DeID Jobs
     * 
     * Resource list operation template.
     * 
     * @param continuationToken Token to continue a previous query.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of Job items as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<Job> list(String continuationToken) {
        // Generated convenience method for list
        RequestOptions requestOptions = new RequestOptions();
        if (continuationToken != null) {
            requestOptions.addQueryParam("continuationToken", continuationToken, false);
        }
        PagedFlux<BinaryData> pagedFluxResponse = list(requestOptions);
        return PagedFlux.create(() -> (continuationToken, pageSize) -> {
            Flux<PagedResponse<BinaryData>> flux = (continuationToken == null) ? pagedFluxResponse.byPage().take(1)
                : pagedFluxResponse.byPage(continuationToken).take(1);
            return flux.map(pagedResponse -> new PagedResponseBase<Void, Job>(pagedResponse.getRequest(),
                pagedResponse.getStatusCode(), pagedResponse.getHeaders(), pagedResponse.getValue().stream()
                    .map(protocolMethodData -> protocolMethodData.toObject(Job.class)).collect(Collectors.toList()),
                pagedResponse.getContinuationToken(), null));
        });
    }

    /**
     * List DeID Jobs
     * 
     * Resource list operation template.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of Job items as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<Job> list() {
        // Generated convenience method for list
        RequestOptions requestOptions = new RequestOptions();
        PagedFlux<BinaryData> pagedFluxResponse = list(requestOptions);
        return PagedFlux.create(() -> (continuationToken, pageSize) -> {
            Flux<PagedResponse<BinaryData>> flux = (continuationToken == null) ? pagedFluxResponse.byPage().take(1)
                : pagedFluxResponse.byPage(continuationToken).take(1);
            return flux.map(pagedResponse -> new PagedResponseBase<Void, Job>(pagedResponse.getRequest(),
                pagedResponse.getStatusCode(), pagedResponse.getHeaders(), pagedResponse.getValue().stream()
                    .map(protocolMethodData -> protocolMethodData.toObject(Job.class)).collect(Collectors.toList()),
                pagedResponse.getContinuationToken(), null));
        });
    }

    /**
     * List processed files within a Job
     * 
     * Resource list operation template.
     * 
     * @param name The name of a job.
     * @param continuationToken Token to continue a previous query.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of File items as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<File> listFiles(String name, String continuationToken) {
        // Generated convenience method for listFiles
        RequestOptions requestOptions = new RequestOptions();
        if (continuationToken != null) {
            requestOptions.addQueryParam("continuationToken", continuationToken, false);
        }
        PagedFlux<BinaryData> pagedFluxResponse = listFiles(name, requestOptions);
        return PagedFlux.create(() -> (continuationToken, pageSize) -> {
            Flux<PagedResponse<BinaryData>> flux = (continuationToken == null) ? pagedFluxResponse.byPage().take(1)
                : pagedFluxResponse.byPage(continuationToken).take(1);
            return flux.map(pagedResponse -> new PagedResponseBase<Void, File>(pagedResponse.getRequest(),
                pagedResponse.getStatusCode(), pagedResponse.getHeaders(), pagedResponse.getValue().stream()
                    .map(protocolMethodData -> protocolMethodData.toObject(File.class)).collect(Collectors.toList()),
                pagedResponse.getContinuationToken(), null));
        });
    }

    /**
     * List processed files within a Job
     * 
     * Resource list operation template.
     * 
     * @param name The name of a job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of File items as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<File> listFiles(String name) {
        // Generated convenience method for listFiles
        RequestOptions requestOptions = new RequestOptions();
        PagedFlux<BinaryData> pagedFluxResponse = listFiles(name, requestOptions);
        return PagedFlux.create(() -> (continuationToken, pageSize) -> {
            Flux<PagedResponse<BinaryData>> flux = (continuationToken == null) ? pagedFluxResponse.byPage().take(1)
                : pagedFluxResponse.byPage(continuationToken).take(1);
            return flux.map(pagedResponse -> new PagedResponseBase<Void, File>(pagedResponse.getRequest(),
                pagedResponse.getStatusCode(), pagedResponse.getHeaders(), pagedResponse.getValue().stream()
                    .map(protocolMethodData -> protocolMethodData.toObject(File.class)).collect(Collectors.toList()),
                pagedResponse.getContinuationToken(), null));
        });
    }

    /**
     * Cancel a DeID Job
     * 
     * Cancels a job that is in progress.
     * 
     * The job will be marked as canceled and the service will stop processing the job. The service will not delete any
     * files that have already been processed.
     * 
     * If the job is already complete, this will have no effect.
     * 
     * @param name The name of a job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a job containing a batch of documents to deidentify on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Job> cancel(String name) {
        // Generated convenience method for cancelWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return cancelWithResponse(name, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(Job.class));
    }

    /**
     * Delete a DeID Job
     * 
     * Removes the record of the job from the service. Does not delete any files.
     * 
     * @param name The name of a job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> delete(String name) {
        // Generated convenience method for deleteWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return deleteWithResponse(name, requestOptions).flatMap(FluxUtil::toMono);
    }
}
