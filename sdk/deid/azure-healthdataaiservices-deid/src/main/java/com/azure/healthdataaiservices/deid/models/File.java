// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.healthdataaiservices.deid.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.models.ResponseError;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * File report once job has completed.
 */
@Immutable
public final class File implements JsonSerializable<File> {
    /*
     * Id of the file report.
     */
    @Generated
    private String id;

    /*
     * File Location for the input.
     */
    @Generated
    private final FileLocation input;

    /*
     * File Location for the output.
     */
    @Generated
    private FileLocation output;

    /*
     * Status of the file.
     */
    @Generated
    private final OperationState status;

    /*
     * Error when file fails.
     */
    @Generated
    private ResponseError error;

    /**
     * Creates an instance of File class.
     * 
     * @param input the input value to set.
     * @param status the status value to set.
     */
    @Generated
    private File(FileLocation input, OperationState status) {
        this.input = input;
        this.status = status;
    }

    /**
     * Get the id property: Id of the file report.
     * 
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Get the input property: File Location for the input.
     * 
     * @return the input value.
     */
    @Generated
    public FileLocation getInput() {
        return this.input;
    }

    /**
     * Get the output property: File Location for the output.
     * 
     * @return the output value.
     */
    @Generated
    public FileLocation getOutput() {
        return this.output;
    }

    /**
     * Get the status property: Status of the file.
     * 
     * @return the status value.
     */
    @Generated
    public OperationState getStatus() {
        return this.status;
    }

    /**
     * Get the error property: Error when file fails.
     * 
     * @return the error value.
     */
    @Generated
    public ResponseError getError() {
        return this.error;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("input", this.input);
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        jsonWriter.writeJsonField("output", this.output);
        jsonWriter.writeJsonField("error", this.error);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of File from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of File if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the File.
     */
    @Generated
    public static File fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String id = null;
            FileLocation input = null;
            OperationState status = null;
            FileLocation output = null;
            ResponseError error = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("input".equals(fieldName)) {
                    input = FileLocation.fromJson(reader);
                } else if ("status".equals(fieldName)) {
                    status = OperationState.fromString(reader.getString());
                } else if ("output".equals(fieldName)) {
                    output = FileLocation.fromJson(reader);
                } else if ("error".equals(fieldName)) {
                    error = ResponseError.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            File deserializedFile = new File(input, status);
            deserializedFile.id = id;
            deserializedFile.output = output;
            deserializedFile.error = error;

            return deserializedFile;
        });
    }
}
