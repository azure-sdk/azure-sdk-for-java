// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cdn.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Defines the parameters for RequestScheme match conditions.
 */
@Fluent
public final class RequestSchemeMatchConditionParameters extends DeliveryRuleConditionParameters {
    /*
     * The typeName property.
     */
    private DeliveryRuleConditionParametersType typeName
        = DeliveryRuleConditionParametersType.DELIVERY_RULE_REQUEST_SCHEME_CONDITION_PARAMETERS;

    /*
     * Describes operator to be matched
     */
    private String operator = "Equal";

    /*
     * Describes if this is negate condition or not
     */
    private Boolean negateCondition;

    /*
     * List of transforms
     */
    private List<Transform> transforms;

    /*
     * The match value for the condition of the delivery rule
     */
    private List<RequestSchemeMatchValue> matchValues;

    /**
     * Creates an instance of RequestSchemeMatchConditionParameters class.
     */
    public RequestSchemeMatchConditionParameters() {
    }

    /**
     * Get the typeName property: The typeName property.
     * 
     * @return the typeName value.
     */
    @Override
    public DeliveryRuleConditionParametersType typeName() {
        return this.typeName;
    }

    /**
     * Get the operator property: Describes operator to be matched.
     * 
     * @return the operator value.
     */
    public String operator() {
        return this.operator;
    }

    /**
     * Set the operator property: Describes operator to be matched.
     * 
     * @param operator the operator value to set.
     * @return the RequestSchemeMatchConditionParameters object itself.
     */
    public RequestSchemeMatchConditionParameters withOperator(String operator) {
        this.operator = operator;
        return this;
    }

    /**
     * Get the negateCondition property: Describes if this is negate condition or not.
     * 
     * @return the negateCondition value.
     */
    public Boolean negateCondition() {
        return this.negateCondition;
    }

    /**
     * Set the negateCondition property: Describes if this is negate condition or not.
     * 
     * @param negateCondition the negateCondition value to set.
     * @return the RequestSchemeMatchConditionParameters object itself.
     */
    public RequestSchemeMatchConditionParameters withNegateCondition(Boolean negateCondition) {
        this.negateCondition = negateCondition;
        return this;
    }

    /**
     * Get the transforms property: List of transforms.
     * 
     * @return the transforms value.
     */
    public List<Transform> transforms() {
        return this.transforms;
    }

    /**
     * Set the transforms property: List of transforms.
     * 
     * @param transforms the transforms value to set.
     * @return the RequestSchemeMatchConditionParameters object itself.
     */
    public RequestSchemeMatchConditionParameters withTransforms(List<Transform> transforms) {
        this.transforms = transforms;
        return this;
    }

    /**
     * Get the matchValues property: The match value for the condition of the delivery rule.
     * 
     * @return the matchValues value.
     */
    public List<RequestSchemeMatchValue> matchValues() {
        return this.matchValues;
    }

    /**
     * Set the matchValues property: The match value for the condition of the delivery rule.
     * 
     * @param matchValues the matchValues value to set.
     * @return the RequestSchemeMatchConditionParameters object itself.
     */
    public RequestSchemeMatchConditionParameters withMatchValues(List<RequestSchemeMatchValue> matchValues) {
        this.matchValues = matchValues;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("operator", this.operator);
        jsonWriter.writeStringField("typeName", this.typeName == null ? null : this.typeName.toString());
        jsonWriter.writeBooleanField("negateCondition", this.negateCondition);
        jsonWriter.writeArrayField("transforms", this.transforms,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        jsonWriter.writeArrayField("matchValues", this.matchValues,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RequestSchemeMatchConditionParameters from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RequestSchemeMatchConditionParameters if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RequestSchemeMatchConditionParameters.
     */
    public static RequestSchemeMatchConditionParameters fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RequestSchemeMatchConditionParameters deserializedRequestSchemeMatchConditionParameters
                = new RequestSchemeMatchConditionParameters();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("typeName".equals(fieldName)) {
                    deserializedRequestSchemeMatchConditionParameters.typeName
                        = DeliveryRuleConditionParametersType.fromString(reader.getString());
                } else if ("negateCondition".equals(fieldName)) {
                    deserializedRequestSchemeMatchConditionParameters.negateCondition
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("transforms".equals(fieldName)) {
                    List<Transform> transforms = reader.readArray(reader1 -> Transform.fromString(reader1.getString()));
                    deserializedRequestSchemeMatchConditionParameters.transforms = transforms;
                } else if ("matchValues".equals(fieldName)) {
                    List<RequestSchemeMatchValue> matchValues
                        = reader.readArray(reader1 -> RequestSchemeMatchValue.fromString(reader1.getString()));
                    deserializedRequestSchemeMatchConditionParameters.matchValues = matchValues;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRequestSchemeMatchConditionParameters;
        });
    }
}
