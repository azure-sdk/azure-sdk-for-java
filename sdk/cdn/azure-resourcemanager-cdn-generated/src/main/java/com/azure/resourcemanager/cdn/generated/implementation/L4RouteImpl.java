// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cdn.generated.implementation;

import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.cdn.generated.fluent.models.L4RouteInner;
import com.azure.resourcemanager.cdn.generated.models.ActivatedResourceReference;
import com.azure.resourcemanager.cdn.generated.models.AfdProvisioningState;
import com.azure.resourcemanager.cdn.generated.models.DeploymentStatus;
import com.azure.resourcemanager.cdn.generated.models.EnabledState;
import com.azure.resourcemanager.cdn.generated.models.L4Route;
import com.azure.resourcemanager.cdn.generated.models.L4RouteBaseSettings;
import com.azure.resourcemanager.cdn.generated.models.L4RouteUpdatePropertiesParameters;
import com.azure.resourcemanager.cdn.generated.models.ResourceReference;
import com.azure.resourcemanager.cdn.generated.models.RoutingMethod;
import java.util.Collections;
import java.util.List;

public final class L4RouteImpl implements L4Route, L4Route.Definition, L4Route.Update {
    private L4RouteInner innerObject;

    private final com.azure.resourcemanager.cdn.generated.CdnManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public AfdProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public DeploymentStatus deploymentStatus() {
        return this.innerModel().deploymentStatus();
    }

    public RoutingMethod routingMethod() {
        return this.innerModel().routingMethod();
    }

    public List<ActivatedResourceReference> customDomains() {
        List<ActivatedResourceReference> inner = this.innerModel().customDomains();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public ResourceReference originGroup() {
        return this.innerModel().originGroup();
    }

    public L4RouteBaseSettings l4RouteBaseSettings() {
        return this.innerModel().l4RouteBaseSettings();
    }

    public EnabledState enabledState() {
        return this.innerModel().enabledState();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public L4RouteInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.cdn.generated.CdnManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String profileName;

    private String endpointName;

    private String routeName;

    private L4RouteUpdatePropertiesParameters updateRouteUpdateProperties;

    public L4RouteImpl withExistingAfdEndpoint(String resourceGroupName, String profileName, String endpointName) {
        this.resourceGroupName = resourceGroupName;
        this.profileName = profileName;
        this.endpointName = endpointName;
        return this;
    }

    public L4Route create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getL4Routes()
                .create(resourceGroupName, profileName, endpointName, routeName, this.innerModel(), Context.NONE);
        return this;
    }

    public L4Route create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getL4Routes()
                .create(resourceGroupName, profileName, endpointName, routeName, this.innerModel(), context);
        return this;
    }

    L4RouteImpl(String name, com.azure.resourcemanager.cdn.generated.CdnManager serviceManager) {
        this.innerObject = new L4RouteInner();
        this.serviceManager = serviceManager;
        this.routeName = name;
    }

    public L4RouteImpl update() {
        this.updateRouteUpdateProperties = new L4RouteUpdatePropertiesParameters();
        return this;
    }

    public L4Route apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getL4Routes()
                .update(
                    resourceGroupName, profileName, endpointName, routeName, updateRouteUpdateProperties, Context.NONE);
        return this;
    }

    public L4Route apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getL4Routes()
                .update(resourceGroupName, profileName, endpointName, routeName, updateRouteUpdateProperties, context);
        return this;
    }

    L4RouteImpl(L4RouteInner innerObject, com.azure.resourcemanager.cdn.generated.CdnManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.profileName = Utils.getValueFromIdByName(innerObject.id(), "profiles");
        this.endpointName = Utils.getValueFromIdByName(innerObject.id(), "afdEndpoints");
        this.routeName = Utils.getValueFromIdByName(innerObject.id(), "l4routes");
    }

    public L4Route refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getL4Routes()
                .getWithResponse(resourceGroupName, profileName, endpointName, routeName, Context.NONE)
                .getValue();
        return this;
    }

    public L4Route refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getL4Routes()
                .getWithResponse(resourceGroupName, profileName, endpointName, routeName, context)
                .getValue();
        return this;
    }

    public L4RouteImpl withRoutingMethod(RoutingMethod routingMethod) {
        if (isInCreateMode()) {
            this.innerModel().withRoutingMethod(routingMethod);
            return this;
        } else {
            this.updateRouteUpdateProperties.withRoutingMethod(routingMethod);
            return this;
        }
    }

    public L4RouteImpl withCustomDomains(List<ActivatedResourceReference> customDomains) {
        if (isInCreateMode()) {
            this.innerModel().withCustomDomains(customDomains);
            return this;
        } else {
            this.updateRouteUpdateProperties.withCustomDomains(customDomains);
            return this;
        }
    }

    public L4RouteImpl withOriginGroup(ResourceReference originGroup) {
        if (isInCreateMode()) {
            this.innerModel().withOriginGroup(originGroup);
            return this;
        } else {
            this.updateRouteUpdateProperties.withOriginGroup(originGroup);
            return this;
        }
    }

    public L4RouteImpl withL4RouteBaseSettings(L4RouteBaseSettings l4RouteBaseSettings) {
        if (isInCreateMode()) {
            this.innerModel().withL4RouteBaseSettings(l4RouteBaseSettings);
            return this;
        } else {
            this.updateRouteUpdateProperties.withL4RouteBaseSettings(l4RouteBaseSettings);
            return this;
        }
    }

    public L4RouteImpl withEnabledState(EnabledState enabledState) {
        if (isInCreateMode()) {
            this.innerModel().withEnabledState(enabledState);
            return this;
        } else {
            this.updateRouteUpdateProperties.withEnabledState(enabledState);
            return this;
        }
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
