// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cdn.generated.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** L4 Route. */
@Fluent
public class L4RouteUpdatePropertiesParameters {
    /*
     * Routing method for TCP/UDP routes based on SNI or Ports division, if it is SNI based then the we can read SNI
     * header to get the origin name or if its based on the ports then we can have port division to connect to specific
     * origin for example port range 2000-2050 belongs to origin group 1 and port range 3000-3050 belongs to origin
     * group 2.
     */
    @JsonProperty(value = "RoutingMethod")
    private RoutingMethod routingMethod;

    /*
     * Domains referenced by this endpoint.
     */
    @JsonProperty(value = "customDomains")
    private List<ActivatedResourceReference> customDomains;

    /*
     * A reference to the origin group.
     */
    @JsonProperty(value = "originGroup")
    private ResourceReference originGroup;

    /*
     * L4 Route base settings
     */
    @JsonProperty(value = "L4RouteBaseSettings")
    private L4RouteBaseSettings l4RouteBaseSettings;

    /*
     * Whether to enable the route. Permitted values are 'Enabled' or 'Disabled'
     */
    @JsonProperty(value = "enabledState")
    private EnabledState enabledState;

    /** Creates an instance of L4RouteUpdatePropertiesParameters class. */
    public L4RouteUpdatePropertiesParameters() {
    }

    /**
     * Get the routingMethod property: Routing method for TCP/UDP routes based on SNI or Ports division, if it is SNI
     * based then the we can read SNI header to get the origin name or if its based on the ports then we can have port
     * division to connect to specific origin for example port range 2000-2050 belongs to origin group 1 and port range
     * 3000-3050 belongs to origin group 2.
     *
     * @return the routingMethod value.
     */
    public RoutingMethod routingMethod() {
        return this.routingMethod;
    }

    /**
     * Set the routingMethod property: Routing method for TCP/UDP routes based on SNI or Ports division, if it is SNI
     * based then the we can read SNI header to get the origin name or if its based on the ports then we can have port
     * division to connect to specific origin for example port range 2000-2050 belongs to origin group 1 and port range
     * 3000-3050 belongs to origin group 2.
     *
     * @param routingMethod the routingMethod value to set.
     * @return the L4RouteUpdatePropertiesParameters object itself.
     */
    public L4RouteUpdatePropertiesParameters withRoutingMethod(RoutingMethod routingMethod) {
        this.routingMethod = routingMethod;
        return this;
    }

    /**
     * Get the customDomains property: Domains referenced by this endpoint.
     *
     * @return the customDomains value.
     */
    public List<ActivatedResourceReference> customDomains() {
        return this.customDomains;
    }

    /**
     * Set the customDomains property: Domains referenced by this endpoint.
     *
     * @param customDomains the customDomains value to set.
     * @return the L4RouteUpdatePropertiesParameters object itself.
     */
    public L4RouteUpdatePropertiesParameters withCustomDomains(List<ActivatedResourceReference> customDomains) {
        this.customDomains = customDomains;
        return this;
    }

    /**
     * Get the originGroup property: A reference to the origin group.
     *
     * @return the originGroup value.
     */
    public ResourceReference originGroup() {
        return this.originGroup;
    }

    /**
     * Set the originGroup property: A reference to the origin group.
     *
     * @param originGroup the originGroup value to set.
     * @return the L4RouteUpdatePropertiesParameters object itself.
     */
    public L4RouteUpdatePropertiesParameters withOriginGroup(ResourceReference originGroup) {
        this.originGroup = originGroup;
        return this;
    }

    /**
     * Get the l4RouteBaseSettings property: L4 Route base settings.
     *
     * @return the l4RouteBaseSettings value.
     */
    public L4RouteBaseSettings l4RouteBaseSettings() {
        return this.l4RouteBaseSettings;
    }

    /**
     * Set the l4RouteBaseSettings property: L4 Route base settings.
     *
     * @param l4RouteBaseSettings the l4RouteBaseSettings value to set.
     * @return the L4RouteUpdatePropertiesParameters object itself.
     */
    public L4RouteUpdatePropertiesParameters withL4RouteBaseSettings(L4RouteBaseSettings l4RouteBaseSettings) {
        this.l4RouteBaseSettings = l4RouteBaseSettings;
        return this;
    }

    /**
     * Get the enabledState property: Whether to enable the route. Permitted values are 'Enabled' or 'Disabled'.
     *
     * @return the enabledState value.
     */
    public EnabledState enabledState() {
        return this.enabledState;
    }

    /**
     * Set the enabledState property: Whether to enable the route. Permitted values are 'Enabled' or 'Disabled'.
     *
     * @param enabledState the enabledState value to set.
     * @return the L4RouteUpdatePropertiesParameters object itself.
     */
    public L4RouteUpdatePropertiesParameters withEnabledState(EnabledState enabledState) {
        this.enabledState = enabledState;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (customDomains() != null) {
            customDomains().forEach(e -> e.validate());
        }
        if (originGroup() != null) {
            originGroup().validate();
        }
        if (l4RouteBaseSettings() != null) {
            l4RouteBaseSettings().validate();
        }
    }
}
