// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cdn.generated.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Base class for all L4 route settings. */
@Fluent
public final class L4RouteBaseSettings {
    /*
     * Frontend protocol for TCP/UDP routes.
     */
    @JsonProperty(value = "FrontendProtocol")
    private FrontendProtocol frontendProtocol;

    /*
     * Backend protocol used to establish connection with customer's backend.
     */
    @JsonProperty(value = "BackendProtocol")
    private BackendProtocol backendProtocol;

    /*
     * The ports used for the TCP/UDP connection. Must be between 1024 and 65535 excluding reserved ports. The ports
     * can be a comma separated list or a valid range like 5050-5090
     */
    @JsonProperty(value = "Ports")
    private String ports;

    /** Creates an instance of L4RouteBaseSettings class. */
    public L4RouteBaseSettings() {
    }

    /**
     * Get the frontendProtocol property: Frontend protocol for TCP/UDP routes.
     *
     * @return the frontendProtocol value.
     */
    public FrontendProtocol frontendProtocol() {
        return this.frontendProtocol;
    }

    /**
     * Set the frontendProtocol property: Frontend protocol for TCP/UDP routes.
     *
     * @param frontendProtocol the frontendProtocol value to set.
     * @return the L4RouteBaseSettings object itself.
     */
    public L4RouteBaseSettings withFrontendProtocol(FrontendProtocol frontendProtocol) {
        this.frontendProtocol = frontendProtocol;
        return this;
    }

    /**
     * Get the backendProtocol property: Backend protocol used to establish connection with customer's backend.
     *
     * @return the backendProtocol value.
     */
    public BackendProtocol backendProtocol() {
        return this.backendProtocol;
    }

    /**
     * Set the backendProtocol property: Backend protocol used to establish connection with customer's backend.
     *
     * @param backendProtocol the backendProtocol value to set.
     * @return the L4RouteBaseSettings object itself.
     */
    public L4RouteBaseSettings withBackendProtocol(BackendProtocol backendProtocol) {
        this.backendProtocol = backendProtocol;
        return this;
    }

    /**
     * Get the ports property: The ports used for the TCP/UDP connection. Must be between 1024 and 65535 excluding
     * reserved ports. The ports can be a comma separated list or a valid range like 5050-5090.
     *
     * @return the ports value.
     */
    public String ports() {
        return this.ports;
    }

    /**
     * Set the ports property: The ports used for the TCP/UDP connection. Must be between 1024 and 65535 excluding
     * reserved ports. The ports can be a comma separated list or a valid range like 5050-5090.
     *
     * @param ports the ports value to set.
     * @return the L4RouteBaseSettings object itself.
     */
    public L4RouteBaseSettings withPorts(String ports) {
        this.ports = ports;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
