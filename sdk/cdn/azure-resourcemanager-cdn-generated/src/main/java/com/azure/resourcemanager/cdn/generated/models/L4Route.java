// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cdn.generated.models;

import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.cdn.generated.fluent.models.L4RouteInner;
import java.util.List;

/** An immutable client-side representation of L4Route. */
public interface L4Route {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the systemData property: Read only system data.
     *
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * Gets the provisioningState property: Provisioning status.
     *
     * @return the provisioningState value.
     */
    AfdProvisioningState provisioningState();

    /**
     * Gets the deploymentStatus property: The deploymentStatus property.
     *
     * @return the deploymentStatus value.
     */
    DeploymentStatus deploymentStatus();

    /**
     * Gets the routingMethod property: Routing method for TCP/UDP routes based on SNI or Ports division, if it is SNI
     * based then the we can read SNI header to get the origin name or if its based on the ports then we can have port
     * division to connect to specific origin for example port range 2000-2050 belongs to origin group 1 and port range
     * 3000-3050 belongs to origin group 2.
     *
     * @return the routingMethod value.
     */
    RoutingMethod routingMethod();

    /**
     * Gets the customDomains property: Domains referenced by this endpoint.
     *
     * @return the customDomains value.
     */
    List<ActivatedResourceReference> customDomains();

    /**
     * Gets the originGroup property: A reference to the origin group.
     *
     * @return the originGroup value.
     */
    ResourceReference originGroup();

    /**
     * Gets the l4RouteBaseSettings property: L4 Route base settings.
     *
     * @return the l4RouteBaseSettings value.
     */
    L4RouteBaseSettings l4RouteBaseSettings();

    /**
     * Gets the enabledState property: Whether to enable the route. Permitted values are 'Enabled' or 'Disabled'.
     *
     * @return the enabledState value.
     */
    EnabledState enabledState();

    /**
     * Gets the name of the resource group.
     *
     * @return the name of the resource group.
     */
    String resourceGroupName();

    /**
     * Gets the inner com.azure.resourcemanager.cdn.generated.fluent.models.L4RouteInner object.
     *
     * @return the inner object.
     */
    L4RouteInner innerModel();

    /** The entirety of the L4Route definition. */
    interface Definition
        extends DefinitionStages.Blank, DefinitionStages.WithParentResource, DefinitionStages.WithCreate {
    }
    /** The L4Route definition stages. */
    interface DefinitionStages {
        /** The first stage of the L4Route definition. */
        interface Blank extends WithParentResource {
        }
        /** The stage of the L4Route definition allowing to specify parent resource. */
        interface WithParentResource {
            /**
             * Specifies resourceGroupName, profileName, endpointName.
             *
             * @param resourceGroupName Name of the Resource group within the Azure subscription.
             * @param profileName Name of the Azure Front Door Standard or Azure Front Door Premium profile which is
             *     unique within the resource group.
             * @param endpointName Name of the endpoint under the profile which is unique globally.
             * @return the next definition stage.
             */
            WithCreate withExistingAfdEndpoint(String resourceGroupName, String profileName, String endpointName);
        }
        /**
         * The stage of the L4Route definition which contains all the minimum required properties for the resource to be
         * created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithRoutingMethod,
                DefinitionStages.WithCustomDomains,
                DefinitionStages.WithOriginGroup,
                DefinitionStages.WithL4RouteBaseSettings,
                DefinitionStages.WithEnabledState {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            L4Route create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            L4Route create(Context context);
        }
        /** The stage of the L4Route definition allowing to specify routingMethod. */
        interface WithRoutingMethod {
            /**
             * Specifies the routingMethod property: Routing method for TCP/UDP routes based on SNI or Ports division,
             * if it is SNI based then the we can read SNI header to get the origin name or if its based on the ports
             * then we can have port division to connect to specific origin for example port range 2000-2050 belongs to
             * origin group 1 and port range 3000-3050 belongs to origin group 2..
             *
             * @param routingMethod Routing method for TCP/UDP routes based on SNI or Ports division, if it is SNI based
             *     then the we can read SNI header to get the origin name or if its based on the ports then we can have
             *     port division to connect to specific origin for example port range 2000-2050 belongs to origin group
             *     1 and port range 3000-3050 belongs to origin group 2.
             * @return the next definition stage.
             */
            WithCreate withRoutingMethod(RoutingMethod routingMethod);
        }
        /** The stage of the L4Route definition allowing to specify customDomains. */
        interface WithCustomDomains {
            /**
             * Specifies the customDomains property: Domains referenced by this endpoint..
             *
             * @param customDomains Domains referenced by this endpoint.
             * @return the next definition stage.
             */
            WithCreate withCustomDomains(List<ActivatedResourceReference> customDomains);
        }
        /** The stage of the L4Route definition allowing to specify originGroup. */
        interface WithOriginGroup {
            /**
             * Specifies the originGroup property: A reference to the origin group..
             *
             * @param originGroup A reference to the origin group.
             * @return the next definition stage.
             */
            WithCreate withOriginGroup(ResourceReference originGroup);
        }
        /** The stage of the L4Route definition allowing to specify l4RouteBaseSettings. */
        interface WithL4RouteBaseSettings {
            /**
             * Specifies the l4RouteBaseSettings property: L4 Route base settings.
             *
             * @param l4RouteBaseSettings L4 Route base settings.
             * @return the next definition stage.
             */
            WithCreate withL4RouteBaseSettings(L4RouteBaseSettings l4RouteBaseSettings);
        }
        /** The stage of the L4Route definition allowing to specify enabledState. */
        interface WithEnabledState {
            /**
             * Specifies the enabledState property: Whether to enable the route. Permitted values are 'Enabled' or
             * 'Disabled'.
             *
             * @param enabledState Whether to enable the route. Permitted values are 'Enabled' or 'Disabled'.
             * @return the next definition stage.
             */
            WithCreate withEnabledState(EnabledState enabledState);
        }
    }
    /**
     * Begins update for the L4Route resource.
     *
     * @return the stage of resource update.
     */
    L4Route.Update update();

    /** The template for L4Route update. */
    interface Update
        extends UpdateStages.WithRoutingMethod,
            UpdateStages.WithCustomDomains,
            UpdateStages.WithOriginGroup,
            UpdateStages.WithL4RouteBaseSettings,
            UpdateStages.WithEnabledState {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        L4Route apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        L4Route apply(Context context);
    }
    /** The L4Route update stages. */
    interface UpdateStages {
        /** The stage of the L4Route update allowing to specify routingMethod. */
        interface WithRoutingMethod {
            /**
             * Specifies the routingMethod property: Routing method for TCP/UDP routes based on SNI or Ports division,
             * if it is SNI based then the we can read SNI header to get the origin name or if its based on the ports
             * then we can have port division to connect to specific origin for example port range 2000-2050 belongs to
             * origin group 1 and port range 3000-3050 belongs to origin group 2..
             *
             * @param routingMethod Routing method for TCP/UDP routes based on SNI or Ports division, if it is SNI based
             *     then the we can read SNI header to get the origin name or if its based on the ports then we can have
             *     port division to connect to specific origin for example port range 2000-2050 belongs to origin group
             *     1 and port range 3000-3050 belongs to origin group 2.
             * @return the next definition stage.
             */
            Update withRoutingMethod(RoutingMethod routingMethod);
        }
        /** The stage of the L4Route update allowing to specify customDomains. */
        interface WithCustomDomains {
            /**
             * Specifies the customDomains property: Domains referenced by this endpoint..
             *
             * @param customDomains Domains referenced by this endpoint.
             * @return the next definition stage.
             */
            Update withCustomDomains(List<ActivatedResourceReference> customDomains);
        }
        /** The stage of the L4Route update allowing to specify originGroup. */
        interface WithOriginGroup {
            /**
             * Specifies the originGroup property: A reference to the origin group..
             *
             * @param originGroup A reference to the origin group.
             * @return the next definition stage.
             */
            Update withOriginGroup(ResourceReference originGroup);
        }
        /** The stage of the L4Route update allowing to specify l4RouteBaseSettings. */
        interface WithL4RouteBaseSettings {
            /**
             * Specifies the l4RouteBaseSettings property: L4 Route base settings.
             *
             * @param l4RouteBaseSettings L4 Route base settings.
             * @return the next definition stage.
             */
            Update withL4RouteBaseSettings(L4RouteBaseSettings l4RouteBaseSettings);
        }
        /** The stage of the L4Route update allowing to specify enabledState. */
        interface WithEnabledState {
            /**
             * Specifies the enabledState property: Whether to enable the route. Permitted values are 'Enabled' or
             * 'Disabled'.
             *
             * @param enabledState Whether to enable the route. Permitted values are 'Enabled' or 'Disabled'.
             * @return the next definition stage.
             */
            Update withEnabledState(EnabledState enabledState);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    L4Route refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    L4Route refresh(Context context);
}
