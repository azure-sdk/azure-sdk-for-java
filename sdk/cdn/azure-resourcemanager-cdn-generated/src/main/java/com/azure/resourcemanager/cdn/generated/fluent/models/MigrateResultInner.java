// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cdn.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.cdn.generated.models.MigrationErrorType;
import com.azure.resourcemanager.cdn.generated.models.ResourceReference;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Result for migrate operation. */
@Fluent
public final class MigrateResultInner {
    /*
     * Arm resource id of the migrated profile
     */
    @JsonProperty(value = "migratedProfileResourceId", access = JsonProperty.Access.WRITE_ONLY)
    private ResourceReference migratedProfileResourceId;

    /*
     * The errors property.
     */
    @JsonProperty(value = "errors")
    private List<MigrationErrorType> errors;

    /** Creates an instance of MigrateResultInner class. */
    public MigrateResultInner() {
    }

    /**
     * Get the migratedProfileResourceId property: Arm resource id of the migrated profile.
     *
     * @return the migratedProfileResourceId value.
     */
    public ResourceReference migratedProfileResourceId() {
        return this.migratedProfileResourceId;
    }

    /**
     * Get the errors property: The errors property.
     *
     * @return the errors value.
     */
    public List<MigrationErrorType> errors() {
        return this.errors;
    }

    /**
     * Set the errors property: The errors property.
     *
     * @param errors the errors value to set.
     * @return the MigrateResultInner object itself.
     */
    public MigrateResultInner withErrors(List<MigrationErrorType> errors) {
        this.errors = errors;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (migratedProfileResourceId() != null) {
            migratedProfileResourceId().validate();
        }
        if (errors() != null) {
            errors().forEach(e -> e.validate());
        }
    }
}
