// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cdn.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.resourcemanager.cdn.generated.models.ActivatedResourceReference;
import com.azure.resourcemanager.cdn.generated.models.AfdProvisioningState;
import com.azure.resourcemanager.cdn.generated.models.DeploymentStatus;
import com.azure.resourcemanager.cdn.generated.models.EnabledState;
import com.azure.resourcemanager.cdn.generated.models.L4RouteBaseSettings;
import com.azure.resourcemanager.cdn.generated.models.ResourceReference;
import com.azure.resourcemanager.cdn.generated.models.RoutingMethod;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Friendly Routes name mapping to the any Routes or secret related information. */
@Fluent
public final class L4RouteInner extends ProxyResource {
    /*
     * The JSON object that contains the properties of the Routes to create.
     */
    @JsonProperty(value = "properties")
    private L4RouteProperties innerProperties;

    /*
     * Read only system data
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /** Creates an instance of L4RouteInner class. */
    public L4RouteInner() {
    }

    /**
     * Get the innerProperties property: The JSON object that contains the properties of the Routes to create.
     *
     * @return the innerProperties value.
     */
    private L4RouteProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Read only system data.
     *
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the provisioningState property: Provisioning status.
     *
     * @return the provisioningState value.
     */
    public AfdProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the deploymentStatus property: The deploymentStatus property.
     *
     * @return the deploymentStatus value.
     */
    public DeploymentStatus deploymentStatus() {
        return this.innerProperties() == null ? null : this.innerProperties().deploymentStatus();
    }

    /**
     * Get the routingMethod property: Routing method for TCP/UDP routes based on SNI or Ports division, if it is SNI
     * based then the we can read SNI header to get the origin name or if its based on the ports then we can have port
     * division to connect to specific origin for example port range 2000-2050 belongs to origin group 1 and port range
     * 3000-3050 belongs to origin group 2.
     *
     * @return the routingMethod value.
     */
    public RoutingMethod routingMethod() {
        return this.innerProperties() == null ? null : this.innerProperties().routingMethod();
    }

    /**
     * Set the routingMethod property: Routing method for TCP/UDP routes based on SNI or Ports division, if it is SNI
     * based then the we can read SNI header to get the origin name or if its based on the ports then we can have port
     * division to connect to specific origin for example port range 2000-2050 belongs to origin group 1 and port range
     * 3000-3050 belongs to origin group 2.
     *
     * @param routingMethod the routingMethod value to set.
     * @return the L4RouteInner object itself.
     */
    public L4RouteInner withRoutingMethod(RoutingMethod routingMethod) {
        if (this.innerProperties() == null) {
            this.innerProperties = new L4RouteProperties();
        }
        this.innerProperties().withRoutingMethod(routingMethod);
        return this;
    }

    /**
     * Get the customDomains property: Domains referenced by this endpoint.
     *
     * @return the customDomains value.
     */
    public List<ActivatedResourceReference> customDomains() {
        return this.innerProperties() == null ? null : this.innerProperties().customDomains();
    }

    /**
     * Set the customDomains property: Domains referenced by this endpoint.
     *
     * @param customDomains the customDomains value to set.
     * @return the L4RouteInner object itself.
     */
    public L4RouteInner withCustomDomains(List<ActivatedResourceReference> customDomains) {
        if (this.innerProperties() == null) {
            this.innerProperties = new L4RouteProperties();
        }
        this.innerProperties().withCustomDomains(customDomains);
        return this;
    }

    /**
     * Get the originGroup property: A reference to the origin group.
     *
     * @return the originGroup value.
     */
    public ResourceReference originGroup() {
        return this.innerProperties() == null ? null : this.innerProperties().originGroup();
    }

    /**
     * Set the originGroup property: A reference to the origin group.
     *
     * @param originGroup the originGroup value to set.
     * @return the L4RouteInner object itself.
     */
    public L4RouteInner withOriginGroup(ResourceReference originGroup) {
        if (this.innerProperties() == null) {
            this.innerProperties = new L4RouteProperties();
        }
        this.innerProperties().withOriginGroup(originGroup);
        return this;
    }

    /**
     * Get the l4RouteBaseSettings property: L4 Route base settings.
     *
     * @return the l4RouteBaseSettings value.
     */
    public L4RouteBaseSettings l4RouteBaseSettings() {
        return this.innerProperties() == null ? null : this.innerProperties().l4RouteBaseSettings();
    }

    /**
     * Set the l4RouteBaseSettings property: L4 Route base settings.
     *
     * @param l4RouteBaseSettings the l4RouteBaseSettings value to set.
     * @return the L4RouteInner object itself.
     */
    public L4RouteInner withL4RouteBaseSettings(L4RouteBaseSettings l4RouteBaseSettings) {
        if (this.innerProperties() == null) {
            this.innerProperties = new L4RouteProperties();
        }
        this.innerProperties().withL4RouteBaseSettings(l4RouteBaseSettings);
        return this;
    }

    /**
     * Get the enabledState property: Whether to enable the route. Permitted values are 'Enabled' or 'Disabled'.
     *
     * @return the enabledState value.
     */
    public EnabledState enabledState() {
        return this.innerProperties() == null ? null : this.innerProperties().enabledState();
    }

    /**
     * Set the enabledState property: Whether to enable the route. Permitted values are 'Enabled' or 'Disabled'.
     *
     * @param enabledState the enabledState value to set.
     * @return the L4RouteInner object itself.
     */
    public L4RouteInner withEnabledState(EnabledState enabledState) {
        if (this.innerProperties() == null) {
            this.innerProperties = new L4RouteProperties();
        }
        this.innerProperties().withEnabledState(enabledState);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
