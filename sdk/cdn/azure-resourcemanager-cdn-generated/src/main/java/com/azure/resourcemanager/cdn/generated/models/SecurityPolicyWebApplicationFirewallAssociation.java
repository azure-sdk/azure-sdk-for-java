// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cdn.generated.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** settings for security policy patterns to match. */
@Fluent
public final class SecurityPolicyWebApplicationFirewallAssociation {
    /*
     * Flag to signal whether the WAF policy association is at the default Profile level.
     */
    @JsonProperty(value = "IsProfileLevel")
    private SecurityPolicyWebApplicationFirewallAssociationIsProfileLevel isProfileLevel;

    /*
     * List of domains.
     */
    @JsonProperty(value = "domains")
    private List<ActivatedResourceReference> domains;

    /*
     * List of routes.
     */
    @JsonProperty(value = "routes")
    private List<ResourceReference> routes;

    /*
     * List of paths
     */
    @JsonProperty(value = "patternsToMatch")
    private List<String> patternsToMatch;

    /** Creates an instance of SecurityPolicyWebApplicationFirewallAssociation class. */
    public SecurityPolicyWebApplicationFirewallAssociation() {
    }

    /**
     * Get the isProfileLevel property: Flag to signal whether the WAF policy association is at the default Profile
     * level.
     *
     * @return the isProfileLevel value.
     */
    public SecurityPolicyWebApplicationFirewallAssociationIsProfileLevel isProfileLevel() {
        return this.isProfileLevel;
    }

    /**
     * Set the isProfileLevel property: Flag to signal whether the WAF policy association is at the default Profile
     * level.
     *
     * @param isProfileLevel the isProfileLevel value to set.
     * @return the SecurityPolicyWebApplicationFirewallAssociation object itself.
     */
    public SecurityPolicyWebApplicationFirewallAssociation withIsProfileLevel(
        SecurityPolicyWebApplicationFirewallAssociationIsProfileLevel isProfileLevel) {
        this.isProfileLevel = isProfileLevel;
        return this;
    }

    /**
     * Get the domains property: List of domains.
     *
     * @return the domains value.
     */
    public List<ActivatedResourceReference> domains() {
        return this.domains;
    }

    /**
     * Set the domains property: List of domains.
     *
     * @param domains the domains value to set.
     * @return the SecurityPolicyWebApplicationFirewallAssociation object itself.
     */
    public SecurityPolicyWebApplicationFirewallAssociation withDomains(List<ActivatedResourceReference> domains) {
        this.domains = domains;
        return this;
    }

    /**
     * Get the routes property: List of routes.
     *
     * @return the routes value.
     */
    public List<ResourceReference> routes() {
        return this.routes;
    }

    /**
     * Set the routes property: List of routes.
     *
     * @param routes the routes value to set.
     * @return the SecurityPolicyWebApplicationFirewallAssociation object itself.
     */
    public SecurityPolicyWebApplicationFirewallAssociation withRoutes(List<ResourceReference> routes) {
        this.routes = routes;
        return this;
    }

    /**
     * Get the patternsToMatch property: List of paths.
     *
     * @return the patternsToMatch value.
     */
    public List<String> patternsToMatch() {
        return this.patternsToMatch;
    }

    /**
     * Set the patternsToMatch property: List of paths.
     *
     * @param patternsToMatch the patternsToMatch value to set.
     * @return the SecurityPolicyWebApplicationFirewallAssociation object itself.
     */
    public SecurityPolicyWebApplicationFirewallAssociation withPatternsToMatch(List<String> patternsToMatch) {
        this.patternsToMatch = patternsToMatch;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (domains() != null) {
            domains().forEach(e -> e.validate());
        }
        if (routes() != null) {
            routes().forEach(e -> e.validate());
        }
    }
}
