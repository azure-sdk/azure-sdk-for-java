// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cdn.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Customized cipher suite set object that will be used for Https when cipherSuiteSetType is Customized.
 */
@Fluent
public final class AfdDomainHttpsCustomizedCipherSuiteSet
    implements JsonSerializable<AfdDomainHttpsCustomizedCipherSuiteSet> {
    /*
     * Cipher suites for TLS 1.2. Required at least one in minimumTlsVersion TLS 1.2.
     */
    private List<AfdCustomizedCipherSuiteForTls12> cipherSuiteSetForTls12;

    /*
     * Cipher suites for TLS 1.3. Required at least one in minimumTlsVersion TLS 1.2, TLS 1.3.
     */
    private List<AfdCustomizedCipherSuiteForTls13> cipherSuiteSetForTls13;

    /**
     * Creates an instance of AfdDomainHttpsCustomizedCipherSuiteSet class.
     */
    public AfdDomainHttpsCustomizedCipherSuiteSet() {
    }

    /**
     * Get the cipherSuiteSetForTls12 property: Cipher suites for TLS 1.2. Required at least one in minimumTlsVersion
     * TLS 1.2.
     * 
     * @return the cipherSuiteSetForTls12 value.
     */
    public List<AfdCustomizedCipherSuiteForTls12> cipherSuiteSetForTls12() {
        return this.cipherSuiteSetForTls12;
    }

    /**
     * Set the cipherSuiteSetForTls12 property: Cipher suites for TLS 1.2. Required at least one in minimumTlsVersion
     * TLS 1.2.
     * 
     * @param cipherSuiteSetForTls12 the cipherSuiteSetForTls12 value to set.
     * @return the AfdDomainHttpsCustomizedCipherSuiteSet object itself.
     */
    public AfdDomainHttpsCustomizedCipherSuiteSet
        withCipherSuiteSetForTls12(List<AfdCustomizedCipherSuiteForTls12> cipherSuiteSetForTls12) {
        this.cipherSuiteSetForTls12 = cipherSuiteSetForTls12;
        return this;
    }

    /**
     * Get the cipherSuiteSetForTls13 property: Cipher suites for TLS 1.3. Required at least one in minimumTlsVersion
     * TLS 1.2, TLS 1.3.
     * 
     * @return the cipherSuiteSetForTls13 value.
     */
    public List<AfdCustomizedCipherSuiteForTls13> cipherSuiteSetForTls13() {
        return this.cipherSuiteSetForTls13;
    }

    /**
     * Set the cipherSuiteSetForTls13 property: Cipher suites for TLS 1.3. Required at least one in minimumTlsVersion
     * TLS 1.2, TLS 1.3.
     * 
     * @param cipherSuiteSetForTls13 the cipherSuiteSetForTls13 value to set.
     * @return the AfdDomainHttpsCustomizedCipherSuiteSet object itself.
     */
    public AfdDomainHttpsCustomizedCipherSuiteSet
        withCipherSuiteSetForTls13(List<AfdCustomizedCipherSuiteForTls13> cipherSuiteSetForTls13) {
        this.cipherSuiteSetForTls13 = cipherSuiteSetForTls13;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("cipherSuiteSetForTls12", this.cipherSuiteSetForTls12,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        jsonWriter.writeArrayField("cipherSuiteSetForTls13", this.cipherSuiteSetForTls13,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AfdDomainHttpsCustomizedCipherSuiteSet from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AfdDomainHttpsCustomizedCipherSuiteSet if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AfdDomainHttpsCustomizedCipherSuiteSet.
     */
    public static AfdDomainHttpsCustomizedCipherSuiteSet fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AfdDomainHttpsCustomizedCipherSuiteSet deserializedAfdDomainHttpsCustomizedCipherSuiteSet
                = new AfdDomainHttpsCustomizedCipherSuiteSet();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("cipherSuiteSetForTls12".equals(fieldName)) {
                    List<AfdCustomizedCipherSuiteForTls12> cipherSuiteSetForTls12
                        = reader.readArray(reader1 -> AfdCustomizedCipherSuiteForTls12.fromString(reader1.getString()));
                    deserializedAfdDomainHttpsCustomizedCipherSuiteSet.cipherSuiteSetForTls12 = cipherSuiteSetForTls12;
                } else if ("cipherSuiteSetForTls13".equals(fieldName)) {
                    List<AfdCustomizedCipherSuiteForTls13> cipherSuiteSetForTls13
                        = reader.readArray(reader1 -> AfdCustomizedCipherSuiteForTls13.fromString(reader1.getString()));
                    deserializedAfdDomainHttpsCustomizedCipherSuiteSet.cipherSuiteSetForTls13 = cipherSuiteSetForTls13;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAfdDomainHttpsCustomizedCipherSuiteSet;
        });
    }
}
