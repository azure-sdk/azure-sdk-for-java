// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cdn.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.cdn.generated.fluent.L4RoutesClient;
import com.azure.resourcemanager.cdn.generated.fluent.models.L4RouteInner;
import com.azure.resourcemanager.cdn.generated.models.L4Route;
import com.azure.resourcemanager.cdn.generated.models.L4Routes;

public final class L4RoutesImpl implements L4Routes {
    private static final ClientLogger LOGGER = new ClientLogger(L4RoutesImpl.class);

    private final L4RoutesClient innerClient;

    private final com.azure.resourcemanager.cdn.generated.CdnManager serviceManager;

    public L4RoutesImpl(L4RoutesClient innerClient, com.azure.resourcemanager.cdn.generated.CdnManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<L4Route> listByEndpoint(String resourceGroupName, String profileName, String endpointName) {
        PagedIterable<L4RouteInner> inner =
            this.serviceClient().listByEndpoint(resourceGroupName, profileName, endpointName);
        return Utils.mapPage(inner, inner1 -> new L4RouteImpl(inner1, this.manager()));
    }

    public PagedIterable<L4Route> listByEndpoint(
        String resourceGroupName, String profileName, String endpointName, Context context) {
        PagedIterable<L4RouteInner> inner =
            this.serviceClient().listByEndpoint(resourceGroupName, profileName, endpointName, context);
        return Utils.mapPage(inner, inner1 -> new L4RouteImpl(inner1, this.manager()));
    }

    public Response<L4Route> getWithResponse(
        String resourceGroupName, String profileName, String endpointName, String routeName, Context context) {
        Response<L4RouteInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, profileName, endpointName, routeName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new L4RouteImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public L4Route get(String resourceGroupName, String profileName, String endpointName, String routeName) {
        L4RouteInner inner = this.serviceClient().get(resourceGroupName, profileName, endpointName, routeName);
        if (inner != null) {
            return new L4RouteImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String profileName, String endpointName, String routeName) {
        this.serviceClient().delete(resourceGroupName, profileName, endpointName, routeName);
    }

    public void delete(
        String resourceGroupName, String profileName, String endpointName, String routeName, Context context) {
        this.serviceClient().delete(resourceGroupName, profileName, endpointName, routeName, context);
    }

    public L4Route getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String profileName = Utils.getValueFromIdByName(id, "profiles");
        if (profileName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'profiles'.", id)));
        }
        String endpointName = Utils.getValueFromIdByName(id, "afdEndpoints");
        if (endpointName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'afdEndpoints'.", id)));
        }
        String routeName = Utils.getValueFromIdByName(id, "l4routes");
        if (routeName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'l4routes'.", id)));
        }
        return this.getWithResponse(resourceGroupName, profileName, endpointName, routeName, Context.NONE).getValue();
    }

    public Response<L4Route> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String profileName = Utils.getValueFromIdByName(id, "profiles");
        if (profileName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'profiles'.", id)));
        }
        String endpointName = Utils.getValueFromIdByName(id, "afdEndpoints");
        if (endpointName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'afdEndpoints'.", id)));
        }
        String routeName = Utils.getValueFromIdByName(id, "l4routes");
        if (routeName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'l4routes'.", id)));
        }
        return this.getWithResponse(resourceGroupName, profileName, endpointName, routeName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String profileName = Utils.getValueFromIdByName(id, "profiles");
        if (profileName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'profiles'.", id)));
        }
        String endpointName = Utils.getValueFromIdByName(id, "afdEndpoints");
        if (endpointName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'afdEndpoints'.", id)));
        }
        String routeName = Utils.getValueFromIdByName(id, "l4routes");
        if (routeName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'l4routes'.", id)));
        }
        this.delete(resourceGroupName, profileName, endpointName, routeName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String profileName = Utils.getValueFromIdByName(id, "profiles");
        if (profileName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'profiles'.", id)));
        }
        String endpointName = Utils.getValueFromIdByName(id, "afdEndpoints");
        if (endpointName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'afdEndpoints'.", id)));
        }
        String routeName = Utils.getValueFromIdByName(id, "l4routes");
        if (routeName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'l4routes'.", id)));
        }
        this.delete(resourceGroupName, profileName, endpointName, routeName, context);
    }

    private L4RoutesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.cdn.generated.CdnManager manager() {
        return this.serviceManager;
    }

    public L4RouteImpl define(String name) {
        return new L4RouteImpl(name, this.manager());
    }
}
