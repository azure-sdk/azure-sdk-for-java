// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybriddatamanager.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.hybriddatamanager.models.DmsBaseObject;
import com.azure.resourcemanager.hybriddatamanager.models.State;
import java.io.IOException;
import java.util.List;

/**
 * Data Store Type.
 */
@Fluent
public final class DataStoreTypeInner extends DmsBaseObject {
    /*
     * DataStoreType properties.
     */
    private DataStoreTypeProperties innerProperties = new DataStoreTypeProperties();

    /*
     * Type of the object.
     */
    private String type;

    /*
     * Id of the object.
     */
    private String id;

    /*
     * Name of the object.
     */
    private String name;

    /**
     * Creates an instance of DataStoreTypeInner class.
     */
    public DataStoreTypeInner() {
    }

    /**
     * Get the innerProperties property: DataStoreType properties.
     * 
     * @return the innerProperties value.
     */
    private DataStoreTypeProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the type property: Type of the object.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the id property: Id of the object.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the name property: Name of the object.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the repositoryType property: Arm type for the manager resource to which the data source type is associated.
     * This is optional.
     * 
     * @return the repositoryType value.
     */
    public String repositoryType() {
        return this.innerProperties() == null ? null : this.innerProperties().repositoryType();
    }

    /**
     * Set the repositoryType property: Arm type for the manager resource to which the data source type is associated.
     * This is optional.
     * 
     * @param repositoryType the repositoryType value to set.
     * @return the DataStoreTypeInner object itself.
     */
    public DataStoreTypeInner withRepositoryType(String repositoryType) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DataStoreTypeProperties();
        }
        this.innerProperties().withRepositoryType(repositoryType);
        return this;
    }

    /**
     * Get the state property: State of the data store type.
     * 
     * @return the state value.
     */
    public State state() {
        return this.innerProperties() == null ? null : this.innerProperties().state();
    }

    /**
     * Set the state property: State of the data store type.
     * 
     * @param state the state value to set.
     * @return the DataStoreTypeInner object itself.
     */
    public DataStoreTypeInner withState(State state) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DataStoreTypeProperties();
        }
        this.innerProperties().withState(state);
        return this;
    }

    /**
     * Get the supportedDataServicesAsSink property: Supported data services where it can be used as a sink.
     * 
     * @return the supportedDataServicesAsSink value.
     */
    public List<String> supportedDataServicesAsSink() {
        return this.innerProperties() == null ? null : this.innerProperties().supportedDataServicesAsSink();
    }

    /**
     * Set the supportedDataServicesAsSink property: Supported data services where it can be used as a sink.
     * 
     * @param supportedDataServicesAsSink the supportedDataServicesAsSink value to set.
     * @return the DataStoreTypeInner object itself.
     */
    public DataStoreTypeInner withSupportedDataServicesAsSink(List<String> supportedDataServicesAsSink) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DataStoreTypeProperties();
        }
        this.innerProperties().withSupportedDataServicesAsSink(supportedDataServicesAsSink);
        return this;
    }

    /**
     * Get the supportedDataServicesAsSource property: Supported data services where it can be used as a source.
     * 
     * @return the supportedDataServicesAsSource value.
     */
    public List<String> supportedDataServicesAsSource() {
        return this.innerProperties() == null ? null : this.innerProperties().supportedDataServicesAsSource();
    }

    /**
     * Set the supportedDataServicesAsSource property: Supported data services where it can be used as a source.
     * 
     * @param supportedDataServicesAsSource the supportedDataServicesAsSource value to set.
     * @return the DataStoreTypeInner object itself.
     */
    public DataStoreTypeInner withSupportedDataServicesAsSource(List<String> supportedDataServicesAsSource) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DataStoreTypeProperties();
        }
        this.innerProperties().withSupportedDataServicesAsSource(supportedDataServicesAsSource);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (innerProperties() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property innerProperties in model DataStoreTypeInner"));
        } else {
            innerProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DataStoreTypeInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DataStoreTypeInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DataStoreTypeInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DataStoreTypeInner.
     */
    public static DataStoreTypeInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DataStoreTypeInner deserializedDataStoreTypeInner = new DataStoreTypeInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedDataStoreTypeInner.name = reader.getString();
                } else if ("id".equals(fieldName)) {
                    deserializedDataStoreTypeInner.id = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedDataStoreTypeInner.type = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedDataStoreTypeInner.innerProperties = DataStoreTypeProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDataStoreTypeInner;
        });
    }
}
