// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybriddatamanager.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.hybriddatamanager.models.DmsBaseObject;
import com.azure.resourcemanager.hybriddatamanager.models.Error;
import com.azure.resourcemanager.hybriddatamanager.models.IsJobCancellable;
import com.azure.resourcemanager.hybriddatamanager.models.JobStatus;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;

/** Data service job. */
@Fluent
public final class JobInner extends DmsBaseObject {
    /*
     * Status of the job.
     */
    @JsonProperty(value = "status", required = true)
    private JobStatus status;

    /*
     * Time at which the job was started in UTC ISO 8601 format.
     */
    @JsonProperty(value = "startTime", required = true)
    private OffsetDateTime startTime;

    /*
     * Time at which the job ended in UTC ISO 8601 format.
     */
    @JsonProperty(value = "endTime")
    private OffsetDateTime endTime;

    /*
     * Job properties.
     */
    @JsonProperty(value = "properties", required = true)
    private JobPropertiesInner innerProperties = new JobPropertiesInner();

    /*
     * Top level error for the job.
     */
    @JsonProperty(value = "error")
    private Error error;

    /**
     * Get the status property: Status of the job.
     *
     * @return the status value.
     */
    public JobStatus status() {
        return this.status;
    }

    /**
     * Set the status property: Status of the job.
     *
     * @param status the status value to set.
     * @return the JobInner object itself.
     */
    public JobInner withStatus(JobStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Get the startTime property: Time at which the job was started in UTC ISO 8601 format.
     *
     * @return the startTime value.
     */
    public OffsetDateTime startTime() {
        return this.startTime;
    }

    /**
     * Set the startTime property: Time at which the job was started in UTC ISO 8601 format.
     *
     * @param startTime the startTime value to set.
     * @return the JobInner object itself.
     */
    public JobInner withStartTime(OffsetDateTime startTime) {
        this.startTime = startTime;
        return this;
    }

    /**
     * Get the endTime property: Time at which the job ended in UTC ISO 8601 format.
     *
     * @return the endTime value.
     */
    public OffsetDateTime endTime() {
        return this.endTime;
    }

    /**
     * Set the endTime property: Time at which the job ended in UTC ISO 8601 format.
     *
     * @param endTime the endTime value to set.
     * @return the JobInner object itself.
     */
    public JobInner withEndTime(OffsetDateTime endTime) {
        this.endTime = endTime;
        return this;
    }

    /**
     * Get the innerProperties property: Job properties.
     *
     * @return the innerProperties value.
     */
    private JobPropertiesInner innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the error property: Top level error for the job.
     *
     * @return the error value.
     */
    public Error error() {
        return this.error;
    }

    /**
     * Set the error property: Top level error for the job.
     *
     * @param error the error value to set.
     * @return the JobInner object itself.
     */
    public JobInner withError(Error error) {
        this.error = error;
        return this;
    }

    /**
     * Get the isCancellable property: Describes whether the job is cancellable.
     *
     * @return the isCancellable value.
     */
    public IsJobCancellable isCancellable() {
        return this.innerProperties() == null ? null : this.innerProperties().isCancellable();
    }

    /**
     * Set the isCancellable property: Describes whether the job is cancellable.
     *
     * @param isCancellable the isCancellable value to set.
     * @return the JobInner object itself.
     */
    public JobInner withIsCancellable(IsJobCancellable isCancellable) {
        if (this.innerProperties() == null) {
            this.innerProperties = new JobPropertiesInner();
        }
        this.innerProperties().withIsCancellable(isCancellable);
        return this;
    }

    /**
     * Get the bytesProcessed property: Number of bytes processed by the job as of now.
     *
     * @return the bytesProcessed value.
     */
    public Long bytesProcessed() {
        return this.innerProperties() == null ? null : this.innerProperties().bytesProcessed();
    }

    /**
     * Set the bytesProcessed property: Number of bytes processed by the job as of now.
     *
     * @param bytesProcessed the bytesProcessed value to set.
     * @return the JobInner object itself.
     */
    public JobInner withBytesProcessed(Long bytesProcessed) {
        if (this.innerProperties() == null) {
            this.innerProperties = new JobPropertiesInner();
        }
        this.innerProperties().withBytesProcessed(bytesProcessed);
        return this;
    }

    /**
     * Get the itemsProcessed property: Number of items processed by the job as of now.
     *
     * @return the itemsProcessed value.
     */
    public Long itemsProcessed() {
        return this.innerProperties() == null ? null : this.innerProperties().itemsProcessed();
    }

    /**
     * Set the itemsProcessed property: Number of items processed by the job as of now.
     *
     * @param itemsProcessed the itemsProcessed value to set.
     * @return the JobInner object itself.
     */
    public JobInner withItemsProcessed(Long itemsProcessed) {
        if (this.innerProperties() == null) {
            this.innerProperties = new JobPropertiesInner();
        }
        this.innerProperties().withItemsProcessed(itemsProcessed);
        return this;
    }

    /**
     * Get the totalBytesToProcess property: Number of bytes to be processed by the job in total.
     *
     * @return the totalBytesToProcess value.
     */
    public Long totalBytesToProcess() {
        return this.innerProperties() == null ? null : this.innerProperties().totalBytesToProcess();
    }

    /**
     * Set the totalBytesToProcess property: Number of bytes to be processed by the job in total.
     *
     * @param totalBytesToProcess the totalBytesToProcess value to set.
     * @return the JobInner object itself.
     */
    public JobInner withTotalBytesToProcess(Long totalBytesToProcess) {
        if (this.innerProperties() == null) {
            this.innerProperties = new JobPropertiesInner();
        }
        this.innerProperties().withTotalBytesToProcess(totalBytesToProcess);
        return this;
    }

    /**
     * Get the totalItemsToProcess property: Number of items to be processed by the job in total.
     *
     * @return the totalItemsToProcess value.
     */
    public Long totalItemsToProcess() {
        return this.innerProperties() == null ? null : this.innerProperties().totalItemsToProcess();
    }

    /**
     * Set the totalItemsToProcess property: Number of items to be processed by the job in total.
     *
     * @param totalItemsToProcess the totalItemsToProcess value to set.
     * @return the JobInner object itself.
     */
    public JobInner withTotalItemsToProcess(Long totalItemsToProcess) {
        if (this.innerProperties() == null) {
            this.innerProperties = new JobPropertiesInner();
        }
        this.innerProperties().withTotalItemsToProcess(totalItemsToProcess);
        return this;
    }

    /**
     * Get the itemsDeleted property: Number of items deleted by the job as of now.
     *
     * @return the itemsDeleted value.
     */
    public Long itemsDeleted() {
        return this.innerProperties() == null ? null : this.innerProperties().itemsDeleted();
    }

    /**
     * Set the itemsDeleted property: Number of items deleted by the job as of now.
     *
     * @param itemsDeleted the itemsDeleted value to set.
     * @return the JobInner object itself.
     */
    public JobInner withItemsDeleted(Long itemsDeleted) {
        if (this.innerProperties() == null) {
            this.innerProperties = new JobPropertiesInner();
        }
        this.innerProperties().withItemsDeleted(itemsDeleted);
        return this;
    }

    /**
     * Get the totalItemsToDelete property: Number of items to be deleted by the job in total.
     *
     * @return the totalItemsToDelete value.
     */
    public Long totalItemsToDelete() {
        return this.innerProperties() == null ? null : this.innerProperties().totalItemsToDelete();
    }

    /**
     * Set the totalItemsToDelete property: Number of items to be deleted by the job in total.
     *
     * @param totalItemsToDelete the totalItemsToDelete value to set.
     * @return the JobInner object itself.
     */
    public JobInner withTotalItemsToDelete(Long totalItemsToDelete) {
        if (this.innerProperties() == null) {
            this.innerProperties = new JobPropertiesInner();
        }
        this.innerProperties().withTotalItemsToDelete(totalItemsToDelete);
        return this;
    }

    /**
     * Get the filesCopiedCounter property: Of the items copied by the job as of now, how many are files.
     *
     * @return the filesCopiedCounter value.
     */
    public Long filesCopiedCounter() {
        return this.innerProperties() == null ? null : this.innerProperties().filesCopiedCounter();
    }

    /**
     * Set the filesCopiedCounter property: Of the items copied by the job as of now, how many are files.
     *
     * @param filesCopiedCounter the filesCopiedCounter value to set.
     * @return the JobInner object itself.
     */
    public JobInner withFilesCopiedCounter(Long filesCopiedCounter) {
        if (this.innerProperties() == null) {
            this.innerProperties = new JobPropertiesInner();
        }
        this.innerProperties().withFilesCopiedCounter(filesCopiedCounter);
        return this;
    }

    /**
     * Get the filesDeletedCounter property: Of the items deleted by the job as of now, how many are files.
     *
     * @return the filesDeletedCounter value.
     */
    public Long filesDeletedCounter() {
        return this.innerProperties() == null ? null : this.innerProperties().filesDeletedCounter();
    }

    /**
     * Set the filesDeletedCounter property: Of the items deleted by the job as of now, how many are files.
     *
     * @param filesDeletedCounter the filesDeletedCounter value to set.
     * @return the JobInner object itself.
     */
    public JobInner withFilesDeletedCounter(Long filesDeletedCounter) {
        if (this.innerProperties() == null) {
            this.innerProperties = new JobPropertiesInner();
        }
        this.innerProperties().withFilesDeletedCounter(filesDeletedCounter);
        return this;
    }

    /**
     * Get the bytesCopied property: Number of bytes actually copied by the job as of now.
     *
     * @return the bytesCopied value.
     */
    public Long bytesCopied() {
        return this.innerProperties() == null ? null : this.innerProperties().bytesCopied();
    }

    /**
     * Set the bytesCopied property: Number of bytes actually copied by the job as of now.
     *
     * @param bytesCopied the bytesCopied value to set.
     * @return the JobInner object itself.
     */
    public JobInner withBytesCopied(Long bytesCopied) {
        if (this.innerProperties() == null) {
            this.innerProperties = new JobPropertiesInner();
        }
        this.innerProperties().withBytesCopied(bytesCopied);
        return this;
    }

    /**
     * Get the backupStartTime property: Time getting the backup started.
     *
     * @return the backupStartTime value.
     */
    public OffsetDateTime backupStartTime() {
        return this.innerProperties() == null ? null : this.innerProperties().backupStartTime();
    }

    /**
     * Set the backupStartTime property: Time getting the backup started.
     *
     * @param backupStartTime the backupStartTime value to set.
     * @return the JobInner object itself.
     */
    public JobInner withBackupStartTime(OffsetDateTime backupStartTime) {
        if (this.innerProperties() == null) {
            this.innerProperties = new JobPropertiesInner();
        }
        this.innerProperties().withBackupStartTime(backupStartTime);
        return this;
    }

    /**
     * Get the backupEndTime property: Time getting the backup ended.
     *
     * @return the backupEndTime value.
     */
    public OffsetDateTime backupEndTime() {
        return this.innerProperties() == null ? null : this.innerProperties().backupEndTime();
    }

    /**
     * Set the backupEndTime property: Time getting the backup ended.
     *
     * @param backupEndTime the backupEndTime value to set.
     * @return the JobInner object itself.
     */
    public JobInner withBackupEndTime(OffsetDateTime backupEndTime) {
        if (this.innerProperties() == null) {
            this.innerProperties = new JobPropertiesInner();
        }
        this.innerProperties().withBackupEndTime(backupEndTime);
        return this;
    }

    /**
     * Get the estimationConfigureComputeStartTime property: Time configuring compute for estimation stage started.
     *
     * @return the estimationConfigureComputeStartTime value.
     */
    public OffsetDateTime estimationConfigureComputeStartTime() {
        return this.innerProperties() == null ? null : this.innerProperties().estimationConfigureComputeStartTime();
    }

    /**
     * Set the estimationConfigureComputeStartTime property: Time configuring compute for estimation stage started.
     *
     * @param estimationConfigureComputeStartTime the estimationConfigureComputeStartTime value to set.
     * @return the JobInner object itself.
     */
    public JobInner withEstimationConfigureComputeStartTime(OffsetDateTime estimationConfigureComputeStartTime) {
        if (this.innerProperties() == null) {
            this.innerProperties = new JobPropertiesInner();
        }
        this.innerProperties().withEstimationConfigureComputeStartTime(estimationConfigureComputeStartTime);
        return this;
    }

    /**
     * Get the estimationConfigureComputeEndTime property: Time configuring compute for estimation stage ended.
     *
     * @return the estimationConfigureComputeEndTime value.
     */
    public OffsetDateTime estimationConfigureComputeEndTime() {
        return this.innerProperties() == null ? null : this.innerProperties().estimationConfigureComputeEndTime();
    }

    /**
     * Set the estimationConfigureComputeEndTime property: Time configuring compute for estimation stage ended.
     *
     * @param estimationConfigureComputeEndTime the estimationConfigureComputeEndTime value to set.
     * @return the JobInner object itself.
     */
    public JobInner withEstimationConfigureComputeEndTime(OffsetDateTime estimationConfigureComputeEndTime) {
        if (this.innerProperties() == null) {
            this.innerProperties = new JobPropertiesInner();
        }
        this.innerProperties().withEstimationConfigureComputeEndTime(estimationConfigureComputeEndTime);
        return this;
    }

    /**
     * Get the directoryParserStartTime property: Time enumerating source directory started.
     *
     * @return the directoryParserStartTime value.
     */
    public OffsetDateTime directoryParserStartTime() {
        return this.innerProperties() == null ? null : this.innerProperties().directoryParserStartTime();
    }

    /**
     * Set the directoryParserStartTime property: Time enumerating source directory started.
     *
     * @param directoryParserStartTime the directoryParserStartTime value to set.
     * @return the JobInner object itself.
     */
    public JobInner withDirectoryParserStartTime(OffsetDateTime directoryParserStartTime) {
        if (this.innerProperties() == null) {
            this.innerProperties = new JobPropertiesInner();
        }
        this.innerProperties().withDirectoryParserStartTime(directoryParserStartTime);
        return this;
    }

    /**
     * Get the directoryParserEndTime property: Time enumerating source directory ended.
     *
     * @return the directoryParserEndTime value.
     */
    public OffsetDateTime directoryParserEndTime() {
        return this.innerProperties() == null ? null : this.innerProperties().directoryParserEndTime();
    }

    /**
     * Set the directoryParserEndTime property: Time enumerating source directory ended.
     *
     * @param directoryParserEndTime the directoryParserEndTime value to set.
     * @return the JobInner object itself.
     */
    public JobInner withDirectoryParserEndTime(OffsetDateTime directoryParserEndTime) {
        if (this.innerProperties() == null) {
            this.innerProperties = new JobPropertiesInner();
        }
        this.innerProperties().withDirectoryParserEndTime(directoryParserEndTime);
        return this;
    }

    /**
     * Get the purgeDetectionStartTime property: Time enumerating target directory started.
     *
     * @return the purgeDetectionStartTime value.
     */
    public OffsetDateTime purgeDetectionStartTime() {
        return this.innerProperties() == null ? null : this.innerProperties().purgeDetectionStartTime();
    }

    /**
     * Set the purgeDetectionStartTime property: Time enumerating target directory started.
     *
     * @param purgeDetectionStartTime the purgeDetectionStartTime value to set.
     * @return the JobInner object itself.
     */
    public JobInner withPurgeDetectionStartTime(OffsetDateTime purgeDetectionStartTime) {
        if (this.innerProperties() == null) {
            this.innerProperties = new JobPropertiesInner();
        }
        this.innerProperties().withPurgeDetectionStartTime(purgeDetectionStartTime);
        return this;
    }

    /**
     * Get the purgeDetectionEndTime property: Time enumerating target directory ended.
     *
     * @return the purgeDetectionEndTime value.
     */
    public OffsetDateTime purgeDetectionEndTime() {
        return this.innerProperties() == null ? null : this.innerProperties().purgeDetectionEndTime();
    }

    /**
     * Set the purgeDetectionEndTime property: Time enumerating target directory ended.
     *
     * @param purgeDetectionEndTime the purgeDetectionEndTime value to set.
     * @return the JobInner object itself.
     */
    public JobInner withPurgeDetectionEndTime(OffsetDateTime purgeDetectionEndTime) {
        if (this.innerProperties() == null) {
            this.innerProperties = new JobPropertiesInner();
        }
        this.innerProperties().withPurgeDetectionEndTime(purgeDetectionEndTime);
        return this;
    }

    /**
     * Get the estimationStartTime property: Time estimating files started.
     *
     * @return the estimationStartTime value.
     */
    public OffsetDateTime estimationStartTime() {
        return this.innerProperties() == null ? null : this.innerProperties().estimationStartTime();
    }

    /**
     * Set the estimationStartTime property: Time estimating files started.
     *
     * @param estimationStartTime the estimationStartTime value to set.
     * @return the JobInner object itself.
     */
    public JobInner withEstimationStartTime(OffsetDateTime estimationStartTime) {
        if (this.innerProperties() == null) {
            this.innerProperties = new JobPropertiesInner();
        }
        this.innerProperties().withEstimationStartTime(estimationStartTime);
        return this;
    }

    /**
     * Get the estimationEndTime property: Time estimating files ended.
     *
     * @return the estimationEndTime value.
     */
    public OffsetDateTime estimationEndTime() {
        return this.innerProperties() == null ? null : this.innerProperties().estimationEndTime();
    }

    /**
     * Set the estimationEndTime property: Time estimating files ended.
     *
     * @param estimationEndTime the estimationEndTime value to set.
     * @return the JobInner object itself.
     */
    public JobInner withEstimationEndTime(OffsetDateTime estimationEndTime) {
        if (this.innerProperties() == null) {
            this.innerProperties = new JobPropertiesInner();
        }
        this.innerProperties().withEstimationEndTime(estimationEndTime);
        return this;
    }

    /**
     * Get the postEstimationStartTime property: Time deleting excess files started.
     *
     * @return the postEstimationStartTime value.
     */
    public OffsetDateTime postEstimationStartTime() {
        return this.innerProperties() == null ? null : this.innerProperties().postEstimationStartTime();
    }

    /**
     * Set the postEstimationStartTime property: Time deleting excess files started.
     *
     * @param postEstimationStartTime the postEstimationStartTime value to set.
     * @return the JobInner object itself.
     */
    public JobInner withPostEstimationStartTime(OffsetDateTime postEstimationStartTime) {
        if (this.innerProperties() == null) {
            this.innerProperties = new JobPropertiesInner();
        }
        this.innerProperties().withPostEstimationStartTime(postEstimationStartTime);
        return this;
    }

    /**
     * Get the postEstimationEndTime property: Time deleting excess files ended.
     *
     * @return the postEstimationEndTime value.
     */
    public OffsetDateTime postEstimationEndTime() {
        return this.innerProperties() == null ? null : this.innerProperties().postEstimationEndTime();
    }

    /**
     * Set the postEstimationEndTime property: Time deleting excess files ended.
     *
     * @param postEstimationEndTime the postEstimationEndTime value to set.
     * @return the JobInner object itself.
     */
    public JobInner withPostEstimationEndTime(OffsetDateTime postEstimationEndTime) {
        if (this.innerProperties() == null) {
            this.innerProperties = new JobPropertiesInner();
        }
        this.innerProperties().withPostEstimationEndTime(postEstimationEndTime);
        return this;
    }

    /**
     * Get the copyConfigureComputeStartTime property: Time configuring compute for copy stage started.
     *
     * @return the copyConfigureComputeStartTime value.
     */
    public OffsetDateTime copyConfigureComputeStartTime() {
        return this.innerProperties() == null ? null : this.innerProperties().copyConfigureComputeStartTime();
    }

    /**
     * Set the copyConfigureComputeStartTime property: Time configuring compute for copy stage started.
     *
     * @param copyConfigureComputeStartTime the copyConfigureComputeStartTime value to set.
     * @return the JobInner object itself.
     */
    public JobInner withCopyConfigureComputeStartTime(OffsetDateTime copyConfigureComputeStartTime) {
        if (this.innerProperties() == null) {
            this.innerProperties = new JobPropertiesInner();
        }
        this.innerProperties().withCopyConfigureComputeStartTime(copyConfigureComputeStartTime);
        return this;
    }

    /**
     * Get the copyConfigureComputeEndTime property: Time configuring compute for copy stage ended.
     *
     * @return the copyConfigureComputeEndTime value.
     */
    public OffsetDateTime copyConfigureComputeEndTime() {
        return this.innerProperties() == null ? null : this.innerProperties().copyConfigureComputeEndTime();
    }

    /**
     * Set the copyConfigureComputeEndTime property: Time configuring compute for copy stage ended.
     *
     * @param copyConfigureComputeEndTime the copyConfigureComputeEndTime value to set.
     * @return the JobInner object itself.
     */
    public JobInner withCopyConfigureComputeEndTime(OffsetDateTime copyConfigureComputeEndTime) {
        if (this.innerProperties() == null) {
            this.innerProperties = new JobPropertiesInner();
        }
        this.innerProperties().withCopyConfigureComputeEndTime(copyConfigureComputeEndTime);
        return this;
    }

    /**
     * Get the copyStartTime property: Time copying files started.
     *
     * @return the copyStartTime value.
     */
    public OffsetDateTime copyStartTime() {
        return this.innerProperties() == null ? null : this.innerProperties().copyStartTime();
    }

    /**
     * Set the copyStartTime property: Time copying files started.
     *
     * @param copyStartTime the copyStartTime value to set.
     * @return the JobInner object itself.
     */
    public JobInner withCopyStartTime(OffsetDateTime copyStartTime) {
        if (this.innerProperties() == null) {
            this.innerProperties = new JobPropertiesInner();
        }
        this.innerProperties().withCopyStartTime(copyStartTime);
        return this;
    }

    /**
     * Get the copyEndTime property: Time copying files ended.
     *
     * @return the copyEndTime value.
     */
    public OffsetDateTime copyEndTime() {
        return this.innerProperties() == null ? null : this.innerProperties().copyEndTime();
    }

    /**
     * Set the copyEndTime property: Time copying files ended.
     *
     * @param copyEndTime the copyEndTime value to set.
     * @return the JobInner object itself.
     */
    public JobInner withCopyEndTime(OffsetDateTime copyEndTime) {
        if (this.innerProperties() == null) {
            this.innerProperties = new JobPropertiesInner();
        }
        this.innerProperties().withCopyEndTime(copyEndTime);
        return this;
    }

    /**
     * Get the postCopyStartTime property: Time copying logs and creating share snapshot started.
     *
     * @return the postCopyStartTime value.
     */
    public OffsetDateTime postCopyStartTime() {
        return this.innerProperties() == null ? null : this.innerProperties().postCopyStartTime();
    }

    /**
     * Set the postCopyStartTime property: Time copying logs and creating share snapshot started.
     *
     * @param postCopyStartTime the postCopyStartTime value to set.
     * @return the JobInner object itself.
     */
    public JobInner withPostCopyStartTime(OffsetDateTime postCopyStartTime) {
        if (this.innerProperties() == null) {
            this.innerProperties = new JobPropertiesInner();
        }
        this.innerProperties().withPostCopyStartTime(postCopyStartTime);
        return this;
    }

    /**
     * Get the postCopyEndTime property: Time copying logs and creating share snapshot ended.
     *
     * @return the postCopyEndTime value.
     */
    public OffsetDateTime postCopyEndTime() {
        return this.innerProperties() == null ? null : this.innerProperties().postCopyEndTime();
    }

    /**
     * Set the postCopyEndTime property: Time copying logs and creating share snapshot ended.
     *
     * @param postCopyEndTime the postCopyEndTime value to set.
     * @return the JobInner object itself.
     */
    public JobInner withPostCopyEndTime(OffsetDateTime postCopyEndTime) {
        if (this.innerProperties() == null) {
            this.innerProperties = new JobPropertiesInner();
        }
        this.innerProperties().withPostCopyEndTime(postCopyEndTime);
        return this;
    }

    /**
     * Get the cleanupComputeStartTime property: Time cleaning up compute started.
     *
     * @return the cleanupComputeStartTime value.
     */
    public OffsetDateTime cleanupComputeStartTime() {
        return this.innerProperties() == null ? null : this.innerProperties().cleanupComputeStartTime();
    }

    /**
     * Set the cleanupComputeStartTime property: Time cleaning up compute started.
     *
     * @param cleanupComputeStartTime the cleanupComputeStartTime value to set.
     * @return the JobInner object itself.
     */
    public JobInner withCleanupComputeStartTime(OffsetDateTime cleanupComputeStartTime) {
        if (this.innerProperties() == null) {
            this.innerProperties = new JobPropertiesInner();
        }
        this.innerProperties().withCleanupComputeStartTime(cleanupComputeStartTime);
        return this;
    }

    /**
     * Get the cleanupComputeEndTime property: Time cleaning up compute ended.
     *
     * @return the cleanupComputeEndTime value.
     */
    public OffsetDateTime cleanupComputeEndTime() {
        return this.innerProperties() == null ? null : this.innerProperties().cleanupComputeEndTime();
    }

    /**
     * Set the cleanupComputeEndTime property: Time cleaning up compute ended.
     *
     * @param cleanupComputeEndTime the cleanupComputeEndTime value to set.
     * @return the JobInner object itself.
     */
    public JobInner withCleanupComputeEndTime(OffsetDateTime cleanupComputeEndTime) {
        if (this.innerProperties() == null) {
            this.innerProperties = new JobPropertiesInner();
        }
        this.innerProperties().withCleanupComputeEndTime(cleanupComputeEndTime);
        return this;
    }

    /**
     * Get the details property: Details of a job run. This field will only be sent for expand details filter.
     *
     * @return the details value.
     */
    public JobDetailsInner details() {
        return this.innerProperties() == null ? null : this.innerProperties().details();
    }

    /**
     * Set the details property: Details of a job run. This field will only be sent for expand details filter.
     *
     * @param details the details value to set.
     * @return the JobInner object itself.
     */
    public JobInner withDetails(JobDetailsInner details) {
        if (this.innerProperties() == null) {
            this.innerProperties = new JobPropertiesInner();
        }
        this.innerProperties().withDetails(details);
        return this;
    }

    /**
     * Get the dataSourceName property: Name of the data source on which the job was triggered.
     *
     * @return the dataSourceName value.
     */
    public String dataSourceName() {
        return this.innerProperties() == null ? null : this.innerProperties().dataSourceName();
    }

    /**
     * Set the dataSourceName property: Name of the data source on which the job was triggered.
     *
     * @param dataSourceName the dataSourceName value to set.
     * @return the JobInner object itself.
     */
    public JobInner withDataSourceName(String dataSourceName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new JobPropertiesInner();
        }
        this.innerProperties().withDataSourceName(dataSourceName);
        return this;
    }

    /**
     * Get the dataSinkName property: Name of the data sink on which the job was triggered.
     *
     * @return the dataSinkName value.
     */
    public String dataSinkName() {
        return this.innerProperties() == null ? null : this.innerProperties().dataSinkName();
    }

    /**
     * Set the dataSinkName property: Name of the data sink on which the job was triggered.
     *
     * @param dataSinkName the dataSinkName value to set.
     * @return the JobInner object itself.
     */
    public JobInner withDataSinkName(String dataSinkName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new JobPropertiesInner();
        }
        this.innerProperties().withDataSinkName(dataSinkName);
        return this;
    }

    /**
     * Get the copyErrors property: Number of copy errors.
     *
     * @return the copyErrors value.
     */
    public Long copyErrors() {
        return this.innerProperties() == null ? null : this.innerProperties().copyErrors();
    }

    /**
     * Set the copyErrors property: Number of copy errors.
     *
     * @param copyErrors the copyErrors value to set.
     * @return the JobInner object itself.
     */
    public JobInner withCopyErrors(Long copyErrors) {
        if (this.innerProperties() == null) {
            this.innerProperties = new JobPropertiesInner();
        }
        this.innerProperties().withCopyErrors(copyErrors);
        return this;
    }

    /**
     * Get the unsupportedFiles property: Number of unsupported files.
     *
     * @return the unsupportedFiles value.
     */
    public Long unsupportedFiles() {
        return this.innerProperties() == null ? null : this.innerProperties().unsupportedFiles();
    }

    /**
     * Set the unsupportedFiles property: Number of unsupported files.
     *
     * @param unsupportedFiles the unsupportedFiles value to set.
     * @return the JobInner object itself.
     */
    public JobInner withUnsupportedFiles(Long unsupportedFiles) {
        if (this.innerProperties() == null) {
            this.innerProperties = new JobPropertiesInner();
        }
        this.innerProperties().withUnsupportedFiles(unsupportedFiles);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (status() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property status in model JobInner"));
        }
        if (startTime() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property startTime in model JobInner"));
        }
        if (innerProperties() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property innerProperties in model JobInner"));
        } else {
            innerProperties().validate();
        }
        if (error() != null) {
            error().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(JobInner.class);
}
