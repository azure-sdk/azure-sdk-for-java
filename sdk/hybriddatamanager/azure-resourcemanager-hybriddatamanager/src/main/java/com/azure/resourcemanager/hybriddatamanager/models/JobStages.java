// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybriddatamanager.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Job stages.
 */
@Fluent
public final class JobStages implements JsonSerializable<JobStages> {
    /*
     * Name of the job stage.
     */
    private String stageName;

    /*
     * Status of the job stage.
     */
    private JobStatus stageStatus;

    /*
     * Job Stage Details
     */
    private Object jobStageDetails;

    /*
     * Error details for the stage. This is optional
     */
    private List<ErrorDetails> errorDetails;

    /**
     * Creates an instance of JobStages class.
     */
    public JobStages() {
    }

    /**
     * Get the stageName property: Name of the job stage.
     * 
     * @return the stageName value.
     */
    public String stageName() {
        return this.stageName;
    }

    /**
     * Set the stageName property: Name of the job stage.
     * 
     * @param stageName the stageName value to set.
     * @return the JobStages object itself.
     */
    public JobStages withStageName(String stageName) {
        this.stageName = stageName;
        return this;
    }

    /**
     * Get the stageStatus property: Status of the job stage.
     * 
     * @return the stageStatus value.
     */
    public JobStatus stageStatus() {
        return this.stageStatus;
    }

    /**
     * Set the stageStatus property: Status of the job stage.
     * 
     * @param stageStatus the stageStatus value to set.
     * @return the JobStages object itself.
     */
    public JobStages withStageStatus(JobStatus stageStatus) {
        this.stageStatus = stageStatus;
        return this;
    }

    /**
     * Get the jobStageDetails property: Job Stage Details.
     * 
     * @return the jobStageDetails value.
     */
    public Object jobStageDetails() {
        return this.jobStageDetails;
    }

    /**
     * Set the jobStageDetails property: Job Stage Details.
     * 
     * @param jobStageDetails the jobStageDetails value to set.
     * @return the JobStages object itself.
     */
    public JobStages withJobStageDetails(Object jobStageDetails) {
        this.jobStageDetails = jobStageDetails;
        return this;
    }

    /**
     * Get the errorDetails property: Error details for the stage. This is optional.
     * 
     * @return the errorDetails value.
     */
    public List<ErrorDetails> errorDetails() {
        return this.errorDetails;
    }

    /**
     * Set the errorDetails property: Error details for the stage. This is optional.
     * 
     * @param errorDetails the errorDetails value to set.
     * @return the JobStages object itself.
     */
    public JobStages withErrorDetails(List<ErrorDetails> errorDetails) {
        this.errorDetails = errorDetails;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (stageStatus() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property stageStatus in model JobStages"));
        }
        if (errorDetails() != null) {
            errorDetails().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(JobStages.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("stageStatus", this.stageStatus == null ? null : this.stageStatus.toString());
        jsonWriter.writeStringField("stageName", this.stageName);
        jsonWriter.writeUntypedField("jobStageDetails", this.jobStageDetails);
        jsonWriter.writeArrayField("errorDetails", this.errorDetails, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of JobStages from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of JobStages if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the JobStages.
     */
    public static JobStages fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            JobStages deserializedJobStages = new JobStages();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("stageStatus".equals(fieldName)) {
                    deserializedJobStages.stageStatus = JobStatus.fromString(reader.getString());
                } else if ("stageName".equals(fieldName)) {
                    deserializedJobStages.stageName = reader.getString();
                } else if ("jobStageDetails".equals(fieldName)) {
                    deserializedJobStages.jobStageDetails = reader.readUntyped();
                } else if ("errorDetails".equals(fieldName)) {
                    List<ErrorDetails> errorDetails = reader.readArray(reader1 -> ErrorDetails.fromJson(reader1));
                    deserializedJobStages.errorDetails = errorDetails;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedJobStages;
        });
    }
}
