// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybriddatamanager.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The pair of customer secret.
 */
@Fluent
public final class CustomerSecret implements JsonSerializable<CustomerSecret> {
    /*
     * The identifier to the data service input object which this secret corresponds to.
     */
    private String keyIdentifier;

    /*
     * It contains the encrypted customer secret.
     */
    private String keyValue;

    /*
     * The encryption algorithm used to encrypt data.
     */
    private SupportedAlgorithm algorithm;

    /**
     * Creates an instance of CustomerSecret class.
     */
    public CustomerSecret() {
    }

    /**
     * Get the keyIdentifier property: The identifier to the data service input object which this secret corresponds to.
     * 
     * @return the keyIdentifier value.
     */
    public String keyIdentifier() {
        return this.keyIdentifier;
    }

    /**
     * Set the keyIdentifier property: The identifier to the data service input object which this secret corresponds to.
     * 
     * @param keyIdentifier the keyIdentifier value to set.
     * @return the CustomerSecret object itself.
     */
    public CustomerSecret withKeyIdentifier(String keyIdentifier) {
        this.keyIdentifier = keyIdentifier;
        return this;
    }

    /**
     * Get the keyValue property: It contains the encrypted customer secret.
     * 
     * @return the keyValue value.
     */
    public String keyValue() {
        return this.keyValue;
    }

    /**
     * Set the keyValue property: It contains the encrypted customer secret.
     * 
     * @param keyValue the keyValue value to set.
     * @return the CustomerSecret object itself.
     */
    public CustomerSecret withKeyValue(String keyValue) {
        this.keyValue = keyValue;
        return this;
    }

    /**
     * Get the algorithm property: The encryption algorithm used to encrypt data.
     * 
     * @return the algorithm value.
     */
    public SupportedAlgorithm algorithm() {
        return this.algorithm;
    }

    /**
     * Set the algorithm property: The encryption algorithm used to encrypt data.
     * 
     * @param algorithm the algorithm value to set.
     * @return the CustomerSecret object itself.
     */
    public CustomerSecret withAlgorithm(SupportedAlgorithm algorithm) {
        this.algorithm = algorithm;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (keyIdentifier() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property keyIdentifier in model CustomerSecret"));
        }
        if (keyValue() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property keyValue in model CustomerSecret"));
        }
        if (algorithm() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property algorithm in model CustomerSecret"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(CustomerSecret.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("keyIdentifier", this.keyIdentifier);
        jsonWriter.writeStringField("keyValue", this.keyValue);
        jsonWriter.writeStringField("algorithm", this.algorithm == null ? null : this.algorithm.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CustomerSecret from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CustomerSecret if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CustomerSecret.
     */
    public static CustomerSecret fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CustomerSecret deserializedCustomerSecret = new CustomerSecret();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("keyIdentifier".equals(fieldName)) {
                    deserializedCustomerSecret.keyIdentifier = reader.getString();
                } else if ("keyValue".equals(fieldName)) {
                    deserializedCustomerSecret.keyValue = reader.getString();
                } else if ("algorithm".equals(fieldName)) {
                    deserializedCustomerSecret.algorithm = SupportedAlgorithm.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCustomerSecret;
        });
    }
}
