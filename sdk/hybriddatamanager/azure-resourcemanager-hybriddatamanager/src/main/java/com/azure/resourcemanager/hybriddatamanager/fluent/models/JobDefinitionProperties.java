// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybriddatamanager.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.hybriddatamanager.models.CustomerSecret;
import com.azure.resourcemanager.hybriddatamanager.models.RunLocation;
import com.azure.resourcemanager.hybriddatamanager.models.Schedule;
import com.azure.resourcemanager.hybriddatamanager.models.State;
import com.azure.resourcemanager.hybriddatamanager.models.UserConfirmation;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * Job Definition.
 */
@Fluent
public final class JobDefinitionProperties implements JsonSerializable<JobDefinitionProperties> {
    /*
     * Data Source Id associated to the job definition.
     */
    private String dataSourceId;

    /*
     * Data Sink Id associated to the job definition.
     */
    private String dataSinkId;

    /*
     * Schedule for running the job definition
     */
    private List<Schedule> schedules;

    /*
     * State of the job definition.
     */
    private State state;

    /*
     * Last modified time of the job definition.
     */
    private OffsetDateTime lastModifiedTime;

    /*
     * This is the preferred geo location for the job to run.
     */
    private RunLocation runLocation;

    /*
     * Enum to detect if user confirmation is required. If not passed will default to NotRequired.
     */
    private UserConfirmation userConfirmation;

    /*
     * A generic json used differently by each data service type.
     */
    private Object dataServiceInput;

    /*
     * List of customer secrets containing a key identifier and key value. The key identifier is a way for the specific
     * data source to understand the key. Value contains customer secret encrypted by the encryptionKeys.
     */
    private List<CustomerSecret> customerSecrets;

    /**
     * Creates an instance of JobDefinitionProperties class.
     */
    public JobDefinitionProperties() {
    }

    /**
     * Get the dataSourceId property: Data Source Id associated to the job definition.
     * 
     * @return the dataSourceId value.
     */
    public String dataSourceId() {
        return this.dataSourceId;
    }

    /**
     * Set the dataSourceId property: Data Source Id associated to the job definition.
     * 
     * @param dataSourceId the dataSourceId value to set.
     * @return the JobDefinitionProperties object itself.
     */
    public JobDefinitionProperties withDataSourceId(String dataSourceId) {
        this.dataSourceId = dataSourceId;
        return this;
    }

    /**
     * Get the dataSinkId property: Data Sink Id associated to the job definition.
     * 
     * @return the dataSinkId value.
     */
    public String dataSinkId() {
        return this.dataSinkId;
    }

    /**
     * Set the dataSinkId property: Data Sink Id associated to the job definition.
     * 
     * @param dataSinkId the dataSinkId value to set.
     * @return the JobDefinitionProperties object itself.
     */
    public JobDefinitionProperties withDataSinkId(String dataSinkId) {
        this.dataSinkId = dataSinkId;
        return this;
    }

    /**
     * Get the schedules property: Schedule for running the job definition.
     * 
     * @return the schedules value.
     */
    public List<Schedule> schedules() {
        return this.schedules;
    }

    /**
     * Set the schedules property: Schedule for running the job definition.
     * 
     * @param schedules the schedules value to set.
     * @return the JobDefinitionProperties object itself.
     */
    public JobDefinitionProperties withSchedules(List<Schedule> schedules) {
        this.schedules = schedules;
        return this;
    }

    /**
     * Get the state property: State of the job definition.
     * 
     * @return the state value.
     */
    public State state() {
        return this.state;
    }

    /**
     * Set the state property: State of the job definition.
     * 
     * @param state the state value to set.
     * @return the JobDefinitionProperties object itself.
     */
    public JobDefinitionProperties withState(State state) {
        this.state = state;
        return this;
    }

    /**
     * Get the lastModifiedTime property: Last modified time of the job definition.
     * 
     * @return the lastModifiedTime value.
     */
    public OffsetDateTime lastModifiedTime() {
        return this.lastModifiedTime;
    }

    /**
     * Set the lastModifiedTime property: Last modified time of the job definition.
     * 
     * @param lastModifiedTime the lastModifiedTime value to set.
     * @return the JobDefinitionProperties object itself.
     */
    public JobDefinitionProperties withLastModifiedTime(OffsetDateTime lastModifiedTime) {
        this.lastModifiedTime = lastModifiedTime;
        return this;
    }

    /**
     * Get the runLocation property: This is the preferred geo location for the job to run.
     * 
     * @return the runLocation value.
     */
    public RunLocation runLocation() {
        return this.runLocation;
    }

    /**
     * Set the runLocation property: This is the preferred geo location for the job to run.
     * 
     * @param runLocation the runLocation value to set.
     * @return the JobDefinitionProperties object itself.
     */
    public JobDefinitionProperties withRunLocation(RunLocation runLocation) {
        this.runLocation = runLocation;
        return this;
    }

    /**
     * Get the userConfirmation property: Enum to detect if user confirmation is required. If not passed will default to
     * NotRequired.
     * 
     * @return the userConfirmation value.
     */
    public UserConfirmation userConfirmation() {
        return this.userConfirmation;
    }

    /**
     * Set the userConfirmation property: Enum to detect if user confirmation is required. If not passed will default to
     * NotRequired.
     * 
     * @param userConfirmation the userConfirmation value to set.
     * @return the JobDefinitionProperties object itself.
     */
    public JobDefinitionProperties withUserConfirmation(UserConfirmation userConfirmation) {
        this.userConfirmation = userConfirmation;
        return this;
    }

    /**
     * Get the dataServiceInput property: A generic json used differently by each data service type.
     * 
     * @return the dataServiceInput value.
     */
    public Object dataServiceInput() {
        return this.dataServiceInput;
    }

    /**
     * Set the dataServiceInput property: A generic json used differently by each data service type.
     * 
     * @param dataServiceInput the dataServiceInput value to set.
     * @return the JobDefinitionProperties object itself.
     */
    public JobDefinitionProperties withDataServiceInput(Object dataServiceInput) {
        this.dataServiceInput = dataServiceInput;
        return this;
    }

    /**
     * Get the customerSecrets property: List of customer secrets containing a key identifier and key value. The key
     * identifier is a way for the specific data source to understand the key. Value contains customer secret encrypted
     * by the encryptionKeys.
     * 
     * @return the customerSecrets value.
     */
    public List<CustomerSecret> customerSecrets() {
        return this.customerSecrets;
    }

    /**
     * Set the customerSecrets property: List of customer secrets containing a key identifier and key value. The key
     * identifier is a way for the specific data source to understand the key. Value contains customer secret encrypted
     * by the encryptionKeys.
     * 
     * @param customerSecrets the customerSecrets value to set.
     * @return the JobDefinitionProperties object itself.
     */
    public JobDefinitionProperties withCustomerSecrets(List<CustomerSecret> customerSecrets) {
        this.customerSecrets = customerSecrets;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (dataSourceId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property dataSourceId in model JobDefinitionProperties"));
        }
        if (dataSinkId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property dataSinkId in model JobDefinitionProperties"));
        }
        if (schedules() != null) {
            schedules().forEach(e -> e.validate());
        }
        if (state() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property state in model JobDefinitionProperties"));
        }
        if (customerSecrets() != null) {
            customerSecrets().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(JobDefinitionProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("dataSourceId", this.dataSourceId);
        jsonWriter.writeStringField("dataSinkId", this.dataSinkId);
        jsonWriter.writeStringField("state", this.state == null ? null : this.state.toString());
        jsonWriter.writeArrayField("schedules", this.schedules, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("lastModifiedTime",
            this.lastModifiedTime == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.lastModifiedTime));
        jsonWriter.writeStringField("runLocation", this.runLocation == null ? null : this.runLocation.toString());
        jsonWriter.writeStringField("userConfirmation",
            this.userConfirmation == null ? null : this.userConfirmation.toString());
        jsonWriter.writeUntypedField("dataServiceInput", this.dataServiceInput);
        jsonWriter.writeArrayField("customerSecrets", this.customerSecrets,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of JobDefinitionProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of JobDefinitionProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the JobDefinitionProperties.
     */
    public static JobDefinitionProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            JobDefinitionProperties deserializedJobDefinitionProperties = new JobDefinitionProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("dataSourceId".equals(fieldName)) {
                    deserializedJobDefinitionProperties.dataSourceId = reader.getString();
                } else if ("dataSinkId".equals(fieldName)) {
                    deserializedJobDefinitionProperties.dataSinkId = reader.getString();
                } else if ("state".equals(fieldName)) {
                    deserializedJobDefinitionProperties.state = State.fromString(reader.getString());
                } else if ("schedules".equals(fieldName)) {
                    List<Schedule> schedules = reader.readArray(reader1 -> Schedule.fromJson(reader1));
                    deserializedJobDefinitionProperties.schedules = schedules;
                } else if ("lastModifiedTime".equals(fieldName)) {
                    deserializedJobDefinitionProperties.lastModifiedTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("runLocation".equals(fieldName)) {
                    deserializedJobDefinitionProperties.runLocation = RunLocation.fromString(reader.getString());
                } else if ("userConfirmation".equals(fieldName)) {
                    deserializedJobDefinitionProperties.userConfirmation
                        = UserConfirmation.fromString(reader.getString());
                } else if ("dataServiceInput".equals(fieldName)) {
                    deserializedJobDefinitionProperties.dataServiceInput = reader.readUntyped();
                } else if ("customerSecrets".equals(fieldName)) {
                    List<CustomerSecret> customerSecrets
                        = reader.readArray(reader1 -> CustomerSecret.fromJson(reader1));
                    deserializedJobDefinitionProperties.customerSecrets = customerSecrets;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedJobDefinitionProperties;
        });
    }
}
