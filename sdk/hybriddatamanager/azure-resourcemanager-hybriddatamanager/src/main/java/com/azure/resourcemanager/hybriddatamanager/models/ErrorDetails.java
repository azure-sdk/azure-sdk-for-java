// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybriddatamanager.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Error Details.
 */
@Fluent
public final class ErrorDetails implements JsonSerializable<ErrorDetails> {
    /*
     * Error message.
     */
    private String errorMessage;

    /*
     * Error code.
     */
    private Integer errorCode;

    /*
     * Recommended action for the error.
     */
    private String recommendedAction;

    /*
     * Contains the non localized exception message
     */
    private String exceptionMessage;

    /**
     * Creates an instance of ErrorDetails class.
     */
    public ErrorDetails() {
    }

    /**
     * Get the errorMessage property: Error message.
     * 
     * @return the errorMessage value.
     */
    public String errorMessage() {
        return this.errorMessage;
    }

    /**
     * Set the errorMessage property: Error message.
     * 
     * @param errorMessage the errorMessage value to set.
     * @return the ErrorDetails object itself.
     */
    public ErrorDetails withErrorMessage(String errorMessage) {
        this.errorMessage = errorMessage;
        return this;
    }

    /**
     * Get the errorCode property: Error code.
     * 
     * @return the errorCode value.
     */
    public Integer errorCode() {
        return this.errorCode;
    }

    /**
     * Set the errorCode property: Error code.
     * 
     * @param errorCode the errorCode value to set.
     * @return the ErrorDetails object itself.
     */
    public ErrorDetails withErrorCode(Integer errorCode) {
        this.errorCode = errorCode;
        return this;
    }

    /**
     * Get the recommendedAction property: Recommended action for the error.
     * 
     * @return the recommendedAction value.
     */
    public String recommendedAction() {
        return this.recommendedAction;
    }

    /**
     * Set the recommendedAction property: Recommended action for the error.
     * 
     * @param recommendedAction the recommendedAction value to set.
     * @return the ErrorDetails object itself.
     */
    public ErrorDetails withRecommendedAction(String recommendedAction) {
        this.recommendedAction = recommendedAction;
        return this;
    }

    /**
     * Get the exceptionMessage property: Contains the non localized exception message.
     * 
     * @return the exceptionMessage value.
     */
    public String exceptionMessage() {
        return this.exceptionMessage;
    }

    /**
     * Set the exceptionMessage property: Contains the non localized exception message.
     * 
     * @param exceptionMessage the exceptionMessage value to set.
     * @return the ErrorDetails object itself.
     */
    public ErrorDetails withExceptionMessage(String exceptionMessage) {
        this.exceptionMessage = exceptionMessage;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("errorMessage", this.errorMessage);
        jsonWriter.writeNumberField("errorCode", this.errorCode);
        jsonWriter.writeStringField("recommendedAction", this.recommendedAction);
        jsonWriter.writeStringField("exceptionMessage", this.exceptionMessage);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ErrorDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ErrorDetails if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ErrorDetails.
     */
    public static ErrorDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ErrorDetails deserializedErrorDetails = new ErrorDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("errorMessage".equals(fieldName)) {
                    deserializedErrorDetails.errorMessage = reader.getString();
                } else if ("errorCode".equals(fieldName)) {
                    deserializedErrorDetails.errorCode = reader.getNullable(JsonReader::getInt);
                } else if ("recommendedAction".equals(fieldName)) {
                    deserializedErrorDetails.recommendedAction = reader.getString();
                } else if ("exceptionMessage".equals(fieldName)) {
                    deserializedErrorDetails.exceptionMessage = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedErrorDetails;
        });
    }
}
