// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybriddatamanager.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.hybriddatamanager.models.State;
import java.io.IOException;
import java.util.List;

/**
 * Data Store Type properties.
 */
@Fluent
public final class DataStoreTypeProperties implements JsonSerializable<DataStoreTypeProperties> {
    /*
     * Arm type for the manager resource to which the data source type is associated. This is optional.
     */
    private String repositoryType;

    /*
     * State of the data store type.
     */
    private State state;

    /*
     * Supported data services where it can be used as a sink.
     */
    private List<String> supportedDataServicesAsSink;

    /*
     * Supported data services where it can be used as a source.
     */
    private List<String> supportedDataServicesAsSource;

    /**
     * Creates an instance of DataStoreTypeProperties class.
     */
    public DataStoreTypeProperties() {
    }

    /**
     * Get the repositoryType property: Arm type for the manager resource to which the data source type is associated.
     * This is optional.
     * 
     * @return the repositoryType value.
     */
    public String repositoryType() {
        return this.repositoryType;
    }

    /**
     * Set the repositoryType property: Arm type for the manager resource to which the data source type is associated.
     * This is optional.
     * 
     * @param repositoryType the repositoryType value to set.
     * @return the DataStoreTypeProperties object itself.
     */
    public DataStoreTypeProperties withRepositoryType(String repositoryType) {
        this.repositoryType = repositoryType;
        return this;
    }

    /**
     * Get the state property: State of the data store type.
     * 
     * @return the state value.
     */
    public State state() {
        return this.state;
    }

    /**
     * Set the state property: State of the data store type.
     * 
     * @param state the state value to set.
     * @return the DataStoreTypeProperties object itself.
     */
    public DataStoreTypeProperties withState(State state) {
        this.state = state;
        return this;
    }

    /**
     * Get the supportedDataServicesAsSink property: Supported data services where it can be used as a sink.
     * 
     * @return the supportedDataServicesAsSink value.
     */
    public List<String> supportedDataServicesAsSink() {
        return this.supportedDataServicesAsSink;
    }

    /**
     * Set the supportedDataServicesAsSink property: Supported data services where it can be used as a sink.
     * 
     * @param supportedDataServicesAsSink the supportedDataServicesAsSink value to set.
     * @return the DataStoreTypeProperties object itself.
     */
    public DataStoreTypeProperties withSupportedDataServicesAsSink(List<String> supportedDataServicesAsSink) {
        this.supportedDataServicesAsSink = supportedDataServicesAsSink;
        return this;
    }

    /**
     * Get the supportedDataServicesAsSource property: Supported data services where it can be used as a source.
     * 
     * @return the supportedDataServicesAsSource value.
     */
    public List<String> supportedDataServicesAsSource() {
        return this.supportedDataServicesAsSource;
    }

    /**
     * Set the supportedDataServicesAsSource property: Supported data services where it can be used as a source.
     * 
     * @param supportedDataServicesAsSource the supportedDataServicesAsSource value to set.
     * @return the DataStoreTypeProperties object itself.
     */
    public DataStoreTypeProperties withSupportedDataServicesAsSource(List<String> supportedDataServicesAsSource) {
        this.supportedDataServicesAsSource = supportedDataServicesAsSource;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (state() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property state in model DataStoreTypeProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DataStoreTypeProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("state", this.state == null ? null : this.state.toString());
        jsonWriter.writeStringField("repositoryType", this.repositoryType);
        jsonWriter.writeArrayField("supportedDataServicesAsSink", this.supportedDataServicesAsSink,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("supportedDataServicesAsSource", this.supportedDataServicesAsSource,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DataStoreTypeProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DataStoreTypeProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DataStoreTypeProperties.
     */
    public static DataStoreTypeProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DataStoreTypeProperties deserializedDataStoreTypeProperties = new DataStoreTypeProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("state".equals(fieldName)) {
                    deserializedDataStoreTypeProperties.state = State.fromString(reader.getString());
                } else if ("repositoryType".equals(fieldName)) {
                    deserializedDataStoreTypeProperties.repositoryType = reader.getString();
                } else if ("supportedDataServicesAsSink".equals(fieldName)) {
                    List<String> supportedDataServicesAsSink = reader.readArray(reader1 -> reader1.getString());
                    deserializedDataStoreTypeProperties.supportedDataServicesAsSink = supportedDataServicesAsSink;
                } else if ("supportedDataServicesAsSource".equals(fieldName)) {
                    List<String> supportedDataServicesAsSource = reader.readArray(reader1 -> reader1.getString());
                    deserializedDataStoreTypeProperties.supportedDataServicesAsSource = supportedDataServicesAsSource;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDataStoreTypeProperties;
        });
    }
}
