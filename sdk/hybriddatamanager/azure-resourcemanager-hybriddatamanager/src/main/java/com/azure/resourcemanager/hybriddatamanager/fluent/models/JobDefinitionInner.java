// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybriddatamanager.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.hybriddatamanager.models.CustomerSecret;
import com.azure.resourcemanager.hybriddatamanager.models.DmsBaseObject;
import com.azure.resourcemanager.hybriddatamanager.models.RunLocation;
import com.azure.resourcemanager.hybriddatamanager.models.Schedule;
import com.azure.resourcemanager.hybriddatamanager.models.State;
import com.azure.resourcemanager.hybriddatamanager.models.UserConfirmation;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * Job Definition.
 */
@Fluent
public final class JobDefinitionInner extends DmsBaseObject {
    /*
     * JobDefinition properties.
     */
    private JobDefinitionProperties innerProperties = new JobDefinitionProperties();

    /*
     * Type of the object.
     */
    private String type;

    /*
     * Id of the object.
     */
    private String id;

    /*
     * Name of the object.
     */
    private String name;

    /**
     * Creates an instance of JobDefinitionInner class.
     */
    public JobDefinitionInner() {
    }

    /**
     * Get the innerProperties property: JobDefinition properties.
     * 
     * @return the innerProperties value.
     */
    private JobDefinitionProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the type property: Type of the object.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the id property: Id of the object.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the name property: Name of the object.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the dataSourceId property: Data Source Id associated to the job definition.
     * 
     * @return the dataSourceId value.
     */
    public String dataSourceId() {
        return this.innerProperties() == null ? null : this.innerProperties().dataSourceId();
    }

    /**
     * Set the dataSourceId property: Data Source Id associated to the job definition.
     * 
     * @param dataSourceId the dataSourceId value to set.
     * @return the JobDefinitionInner object itself.
     */
    public JobDefinitionInner withDataSourceId(String dataSourceId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new JobDefinitionProperties();
        }
        this.innerProperties().withDataSourceId(dataSourceId);
        return this;
    }

    /**
     * Get the dataSinkId property: Data Sink Id associated to the job definition.
     * 
     * @return the dataSinkId value.
     */
    public String dataSinkId() {
        return this.innerProperties() == null ? null : this.innerProperties().dataSinkId();
    }

    /**
     * Set the dataSinkId property: Data Sink Id associated to the job definition.
     * 
     * @param dataSinkId the dataSinkId value to set.
     * @return the JobDefinitionInner object itself.
     */
    public JobDefinitionInner withDataSinkId(String dataSinkId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new JobDefinitionProperties();
        }
        this.innerProperties().withDataSinkId(dataSinkId);
        return this;
    }

    /**
     * Get the schedules property: Schedule for running the job definition.
     * 
     * @return the schedules value.
     */
    public List<Schedule> schedules() {
        return this.innerProperties() == null ? null : this.innerProperties().schedules();
    }

    /**
     * Set the schedules property: Schedule for running the job definition.
     * 
     * @param schedules the schedules value to set.
     * @return the JobDefinitionInner object itself.
     */
    public JobDefinitionInner withSchedules(List<Schedule> schedules) {
        if (this.innerProperties() == null) {
            this.innerProperties = new JobDefinitionProperties();
        }
        this.innerProperties().withSchedules(schedules);
        return this;
    }

    /**
     * Get the state property: State of the job definition.
     * 
     * @return the state value.
     */
    public State state() {
        return this.innerProperties() == null ? null : this.innerProperties().state();
    }

    /**
     * Set the state property: State of the job definition.
     * 
     * @param state the state value to set.
     * @return the JobDefinitionInner object itself.
     */
    public JobDefinitionInner withState(State state) {
        if (this.innerProperties() == null) {
            this.innerProperties = new JobDefinitionProperties();
        }
        this.innerProperties().withState(state);
        return this;
    }

    /**
     * Get the lastModifiedTime property: Last modified time of the job definition.
     * 
     * @return the lastModifiedTime value.
     */
    public OffsetDateTime lastModifiedTime() {
        return this.innerProperties() == null ? null : this.innerProperties().lastModifiedTime();
    }

    /**
     * Set the lastModifiedTime property: Last modified time of the job definition.
     * 
     * @param lastModifiedTime the lastModifiedTime value to set.
     * @return the JobDefinitionInner object itself.
     */
    public JobDefinitionInner withLastModifiedTime(OffsetDateTime lastModifiedTime) {
        if (this.innerProperties() == null) {
            this.innerProperties = new JobDefinitionProperties();
        }
        this.innerProperties().withLastModifiedTime(lastModifiedTime);
        return this;
    }

    /**
     * Get the runLocation property: This is the preferred geo location for the job to run.
     * 
     * @return the runLocation value.
     */
    public RunLocation runLocation() {
        return this.innerProperties() == null ? null : this.innerProperties().runLocation();
    }

    /**
     * Set the runLocation property: This is the preferred geo location for the job to run.
     * 
     * @param runLocation the runLocation value to set.
     * @return the JobDefinitionInner object itself.
     */
    public JobDefinitionInner withRunLocation(RunLocation runLocation) {
        if (this.innerProperties() == null) {
            this.innerProperties = new JobDefinitionProperties();
        }
        this.innerProperties().withRunLocation(runLocation);
        return this;
    }

    /**
     * Get the userConfirmation property: Enum to detect if user confirmation is required. If not passed will default to
     * NotRequired.
     * 
     * @return the userConfirmation value.
     */
    public UserConfirmation userConfirmation() {
        return this.innerProperties() == null ? null : this.innerProperties().userConfirmation();
    }

    /**
     * Set the userConfirmation property: Enum to detect if user confirmation is required. If not passed will default to
     * NotRequired.
     * 
     * @param userConfirmation the userConfirmation value to set.
     * @return the JobDefinitionInner object itself.
     */
    public JobDefinitionInner withUserConfirmation(UserConfirmation userConfirmation) {
        if (this.innerProperties() == null) {
            this.innerProperties = new JobDefinitionProperties();
        }
        this.innerProperties().withUserConfirmation(userConfirmation);
        return this;
    }

    /**
     * Get the dataServiceInput property: A generic json used differently by each data service type.
     * 
     * @return the dataServiceInput value.
     */
    public Object dataServiceInput() {
        return this.innerProperties() == null ? null : this.innerProperties().dataServiceInput();
    }

    /**
     * Set the dataServiceInput property: A generic json used differently by each data service type.
     * 
     * @param dataServiceInput the dataServiceInput value to set.
     * @return the JobDefinitionInner object itself.
     */
    public JobDefinitionInner withDataServiceInput(Object dataServiceInput) {
        if (this.innerProperties() == null) {
            this.innerProperties = new JobDefinitionProperties();
        }
        this.innerProperties().withDataServiceInput(dataServiceInput);
        return this;
    }

    /**
     * Get the customerSecrets property: List of customer secrets containing a key identifier and key value. The key
     * identifier is a way for the specific data source to understand the key. Value contains customer secret encrypted
     * by the encryptionKeys.
     * 
     * @return the customerSecrets value.
     */
    public List<CustomerSecret> customerSecrets() {
        return this.innerProperties() == null ? null : this.innerProperties().customerSecrets();
    }

    /**
     * Set the customerSecrets property: List of customer secrets containing a key identifier and key value. The key
     * identifier is a way for the specific data source to understand the key. Value contains customer secret encrypted
     * by the encryptionKeys.
     * 
     * @param customerSecrets the customerSecrets value to set.
     * @return the JobDefinitionInner object itself.
     */
    public JobDefinitionInner withCustomerSecrets(List<CustomerSecret> customerSecrets) {
        if (this.innerProperties() == null) {
            this.innerProperties = new JobDefinitionProperties();
        }
        this.innerProperties().withCustomerSecrets(customerSecrets);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (innerProperties() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property innerProperties in model JobDefinitionInner"));
        } else {
            innerProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(JobDefinitionInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of JobDefinitionInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of JobDefinitionInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the JobDefinitionInner.
     */
    public static JobDefinitionInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            JobDefinitionInner deserializedJobDefinitionInner = new JobDefinitionInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedJobDefinitionInner.name = reader.getString();
                } else if ("id".equals(fieldName)) {
                    deserializedJobDefinitionInner.id = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedJobDefinitionInner.type = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedJobDefinitionInner.innerProperties = JobDefinitionProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedJobDefinitionInner;
        });
    }
}
