// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybriddatamanager.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.hybriddatamanager.models.DmsBaseObject;
import com.azure.resourcemanager.hybriddatamanager.models.Key;
import java.io.IOException;

/**
 * Public key.
 */
@Fluent
public final class PublicKeyInner extends DmsBaseObject {
    /*
     * Public key property.
     */
    private PublicKeyProperties innerProperties = new PublicKeyProperties();

    /*
     * Type of the object.
     */
    private String type;

    /*
     * Id of the object.
     */
    private String id;

    /*
     * Name of the object.
     */
    private String name;

    /**
     * Creates an instance of PublicKeyInner class.
     */
    public PublicKeyInner() {
    }

    /**
     * Get the innerProperties property: Public key property.
     * 
     * @return the innerProperties value.
     */
    private PublicKeyProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the type property: Type of the object.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the id property: Id of the object.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the name property: Name of the object.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the dataServiceLevel1Key property: Level one public key for encryption.
     * 
     * @return the dataServiceLevel1Key value.
     */
    public Key dataServiceLevel1Key() {
        return this.innerProperties() == null ? null : this.innerProperties().dataServiceLevel1Key();
    }

    /**
     * Set the dataServiceLevel1Key property: Level one public key for encryption.
     * 
     * @param dataServiceLevel1Key the dataServiceLevel1Key value to set.
     * @return the PublicKeyInner object itself.
     */
    public PublicKeyInner withDataServiceLevel1Key(Key dataServiceLevel1Key) {
        if (this.innerProperties() == null) {
            this.innerProperties = new PublicKeyProperties();
        }
        this.innerProperties().withDataServiceLevel1Key(dataServiceLevel1Key);
        return this;
    }

    /**
     * Get the dataServiceLevel2Key property: Level two public key for encryption.
     * 
     * @return the dataServiceLevel2Key value.
     */
    public Key dataServiceLevel2Key() {
        return this.innerProperties() == null ? null : this.innerProperties().dataServiceLevel2Key();
    }

    /**
     * Set the dataServiceLevel2Key property: Level two public key for encryption.
     * 
     * @param dataServiceLevel2Key the dataServiceLevel2Key value to set.
     * @return the PublicKeyInner object itself.
     */
    public PublicKeyInner withDataServiceLevel2Key(Key dataServiceLevel2Key) {
        if (this.innerProperties() == null) {
            this.innerProperties = new PublicKeyProperties();
        }
        this.innerProperties().withDataServiceLevel2Key(dataServiceLevel2Key);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (innerProperties() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property innerProperties in model PublicKeyInner"));
        } else {
            innerProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(PublicKeyInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PublicKeyInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PublicKeyInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the PublicKeyInner.
     */
    public static PublicKeyInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PublicKeyInner deserializedPublicKeyInner = new PublicKeyInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedPublicKeyInner.name = reader.getString();
                } else if ("id".equals(fieldName)) {
                    deserializedPublicKeyInner.id = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedPublicKeyInner.type = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedPublicKeyInner.innerProperties = PublicKeyProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPublicKeyInner;
        });
    }
}
