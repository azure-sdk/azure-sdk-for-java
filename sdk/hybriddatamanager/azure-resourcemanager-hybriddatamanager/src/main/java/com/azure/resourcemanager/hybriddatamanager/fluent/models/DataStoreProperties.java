// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybriddatamanager.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.hybriddatamanager.models.CustomerSecret;
import com.azure.resourcemanager.hybriddatamanager.models.State;
import java.io.IOException;
import java.util.List;

/**
 * Data Store for sources and sinks.
 */
@Fluent
public final class DataStoreProperties implements JsonSerializable<DataStoreProperties> {
    /*
     * Arm Id for the manager resource to which the data source is associated. This is optional.
     */
    private String repositoryId;

    /*
     * State of the data source.
     */
    private State state;

    /*
     * A generic json used differently by each data source type.
     */
    private Object extendedProperties;

    /*
     * The arm id of the data store type.
     */
    private String dataStoreTypeId;

    /*
     * List of customer secrets containing a key identifier and key value. The key identifier is a way for the specific
     * data source to understand the key. Value contains customer secret encrypted by the encryptionKeys.
     */
    private List<CustomerSecret> customerSecrets;

    /**
     * Creates an instance of DataStoreProperties class.
     */
    public DataStoreProperties() {
    }

    /**
     * Get the repositoryId property: Arm Id for the manager resource to which the data source is associated. This is
     * optional.
     * 
     * @return the repositoryId value.
     */
    public String repositoryId() {
        return this.repositoryId;
    }

    /**
     * Set the repositoryId property: Arm Id for the manager resource to which the data source is associated. This is
     * optional.
     * 
     * @param repositoryId the repositoryId value to set.
     * @return the DataStoreProperties object itself.
     */
    public DataStoreProperties withRepositoryId(String repositoryId) {
        this.repositoryId = repositoryId;
        return this;
    }

    /**
     * Get the state property: State of the data source.
     * 
     * @return the state value.
     */
    public State state() {
        return this.state;
    }

    /**
     * Set the state property: State of the data source.
     * 
     * @param state the state value to set.
     * @return the DataStoreProperties object itself.
     */
    public DataStoreProperties withState(State state) {
        this.state = state;
        return this;
    }

    /**
     * Get the extendedProperties property: A generic json used differently by each data source type.
     * 
     * @return the extendedProperties value.
     */
    public Object extendedProperties() {
        return this.extendedProperties;
    }

    /**
     * Set the extendedProperties property: A generic json used differently by each data source type.
     * 
     * @param extendedProperties the extendedProperties value to set.
     * @return the DataStoreProperties object itself.
     */
    public DataStoreProperties withExtendedProperties(Object extendedProperties) {
        this.extendedProperties = extendedProperties;
        return this;
    }

    /**
     * Get the dataStoreTypeId property: The arm id of the data store type.
     * 
     * @return the dataStoreTypeId value.
     */
    public String dataStoreTypeId() {
        return this.dataStoreTypeId;
    }

    /**
     * Set the dataStoreTypeId property: The arm id of the data store type.
     * 
     * @param dataStoreTypeId the dataStoreTypeId value to set.
     * @return the DataStoreProperties object itself.
     */
    public DataStoreProperties withDataStoreTypeId(String dataStoreTypeId) {
        this.dataStoreTypeId = dataStoreTypeId;
        return this;
    }

    /**
     * Get the customerSecrets property: List of customer secrets containing a key identifier and key value. The key
     * identifier is a way for the specific data source to understand the key. Value contains customer secret encrypted
     * by the encryptionKeys.
     * 
     * @return the customerSecrets value.
     */
    public List<CustomerSecret> customerSecrets() {
        return this.customerSecrets;
    }

    /**
     * Set the customerSecrets property: List of customer secrets containing a key identifier and key value. The key
     * identifier is a way for the specific data source to understand the key. Value contains customer secret encrypted
     * by the encryptionKeys.
     * 
     * @param customerSecrets the customerSecrets value to set.
     * @return the DataStoreProperties object itself.
     */
    public DataStoreProperties withCustomerSecrets(List<CustomerSecret> customerSecrets) {
        this.customerSecrets = customerSecrets;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (state() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property state in model DataStoreProperties"));
        }
        if (dataStoreTypeId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property dataStoreTypeId in model DataStoreProperties"));
        }
        if (customerSecrets() != null) {
            customerSecrets().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DataStoreProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("state", this.state == null ? null : this.state.toString());
        jsonWriter.writeStringField("dataStoreTypeId", this.dataStoreTypeId);
        jsonWriter.writeStringField("repositoryId", this.repositoryId);
        jsonWriter.writeUntypedField("extendedProperties", this.extendedProperties);
        jsonWriter.writeArrayField("customerSecrets", this.customerSecrets,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DataStoreProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DataStoreProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DataStoreProperties.
     */
    public static DataStoreProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DataStoreProperties deserializedDataStoreProperties = new DataStoreProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("state".equals(fieldName)) {
                    deserializedDataStoreProperties.state = State.fromString(reader.getString());
                } else if ("dataStoreTypeId".equals(fieldName)) {
                    deserializedDataStoreProperties.dataStoreTypeId = reader.getString();
                } else if ("repositoryId".equals(fieldName)) {
                    deserializedDataStoreProperties.repositoryId = reader.getString();
                } else if ("extendedProperties".equals(fieldName)) {
                    deserializedDataStoreProperties.extendedProperties = reader.readUntyped();
                } else if ("customerSecrets".equals(fieldName)) {
                    List<CustomerSecret> customerSecrets
                        = reader.readArray(reader1 -> CustomerSecret.fromJson(reader1));
                    deserializedDataStoreProperties.customerSecrets = customerSecrets;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDataStoreProperties;
        });
    }
}
