// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybriddatamanager.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Contains the localized display information for this particular operation / action.
 * These value will be used by several clients for
 * (1) custom role definitions for RBAC;
 * (2) complex query filters for the event service; and (3) audit history / records for management operations.
 */
@Fluent
public final class AvailableProviderOperationDisplay implements JsonSerializable<AvailableProviderOperationDisplay> {
    /*
     * Gets or sets Provider
     * The localized friendly form of the resource provider name – it is expected to also include the publisher/company
     * responsible.
     * It should use Title Casing and begin with “Microsoft” for 1st party services.
     */
    private String provider;

    /*
     * Gets or sets Resource
     * The localized friendly form of the resource type related to this action/operation – it should match the public
     * documentation for the resource provider.
     * It should use Title Casing – for examples, please refer to the “name” section.
     */
    private String resource;

    /*
     * Gets or sets Operation
     * The localized friendly name for the operation, as it should be shown to the user.
     * It should be concise (to fit in drop downs) but clear (i.e. self-documenting). It should use Title Casing and
     * include the entity/resource to which it applies.
     */
    private String operation;

    /*
     * Gets or sets Description
     * The localized friendly description for the operation, as it should be shown to the user.
     * It should be thorough, yet concise – it will be used in tool tips and detailed views.
     */
    private String description;

    /**
     * Creates an instance of AvailableProviderOperationDisplay class.
     */
    public AvailableProviderOperationDisplay() {
    }

    /**
     * Get the provider property: Gets or sets Provider
     * The localized friendly form of the resource provider name – it is expected to also include the publisher/company
     * responsible.
     * It should use Title Casing and begin with “Microsoft” for 1st party services.
     * 
     * @return the provider value.
     */
    public String provider() {
        return this.provider;
    }

    /**
     * Set the provider property: Gets or sets Provider
     * The localized friendly form of the resource provider name – it is expected to also include the publisher/company
     * responsible.
     * It should use Title Casing and begin with “Microsoft” for 1st party services.
     * 
     * @param provider the provider value to set.
     * @return the AvailableProviderOperationDisplay object itself.
     */
    public AvailableProviderOperationDisplay withProvider(String provider) {
        this.provider = provider;
        return this;
    }

    /**
     * Get the resource property: Gets or sets Resource
     * The localized friendly form of the resource type related to this action/operation – it should match the public
     * documentation for the resource provider.
     * It should use Title Casing – for examples, please refer to the “name” section.
     * 
     * @return the resource value.
     */
    public String resource() {
        return this.resource;
    }

    /**
     * Set the resource property: Gets or sets Resource
     * The localized friendly form of the resource type related to this action/operation – it should match the public
     * documentation for the resource provider.
     * It should use Title Casing – for examples, please refer to the “name” section.
     * 
     * @param resource the resource value to set.
     * @return the AvailableProviderOperationDisplay object itself.
     */
    public AvailableProviderOperationDisplay withResource(String resource) {
        this.resource = resource;
        return this;
    }

    /**
     * Get the operation property: Gets or sets Operation
     * The localized friendly name for the operation, as it should be shown to the user.
     * It should be concise (to fit in drop downs) but clear (i.e. self-documenting). It should use Title Casing and
     * include the entity/resource to which it applies.
     * 
     * @return the operation value.
     */
    public String operation() {
        return this.operation;
    }

    /**
     * Set the operation property: Gets or sets Operation
     * The localized friendly name for the operation, as it should be shown to the user.
     * It should be concise (to fit in drop downs) but clear (i.e. self-documenting). It should use Title Casing and
     * include the entity/resource to which it applies.
     * 
     * @param operation the operation value to set.
     * @return the AvailableProviderOperationDisplay object itself.
     */
    public AvailableProviderOperationDisplay withOperation(String operation) {
        this.operation = operation;
        return this;
    }

    /**
     * Get the description property: Gets or sets Description
     * The localized friendly description for the operation, as it should be shown to the user.
     * It should be thorough, yet concise – it will be used in tool tips and detailed views.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: Gets or sets Description
     * The localized friendly description for the operation, as it should be shown to the user.
     * It should be thorough, yet concise – it will be used in tool tips and detailed views.
     * 
     * @param description the description value to set.
     * @return the AvailableProviderOperationDisplay object itself.
     */
    public AvailableProviderOperationDisplay withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("provider", this.provider);
        jsonWriter.writeStringField("resource", this.resource);
        jsonWriter.writeStringField("operation", this.operation);
        jsonWriter.writeStringField("description", this.description);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AvailableProviderOperationDisplay from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AvailableProviderOperationDisplay if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AvailableProviderOperationDisplay.
     */
    public static AvailableProviderOperationDisplay fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AvailableProviderOperationDisplay deserializedAvailableProviderOperationDisplay
                = new AvailableProviderOperationDisplay();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provider".equals(fieldName)) {
                    deserializedAvailableProviderOperationDisplay.provider = reader.getString();
                } else if ("resource".equals(fieldName)) {
                    deserializedAvailableProviderOperationDisplay.resource = reader.getString();
                } else if ("operation".equals(fieldName)) {
                    deserializedAvailableProviderOperationDisplay.operation = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedAvailableProviderOperationDisplay.description = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAvailableProviderOperationDisplay;
        });
    }
}
