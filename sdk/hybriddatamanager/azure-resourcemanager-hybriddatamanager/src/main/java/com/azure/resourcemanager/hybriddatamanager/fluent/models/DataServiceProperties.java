// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybriddatamanager.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.hybriddatamanager.models.State;
import java.io.IOException;
import java.util.List;

/**
 * Data Service properties.
 */
@Fluent
public final class DataServiceProperties implements JsonSerializable<DataServiceProperties> {
    /*
     * State of the data service.
     */
    private State state;

    /*
     * Supported data store types which can be used as a sink.
     */
    private List<String> supportedDataSinkTypes;

    /*
     * Supported data store types which can be used as a source.
     */
    private List<String> supportedDataSourceTypes;

    /**
     * Creates an instance of DataServiceProperties class.
     */
    public DataServiceProperties() {
    }

    /**
     * Get the state property: State of the data service.
     * 
     * @return the state value.
     */
    public State state() {
        return this.state;
    }

    /**
     * Set the state property: State of the data service.
     * 
     * @param state the state value to set.
     * @return the DataServiceProperties object itself.
     */
    public DataServiceProperties withState(State state) {
        this.state = state;
        return this;
    }

    /**
     * Get the supportedDataSinkTypes property: Supported data store types which can be used as a sink.
     * 
     * @return the supportedDataSinkTypes value.
     */
    public List<String> supportedDataSinkTypes() {
        return this.supportedDataSinkTypes;
    }

    /**
     * Set the supportedDataSinkTypes property: Supported data store types which can be used as a sink.
     * 
     * @param supportedDataSinkTypes the supportedDataSinkTypes value to set.
     * @return the DataServiceProperties object itself.
     */
    public DataServiceProperties withSupportedDataSinkTypes(List<String> supportedDataSinkTypes) {
        this.supportedDataSinkTypes = supportedDataSinkTypes;
        return this;
    }

    /**
     * Get the supportedDataSourceTypes property: Supported data store types which can be used as a source.
     * 
     * @return the supportedDataSourceTypes value.
     */
    public List<String> supportedDataSourceTypes() {
        return this.supportedDataSourceTypes;
    }

    /**
     * Set the supportedDataSourceTypes property: Supported data store types which can be used as a source.
     * 
     * @param supportedDataSourceTypes the supportedDataSourceTypes value to set.
     * @return the DataServiceProperties object itself.
     */
    public DataServiceProperties withSupportedDataSourceTypes(List<String> supportedDataSourceTypes) {
        this.supportedDataSourceTypes = supportedDataSourceTypes;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (state() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property state in model DataServiceProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DataServiceProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("state", this.state == null ? null : this.state.toString());
        jsonWriter.writeArrayField("supportedDataSinkTypes", this.supportedDataSinkTypes,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("supportedDataSourceTypes", this.supportedDataSourceTypes,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DataServiceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DataServiceProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DataServiceProperties.
     */
    public static DataServiceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DataServiceProperties deserializedDataServiceProperties = new DataServiceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("state".equals(fieldName)) {
                    deserializedDataServiceProperties.state = State.fromString(reader.getString());
                } else if ("supportedDataSinkTypes".equals(fieldName)) {
                    List<String> supportedDataSinkTypes = reader.readArray(reader1 -> reader1.getString());
                    deserializedDataServiceProperties.supportedDataSinkTypes = supportedDataSinkTypes;
                } else if ("supportedDataSourceTypes".equals(fieldName)) {
                    List<String> supportedDataSourceTypes = reader.readArray(reader1 -> reader1.getString());
                    deserializedDataServiceProperties.supportedDataSourceTypes = supportedDataSourceTypes;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDataServiceProperties;
        });
    }
}
