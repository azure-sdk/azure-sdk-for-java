// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybriddatamanager.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.hybriddatamanager.models.Key;
import java.io.IOException;

/**
 * PublicKey Properties.
 */
@Fluent
public final class PublicKeyProperties implements JsonSerializable<PublicKeyProperties> {
    /*
     * Level one public key for encryption
     */
    private Key dataServiceLevel1Key;

    /*
     * Level two public key for encryption
     */
    private Key dataServiceLevel2Key;

    /**
     * Creates an instance of PublicKeyProperties class.
     */
    public PublicKeyProperties() {
    }

    /**
     * Get the dataServiceLevel1Key property: Level one public key for encryption.
     * 
     * @return the dataServiceLevel1Key value.
     */
    public Key dataServiceLevel1Key() {
        return this.dataServiceLevel1Key;
    }

    /**
     * Set the dataServiceLevel1Key property: Level one public key for encryption.
     * 
     * @param dataServiceLevel1Key the dataServiceLevel1Key value to set.
     * @return the PublicKeyProperties object itself.
     */
    public PublicKeyProperties withDataServiceLevel1Key(Key dataServiceLevel1Key) {
        this.dataServiceLevel1Key = dataServiceLevel1Key;
        return this;
    }

    /**
     * Get the dataServiceLevel2Key property: Level two public key for encryption.
     * 
     * @return the dataServiceLevel2Key value.
     */
    public Key dataServiceLevel2Key() {
        return this.dataServiceLevel2Key;
    }

    /**
     * Set the dataServiceLevel2Key property: Level two public key for encryption.
     * 
     * @param dataServiceLevel2Key the dataServiceLevel2Key value to set.
     * @return the PublicKeyProperties object itself.
     */
    public PublicKeyProperties withDataServiceLevel2Key(Key dataServiceLevel2Key) {
        this.dataServiceLevel2Key = dataServiceLevel2Key;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (dataServiceLevel1Key() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property dataServiceLevel1Key in model PublicKeyProperties"));
        } else {
            dataServiceLevel1Key().validate();
        }
        if (dataServiceLevel2Key() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property dataServiceLevel2Key in model PublicKeyProperties"));
        } else {
            dataServiceLevel2Key().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(PublicKeyProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("dataServiceLevel1Key", this.dataServiceLevel1Key);
        jsonWriter.writeJsonField("dataServiceLevel2Key", this.dataServiceLevel2Key);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PublicKeyProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PublicKeyProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the PublicKeyProperties.
     */
    public static PublicKeyProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PublicKeyProperties deserializedPublicKeyProperties = new PublicKeyProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("dataServiceLevel1Key".equals(fieldName)) {
                    deserializedPublicKeyProperties.dataServiceLevel1Key = Key.fromJson(reader);
                } else if ("dataServiceLevel2Key".equals(fieldName)) {
                    deserializedPublicKeyProperties.dataServiceLevel2Key = Key.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPublicKeyProperties;
        });
    }
}
