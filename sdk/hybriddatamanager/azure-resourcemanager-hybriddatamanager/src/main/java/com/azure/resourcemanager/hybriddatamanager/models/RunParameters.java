// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybriddatamanager.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Run parameters for a job.
 */
@Fluent
public final class RunParameters implements JsonSerializable<RunParameters> {
    /*
     * Enum to detect if user confirmation is required. If not passed will default to NotRequired.
     */
    private UserConfirmation userConfirmation;

    /*
     * A generic json used differently by each data service type.
     */
    private Object dataServiceInput;

    /*
     * List of customer secrets containing a key identifier and key value. The key identifier is a way for the specific
     * data source to understand the key. Value contains customer secret encrypted by the encryptionKeys.
     */
    private List<CustomerSecret> customerSecrets;

    /**
     * Creates an instance of RunParameters class.
     */
    public RunParameters() {
    }

    /**
     * Get the userConfirmation property: Enum to detect if user confirmation is required. If not passed will default to
     * NotRequired.
     * 
     * @return the userConfirmation value.
     */
    public UserConfirmation userConfirmation() {
        return this.userConfirmation;
    }

    /**
     * Set the userConfirmation property: Enum to detect if user confirmation is required. If not passed will default to
     * NotRequired.
     * 
     * @param userConfirmation the userConfirmation value to set.
     * @return the RunParameters object itself.
     */
    public RunParameters withUserConfirmation(UserConfirmation userConfirmation) {
        this.userConfirmation = userConfirmation;
        return this;
    }

    /**
     * Get the dataServiceInput property: A generic json used differently by each data service type.
     * 
     * @return the dataServiceInput value.
     */
    public Object dataServiceInput() {
        return this.dataServiceInput;
    }

    /**
     * Set the dataServiceInput property: A generic json used differently by each data service type.
     * 
     * @param dataServiceInput the dataServiceInput value to set.
     * @return the RunParameters object itself.
     */
    public RunParameters withDataServiceInput(Object dataServiceInput) {
        this.dataServiceInput = dataServiceInput;
        return this;
    }

    /**
     * Get the customerSecrets property: List of customer secrets containing a key identifier and key value. The key
     * identifier is a way for the specific data source to understand the key. Value contains customer secret encrypted
     * by the encryptionKeys.
     * 
     * @return the customerSecrets value.
     */
    public List<CustomerSecret> customerSecrets() {
        return this.customerSecrets;
    }

    /**
     * Set the customerSecrets property: List of customer secrets containing a key identifier and key value. The key
     * identifier is a way for the specific data source to understand the key. Value contains customer secret encrypted
     * by the encryptionKeys.
     * 
     * @param customerSecrets the customerSecrets value to set.
     * @return the RunParameters object itself.
     */
    public RunParameters withCustomerSecrets(List<CustomerSecret> customerSecrets) {
        this.customerSecrets = customerSecrets;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (customerSecrets() != null) {
            customerSecrets().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("userConfirmation",
            this.userConfirmation == null ? null : this.userConfirmation.toString());
        jsonWriter.writeUntypedField("dataServiceInput", this.dataServiceInput);
        jsonWriter.writeArrayField("customerSecrets", this.customerSecrets,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RunParameters from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RunParameters if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the RunParameters.
     */
    public static RunParameters fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RunParameters deserializedRunParameters = new RunParameters();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("userConfirmation".equals(fieldName)) {
                    deserializedRunParameters.userConfirmation = UserConfirmation.fromString(reader.getString());
                } else if ("dataServiceInput".equals(fieldName)) {
                    deserializedRunParameters.dataServiceInput = reader.readUntyped();
                } else if ("customerSecrets".equals(fieldName)) {
                    List<CustomerSecret> customerSecrets
                        = reader.readArray(reader1 -> CustomerSecret.fromJson(reader1));
                    deserializedRunParameters.customerSecrets = customerSecrets;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRunParameters;
        });
    }
}
