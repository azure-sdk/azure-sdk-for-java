// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybriddatamanager.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.hybriddatamanager.models.IsJobCancellable;
import java.io.IOException;

/**
 * Job Properties.
 */
@Fluent
public final class JobPropertiesInner implements JsonSerializable<JobPropertiesInner> {
    /*
     * Describes whether the job is cancellable.
     */
    private IsJobCancellable isCancellable;

    /*
     * Number of bytes processed by the job as of now.
     */
    private Long bytesProcessed;

    /*
     * Number of items processed by the job as of now
     */
    private Long itemsProcessed;

    /*
     * Number of bytes to be processed by the job in total.
     */
    private Long totalBytesToProcess;

    /*
     * Number of items to be processed by the job in total
     */
    private Long totalItemsToProcess;

    /*
     * Details of a job run. This field will only be sent for expand details filter.
     */
    private JobDetailsInner details;

    /*
     * Name of the data source on which the job was triggered.
     */
    private String dataSourceName;

    /*
     * Name of the data sink on which the job was triggered.
     */
    private String dataSinkName;

    /**
     * Creates an instance of JobPropertiesInner class.
     */
    public JobPropertiesInner() {
    }

    /**
     * Get the isCancellable property: Describes whether the job is cancellable.
     * 
     * @return the isCancellable value.
     */
    public IsJobCancellable isCancellable() {
        return this.isCancellable;
    }

    /**
     * Set the isCancellable property: Describes whether the job is cancellable.
     * 
     * @param isCancellable the isCancellable value to set.
     * @return the JobPropertiesInner object itself.
     */
    public JobPropertiesInner withIsCancellable(IsJobCancellable isCancellable) {
        this.isCancellable = isCancellable;
        return this;
    }

    /**
     * Get the bytesProcessed property: Number of bytes processed by the job as of now.
     * 
     * @return the bytesProcessed value.
     */
    public Long bytesProcessed() {
        return this.bytesProcessed;
    }

    /**
     * Set the bytesProcessed property: Number of bytes processed by the job as of now.
     * 
     * @param bytesProcessed the bytesProcessed value to set.
     * @return the JobPropertiesInner object itself.
     */
    public JobPropertiesInner withBytesProcessed(Long bytesProcessed) {
        this.bytesProcessed = bytesProcessed;
        return this;
    }

    /**
     * Get the itemsProcessed property: Number of items processed by the job as of now.
     * 
     * @return the itemsProcessed value.
     */
    public Long itemsProcessed() {
        return this.itemsProcessed;
    }

    /**
     * Set the itemsProcessed property: Number of items processed by the job as of now.
     * 
     * @param itemsProcessed the itemsProcessed value to set.
     * @return the JobPropertiesInner object itself.
     */
    public JobPropertiesInner withItemsProcessed(Long itemsProcessed) {
        this.itemsProcessed = itemsProcessed;
        return this;
    }

    /**
     * Get the totalBytesToProcess property: Number of bytes to be processed by the job in total.
     * 
     * @return the totalBytesToProcess value.
     */
    public Long totalBytesToProcess() {
        return this.totalBytesToProcess;
    }

    /**
     * Set the totalBytesToProcess property: Number of bytes to be processed by the job in total.
     * 
     * @param totalBytesToProcess the totalBytesToProcess value to set.
     * @return the JobPropertiesInner object itself.
     */
    public JobPropertiesInner withTotalBytesToProcess(Long totalBytesToProcess) {
        this.totalBytesToProcess = totalBytesToProcess;
        return this;
    }

    /**
     * Get the totalItemsToProcess property: Number of items to be processed by the job in total.
     * 
     * @return the totalItemsToProcess value.
     */
    public Long totalItemsToProcess() {
        return this.totalItemsToProcess;
    }

    /**
     * Set the totalItemsToProcess property: Number of items to be processed by the job in total.
     * 
     * @param totalItemsToProcess the totalItemsToProcess value to set.
     * @return the JobPropertiesInner object itself.
     */
    public JobPropertiesInner withTotalItemsToProcess(Long totalItemsToProcess) {
        this.totalItemsToProcess = totalItemsToProcess;
        return this;
    }

    /**
     * Get the details property: Details of a job run. This field will only be sent for expand details filter.
     * 
     * @return the details value.
     */
    public JobDetailsInner details() {
        return this.details;
    }

    /**
     * Set the details property: Details of a job run. This field will only be sent for expand details filter.
     * 
     * @param details the details value to set.
     * @return the JobPropertiesInner object itself.
     */
    public JobPropertiesInner withDetails(JobDetailsInner details) {
        this.details = details;
        return this;
    }

    /**
     * Get the dataSourceName property: Name of the data source on which the job was triggered.
     * 
     * @return the dataSourceName value.
     */
    public String dataSourceName() {
        return this.dataSourceName;
    }

    /**
     * Set the dataSourceName property: Name of the data source on which the job was triggered.
     * 
     * @param dataSourceName the dataSourceName value to set.
     * @return the JobPropertiesInner object itself.
     */
    public JobPropertiesInner withDataSourceName(String dataSourceName) {
        this.dataSourceName = dataSourceName;
        return this;
    }

    /**
     * Get the dataSinkName property: Name of the data sink on which the job was triggered.
     * 
     * @return the dataSinkName value.
     */
    public String dataSinkName() {
        return this.dataSinkName;
    }

    /**
     * Set the dataSinkName property: Name of the data sink on which the job was triggered.
     * 
     * @param dataSinkName the dataSinkName value to set.
     * @return the JobPropertiesInner object itself.
     */
    public JobPropertiesInner withDataSinkName(String dataSinkName) {
        this.dataSinkName = dataSinkName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (isCancellable() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property isCancellable in model JobPropertiesInner"));
        }
        if (details() != null) {
            details().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(JobPropertiesInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("isCancellable", this.isCancellable == null ? null : this.isCancellable.toString());
        jsonWriter.writeNumberField("bytesProcessed", this.bytesProcessed);
        jsonWriter.writeNumberField("itemsProcessed", this.itemsProcessed);
        jsonWriter.writeNumberField("totalBytesToProcess", this.totalBytesToProcess);
        jsonWriter.writeNumberField("totalItemsToProcess", this.totalItemsToProcess);
        jsonWriter.writeJsonField("details", this.details);
        jsonWriter.writeStringField("dataSourceName", this.dataSourceName);
        jsonWriter.writeStringField("dataSinkName", this.dataSinkName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of JobPropertiesInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of JobPropertiesInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the JobPropertiesInner.
     */
    public static JobPropertiesInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            JobPropertiesInner deserializedJobPropertiesInner = new JobPropertiesInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("isCancellable".equals(fieldName)) {
                    deserializedJobPropertiesInner.isCancellable = IsJobCancellable.fromString(reader.getString());
                } else if ("bytesProcessed".equals(fieldName)) {
                    deserializedJobPropertiesInner.bytesProcessed = reader.getNullable(JsonReader::getLong);
                } else if ("itemsProcessed".equals(fieldName)) {
                    deserializedJobPropertiesInner.itemsProcessed = reader.getNullable(JsonReader::getLong);
                } else if ("totalBytesToProcess".equals(fieldName)) {
                    deserializedJobPropertiesInner.totalBytesToProcess = reader.getNullable(JsonReader::getLong);
                } else if ("totalItemsToProcess".equals(fieldName)) {
                    deserializedJobPropertiesInner.totalItemsToProcess = reader.getNullable(JsonReader::getLong);
                } else if ("details".equals(fieldName)) {
                    deserializedJobPropertiesInner.details = JobDetailsInner.fromJson(reader);
                } else if ("dataSourceName".equals(fieldName)) {
                    deserializedJobPropertiesInner.dataSourceName = reader.getString();
                } else if ("dataSinkName".equals(fieldName)) {
                    deserializedJobPropertiesInner.dataSinkName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedJobPropertiesInner;
        });
    }
}
