// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybriddatamanager.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.hybriddatamanager.models.IsJobCancellable;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;

/** Job Properties. */
@Fluent
public final class JobPropertiesInner {
    /*
     * Describes whether the job is cancellable.
     */
    @JsonProperty(value = "isCancellable", required = true)
    private IsJobCancellable isCancellable;

    /*
     * Number of bytes processed by the job as of now.
     */
    @JsonProperty(value = "bytesProcessed")
    private Long bytesProcessed;

    /*
     * Number of items processed by the job as of now
     */
    @JsonProperty(value = "itemsProcessed")
    private Long itemsProcessed;

    /*
     * Number of bytes to be processed by the job in total.
     */
    @JsonProperty(value = "totalBytesToProcess")
    private Long totalBytesToProcess;

    /*
     * Number of items to be processed by the job in total
     */
    @JsonProperty(value = "totalItemsToProcess")
    private Long totalItemsToProcess;

    /*
     * Number of items deleted by the job as of now
     */
    @JsonProperty(value = "itemsDeleted")
    private Long itemsDeleted;

    /*
     * Number of items to be deleted by the job in total
     */
    @JsonProperty(value = "totalItemsToDelete")
    private Long totalItemsToDelete;

    /*
     * Of the items copied by the job as of now, how many are files
     */
    @JsonProperty(value = "filesCopiedCounter")
    private Long filesCopiedCounter;

    /*
     * Of the items deleted by the job as of now, how many are files
     */
    @JsonProperty(value = "filesDeletedCounter")
    private Long filesDeletedCounter;

    /*
     * Number of bytes actually copied by the job as of now
     */
    @JsonProperty(value = "bytesCopied")
    private Long bytesCopied;

    /*
     * Time getting the backup started
     */
    @JsonProperty(value = "backupStartTime")
    private OffsetDateTime backupStartTime;

    /*
     * Time getting the backup ended
     */
    @JsonProperty(value = "backupEndTime")
    private OffsetDateTime backupEndTime;

    /*
     * Time configuring compute for estimation stage started
     */
    @JsonProperty(value = "estimationConfigureComputeStartTime")
    private OffsetDateTime estimationConfigureComputeStartTime;

    /*
     * Time configuring compute for estimation stage ended
     */
    @JsonProperty(value = "estimationConfigureComputeEndTime")
    private OffsetDateTime estimationConfigureComputeEndTime;

    /*
     * Time enumerating source directory started
     */
    @JsonProperty(value = "directoryParserStartTime")
    private OffsetDateTime directoryParserStartTime;

    /*
     * Time enumerating source directory ended
     */
    @JsonProperty(value = "directoryParserEndTime")
    private OffsetDateTime directoryParserEndTime;

    /*
     * Time enumerating target directory started
     */
    @JsonProperty(value = "purgeDetectionStartTime")
    private OffsetDateTime purgeDetectionStartTime;

    /*
     * Time enumerating target directory ended
     */
    @JsonProperty(value = "purgeDetectionEndTime")
    private OffsetDateTime purgeDetectionEndTime;

    /*
     * Time estimating files started
     */
    @JsonProperty(value = "estimationStartTime")
    private OffsetDateTime estimationStartTime;

    /*
     * Time estimating files ended
     */
    @JsonProperty(value = "estimationEndTime")
    private OffsetDateTime estimationEndTime;

    /*
     * Time deleting excess files started
     */
    @JsonProperty(value = "postEstimationStartTime")
    private OffsetDateTime postEstimationStartTime;

    /*
     * Time deleting excess files ended
     */
    @JsonProperty(value = "postEstimationEndTime")
    private OffsetDateTime postEstimationEndTime;

    /*
     * Time configuring compute for copy stage started
     */
    @JsonProperty(value = "copyConfigureComputeStartTime")
    private OffsetDateTime copyConfigureComputeStartTime;

    /*
     * Time configuring compute for copy stage ended
     */
    @JsonProperty(value = "copyConfigureComputeEndTime")
    private OffsetDateTime copyConfigureComputeEndTime;

    /*
     * Time copying files started
     */
    @JsonProperty(value = "copyStartTime")
    private OffsetDateTime copyStartTime;

    /*
     * Time copying files ended
     */
    @JsonProperty(value = "copyEndTime")
    private OffsetDateTime copyEndTime;

    /*
     * Time copying logs and creating share snapshot started
     */
    @JsonProperty(value = "postCopyStartTime")
    private OffsetDateTime postCopyStartTime;

    /*
     * Time copying logs and creating share snapshot ended
     */
    @JsonProperty(value = "postCopyEndTime")
    private OffsetDateTime postCopyEndTime;

    /*
     * Time cleaning up compute started
     */
    @JsonProperty(value = "cleanupComputeStartTime")
    private OffsetDateTime cleanupComputeStartTime;

    /*
     * Time cleaning up compute ended
     */
    @JsonProperty(value = "cleanupComputeEndTime")
    private OffsetDateTime cleanupComputeEndTime;

    /*
     * Details of a job run. This field will only be sent for expand details filter.
     */
    @JsonProperty(value = "details")
    private JobDetailsInner details;

    /*
     * Name of the data source on which the job was triggered.
     */
    @JsonProperty(value = "dataSourceName")
    private String dataSourceName;

    /*
     * Name of the data sink on which the job was triggered.
     */
    @JsonProperty(value = "dataSinkName")
    private String dataSinkName;

    /*
     * Number of copy errors
     */
    @JsonProperty(value = "copyErrors")
    private Long copyErrors;

    /*
     * Number of unsupported files
     */
    @JsonProperty(value = "unsupportedFiles")
    private Long unsupportedFiles;

    /**
     * Get the isCancellable property: Describes whether the job is cancellable.
     *
     * @return the isCancellable value.
     */
    public IsJobCancellable isCancellable() {
        return this.isCancellable;
    }

    /**
     * Set the isCancellable property: Describes whether the job is cancellable.
     *
     * @param isCancellable the isCancellable value to set.
     * @return the JobPropertiesInner object itself.
     */
    public JobPropertiesInner withIsCancellable(IsJobCancellable isCancellable) {
        this.isCancellable = isCancellable;
        return this;
    }

    /**
     * Get the bytesProcessed property: Number of bytes processed by the job as of now.
     *
     * @return the bytesProcessed value.
     */
    public Long bytesProcessed() {
        return this.bytesProcessed;
    }

    /**
     * Set the bytesProcessed property: Number of bytes processed by the job as of now.
     *
     * @param bytesProcessed the bytesProcessed value to set.
     * @return the JobPropertiesInner object itself.
     */
    public JobPropertiesInner withBytesProcessed(Long bytesProcessed) {
        this.bytesProcessed = bytesProcessed;
        return this;
    }

    /**
     * Get the itemsProcessed property: Number of items processed by the job as of now.
     *
     * @return the itemsProcessed value.
     */
    public Long itemsProcessed() {
        return this.itemsProcessed;
    }

    /**
     * Set the itemsProcessed property: Number of items processed by the job as of now.
     *
     * @param itemsProcessed the itemsProcessed value to set.
     * @return the JobPropertiesInner object itself.
     */
    public JobPropertiesInner withItemsProcessed(Long itemsProcessed) {
        this.itemsProcessed = itemsProcessed;
        return this;
    }

    /**
     * Get the totalBytesToProcess property: Number of bytes to be processed by the job in total.
     *
     * @return the totalBytesToProcess value.
     */
    public Long totalBytesToProcess() {
        return this.totalBytesToProcess;
    }

    /**
     * Set the totalBytesToProcess property: Number of bytes to be processed by the job in total.
     *
     * @param totalBytesToProcess the totalBytesToProcess value to set.
     * @return the JobPropertiesInner object itself.
     */
    public JobPropertiesInner withTotalBytesToProcess(Long totalBytesToProcess) {
        this.totalBytesToProcess = totalBytesToProcess;
        return this;
    }

    /**
     * Get the totalItemsToProcess property: Number of items to be processed by the job in total.
     *
     * @return the totalItemsToProcess value.
     */
    public Long totalItemsToProcess() {
        return this.totalItemsToProcess;
    }

    /**
     * Set the totalItemsToProcess property: Number of items to be processed by the job in total.
     *
     * @param totalItemsToProcess the totalItemsToProcess value to set.
     * @return the JobPropertiesInner object itself.
     */
    public JobPropertiesInner withTotalItemsToProcess(Long totalItemsToProcess) {
        this.totalItemsToProcess = totalItemsToProcess;
        return this;
    }

    /**
     * Get the itemsDeleted property: Number of items deleted by the job as of now.
     *
     * @return the itemsDeleted value.
     */
    public Long itemsDeleted() {
        return this.itemsDeleted;
    }

    /**
     * Set the itemsDeleted property: Number of items deleted by the job as of now.
     *
     * @param itemsDeleted the itemsDeleted value to set.
     * @return the JobPropertiesInner object itself.
     */
    public JobPropertiesInner withItemsDeleted(Long itemsDeleted) {
        this.itemsDeleted = itemsDeleted;
        return this;
    }

    /**
     * Get the totalItemsToDelete property: Number of items to be deleted by the job in total.
     *
     * @return the totalItemsToDelete value.
     */
    public Long totalItemsToDelete() {
        return this.totalItemsToDelete;
    }

    /**
     * Set the totalItemsToDelete property: Number of items to be deleted by the job in total.
     *
     * @param totalItemsToDelete the totalItemsToDelete value to set.
     * @return the JobPropertiesInner object itself.
     */
    public JobPropertiesInner withTotalItemsToDelete(Long totalItemsToDelete) {
        this.totalItemsToDelete = totalItemsToDelete;
        return this;
    }

    /**
     * Get the filesCopiedCounter property: Of the items copied by the job as of now, how many are files.
     *
     * @return the filesCopiedCounter value.
     */
    public Long filesCopiedCounter() {
        return this.filesCopiedCounter;
    }

    /**
     * Set the filesCopiedCounter property: Of the items copied by the job as of now, how many are files.
     *
     * @param filesCopiedCounter the filesCopiedCounter value to set.
     * @return the JobPropertiesInner object itself.
     */
    public JobPropertiesInner withFilesCopiedCounter(Long filesCopiedCounter) {
        this.filesCopiedCounter = filesCopiedCounter;
        return this;
    }

    /**
     * Get the filesDeletedCounter property: Of the items deleted by the job as of now, how many are files.
     *
     * @return the filesDeletedCounter value.
     */
    public Long filesDeletedCounter() {
        return this.filesDeletedCounter;
    }

    /**
     * Set the filesDeletedCounter property: Of the items deleted by the job as of now, how many are files.
     *
     * @param filesDeletedCounter the filesDeletedCounter value to set.
     * @return the JobPropertiesInner object itself.
     */
    public JobPropertiesInner withFilesDeletedCounter(Long filesDeletedCounter) {
        this.filesDeletedCounter = filesDeletedCounter;
        return this;
    }

    /**
     * Get the bytesCopied property: Number of bytes actually copied by the job as of now.
     *
     * @return the bytesCopied value.
     */
    public Long bytesCopied() {
        return this.bytesCopied;
    }

    /**
     * Set the bytesCopied property: Number of bytes actually copied by the job as of now.
     *
     * @param bytesCopied the bytesCopied value to set.
     * @return the JobPropertiesInner object itself.
     */
    public JobPropertiesInner withBytesCopied(Long bytesCopied) {
        this.bytesCopied = bytesCopied;
        return this;
    }

    /**
     * Get the backupStartTime property: Time getting the backup started.
     *
     * @return the backupStartTime value.
     */
    public OffsetDateTime backupStartTime() {
        return this.backupStartTime;
    }

    /**
     * Set the backupStartTime property: Time getting the backup started.
     *
     * @param backupStartTime the backupStartTime value to set.
     * @return the JobPropertiesInner object itself.
     */
    public JobPropertiesInner withBackupStartTime(OffsetDateTime backupStartTime) {
        this.backupStartTime = backupStartTime;
        return this;
    }

    /**
     * Get the backupEndTime property: Time getting the backup ended.
     *
     * @return the backupEndTime value.
     */
    public OffsetDateTime backupEndTime() {
        return this.backupEndTime;
    }

    /**
     * Set the backupEndTime property: Time getting the backup ended.
     *
     * @param backupEndTime the backupEndTime value to set.
     * @return the JobPropertiesInner object itself.
     */
    public JobPropertiesInner withBackupEndTime(OffsetDateTime backupEndTime) {
        this.backupEndTime = backupEndTime;
        return this;
    }

    /**
     * Get the estimationConfigureComputeStartTime property: Time configuring compute for estimation stage started.
     *
     * @return the estimationConfigureComputeStartTime value.
     */
    public OffsetDateTime estimationConfigureComputeStartTime() {
        return this.estimationConfigureComputeStartTime;
    }

    /**
     * Set the estimationConfigureComputeStartTime property: Time configuring compute for estimation stage started.
     *
     * @param estimationConfigureComputeStartTime the estimationConfigureComputeStartTime value to set.
     * @return the JobPropertiesInner object itself.
     */
    public JobPropertiesInner withEstimationConfigureComputeStartTime(
        OffsetDateTime estimationConfigureComputeStartTime) {
        this.estimationConfigureComputeStartTime = estimationConfigureComputeStartTime;
        return this;
    }

    /**
     * Get the estimationConfigureComputeEndTime property: Time configuring compute for estimation stage ended.
     *
     * @return the estimationConfigureComputeEndTime value.
     */
    public OffsetDateTime estimationConfigureComputeEndTime() {
        return this.estimationConfigureComputeEndTime;
    }

    /**
     * Set the estimationConfigureComputeEndTime property: Time configuring compute for estimation stage ended.
     *
     * @param estimationConfigureComputeEndTime the estimationConfigureComputeEndTime value to set.
     * @return the JobPropertiesInner object itself.
     */
    public JobPropertiesInner withEstimationConfigureComputeEndTime(OffsetDateTime estimationConfigureComputeEndTime) {
        this.estimationConfigureComputeEndTime = estimationConfigureComputeEndTime;
        return this;
    }

    /**
     * Get the directoryParserStartTime property: Time enumerating source directory started.
     *
     * @return the directoryParserStartTime value.
     */
    public OffsetDateTime directoryParserStartTime() {
        return this.directoryParserStartTime;
    }

    /**
     * Set the directoryParserStartTime property: Time enumerating source directory started.
     *
     * @param directoryParserStartTime the directoryParserStartTime value to set.
     * @return the JobPropertiesInner object itself.
     */
    public JobPropertiesInner withDirectoryParserStartTime(OffsetDateTime directoryParserStartTime) {
        this.directoryParserStartTime = directoryParserStartTime;
        return this;
    }

    /**
     * Get the directoryParserEndTime property: Time enumerating source directory ended.
     *
     * @return the directoryParserEndTime value.
     */
    public OffsetDateTime directoryParserEndTime() {
        return this.directoryParserEndTime;
    }

    /**
     * Set the directoryParserEndTime property: Time enumerating source directory ended.
     *
     * @param directoryParserEndTime the directoryParserEndTime value to set.
     * @return the JobPropertiesInner object itself.
     */
    public JobPropertiesInner withDirectoryParserEndTime(OffsetDateTime directoryParserEndTime) {
        this.directoryParserEndTime = directoryParserEndTime;
        return this;
    }

    /**
     * Get the purgeDetectionStartTime property: Time enumerating target directory started.
     *
     * @return the purgeDetectionStartTime value.
     */
    public OffsetDateTime purgeDetectionStartTime() {
        return this.purgeDetectionStartTime;
    }

    /**
     * Set the purgeDetectionStartTime property: Time enumerating target directory started.
     *
     * @param purgeDetectionStartTime the purgeDetectionStartTime value to set.
     * @return the JobPropertiesInner object itself.
     */
    public JobPropertiesInner withPurgeDetectionStartTime(OffsetDateTime purgeDetectionStartTime) {
        this.purgeDetectionStartTime = purgeDetectionStartTime;
        return this;
    }

    /**
     * Get the purgeDetectionEndTime property: Time enumerating target directory ended.
     *
     * @return the purgeDetectionEndTime value.
     */
    public OffsetDateTime purgeDetectionEndTime() {
        return this.purgeDetectionEndTime;
    }

    /**
     * Set the purgeDetectionEndTime property: Time enumerating target directory ended.
     *
     * @param purgeDetectionEndTime the purgeDetectionEndTime value to set.
     * @return the JobPropertiesInner object itself.
     */
    public JobPropertiesInner withPurgeDetectionEndTime(OffsetDateTime purgeDetectionEndTime) {
        this.purgeDetectionEndTime = purgeDetectionEndTime;
        return this;
    }

    /**
     * Get the estimationStartTime property: Time estimating files started.
     *
     * @return the estimationStartTime value.
     */
    public OffsetDateTime estimationStartTime() {
        return this.estimationStartTime;
    }

    /**
     * Set the estimationStartTime property: Time estimating files started.
     *
     * @param estimationStartTime the estimationStartTime value to set.
     * @return the JobPropertiesInner object itself.
     */
    public JobPropertiesInner withEstimationStartTime(OffsetDateTime estimationStartTime) {
        this.estimationStartTime = estimationStartTime;
        return this;
    }

    /**
     * Get the estimationEndTime property: Time estimating files ended.
     *
     * @return the estimationEndTime value.
     */
    public OffsetDateTime estimationEndTime() {
        return this.estimationEndTime;
    }

    /**
     * Set the estimationEndTime property: Time estimating files ended.
     *
     * @param estimationEndTime the estimationEndTime value to set.
     * @return the JobPropertiesInner object itself.
     */
    public JobPropertiesInner withEstimationEndTime(OffsetDateTime estimationEndTime) {
        this.estimationEndTime = estimationEndTime;
        return this;
    }

    /**
     * Get the postEstimationStartTime property: Time deleting excess files started.
     *
     * @return the postEstimationStartTime value.
     */
    public OffsetDateTime postEstimationStartTime() {
        return this.postEstimationStartTime;
    }

    /**
     * Set the postEstimationStartTime property: Time deleting excess files started.
     *
     * @param postEstimationStartTime the postEstimationStartTime value to set.
     * @return the JobPropertiesInner object itself.
     */
    public JobPropertiesInner withPostEstimationStartTime(OffsetDateTime postEstimationStartTime) {
        this.postEstimationStartTime = postEstimationStartTime;
        return this;
    }

    /**
     * Get the postEstimationEndTime property: Time deleting excess files ended.
     *
     * @return the postEstimationEndTime value.
     */
    public OffsetDateTime postEstimationEndTime() {
        return this.postEstimationEndTime;
    }

    /**
     * Set the postEstimationEndTime property: Time deleting excess files ended.
     *
     * @param postEstimationEndTime the postEstimationEndTime value to set.
     * @return the JobPropertiesInner object itself.
     */
    public JobPropertiesInner withPostEstimationEndTime(OffsetDateTime postEstimationEndTime) {
        this.postEstimationEndTime = postEstimationEndTime;
        return this;
    }

    /**
     * Get the copyConfigureComputeStartTime property: Time configuring compute for copy stage started.
     *
     * @return the copyConfigureComputeStartTime value.
     */
    public OffsetDateTime copyConfigureComputeStartTime() {
        return this.copyConfigureComputeStartTime;
    }

    /**
     * Set the copyConfigureComputeStartTime property: Time configuring compute for copy stage started.
     *
     * @param copyConfigureComputeStartTime the copyConfigureComputeStartTime value to set.
     * @return the JobPropertiesInner object itself.
     */
    public JobPropertiesInner withCopyConfigureComputeStartTime(OffsetDateTime copyConfigureComputeStartTime) {
        this.copyConfigureComputeStartTime = copyConfigureComputeStartTime;
        return this;
    }

    /**
     * Get the copyConfigureComputeEndTime property: Time configuring compute for copy stage ended.
     *
     * @return the copyConfigureComputeEndTime value.
     */
    public OffsetDateTime copyConfigureComputeEndTime() {
        return this.copyConfigureComputeEndTime;
    }

    /**
     * Set the copyConfigureComputeEndTime property: Time configuring compute for copy stage ended.
     *
     * @param copyConfigureComputeEndTime the copyConfigureComputeEndTime value to set.
     * @return the JobPropertiesInner object itself.
     */
    public JobPropertiesInner withCopyConfigureComputeEndTime(OffsetDateTime copyConfigureComputeEndTime) {
        this.copyConfigureComputeEndTime = copyConfigureComputeEndTime;
        return this;
    }

    /**
     * Get the copyStartTime property: Time copying files started.
     *
     * @return the copyStartTime value.
     */
    public OffsetDateTime copyStartTime() {
        return this.copyStartTime;
    }

    /**
     * Set the copyStartTime property: Time copying files started.
     *
     * @param copyStartTime the copyStartTime value to set.
     * @return the JobPropertiesInner object itself.
     */
    public JobPropertiesInner withCopyStartTime(OffsetDateTime copyStartTime) {
        this.copyStartTime = copyStartTime;
        return this;
    }

    /**
     * Get the copyEndTime property: Time copying files ended.
     *
     * @return the copyEndTime value.
     */
    public OffsetDateTime copyEndTime() {
        return this.copyEndTime;
    }

    /**
     * Set the copyEndTime property: Time copying files ended.
     *
     * @param copyEndTime the copyEndTime value to set.
     * @return the JobPropertiesInner object itself.
     */
    public JobPropertiesInner withCopyEndTime(OffsetDateTime copyEndTime) {
        this.copyEndTime = copyEndTime;
        return this;
    }

    /**
     * Get the postCopyStartTime property: Time copying logs and creating share snapshot started.
     *
     * @return the postCopyStartTime value.
     */
    public OffsetDateTime postCopyStartTime() {
        return this.postCopyStartTime;
    }

    /**
     * Set the postCopyStartTime property: Time copying logs and creating share snapshot started.
     *
     * @param postCopyStartTime the postCopyStartTime value to set.
     * @return the JobPropertiesInner object itself.
     */
    public JobPropertiesInner withPostCopyStartTime(OffsetDateTime postCopyStartTime) {
        this.postCopyStartTime = postCopyStartTime;
        return this;
    }

    /**
     * Get the postCopyEndTime property: Time copying logs and creating share snapshot ended.
     *
     * @return the postCopyEndTime value.
     */
    public OffsetDateTime postCopyEndTime() {
        return this.postCopyEndTime;
    }

    /**
     * Set the postCopyEndTime property: Time copying logs and creating share snapshot ended.
     *
     * @param postCopyEndTime the postCopyEndTime value to set.
     * @return the JobPropertiesInner object itself.
     */
    public JobPropertiesInner withPostCopyEndTime(OffsetDateTime postCopyEndTime) {
        this.postCopyEndTime = postCopyEndTime;
        return this;
    }

    /**
     * Get the cleanupComputeStartTime property: Time cleaning up compute started.
     *
     * @return the cleanupComputeStartTime value.
     */
    public OffsetDateTime cleanupComputeStartTime() {
        return this.cleanupComputeStartTime;
    }

    /**
     * Set the cleanupComputeStartTime property: Time cleaning up compute started.
     *
     * @param cleanupComputeStartTime the cleanupComputeStartTime value to set.
     * @return the JobPropertiesInner object itself.
     */
    public JobPropertiesInner withCleanupComputeStartTime(OffsetDateTime cleanupComputeStartTime) {
        this.cleanupComputeStartTime = cleanupComputeStartTime;
        return this;
    }

    /**
     * Get the cleanupComputeEndTime property: Time cleaning up compute ended.
     *
     * @return the cleanupComputeEndTime value.
     */
    public OffsetDateTime cleanupComputeEndTime() {
        return this.cleanupComputeEndTime;
    }

    /**
     * Set the cleanupComputeEndTime property: Time cleaning up compute ended.
     *
     * @param cleanupComputeEndTime the cleanupComputeEndTime value to set.
     * @return the JobPropertiesInner object itself.
     */
    public JobPropertiesInner withCleanupComputeEndTime(OffsetDateTime cleanupComputeEndTime) {
        this.cleanupComputeEndTime = cleanupComputeEndTime;
        return this;
    }

    /**
     * Get the details property: Details of a job run. This field will only be sent for expand details filter.
     *
     * @return the details value.
     */
    public JobDetailsInner details() {
        return this.details;
    }

    /**
     * Set the details property: Details of a job run. This field will only be sent for expand details filter.
     *
     * @param details the details value to set.
     * @return the JobPropertiesInner object itself.
     */
    public JobPropertiesInner withDetails(JobDetailsInner details) {
        this.details = details;
        return this;
    }

    /**
     * Get the dataSourceName property: Name of the data source on which the job was triggered.
     *
     * @return the dataSourceName value.
     */
    public String dataSourceName() {
        return this.dataSourceName;
    }

    /**
     * Set the dataSourceName property: Name of the data source on which the job was triggered.
     *
     * @param dataSourceName the dataSourceName value to set.
     * @return the JobPropertiesInner object itself.
     */
    public JobPropertiesInner withDataSourceName(String dataSourceName) {
        this.dataSourceName = dataSourceName;
        return this;
    }

    /**
     * Get the dataSinkName property: Name of the data sink on which the job was triggered.
     *
     * @return the dataSinkName value.
     */
    public String dataSinkName() {
        return this.dataSinkName;
    }

    /**
     * Set the dataSinkName property: Name of the data sink on which the job was triggered.
     *
     * @param dataSinkName the dataSinkName value to set.
     * @return the JobPropertiesInner object itself.
     */
    public JobPropertiesInner withDataSinkName(String dataSinkName) {
        this.dataSinkName = dataSinkName;
        return this;
    }

    /**
     * Get the copyErrors property: Number of copy errors.
     *
     * @return the copyErrors value.
     */
    public Long copyErrors() {
        return this.copyErrors;
    }

    /**
     * Set the copyErrors property: Number of copy errors.
     *
     * @param copyErrors the copyErrors value to set.
     * @return the JobPropertiesInner object itself.
     */
    public JobPropertiesInner withCopyErrors(Long copyErrors) {
        this.copyErrors = copyErrors;
        return this;
    }

    /**
     * Get the unsupportedFiles property: Number of unsupported files.
     *
     * @return the unsupportedFiles value.
     */
    public Long unsupportedFiles() {
        return this.unsupportedFiles;
    }

    /**
     * Set the unsupportedFiles property: Number of unsupported files.
     *
     * @param unsupportedFiles the unsupportedFiles value to set.
     * @return the JobPropertiesInner object itself.
     */
    public JobPropertiesInner withUnsupportedFiles(Long unsupportedFiles) {
        this.unsupportedFiles = unsupportedFiles;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (isCancellable() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property isCancellable in model JobPropertiesInner"));
        }
        if (details() != null) {
            details().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(JobPropertiesInner.class);
}
