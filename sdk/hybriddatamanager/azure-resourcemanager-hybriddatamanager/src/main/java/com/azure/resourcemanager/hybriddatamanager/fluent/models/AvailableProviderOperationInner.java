// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybriddatamanager.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.hybriddatamanager.models.AvailableProviderOperationDisplay;
import java.io.IOException;

/**
 * Class represents provider operation.
 */
@Fluent
public final class AvailableProviderOperationInner implements JsonSerializable<AvailableProviderOperationInner> {
    /*
     * Gets or Sets Name of the operations
     */
    private String name;

    /*
     * Gets or sets Display information
     * Contains the localized display information for this particular operation/action
     */
    private AvailableProviderOperationDisplay display;

    /*
     * Gets or sets Origin
     * The intended executor of the operation; governs the display of the operation in the RBAC UX and the audit logs
     * UX.
     * Default value is “user,system”
     */
    private String origin;

    /*
     * Gets or sets Properties
     * Reserved for future use
     */
    private Object properties;

    /**
     * Creates an instance of AvailableProviderOperationInner class.
     */
    public AvailableProviderOperationInner() {
    }

    /**
     * Get the name property: Gets or Sets Name of the operations.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Gets or Sets Name of the operations.
     * 
     * @param name the name value to set.
     * @return the AvailableProviderOperationInner object itself.
     */
    public AvailableProviderOperationInner withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the display property: Gets or sets Display information
     * Contains the localized display information for this particular operation/action.
     * 
     * @return the display value.
     */
    public AvailableProviderOperationDisplay display() {
        return this.display;
    }

    /**
     * Set the display property: Gets or sets Display information
     * Contains the localized display information for this particular operation/action.
     * 
     * @param display the display value to set.
     * @return the AvailableProviderOperationInner object itself.
     */
    public AvailableProviderOperationInner withDisplay(AvailableProviderOperationDisplay display) {
        this.display = display;
        return this;
    }

    /**
     * Get the origin property: Gets or sets Origin
     * The intended executor of the operation; governs the display of the operation in the RBAC UX and the audit logs
     * UX.
     * Default value is “user,system”.
     * 
     * @return the origin value.
     */
    public String origin() {
        return this.origin;
    }

    /**
     * Set the origin property: Gets or sets Origin
     * The intended executor of the operation; governs the display of the operation in the RBAC UX and the audit logs
     * UX.
     * Default value is “user,system”.
     * 
     * @param origin the origin value to set.
     * @return the AvailableProviderOperationInner object itself.
     */
    public AvailableProviderOperationInner withOrigin(String origin) {
        this.origin = origin;
        return this;
    }

    /**
     * Get the properties property: Gets or sets Properties
     * Reserved for future use.
     * 
     * @return the properties value.
     */
    public Object properties() {
        return this.properties;
    }

    /**
     * Set the properties property: Gets or sets Properties
     * Reserved for future use.
     * 
     * @param properties the properties value to set.
     * @return the AvailableProviderOperationInner object itself.
     */
    public AvailableProviderOperationInner withProperties(Object properties) {
        this.properties = properties;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (name() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property name in model AvailableProviderOperationInner"));
        }
        if (display() != null) {
            display().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(AvailableProviderOperationInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeJsonField("display", this.display);
        jsonWriter.writeStringField("origin", this.origin);
        jsonWriter.writeUntypedField("properties", this.properties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AvailableProviderOperationInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AvailableProviderOperationInner if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AvailableProviderOperationInner.
     */
    public static AvailableProviderOperationInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AvailableProviderOperationInner deserializedAvailableProviderOperationInner
                = new AvailableProviderOperationInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedAvailableProviderOperationInner.name = reader.getString();
                } else if ("display".equals(fieldName)) {
                    deserializedAvailableProviderOperationInner.display
                        = AvailableProviderOperationDisplay.fromJson(reader);
                } else if ("origin".equals(fieldName)) {
                    deserializedAvailableProviderOperationInner.origin = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedAvailableProviderOperationInner.properties = reader.readUntyped();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAvailableProviderOperationInner;
        });
    }
}
