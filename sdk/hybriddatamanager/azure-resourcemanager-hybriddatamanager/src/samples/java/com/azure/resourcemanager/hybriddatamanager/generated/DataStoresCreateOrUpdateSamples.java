// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybriddatamanager.generated;

import com.azure.core.management.serializer.SerializerFactory;
import com.azure.core.util.serializer.SerializerEncoding;
import com.azure.resourcemanager.hybriddatamanager.models.CustomerSecret;
import com.azure.resourcemanager.hybriddatamanager.models.State;
import com.azure.resourcemanager.hybriddatamanager.models.SupportedAlgorithm;
import java.io.IOException;
import java.util.Arrays;

/**
 * Samples for DataStores CreateOrUpdate.
 */
public final class DataStoresCreateOrUpdateSamples {
    /*
     * x-ms-original-file:
     * specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/
     * DataStores_CreateOrUpdate_DataSource-PUT-example-162.json
     */
    /**
     * Sample code: DataStores_CreateOrUpdate_DataSourcePUT162.
     * 
     * @param manager Entry point to HybridDataManager.
     */
    public static void dataStoresCreateOrUpdateDataSourcePUT162(
        com.azure.resourcemanager.hybriddatamanager.HybridDataManager manager) throws IOException {
        manager.dataStores()
            .define("TestStorSimpleSource1")
            .withExistingDataManager("ResourceGroupForSDKTest", "TestAzureSDKOperations")
            .withState(State.ENABLED)
            .withDataStoreTypeId(
                "/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/TestAzureSDKOperations/dataStoreTypes/StorSimple8000Series")
            .withRepositoryId(
                "/subscriptions/c5fc377d-0085-41b9-86b7-cc96dc56d1e9/resourceGroups/ForDMS/providers/Microsoft.StorSimple/managers/BLR8600")
            .withExtendedProperties(SerializerFactory.createDefaultManagementSerializerAdapter()
                .deserialize(
                    "{\"extendedSaKey\":null,\"resourceId\":\"/subscriptions/c5fc377d-0085-41b9-86b7-cc96dc56d1e9/resourceGroups/ForDMS/providers/Microsoft.StorSimple/managers/BLR8600\"}",
                    Object.class, SerializerEncoding.JSON))
            .withCustomerSecrets(Arrays.asList(new CustomerSecret().withKeyIdentifier("fakeTokenPlaceholder")
                .withKeyValue("fakeTokenPlaceholder")
                .withAlgorithm(SupportedAlgorithm.RSA1_5)))
            .create();
    }

    /*
     * x-ms-original-file:
     * specification/hybriddatamanager/resource-manager/Microsoft.HybridData/stable/2019-06-01/examples/
     * DataStores_CreateOrUpdate_DataSink-PUT-example-162.json
     */
    /**
     * Sample code: DataStores_CreateOrUpdate_DataSinkPUT162.
     * 
     * @param manager Entry point to HybridDataManager.
     */
    public static void dataStoresCreateOrUpdateDataSinkPUT162(
        com.azure.resourcemanager.hybriddatamanager.HybridDataManager manager) throws IOException {
        manager.dataStores()
            .define("TestAzureStorage1")
            .withExistingDataManager("ResourceGroupForSDKTest", "TestAzureSDKOperations")
            .withState(State.ENABLED)
            .withDataStoreTypeId(
                "/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/TestAzureSDKOperations/dataStoreTypes/AzureStorageAccount")
            .withRepositoryId(
                "/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.Storage/storageAccounts/dmsdatasink")
            .withExtendedProperties(SerializerFactory.createDefaultManagementSerializerAdapter()
                .deserialize(
                    "{\"extendedSaKey\":null,\"extendedSaName\":\"/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.Storage/storageAccounts/dmsdatasink\",\"storageAccountNameForQueue\":\"/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.Storage/storageAccounts/dmsdatasink\"}",
                    Object.class, SerializerEncoding.JSON))
            .withCustomerSecrets(Arrays.asList(
                new CustomerSecret().withKeyIdentifier("fakeTokenPlaceholder")
                    .withKeyValue("fakeTokenPlaceholder")
                    .withAlgorithm(SupportedAlgorithm.RSA1_5),
                new CustomerSecret().withKeyIdentifier("fakeTokenPlaceholder")
                    .withKeyValue("fakeTokenPlaceholder")
                    .withAlgorithm(SupportedAlgorithm.RSA1_5)))
            .create();
    }
}
