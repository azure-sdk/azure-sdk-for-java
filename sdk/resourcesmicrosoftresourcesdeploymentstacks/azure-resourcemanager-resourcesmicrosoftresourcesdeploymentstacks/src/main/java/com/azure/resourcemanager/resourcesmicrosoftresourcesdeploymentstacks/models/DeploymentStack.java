// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resourcesmicrosoftresourcesdeploymentstacks.models;

import com.azure.core.http.rest.Response;
import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.management.exception.ManagementError;
import com.azure.core.util.Context;
import com.azure.resourcemanager.resourcesmicrosoftresourcesdeploymentstacks.fluent.models.DeploymentStackInner;
import java.util.List;
import java.util.Map;

/**
 * An immutable client-side representation of DeploymentStack.
 */
public interface DeploymentStack {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     * 
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     * 
     * @return the type value.
     */
    String type();

    /**
     * Gets the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * Gets the location property: The location of the Deployment stack. It cannot be changed after creation. It must be
     * one of the supported Azure locations.
     * 
     * @return the location value.
     */
    String location();

    /**
     * Gets the tags property: Deployment stack resource tags.
     * 
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the template property: The template content. You use this element when you want to pass the template syntax
     * directly in the request rather than link to an existing template. It can be a JObject or well-formed JSON string.
     * Use either the templateLink property or the template property, but not both.
     * 
     * @return the template value.
     */
    Object template();

    /**
     * Gets the templateLink property: The URI of the template. Use either the templateLink property or the template
     * property, but not both.
     * 
     * @return the templateLink value.
     */
    DeploymentStacksTemplateLink templateLink();

    /**
     * Gets the parameters property: Name and value pairs that define the deployment parameters for the template. Use
     * this element when providing the parameter values directly in the request, rather than linking to an existing
     * parameter file. Use either the parametersLink property or the parameters property, but not both.
     * 
     * @return the parameters value.
     */
    Map<String, DeploymentParameter> parameters();

    /**
     * Gets the parametersLink property: The URI of parameters file. Use this element to link to an existing parameters
     * file. Use either the parametersLink property or the parameters property, but not both.
     * 
     * @return the parametersLink value.
     */
    DeploymentStacksParametersLink parametersLink();

    /**
     * Gets the actionOnUnmanage property: Defines the behavior of resources that are no longer managed after the
     * Deployment stack is updated or deleted.
     * 
     * @return the actionOnUnmanage value.
     */
    ActionOnUnmanage actionOnUnmanage();

    /**
     * Gets the debugSetting property: The debug setting of the deployment.
     * 
     * @return the debugSetting value.
     */
    DeploymentStacksDebugSetting debugSetting();

    /**
     * Gets the bypassStackOutOfSyncError property: Flag to bypass service errors that indicate the stack resource list
     * is not correctly synchronized.
     * 
     * @return the bypassStackOutOfSyncError value.
     */
    Boolean bypassStackOutOfSyncError();

    /**
     * Gets the deploymentScope property: The scope at which the initial deployment should be created. If a scope is not
     * specified, it will default to the scope of the deployment stack. Valid scopes are: management group (format:
     * '/providers/Microsoft.Management/managementGroups/{managementGroupId}'), subscription (format:
     * '/subscriptions/{subscriptionId}'), resource group (format:
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}').
     * 
     * @return the deploymentScope value.
     */
    String deploymentScope();

    /**
     * Gets the description property: Deployment stack description. Max length of 4096 characters.
     * 
     * @return the description value.
     */
    String description();

    /**
     * Gets the denySettings property: Defines how resources deployed by the stack are locked.
     * 
     * @return the denySettings value.
     */
    DenySettings denySettings();

    /**
     * Gets the provisioningState property: State of the deployment stack.
     * 
     * @return the provisioningState value.
     */
    DeploymentStackProvisioningState provisioningState();

    /**
     * Gets the correlationId property: The correlation id of the last Deployment stack upsert or delete operation. It
     * is in GUID format and is used for tracing.
     * 
     * @return the correlationId value.
     */
    String correlationId();

    /**
     * Gets the detachedResources property: An array of resources that were detached during the most recent Deployment
     * stack update. Detached means that the resource was removed from the template, but no relevant deletion operations
     * were specified. So, the resource still exists while no longer being associated with the stack.
     * 
     * @return the detachedResources value.
     */
    List<ResourceReference> detachedResources();

    /**
     * Gets the deletedResources property: An array of resources that were deleted during the most recent Deployment
     * stack update. Deleted means that the resource was removed from the template and relevant deletion operations were
     * specified.
     * 
     * @return the deletedResources value.
     */
    List<ResourceReference> deletedResources();

    /**
     * Gets the failedResources property: An array of resources that failed to reach goal state during the most recent
     * update. Each resourceId is accompanied by an error message.
     * 
     * @return the failedResources value.
     */
    List<ResourceReferenceExtended> failedResources();

    /**
     * Gets the resources property: An array of resources currently managed by the deployment stack.
     * 
     * @return the resources value.
     */
    List<ManagedResourceReference> resources();

    /**
     * Gets the deploymentId property: The resourceId of the deployment resource created by the deployment stack.
     * 
     * @return the deploymentId value.
     */
    String deploymentId();

    /**
     * Gets the outputs property: The outputs of the deployment resource created by the deployment stack.
     * 
     * @return the outputs value.
     */
    Object outputs();

    /**
     * Gets the duration property: The duration of the last successful Deployment stack update.
     * 
     * @return the duration value.
     */
    String duration();

    /**
     * Gets the error property: The error detail.
     * 
     * @return the error value.
     */
    ManagementError error();

    /**
     * Gets the region of the resource.
     * 
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     * 
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the name of the resource group.
     * 
     * @return the name of the resource group.
     */
    String resourceGroupName();

    /**
     * Gets the inner
     * com.azure.resourcemanager.resourcesmicrosoftresourcesdeploymentstacks.fluent.models.DeploymentStackInner object.
     * 
     * @return the inner object.
     */
    DeploymentStackInner innerModel();

    /**
     * The entirety of the DeploymentStack definition.
     */
    interface Definition
        extends DefinitionStages.Blank, DefinitionStages.WithResourceGroup, DefinitionStages.WithCreate {
    }

    /**
     * The DeploymentStack definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of the DeploymentStack definition.
         */
        interface Blank extends WithResourceGroup {
        }

        /**
         * The stage of the DeploymentStack definition allowing to specify parent resource.
         */
        interface WithResourceGroup {
            /**
             * Specifies resourceGroupName.
             * 
             * @param resourceGroupName The name of the resource group. The name is case insensitive.
             * @return the next definition stage.
             */
            WithCreate withExistingResourceGroup(String resourceGroupName);
        }

        /**
         * The stage of the DeploymentStack definition which contains all the minimum required properties for the
         * resource to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithLocation, DefinitionStages.WithTags, DefinitionStages.WithTemplate,
            DefinitionStages.WithTemplateLink, DefinitionStages.WithParameters, DefinitionStages.WithParametersLink,
            DefinitionStages.WithActionOnUnmanage, DefinitionStages.WithDebugSetting,
            DefinitionStages.WithBypassStackOutOfSyncError, DefinitionStages.WithDeploymentScope,
            DefinitionStages.WithDescription, DefinitionStages.WithDenySettings, DefinitionStages.WithError {
            /**
             * Executes the create request.
             * 
             * @return the created resource.
             */
            DeploymentStack create();

            /**
             * Executes the create request.
             * 
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            DeploymentStack create(Context context);
        }

        /**
         * The stage of the DeploymentStack definition allowing to specify location.
         */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             * 
             * @param location The location of the Deployment stack. It cannot be changed after creation. It must be one
             * of the supported Azure locations.
             * @return the next definition stage.
             */
            WithCreate withRegion(Region location);

            /**
             * Specifies the region for the resource.
             * 
             * @param location The location of the Deployment stack. It cannot be changed after creation. It must be one
             * of the supported Azure locations.
             * @return the next definition stage.
             */
            WithCreate withRegion(String location);
        }

        /**
         * The stage of the DeploymentStack definition allowing to specify tags.
         */
        interface WithTags {
            /**
             * Specifies the tags property: Deployment stack resource tags..
             * 
             * @param tags Deployment stack resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }

        /**
         * The stage of the DeploymentStack definition allowing to specify template.
         */
        interface WithTemplate {
            /**
             * Specifies the template property: The template content. You use this element when you want to pass the
             * template syntax directly in the request rather than link to an existing template. It can be a JObject or
             * well-formed JSON string. Use either the templateLink property or the template property, but not both..
             * 
             * @param template The template content. You use this element when you want to pass the template syntax
             * directly in the request rather than link to an existing template. It can be a JObject or well-formed JSON
             * string. Use either the templateLink property or the template property, but not both.
             * @return the next definition stage.
             */
            WithCreate withTemplate(Object template);
        }

        /**
         * The stage of the DeploymentStack definition allowing to specify templateLink.
         */
        interface WithTemplateLink {
            /**
             * Specifies the templateLink property: The URI of the template. Use either the templateLink property or the
             * template property, but not both..
             * 
             * @param templateLink The URI of the template. Use either the templateLink property or the template
             * property, but not both.
             * @return the next definition stage.
             */
            WithCreate withTemplateLink(DeploymentStacksTemplateLink templateLink);
        }

        /**
         * The stage of the DeploymentStack definition allowing to specify parameters.
         */
        interface WithParameters {
            /**
             * Specifies the parameters property: Name and value pairs that define the deployment parameters for the
             * template. Use this element when providing the parameter values directly in the request, rather than
             * linking to an existing parameter file. Use either the parametersLink property or the parameters property,
             * but not both..
             * 
             * @param parameters Name and value pairs that define the deployment parameters for the template. Use this
             * element when providing the parameter values directly in the request, rather than linking to an existing
             * parameter file. Use either the parametersLink property or the parameters property, but not both.
             * @return the next definition stage.
             */
            WithCreate withParameters(Map<String, DeploymentParameter> parameters);
        }

        /**
         * The stage of the DeploymentStack definition allowing to specify parametersLink.
         */
        interface WithParametersLink {
            /**
             * Specifies the parametersLink property: The URI of parameters file. Use this element to link to an
             * existing parameters file. Use either the parametersLink property or the parameters property, but not
             * both..
             * 
             * @param parametersLink The URI of parameters file. Use this element to link to an existing parameters
             * file. Use either the parametersLink property or the parameters property, but not both.
             * @return the next definition stage.
             */
            WithCreate withParametersLink(DeploymentStacksParametersLink parametersLink);
        }

        /**
         * The stage of the DeploymentStack definition allowing to specify actionOnUnmanage.
         */
        interface WithActionOnUnmanage {
            /**
             * Specifies the actionOnUnmanage property: Defines the behavior of resources that are no longer managed
             * after the Deployment stack is updated or deleted..
             * 
             * @param actionOnUnmanage Defines the behavior of resources that are no longer managed after the Deployment
             * stack is updated or deleted.
             * @return the next definition stage.
             */
            WithCreate withActionOnUnmanage(ActionOnUnmanage actionOnUnmanage);
        }

        /**
         * The stage of the DeploymentStack definition allowing to specify debugSetting.
         */
        interface WithDebugSetting {
            /**
             * Specifies the debugSetting property: The debug setting of the deployment..
             * 
             * @param debugSetting The debug setting of the deployment.
             * @return the next definition stage.
             */
            WithCreate withDebugSetting(DeploymentStacksDebugSetting debugSetting);
        }

        /**
         * The stage of the DeploymentStack definition allowing to specify bypassStackOutOfSyncError.
         */
        interface WithBypassStackOutOfSyncError {
            /**
             * Specifies the bypassStackOutOfSyncError property: Flag to bypass service errors that indicate the stack
             * resource list is not correctly synchronized..
             * 
             * @param bypassStackOutOfSyncError Flag to bypass service errors that indicate the stack resource list is
             * not correctly synchronized.
             * @return the next definition stage.
             */
            WithCreate withBypassStackOutOfSyncError(Boolean bypassStackOutOfSyncError);
        }

        /**
         * The stage of the DeploymentStack definition allowing to specify deploymentScope.
         */
        interface WithDeploymentScope {
            /**
             * Specifies the deploymentScope property: The scope at which the initial deployment should be created. If a
             * scope is not specified, it will default to the scope of the deployment stack. Valid scopes are:
             * management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroupId}'),
             * subscription (format: '/subscriptions/{subscriptionId}'), resource group (format:
             * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}')..
             * 
             * @param deploymentScope The scope at which the initial deployment should be created. If a scope is not
             * specified, it will default to the scope of the deployment stack. Valid scopes are: management group
             * (format: '/providers/Microsoft.Management/managementGroups/{managementGroupId}'), subscription (format:
             * '/subscriptions/{subscriptionId}'), resource group (format:
             * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}').
             * @return the next definition stage.
             */
            WithCreate withDeploymentScope(String deploymentScope);
        }

        /**
         * The stage of the DeploymentStack definition allowing to specify description.
         */
        interface WithDescription {
            /**
             * Specifies the description property: Deployment stack description. Max length of 4096 characters..
             * 
             * @param description Deployment stack description. Max length of 4096 characters.
             * @return the next definition stage.
             */
            WithCreate withDescription(String description);
        }

        /**
         * The stage of the DeploymentStack definition allowing to specify denySettings.
         */
        interface WithDenySettings {
            /**
             * Specifies the denySettings property: Defines how resources deployed by the stack are locked..
             * 
             * @param denySettings Defines how resources deployed by the stack are locked.
             * @return the next definition stage.
             */
            WithCreate withDenySettings(DenySettings denySettings);
        }

        /**
         * The stage of the DeploymentStack definition allowing to specify error.
         */
        interface WithError {
            /**
             * Specifies the error property: The error detail..
             * 
             * @param error The error detail.
             * @return the next definition stage.
             */
            WithCreate withError(ManagementError error);
        }
    }

    /**
     * Begins update for the DeploymentStack resource.
     * 
     * @return the stage of resource update.
     */
    DeploymentStack.Update update();

    /**
     * The template for DeploymentStack update.
     */
    interface Update extends UpdateStages.WithTags, UpdateStages.WithTemplate, UpdateStages.WithTemplateLink,
        UpdateStages.WithParameters, UpdateStages.WithParametersLink, UpdateStages.WithActionOnUnmanage,
        UpdateStages.WithDebugSetting, UpdateStages.WithBypassStackOutOfSyncError, UpdateStages.WithDeploymentScope,
        UpdateStages.WithDescription, UpdateStages.WithDenySettings, UpdateStages.WithError {
        /**
         * Executes the update request.
         * 
         * @return the updated resource.
         */
        DeploymentStack apply();

        /**
         * Executes the update request.
         * 
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        DeploymentStack apply(Context context);
    }

    /**
     * The DeploymentStack update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the DeploymentStack update allowing to specify tags.
         */
        interface WithTags {
            /**
             * Specifies the tags property: Deployment stack resource tags..
             * 
             * @param tags Deployment stack resource tags.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }

        /**
         * The stage of the DeploymentStack update allowing to specify template.
         */
        interface WithTemplate {
            /**
             * Specifies the template property: The template content. You use this element when you want to pass the
             * template syntax directly in the request rather than link to an existing template. It can be a JObject or
             * well-formed JSON string. Use either the templateLink property or the template property, but not both..
             * 
             * @param template The template content. You use this element when you want to pass the template syntax
             * directly in the request rather than link to an existing template. It can be a JObject or well-formed JSON
             * string. Use either the templateLink property or the template property, but not both.
             * @return the next definition stage.
             */
            Update withTemplate(Object template);
        }

        /**
         * The stage of the DeploymentStack update allowing to specify templateLink.
         */
        interface WithTemplateLink {
            /**
             * Specifies the templateLink property: The URI of the template. Use either the templateLink property or the
             * template property, but not both..
             * 
             * @param templateLink The URI of the template. Use either the templateLink property or the template
             * property, but not both.
             * @return the next definition stage.
             */
            Update withTemplateLink(DeploymentStacksTemplateLink templateLink);
        }

        /**
         * The stage of the DeploymentStack update allowing to specify parameters.
         */
        interface WithParameters {
            /**
             * Specifies the parameters property: Name and value pairs that define the deployment parameters for the
             * template. Use this element when providing the parameter values directly in the request, rather than
             * linking to an existing parameter file. Use either the parametersLink property or the parameters property,
             * but not both..
             * 
             * @param parameters Name and value pairs that define the deployment parameters for the template. Use this
             * element when providing the parameter values directly in the request, rather than linking to an existing
             * parameter file. Use either the parametersLink property or the parameters property, but not both.
             * @return the next definition stage.
             */
            Update withParameters(Map<String, DeploymentParameter> parameters);
        }

        /**
         * The stage of the DeploymentStack update allowing to specify parametersLink.
         */
        interface WithParametersLink {
            /**
             * Specifies the parametersLink property: The URI of parameters file. Use this element to link to an
             * existing parameters file. Use either the parametersLink property or the parameters property, but not
             * both..
             * 
             * @param parametersLink The URI of parameters file. Use this element to link to an existing parameters
             * file. Use either the parametersLink property or the parameters property, but not both.
             * @return the next definition stage.
             */
            Update withParametersLink(DeploymentStacksParametersLink parametersLink);
        }

        /**
         * The stage of the DeploymentStack update allowing to specify actionOnUnmanage.
         */
        interface WithActionOnUnmanage {
            /**
             * Specifies the actionOnUnmanage property: Defines the behavior of resources that are no longer managed
             * after the Deployment stack is updated or deleted..
             * 
             * @param actionOnUnmanage Defines the behavior of resources that are no longer managed after the Deployment
             * stack is updated or deleted.
             * @return the next definition stage.
             */
            Update withActionOnUnmanage(ActionOnUnmanage actionOnUnmanage);
        }

        /**
         * The stage of the DeploymentStack update allowing to specify debugSetting.
         */
        interface WithDebugSetting {
            /**
             * Specifies the debugSetting property: The debug setting of the deployment..
             * 
             * @param debugSetting The debug setting of the deployment.
             * @return the next definition stage.
             */
            Update withDebugSetting(DeploymentStacksDebugSetting debugSetting);
        }

        /**
         * The stage of the DeploymentStack update allowing to specify bypassStackOutOfSyncError.
         */
        interface WithBypassStackOutOfSyncError {
            /**
             * Specifies the bypassStackOutOfSyncError property: Flag to bypass service errors that indicate the stack
             * resource list is not correctly synchronized..
             * 
             * @param bypassStackOutOfSyncError Flag to bypass service errors that indicate the stack resource list is
             * not correctly synchronized.
             * @return the next definition stage.
             */
            Update withBypassStackOutOfSyncError(Boolean bypassStackOutOfSyncError);
        }

        /**
         * The stage of the DeploymentStack update allowing to specify deploymentScope.
         */
        interface WithDeploymentScope {
            /**
             * Specifies the deploymentScope property: The scope at which the initial deployment should be created. If a
             * scope is not specified, it will default to the scope of the deployment stack. Valid scopes are:
             * management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroupId}'),
             * subscription (format: '/subscriptions/{subscriptionId}'), resource group (format:
             * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}')..
             * 
             * @param deploymentScope The scope at which the initial deployment should be created. If a scope is not
             * specified, it will default to the scope of the deployment stack. Valid scopes are: management group
             * (format: '/providers/Microsoft.Management/managementGroups/{managementGroupId}'), subscription (format:
             * '/subscriptions/{subscriptionId}'), resource group (format:
             * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}').
             * @return the next definition stage.
             */
            Update withDeploymentScope(String deploymentScope);
        }

        /**
         * The stage of the DeploymentStack update allowing to specify description.
         */
        interface WithDescription {
            /**
             * Specifies the description property: Deployment stack description. Max length of 4096 characters..
             * 
             * @param description Deployment stack description. Max length of 4096 characters.
             * @return the next definition stage.
             */
            Update withDescription(String description);
        }

        /**
         * The stage of the DeploymentStack update allowing to specify denySettings.
         */
        interface WithDenySettings {
            /**
             * Specifies the denySettings property: Defines how resources deployed by the stack are locked..
             * 
             * @param denySettings Defines how resources deployed by the stack are locked.
             * @return the next definition stage.
             */
            Update withDenySettings(DenySettings denySettings);
        }

        /**
         * The stage of the DeploymentStack update allowing to specify error.
         */
        interface WithError {
            /**
             * Specifies the error property: The error detail..
             * 
             * @param error The error detail.
             * @return the next definition stage.
             */
            Update withError(ManagementError error);
        }
    }

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @return the refreshed resource.
     */
    DeploymentStack refresh();

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    DeploymentStack refresh(Context context);

    /**
     * Exports the template used to create the Deployment stack at Resource Group scope.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return export Template specific properties of the Deployment stack along with {@link Response}.
     */
    Response<DeploymentStackTemplateDefinition> exportTemplateAtResourceGroupWithResponse(Context context);

    /**
     * Exports the template used to create the Deployment stack at Resource Group scope.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return export Template specific properties of the Deployment stack.
     */
    DeploymentStackTemplateDefinition exportTemplateAtResourceGroup();

    /**
     * Runs preflight validation on the Resource Group scoped Deployment stack template to verify its acceptance to
     * Azure Resource Manager.
     * 
     * @param deploymentStack Deployment stack to validate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Deployment stack validation result.
     */
    DeploymentStackValidateResult validateStackAtResourceGroup(DeploymentStackInner deploymentStack);

    /**
     * Runs preflight validation on the Resource Group scoped Deployment stack template to verify its acceptance to
     * Azure Resource Manager.
     * 
     * @param deploymentStack Deployment stack to validate.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Deployment stack validation result.
     */
    DeploymentStackValidateResult validateStackAtResourceGroup(DeploymentStackInner deploymentStack, Context context);
}
