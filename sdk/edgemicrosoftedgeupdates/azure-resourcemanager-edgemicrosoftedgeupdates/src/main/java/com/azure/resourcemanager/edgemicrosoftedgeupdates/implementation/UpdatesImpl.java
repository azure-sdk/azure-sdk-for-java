// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.edgemicrosoftedgeupdates.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.edgemicrosoftedgeupdates.fluent.UpdatesClient;
import com.azure.resourcemanager.edgemicrosoftedgeupdates.fluent.models.UpdateInner;
import com.azure.resourcemanager.edgemicrosoftedgeupdates.models.Update;
import com.azure.resourcemanager.edgemicrosoftedgeupdates.models.Updates;

public final class UpdatesImpl implements Updates {
    private static final ClientLogger LOGGER = new ClientLogger(UpdatesImpl.class);

    private final UpdatesClient innerClient;

    private final com.azure.resourcemanager.edgemicrosoftedgeupdates.EdgemicrosoftedgeupdatesManager serviceManager;

    public UpdatesImpl(UpdatesClient innerClient,
        com.azure.resourcemanager.edgemicrosoftedgeupdates.EdgemicrosoftedgeupdatesManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<Update> list(String resourceUri) {
        PagedIterable<UpdateInner> inner = this.serviceClient().list(resourceUri);
        return Utils.mapPage(inner, inner1 -> new UpdateImpl(inner1, this.manager()));
    }

    public PagedIterable<Update> list(String resourceUri, Context context) {
        PagedIterable<UpdateInner> inner = this.serviceClient().list(resourceUri, context);
        return Utils.mapPage(inner, inner1 -> new UpdateImpl(inner1, this.manager()));
    }

    public Response<Update> getWithResponse(String resourceUri, String updateName, Context context) {
        Response<UpdateInner> inner = this.serviceClient().getWithResponse(resourceUri, updateName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new UpdateImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Update get(String resourceUri, String updateName) {
        UpdateInner inner = this.serviceClient().get(resourceUri, updateName);
        if (inner != null) {
            return new UpdateImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteByResourceGroupWithResponse(String resourceUri, String updateName, Context context) {
        return this.serviceClient().deleteWithResponse(resourceUri, updateName, context);
    }

    public void deleteByResourceGroup(String resourceUri, String updateName) {
        this.serviceClient().delete(resourceUri, updateName);
    }

    public Update getById(String id) {
        String resourceUri = Utils.getValueFromIdByParameterName(id,
            "/{resourceUri}/providers/Microsoft.Edge/updates/{updateName}", "resourceUri");
        if (resourceUri == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceUri'.", id)));
        }
        String updateName = Utils.getValueFromIdByParameterName(id,
            "/{resourceUri}/providers/Microsoft.Edge/updates/{updateName}", "updateName");
        if (updateName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'updates'.", id)));
        }
        return this.getWithResponse(resourceUri, updateName, Context.NONE).getValue();
    }

    public Response<Update> getByIdWithResponse(String id, Context context) {
        String resourceUri = Utils.getValueFromIdByParameterName(id,
            "/{resourceUri}/providers/Microsoft.Edge/updates/{updateName}", "resourceUri");
        if (resourceUri == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceUri'.", id)));
        }
        String updateName = Utils.getValueFromIdByParameterName(id,
            "/{resourceUri}/providers/Microsoft.Edge/updates/{updateName}", "updateName");
        if (updateName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'updates'.", id)));
        }
        return this.getWithResponse(resourceUri, updateName, context);
    }

    public void deleteById(String id) {
        String resourceUri = Utils.getValueFromIdByParameterName(id,
            "/{resourceUri}/providers/Microsoft.Edge/updates/{updateName}", "resourceUri");
        if (resourceUri == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceUri'.", id)));
        }
        String updateName = Utils.getValueFromIdByParameterName(id,
            "/{resourceUri}/providers/Microsoft.Edge/updates/{updateName}", "updateName");
        if (updateName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'updates'.", id)));
        }
        this.deleteByResourceGroupWithResponse(resourceUri, updateName, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceUri = Utils.getValueFromIdByParameterName(id,
            "/{resourceUri}/providers/Microsoft.Edge/updates/{updateName}", "resourceUri");
        if (resourceUri == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceUri'.", id)));
        }
        String updateName = Utils.getValueFromIdByParameterName(id,
            "/{resourceUri}/providers/Microsoft.Edge/updates/{updateName}", "updateName");
        if (updateName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'updates'.", id)));
        }
        return this.deleteByResourceGroupWithResponse(resourceUri, updateName, context);
    }

    private UpdatesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.edgemicrosoftedgeupdates.EdgemicrosoftedgeupdatesManager manager() {
        return this.serviceManager;
    }

    public UpdateImpl define(String name) {
        return new UpdateImpl(name, this.manager());
    }
}
