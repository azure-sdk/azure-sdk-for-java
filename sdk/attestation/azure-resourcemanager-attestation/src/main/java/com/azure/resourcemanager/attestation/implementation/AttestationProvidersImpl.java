// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.attestation.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.attestation.fluent.AttestationProvidersClient;
import com.azure.resourcemanager.attestation.fluent.models.AttestationProviderInner;
import com.azure.resourcemanager.attestation.fluent.models.PrivateLinkResourceListResultInner;
import com.azure.resourcemanager.attestation.models.AttestationProvider;
import com.azure.resourcemanager.attestation.models.AttestationProviders;
import com.azure.resourcemanager.attestation.models.PrivateLinkResourceListResult;

public final class AttestationProvidersImpl implements AttestationProviders {
    private static final ClientLogger LOGGER = new ClientLogger(AttestationProvidersImpl.class);

    private final AttestationProvidersClient innerClient;

    private final com.azure.resourcemanager.attestation.AttestationManager serviceManager;

    public AttestationProvidersImpl(AttestationProvidersClient innerClient,
        com.azure.resourcemanager.attestation.AttestationManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<AttestationProvider> listByResourceGroup(String resourceGroupName) {
        PagedIterable<AttestationProviderInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return Utils.mapPage(inner, inner1 -> new AttestationProviderImpl(inner1, this.manager()));
    }

    public PagedIterable<AttestationProvider> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<AttestationProviderInner> inner
            = this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return Utils.mapPage(inner, inner1 -> new AttestationProviderImpl(inner1, this.manager()));
    }

    public Response<AttestationProvider> getByResourceGroupWithResponse(String resourceGroupName, String providerName,
        Context context) {
        Response<AttestationProviderInner> inner
            = this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, providerName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new AttestationProviderImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public AttestationProvider getByResourceGroup(String resourceGroupName, String providerName) {
        AttestationProviderInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, providerName);
        if (inner != null) {
            return new AttestationProviderImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteByResourceGroupWithResponse(String resourceGroupName, String providerName,
        Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, providerName, context);
    }

    public void deleteByResourceGroup(String resourceGroupName, String providerName) {
        this.serviceClient().delete(resourceGroupName, providerName);
    }

    public Response<PrivateLinkResourceListResult> listByProviderWithResponse(String resourceGroupName,
        String providerName, String subscriptionId, Context context) {
        Response<PrivateLinkResourceListResultInner> inner
            = this.serviceClient().listByProviderWithResponse(resourceGroupName, providerName, subscriptionId, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new PrivateLinkResourceListResultImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PrivateLinkResourceListResult listByProvider(String resourceGroupName, String providerName,
        String subscriptionId) {
        PrivateLinkResourceListResultInner inner
            = this.serviceClient().listByProvider(resourceGroupName, providerName, subscriptionId);
        if (inner != null) {
            return new PrivateLinkResourceListResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public AttestationProvider getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String providerName = Utils.getValueFromIdByName(id, "attestationProviders");
        if (providerName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'attestationProviders'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, providerName, Context.NONE).getValue();
    }

    public Response<AttestationProvider> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String providerName = Utils.getValueFromIdByName(id, "attestationProviders");
        if (providerName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'attestationProviders'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, providerName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String providerName = Utils.getValueFromIdByName(id, "attestationProviders");
        if (providerName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'attestationProviders'.", id)));
        }
        this.deleteByResourceGroupWithResponse(resourceGroupName, providerName, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String providerName = Utils.getValueFromIdByName(id, "attestationProviders");
        if (providerName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'attestationProviders'.", id)));
        }
        return this.deleteByResourceGroupWithResponse(resourceGroupName, providerName, context);
    }

    private AttestationProvidersClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.attestation.AttestationManager manager() {
        return this.serviceManager;
    }

    public AttestationProviderImpl define(String name) {
        return new AttestationProviderImpl(name, this.manager());
    }
}
