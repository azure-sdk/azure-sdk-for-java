// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.attestation.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Client supplied parameters used to patch an existing attestation provider.
 */
@Fluent
public final class AttestationServicePatchSpecificParams
    implements JsonSerializable<AttestationServicePatchSpecificParams> {
    /*
     * Controls whether traffic from the public network is allowed to access the Attestation Provider APIs.
     */
    private PublicNetworkAccessType publicNetworkAccess;

    /*
     * The setting that controls whether authentication is enabled or disabled for TPM Attestation REST APIs.
     */
    private TpmAttestationAuthenticationType tpmAttestationAuthentication;

    /**
     * Creates an instance of AttestationServicePatchSpecificParams class.
     */
    public AttestationServicePatchSpecificParams() {
    }

    /**
     * Get the publicNetworkAccess property: Controls whether traffic from the public network is allowed to access the
     * Attestation Provider APIs.
     * 
     * @return the publicNetworkAccess value.
     */
    public PublicNetworkAccessType publicNetworkAccess() {
        return this.publicNetworkAccess;
    }

    /**
     * Set the publicNetworkAccess property: Controls whether traffic from the public network is allowed to access the
     * Attestation Provider APIs.
     * 
     * @param publicNetworkAccess the publicNetworkAccess value to set.
     * @return the AttestationServicePatchSpecificParams object itself.
     */
    public AttestationServicePatchSpecificParams withPublicNetworkAccess(PublicNetworkAccessType publicNetworkAccess) {
        this.publicNetworkAccess = publicNetworkAccess;
        return this;
    }

    /**
     * Get the tpmAttestationAuthentication property: The setting that controls whether authentication is enabled or
     * disabled for TPM Attestation REST APIs.
     * 
     * @return the tpmAttestationAuthentication value.
     */
    public TpmAttestationAuthenticationType tpmAttestationAuthentication() {
        return this.tpmAttestationAuthentication;
    }

    /**
     * Set the tpmAttestationAuthentication property: The setting that controls whether authentication is enabled or
     * disabled for TPM Attestation REST APIs.
     * 
     * @param tpmAttestationAuthentication the tpmAttestationAuthentication value to set.
     * @return the AttestationServicePatchSpecificParams object itself.
     */
    public AttestationServicePatchSpecificParams
        withTpmAttestationAuthentication(TpmAttestationAuthenticationType tpmAttestationAuthentication) {
        this.tpmAttestationAuthentication = tpmAttestationAuthentication;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("publicNetworkAccess",
            this.publicNetworkAccess == null ? null : this.publicNetworkAccess.toString());
        jsonWriter.writeStringField("tpmAttestationAuthentication",
            this.tpmAttestationAuthentication == null ? null : this.tpmAttestationAuthentication.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AttestationServicePatchSpecificParams from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AttestationServicePatchSpecificParams if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AttestationServicePatchSpecificParams.
     */
    public static AttestationServicePatchSpecificParams fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AttestationServicePatchSpecificParams deserializedAttestationServicePatchSpecificParams
                = new AttestationServicePatchSpecificParams();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("publicNetworkAccess".equals(fieldName)) {
                    deserializedAttestationServicePatchSpecificParams.publicNetworkAccess
                        = PublicNetworkAccessType.fromString(reader.getString());
                } else if ("tpmAttestationAuthentication".equals(fieldName)) {
                    deserializedAttestationServicePatchSpecificParams.tpmAttestationAuthentication
                        = TpmAttestationAuthenticationType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAttestationServicePatchSpecificParams;
        });
    }
}
