// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.attestation.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.attestation.fluent.AttestationManagementClientPrivateEndpointConnectionsClient;
import com.azure.resourcemanager.attestation.fluent.models.AttestationManagementClientPrivateEndpointConnectionInner;
import com.azure.resourcemanager.attestation.models.AttestationManagementClientPrivateEndpointConnection;
import com.azure.resourcemanager.attestation.models.AttestationManagementClientPrivateEndpointConnections;

public final class AttestationManagementClientPrivateEndpointConnectionsImpl
    implements AttestationManagementClientPrivateEndpointConnections {
    private static final ClientLogger LOGGER
        = new ClientLogger(AttestationManagementClientPrivateEndpointConnectionsImpl.class);

    private final AttestationManagementClientPrivateEndpointConnectionsClient innerClient;

    private final com.azure.resourcemanager.attestation.AttestationManager serviceManager;

    public AttestationManagementClientPrivateEndpointConnectionsImpl(
        AttestationManagementClientPrivateEndpointConnectionsClient innerClient,
        com.azure.resourcemanager.attestation.AttestationManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<AttestationManagementClientPrivateEndpointConnection>
        listByAttestationProvider(String resourceGroupName, String providerName) {
        PagedIterable<AttestationManagementClientPrivateEndpointConnectionInner> inner
            = this.serviceClient().listByAttestationProvider(resourceGroupName, providerName);
        return Utils.mapPage(inner,
            inner1 -> new AttestationManagementClientPrivateEndpointConnectionImpl(inner1, this.manager()));
    }

    public PagedIterable<AttestationManagementClientPrivateEndpointConnection>
        listByAttestationProvider(String resourceGroupName, String providerName, Context context) {
        PagedIterable<AttestationManagementClientPrivateEndpointConnectionInner> inner
            = this.serviceClient().listByAttestationProvider(resourceGroupName, providerName, context);
        return Utils.mapPage(inner,
            inner1 -> new AttestationManagementClientPrivateEndpointConnectionImpl(inner1, this.manager()));
    }

    public Response<AttestationManagementClientPrivateEndpointConnection> getWithResponse(String resourceGroupName,
        String providerName, String privateEndpointConnectionName, Context context) {
        Response<AttestationManagementClientPrivateEndpointConnectionInner> inner = this.serviceClient()
            .getWithResponse(resourceGroupName, providerName, privateEndpointConnectionName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new AttestationManagementClientPrivateEndpointConnectionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public AttestationManagementClientPrivateEndpointConnection get(String resourceGroupName, String providerName,
        String privateEndpointConnectionName) {
        AttestationManagementClientPrivateEndpointConnectionInner inner
            = this.serviceClient().get(resourceGroupName, providerName, privateEndpointConnectionName);
        if (inner != null) {
            return new AttestationManagementClientPrivateEndpointConnectionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteWithResponse(String resourceGroupName, String providerName,
        String privateEndpointConnectionName, Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, providerName, privateEndpointConnectionName,
            context);
    }

    public void delete(String resourceGroupName, String providerName, String privateEndpointConnectionName) {
        this.serviceClient().delete(resourceGroupName, providerName, privateEndpointConnectionName);
    }

    public AttestationManagementClientPrivateEndpointConnection getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String providerName = Utils.getValueFromIdByName(id, "attestationProviders");
        if (providerName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'attestationProviders'.", id)));
        }
        String privateEndpointConnectionName = Utils.getValueFromIdByName(id, "privateEndpointConnections");
        if (privateEndpointConnectionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'privateEndpointConnections'.", id)));
        }
        return this.getWithResponse(resourceGroupName, providerName, privateEndpointConnectionName, Context.NONE)
            .getValue();
    }

    public Response<AttestationManagementClientPrivateEndpointConnection> getByIdWithResponse(String id,
        Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String providerName = Utils.getValueFromIdByName(id, "attestationProviders");
        if (providerName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'attestationProviders'.", id)));
        }
        String privateEndpointConnectionName = Utils.getValueFromIdByName(id, "privateEndpointConnections");
        if (privateEndpointConnectionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'privateEndpointConnections'.", id)));
        }
        return this.getWithResponse(resourceGroupName, providerName, privateEndpointConnectionName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String providerName = Utils.getValueFromIdByName(id, "attestationProviders");
        if (providerName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'attestationProviders'.", id)));
        }
        String privateEndpointConnectionName = Utils.getValueFromIdByName(id, "privateEndpointConnections");
        if (privateEndpointConnectionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'privateEndpointConnections'.", id)));
        }
        this.deleteWithResponse(resourceGroupName, providerName, privateEndpointConnectionName, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String providerName = Utils.getValueFromIdByName(id, "attestationProviders");
        if (providerName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'attestationProviders'.", id)));
        }
        String privateEndpointConnectionName = Utils.getValueFromIdByName(id, "privateEndpointConnections");
        if (privateEndpointConnectionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'privateEndpointConnections'.", id)));
        }
        return this.deleteWithResponse(resourceGroupName, providerName, privateEndpointConnectionName, context);
    }

    private AttestationManagementClientPrivateEndpointConnectionsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.attestation.AttestationManager manager() {
        return this.serviceManager;
    }

    public AttestationManagementClientPrivateEndpointConnectionImpl define(String name) {
        return new AttestationManagementClientPrivateEndpointConnectionImpl(name, this.manager());
    }
}
