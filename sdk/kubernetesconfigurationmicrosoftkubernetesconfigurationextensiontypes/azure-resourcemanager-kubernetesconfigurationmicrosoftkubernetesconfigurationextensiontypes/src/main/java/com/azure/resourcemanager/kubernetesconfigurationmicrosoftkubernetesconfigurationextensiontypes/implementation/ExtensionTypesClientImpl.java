// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kubernetesconfigurationmicrosoftkubernetesconfigurationextensiontypes.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.kubernetesconfigurationmicrosoftkubernetesconfigurationextensiontypes.fluent.ExtensionTypesClient;
import com.azure.resourcemanager.kubernetesconfigurationmicrosoftkubernetesconfigurationextensiontypes.fluent.models.ExtensionTypeInner;
import com.azure.resourcemanager.kubernetesconfigurationmicrosoftkubernetesconfigurationextensiontypes.fluent.models.ExtensionTypeVersionForReleaseTrainInner;
import com.azure.resourcemanager.kubernetesconfigurationmicrosoftkubernetesconfigurationextensiontypes.models.ExtensionTypeVersionsList;
import com.azure.resourcemanager.kubernetesconfigurationmicrosoftkubernetesconfigurationextensiontypes.models.ExtensionTypesList;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in ExtensionTypesClient.
 */
public final class ExtensionTypesClientImpl implements ExtensionTypesClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final ExtensionTypesService service;

    /**
     * The service client containing this operation class.
     */
    private final ExtensionTypesManagementClientImpl client;

    /**
     * Initializes an instance of ExtensionTypesClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    ExtensionTypesClientImpl(ExtensionTypesManagementClientImpl client) {
        this.service
            = RestProxy.create(ExtensionTypesService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for ExtensionTypesManagementClientExtensionTypes to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "ExtensionTypesManage")
    public interface ExtensionTypesService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/providers/Microsoft.KubernetesConfiguration/locations/{location}/extensionTypes")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ExtensionTypesList>> locationList(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId, @PathParam("location") String location,
            @QueryParam("publisherId") String publisherId, @QueryParam("offerId") String offerId,
            @QueryParam("planId") String planId, @QueryParam("releaseTrain") String releaseTrain,
            @QueryParam("clusterType") String clusterType, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/providers/Microsoft.KubernetesConfiguration/locations/{location}/extensionTypes/{extensionTypeName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ExtensionTypeInner>> locationGet(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId, @PathParam("location") String location,
            @PathParam("extensionTypeName") String extensionTypeName, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/providers/Microsoft.KubernetesConfiguration/locations/{location}/extensionTypes/{extensionTypeName}/versions")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ExtensionTypeVersionsList>> listVersions(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId, @PathParam("location") String location,
            @PathParam("extensionTypeName") String extensionTypeName, @QueryParam("releaseTrain") String releaseTrain,
            @QueryParam("clusterType") String clusterType, @QueryParam("majorVersion") String majorVersion,
            @QueryParam("showLatest") Boolean showLatest, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/providers/Microsoft.KubernetesConfiguration/locations/{location}/extensionTypes/{extensionTypeName}/versions/{versionNumber}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ExtensionTypeVersionForReleaseTrainInner>> getVersion(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId, @PathParam("location") String location,
            @PathParam("extensionTypeName") String extensionTypeName, @PathParam("versionNumber") String versionNumber,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{clusterRp}/{clusterResourceName}/{clusterName}/providers/Microsoft.KubernetesConfiguration/extensionTypes")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ExtensionTypesList>> list(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("clusterRp") String clusterRp,
            @PathParam("clusterResourceName") String clusterResourceName, @PathParam("clusterName") String clusterName,
            @QueryParam("publisherId") String publisherId, @QueryParam("offerId") String offerId,
            @QueryParam("planId") String planId, @QueryParam("releaseTrain") String releaseTrain,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{clusterRp}/{clusterResourceName}/{clusterName}/providers/Microsoft.KubernetesConfiguration/extensionTypes/{extensionTypeName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ExtensionTypeInner>> get(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("clusterRp") String clusterRp,
            @PathParam("clusterResourceName") String clusterResourceName, @PathParam("clusterName") String clusterName,
            @PathParam("extensionTypeName") String extensionTypeName, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{clusterRp}/{clusterResourceName}/{clusterName}/providers/Microsoft.KubernetesConfiguration/extensionTypes/{extensionTypeName}/versions")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ExtensionTypeVersionsList>> clusterListVersions(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("clusterRp") String clusterRp,
            @PathParam("clusterResourceName") String clusterResourceName, @PathParam("clusterName") String clusterName,
            @PathParam("extensionTypeName") String extensionTypeName, @QueryParam("releaseTrain") String releaseTrain,
            @QueryParam("majorVersion") String majorVersion, @QueryParam("showLatest") Boolean showLatest,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{clusterRp}/{clusterResourceName}/{clusterName}/providers/Microsoft.KubernetesConfiguration/extensionTypes/{extensionTypeName}/versions/{versionNumber}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ExtensionTypeVersionForReleaseTrainInner>> clusterGetVersion(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("clusterRp") String clusterRp,
            @PathParam("clusterResourceName") String clusterResourceName, @PathParam("clusterName") String clusterName,
            @PathParam("extensionTypeName") String extensionTypeName, @PathParam("versionNumber") String versionNumber,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ExtensionTypesList>> locationListNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ExtensionTypeVersionsList>> listVersionsNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ExtensionTypesList>> listNext(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ExtensionTypeVersionsList>> clusterListVersionsNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * List all Extension Types for the location.
     * 
     * @param location The name of Azure region.
     * @param publisherId Filter results by Publisher ID of a marketplace extension type.
     * @param offerId Filter results by Offer or Product ID of a marketplace extension type.
     * @param planId Filter results by Plan ID of a marketplace extension type.
     * @param releaseTrain Filter results by release train (default value is stable).
     * @param clusterType Filter results by the cluster type for extension types.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list Extension Types along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ExtensionTypeInner>> locationListSinglePageAsync(String location, String publisherId,
        String offerId, String planId, String releaseTrain, String clusterType) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (location == null) {
            return Mono.error(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.locationList(this.client.getEndpoint(), this.client.getSubscriptionId(),
                location, publisherId, offerId, planId, releaseTrain, clusterType, this.client.getApiVersion(), accept,
                context))
            .<PagedResponse<ExtensionTypeInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List all Extension Types for the location.
     * 
     * @param location The name of Azure region.
     * @param publisherId Filter results by Publisher ID of a marketplace extension type.
     * @param offerId Filter results by Offer or Product ID of a marketplace extension type.
     * @param planId Filter results by Plan ID of a marketplace extension type.
     * @param releaseTrain Filter results by release train (default value is stable).
     * @param clusterType Filter results by the cluster type for extension types.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list Extension Types along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ExtensionTypeInner>> locationListSinglePageAsync(String location, String publisherId,
        String offerId, String planId, String releaseTrain, String clusterType, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (location == null) {
            return Mono.error(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .locationList(this.client.getEndpoint(), this.client.getSubscriptionId(), location, publisherId, offerId,
                planId, releaseTrain, clusterType, this.client.getApiVersion(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * List all Extension Types for the location.
     * 
     * @param location The name of Azure region.
     * @param publisherId Filter results by Publisher ID of a marketplace extension type.
     * @param offerId Filter results by Offer or Product ID of a marketplace extension type.
     * @param planId Filter results by Plan ID of a marketplace extension type.
     * @param releaseTrain Filter results by release train (default value is stable).
     * @param clusterType Filter results by the cluster type for extension types.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list Extension Types as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ExtensionTypeInner> locationListAsync(String location, String publisherId, String offerId,
        String planId, String releaseTrain, String clusterType) {
        return new PagedFlux<>(
            () -> locationListSinglePageAsync(location, publisherId, offerId, planId, releaseTrain, clusterType),
            nextLink -> locationListNextSinglePageAsync(nextLink));
    }

    /**
     * List all Extension Types for the location.
     * 
     * @param location The name of Azure region.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list Extension Types as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ExtensionTypeInner> locationListAsync(String location) {
        final String publisherId = null;
        final String offerId = null;
        final String planId = null;
        final String releaseTrain = null;
        final String clusterType = null;
        return new PagedFlux<>(
            () -> locationListSinglePageAsync(location, publisherId, offerId, planId, releaseTrain, clusterType),
            nextLink -> locationListNextSinglePageAsync(nextLink));
    }

    /**
     * List all Extension Types for the location.
     * 
     * @param location The name of Azure region.
     * @param publisherId Filter results by Publisher ID of a marketplace extension type.
     * @param offerId Filter results by Offer or Product ID of a marketplace extension type.
     * @param planId Filter results by Plan ID of a marketplace extension type.
     * @param releaseTrain Filter results by release train (default value is stable).
     * @param clusterType Filter results by the cluster type for extension types.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list Extension Types as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ExtensionTypeInner> locationListAsync(String location, String publisherId, String offerId,
        String planId, String releaseTrain, String clusterType, Context context) {
        return new PagedFlux<>(() -> locationListSinglePageAsync(location, publisherId, offerId, planId, releaseTrain,
            clusterType, context), nextLink -> locationListNextSinglePageAsync(nextLink, context));
    }

    /**
     * List all Extension Types for the location.
     * 
     * @param location The name of Azure region.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list Extension Types as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ExtensionTypeInner> locationList(String location) {
        final String publisherId = null;
        final String offerId = null;
        final String planId = null;
        final String releaseTrain = null;
        final String clusterType = null;
        return new PagedIterable<>(
            locationListAsync(location, publisherId, offerId, planId, releaseTrain, clusterType));
    }

    /**
     * List all Extension Types for the location.
     * 
     * @param location The name of Azure region.
     * @param publisherId Filter results by Publisher ID of a marketplace extension type.
     * @param offerId Filter results by Offer or Product ID of a marketplace extension type.
     * @param planId Filter results by Plan ID of a marketplace extension type.
     * @param releaseTrain Filter results by release train (default value is stable).
     * @param clusterType Filter results by the cluster type for extension types.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list Extension Types as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ExtensionTypeInner> locationList(String location, String publisherId, String offerId,
        String planId, String releaseTrain, String clusterType, Context context) {
        return new PagedIterable<>(
            locationListAsync(location, publisherId, offerId, planId, releaseTrain, clusterType, context));
    }

    /**
     * Get an extension type for the location.
     * 
     * @param location The name of Azure region.
     * @param extensionTypeName Name of the Extension Type.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an extension type for the location along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ExtensionTypeInner>> locationGetWithResponseAsync(String location, String extensionTypeName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (location == null) {
            return Mono.error(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        if (extensionTypeName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter extensionTypeName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.locationGet(this.client.getEndpoint(), this.client.getSubscriptionId(),
                location, extensionTypeName, this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get an extension type for the location.
     * 
     * @param location The name of Azure region.
     * @param extensionTypeName Name of the Extension Type.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an extension type for the location along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ExtensionTypeInner>> locationGetWithResponseAsync(String location, String extensionTypeName,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (location == null) {
            return Mono.error(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        if (extensionTypeName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter extensionTypeName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.locationGet(this.client.getEndpoint(), this.client.getSubscriptionId(), location,
            extensionTypeName, this.client.getApiVersion(), accept, context);
    }

    /**
     * Get an extension type for the location.
     * 
     * @param location The name of Azure region.
     * @param extensionTypeName Name of the Extension Type.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an extension type for the location on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ExtensionTypeInner> locationGetAsync(String location, String extensionTypeName) {
        return locationGetWithResponseAsync(location, extensionTypeName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get an extension type for the location.
     * 
     * @param location The name of Azure region.
     * @param extensionTypeName Name of the Extension Type.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an extension type for the location along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ExtensionTypeInner> locationGetWithResponse(String location, String extensionTypeName,
        Context context) {
        return locationGetWithResponseAsync(location, extensionTypeName, context).block();
    }

    /**
     * Get an extension type for the location.
     * 
     * @param location The name of Azure region.
     * @param extensionTypeName Name of the Extension Type.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an extension type for the location.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ExtensionTypeInner locationGet(String location, String extensionTypeName) {
        return locationGetWithResponse(location, extensionTypeName, Context.NONE).getValue();
    }

    /**
     * List the versions for an extension type and location.
     * 
     * @param location The name of Azure region.
     * @param extensionTypeName Name of the Extension Type.
     * @param releaseTrain Filter results by release train (default value is stable).
     * @param clusterType Filter results by the cluster type for extension types.
     * @param majorVersion Filter results by the major version of an extension type.
     * @param showLatest Filter results by only the latest version (based on other query parameters).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list Extension Type Versions along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ExtensionTypeVersionForReleaseTrainInner>> listVersionsSinglePageAsync(String location,
        String extensionTypeName, String releaseTrain, String clusterType, String majorVersion, Boolean showLatest) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (location == null) {
            return Mono.error(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        if (extensionTypeName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter extensionTypeName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listVersions(this.client.getEndpoint(), this.client.getSubscriptionId(),
                location, extensionTypeName, releaseTrain, clusterType, majorVersion, showLatest,
                this.client.getApiVersion(), accept, context))
            .<PagedResponse<ExtensionTypeVersionForReleaseTrainInner>>map(
                res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                    res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List the versions for an extension type and location.
     * 
     * @param location The name of Azure region.
     * @param extensionTypeName Name of the Extension Type.
     * @param releaseTrain Filter results by release train (default value is stable).
     * @param clusterType Filter results by the cluster type for extension types.
     * @param majorVersion Filter results by the major version of an extension type.
     * @param showLatest Filter results by only the latest version (based on other query parameters).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list Extension Type Versions along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ExtensionTypeVersionForReleaseTrainInner>> listVersionsSinglePageAsync(String location,
        String extensionTypeName, String releaseTrain, String clusterType, String majorVersion, Boolean showLatest,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (location == null) {
            return Mono.error(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        if (extensionTypeName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter extensionTypeName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listVersions(this.client.getEndpoint(), this.client.getSubscriptionId(), location, extensionTypeName,
                releaseTrain, clusterType, majorVersion, showLatest, this.client.getApiVersion(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * List the versions for an extension type and location.
     * 
     * @param location The name of Azure region.
     * @param extensionTypeName Name of the Extension Type.
     * @param releaseTrain Filter results by release train (default value is stable).
     * @param clusterType Filter results by the cluster type for extension types.
     * @param majorVersion Filter results by the major version of an extension type.
     * @param showLatest Filter results by only the latest version (based on other query parameters).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list Extension Type Versions as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ExtensionTypeVersionForReleaseTrainInner> listVersionsAsync(String location,
        String extensionTypeName, String releaseTrain, String clusterType, String majorVersion, Boolean showLatest) {
        return new PagedFlux<>(() -> listVersionsSinglePageAsync(location, extensionTypeName, releaseTrain, clusterType,
            majorVersion, showLatest), nextLink -> listVersionsNextSinglePageAsync(nextLink));
    }

    /**
     * List the versions for an extension type and location.
     * 
     * @param location The name of Azure region.
     * @param extensionTypeName Name of the Extension Type.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list Extension Type Versions as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ExtensionTypeVersionForReleaseTrainInner> listVersionsAsync(String location,
        String extensionTypeName) {
        final String releaseTrain = null;
        final String clusterType = null;
        final String majorVersion = null;
        final Boolean showLatest = null;
        return new PagedFlux<>(() -> listVersionsSinglePageAsync(location, extensionTypeName, releaseTrain, clusterType,
            majorVersion, showLatest), nextLink -> listVersionsNextSinglePageAsync(nextLink));
    }

    /**
     * List the versions for an extension type and location.
     * 
     * @param location The name of Azure region.
     * @param extensionTypeName Name of the Extension Type.
     * @param releaseTrain Filter results by release train (default value is stable).
     * @param clusterType Filter results by the cluster type for extension types.
     * @param majorVersion Filter results by the major version of an extension type.
     * @param showLatest Filter results by only the latest version (based on other query parameters).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list Extension Type Versions as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ExtensionTypeVersionForReleaseTrainInner> listVersionsAsync(String location,
        String extensionTypeName, String releaseTrain, String clusterType, String majorVersion, Boolean showLatest,
        Context context) {
        return new PagedFlux<>(() -> listVersionsSinglePageAsync(location, extensionTypeName, releaseTrain, clusterType,
            majorVersion, showLatest, context), nextLink -> listVersionsNextSinglePageAsync(nextLink, context));
    }

    /**
     * List the versions for an extension type and location.
     * 
     * @param location The name of Azure region.
     * @param extensionTypeName Name of the Extension Type.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list Extension Type Versions as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ExtensionTypeVersionForReleaseTrainInner> listVersions(String location,
        String extensionTypeName) {
        final String releaseTrain = null;
        final String clusterType = null;
        final String majorVersion = null;
        final Boolean showLatest = null;
        return new PagedIterable<>(
            listVersionsAsync(location, extensionTypeName, releaseTrain, clusterType, majorVersion, showLatest));
    }

    /**
     * List the versions for an extension type and location.
     * 
     * @param location The name of Azure region.
     * @param extensionTypeName Name of the Extension Type.
     * @param releaseTrain Filter results by release train (default value is stable).
     * @param clusterType Filter results by the cluster type for extension types.
     * @param majorVersion Filter results by the major version of an extension type.
     * @param showLatest Filter results by only the latest version (based on other query parameters).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list Extension Type Versions as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ExtensionTypeVersionForReleaseTrainInner> listVersions(String location,
        String extensionTypeName, String releaseTrain, String clusterType, String majorVersion, Boolean showLatest,
        Context context) {
        return new PagedIterable<>(listVersionsAsync(location, extensionTypeName, releaseTrain, clusterType,
            majorVersion, showLatest, context));
    }

    /**
     * Get details of a version for an extension type and location.
     * 
     * @param location The name of Azure region.
     * @param extensionTypeName Name of the Extension Type.
     * @param versionNumber Version number of the Extension Type.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details of a version for an extension type and location along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ExtensionTypeVersionForReleaseTrainInner>> getVersionWithResponseAsync(String location,
        String extensionTypeName, String versionNumber) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (location == null) {
            return Mono.error(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        if (extensionTypeName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter extensionTypeName is required and cannot be null."));
        }
        if (versionNumber == null) {
            return Mono.error(new IllegalArgumentException("Parameter versionNumber is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.getVersion(this.client.getEndpoint(), this.client.getSubscriptionId(),
                location, extensionTypeName, versionNumber, this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get details of a version for an extension type and location.
     * 
     * @param location The name of Azure region.
     * @param extensionTypeName Name of the Extension Type.
     * @param versionNumber Version number of the Extension Type.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details of a version for an extension type and location along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ExtensionTypeVersionForReleaseTrainInner>> getVersionWithResponseAsync(String location,
        String extensionTypeName, String versionNumber, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (location == null) {
            return Mono.error(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        if (extensionTypeName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter extensionTypeName is required and cannot be null."));
        }
        if (versionNumber == null) {
            return Mono.error(new IllegalArgumentException("Parameter versionNumber is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.getVersion(this.client.getEndpoint(), this.client.getSubscriptionId(), location,
            extensionTypeName, versionNumber, this.client.getApiVersion(), accept, context);
    }

    /**
     * Get details of a version for an extension type and location.
     * 
     * @param location The name of Azure region.
     * @param extensionTypeName Name of the Extension Type.
     * @param versionNumber Version number of the Extension Type.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details of a version for an extension type and location on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ExtensionTypeVersionForReleaseTrainInner> getVersionAsync(String location, String extensionTypeName,
        String versionNumber) {
        return getVersionWithResponseAsync(location, extensionTypeName, versionNumber)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get details of a version for an extension type and location.
     * 
     * @param location The name of Azure region.
     * @param extensionTypeName Name of the Extension Type.
     * @param versionNumber Version number of the Extension Type.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details of a version for an extension type and location along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ExtensionTypeVersionForReleaseTrainInner> getVersionWithResponse(String location,
        String extensionTypeName, String versionNumber, Context context) {
        return getVersionWithResponseAsync(location, extensionTypeName, versionNumber, context).block();
    }

    /**
     * Get details of a version for an extension type and location.
     * 
     * @param location The name of Azure region.
     * @param extensionTypeName Name of the Extension Type.
     * @param versionNumber Version number of the Extension Type.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details of a version for an extension type and location.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ExtensionTypeVersionForReleaseTrainInner getVersion(String location, String extensionTypeName,
        String versionNumber) {
        return getVersionWithResponse(location, extensionTypeName, versionNumber, Context.NONE).getValue();
    }

    /**
     * List installable Extension Types for the cluster based region and type for the cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
     * Microsoft.HybridContainerService.
     * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters, connectedClusters,
     * provisionedClusters, appliances.
     * @param clusterName The name of the kubernetes cluster.
     * @param publisherId Filter results by Publisher ID of a marketplace extension type.
     * @param offerId Filter results by Offer or Product ID of a marketplace extension type.
     * @param planId Filter results by Plan ID of a marketplace extension type.
     * @param releaseTrain Filter results by release train (default value is stable).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list Extension Types along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ExtensionTypeInner>> listSinglePageAsync(String resourceGroupName, String clusterRp,
        String clusterResourceName, String clusterName, String publisherId, String offerId, String planId,
        String releaseTrain) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (clusterRp == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterRp is required and cannot be null."));
        }
        if (clusterResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter clusterResourceName is required and cannot be null."));
        }
        if (clusterName == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.list(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, clusterRp, clusterResourceName, clusterName, publisherId, offerId, planId,
                releaseTrain, this.client.getApiVersion(), accept, context))
            .<PagedResponse<ExtensionTypeInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List installable Extension Types for the cluster based region and type for the cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
     * Microsoft.HybridContainerService.
     * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters, connectedClusters,
     * provisionedClusters, appliances.
     * @param clusterName The name of the kubernetes cluster.
     * @param publisherId Filter results by Publisher ID of a marketplace extension type.
     * @param offerId Filter results by Offer or Product ID of a marketplace extension type.
     * @param planId Filter results by Plan ID of a marketplace extension type.
     * @param releaseTrain Filter results by release train (default value is stable).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list Extension Types along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ExtensionTypeInner>> listSinglePageAsync(String resourceGroupName, String clusterRp,
        String clusterResourceName, String clusterName, String publisherId, String offerId, String planId,
        String releaseTrain, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (clusterRp == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterRp is required and cannot be null."));
        }
        if (clusterResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter clusterResourceName is required and cannot be null."));
        }
        if (clusterName == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .list(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName, clusterRp,
                clusterResourceName, clusterName, publisherId, offerId, planId, releaseTrain,
                this.client.getApiVersion(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * List installable Extension Types for the cluster based region and type for the cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
     * Microsoft.HybridContainerService.
     * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters, connectedClusters,
     * provisionedClusters, appliances.
     * @param clusterName The name of the kubernetes cluster.
     * @param publisherId Filter results by Publisher ID of a marketplace extension type.
     * @param offerId Filter results by Offer or Product ID of a marketplace extension type.
     * @param planId Filter results by Plan ID of a marketplace extension type.
     * @param releaseTrain Filter results by release train (default value is stable).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list Extension Types as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ExtensionTypeInner> listAsync(String resourceGroupName, String clusterRp,
        String clusterResourceName, String clusterName, String publisherId, String offerId, String planId,
        String releaseTrain) {
        return new PagedFlux<>(() -> listSinglePageAsync(resourceGroupName, clusterRp, clusterResourceName, clusterName,
            publisherId, offerId, planId, releaseTrain), nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * List installable Extension Types for the cluster based region and type for the cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
     * Microsoft.HybridContainerService.
     * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters, connectedClusters,
     * provisionedClusters, appliances.
     * @param clusterName The name of the kubernetes cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list Extension Types as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ExtensionTypeInner> listAsync(String resourceGroupName, String clusterRp,
        String clusterResourceName, String clusterName) {
        final String publisherId = null;
        final String offerId = null;
        final String planId = null;
        final String releaseTrain = null;
        return new PagedFlux<>(() -> listSinglePageAsync(resourceGroupName, clusterRp, clusterResourceName, clusterName,
            publisherId, offerId, planId, releaseTrain), nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * List installable Extension Types for the cluster based region and type for the cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
     * Microsoft.HybridContainerService.
     * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters, connectedClusters,
     * provisionedClusters, appliances.
     * @param clusterName The name of the kubernetes cluster.
     * @param publisherId Filter results by Publisher ID of a marketplace extension type.
     * @param offerId Filter results by Offer or Product ID of a marketplace extension type.
     * @param planId Filter results by Plan ID of a marketplace extension type.
     * @param releaseTrain Filter results by release train (default value is stable).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list Extension Types as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ExtensionTypeInner> listAsync(String resourceGroupName, String clusterRp,
        String clusterResourceName, String clusterName, String publisherId, String offerId, String planId,
        String releaseTrain, Context context) {
        return new PagedFlux<>(() -> listSinglePageAsync(resourceGroupName, clusterRp, clusterResourceName, clusterName,
            publisherId, offerId, planId, releaseTrain, context),
            nextLink -> listNextSinglePageAsync(nextLink, context));
    }

    /**
     * List installable Extension Types for the cluster based region and type for the cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
     * Microsoft.HybridContainerService.
     * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters, connectedClusters,
     * provisionedClusters, appliances.
     * @param clusterName The name of the kubernetes cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list Extension Types as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ExtensionTypeInner> list(String resourceGroupName, String clusterRp,
        String clusterResourceName, String clusterName) {
        final String publisherId = null;
        final String offerId = null;
        final String planId = null;
        final String releaseTrain = null;
        return new PagedIterable<>(listAsync(resourceGroupName, clusterRp, clusterResourceName, clusterName,
            publisherId, offerId, planId, releaseTrain));
    }

    /**
     * List installable Extension Types for the cluster based region and type for the cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
     * Microsoft.HybridContainerService.
     * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters, connectedClusters,
     * provisionedClusters, appliances.
     * @param clusterName The name of the kubernetes cluster.
     * @param publisherId Filter results by Publisher ID of a marketplace extension type.
     * @param offerId Filter results by Offer or Product ID of a marketplace extension type.
     * @param planId Filter results by Plan ID of a marketplace extension type.
     * @param releaseTrain Filter results by release train (default value is stable).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list Extension Types as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ExtensionTypeInner> list(String resourceGroupName, String clusterRp,
        String clusterResourceName, String clusterName, String publisherId, String offerId, String planId,
        String releaseTrain, Context context) {
        return new PagedIterable<>(listAsync(resourceGroupName, clusterRp, clusterResourceName, clusterName,
            publisherId, offerId, planId, releaseTrain, context));
    }

    /**
     * Get an Extension Type installable to the cluster based region and type for the cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
     * Microsoft.HybridContainerService.
     * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters, connectedClusters,
     * provisionedClusters, appliances.
     * @param clusterName The name of the kubernetes cluster.
     * @param extensionTypeName Name of the Extension Type.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an Extension Type installable to the cluster based region and type for the cluster along with
     * {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ExtensionTypeInner>> getWithResponseAsync(String resourceGroupName, String clusterRp,
        String clusterResourceName, String clusterName, String extensionTypeName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (clusterRp == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterRp is required and cannot be null."));
        }
        if (clusterResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter clusterResourceName is required and cannot be null."));
        }
        if (clusterName == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterName is required and cannot be null."));
        }
        if (extensionTypeName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter extensionTypeName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, clusterRp, clusterResourceName, clusterName, extensionTypeName,
                this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get an Extension Type installable to the cluster based region and type for the cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
     * Microsoft.HybridContainerService.
     * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters, connectedClusters,
     * provisionedClusters, appliances.
     * @param clusterName The name of the kubernetes cluster.
     * @param extensionTypeName Name of the Extension Type.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an Extension Type installable to the cluster based region and type for the cluster along with
     * {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ExtensionTypeInner>> getWithResponseAsync(String resourceGroupName, String clusterRp,
        String clusterResourceName, String clusterName, String extensionTypeName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (clusterRp == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterRp is required and cannot be null."));
        }
        if (clusterResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter clusterResourceName is required and cannot be null."));
        }
        if (clusterName == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterName is required and cannot be null."));
        }
        if (extensionTypeName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter extensionTypeName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName, clusterRp,
            clusterResourceName, clusterName, extensionTypeName, this.client.getApiVersion(), accept, context);
    }

    /**
     * Get an Extension Type installable to the cluster based region and type for the cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
     * Microsoft.HybridContainerService.
     * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters, connectedClusters,
     * provisionedClusters, appliances.
     * @param clusterName The name of the kubernetes cluster.
     * @param extensionTypeName Name of the Extension Type.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an Extension Type installable to the cluster based region and type for the cluster on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ExtensionTypeInner> getAsync(String resourceGroupName, String clusterRp, String clusterResourceName,
        String clusterName, String extensionTypeName) {
        return getWithResponseAsync(resourceGroupName, clusterRp, clusterResourceName, clusterName, extensionTypeName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get an Extension Type installable to the cluster based region and type for the cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
     * Microsoft.HybridContainerService.
     * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters, connectedClusters,
     * provisionedClusters, appliances.
     * @param clusterName The name of the kubernetes cluster.
     * @param extensionTypeName Name of the Extension Type.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an Extension Type installable to the cluster based region and type for the cluster along with
     * {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ExtensionTypeInner> getWithResponse(String resourceGroupName, String clusterRp,
        String clusterResourceName, String clusterName, String extensionTypeName, Context context) {
        return getWithResponseAsync(resourceGroupName, clusterRp, clusterResourceName, clusterName, extensionTypeName,
            context).block();
    }

    /**
     * Get an Extension Type installable to the cluster based region and type for the cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
     * Microsoft.HybridContainerService.
     * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters, connectedClusters,
     * provisionedClusters, appliances.
     * @param clusterName The name of the kubernetes cluster.
     * @param extensionTypeName Name of the Extension Type.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an Extension Type installable to the cluster based region and type for the cluster.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ExtensionTypeInner get(String resourceGroupName, String clusterRp, String clusterResourceName,
        String clusterName, String extensionTypeName) {
        return getWithResponse(resourceGroupName, clusterRp, clusterResourceName, clusterName, extensionTypeName,
            Context.NONE).getValue();
    }

    /**
     * List the version for an Extension Type installable to the cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
     * Microsoft.HybridContainerService.
     * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters, connectedClusters,
     * provisionedClusters, appliances.
     * @param clusterName The name of the kubernetes cluster.
     * @param extensionTypeName Name of the Extension Type.
     * @param releaseTrain Filter results by release train (default value is stable).
     * @param majorVersion Filter results by the major version of an extension type.
     * @param showLatest Filter results by only the latest version (based on other query parameters).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list Extension Type Versions along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ExtensionTypeVersionForReleaseTrainInner>> clusterListVersionsSinglePageAsync(
        String resourceGroupName, String clusterRp, String clusterResourceName, String clusterName,
        String extensionTypeName, String releaseTrain, String majorVersion, Boolean showLatest) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (clusterRp == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterRp is required and cannot be null."));
        }
        if (clusterResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter clusterResourceName is required and cannot be null."));
        }
        if (clusterName == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterName is required and cannot be null."));
        }
        if (extensionTypeName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter extensionTypeName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.clusterListVersions(this.client.getEndpoint(), this.client.getSubscriptionId(),
                    resourceGroupName, clusterRp, clusterResourceName, clusterName, extensionTypeName, releaseTrain,
                    majorVersion, showLatest, this.client.getApiVersion(), accept, context))
            .<PagedResponse<ExtensionTypeVersionForReleaseTrainInner>>map(
                res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                    res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List the version for an Extension Type installable to the cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
     * Microsoft.HybridContainerService.
     * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters, connectedClusters,
     * provisionedClusters, appliances.
     * @param clusterName The name of the kubernetes cluster.
     * @param extensionTypeName Name of the Extension Type.
     * @param releaseTrain Filter results by release train (default value is stable).
     * @param majorVersion Filter results by the major version of an extension type.
     * @param showLatest Filter results by only the latest version (based on other query parameters).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list Extension Type Versions along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ExtensionTypeVersionForReleaseTrainInner>> clusterListVersionsSinglePageAsync(
        String resourceGroupName, String clusterRp, String clusterResourceName, String clusterName,
        String extensionTypeName, String releaseTrain, String majorVersion, Boolean showLatest, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (clusterRp == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterRp is required and cannot be null."));
        }
        if (clusterResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter clusterResourceName is required and cannot be null."));
        }
        if (clusterName == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterName is required and cannot be null."));
        }
        if (extensionTypeName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter extensionTypeName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .clusterListVersions(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
                clusterRp, clusterResourceName, clusterName, extensionTypeName, releaseTrain, majorVersion, showLatest,
                this.client.getApiVersion(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * List the version for an Extension Type installable to the cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
     * Microsoft.HybridContainerService.
     * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters, connectedClusters,
     * provisionedClusters, appliances.
     * @param clusterName The name of the kubernetes cluster.
     * @param extensionTypeName Name of the Extension Type.
     * @param releaseTrain Filter results by release train (default value is stable).
     * @param majorVersion Filter results by the major version of an extension type.
     * @param showLatest Filter results by only the latest version (based on other query parameters).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list Extension Type Versions as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ExtensionTypeVersionForReleaseTrainInner> clusterListVersionsAsync(String resourceGroupName,
        String clusterRp, String clusterResourceName, String clusterName, String extensionTypeName, String releaseTrain,
        String majorVersion, Boolean showLatest) {
        return new PagedFlux<>(
            () -> clusterListVersionsSinglePageAsync(resourceGroupName, clusterRp, clusterResourceName, clusterName,
                extensionTypeName, releaseTrain, majorVersion, showLatest),
            nextLink -> clusterListVersionsNextSinglePageAsync(nextLink));
    }

    /**
     * List the version for an Extension Type installable to the cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
     * Microsoft.HybridContainerService.
     * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters, connectedClusters,
     * provisionedClusters, appliances.
     * @param clusterName The name of the kubernetes cluster.
     * @param extensionTypeName Name of the Extension Type.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list Extension Type Versions as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ExtensionTypeVersionForReleaseTrainInner> clusterListVersionsAsync(String resourceGroupName,
        String clusterRp, String clusterResourceName, String clusterName, String extensionTypeName) {
        final String releaseTrain = null;
        final String majorVersion = null;
        final Boolean showLatest = null;
        return new PagedFlux<>(
            () -> clusterListVersionsSinglePageAsync(resourceGroupName, clusterRp, clusterResourceName, clusterName,
                extensionTypeName, releaseTrain, majorVersion, showLatest),
            nextLink -> clusterListVersionsNextSinglePageAsync(nextLink));
    }

    /**
     * List the version for an Extension Type installable to the cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
     * Microsoft.HybridContainerService.
     * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters, connectedClusters,
     * provisionedClusters, appliances.
     * @param clusterName The name of the kubernetes cluster.
     * @param extensionTypeName Name of the Extension Type.
     * @param releaseTrain Filter results by release train (default value is stable).
     * @param majorVersion Filter results by the major version of an extension type.
     * @param showLatest Filter results by only the latest version (based on other query parameters).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list Extension Type Versions as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ExtensionTypeVersionForReleaseTrainInner> clusterListVersionsAsync(String resourceGroupName,
        String clusterRp, String clusterResourceName, String clusterName, String extensionTypeName, String releaseTrain,
        String majorVersion, Boolean showLatest, Context context) {
        return new PagedFlux<>(
            () -> clusterListVersionsSinglePageAsync(resourceGroupName, clusterRp, clusterResourceName, clusterName,
                extensionTypeName, releaseTrain, majorVersion, showLatest, context),
            nextLink -> clusterListVersionsNextSinglePageAsync(nextLink, context));
    }

    /**
     * List the version for an Extension Type installable to the cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
     * Microsoft.HybridContainerService.
     * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters, connectedClusters,
     * provisionedClusters, appliances.
     * @param clusterName The name of the kubernetes cluster.
     * @param extensionTypeName Name of the Extension Type.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list Extension Type Versions as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ExtensionTypeVersionForReleaseTrainInner> clusterListVersions(String resourceGroupName,
        String clusterRp, String clusterResourceName, String clusterName, String extensionTypeName) {
        final String releaseTrain = null;
        final String majorVersion = null;
        final Boolean showLatest = null;
        return new PagedIterable<>(clusterListVersionsAsync(resourceGroupName, clusterRp, clusterResourceName,
            clusterName, extensionTypeName, releaseTrain, majorVersion, showLatest));
    }

    /**
     * List the version for an Extension Type installable to the cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
     * Microsoft.HybridContainerService.
     * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters, connectedClusters,
     * provisionedClusters, appliances.
     * @param clusterName The name of the kubernetes cluster.
     * @param extensionTypeName Name of the Extension Type.
     * @param releaseTrain Filter results by release train (default value is stable).
     * @param majorVersion Filter results by the major version of an extension type.
     * @param showLatest Filter results by only the latest version (based on other query parameters).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list Extension Type Versions as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ExtensionTypeVersionForReleaseTrainInner> clusterListVersions(String resourceGroupName,
        String clusterRp, String clusterResourceName, String clusterName, String extensionTypeName, String releaseTrain,
        String majorVersion, Boolean showLatest, Context context) {
        return new PagedIterable<>(clusterListVersionsAsync(resourceGroupName, clusterRp, clusterResourceName,
            clusterName, extensionTypeName, releaseTrain, majorVersion, showLatest, context));
    }

    /**
     * Get details of a version for an Extension Type installable to the cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
     * Microsoft.HybridContainerService.
     * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters, connectedClusters,
     * provisionedClusters, appliances.
     * @param clusterName The name of the kubernetes cluster.
     * @param extensionTypeName Name of the Extension Type.
     * @param versionNumber Version number of the Extension Type.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details of a version for an Extension Type installable to the cluster along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ExtensionTypeVersionForReleaseTrainInner>> clusterGetVersionWithResponseAsync(
        String resourceGroupName, String clusterRp, String clusterResourceName, String clusterName,
        String extensionTypeName, String versionNumber) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (clusterRp == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterRp is required and cannot be null."));
        }
        if (clusterResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter clusterResourceName is required and cannot be null."));
        }
        if (clusterName == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterName is required and cannot be null."));
        }
        if (extensionTypeName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter extensionTypeName is required and cannot be null."));
        }
        if (versionNumber == null) {
            return Mono.error(new IllegalArgumentException("Parameter versionNumber is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.clusterGetVersion(this.client.getEndpoint(),
                this.client.getSubscriptionId(), resourceGroupName, clusterRp, clusterResourceName, clusterName,
                extensionTypeName, versionNumber, this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get details of a version for an Extension Type installable to the cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
     * Microsoft.HybridContainerService.
     * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters, connectedClusters,
     * provisionedClusters, appliances.
     * @param clusterName The name of the kubernetes cluster.
     * @param extensionTypeName Name of the Extension Type.
     * @param versionNumber Version number of the Extension Type.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details of a version for an Extension Type installable to the cluster along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ExtensionTypeVersionForReleaseTrainInner>> clusterGetVersionWithResponseAsync(
        String resourceGroupName, String clusterRp, String clusterResourceName, String clusterName,
        String extensionTypeName, String versionNumber, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (clusterRp == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterRp is required and cannot be null."));
        }
        if (clusterResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter clusterResourceName is required and cannot be null."));
        }
        if (clusterName == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterName is required and cannot be null."));
        }
        if (extensionTypeName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter extensionTypeName is required and cannot be null."));
        }
        if (versionNumber == null) {
            return Mono.error(new IllegalArgumentException("Parameter versionNumber is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.clusterGetVersion(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            clusterRp, clusterResourceName, clusterName, extensionTypeName, versionNumber, this.client.getApiVersion(),
            accept, context);
    }

    /**
     * Get details of a version for an Extension Type installable to the cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
     * Microsoft.HybridContainerService.
     * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters, connectedClusters,
     * provisionedClusters, appliances.
     * @param clusterName The name of the kubernetes cluster.
     * @param extensionTypeName Name of the Extension Type.
     * @param versionNumber Version number of the Extension Type.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details of a version for an Extension Type installable to the cluster on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ExtensionTypeVersionForReleaseTrainInner> clusterGetVersionAsync(String resourceGroupName,
        String clusterRp, String clusterResourceName, String clusterName, String extensionTypeName,
        String versionNumber) {
        return clusterGetVersionWithResponseAsync(resourceGroupName, clusterRp, clusterResourceName, clusterName,
            extensionTypeName, versionNumber).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get details of a version for an Extension Type installable to the cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
     * Microsoft.HybridContainerService.
     * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters, connectedClusters,
     * provisionedClusters, appliances.
     * @param clusterName The name of the kubernetes cluster.
     * @param extensionTypeName Name of the Extension Type.
     * @param versionNumber Version number of the Extension Type.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details of a version for an Extension Type installable to the cluster along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ExtensionTypeVersionForReleaseTrainInner> clusterGetVersionWithResponse(String resourceGroupName,
        String clusterRp, String clusterResourceName, String clusterName, String extensionTypeName,
        String versionNumber, Context context) {
        return clusterGetVersionWithResponseAsync(resourceGroupName, clusterRp, clusterResourceName, clusterName,
            extensionTypeName, versionNumber, context).block();
    }

    /**
     * Get details of a version for an Extension Type installable to the cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
     * Microsoft.HybridContainerService.
     * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters, connectedClusters,
     * provisionedClusters, appliances.
     * @param clusterName The name of the kubernetes cluster.
     * @param extensionTypeName Name of the Extension Type.
     * @param versionNumber Version number of the Extension Type.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details of a version for an Extension Type installable to the cluster.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ExtensionTypeVersionForReleaseTrainInner clusterGetVersion(String resourceGroupName, String clusterRp,
        String clusterResourceName, String clusterName, String extensionTypeName, String versionNumber) {
        return clusterGetVersionWithResponse(resourceGroupName, clusterRp, clusterResourceName, clusterName,
            extensionTypeName, versionNumber, Context.NONE).getValue();
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list Extension Types along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ExtensionTypeInner>> locationListNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.locationListNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<ExtensionTypeInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list Extension Types along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ExtensionTypeInner>> locationListNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.locationListNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list Extension Type Versions along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ExtensionTypeVersionForReleaseTrainInner>>
        listVersionsNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listVersionsNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<ExtensionTypeVersionForReleaseTrainInner>>map(
                res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                    res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list Extension Type Versions along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ExtensionTypeVersionForReleaseTrainInner>>
        listVersionsNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listVersionsNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list Extension Types along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ExtensionTypeInner>> listNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.listNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<ExtensionTypeInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list Extension Types along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ExtensionTypeInner>> listNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list Extension Type Versions along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ExtensionTypeVersionForReleaseTrainInner>>
        clusterListVersionsNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.clusterListVersionsNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<ExtensionTypeVersionForReleaseTrainInner>>map(
                res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                    res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list Extension Type Versions along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ExtensionTypeVersionForReleaseTrainInner>>
        clusterListVersionsNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.clusterListVersionsNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }
}
