// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.agrifood.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * OAuthClientCredentials for clientId clientSecret auth.
 */
@Fluent
public final class OAuthClientCredentials extends AuthCredentials {
    /*
     * Enum for different types of AuthCredentials supported.
     */
    private AuthCredentialsKind kind = AuthCredentialsKind.OAUTH_CLIENT_CREDENTIALS;

    /*
     * ClientId associated with the provider.
     */
    private String clientId;

    /*
     * Properties of the key vault.
     */
    private KeyVaultProperties clientSecret;

    /**
     * Creates an instance of OAuthClientCredentials class.
     */
    public OAuthClientCredentials() {
    }

    /**
     * Get the kind property: Enum for different types of AuthCredentials supported.
     * 
     * @return the kind value.
     */
    @Override
    public AuthCredentialsKind kind() {
        return this.kind;
    }

    /**
     * Get the clientId property: ClientId associated with the provider.
     * 
     * @return the clientId value.
     */
    public String clientId() {
        return this.clientId;
    }

    /**
     * Set the clientId property: ClientId associated with the provider.
     * 
     * @param clientId the clientId value to set.
     * @return the OAuthClientCredentials object itself.
     */
    public OAuthClientCredentials withClientId(String clientId) {
        this.clientId = clientId;
        return this;
    }

    /**
     * Get the clientSecret property: Properties of the key vault.
     * 
     * @return the clientSecret value.
     */
    public KeyVaultProperties clientSecret() {
        return this.clientSecret;
    }

    /**
     * Set the clientSecret property: Properties of the key vault.
     * 
     * @param clientSecret the clientSecret value to set.
     * @return the OAuthClientCredentials object itself.
     */
    public OAuthClientCredentials withClientSecret(KeyVaultProperties clientSecret) {
        this.clientSecret = clientSecret;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (clientId() == null) {
            throw LOGGER.atError()
                .log(
                    new IllegalArgumentException("Missing required property clientId in model OAuthClientCredentials"));
        }
        if (clientSecret() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property clientSecret in model OAuthClientCredentials"));
        } else {
            clientSecret().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(OAuthClientCredentials.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("clientId", this.clientId);
        jsonWriter.writeJsonField("clientSecret", this.clientSecret);
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OAuthClientCredentials from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OAuthClientCredentials if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the OAuthClientCredentials.
     */
    public static OAuthClientCredentials fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OAuthClientCredentials deserializedOAuthClientCredentials = new OAuthClientCredentials();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("clientId".equals(fieldName)) {
                    deserializedOAuthClientCredentials.clientId = reader.getString();
                } else if ("clientSecret".equals(fieldName)) {
                    deserializedOAuthClientCredentials.clientSecret = KeyVaultProperties.fromJson(reader);
                } else if ("kind".equals(fieldName)) {
                    deserializedOAuthClientCredentials.kind = AuthCredentialsKind.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOAuthClientCredentials;
        });
    }
}
