// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.agrifood.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.UUID;

/**
 * DataManagerForAgricultureSolution properties.
 */
@Fluent
public final class DataManagerForAgricultureSolutionProperties
    implements JsonSerializable<DataManagerForAgricultureSolutionProperties> {
    /*
     * Solution Partner Id.
     */
    private String partnerId;

    /*
     * Solution Partner Tenant Id.
     */
    private String partnerTenantId;

    /*
     * Gets scope of the Data manager For Agriculture data access that's required for processing solution request to
     * partner.
     * Example: For gdd they might need weatherScope and satelliteScope.
     */
    private List<String> dataAccessScopes;

    /*
     * The marketplaceOfferDetails property.
     */
    private MarketplaceOfferDetails marketplaceOfferDetails;

    /*
     * Gets api-version Swagger Document Dictionary to capture all api-versions of swagger exposed by partner to Data
     * Manager For Agriculture.
     */
    private Map<String, Object> openApiSpecsDictionary;

    /*
     * Application id of the multi tenant application to be used by partner to access Data Manager For Agriculture data.
     */
    private UUID accessFBApplicationId;

    /*
     * Application id of the SaaS multi tenant application.
     */
    private String saaSApplicationId;

    /*
     * List of ActionIds needed to make the SaaS multi tenant application access relevant fb data.
     */
    private List<String> actionIds;

    /*
     * Role Id of the SaaS multi tenant application to access relevant fb data.
     */
    private String roleId;

    /*
     * Role Name of the SaaS multi tenant application to access relevant fb data.
     */
    private String roleName;

    /*
     * Application name of the multi tenant application to be used by partner to access Data Manager For Agriculture
     * Data.
     */
    private String accessFBApplicationName;

    /**
     * Creates an instance of DataManagerForAgricultureSolutionProperties class.
     */
    public DataManagerForAgricultureSolutionProperties() {
    }

    /**
     * Get the partnerId property: Solution Partner Id.
     * 
     * @return the partnerId value.
     */
    public String partnerId() {
        return this.partnerId;
    }

    /**
     * Get the partnerTenantId property: Solution Partner Tenant Id.
     * 
     * @return the partnerTenantId value.
     */
    public String partnerTenantId() {
        return this.partnerTenantId;
    }

    /**
     * Get the dataAccessScopes property: Gets scope of the Data manager For Agriculture data access that's required for
     * processing solution request to partner.
     * Example: For gdd they might need weatherScope and satelliteScope.
     * 
     * @return the dataAccessScopes value.
     */
    public List<String> dataAccessScopes() {
        return this.dataAccessScopes;
    }

    /**
     * Get the marketplaceOfferDetails property: The marketplaceOfferDetails property.
     * 
     * @return the marketplaceOfferDetails value.
     */
    public MarketplaceOfferDetails marketplaceOfferDetails() {
        return this.marketplaceOfferDetails;
    }

    /**
     * Set the marketplaceOfferDetails property: The marketplaceOfferDetails property.
     * 
     * @param marketplaceOfferDetails the marketplaceOfferDetails value to set.
     * @return the DataManagerForAgricultureSolutionProperties object itself.
     */
    public DataManagerForAgricultureSolutionProperties
        withMarketplaceOfferDetails(MarketplaceOfferDetails marketplaceOfferDetails) {
        this.marketplaceOfferDetails = marketplaceOfferDetails;
        return this;
    }

    /**
     * Get the openApiSpecsDictionary property: Gets api-version Swagger Document Dictionary to capture all api-versions
     * of swagger exposed by partner to Data Manager For Agriculture.
     * 
     * @return the openApiSpecsDictionary value.
     */
    public Map<String, Object> openApiSpecsDictionary() {
        return this.openApiSpecsDictionary;
    }

    /**
     * Get the accessFBApplicationId property: Application id of the multi tenant application to be used by partner to
     * access Data Manager For Agriculture data.
     * 
     * @return the accessFBApplicationId value.
     */
    public UUID accessFBApplicationId() {
        return this.accessFBApplicationId;
    }

    /**
     * Get the saaSApplicationId property: Application id of the SaaS multi tenant application.
     * 
     * @return the saaSApplicationId value.
     */
    public String saaSApplicationId() {
        return this.saaSApplicationId;
    }

    /**
     * Get the actionIds property: List of ActionIds needed to make the SaaS multi tenant application access relevant fb
     * data.
     * 
     * @return the actionIds value.
     */
    public List<String> actionIds() {
        return this.actionIds;
    }

    /**
     * Get the roleId property: Role Id of the SaaS multi tenant application to access relevant fb data.
     * 
     * @return the roleId value.
     */
    public String roleId() {
        return this.roleId;
    }

    /**
     * Get the roleName property: Role Name of the SaaS multi tenant application to access relevant fb data.
     * 
     * @return the roleName value.
     */
    public String roleName() {
        return this.roleName;
    }

    /**
     * Get the accessFBApplicationName property: Application name of the multi tenant application to be used by partner
     * to access Data Manager For Agriculture Data.
     * 
     * @return the accessFBApplicationName value.
     */
    public String accessFBApplicationName() {
        return this.accessFBApplicationName;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (marketplaceOfferDetails() != null) {
            marketplaceOfferDetails().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("marketplaceOfferDetails", this.marketplaceOfferDetails);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DataManagerForAgricultureSolutionProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DataManagerForAgricultureSolutionProperties if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DataManagerForAgricultureSolutionProperties.
     */
    public static DataManagerForAgricultureSolutionProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DataManagerForAgricultureSolutionProperties deserializedDataManagerForAgricultureSolutionProperties
                = new DataManagerForAgricultureSolutionProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("partnerId".equals(fieldName)) {
                    deserializedDataManagerForAgricultureSolutionProperties.partnerId = reader.getString();
                } else if ("partnerTenantId".equals(fieldName)) {
                    deserializedDataManagerForAgricultureSolutionProperties.partnerTenantId = reader.getString();
                } else if ("dataAccessScopes".equals(fieldName)) {
                    List<String> dataAccessScopes = reader.readArray(reader1 -> reader1.getString());
                    deserializedDataManagerForAgricultureSolutionProperties.dataAccessScopes = dataAccessScopes;
                } else if ("marketplaceOfferDetails".equals(fieldName)) {
                    deserializedDataManagerForAgricultureSolutionProperties.marketplaceOfferDetails
                        = MarketplaceOfferDetails.fromJson(reader);
                } else if ("openApiSpecsDictionary".equals(fieldName)) {
                    Map<String, Object> openApiSpecsDictionary = reader.readMap(reader1 -> reader1.readUntyped());
                    deserializedDataManagerForAgricultureSolutionProperties.openApiSpecsDictionary
                        = openApiSpecsDictionary;
                } else if ("accessFBApplicationId".equals(fieldName)) {
                    deserializedDataManagerForAgricultureSolutionProperties.accessFBApplicationId
                        = reader.getNullable(nonNullReader -> UUID.fromString(nonNullReader.getString()));
                } else if ("saaSApplicationId".equals(fieldName)) {
                    deserializedDataManagerForAgricultureSolutionProperties.saaSApplicationId = reader.getString();
                } else if ("actionIds".equals(fieldName)) {
                    List<String> actionIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedDataManagerForAgricultureSolutionProperties.actionIds = actionIds;
                } else if ("roleId".equals(fieldName)) {
                    deserializedDataManagerForAgricultureSolutionProperties.roleId = reader.getString();
                } else if ("roleName".equals(fieldName)) {
                    deserializedDataManagerForAgricultureSolutionProperties.roleName = reader.getString();
                } else if ("accessFBApplicationName".equals(fieldName)) {
                    deserializedDataManagerForAgricultureSolutionProperties.accessFBApplicationName
                        = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDataManagerForAgricultureSolutionProperties;
        });
    }
}
