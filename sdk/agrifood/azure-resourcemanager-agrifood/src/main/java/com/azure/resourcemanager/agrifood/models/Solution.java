// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.agrifood.models;

import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.agrifood.fluent.models.SolutionInner;

/**
 * An immutable client-side representation of Solution.
 */
public interface Solution {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     * 
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     * 
     * @return the type value.
     */
    String type();

    /**
     * Gets the etag property: The ETag value to implement optimistic concurrency.
     * 
     * @return the etag value.
     */
    String etag();

    /**
     * Gets the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * Gets the partnerId property: Partner Id of the Solution.
     * 
     * @return the partnerId value.
     */
    String partnerId();

    /**
     * Gets the saasSubscriptionId property: SaaS subscriptionId of the installed SaaS application.
     * 
     * @return the saasSubscriptionId value.
     */
    String saasSubscriptionId();

    /**
     * Gets the saasSubscriptionName property: SaaS subscription name of the installed SaaS application.
     * 
     * @return the saasSubscriptionName value.
     */
    String saasSubscriptionName();

    /**
     * Gets the marketplacePublisherId property: SaaS application Marketplace Publisher Id.
     * 
     * @return the marketplacePublisherId value.
     */
    String marketplacePublisherId();

    /**
     * Gets the planId property: SaaS application Plan Id.
     * 
     * @return the planId value.
     */
    String planId();

    /**
     * Gets the roleAssignmentId property: Role Assignment Id.
     * 
     * @return the roleAssignmentId value.
     */
    String roleAssignmentId();

    /**
     * Gets the offerId property: SaaS application Offer Id.
     * 
     * @return the offerId value.
     */
    String offerId();

    /**
     * Gets the termId property: SaaS application Term Id.
     * 
     * @return the termId value.
     */
    String termId();

    /**
     * Gets the name of the resource group.
     * 
     * @return the name of the resource group.
     */
    String resourceGroupName();

    /**
     * Gets the inner com.azure.resourcemanager.agrifood.fluent.models.SolutionInner object.
     * 
     * @return the inner object.
     */
    SolutionInner innerModel();

    /**
     * The entirety of the Solution definition.
     */
    interface Definition
        extends DefinitionStages.Blank, DefinitionStages.WithParentResource, DefinitionStages.WithCreate {
    }

    /**
     * The Solution definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of the Solution definition.
         */
        interface Blank extends WithParentResource {
        }

        /**
         * The stage of the Solution definition allowing to specify parent resource.
         */
        interface WithParentResource {
            /**
             * Specifies resourceGroupName, dataManagerForAgricultureResourceName.
             * 
             * @param resourceGroupName The name of the resource group. The name is case insensitive.
             * @param dataManagerForAgricultureResourceName DataManagerForAgriculture resource name.
             * @return the next definition stage.
             */
            WithCreate withExistingFarmBeat(String resourceGroupName, String dataManagerForAgricultureResourceName);
        }

        /**
         * The stage of the Solution definition which contains all the minimum required properties for the resource to
         * be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate extends DefinitionStages.WithSaasSubscriptionId, DefinitionStages.WithSaasSubscriptionName,
            DefinitionStages.WithMarketplacePublisherId, DefinitionStages.WithPlanId,
            DefinitionStages.WithRoleAssignmentId, DefinitionStages.WithOfferId, DefinitionStages.WithTermId {
            /**
             * Executes the create request.
             * 
             * @return the created resource.
             */
            Solution create();

            /**
             * Executes the create request.
             * 
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            Solution create(Context context);
        }

        /**
         * The stage of the Solution definition allowing to specify saasSubscriptionId.
         */
        interface WithSaasSubscriptionId {
            /**
             * Specifies the saasSubscriptionId property: SaaS subscriptionId of the installed SaaS application..
             * 
             * @param saasSubscriptionId SaaS subscriptionId of the installed SaaS application.
             * @return the next definition stage.
             */
            WithCreate withSaasSubscriptionId(String saasSubscriptionId);
        }

        /**
         * The stage of the Solution definition allowing to specify saasSubscriptionName.
         */
        interface WithSaasSubscriptionName {
            /**
             * Specifies the saasSubscriptionName property: SaaS subscription name of the installed SaaS application..
             * 
             * @param saasSubscriptionName SaaS subscription name of the installed SaaS application.
             * @return the next definition stage.
             */
            WithCreate withSaasSubscriptionName(String saasSubscriptionName);
        }

        /**
         * The stage of the Solution definition allowing to specify marketplacePublisherId.
         */
        interface WithMarketplacePublisherId {
            /**
             * Specifies the marketplacePublisherId property: SaaS application Marketplace Publisher Id..
             * 
             * @param marketplacePublisherId SaaS application Marketplace Publisher Id.
             * @return the next definition stage.
             */
            WithCreate withMarketplacePublisherId(String marketplacePublisherId);
        }

        /**
         * The stage of the Solution definition allowing to specify planId.
         */
        interface WithPlanId {
            /**
             * Specifies the planId property: SaaS application Plan Id..
             * 
             * @param planId SaaS application Plan Id.
             * @return the next definition stage.
             */
            WithCreate withPlanId(String planId);
        }

        /**
         * The stage of the Solution definition allowing to specify roleAssignmentId.
         */
        interface WithRoleAssignmentId {
            /**
             * Specifies the roleAssignmentId property: Role Assignment Id..
             * 
             * @param roleAssignmentId Role Assignment Id.
             * @return the next definition stage.
             */
            WithCreate withRoleAssignmentId(String roleAssignmentId);
        }

        /**
         * The stage of the Solution definition allowing to specify offerId.
         */
        interface WithOfferId {
            /**
             * Specifies the offerId property: SaaS application Offer Id..
             * 
             * @param offerId SaaS application Offer Id.
             * @return the next definition stage.
             */
            WithCreate withOfferId(String offerId);
        }

        /**
         * The stage of the Solution definition allowing to specify termId.
         */
        interface WithTermId {
            /**
             * Specifies the termId property: SaaS application Term Id..
             * 
             * @param termId SaaS application Term Id.
             * @return the next definition stage.
             */
            WithCreate withTermId(String termId);
        }
    }

    /**
     * Begins update for the Solution resource.
     * 
     * @return the stage of resource update.
     */
    Solution.Update update();

    /**
     * The template for Solution update.
     */
    interface Update extends UpdateStages.WithSaasSubscriptionId, UpdateStages.WithSaasSubscriptionName,
        UpdateStages.WithMarketplacePublisherId, UpdateStages.WithPlanId, UpdateStages.WithRoleAssignmentId,
        UpdateStages.WithOfferId, UpdateStages.WithTermId {
        /**
         * Executes the update request.
         * 
         * @return the updated resource.
         */
        Solution apply();

        /**
         * Executes the update request.
         * 
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        Solution apply(Context context);
    }

    /**
     * The Solution update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the Solution update allowing to specify saasSubscriptionId.
         */
        interface WithSaasSubscriptionId {
            /**
             * Specifies the saasSubscriptionId property: SaaS subscriptionId of the installed SaaS application..
             * 
             * @param saasSubscriptionId SaaS subscriptionId of the installed SaaS application.
             * @return the next definition stage.
             */
            Update withSaasSubscriptionId(String saasSubscriptionId);
        }

        /**
         * The stage of the Solution update allowing to specify saasSubscriptionName.
         */
        interface WithSaasSubscriptionName {
            /**
             * Specifies the saasSubscriptionName property: SaaS subscription name of the installed SaaS application..
             * 
             * @param saasSubscriptionName SaaS subscription name of the installed SaaS application.
             * @return the next definition stage.
             */
            Update withSaasSubscriptionName(String saasSubscriptionName);
        }

        /**
         * The stage of the Solution update allowing to specify marketplacePublisherId.
         */
        interface WithMarketplacePublisherId {
            /**
             * Specifies the marketplacePublisherId property: SaaS application Marketplace Publisher Id..
             * 
             * @param marketplacePublisherId SaaS application Marketplace Publisher Id.
             * @return the next definition stage.
             */
            Update withMarketplacePublisherId(String marketplacePublisherId);
        }

        /**
         * The stage of the Solution update allowing to specify planId.
         */
        interface WithPlanId {
            /**
             * Specifies the planId property: SaaS application Plan Id..
             * 
             * @param planId SaaS application Plan Id.
             * @return the next definition stage.
             */
            Update withPlanId(String planId);
        }

        /**
         * The stage of the Solution update allowing to specify roleAssignmentId.
         */
        interface WithRoleAssignmentId {
            /**
             * Specifies the roleAssignmentId property: Role Assignment Id..
             * 
             * @param roleAssignmentId Role Assignment Id.
             * @return the next definition stage.
             */
            Update withRoleAssignmentId(String roleAssignmentId);
        }

        /**
         * The stage of the Solution update allowing to specify offerId.
         */
        interface WithOfferId {
            /**
             * Specifies the offerId property: SaaS application Offer Id..
             * 
             * @param offerId SaaS application Offer Id.
             * @return the next definition stage.
             */
            Update withOfferId(String offerId);
        }

        /**
         * The stage of the Solution update allowing to specify termId.
         */
        interface WithTermId {
            /**
             * Specifies the termId property: SaaS application Term Id..
             * 
             * @param termId SaaS application Term Id.
             * @return the next definition stage.
             */
            Update withTermId(String termId);
        }
    }

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @return the refreshed resource.
     */
    Solution refresh();

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    Solution refresh(Context context);
}
