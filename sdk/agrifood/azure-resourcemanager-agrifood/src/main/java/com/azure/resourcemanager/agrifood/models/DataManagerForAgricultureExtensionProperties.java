// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.agrifood.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * DataManagerForAgricultureExtension properties.
 */
@Immutable
public final class DataManagerForAgricultureExtensionProperties
    implements JsonSerializable<DataManagerForAgricultureExtensionProperties> {
    /*
     * Target ResourceType of the Data Manager For Agriculture Extension.
     */
    private String targetResourceType;

    /*
     * Data Manager For Agriculture Extension ID.
     */
    private String farmBeatsExtensionId;

    /*
     * Data Manager For Agriculture Extension name.
     */
    private String farmBeatsExtensionName;

    /*
     * Data Manager For Agriculture Extension version.
     */
    private String farmBeatsExtensionVersion;

    /*
     * Publisher ID.
     */
    private String publisherId;

    /*
     * Textual description.
     */
    private String description;

    /*
     * Category of the extension. e.g. weather/sensor/satellite.
     */
    private String extensionCategory;

    /*
     * Data Manager For Agriculture Extension auth link.
     */
    private String extensionAuthLink;

    /*
     * Data Manager For Agriculture Extension api docs link.
     */
    private String extensionApiDocsLink;

    /*
     * Detailed information which shows summary of requested data.
     * Used in descriptive get extension metadata call.
     * Information for weather category per api included are apisSupported,
     * customParameters, PlatformParameters and Units supported.
     */
    private List<DetailedInformation> detailedInformation;

    /**
     * Creates an instance of DataManagerForAgricultureExtensionProperties class.
     */
    public DataManagerForAgricultureExtensionProperties() {
    }

    /**
     * Get the targetResourceType property: Target ResourceType of the Data Manager For Agriculture Extension.
     * 
     * @return the targetResourceType value.
     */
    public String targetResourceType() {
        return this.targetResourceType;
    }

    /**
     * Get the farmBeatsExtensionId property: Data Manager For Agriculture Extension ID.
     * 
     * @return the farmBeatsExtensionId value.
     */
    public String farmBeatsExtensionId() {
        return this.farmBeatsExtensionId;
    }

    /**
     * Get the farmBeatsExtensionName property: Data Manager For Agriculture Extension name.
     * 
     * @return the farmBeatsExtensionName value.
     */
    public String farmBeatsExtensionName() {
        return this.farmBeatsExtensionName;
    }

    /**
     * Get the farmBeatsExtensionVersion property: Data Manager For Agriculture Extension version.
     * 
     * @return the farmBeatsExtensionVersion value.
     */
    public String farmBeatsExtensionVersion() {
        return this.farmBeatsExtensionVersion;
    }

    /**
     * Get the publisherId property: Publisher ID.
     * 
     * @return the publisherId value.
     */
    public String publisherId() {
        return this.publisherId;
    }

    /**
     * Get the description property: Textual description.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Get the extensionCategory property: Category of the extension. e.g. weather/sensor/satellite.
     * 
     * @return the extensionCategory value.
     */
    public String extensionCategory() {
        return this.extensionCategory;
    }

    /**
     * Get the extensionAuthLink property: Data Manager For Agriculture Extension auth link.
     * 
     * @return the extensionAuthLink value.
     */
    public String extensionAuthLink() {
        return this.extensionAuthLink;
    }

    /**
     * Get the extensionApiDocsLink property: Data Manager For Agriculture Extension api docs link.
     * 
     * @return the extensionApiDocsLink value.
     */
    public String extensionApiDocsLink() {
        return this.extensionApiDocsLink;
    }

    /**
     * Get the detailedInformation property: Detailed information which shows summary of requested data.
     * Used in descriptive get extension metadata call.
     * Information for weather category per api included are apisSupported,
     * customParameters, PlatformParameters and Units supported.
     * 
     * @return the detailedInformation value.
     */
    public List<DetailedInformation> detailedInformation() {
        return this.detailedInformation;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (detailedInformation() != null) {
            detailedInformation().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DataManagerForAgricultureExtensionProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DataManagerForAgricultureExtensionProperties if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DataManagerForAgricultureExtensionProperties.
     */
    public static DataManagerForAgricultureExtensionProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DataManagerForAgricultureExtensionProperties deserializedDataManagerForAgricultureExtensionProperties
                = new DataManagerForAgricultureExtensionProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("targetResourceType".equals(fieldName)) {
                    deserializedDataManagerForAgricultureExtensionProperties.targetResourceType = reader.getString();
                } else if ("farmBeatsExtensionId".equals(fieldName)) {
                    deserializedDataManagerForAgricultureExtensionProperties.farmBeatsExtensionId = reader.getString();
                } else if ("farmBeatsExtensionName".equals(fieldName)) {
                    deserializedDataManagerForAgricultureExtensionProperties.farmBeatsExtensionName
                        = reader.getString();
                } else if ("farmBeatsExtensionVersion".equals(fieldName)) {
                    deserializedDataManagerForAgricultureExtensionProperties.farmBeatsExtensionVersion
                        = reader.getString();
                } else if ("publisherId".equals(fieldName)) {
                    deserializedDataManagerForAgricultureExtensionProperties.publisherId = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedDataManagerForAgricultureExtensionProperties.description = reader.getString();
                } else if ("extensionCategory".equals(fieldName)) {
                    deserializedDataManagerForAgricultureExtensionProperties.extensionCategory = reader.getString();
                } else if ("extensionAuthLink".equals(fieldName)) {
                    deserializedDataManagerForAgricultureExtensionProperties.extensionAuthLink = reader.getString();
                } else if ("extensionApiDocsLink".equals(fieldName)) {
                    deserializedDataManagerForAgricultureExtensionProperties.extensionApiDocsLink = reader.getString();
                } else if ("detailedInformation".equals(fieldName)) {
                    List<DetailedInformation> detailedInformation
                        = reader.readArray(reader1 -> DetailedInformation.fromJson(reader1));
                    deserializedDataManagerForAgricultureExtensionProperties.detailedInformation = detailedInformation;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDataManagerForAgricultureExtensionProperties;
        });
    }
}
