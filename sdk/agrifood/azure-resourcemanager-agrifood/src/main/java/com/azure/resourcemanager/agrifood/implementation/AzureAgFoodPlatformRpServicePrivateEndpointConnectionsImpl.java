// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.agrifood.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.agrifood.fluent.AzureAgFoodPlatformRpServicePrivateEndpointConnectionsClient;
import com.azure.resourcemanager.agrifood.fluent.models.AzureAgFoodPlatformRPServicePrivateEndpointConnectionInner;
import com.azure.resourcemanager.agrifood.models.AzureAgFoodPlatformRPServicePrivateEndpointConnection;
import com.azure.resourcemanager.agrifood.models.AzureAgFoodPlatformRpServicePrivateEndpointConnections;

public final class AzureAgFoodPlatformRpServicePrivateEndpointConnectionsImpl
    implements AzureAgFoodPlatformRpServicePrivateEndpointConnections {
    private static final ClientLogger LOGGER
        = new ClientLogger(AzureAgFoodPlatformRpServicePrivateEndpointConnectionsImpl.class);

    private final AzureAgFoodPlatformRpServicePrivateEndpointConnectionsClient innerClient;

    private final com.azure.resourcemanager.agrifood.AgriFoodManager serviceManager;

    public AzureAgFoodPlatformRpServicePrivateEndpointConnectionsImpl(
        AzureAgFoodPlatformRpServicePrivateEndpointConnectionsClient innerClient,
        com.azure.resourcemanager.agrifood.AgriFoodManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<AzureAgFoodPlatformRPServicePrivateEndpointConnection>
        listByDataManagerForAgriculture(String resourceGroupName, String dataManagerForAgricultureResourceName) {
        PagedIterable<AzureAgFoodPlatformRPServicePrivateEndpointConnectionInner> inner = this.serviceClient()
            .listByDataManagerForAgriculture(resourceGroupName, dataManagerForAgricultureResourceName);
        return Utils.mapPage(inner,
            inner1 -> new AzureAgFoodPlatformRPServicePrivateEndpointConnectionImpl(inner1, this.manager()));
    }

    public PagedIterable<AzureAgFoodPlatformRPServicePrivateEndpointConnection> listByDataManagerForAgriculture(
        String resourceGroupName, String dataManagerForAgricultureResourceName, Context context) {
        PagedIterable<AzureAgFoodPlatformRPServicePrivateEndpointConnectionInner> inner = this.serviceClient()
            .listByDataManagerForAgriculture(resourceGroupName, dataManagerForAgricultureResourceName, context);
        return Utils.mapPage(inner,
            inner1 -> new AzureAgFoodPlatformRPServicePrivateEndpointConnectionImpl(inner1, this.manager()));
    }

    public Response<AzureAgFoodPlatformRPServicePrivateEndpointConnection> getWithResponse(String resourceGroupName,
        String dataManagerForAgricultureResourceName, String privateEndpointConnectionName, Context context) {
        Response<AzureAgFoodPlatformRPServicePrivateEndpointConnectionInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, dataManagerForAgricultureResourceName,
                privateEndpointConnectionName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new AzureAgFoodPlatformRPServicePrivateEndpointConnectionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public AzureAgFoodPlatformRPServicePrivateEndpointConnection get(String resourceGroupName,
        String dataManagerForAgricultureResourceName, String privateEndpointConnectionName) {
        AzureAgFoodPlatformRPServicePrivateEndpointConnectionInner inner = this.serviceClient().get(resourceGroupName,
            dataManagerForAgricultureResourceName, privateEndpointConnectionName);
        if (inner != null) {
            return new AzureAgFoodPlatformRPServicePrivateEndpointConnectionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String dataManagerForAgricultureResourceName,
        String privateEndpointConnectionName) {
        this.serviceClient().delete(resourceGroupName, dataManagerForAgricultureResourceName,
            privateEndpointConnectionName);
    }

    public void delete(String resourceGroupName, String dataManagerForAgricultureResourceName,
        String privateEndpointConnectionName, Context context) {
        this.serviceClient().delete(resourceGroupName, dataManagerForAgricultureResourceName,
            privateEndpointConnectionName, context);
    }

    public AzureAgFoodPlatformRPServicePrivateEndpointConnection getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String dataManagerForAgricultureResourceName = Utils.getValueFromIdByName(id, "farmBeats");
        if (dataManagerForAgricultureResourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'farmBeats'.", id)));
        }
        String privateEndpointConnectionName = Utils.getValueFromIdByName(id, "privateEndpointConnections");
        if (privateEndpointConnectionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'privateEndpointConnections'.", id)));
        }
        return this.getWithResponse(resourceGroupName, dataManagerForAgricultureResourceName,
            privateEndpointConnectionName, Context.NONE).getValue();
    }

    public Response<AzureAgFoodPlatformRPServicePrivateEndpointConnection> getByIdWithResponse(String id,
        Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String dataManagerForAgricultureResourceName = Utils.getValueFromIdByName(id, "farmBeats");
        if (dataManagerForAgricultureResourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'farmBeats'.", id)));
        }
        String privateEndpointConnectionName = Utils.getValueFromIdByName(id, "privateEndpointConnections");
        if (privateEndpointConnectionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'privateEndpointConnections'.", id)));
        }
        return this.getWithResponse(resourceGroupName, dataManagerForAgricultureResourceName,
            privateEndpointConnectionName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String dataManagerForAgricultureResourceName = Utils.getValueFromIdByName(id, "farmBeats");
        if (dataManagerForAgricultureResourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'farmBeats'.", id)));
        }
        String privateEndpointConnectionName = Utils.getValueFromIdByName(id, "privateEndpointConnections");
        if (privateEndpointConnectionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'privateEndpointConnections'.", id)));
        }
        this.delete(resourceGroupName, dataManagerForAgricultureResourceName, privateEndpointConnectionName,
            Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String dataManagerForAgricultureResourceName = Utils.getValueFromIdByName(id, "farmBeats");
        if (dataManagerForAgricultureResourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'farmBeats'.", id)));
        }
        String privateEndpointConnectionName = Utils.getValueFromIdByName(id, "privateEndpointConnections");
        if (privateEndpointConnectionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'privateEndpointConnections'.", id)));
        }
        this.delete(resourceGroupName, dataManagerForAgricultureResourceName, privateEndpointConnectionName, context);
    }

    private AzureAgFoodPlatformRpServicePrivateEndpointConnectionsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.agrifood.AgriFoodManager manager() {
        return this.serviceManager;
    }

    public AzureAgFoodPlatformRPServicePrivateEndpointConnectionImpl define(String name) {
        return new AzureAgFoodPlatformRPServicePrivateEndpointConnectionImpl(name, this.manager());
    }
}
