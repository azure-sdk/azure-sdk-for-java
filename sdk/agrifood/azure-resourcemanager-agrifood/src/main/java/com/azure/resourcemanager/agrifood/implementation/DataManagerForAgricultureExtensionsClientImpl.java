// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.agrifood.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.agrifood.fluent.DataManagerForAgricultureExtensionsClient;
import com.azure.resourcemanager.agrifood.fluent.models.DataManagerForAgricultureExtensionInner;
import com.azure.resourcemanager.agrifood.models.DataManagerForAgricultureExtensionListResult;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in
 * DataManagerForAgricultureExtensionsClient.
 */
public final class DataManagerForAgricultureExtensionsClientImpl implements DataManagerForAgricultureExtensionsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final DataManagerForAgricultureExtensionsService service;

    /**
     * The service client containing this operation class.
     */
    private final AgriFoodManagementClientImpl client;

    /**
     * Initializes an instance of DataManagerForAgricultureExtensionsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    DataManagerForAgricultureExtensionsClientImpl(AgriFoodManagementClientImpl client) {
        this.service = RestProxy.create(DataManagerForAgricultureExtensionsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AgriFoodManagementClientDataManagerForAgricultureExtensions to be
     * used by the proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "AgriFoodManagementCl")
    public interface DataManagerForAgricultureExtensionsService {
        @Headers({ "Content-Type: application/json" })
        @Get("/providers/Microsoft.AgFoodPlatform/farmBeatsExtensionDefinitions")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DataManagerForAgricultureExtensionListResult>> listByTenant(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @QueryParam(value = "farmBeatsExtensionIds", multipleQueryParams = true) List<String> farmBeatsExtensionIds,
            @QueryParam(
                value = "farmBeatsExtensionNames",
                multipleQueryParams = true) List<String> farmBeatsExtensionNames,
            @QueryParam(value = "extensionCategories", multipleQueryParams = true) List<String> extensionCategories,
            @QueryParam(value = "publisherIds", multipleQueryParams = true) List<String> publisherIds,
            @QueryParam("$maxPageSize") Integer maxPageSize, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/providers/Microsoft.AgFoodPlatform/farmBeatsExtensionDefinitions/{dataManagerForAgricultureExtensionId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DataManagerForAgricultureExtensionInner>> get(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("dataManagerForAgricultureExtensionId") String dataManagerForAgricultureExtensionId,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DataManagerForAgricultureExtensionListResult>> listByTenantNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Get list of Data Manager For Agriculture extension.
     * 
     * @param farmBeatsExtensionIds DataManagerForAgricultureExtension ids.
     * @param farmBeatsExtensionNames DataManagerForAgriculture extension names.
     * @param extensionCategories Extension categories.
     * @param publisherIds Publisher ids.
     * @param maxPageSize Maximum number of items needed (inclusive).
     * Minimum = 10, Maximum = 1000, Default value = 50.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Data Manager For Agriculture extension along with {@link PagedResponse} on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DataManagerForAgricultureExtensionInner>> listByTenantSinglePageAsync(
        List<String> farmBeatsExtensionIds, List<String> farmBeatsExtensionNames, List<String> extensionCategories,
        List<String> publisherIds, Integer maxPageSize) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        List<String> farmBeatsExtensionIdsConverted = (farmBeatsExtensionIds == null) ? new ArrayList<>()
            : farmBeatsExtensionIds.stream().map(item -> Objects.toString(item, "")).collect(Collectors.toList());
        List<String> farmBeatsExtensionNamesConverted = (farmBeatsExtensionNames == null) ? new ArrayList<>()
            : farmBeatsExtensionNames.stream().map(item -> Objects.toString(item, "")).collect(Collectors.toList());
        List<String> extensionCategoriesConverted = (extensionCategories == null) ? new ArrayList<>()
            : extensionCategories.stream().map(item -> Objects.toString(item, "")).collect(Collectors.toList());
        List<String> publisherIdsConverted = (publisherIds == null) ? new ArrayList<>()
            : publisherIds.stream().map(item -> Objects.toString(item, "")).collect(Collectors.toList());
        return FluxUtil
            .withContext(context -> service.listByTenant(this.client.getEndpoint(), this.client.getApiVersion(),
                farmBeatsExtensionIdsConverted, farmBeatsExtensionNamesConverted, extensionCategoriesConverted,
                publisherIdsConverted, maxPageSize, accept, context))
            .<PagedResponse<DataManagerForAgricultureExtensionInner>>map(
                res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                    res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get list of Data Manager For Agriculture extension.
     * 
     * @param farmBeatsExtensionIds DataManagerForAgricultureExtension ids.
     * @param farmBeatsExtensionNames DataManagerForAgriculture extension names.
     * @param extensionCategories Extension categories.
     * @param publisherIds Publisher ids.
     * @param maxPageSize Maximum number of items needed (inclusive).
     * Minimum = 10, Maximum = 1000, Default value = 50.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Data Manager For Agriculture extension along with {@link PagedResponse} on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DataManagerForAgricultureExtensionInner>> listByTenantSinglePageAsync(
        List<String> farmBeatsExtensionIds, List<String> farmBeatsExtensionNames, List<String> extensionCategories,
        List<String> publisherIds, Integer maxPageSize, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        List<String> farmBeatsExtensionIdsConverted = (farmBeatsExtensionIds == null) ? new ArrayList<>()
            : farmBeatsExtensionIds.stream().map(item -> Objects.toString(item, "")).collect(Collectors.toList());
        List<String> farmBeatsExtensionNamesConverted = (farmBeatsExtensionNames == null) ? new ArrayList<>()
            : farmBeatsExtensionNames.stream().map(item -> Objects.toString(item, "")).collect(Collectors.toList());
        List<String> extensionCategoriesConverted = (extensionCategories == null) ? new ArrayList<>()
            : extensionCategories.stream().map(item -> Objects.toString(item, "")).collect(Collectors.toList());
        List<String> publisherIdsConverted = (publisherIds == null) ? new ArrayList<>()
            : publisherIds.stream().map(item -> Objects.toString(item, "")).collect(Collectors.toList());
        context = this.client.mergeContext(context);
        return service
            .listByTenant(this.client.getEndpoint(), this.client.getApiVersion(), farmBeatsExtensionIdsConverted,
                farmBeatsExtensionNamesConverted, extensionCategoriesConverted, publisherIdsConverted, maxPageSize,
                accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * Get list of Data Manager For Agriculture extension.
     * 
     * @param farmBeatsExtensionIds DataManagerForAgricultureExtension ids.
     * @param farmBeatsExtensionNames DataManagerForAgriculture extension names.
     * @param extensionCategories Extension categories.
     * @param publisherIds Publisher ids.
     * @param maxPageSize Maximum number of items needed (inclusive).
     * Minimum = 10, Maximum = 1000, Default value = 50.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Data Manager For Agriculture extension as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<DataManagerForAgricultureExtensionInner> listByTenantAsync(List<String> farmBeatsExtensionIds,
        List<String> farmBeatsExtensionNames, List<String> extensionCategories, List<String> publisherIds,
        Integer maxPageSize) {
        return new PagedFlux<>(() -> listByTenantSinglePageAsync(farmBeatsExtensionIds, farmBeatsExtensionNames,
            extensionCategories, publisherIds, maxPageSize), nextLink -> listByTenantNextSinglePageAsync(nextLink));
    }

    /**
     * Get list of Data Manager For Agriculture extension.
     * 
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Data Manager For Agriculture extension as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<DataManagerForAgricultureExtensionInner> listByTenantAsync() {
        final List<String> farmBeatsExtensionIds = null;
        final List<String> farmBeatsExtensionNames = null;
        final List<String> extensionCategories = null;
        final List<String> publisherIds = null;
        final Integer maxPageSize = null;
        return new PagedFlux<>(() -> listByTenantSinglePageAsync(farmBeatsExtensionIds, farmBeatsExtensionNames,
            extensionCategories, publisherIds, maxPageSize), nextLink -> listByTenantNextSinglePageAsync(nextLink));
    }

    /**
     * Get list of Data Manager For Agriculture extension.
     * 
     * @param farmBeatsExtensionIds DataManagerForAgricultureExtension ids.
     * @param farmBeatsExtensionNames DataManagerForAgriculture extension names.
     * @param extensionCategories Extension categories.
     * @param publisherIds Publisher ids.
     * @param maxPageSize Maximum number of items needed (inclusive).
     * Minimum = 10, Maximum = 1000, Default value = 50.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Data Manager For Agriculture extension as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<DataManagerForAgricultureExtensionInner> listByTenantAsync(List<String> farmBeatsExtensionIds,
        List<String> farmBeatsExtensionNames, List<String> extensionCategories, List<String> publisherIds,
        Integer maxPageSize, Context context) {
        return new PagedFlux<>(() -> listByTenantSinglePageAsync(farmBeatsExtensionIds, farmBeatsExtensionNames,
            extensionCategories, publisherIds, maxPageSize, context),
            nextLink -> listByTenantNextSinglePageAsync(nextLink, context));
    }

    /**
     * Get list of Data Manager For Agriculture extension.
     * 
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Data Manager For Agriculture extension as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DataManagerForAgricultureExtensionInner> listByTenant() {
        final List<String> farmBeatsExtensionIds = null;
        final List<String> farmBeatsExtensionNames = null;
        final List<String> extensionCategories = null;
        final List<String> publisherIds = null;
        final Integer maxPageSize = null;
        return new PagedIterable<>(listByTenantAsync(farmBeatsExtensionIds, farmBeatsExtensionNames,
            extensionCategories, publisherIds, maxPageSize));
    }

    /**
     * Get list of Data Manager For Agriculture extension.
     * 
     * @param farmBeatsExtensionIds DataManagerForAgricultureExtension ids.
     * @param farmBeatsExtensionNames DataManagerForAgriculture extension names.
     * @param extensionCategories Extension categories.
     * @param publisherIds Publisher ids.
     * @param maxPageSize Maximum number of items needed (inclusive).
     * Minimum = 10, Maximum = 1000, Default value = 50.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Data Manager For Agriculture extension as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DataManagerForAgricultureExtensionInner> listByTenant(List<String> farmBeatsExtensionIds,
        List<String> farmBeatsExtensionNames, List<String> extensionCategories, List<String> publisherIds,
        Integer maxPageSize, Context context) {
        return new PagedIterable<>(listByTenantAsync(farmBeatsExtensionIds, farmBeatsExtensionNames,
            extensionCategories, publisherIds, maxPageSize, context));
    }

    /**
     * Get Data Manager For Agriculture extension.
     * 
     * @param dataManagerForAgricultureExtensionId dataManagerForAgricultureExtensionId to be queried.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return data Manager For Agriculture extension along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DataManagerForAgricultureExtensionInner>>
        getWithResponseAsync(String dataManagerForAgricultureExtensionId) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (dataManagerForAgricultureExtensionId == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter dataManagerForAgricultureExtensionId is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), this.client.getApiVersion(),
                dataManagerForAgricultureExtensionId, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get Data Manager For Agriculture extension.
     * 
     * @param dataManagerForAgricultureExtensionId dataManagerForAgricultureExtensionId to be queried.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return data Manager For Agriculture extension along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DataManagerForAgricultureExtensionInner>>
        getWithResponseAsync(String dataManagerForAgricultureExtensionId, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (dataManagerForAgricultureExtensionId == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter dataManagerForAgricultureExtensionId is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), this.client.getApiVersion(), dataManagerForAgricultureExtensionId,
            accept, context);
    }

    /**
     * Get Data Manager For Agriculture extension.
     * 
     * @param dataManagerForAgricultureExtensionId dataManagerForAgricultureExtensionId to be queried.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return data Manager For Agriculture extension on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DataManagerForAgricultureExtensionInner> getAsync(String dataManagerForAgricultureExtensionId) {
        return getWithResponseAsync(dataManagerForAgricultureExtensionId)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get Data Manager For Agriculture extension.
     * 
     * @param dataManagerForAgricultureExtensionId dataManagerForAgricultureExtensionId to be queried.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return data Manager For Agriculture extension along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<DataManagerForAgricultureExtensionInner>
        getWithResponse(String dataManagerForAgricultureExtensionId, Context context) {
        return getWithResponseAsync(dataManagerForAgricultureExtensionId, context).block();
    }

    /**
     * Get Data Manager For Agriculture extension.
     * 
     * @param dataManagerForAgricultureExtensionId dataManagerForAgricultureExtensionId to be queried.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return data Manager For Agriculture extension.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DataManagerForAgricultureExtensionInner get(String dataManagerForAgricultureExtensionId) {
        return getWithResponse(dataManagerForAgricultureExtensionId, Context.NONE).getValue();
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DataManagerForAgricultureExtension list operation along with {@link PagedResponse} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DataManagerForAgricultureExtensionInner>>
        listByTenantNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByTenantNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<DataManagerForAgricultureExtensionInner>>map(
                res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                    res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DataManagerForAgricultureExtension list operation along with {@link PagedResponse} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DataManagerForAgricultureExtensionInner>>
        listByTenantNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listByTenantNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }
}
