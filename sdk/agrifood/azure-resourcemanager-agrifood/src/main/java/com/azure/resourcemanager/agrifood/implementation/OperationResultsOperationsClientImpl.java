// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.agrifood.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.agrifood.fluent.OperationResultsOperationsClient;
import com.azure.resourcemanager.agrifood.fluent.models.ArmAsyncOperationInner;
import com.azure.resourcemanager.agrifood.models.AzureCoreFoundationsErrorException;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in OperationResultsOperationsClient.
 */
public final class OperationResultsOperationsClientImpl implements OperationResultsOperationsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final OperationResultsOperationsService service;

    /**
     * The service client containing this operation class.
     */
    private final AgriFoodManagementClientImpl client;

    /**
     * Initializes an instance of OperationResultsOperationsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    OperationResultsOperationsClientImpl(AgriFoodManagementClientImpl client) {
        this.service = RestProxy.create(OperationResultsOperationsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AgriFoodManagementClientOperationResultsOperations to be used by the
     * proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "AgriFoodManagementCl")
    public interface OperationResultsOperationsService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/providers/Microsoft.AgFoodPlatform/locations/{locations}/operationResults/{operationResultsId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(AzureCoreFoundationsErrorException.class)
        Mono<Response<ArmAsyncOperationInner>> get(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("locations") String locations, @PathParam("operationResultsId") String operationResultsId,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Get operationResults for a Data Manager For Agriculture resource.
     * 
     * @param subscriptionId The ID of the target subscription. The value must be an UUID.
     * @param locations Location.
     * @param operationResultsId operationResultsId for a specific location.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AzureCoreFoundationsErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return operationResults for a Data Manager For Agriculture resource along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ArmAsyncOperationInner>> getWithResponseAsync(String subscriptionId, String locations,
        String operationResultsId) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (subscriptionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter subscriptionId is required and cannot be null."));
        }
        if (locations == null) {
            return Mono.error(new IllegalArgumentException("Parameter locations is required and cannot be null."));
        }
        if (operationResultsId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter operationResultsId is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), this.client.getApiVersion(), subscriptionId,
                locations, operationResultsId, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get operationResults for a Data Manager For Agriculture resource.
     * 
     * @param subscriptionId The ID of the target subscription. The value must be an UUID.
     * @param locations Location.
     * @param operationResultsId operationResultsId for a specific location.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AzureCoreFoundationsErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return operationResults for a Data Manager For Agriculture resource along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ArmAsyncOperationInner>> getWithResponseAsync(String subscriptionId, String locations,
        String operationResultsId, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (subscriptionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter subscriptionId is required and cannot be null."));
        }
        if (locations == null) {
            return Mono.error(new IllegalArgumentException("Parameter locations is required and cannot be null."));
        }
        if (operationResultsId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter operationResultsId is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), this.client.getApiVersion(), subscriptionId, locations,
            operationResultsId, accept, context);
    }

    /**
     * Get operationResults for a Data Manager For Agriculture resource.
     * 
     * @param subscriptionId The ID of the target subscription. The value must be an UUID.
     * @param locations Location.
     * @param operationResultsId operationResultsId for a specific location.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AzureCoreFoundationsErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return operationResults for a Data Manager For Agriculture resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ArmAsyncOperationInner> getAsync(String subscriptionId, String locations, String operationResultsId) {
        return getWithResponseAsync(subscriptionId, locations, operationResultsId)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get operationResults for a Data Manager For Agriculture resource.
     * 
     * @param subscriptionId The ID of the target subscription. The value must be an UUID.
     * @param locations Location.
     * @param operationResultsId operationResultsId for a specific location.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AzureCoreFoundationsErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return operationResults for a Data Manager For Agriculture resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ArmAsyncOperationInner> getWithResponse(String subscriptionId, String locations,
        String operationResultsId, Context context) {
        return getWithResponseAsync(subscriptionId, locations, operationResultsId, context).block();
    }

    /**
     * Get operationResults for a Data Manager For Agriculture resource.
     * 
     * @param subscriptionId The ID of the target subscription. The value must be an UUID.
     * @param locations Location.
     * @param operationResultsId operationResultsId for a specific location.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AzureCoreFoundationsErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return operationResults for a Data Manager For Agriculture resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ArmAsyncOperationInner get(String subscriptionId, String locations, String operationResultsId) {
        return getWithResponse(subscriptionId, locations, operationResultsId, Context.NONE).getValue();
    }
}
