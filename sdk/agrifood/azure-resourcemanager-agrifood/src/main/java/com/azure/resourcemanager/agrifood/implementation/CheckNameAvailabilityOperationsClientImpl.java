// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.agrifood.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.agrifood.fluent.CheckNameAvailabilityOperationsClient;
import com.azure.resourcemanager.agrifood.fluent.models.CheckNameAvailabilityResponseInner;
import com.azure.resourcemanager.agrifood.models.AzureCoreFoundationsErrorException;
import com.azure.resourcemanager.agrifood.models.CheckNameAvailabilityRequest;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in CheckNameAvailabilityOperationsClient.
 */
public final class CheckNameAvailabilityOperationsClientImpl implements CheckNameAvailabilityOperationsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final CheckNameAvailabilityOperationsService service;

    /**
     * The service client containing this operation class.
     */
    private final AgriFoodManagementClientImpl client;

    /**
     * Initializes an instance of CheckNameAvailabilityOperationsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    CheckNameAvailabilityOperationsClientImpl(AgriFoodManagementClientImpl client) {
        this.service = RestProxy.create(CheckNameAvailabilityOperationsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AgriFoodManagementClientCheckNameAvailabilityOperations to be used
     * by the proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "AgriFoodManagementCl")
    public interface CheckNameAvailabilityOperationsService {
        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/providers/Microsoft.AgFoodPlatform/checkNameAvailability")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(AzureCoreFoundationsErrorException.class)
        Mono<Response<CheckNameAvailabilityResponseInner>> checkNameAvailability(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @BodyParam("application/json") CheckNameAvailabilityRequest nameAvailabilityRequest,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Checks the name availability of the resource with requested resource name.
     * 
     * @param subscriptionId The ID of the target subscription. The value must be an UUID.
     * @param nameAvailabilityRequest NameAvailabilityRequest object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AzureCoreFoundationsErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the check availability result along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<CheckNameAvailabilityResponseInner>> checkNameAvailabilityWithResponseAsync(
        String subscriptionId, CheckNameAvailabilityRequest nameAvailabilityRequest) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (subscriptionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter subscriptionId is required and cannot be null."));
        }
        if (nameAvailabilityRequest == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter nameAvailabilityRequest is required and cannot be null."));
        } else {
            nameAvailabilityRequest.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.checkNameAvailability(this.client.getEndpoint(),
                this.client.getApiVersion(), subscriptionId, nameAvailabilityRequest, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Checks the name availability of the resource with requested resource name.
     * 
     * @param subscriptionId The ID of the target subscription. The value must be an UUID.
     * @param nameAvailabilityRequest NameAvailabilityRequest object.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AzureCoreFoundationsErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the check availability result along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<CheckNameAvailabilityResponseInner>> checkNameAvailabilityWithResponseAsync(
        String subscriptionId, CheckNameAvailabilityRequest nameAvailabilityRequest, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (subscriptionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter subscriptionId is required and cannot be null."));
        }
        if (nameAvailabilityRequest == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter nameAvailabilityRequest is required and cannot be null."));
        } else {
            nameAvailabilityRequest.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.checkNameAvailability(this.client.getEndpoint(), this.client.getApiVersion(), subscriptionId,
            nameAvailabilityRequest, accept, context);
    }

    /**
     * Checks the name availability of the resource with requested resource name.
     * 
     * @param subscriptionId The ID of the target subscription. The value must be an UUID.
     * @param nameAvailabilityRequest NameAvailabilityRequest object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AzureCoreFoundationsErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the check availability result on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<CheckNameAvailabilityResponseInner> checkNameAvailabilityAsync(String subscriptionId,
        CheckNameAvailabilityRequest nameAvailabilityRequest) {
        return checkNameAvailabilityWithResponseAsync(subscriptionId, nameAvailabilityRequest)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Checks the name availability of the resource with requested resource name.
     * 
     * @param subscriptionId The ID of the target subscription. The value must be an UUID.
     * @param nameAvailabilityRequest NameAvailabilityRequest object.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AzureCoreFoundationsErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the check availability result along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<CheckNameAvailabilityResponseInner> checkNameAvailabilityWithResponse(String subscriptionId,
        CheckNameAvailabilityRequest nameAvailabilityRequest, Context context) {
        return checkNameAvailabilityWithResponseAsync(subscriptionId, nameAvailabilityRequest, context).block();
    }

    /**
     * Checks the name availability of the resource with requested resource name.
     * 
     * @param subscriptionId The ID of the target subscription. The value must be an UUID.
     * @param nameAvailabilityRequest NameAvailabilityRequest object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AzureCoreFoundationsErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the check availability result.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CheckNameAvailabilityResponseInner checkNameAvailability(String subscriptionId,
        CheckNameAvailabilityRequest nameAvailabilityRequest) {
        return checkNameAvailabilityWithResponse(subscriptionId, nameAvailabilityRequest, Context.NONE).getValue();
    }
}
