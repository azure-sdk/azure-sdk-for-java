// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.agrifood.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * ApiKeyAuthCredentials class for ApiKey based Auth.
 */
@Fluent
public final class ApiKeyAuthCredentials extends AuthCredentials {
    /*
     * Enum for different types of AuthCredentials supported.
     */
    private AuthCredentialsKind kind = AuthCredentialsKind.API_KEY_AUTH_CREDENTIALS;

    /*
     * Properties of the key vault.
     */
    private KeyVaultProperties apiKey;

    /**
     * Creates an instance of ApiKeyAuthCredentials class.
     */
    public ApiKeyAuthCredentials() {
    }

    /**
     * Get the kind property: Enum for different types of AuthCredentials supported.
     * 
     * @return the kind value.
     */
    @Override
    public AuthCredentialsKind kind() {
        return this.kind;
    }

    /**
     * Get the apiKey property: Properties of the key vault.
     * 
     * @return the apiKey value.
     */
    public KeyVaultProperties apiKey() {
        return this.apiKey;
    }

    /**
     * Set the apiKey property: Properties of the key vault.
     * 
     * @param apiKey the apiKey value to set.
     * @return the ApiKeyAuthCredentials object itself.
     */
    public ApiKeyAuthCredentials withApiKey(KeyVaultProperties apiKey) {
        this.apiKey = apiKey;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (apiKey() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property apiKey in model ApiKeyAuthCredentials"));
        } else {
            apiKey().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ApiKeyAuthCredentials.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("apiKey", this.apiKey);
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ApiKeyAuthCredentials from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ApiKeyAuthCredentials if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ApiKeyAuthCredentials.
     */
    public static ApiKeyAuthCredentials fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ApiKeyAuthCredentials deserializedApiKeyAuthCredentials = new ApiKeyAuthCredentials();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("apiKey".equals(fieldName)) {
                    deserializedApiKeyAuthCredentials.apiKey = KeyVaultProperties.fromJson(reader);
                } else if ("kind".equals(fieldName)) {
                    deserializedApiKeyAuthCredentials.kind = AuthCredentialsKind.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedApiKeyAuthCredentials;
        });
    }
}
