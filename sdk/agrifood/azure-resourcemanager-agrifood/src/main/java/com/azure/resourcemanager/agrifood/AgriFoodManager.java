// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.agrifood;

import com.azure.core.credential.TokenCredential;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.HttpPipelinePosition;
import com.azure.core.http.policy.AddDatePolicy;
import com.azure.core.http.policy.AddHeadersFromContextPolicy;
import com.azure.core.http.policy.HttpLogOptions;
import com.azure.core.http.policy.HttpLoggingPolicy;
import com.azure.core.http.policy.HttpPipelinePolicy;
import com.azure.core.http.policy.HttpPolicyProviders;
import com.azure.core.http.policy.RequestIdPolicy;
import com.azure.core.http.policy.RetryOptions;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.management.http.policy.ArmChallengeAuthenticationPolicy;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.util.Configuration;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.agrifood.fluent.AgriFoodManagementClient;
import com.azure.resourcemanager.agrifood.implementation.AgriFoodManagementClientBuilder;
import com.azure.resourcemanager.agrifood.implementation.AzureAgFoodPlatformRpServicePrivateEndpointConnectionsImpl;
import com.azure.resourcemanager.agrifood.implementation.AzureAgFoodPlatformRpServicePrivateLinkResourcesImpl;
import com.azure.resourcemanager.agrifood.implementation.CheckNameAvailabilityOperationsImpl;
import com.azure.resourcemanager.agrifood.implementation.DataConnectorsImpl;
import com.azure.resourcemanager.agrifood.implementation.DataManagerForAgricultureExtensionsImpl;
import com.azure.resourcemanager.agrifood.implementation.DataManagerForAgricultureSolutionsImpl;
import com.azure.resourcemanager.agrifood.implementation.DataManagerForAgriculturesImpl;
import com.azure.resourcemanager.agrifood.implementation.ExtensionsImpl;
import com.azure.resourcemanager.agrifood.implementation.OperationResultsOperationsImpl;
import com.azure.resourcemanager.agrifood.implementation.OperationsImpl;
import com.azure.resourcemanager.agrifood.implementation.SolutionsImpl;
import com.azure.resourcemanager.agrifood.models.AzureAgFoodPlatformRpServicePrivateEndpointConnections;
import com.azure.resourcemanager.agrifood.models.AzureAgFoodPlatformRpServicePrivateLinkResources;
import com.azure.resourcemanager.agrifood.models.CheckNameAvailabilityOperations;
import com.azure.resourcemanager.agrifood.models.DataConnectors;
import com.azure.resourcemanager.agrifood.models.DataManagerForAgricultureExtensions;
import com.azure.resourcemanager.agrifood.models.DataManagerForAgricultureSolutions;
import com.azure.resourcemanager.agrifood.models.DataManagerForAgricultures;
import com.azure.resourcemanager.agrifood.models.Extensions;
import com.azure.resourcemanager.agrifood.models.OperationResultsOperations;
import com.azure.resourcemanager.agrifood.models.Operations;
import com.azure.resourcemanager.agrifood.models.Solutions;
import java.time.Duration;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

/**
 * Entry point to AgriFoodManager.
 * APIs documentation for Microsoft Azure Data Manager for Agriculture Service.
 */
public final class AgriFoodManager {
    private DataManagerForAgricultureExtensions dataManagerForAgricultureExtensions;

    private DataManagerForAgricultureSolutions dataManagerForAgricultureSolutions;

    private Operations operations;

    private CheckNameAvailabilityOperations checkNameAvailabilityOperations;

    private DataManagerForAgricultures dataManagerForAgricultures;

    private OperationResultsOperations operationResultsOperations;

    private DataConnectors dataConnectors;

    private Extensions extensions;

    private AzureAgFoodPlatformRpServicePrivateEndpointConnections azureAgFoodPlatformRpServicePrivateEndpointConnections;

    private AzureAgFoodPlatformRpServicePrivateLinkResources azureAgFoodPlatformRpServicePrivateLinkResources;

    private Solutions solutions;

    private final AgriFoodManagementClient clientObject;

    private AgriFoodManager(HttpPipeline httpPipeline, AzureProfile profile, Duration defaultPollInterval) {
        Objects.requireNonNull(httpPipeline, "'httpPipeline' cannot be null.");
        Objects.requireNonNull(profile, "'profile' cannot be null.");
        this.clientObject = new AgriFoodManagementClientBuilder().pipeline(httpPipeline)
            .endpoint(profile.getEnvironment().getResourceManagerEndpoint()).subscriptionId(profile.getSubscriptionId())
            .defaultPollInterval(defaultPollInterval).buildClient();
    }

    /**
     * Creates an instance of AgriFood service API entry point.
     * 
     * @param credential the credential to use.
     * @param profile the Azure profile for client.
     * @return the AgriFood service API instance.
     */
    public static AgriFoodManager authenticate(TokenCredential credential, AzureProfile profile) {
        Objects.requireNonNull(credential, "'credential' cannot be null.");
        Objects.requireNonNull(profile, "'profile' cannot be null.");
        return configure().authenticate(credential, profile);
    }

    /**
     * Creates an instance of AgriFood service API entry point.
     * 
     * @param httpPipeline the {@link HttpPipeline} configured with Azure authentication credential.
     * @param profile the Azure profile for client.
     * @return the AgriFood service API instance.
     */
    public static AgriFoodManager authenticate(HttpPipeline httpPipeline, AzureProfile profile) {
        Objects.requireNonNull(httpPipeline, "'httpPipeline' cannot be null.");
        Objects.requireNonNull(profile, "'profile' cannot be null.");
        return new AgriFoodManager(httpPipeline, profile, null);
    }

    /**
     * Gets a Configurable instance that can be used to create AgriFoodManager with optional configuration.
     * 
     * @return the Configurable instance allowing configurations.
     */
    public static Configurable configure() {
        return new AgriFoodManager.Configurable();
    }

    /**
     * The Configurable allowing configurations to be set.
     */
    public static final class Configurable {
        private static final ClientLogger LOGGER = new ClientLogger(Configurable.class);

        private HttpClient httpClient;
        private HttpLogOptions httpLogOptions;
        private final List<HttpPipelinePolicy> policies = new ArrayList<>();
        private final List<String> scopes = new ArrayList<>();
        private RetryPolicy retryPolicy;
        private RetryOptions retryOptions;
        private Duration defaultPollInterval;

        private Configurable() {
        }

        /**
         * Sets the http client.
         *
         * @param httpClient the HTTP client.
         * @return the configurable object itself.
         */
        public Configurable withHttpClient(HttpClient httpClient) {
            this.httpClient = Objects.requireNonNull(httpClient, "'httpClient' cannot be null.");
            return this;
        }

        /**
         * Sets the logging options to the HTTP pipeline.
         *
         * @param httpLogOptions the HTTP log options.
         * @return the configurable object itself.
         */
        public Configurable withLogOptions(HttpLogOptions httpLogOptions) {
            this.httpLogOptions = Objects.requireNonNull(httpLogOptions, "'httpLogOptions' cannot be null.");
            return this;
        }

        /**
         * Adds the pipeline policy to the HTTP pipeline.
         *
         * @param policy the HTTP pipeline policy.
         * @return the configurable object itself.
         */
        public Configurable withPolicy(HttpPipelinePolicy policy) {
            this.policies.add(Objects.requireNonNull(policy, "'policy' cannot be null."));
            return this;
        }

        /**
         * Adds the scope to permission sets.
         *
         * @param scope the scope.
         * @return the configurable object itself.
         */
        public Configurable withScope(String scope) {
            this.scopes.add(Objects.requireNonNull(scope, "'scope' cannot be null."));
            return this;
        }

        /**
         * Sets the retry policy to the HTTP pipeline.
         *
         * @param retryPolicy the HTTP pipeline retry policy.
         * @return the configurable object itself.
         */
        public Configurable withRetryPolicy(RetryPolicy retryPolicy) {
            this.retryPolicy = Objects.requireNonNull(retryPolicy, "'retryPolicy' cannot be null.");
            return this;
        }

        /**
         * Sets the retry options for the HTTP pipeline retry policy.
         * <p>
         * This setting has no effect, if retry policy is set via {@link #withRetryPolicy(RetryPolicy)}.
         *
         * @param retryOptions the retry options for the HTTP pipeline retry policy.
         * @return the configurable object itself.
         */
        public Configurable withRetryOptions(RetryOptions retryOptions) {
            this.retryOptions = Objects.requireNonNull(retryOptions, "'retryOptions' cannot be null.");
            return this;
        }

        /**
         * Sets the default poll interval, used when service does not provide "Retry-After" header.
         *
         * @param defaultPollInterval the default poll interval.
         * @return the configurable object itself.
         */
        public Configurable withDefaultPollInterval(Duration defaultPollInterval) {
            this.defaultPollInterval
                = Objects.requireNonNull(defaultPollInterval, "'defaultPollInterval' cannot be null.");
            if (this.defaultPollInterval.isNegative()) {
                throw LOGGER
                    .logExceptionAsError(new IllegalArgumentException("'defaultPollInterval' cannot be negative"));
            }
            return this;
        }

        /**
         * Creates an instance of AgriFood service API entry point.
         *
         * @param credential the credential to use.
         * @param profile the Azure profile for client.
         * @return the AgriFood service API instance.
         */
        public AgriFoodManager authenticate(TokenCredential credential, AzureProfile profile) {
            Objects.requireNonNull(credential, "'credential' cannot be null.");
            Objects.requireNonNull(profile, "'profile' cannot be null.");

            StringBuilder userAgentBuilder = new StringBuilder();
            userAgentBuilder.append("azsdk-java").append("-").append("com.azure.resourcemanager.agrifood").append("/")
                .append("1.0.0-beta.1");
            if (!Configuration.getGlobalConfiguration().get("AZURE_TELEMETRY_DISABLED", false)) {
                userAgentBuilder.append(" (").append(Configuration.getGlobalConfiguration().get("java.version"))
                    .append("; ").append(Configuration.getGlobalConfiguration().get("os.name")).append("; ")
                    .append(Configuration.getGlobalConfiguration().get("os.version")).append("; auto-generated)");
            } else {
                userAgentBuilder.append(" (auto-generated)");
            }

            if (scopes.isEmpty()) {
                scopes.add(profile.getEnvironment().getManagementEndpoint() + "/.default");
            }
            if (retryPolicy == null) {
                if (retryOptions != null) {
                    retryPolicy = new RetryPolicy(retryOptions);
                } else {
                    retryPolicy = new RetryPolicy("Retry-After", ChronoUnit.SECONDS);
                }
            }
            List<HttpPipelinePolicy> policies = new ArrayList<>();
            policies.add(new UserAgentPolicy(userAgentBuilder.toString()));
            policies.add(new AddHeadersFromContextPolicy());
            policies.add(new RequestIdPolicy());
            policies.addAll(this.policies.stream().filter(p -> p.getPipelinePosition() == HttpPipelinePosition.PER_CALL)
                .collect(Collectors.toList()));
            HttpPolicyProviders.addBeforeRetryPolicies(policies);
            policies.add(retryPolicy);
            policies.add(new AddDatePolicy());
            policies.add(new ArmChallengeAuthenticationPolicy(credential, scopes.toArray(new String[0])));
            policies.addAll(this.policies.stream()
                .filter(p -> p.getPipelinePosition() == HttpPipelinePosition.PER_RETRY).collect(Collectors.toList()));
            HttpPolicyProviders.addAfterRetryPolicies(policies);
            policies.add(new HttpLoggingPolicy(httpLogOptions));
            HttpPipeline httpPipeline = new HttpPipelineBuilder().httpClient(httpClient)
                .policies(policies.toArray(new HttpPipelinePolicy[0])).build();
            return new AgriFoodManager(httpPipeline, profile, defaultPollInterval);
        }
    }

    /**
     * Gets the resource collection API of DataManagerForAgricultureExtensions.
     * 
     * @return Resource collection API of DataManagerForAgricultureExtensions.
     */
    public DataManagerForAgricultureExtensions dataManagerForAgricultureExtensions() {
        if (this.dataManagerForAgricultureExtensions == null) {
            this.dataManagerForAgricultureExtensions = new DataManagerForAgricultureExtensionsImpl(
                clientObject.getDataManagerForAgricultureExtensions(), this);
        }
        return dataManagerForAgricultureExtensions;
    }

    /**
     * Gets the resource collection API of DataManagerForAgricultureSolutions.
     * 
     * @return Resource collection API of DataManagerForAgricultureSolutions.
     */
    public DataManagerForAgricultureSolutions dataManagerForAgricultureSolutions() {
        if (this.dataManagerForAgricultureSolutions == null) {
            this.dataManagerForAgricultureSolutions = new DataManagerForAgricultureSolutionsImpl(
                clientObject.getDataManagerForAgricultureSolutions(), this);
        }
        return dataManagerForAgricultureSolutions;
    }

    /**
     * Gets the resource collection API of Operations.
     * 
     * @return Resource collection API of Operations.
     */
    public Operations operations() {
        if (this.operations == null) {
            this.operations = new OperationsImpl(clientObject.getOperations(), this);
        }
        return operations;
    }

    /**
     * Gets the resource collection API of CheckNameAvailabilityOperations.
     * 
     * @return Resource collection API of CheckNameAvailabilityOperations.
     */
    public CheckNameAvailabilityOperations checkNameAvailabilityOperations() {
        if (this.checkNameAvailabilityOperations == null) {
            this.checkNameAvailabilityOperations
                = new CheckNameAvailabilityOperationsImpl(clientObject.getCheckNameAvailabilityOperations(), this);
        }
        return checkNameAvailabilityOperations;
    }

    /**
     * Gets the resource collection API of DataManagerForAgricultures. It manages DataManagerForAgriculture.
     * 
     * @return Resource collection API of DataManagerForAgricultures.
     */
    public DataManagerForAgricultures dataManagerForAgricultures() {
        if (this.dataManagerForAgricultures == null) {
            this.dataManagerForAgricultures
                = new DataManagerForAgriculturesImpl(clientObject.getDataManagerForAgricultures(), this);
        }
        return dataManagerForAgricultures;
    }

    /**
     * Gets the resource collection API of OperationResultsOperations.
     * 
     * @return Resource collection API of OperationResultsOperations.
     */
    public OperationResultsOperations operationResultsOperations() {
        if (this.operationResultsOperations == null) {
            this.operationResultsOperations
                = new OperationResultsOperationsImpl(clientObject.getOperationResultsOperations(), this);
        }
        return operationResultsOperations;
    }

    /**
     * Gets the resource collection API of DataConnectors. It manages DataConnector.
     * 
     * @return Resource collection API of DataConnectors.
     */
    public DataConnectors dataConnectors() {
        if (this.dataConnectors == null) {
            this.dataConnectors = new DataConnectorsImpl(clientObject.getDataConnectors(), this);
        }
        return dataConnectors;
    }

    /**
     * Gets the resource collection API of Extensions. It manages Extension.
     * 
     * @return Resource collection API of Extensions.
     */
    public Extensions extensions() {
        if (this.extensions == null) {
            this.extensions = new ExtensionsImpl(clientObject.getExtensions(), this);
        }
        return extensions;
    }

    /**
     * Gets the resource collection API of AzureAgFoodPlatformRpServicePrivateEndpointConnections. It manages
     * AzureAgFoodPlatformRPServicePrivateEndpointConnection.
     * 
     * @return Resource collection API of AzureAgFoodPlatformRpServicePrivateEndpointConnections.
     */
    public AzureAgFoodPlatformRpServicePrivateEndpointConnections
        azureAgFoodPlatformRpServicePrivateEndpointConnections() {
        if (this.azureAgFoodPlatformRpServicePrivateEndpointConnections == null) {
            this.azureAgFoodPlatformRpServicePrivateEndpointConnections
                = new AzureAgFoodPlatformRpServicePrivateEndpointConnectionsImpl(
                    clientObject.getAzureAgFoodPlatformRpServicePrivateEndpointConnections(), this);
        }
        return azureAgFoodPlatformRpServicePrivateEndpointConnections;
    }

    /**
     * Gets the resource collection API of AzureAgFoodPlatformRpServicePrivateLinkResources.
     * 
     * @return Resource collection API of AzureAgFoodPlatformRpServicePrivateLinkResources.
     */
    public AzureAgFoodPlatformRpServicePrivateLinkResources azureAgFoodPlatformRpServicePrivateLinkResources() {
        if (this.azureAgFoodPlatformRpServicePrivateLinkResources == null) {
            this.azureAgFoodPlatformRpServicePrivateLinkResources
                = new AzureAgFoodPlatformRpServicePrivateLinkResourcesImpl(
                    clientObject.getAzureAgFoodPlatformRpServicePrivateLinkResources(), this);
        }
        return azureAgFoodPlatformRpServicePrivateLinkResources;
    }

    /**
     * Gets the resource collection API of Solutions. It manages Solution.
     * 
     * @return Resource collection API of Solutions.
     */
    public Solutions solutions() {
        if (this.solutions == null) {
            this.solutions = new SolutionsImpl(clientObject.getSolutions(), this);
        }
        return solutions;
    }

    /**
     * Gets wrapped service client AgriFoodManagementClient providing direct access to the underlying auto-generated API
     * implementation, based on Azure REST API.
     * 
     * @return Wrapped service client AgriFoodManagementClient.
     */
    public AgriFoodManagementClient serviceClient() {
        return this.clientObject;
    }
}
