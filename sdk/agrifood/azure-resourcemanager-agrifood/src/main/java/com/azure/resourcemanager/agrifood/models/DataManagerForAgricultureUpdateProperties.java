// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.agrifood.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Data Manager For Agriculture ARM Resource properties.
 */
@Fluent
public final class DataManagerForAgricultureUpdateProperties
    implements JsonSerializable<DataManagerForAgricultureUpdateProperties> {
    /*
     * Sensor integration request model.
     */
    private SensorIntegration sensorIntegration;

    /*
     * Property to allow or block public traffic for an Azure Data Manager For Agriculture resource.
     */
    private PublicNetworkAccess publicNetworkAccess;

    /**
     * Creates an instance of DataManagerForAgricultureUpdateProperties class.
     */
    public DataManagerForAgricultureUpdateProperties() {
    }

    /**
     * Get the sensorIntegration property: Sensor integration request model.
     * 
     * @return the sensorIntegration value.
     */
    public SensorIntegration sensorIntegration() {
        return this.sensorIntegration;
    }

    /**
     * Set the sensorIntegration property: Sensor integration request model.
     * 
     * @param sensorIntegration the sensorIntegration value to set.
     * @return the DataManagerForAgricultureUpdateProperties object itself.
     */
    public DataManagerForAgricultureUpdateProperties withSensorIntegration(SensorIntegration sensorIntegration) {
        this.sensorIntegration = sensorIntegration;
        return this;
    }

    /**
     * Get the publicNetworkAccess property: Property to allow or block public traffic for an Azure Data Manager For
     * Agriculture resource.
     * 
     * @return the publicNetworkAccess value.
     */
    public PublicNetworkAccess publicNetworkAccess() {
        return this.publicNetworkAccess;
    }

    /**
     * Set the publicNetworkAccess property: Property to allow or block public traffic for an Azure Data Manager For
     * Agriculture resource.
     * 
     * @param publicNetworkAccess the publicNetworkAccess value to set.
     * @return the DataManagerForAgricultureUpdateProperties object itself.
     */
    public DataManagerForAgricultureUpdateProperties withPublicNetworkAccess(PublicNetworkAccess publicNetworkAccess) {
        this.publicNetworkAccess = publicNetworkAccess;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (sensorIntegration() != null) {
            sensorIntegration().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("sensorIntegration", this.sensorIntegration);
        jsonWriter.writeStringField("publicNetworkAccess",
            this.publicNetworkAccess == null ? null : this.publicNetworkAccess.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DataManagerForAgricultureUpdateProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DataManagerForAgricultureUpdateProperties if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DataManagerForAgricultureUpdateProperties.
     */
    public static DataManagerForAgricultureUpdateProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DataManagerForAgricultureUpdateProperties deserializedDataManagerForAgricultureUpdateProperties
                = new DataManagerForAgricultureUpdateProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sensorIntegration".equals(fieldName)) {
                    deserializedDataManagerForAgricultureUpdateProperties.sensorIntegration
                        = SensorIntegration.fromJson(reader);
                } else if ("publicNetworkAccess".equals(fieldName)) {
                    deserializedDataManagerForAgricultureUpdateProperties.publicNetworkAccess
                        = PublicNetworkAccess.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDataManagerForAgricultureUpdateProperties;
        });
    }
}
