// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mcpp.models;

import com.azure.core.annotation.Immutable;
import com.fasterxml.jackson.annotation.JsonProperty;

/** MCPP Purchase details response properties. */
@Immutable
public final class MembershipDetailsResponseProperties {
    /*
     * order number for the purchase
     */
    @JsonProperty(value = "orderId", access = JsonProperty.Access.WRITE_ONLY)
    private String orderId;

    /*
     * date time at which the order was placed
     */
    @JsonProperty(value = "orderDateTime", access = JsonProperty.Access.WRITE_ONLY)
    private String orderDateTime;

    /*
     * purchase status or the order
     */
    @JsonProperty(value = "status", access = JsonProperty.Access.WRITE_ONLY)
    private String status;

    /*
     * operation details related to the purchase
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private Object provisioningState;

    /** Creates an instance of MembershipDetailsResponseProperties class. */
    public MembershipDetailsResponseProperties() {
    }

    /**
     * Get the orderId property: order number for the purchase.
     *
     * @return the orderId value.
     */
    public String orderId() {
        return this.orderId;
    }

    /**
     * Get the orderDateTime property: date time at which the order was placed.
     *
     * @return the orderDateTime value.
     */
    public String orderDateTime() {
        return this.orderDateTime;
    }

    /**
     * Get the status property: purchase status or the order.
     *
     * @return the status value.
     */
    public String status() {
        return this.status;
    }

    /**
     * Get the provisioningState property: operation details related to the purchase.
     *
     * @return the provisioningState value.
     */
    public Object provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
