// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mcpp.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.mcpp.fluent.models.MembershipDetailsResponseInner;
import com.azure.resourcemanager.mcpp.models.ProductCode;

/** An instance of this class provides access to all the operations defined in MembershipsClient. */
public interface MembershipsClient {
    /**
     * The operation to fetch purchase details of a CloudPartnerProgramMembership offer.
     *
     * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g.
     *     00000000-0000-0000-0000-000000000000).
     * @param resourceGroupName The name of the resource group.
     * @param resourceName The name of the resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return mCPP Purchase details response along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<MembershipDetailsResponseInner> getByResourceGroupWithResponse(
        String subscriptionId, String resourceGroupName, String resourceName, Context context);

    /**
     * The operation to fetch purchase details of a CloudPartnerProgramMembership offer.
     *
     * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g.
     *     00000000-0000-0000-0000-000000000000).
     * @param resourceGroupName The name of the resource group.
     * @param resourceName The name of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return mCPP Purchase details response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    MembershipDetailsResponseInner getByResourceGroup(
        String subscriptionId, String resourceGroupName, String resourceName);

    /**
     * Create a CloudPartnerProgramMembership purchase.
     *
     * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g.
     *     00000000-0000-0000-0000-000000000000).
     * @param resourceGroupName The name of the resource group.
     * @param resourceName The name of the resource.
     * @param body The product upn that needs to be purchased.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return mCPP Purchase details response along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<MembershipDetailsResponseInner> createPurchaseWithResponse(
        String subscriptionId, String resourceGroupName, String resourceName, ProductCode body, Context context);

    /**
     * Create a CloudPartnerProgramMembership purchase.
     *
     * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g.
     *     00000000-0000-0000-0000-000000000000).
     * @param resourceGroupName The name of the resource group.
     * @param resourceName The name of the resource.
     * @param body The product upn that needs to be purchased.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return mCPP Purchase details response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    MembershipDetailsResponseInner createPurchase(
        String subscriptionId, String resourceGroupName, String resourceName, ProductCode body);

    /**
     * The operation to cancel a CloudPartnerProgramMembership offer.
     *
     * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g.
     *     00000000-0000-0000-0000-000000000000).
     * @param resourceGroupName The name of the resource group.
     * @param resourceName The name of the resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> deleteWithResponse(
        String subscriptionId, String resourceGroupName, String resourceName, Context context);

    /**
     * The operation to cancel a CloudPartnerProgramMembership offer.
     *
     * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g.
     *     00000000-0000-0000-0000-000000000000).
     * @param resourceGroupName The name of the resource group.
     * @param resourceName The name of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String subscriptionId, String resourceGroupName, String resourceName);
}
