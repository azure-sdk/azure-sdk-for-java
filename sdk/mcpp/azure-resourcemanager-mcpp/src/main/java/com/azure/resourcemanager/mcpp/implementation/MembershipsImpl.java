// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mcpp.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.mcpp.fluent.MembershipsClient;
import com.azure.resourcemanager.mcpp.fluent.models.MembershipDetailsResponseInner;
import com.azure.resourcemanager.mcpp.models.MembershipDetailsResponse;
import com.azure.resourcemanager.mcpp.models.Memberships;

public final class MembershipsImpl implements Memberships {
    private static final ClientLogger LOGGER = new ClientLogger(MembershipsImpl.class);

    private final MembershipsClient innerClient;

    private final com.azure.resourcemanager.mcpp.McppManager serviceManager;

    public MembershipsImpl(MembershipsClient innerClient, com.azure.resourcemanager.mcpp.McppManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<MembershipDetailsResponse> getByResourceGroupWithResponse(
        String subscriptionId, String resourceGroupName, String resourceName, Context context) {
        Response<MembershipDetailsResponseInner> inner =
            this
                .serviceClient()
                .getByResourceGroupWithResponse(subscriptionId, resourceGroupName, resourceName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new MembershipDetailsResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public MembershipDetailsResponse getByResourceGroup(
        String subscriptionId, String resourceGroupName, String resourceName) {
        MembershipDetailsResponseInner inner =
            this.serviceClient().getByResourceGroup(subscriptionId, resourceGroupName, resourceName);
        if (inner != null) {
            return new MembershipDetailsResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteWithResponse(
        String subscriptionId, String resourceGroupName, String resourceName, Context context) {
        return this.serviceClient().deleteWithResponse(subscriptionId, resourceGroupName, resourceName, context);
    }

    public void delete(String subscriptionId, String resourceGroupName, String resourceName) {
        this.serviceClient().delete(subscriptionId, resourceGroupName, resourceName);
    }

    public MembershipDetailsResponse getById(String id) {
        String subscriptionId = Utils.getValueFromIdByName(id, "subscriptions");
        if (subscriptionId == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'subscriptions'.", id)));
        }
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String resourceName = Utils.getValueFromIdByName(id, "membership");
        if (resourceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'membership'.", id)));
        }
        return this
            .getByResourceGroupWithResponse(subscriptionId, resourceGroupName, resourceName, Context.NONE)
            .getValue();
    }

    public Response<MembershipDetailsResponse> getByIdWithResponse(String id, Context context) {
        String subscriptionId = Utils.getValueFromIdByName(id, "subscriptions");
        if (subscriptionId == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'subscriptions'.", id)));
        }
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String resourceName = Utils.getValueFromIdByName(id, "membership");
        if (resourceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'membership'.", id)));
        }
        return this.getByResourceGroupWithResponse(subscriptionId, resourceGroupName, resourceName, context);
    }

    public void deleteById(String id) {
        String subscriptionId = Utils.getValueFromIdByName(id, "subscriptions");
        if (subscriptionId == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'subscriptions'.", id)));
        }
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String resourceName = Utils.getValueFromIdByName(id, "membership");
        if (resourceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'membership'.", id)));
        }
        this.deleteWithResponse(subscriptionId, resourceGroupName, resourceName, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String subscriptionId = Utils.getValueFromIdByName(id, "subscriptions");
        if (subscriptionId == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'subscriptions'.", id)));
        }
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String resourceName = Utils.getValueFromIdByName(id, "membership");
        if (resourceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'membership'.", id)));
        }
        return this.deleteWithResponse(subscriptionId, resourceGroupName, resourceName, context);
    }

    private MembershipsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.mcpp.McppManager manager() {
        return this.serviceManager;
    }

    public MembershipDetailsResponseImpl define(String name) {
        return new MembershipDetailsResponseImpl(name, this.manager());
    }
}
