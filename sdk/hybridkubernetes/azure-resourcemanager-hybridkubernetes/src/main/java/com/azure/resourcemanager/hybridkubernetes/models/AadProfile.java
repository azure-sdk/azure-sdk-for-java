// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.hybridkubernetes.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * AAD Profile specifies attributes for Azure Active Directory integration.
 */
@Fluent
public final class AadProfile implements JsonSerializable<AadProfile> {
    /*
     * Whether to enable Azure RBAC for Kubernetes authorization.
     */
    private Boolean enableAzureRBAC;

    /*
     * The list of AAD group object IDs that will have admin role of the cluster.
     */
    private List<String> adminGroupObjectIDs;

    /*
     * The AAD tenant ID to use for authentication. If not specified, will use the tenant of the deployment
     * subscription.
     */
    private String tenantID;

    /**
     * Creates an instance of AadProfile class.
     */
    public AadProfile() {
    }

    /**
     * Get the enableAzureRBAC property: Whether to enable Azure RBAC for Kubernetes authorization.
     * 
     * @return the enableAzureRBAC value.
     */
    public Boolean enableAzureRBAC() {
        return this.enableAzureRBAC;
    }

    /**
     * Set the enableAzureRBAC property: Whether to enable Azure RBAC for Kubernetes authorization.
     * 
     * @param enableAzureRBAC the enableAzureRBAC value to set.
     * @return the AadProfile object itself.
     */
    public AadProfile withEnableAzureRBAC(Boolean enableAzureRBAC) {
        this.enableAzureRBAC = enableAzureRBAC;
        return this;
    }

    /**
     * Get the adminGroupObjectIDs property: The list of AAD group object IDs that will have admin role of the cluster.
     * 
     * @return the adminGroupObjectIDs value.
     */
    public List<String> adminGroupObjectIDs() {
        return this.adminGroupObjectIDs;
    }

    /**
     * Set the adminGroupObjectIDs property: The list of AAD group object IDs that will have admin role of the cluster.
     * 
     * @param adminGroupObjectIDs the adminGroupObjectIDs value to set.
     * @return the AadProfile object itself.
     */
    public AadProfile withAdminGroupObjectIDs(List<String> adminGroupObjectIDs) {
        this.adminGroupObjectIDs = adminGroupObjectIDs;
        return this;
    }

    /**
     * Get the tenantID property: The AAD tenant ID to use for authentication. If not specified, will use the tenant of
     * the deployment subscription.
     * 
     * @return the tenantID value.
     */
    public String tenantID() {
        return this.tenantID;
    }

    /**
     * Set the tenantID property: The AAD tenant ID to use for authentication. If not specified, will use the tenant of
     * the deployment subscription.
     * 
     * @param tenantID the tenantID value to set.
     * @return the AadProfile object itself.
     */
    public AadProfile withTenantID(String tenantID) {
        this.tenantID = tenantID;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("enableAzureRBAC", this.enableAzureRBAC);
        jsonWriter.writeArrayField("adminGroupObjectIDs", this.adminGroupObjectIDs,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("tenantID", this.tenantID);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AadProfile from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AadProfile if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the AadProfile.
     */
    public static AadProfile fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AadProfile deserializedAadProfile = new AadProfile();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("enableAzureRBAC".equals(fieldName)) {
                    deserializedAadProfile.enableAzureRBAC = reader.getNullable(JsonReader::getBoolean);
                } else if ("adminGroupObjectIDs".equals(fieldName)) {
                    List<String> adminGroupObjectIDs = reader.readArray(reader1 -> reader1.getString());
                    deserializedAadProfile.adminGroupObjectIDs = adminGroupObjectIDs;
                } else if ("tenantID".equals(fieldName)) {
                    deserializedAadProfile.tenantID = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAadProfile;
        });
    }
}
