// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridkubernetes.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * Defines the Arc Agent properties for the clusters.
 */
@Fluent
public final class ArcAgentProfile {
    /*
     * Version of the Arc agents to be installed on the cluster resource
     */
    @JsonProperty(value = "desiredAgentVersion")
    private String desiredAgentVersion;

    /*
     * Indicates whether the Arc agents on the be upgraded automatically to the latest version. Defaults to Enabled.
     */
    @JsonProperty(value = "agentAutoUpgrade")
    private AutoUpgradeOptions agentAutoUpgrade;

    /*
     * List of system extensions can be installed on the cluster resource.
     */
    @JsonProperty(value = "systemComponents")
    private List<SystemComponent> systemComponents;

    /*
     * List of system extensions can be installed on the cluster resource.
     */
    @JsonProperty(value = "agentErrors")
    private List<AgentError> agentErrors;

    /**
     * Creates an instance of ArcAgentProfile class.
     */
    public ArcAgentProfile() {
    }

    /**
     * Get the desiredAgentVersion property: Version of the Arc agents to be installed on the cluster resource.
     * 
     * @return the desiredAgentVersion value.
     */
    public String desiredAgentVersion() {
        return this.desiredAgentVersion;
    }

    /**
     * Set the desiredAgentVersion property: Version of the Arc agents to be installed on the cluster resource.
     * 
     * @param desiredAgentVersion the desiredAgentVersion value to set.
     * @return the ArcAgentProfile object itself.
     */
    public ArcAgentProfile withDesiredAgentVersion(String desiredAgentVersion) {
        this.desiredAgentVersion = desiredAgentVersion;
        return this;
    }

    /**
     * Get the agentAutoUpgrade property: Indicates whether the Arc agents on the be upgraded automatically to the
     * latest version. Defaults to Enabled.
     * 
     * @return the agentAutoUpgrade value.
     */
    public AutoUpgradeOptions agentAutoUpgrade() {
        return this.agentAutoUpgrade;
    }

    /**
     * Set the agentAutoUpgrade property: Indicates whether the Arc agents on the be upgraded automatically to the
     * latest version. Defaults to Enabled.
     * 
     * @param agentAutoUpgrade the agentAutoUpgrade value to set.
     * @return the ArcAgentProfile object itself.
     */
    public ArcAgentProfile withAgentAutoUpgrade(AutoUpgradeOptions agentAutoUpgrade) {
        this.agentAutoUpgrade = agentAutoUpgrade;
        return this;
    }

    /**
     * Get the systemComponents property: List of system extensions can be installed on the cluster resource.
     * 
     * @return the systemComponents value.
     */
    public List<SystemComponent> systemComponents() {
        return this.systemComponents;
    }

    /**
     * Set the systemComponents property: List of system extensions can be installed on the cluster resource.
     * 
     * @param systemComponents the systemComponents value to set.
     * @return the ArcAgentProfile object itself.
     */
    public ArcAgentProfile withSystemComponents(List<SystemComponent> systemComponents) {
        this.systemComponents = systemComponents;
        return this;
    }

    /**
     * Get the agentErrors property: List of system extensions can be installed on the cluster resource.
     * 
     * @return the agentErrors value.
     */
    public List<AgentError> agentErrors() {
        return this.agentErrors;
    }

    /**
     * Set the agentErrors property: List of system extensions can be installed on the cluster resource.
     * 
     * @param agentErrors the agentErrors value to set.
     * @return the ArcAgentProfile object itself.
     */
    public ArcAgentProfile withAgentErrors(List<AgentError> agentErrors) {
        this.agentErrors = agentErrors;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (systemComponents() != null) {
            systemComponents().forEach(e -> e.validate());
        }
        if (agentErrors() != null) {
            agentErrors().forEach(e -> e.validate());
        }
    }
}
