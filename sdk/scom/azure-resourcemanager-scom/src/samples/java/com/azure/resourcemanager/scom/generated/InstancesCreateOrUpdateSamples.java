// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.scom.generated;

import com.azure.resourcemanager.scom.fluent.models.MonitoringInstancePropertiesInner;
import com.azure.resourcemanager.scom.models.AzureHybridBenefitProperties;
import com.azure.resourcemanager.scom.models.DatabaseInstanceProperties;
import com.azure.resourcemanager.scom.models.DomainControllerProperties;
import com.azure.resourcemanager.scom.models.DomainUserCredentials;
import com.azure.resourcemanager.scom.models.GmsaDetails;
import com.azure.resourcemanager.scom.models.HybridLicenseType;
import com.azure.resourcemanager.scom.models.ManagedIdentity;
import com.azure.resourcemanager.scom.models.ManagedIdentityType;
import com.azure.resourcemanager.scom.models.UserIdentity;
import java.util.HashMap;
import java.util.Map;

/** Samples for Instances CreateOrUpdate. */
public final class InstancesCreateOrUpdateSamples {
    /*
     * x-ms-original-file: specification/scom/resource-manager/Microsoft.Scom/preview/2023-07-07-preview/examples/Instance_Create.json
     */
    /**
     * Sample code: Instances_CreateOrUpdate.
     *
     * @param manager Entry point to ScomManager.
     */
    public static void instancesCreateOrUpdate(com.azure.resourcemanager.scom.ScomManager manager) {
        manager
            .instances()
            .define("myInstace")
            .withRegion("eastus2")
            .withExistingResourceGroup("myResGroup")
            .withTags(mapOf())
            .withProperties(
                new MonitoringInstancePropertiesInner()
                    .withVNetSubnetId(
                        "/subscriptions/{subscription-id}/resourceGroups/mySCOMMIGroup/providers/Microsoft.Network/virtualNetworks/vNet2/subnets/default")
                    .withDatabaseInstance(
                        new DatabaseInstanceProperties()
                            .withDatabaseInstanceId(
                                "/subscriptions/{subscription-id}/resourceGroups/mySCOMMIGroup/providers/Microsoft.sql/managedInstances/inst1"))
                    .withDomainController(
                        new DomainControllerProperties().withDomainName("domain.com").withDnsServer("10.10.10.10"))
                    .withDomainUserCredentials(
                        new DomainUserCredentials()
                            .withKeyVaultUrl("fakeTokenPlaceholder")
                            .withUsernameSecret("fakeTokenPlaceholder")
                            .withPasswordSecret("fakeTokenPlaceholder"))
                    .withGmsaDetails(
                        new GmsaDetails()
                            .withLoadBalancerIp("10.10.10.10")
                            .withGmsaAccount("vmsslb2$")
                            .withManagementServerGroupName("servergroup")
                            .withDnsName("dnsname.com"))
                    .withAzureHybridBenefit(
                        new AzureHybridBenefitProperties()
                            .withScomLicenseType(HybridLicenseType.NONE)
                            .withWindowsServerLicenseType(HybridLicenseType.NONE)
                            .withSqlServerLicenseType(HybridLicenseType.NONE)))
            .withIdentity(
                new ManagedIdentity()
                    .withType(ManagedIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED)
                    .withUserAssignedIdentities(
                        mapOf(
                            "/subscriptions/subid/resourceGroups/mySCOMMIGroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/id1",
                            new UserIdentity())))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
