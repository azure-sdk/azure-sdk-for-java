// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.scom.generated;

import com.azure.resourcemanager.scom.models.AzureHybridBenefitProperties;
import com.azure.resourcemanager.scom.models.DatabaseInstanceProperties;
import com.azure.resourcemanager.scom.models.DomainControllerProperties;
import com.azure.resourcemanager.scom.models.DomainUserCredentials;
import com.azure.resourcemanager.scom.models.GmsaDetails;
import com.azure.resourcemanager.scom.models.HybridLicenseType;
import com.azure.resourcemanager.scom.models.ManagedIdentity;
import com.azure.resourcemanager.scom.models.ManagedIdentityType;
import com.azure.resourcemanager.scom.models.UserIdentity;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for Instances CreateOrUpdate.
 */
public final class InstancesCreateOrUpdateSamples {
    /*
     * x-ms-original-file:
     * specification/scom/resource-manager/Microsoft.Scom/preview/2023-07-07-preview/examples/Instances_CreateOrUpdate.
     * json
     */
    /**
     * Sample code: Instances_CreateOrUpdate.
     * 
     * @param manager Entry point to ScomManager.
     */
    public static void instancesCreateOrUpdate(com.azure.resourcemanager.scom.ScomManager manager) {
        manager.instances().define("KQG").withRegion("gkcpcazsemjuavnjvrjqmcx").withExistingResourceGroup("rgscom")
            .withTags(mapOf("key7410", "fakeTokenPlaceholder"))
            .withIdentity(new ManagedIdentity()
                .withType(ManagedIdentityType.NONE).withUserAssignedIdentities(mapOf("key5209", new UserIdentity())))
            .withVNetSubnetId("al")
            .withDatabaseInstance(
                new DatabaseInstanceProperties().withDatabaseInstanceId("wnvkwgtulshhlyhteeroxsyrhzuu"))
            .withDomainController(new DomainControllerProperties().withDomainName("hugwplcckpexxrxpjfszgxtfgmd")
                .withDnsServer("qqvqkjdkfsorflwdynmjqzjhzwv").withOuPath("rbjycohibwfdbnf"))
            .withDomainUserCredentials(new DomainUserCredentials().withKeyVaultUrl("fakeTokenPlaceholder")
                .withUsernameSecret("fakeTokenPlaceholder").withPasswordSecret("fakeTokenPlaceholder"))
            .withGmsaDetails(
                new GmsaDetails().withLoadBalancerIp("nxuqwgeslerdd").withGmsaAccount("ljgdladzlipiwdnoukvpxqvkvprl")
                    .withManagementServerGroupName("up").withDnsName("qypfuijxvchajkeyjcrkr"))
            .withAzureHybridBenefit(new AzureHybridBenefitProperties().withScomLicenseType(HybridLicenseType.NONE)
                .withWindowsServerLicenseType(HybridLicenseType.NONE).withSqlServerLicenseType(HybridLicenseType.NONE))
            .withValidationMode(true).create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
