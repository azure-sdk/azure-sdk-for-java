// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.scom.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.scom.fluent.OffboardsClient;
import com.azure.resourcemanager.scom.fluent.models.CommonResponsePropertiesInner;
import com.azure.resourcemanager.scom.models.GatewayOnboardingProperties;
import com.azure.resourcemanager.scom.models.MonitoredResourceOffboardingProperties;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in OffboardsClient.
 */
public final class OffboardsClientImpl implements OffboardsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final OffboardsService service;

    /**
     * The service client containing this operation class.
     */
    private final AzureApiForManagingScomManagedInstancesAndMonitoredResourcesImpl client;

    /**
     * Initializes an instance of OffboardsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    OffboardsClientImpl(AzureApiForManagingScomManagedInstancesAndMonitoredResourcesImpl client) {
        this.service
            = RestProxy.create(OffboardsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AzureApiForManagingScomManagedInstancesAndMonitoredResourcesOffboards
     * to be used by the proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "AzureApiForManagingS")
    public interface OffboardsService {
        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scom/managedInstances/{instanceName}/offboardGateway")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> gateway(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("instanceName") String instanceName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") GatewayOnboardingProperties body, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scom/managedInstances/{instanceName}/offboardMonitoredResource")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> monitoredResource(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("instanceName") String instanceName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") MonitoredResourceOffboardingProperties body,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Gateway removal approval for deleting gateway.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @param body Properties for approval of gateway.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties for gateway onboarding operation along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> gatewayWithResponseAsync(String resourceGroupName, String instanceName,
        GatewayOnboardingProperties body) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (instanceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter instanceName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.gateway(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, instanceName, this.client.getApiVersion(), body, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gateway removal approval for deleting gateway.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @param body Properties for approval of gateway.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties for gateway onboarding operation along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> gatewayWithResponseAsync(String resourceGroupName, String instanceName,
        GatewayOnboardingProperties body, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (instanceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter instanceName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.gateway(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            instanceName, this.client.getApiVersion(), body, accept, context);
    }

    /**
     * Gateway removal approval for deleting gateway.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @param body Properties for approval of gateway.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of properties for gateway onboarding operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<CommonResponsePropertiesInner>, CommonResponsePropertiesInner>
        beginGatewayAsync(String resourceGroupName, String instanceName, GatewayOnboardingProperties body) {
        Mono<Response<Flux<ByteBuffer>>> mono = gatewayWithResponseAsync(resourceGroupName, instanceName, body);
        return this.client.<CommonResponsePropertiesInner, CommonResponsePropertiesInner>getLroResult(mono,
            this.client.getHttpPipeline(), CommonResponsePropertiesInner.class, CommonResponsePropertiesInner.class,
            this.client.getContext());
    }

    /**
     * Gateway removal approval for deleting gateway.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @param body Properties for approval of gateway.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of properties for gateway onboarding operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<CommonResponsePropertiesInner>, CommonResponsePropertiesInner> beginGatewayAsync(
        String resourceGroupName, String instanceName, GatewayOnboardingProperties body, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono
            = gatewayWithResponseAsync(resourceGroupName, instanceName, body, context);
        return this.client.<CommonResponsePropertiesInner, CommonResponsePropertiesInner>getLroResult(mono,
            this.client.getHttpPipeline(), CommonResponsePropertiesInner.class, CommonResponsePropertiesInner.class,
            context);
    }

    /**
     * Gateway removal approval for deleting gateway.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @param body Properties for approval of gateway.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of properties for gateway onboarding operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<CommonResponsePropertiesInner>, CommonResponsePropertiesInner>
        beginGateway(String resourceGroupName, String instanceName, GatewayOnboardingProperties body) {
        return this.beginGatewayAsync(resourceGroupName, instanceName, body).getSyncPoller();
    }

    /**
     * Gateway removal approval for deleting gateway.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @param body Properties for approval of gateway.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of properties for gateway onboarding operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<CommonResponsePropertiesInner>, CommonResponsePropertiesInner>
        beginGateway(String resourceGroupName, String instanceName, GatewayOnboardingProperties body, Context context) {
        return this.beginGatewayAsync(resourceGroupName, instanceName, body, context).getSyncPoller();
    }

    /**
     * Gateway removal approval for deleting gateway.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @param body Properties for approval of gateway.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties for gateway onboarding operation on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<CommonResponsePropertiesInner> gatewayAsync(String resourceGroupName, String instanceName,
        GatewayOnboardingProperties body) {
        return beginGatewayAsync(resourceGroupName, instanceName, body).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Gateway removal approval for deleting gateway.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @param body Properties for approval of gateway.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties for gateway onboarding operation on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<CommonResponsePropertiesInner> gatewayAsync(String resourceGroupName, String instanceName,
        GatewayOnboardingProperties body, Context context) {
        return beginGatewayAsync(resourceGroupName, instanceName, body, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Gateway removal approval for deleting gateway.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @param body Properties for approval of gateway.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties for gateway onboarding operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CommonResponsePropertiesInner gateway(String resourceGroupName, String instanceName,
        GatewayOnboardingProperties body) {
        return gatewayAsync(resourceGroupName, instanceName, body).block();
    }

    /**
     * Gateway removal approval for deleting gateway.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @param body Properties for approval of gateway.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties for gateway onboarding operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CommonResponsePropertiesInner gateway(String resourceGroupName, String instanceName,
        GatewayOnboardingProperties body, Context context) {
        return gatewayAsync(resourceGroupName, instanceName, body, context).block();
    }

    /**
     * Api to remove monitored resource from management server.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @param body Properties for offboarding of monitored resources.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties for gateway onboarding operation along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> monitoredResourceWithResponseAsync(String resourceGroupName,
        String instanceName, MonitoredResourceOffboardingProperties body) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (instanceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter instanceName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.monitoredResource(this.client.getEndpoint(), this.client.getSubscriptionId(),
                    resourceGroupName, instanceName, this.client.getApiVersion(), body, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Api to remove monitored resource from management server.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @param body Properties for offboarding of monitored resources.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties for gateway onboarding operation along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> monitoredResourceWithResponseAsync(String resourceGroupName,
        String instanceName, MonitoredResourceOffboardingProperties body, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (instanceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter instanceName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.monitoredResource(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            instanceName, this.client.getApiVersion(), body, accept, context);
    }

    /**
     * Api to remove monitored resource from management server.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @param body Properties for offboarding of monitored resources.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of properties for gateway onboarding operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<CommonResponsePropertiesInner>, CommonResponsePropertiesInner>
        beginMonitoredResourceAsync(String resourceGroupName, String instanceName,
            MonitoredResourceOffboardingProperties body) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = monitoredResourceWithResponseAsync(resourceGroupName, instanceName, body);
        return this.client.<CommonResponsePropertiesInner, CommonResponsePropertiesInner>getLroResult(mono,
            this.client.getHttpPipeline(), CommonResponsePropertiesInner.class, CommonResponsePropertiesInner.class,
            this.client.getContext());
    }

    /**
     * Api to remove monitored resource from management server.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @param body Properties for offboarding of monitored resources.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of properties for gateway onboarding operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<CommonResponsePropertiesInner>, CommonResponsePropertiesInner>
        beginMonitoredResourceAsync(String resourceGroupName, String instanceName,
            MonitoredResourceOffboardingProperties body, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono
            = monitoredResourceWithResponseAsync(resourceGroupName, instanceName, body, context);
        return this.client.<CommonResponsePropertiesInner, CommonResponsePropertiesInner>getLroResult(mono,
            this.client.getHttpPipeline(), CommonResponsePropertiesInner.class, CommonResponsePropertiesInner.class,
            context);
    }

    /**
     * Api to remove monitored resource from management server.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @param body Properties for offboarding of monitored resources.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of properties for gateway onboarding operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<CommonResponsePropertiesInner>, CommonResponsePropertiesInner> beginMonitoredResource(
        String resourceGroupName, String instanceName, MonitoredResourceOffboardingProperties body) {
        return this.beginMonitoredResourceAsync(resourceGroupName, instanceName, body).getSyncPoller();
    }

    /**
     * Api to remove monitored resource from management server.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @param body Properties for offboarding of monitored resources.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of properties for gateway onboarding operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<CommonResponsePropertiesInner>, CommonResponsePropertiesInner> beginMonitoredResource(
        String resourceGroupName, String instanceName, MonitoredResourceOffboardingProperties body, Context context) {
        return this.beginMonitoredResourceAsync(resourceGroupName, instanceName, body, context).getSyncPoller();
    }

    /**
     * Api to remove monitored resource from management server.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @param body Properties for offboarding of monitored resources.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties for gateway onboarding operation on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<CommonResponsePropertiesInner> monitoredResourceAsync(String resourceGroupName, String instanceName,
        MonitoredResourceOffboardingProperties body) {
        return beginMonitoredResourceAsync(resourceGroupName, instanceName, body).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Api to remove monitored resource from management server.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @param body Properties for offboarding of monitored resources.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties for gateway onboarding operation on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<CommonResponsePropertiesInner> monitoredResourceAsync(String resourceGroupName, String instanceName,
        MonitoredResourceOffboardingProperties body, Context context) {
        return beginMonitoredResourceAsync(resourceGroupName, instanceName, body, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Api to remove monitored resource from management server.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @param body Properties for offboarding of monitored resources.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties for gateway onboarding operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CommonResponsePropertiesInner monitoredResource(String resourceGroupName, String instanceName,
        MonitoredResourceOffboardingProperties body) {
        return monitoredResourceAsync(resourceGroupName, instanceName, body).block();
    }

    /**
     * Api to remove monitored resource from management server.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @param body Properties for offboarding of monitored resources.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties for gateway onboarding operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CommonResponsePropertiesInner monitoredResource(String resourceGroupName, String instanceName,
        MonitoredResourceOffboardingProperties body, Context context) {
        return monitoredResourceAsync(resourceGroupName, instanceName, body, context).block();
    }
}
