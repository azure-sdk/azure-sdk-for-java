// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.scom.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** The properties of a SCOM instance resource. */
@Fluent
public final class MonitoringInstanceProperties {
    /*
     * SCOM product version to be installed on instance
     */
    @JsonProperty(value = "productVersion", access = JsonProperty.Access.WRITE_ONLY)
    private String productVersion;

    /*
     * Virtual Network subnet id on which Aquila instance will be provisioned
     */
    @JsonProperty(value = "vNetSubnetId")
    private String vNetSubnetId;

    /*
     * List of management server endpoints
     */
    @JsonProperty(value = "managementEndpoints", access = JsonProperty.Access.WRITE_ONLY)
    private List<ManagementServerProperties> managementEndpoints;

    /*
     * Database instance on which SCOM Operational and Warehouse database will be stored
     */
    @JsonProperty(value = "databaseInstance")
    private DatabaseInstanceProperties databaseInstance;

    /*
     * Domain controller details
     */
    @JsonProperty(value = "domainController")
    private DomainControllerProperties domainController;

    /*
     * Domain user which will be used to join VMs to domain and login to VMs
     */
    @JsonProperty(value = "domainUserCredentials")
    private DomainUserCredentials domainUserCredentials;

    /*
     * Gmsa Details for load balancer and vmss
     */
    @JsonProperty(value = "gmsaDetails")
    private GmsaDetails gmsaDetails;

    /*
     * The properties to enable Azure Hybrid benefit for various SCOM infrastructure license
     */
    @JsonProperty(value = "azureHybridBenefit")
    private AzureHybridBenefitProperties azureHybridBenefit;

    /*
     * Gets or sets the provisioning state.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private String provisioningState;

    /*
     * Gets status of current and latest SCOM managed instance Operations
     */
    @JsonProperty(value = "operationsStatus", access = JsonProperty.Access.WRITE_ONLY)
    private List<ManagedInstanceOperationStatus> operationsStatus;

    /** Creates an instance of MonitoringInstanceProperties class. */
    public MonitoringInstanceProperties() {
    }

    /**
     * Get the productVersion property: SCOM product version to be installed on instance.
     *
     * @return the productVersion value.
     */
    public String productVersion() {
        return this.productVersion;
    }

    /**
     * Get the vNetSubnetId property: Virtual Network subnet id on which Aquila instance will be provisioned.
     *
     * @return the vNetSubnetId value.
     */
    public String vNetSubnetId() {
        return this.vNetSubnetId;
    }

    /**
     * Set the vNetSubnetId property: Virtual Network subnet id on which Aquila instance will be provisioned.
     *
     * @param vNetSubnetId the vNetSubnetId value to set.
     * @return the MonitoringInstanceProperties object itself.
     */
    public MonitoringInstanceProperties withVNetSubnetId(String vNetSubnetId) {
        this.vNetSubnetId = vNetSubnetId;
        return this;
    }

    /**
     * Get the managementEndpoints property: List of management server endpoints.
     *
     * @return the managementEndpoints value.
     */
    public List<ManagementServerProperties> managementEndpoints() {
        return this.managementEndpoints;
    }

    /**
     * Get the databaseInstance property: Database instance on which SCOM Operational and Warehouse database will be
     * stored.
     *
     * @return the databaseInstance value.
     */
    public DatabaseInstanceProperties databaseInstance() {
        return this.databaseInstance;
    }

    /**
     * Set the databaseInstance property: Database instance on which SCOM Operational and Warehouse database will be
     * stored.
     *
     * @param databaseInstance the databaseInstance value to set.
     * @return the MonitoringInstanceProperties object itself.
     */
    public MonitoringInstanceProperties withDatabaseInstance(DatabaseInstanceProperties databaseInstance) {
        this.databaseInstance = databaseInstance;
        return this;
    }

    /**
     * Get the domainController property: Domain controller details.
     *
     * @return the domainController value.
     */
    public DomainControllerProperties domainController() {
        return this.domainController;
    }

    /**
     * Set the domainController property: Domain controller details.
     *
     * @param domainController the domainController value to set.
     * @return the MonitoringInstanceProperties object itself.
     */
    public MonitoringInstanceProperties withDomainController(DomainControllerProperties domainController) {
        this.domainController = domainController;
        return this;
    }

    /**
     * Get the domainUserCredentials property: Domain user which will be used to join VMs to domain and login to VMs.
     *
     * @return the domainUserCredentials value.
     */
    public DomainUserCredentials domainUserCredentials() {
        return this.domainUserCredentials;
    }

    /**
     * Set the domainUserCredentials property: Domain user which will be used to join VMs to domain and login to VMs.
     *
     * @param domainUserCredentials the domainUserCredentials value to set.
     * @return the MonitoringInstanceProperties object itself.
     */
    public MonitoringInstanceProperties withDomainUserCredentials(DomainUserCredentials domainUserCredentials) {
        this.domainUserCredentials = domainUserCredentials;
        return this;
    }

    /**
     * Get the gmsaDetails property: Gmsa Details for load balancer and vmss.
     *
     * @return the gmsaDetails value.
     */
    public GmsaDetails gmsaDetails() {
        return this.gmsaDetails;
    }

    /**
     * Set the gmsaDetails property: Gmsa Details for load balancer and vmss.
     *
     * @param gmsaDetails the gmsaDetails value to set.
     * @return the MonitoringInstanceProperties object itself.
     */
    public MonitoringInstanceProperties withGmsaDetails(GmsaDetails gmsaDetails) {
        this.gmsaDetails = gmsaDetails;
        return this;
    }

    /**
     * Get the azureHybridBenefit property: The properties to enable Azure Hybrid benefit for various SCOM
     * infrastructure license.
     *
     * @return the azureHybridBenefit value.
     */
    public AzureHybridBenefitProperties azureHybridBenefit() {
        return this.azureHybridBenefit;
    }

    /**
     * Set the azureHybridBenefit property: The properties to enable Azure Hybrid benefit for various SCOM
     * infrastructure license.
     *
     * @param azureHybridBenefit the azureHybridBenefit value to set.
     * @return the MonitoringInstanceProperties object itself.
     */
    public MonitoringInstanceProperties withAzureHybridBenefit(AzureHybridBenefitProperties azureHybridBenefit) {
        this.azureHybridBenefit = azureHybridBenefit;
        return this;
    }

    /**
     * Get the provisioningState property: Gets or sets the provisioning state.
     *
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the operationsStatus property: Gets status of current and latest SCOM managed instance Operations.
     *
     * @return the operationsStatus value.
     */
    public List<ManagedInstanceOperationStatus> operationsStatus() {
        return this.operationsStatus;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (managementEndpoints() != null) {
            managementEndpoints().forEach(e -> e.validate());
        }
        if (databaseInstance() != null) {
            databaseInstance().validate();
        }
        if (domainController() != null) {
            domainController().validate();
        }
        if (domainUserCredentials() != null) {
            domainUserCredentials().validate();
        }
        if (gmsaDetails() != null) {
            gmsaDetails().validate();
        }
        if (azureHybridBenefit() != null) {
            azureHybridBenefit().validate();
        }
        if (operationsStatus() != null) {
            operationsStatus().forEach(e -> e.validate());
        }
    }
}
