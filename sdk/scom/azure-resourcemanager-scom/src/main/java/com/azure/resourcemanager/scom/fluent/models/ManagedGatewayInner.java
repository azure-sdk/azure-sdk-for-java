// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.scom.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * A gateway resource.
 */
@Fluent
public final class ManagedGatewayInner extends ProxyResource {
    /*
     * The resource-specific properties for this resource.
     */
    @JsonProperty(value = "properties")
    private ManagedGatewayProperties innerProperties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /**
     * Creates an instance of ManagedGatewayInner class.
     */
    public ManagedGatewayInner() {
    }

    /**
     * Get the innerProperties property: The resource-specific properties for this resource.
     * 
     * @return the innerProperties value.
     */
    private ManagedGatewayProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the resourceId property: ArmId of the gateway to be monitored.
     * 
     * @return the resourceId value.
     */
    public String resourceId() {
        return this.innerProperties() == null ? null : this.innerProperties().resourceId();
    }

    /**
     * Set the resourceId property: ArmId of the gateway to be monitored.
     * 
     * @param resourceId the resourceId value to set.
     * @return the ManagedGatewayInner object itself.
     */
    public ManagedGatewayInner withResourceId(String resourceId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ManagedGatewayProperties();
        }
        this.innerProperties().withResourceId(resourceId);
        return this;
    }

    /**
     * Get the resourceLocation property: Location of the gateway to be monitored.
     * 
     * @return the resourceLocation value.
     */
    public String resourceLocation() {
        return this.innerProperties() == null ? null : this.innerProperties().resourceLocation();
    }

    /**
     * Set the resourceLocation property: Location of the gateway to be monitored.
     * 
     * @param resourceLocation the resourceLocation value to set.
     * @return the ManagedGatewayInner object itself.
     */
    public ManagedGatewayInner withResourceLocation(String resourceLocation) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ManagedGatewayProperties();
        }
        this.innerProperties().withResourceLocation(resourceLocation);
        return this;
    }

    /**
     * Get the computerName property: ComputerName of the gateway to be monitored.
     * 
     * @return the computerName value.
     */
    public String computerName() {
        return this.innerProperties() == null ? null : this.innerProperties().computerName();
    }

    /**
     * Set the computerName property: ComputerName of the gateway to be monitored.
     * 
     * @param computerName the computerName value to set.
     * @return the ManagedGatewayInner object itself.
     */
    public ManagedGatewayInner withComputerName(String computerName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ManagedGatewayProperties();
        }
        this.innerProperties().withComputerName(computerName);
        return this;
    }

    /**
     * Get the domainName property: The domain name associated with the gateway to be monitored.
     * 
     * @return the domainName value.
     */
    public String domainName() {
        return this.innerProperties() == null ? null : this.innerProperties().domainName();
    }

    /**
     * Set the domainName property: The domain name associated with the gateway to be monitored.
     * 
     * @param domainName the domainName value to set.
     * @return the ManagedGatewayInner object itself.
     */
    public ManagedGatewayInner withDomainName(String domainName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ManagedGatewayProperties();
        }
        this.innerProperties().withDomainName(domainName);
        return this;
    }

    /**
     * Get the managementServerEndpoint property: The management server endpoint to which the gateway is directed.
     * 
     * @return the managementServerEndpoint value.
     */
    public String managementServerEndpoint() {
        return this.innerProperties() == null ? null : this.innerProperties().managementServerEndpoint();
    }

    /**
     * Get the healthStatus property: The health status of the gateway resource.
     * 
     * @return the healthStatus value.
     */
    public String healthStatus() {
        return this.innerProperties() == null ? null : this.innerProperties().healthStatus();
    }

    /**
     * Get the connectionStatus property: The connection status of the gateway resource.
     * 
     * @return the connectionStatus value.
     */
    public String connectionStatus() {
        return this.innerProperties() == null ? null : this.innerProperties().connectionStatus();
    }

    /**
     * Get the version property: The version of the gateway resource.
     * 
     * @return the version value.
     */
    public String version() {
        return this.innerProperties() == null ? null : this.innerProperties().version();
    }

    /**
     * Get the installType property: Install type of gateway resource.
     * 
     * @return the installType value.
     */
    public String installType() {
        return this.innerProperties() == null ? null : this.innerProperties().installType();
    }

    /**
     * Get the provisioningState property: Gets or sets the provisioning state.
     * 
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
