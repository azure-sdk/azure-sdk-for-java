// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.scom.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.scom.fluent.ManagedGatewaysOperationsClient;
import com.azure.resourcemanager.scom.fluent.models.ManagedGatewayInner;
import com.azure.resourcemanager.scom.models.ManagedGateway;
import com.azure.resourcemanager.scom.models.ManagedGatewaysOperations;

public final class ManagedGatewaysOperationsImpl implements ManagedGatewaysOperations {
    private static final ClientLogger LOGGER = new ClientLogger(ManagedGatewaysOperationsImpl.class);

    private final ManagedGatewaysOperationsClient innerClient;

    private final com.azure.resourcemanager.scom.ScomManager serviceManager;

    public ManagedGatewaysOperationsImpl(ManagedGatewaysOperationsClient innerClient,
        com.azure.resourcemanager.scom.ScomManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<ManagedGateway> getWithResponse(String resourceGroupName, String instanceName,
        String managedGatewayName, Context context) {
        Response<ManagedGatewayInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, instanceName, managedGatewayName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new ManagedGatewayImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ManagedGateway get(String resourceGroupName, String instanceName, String managedGatewayName) {
        ManagedGatewayInner inner = this.serviceClient().get(resourceGroupName, instanceName, managedGatewayName);
        if (inner != null) {
            return new ManagedGatewayImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteWithResponse(String resourceGroupName, String instanceName, String managedGatewayName,
        Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, instanceName, managedGatewayName, context);
    }

    public void delete(String resourceGroupName, String instanceName, String managedGatewayName) {
        this.serviceClient().delete(resourceGroupName, instanceName, managedGatewayName);
    }

    public PagedIterable<ManagedGateway> listByManagedInstance(String resourceGroupName, String instanceName) {
        PagedIterable<ManagedGatewayInner> inner
            = this.serviceClient().listByManagedInstance(resourceGroupName, instanceName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new ManagedGatewayImpl(inner1, this.manager()));
    }

    public PagedIterable<ManagedGateway> listByManagedInstance(String resourceGroupName, String instanceName,
        Context context) {
        PagedIterable<ManagedGatewayInner> inner
            = this.serviceClient().listByManagedInstance(resourceGroupName, instanceName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new ManagedGatewayImpl(inner1, this.manager()));
    }

    public ManagedGateway getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String instanceName = ResourceManagerUtils.getValueFromIdByName(id, "managedInstances");
        if (instanceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'managedInstances'.", id)));
        }
        String managedGatewayName = ResourceManagerUtils.getValueFromIdByName(id, "managedGateways");
        if (managedGatewayName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'managedGateways'.", id)));
        }
        return this.getWithResponse(resourceGroupName, instanceName, managedGatewayName, Context.NONE).getValue();
    }

    public Response<ManagedGateway> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String instanceName = ResourceManagerUtils.getValueFromIdByName(id, "managedInstances");
        if (instanceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'managedInstances'.", id)));
        }
        String managedGatewayName = ResourceManagerUtils.getValueFromIdByName(id, "managedGateways");
        if (managedGatewayName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'managedGateways'.", id)));
        }
        return this.getWithResponse(resourceGroupName, instanceName, managedGatewayName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String instanceName = ResourceManagerUtils.getValueFromIdByName(id, "managedInstances");
        if (instanceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'managedInstances'.", id)));
        }
        String managedGatewayName = ResourceManagerUtils.getValueFromIdByName(id, "managedGateways");
        if (managedGatewayName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'managedGateways'.", id)));
        }
        this.deleteWithResponse(resourceGroupName, instanceName, managedGatewayName, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String instanceName = ResourceManagerUtils.getValueFromIdByName(id, "managedInstances");
        if (instanceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'managedInstances'.", id)));
        }
        String managedGatewayName = ResourceManagerUtils.getValueFromIdByName(id, "managedGateways");
        if (managedGatewayName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'managedGateways'.", id)));
        }
        return this.deleteWithResponse(resourceGroupName, instanceName, managedGatewayName, context);
    }

    private ManagedGatewaysOperationsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.scom.ScomManager manager() {
        return this.serviceManager;
    }

    public ManagedGatewayImpl define(String name) {
        return new ManagedGatewayImpl(name, this.manager());
    }
}
