// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.scom.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * List of filter properties to be applied while fetching the resource list.
 */
@Fluent
public final class FilterProperties {
    /*
     * skip count.
     */
    @JsonProperty(value = "skip")
    private Long skip;

    /*
     * number of resources to be displayed.
     */
    @JsonProperty(value = "take")
    private Long take;

    /*
     * Resource Type of various types to be used for filtering
     */
    @JsonProperty(value = "resourceType")
    private String resourceType;

    /*
     * Name to be used for filtering
     */
    @JsonProperty(value = "name")
    private String name;

    /*
     * Subscription List to be used for filtering
     */
    @JsonProperty(value = "subscription")
    private List<String> subscription;

    /*
     * ResourceGroupName List to be used for filtering
     */
    @JsonProperty(value = "resourcegroup")
    private List<String> resourcegroup;

    /*
     * Location list to be used for filtering
     */
    @JsonProperty(value = "location")
    private List<String> location;

    /*
     * Health status list to be used for filtering
     */
    @JsonProperty(value = "healthStatus")
    private List<String> healthStatus;

    /*
     * AutoUpgrade list to be used for filtering
     */
    @JsonProperty(value = "autoUpgrade")
    private List<String> autoUpgrade;

    /*
     * machine types list to be used for filtering
     */
    @JsonProperty(value = "machineType")
    private List<String> machineType;

    /**
     * Creates an instance of FilterProperties class.
     */
    public FilterProperties() {
    }

    /**
     * Get the skip property: skip count.
     * 
     * @return the skip value.
     */
    public Long skip() {
        return this.skip;
    }

    /**
     * Set the skip property: skip count.
     * 
     * @param skip the skip value to set.
     * @return the FilterProperties object itself.
     */
    public FilterProperties withSkip(Long skip) {
        this.skip = skip;
        return this;
    }

    /**
     * Get the take property: number of resources to be displayed.
     * 
     * @return the take value.
     */
    public Long take() {
        return this.take;
    }

    /**
     * Set the take property: number of resources to be displayed.
     * 
     * @param take the take value to set.
     * @return the FilterProperties object itself.
     */
    public FilterProperties withTake(Long take) {
        this.take = take;
        return this;
    }

    /**
     * Get the resourceType property: Resource Type of various types to be used for filtering.
     * 
     * @return the resourceType value.
     */
    public String resourceType() {
        return this.resourceType;
    }

    /**
     * Set the resourceType property: Resource Type of various types to be used for filtering.
     * 
     * @param resourceType the resourceType value to set.
     * @return the FilterProperties object itself.
     */
    public FilterProperties withResourceType(String resourceType) {
        this.resourceType = resourceType;
        return this;
    }

    /**
     * Get the name property: Name to be used for filtering.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Name to be used for filtering.
     * 
     * @param name the name value to set.
     * @return the FilterProperties object itself.
     */
    public FilterProperties withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the subscription property: Subscription List to be used for filtering.
     * 
     * @return the subscription value.
     */
    public List<String> subscription() {
        return this.subscription;
    }

    /**
     * Set the subscription property: Subscription List to be used for filtering.
     * 
     * @param subscription the subscription value to set.
     * @return the FilterProperties object itself.
     */
    public FilterProperties withSubscription(List<String> subscription) {
        this.subscription = subscription;
        return this;
    }

    /**
     * Get the resourcegroup property: ResourceGroupName List to be used for filtering.
     * 
     * @return the resourcegroup value.
     */
    public List<String> resourcegroup() {
        return this.resourcegroup;
    }

    /**
     * Set the resourcegroup property: ResourceGroupName List to be used for filtering.
     * 
     * @param resourcegroup the resourcegroup value to set.
     * @return the FilterProperties object itself.
     */
    public FilterProperties withResourcegroup(List<String> resourcegroup) {
        this.resourcegroup = resourcegroup;
        return this;
    }

    /**
     * Get the location property: Location list to be used for filtering.
     * 
     * @return the location value.
     */
    public List<String> location() {
        return this.location;
    }

    /**
     * Set the location property: Location list to be used for filtering.
     * 
     * @param location the location value to set.
     * @return the FilterProperties object itself.
     */
    public FilterProperties withLocation(List<String> location) {
        this.location = location;
        return this;
    }

    /**
     * Get the healthStatus property: Health status list to be used for filtering.
     * 
     * @return the healthStatus value.
     */
    public List<String> healthStatus() {
        return this.healthStatus;
    }

    /**
     * Set the healthStatus property: Health status list to be used for filtering.
     * 
     * @param healthStatus the healthStatus value to set.
     * @return the FilterProperties object itself.
     */
    public FilterProperties withHealthStatus(List<String> healthStatus) {
        this.healthStatus = healthStatus;
        return this;
    }

    /**
     * Get the autoUpgrade property: AutoUpgrade list to be used for filtering.
     * 
     * @return the autoUpgrade value.
     */
    public List<String> autoUpgrade() {
        return this.autoUpgrade;
    }

    /**
     * Set the autoUpgrade property: AutoUpgrade list to be used for filtering.
     * 
     * @param autoUpgrade the autoUpgrade value to set.
     * @return the FilterProperties object itself.
     */
    public FilterProperties withAutoUpgrade(List<String> autoUpgrade) {
        this.autoUpgrade = autoUpgrade;
        return this;
    }

    /**
     * Get the machineType property: machine types list to be used for filtering.
     * 
     * @return the machineType value.
     */
    public List<String> machineType() {
        return this.machineType;
    }

    /**
     * Set the machineType property: machine types list to be used for filtering.
     * 
     * @param machineType the machineType value to set.
     * @return the FilterProperties object itself.
     */
    public FilterProperties withMachineType(List<String> machineType) {
        this.machineType = machineType;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
