// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.scom.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.core.management.SystemData;
import com.azure.resourcemanager.scom.models.AzureHybridBenefitProperties;
import com.azure.resourcemanager.scom.models.DatabaseInstanceProperties;
import com.azure.resourcemanager.scom.models.DomainControllerProperties;
import com.azure.resourcemanager.scom.models.DomainUserCredentials;
import com.azure.resourcemanager.scom.models.GmsaDetails;
import com.azure.resourcemanager.scom.models.ManagedIdentity;
import com.azure.resourcemanager.scom.models.ManagedInstanceOperationStatus;
import com.azure.resourcemanager.scom.models.ManagementServerProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/**
 * A SCOM instance resource.
 */
@Fluent
public final class ManagedInstanceInner extends Resource {
    /*
     * The resource-specific properties for this resource.
     */
    @JsonProperty(value = "properties")
    private MonitoringInstancePropertiesInner innerProperties;

    /*
     * The managed service identities assigned to this resource.
     */
    @JsonProperty(value = "identity")
    private ManagedIdentity identity;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /**
     * Creates an instance of ManagedInstanceInner class.
     */
    public ManagedInstanceInner() {
    }

    /**
     * Get the innerProperties property: The resource-specific properties for this resource.
     * 
     * @return the innerProperties value.
     */
    private MonitoringInstancePropertiesInner innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the identity property: The managed service identities assigned to this resource.
     * 
     * @return the identity value.
     */
    public ManagedIdentity identity() {
        return this.identity;
    }

    /**
     * Set the identity property: The managed service identities assigned to this resource.
     * 
     * @param identity the identity value to set.
     * @return the ManagedInstanceInner object itself.
     */
    public ManagedInstanceInner withIdentity(ManagedIdentity identity) {
        this.identity = identity;
        return this;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ManagedInstanceInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ManagedInstanceInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the productVersion property: SCOM product version to be installed on instance.
     * 
     * @return the productVersion value.
     */
    public String productVersion() {
        return this.innerProperties() == null ? null : this.innerProperties().productVersion();
    }

    /**
     * Get the vNetSubnetId property: Virtual Network subnet id on which Aquila instance will be provisioned.
     * 
     * @return the vNetSubnetId value.
     */
    public String vNetSubnetId() {
        return this.innerProperties() == null ? null : this.innerProperties().vNetSubnetId();
    }

    /**
     * Set the vNetSubnetId property: Virtual Network subnet id on which Aquila instance will be provisioned.
     * 
     * @param vNetSubnetId the vNetSubnetId value to set.
     * @return the ManagedInstanceInner object itself.
     */
    public ManagedInstanceInner withVNetSubnetId(String vNetSubnetId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new MonitoringInstancePropertiesInner();
        }
        this.innerProperties().withVNetSubnetId(vNetSubnetId);
        return this;
    }

    /**
     * Get the managementEndpoints property: List of management server endpoints.
     * 
     * @return the managementEndpoints value.
     */
    public List<ManagementServerProperties> managementEndpoints() {
        return this.innerProperties() == null ? null : this.innerProperties().managementEndpoints();
    }

    /**
     * Get the databaseInstance property: The database instance where the SCOM Operational and Warehouse databases will
     * be stored.
     * 
     * @return the databaseInstance value.
     */
    public DatabaseInstanceProperties databaseInstance() {
        return this.innerProperties() == null ? null : this.innerProperties().databaseInstance();
    }

    /**
     * Set the databaseInstance property: The database instance where the SCOM Operational and Warehouse databases will
     * be stored.
     * 
     * @param databaseInstance the databaseInstance value to set.
     * @return the ManagedInstanceInner object itself.
     */
    public ManagedInstanceInner withDatabaseInstance(DatabaseInstanceProperties databaseInstance) {
        if (this.innerProperties() == null) {
            this.innerProperties = new MonitoringInstancePropertiesInner();
        }
        this.innerProperties().withDatabaseInstance(databaseInstance);
        return this;
    }

    /**
     * Get the domainController property: Domain controller details.
     * 
     * @return the domainController value.
     */
    public DomainControllerProperties domainController() {
        return this.innerProperties() == null ? null : this.innerProperties().domainController();
    }

    /**
     * Set the domainController property: Domain controller details.
     * 
     * @param domainController the domainController value to set.
     * @return the ManagedInstanceInner object itself.
     */
    public ManagedInstanceInner withDomainController(DomainControllerProperties domainController) {
        if (this.innerProperties() == null) {
            this.innerProperties = new MonitoringInstancePropertiesInner();
        }
        this.innerProperties().withDomainController(domainController);
        return this;
    }

    /**
     * Get the domainUserCredentials property: Domain user which will be used to join VMs to domain and login to VMs.
     * 
     * @return the domainUserCredentials value.
     */
    public DomainUserCredentials domainUserCredentials() {
        return this.innerProperties() == null ? null : this.innerProperties().domainUserCredentials();
    }

    /**
     * Set the domainUserCredentials property: Domain user which will be used to join VMs to domain and login to VMs.
     * 
     * @param domainUserCredentials the domainUserCredentials value to set.
     * @return the ManagedInstanceInner object itself.
     */
    public ManagedInstanceInner withDomainUserCredentials(DomainUserCredentials domainUserCredentials) {
        if (this.innerProperties() == null) {
            this.innerProperties = new MonitoringInstancePropertiesInner();
        }
        this.innerProperties().withDomainUserCredentials(domainUserCredentials);
        return this;
    }

    /**
     * Get the gmsaDetails property: Gmsa Details for load balancer and vmss.
     * 
     * @return the gmsaDetails value.
     */
    public GmsaDetails gmsaDetails() {
        return this.innerProperties() == null ? null : this.innerProperties().gmsaDetails();
    }

    /**
     * Set the gmsaDetails property: Gmsa Details for load balancer and vmss.
     * 
     * @param gmsaDetails the gmsaDetails value to set.
     * @return the ManagedInstanceInner object itself.
     */
    public ManagedInstanceInner withGmsaDetails(GmsaDetails gmsaDetails) {
        if (this.innerProperties() == null) {
            this.innerProperties = new MonitoringInstancePropertiesInner();
        }
        this.innerProperties().withGmsaDetails(gmsaDetails);
        return this;
    }

    /**
     * Get the azureHybridBenefit property: The properties to enable Azure Hybrid benefit for various SCOM
     * infrastructure license.
     * 
     * @return the azureHybridBenefit value.
     */
    public AzureHybridBenefitProperties azureHybridBenefit() {
        return this.innerProperties() == null ? null : this.innerProperties().azureHybridBenefit();
    }

    /**
     * Set the azureHybridBenefit property: The properties to enable Azure Hybrid benefit for various SCOM
     * infrastructure license.
     * 
     * @param azureHybridBenefit the azureHybridBenefit value to set.
     * @return the ManagedInstanceInner object itself.
     */
    public ManagedInstanceInner withAzureHybridBenefit(AzureHybridBenefitProperties azureHybridBenefit) {
        if (this.innerProperties() == null) {
            this.innerProperties = new MonitoringInstancePropertiesInner();
        }
        this.innerProperties().withAzureHybridBenefit(azureHybridBenefit);
        return this;
    }

    /**
     * Get the provisioningState property: Gets or sets the provisioning state.
     * 
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the logAnalyticsProperties property: Details of Log Analytics workspace and data being ingested.
     * 
     * @return the logAnalyticsProperties value.
     */
    public LogAnalyticsConfigurationInner logAnalyticsProperties() {
        return this.innerProperties() == null ? null : this.innerProperties().logAnalyticsProperties();
    }

    /**
     * Get the operationsStatus property: Gets status of current and latest SCOM managed instance operations.
     * 
     * @return the operationsStatus value.
     */
    public List<ManagedInstanceOperationStatus> operationsStatus() {
        return this.innerProperties() == null ? null : this.innerProperties().operationsStatus();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
        if (identity() != null) {
            identity().validate();
        }
    }
}
