// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.scom.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.scom.models.NexusResourcesProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * ResourceList based on filters.
 */
@Fluent
public final class GetResourcesListResponsePropertiesInner {
    /*
     * The list of the resources based on the selected filters.
     */
    @JsonProperty(value = "value", access = JsonProperty.Access.WRITE_ONLY)
    private List<NexusResourcesProperties> value;

    /*
     * Total number of records present in Db to be used in pagination.
     */
    @JsonProperty(value = "totalRecords")
    private Long totalRecords;

    /**
     * Creates an instance of GetResourcesListResponsePropertiesInner class.
     */
    public GetResourcesListResponsePropertiesInner() {
    }

    /**
     * Get the value property: The list of the resources based on the selected filters.
     * 
     * @return the value value.
     */
    public List<NexusResourcesProperties> value() {
        return this.value;
    }

    /**
     * Get the totalRecords property: Total number of records present in Db to be used in pagination.
     * 
     * @return the totalRecords value.
     */
    public Long totalRecords() {
        return this.totalRecords;
    }

    /**
     * Set the totalRecords property: Total number of records present in Db to be used in pagination.
     * 
     * @param totalRecords the totalRecords value to set.
     * @return the GetResourcesListResponsePropertiesInner object itself.
     */
    public GetResourcesListResponsePropertiesInner withTotalRecords(Long totalRecords) {
        this.totalRecords = totalRecords;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (value() != null) {
            value().forEach(e -> e.validate());
        }
    }
}
