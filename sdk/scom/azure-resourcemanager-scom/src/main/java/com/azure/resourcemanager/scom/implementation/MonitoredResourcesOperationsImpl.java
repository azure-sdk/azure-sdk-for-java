// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.scom.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.scom.fluent.MonitoredResourcesOperationsClient;
import com.azure.resourcemanager.scom.fluent.models.MonitoredResourceInner;
import com.azure.resourcemanager.scom.models.MonitoredResource;
import com.azure.resourcemanager.scom.models.MonitoredResourcesOperations;

public final class MonitoredResourcesOperationsImpl implements MonitoredResourcesOperations {
    private static final ClientLogger LOGGER = new ClientLogger(MonitoredResourcesOperationsImpl.class);

    private final MonitoredResourcesOperationsClient innerClient;

    private final com.azure.resourcemanager.scom.ScomManager serviceManager;

    public MonitoredResourcesOperationsImpl(
        MonitoredResourcesOperationsClient innerClient, com.azure.resourcemanager.scom.ScomManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<MonitoredResource> getWithResponse(
        String resourceGroupName, String instanceName, String monitoredResourceName, Context context) {
        Response<MonitoredResourceInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, instanceName, monitoredResourceName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new MonitoredResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public MonitoredResource get(String resourceGroupName, String instanceName, String monitoredResourceName) {
        MonitoredResourceInner inner = this.serviceClient().get(resourceGroupName, instanceName, monitoredResourceName);
        if (inner != null) {
            return new MonitoredResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<MonitoredResource> createOrUpdateWithResponse(
        String resourceGroupName, String instanceName, String monitoredResourceName, Context context) {
        Response<MonitoredResourceInner> inner =
            this
                .serviceClient()
                .createOrUpdateWithResponse(resourceGroupName, instanceName, monitoredResourceName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new MonitoredResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public MonitoredResource createOrUpdate(
        String resourceGroupName, String instanceName, String monitoredResourceName) {
        MonitoredResourceInner inner =
            this.serviceClient().createOrUpdate(resourceGroupName, instanceName, monitoredResourceName);
        if (inner != null) {
            return new MonitoredResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteWithResponse(
        String resourceGroupName, String instanceName, String monitoredResourceName, Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, instanceName, monitoredResourceName, context);
    }

    public void delete(String resourceGroupName, String instanceName, String monitoredResourceName) {
        this.serviceClient().delete(resourceGroupName, instanceName, monitoredResourceName);
    }

    public PagedIterable<MonitoredResource> listByManagedInstance(String resourceGroupName, String instanceName) {
        PagedIterable<MonitoredResourceInner> inner =
            this.serviceClient().listByManagedInstance(resourceGroupName, instanceName);
        return Utils.mapPage(inner, inner1 -> new MonitoredResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<MonitoredResource> listByManagedInstance(
        String resourceGroupName, String instanceName, Context context) {
        PagedIterable<MonitoredResourceInner> inner =
            this.serviceClient().listByManagedInstance(resourceGroupName, instanceName, context);
        return Utils.mapPage(inner, inner1 -> new MonitoredResourceImpl(inner1, this.manager()));
    }

    private MonitoredResourcesOperationsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.scom.ScomManager manager() {
        return this.serviceManager;
    }
}
