// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.scom.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.scom.fluent.InstancesClient;
import com.azure.resourcemanager.scom.fluent.models.LogAnalyticsConfigurationInner;
import com.azure.resourcemanager.scom.fluent.models.LogAnalyticsUpdateConfigurationInner;
import com.azure.resourcemanager.scom.fluent.models.ManagedInstanceInner;
import com.azure.resourcemanager.scom.fluent.models.PatchServersResponsePropertiesInner;
import com.azure.resourcemanager.scom.fluent.models.SetServerCountResponsePropertiesInner;
import com.azure.resourcemanager.scom.fluent.models.UnlinkLogAnalyticsResponsePropertiesInner;
import com.azure.resourcemanager.scom.models.MonitoringInstanceList;
import com.azure.resourcemanager.scom.models.MonitoringInstancePatch;
import com.azure.resourcemanager.scom.models.ScalingProperties;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in InstancesClient.
 */
public final class InstancesClientImpl implements InstancesClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final InstancesService service;

    /**
     * The service client containing this operation class.
     */
    private final AzureApiForManagingScomManagedInstancesAndMonitoredResourcesImpl client;

    /**
     * Initializes an instance of InstancesClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    InstancesClientImpl(AzureApiForManagingScomManagedInstancesAndMonitoredResourcesImpl client) {
        this.service
            = RestProxy.create(InstancesService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AzureApiForManagingScomManagedInstancesAndMonitoredResourcesInstances
     * to be used by the proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "AzureApiForManagingS")
    public interface InstancesService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scom/managedInstances")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<MonitoringInstanceList>> listByResourceGroup(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/providers/Microsoft.Scom/managedInstances")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<MonitoringInstanceList>> list(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scom/managedInstances/{instanceName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ManagedInstanceInner>> getByResourceGroup(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("instanceName") String instanceName,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scom/managedInstances/{instanceName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdate(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("instanceName") String instanceName,
            @QueryParam("api-version") String apiVersion, @QueryParam("validationMode") Boolean validationMode,
            @BodyParam("application/json") ManagedInstanceInner managedInstance, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scom/managedInstances/{instanceName}")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> update(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("instanceName") String instanceName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") MonitoringInstancePatch managedInstance,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scom/managedInstances/{instanceName}")
        @ExpectedResponses({ 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("instanceName") String instanceName,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scom/managedInstances/{instanceName}/setServerCount")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> scale(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("instanceName") String instanceName,
            @QueryParam("api-version") String apiVersion, @BodyParam("application/json") ScalingProperties body,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scom/managedInstances/{instanceName}/patchServers")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> patchServers(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("instanceName") String instanceName,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scom/managedInstances/{instanceName}/linkLogAnalytics")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> linkLogAnalytics(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("instanceName") String instanceName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") LogAnalyticsConfigurationInner body, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scom/managedInstances/{instanceName}/unlinkLogAnalytics")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> unlinkLogAnalytics(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("instanceName") String instanceName,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scom/managedInstances/{instanceName}/updateLogAnalytics")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> updateLogAnalytics(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("instanceName") String instanceName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") LogAnalyticsUpdateConfigurationInner body,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<MonitoringInstanceList>> listByResourceGroupNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<MonitoringInstanceList>> listBySubscriptionNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Lists all SCOM managed instances in a resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a paged list of SCOM managed instances along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ManagedInstanceInner>> listByResourceGroupSinglePageAsync(String resourceGroupName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByResourceGroup(this.client.getEndpoint(),
                this.client.getSubscriptionId(), resourceGroupName, this.client.getApiVersion(), accept, context))
            .<PagedResponse<ManagedInstanceInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Lists all SCOM managed instances in a resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a paged list of SCOM managed instances along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ManagedInstanceInner>> listByResourceGroupSinglePageAsync(String resourceGroupName,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByResourceGroup(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
                this.client.getApiVersion(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * Lists all SCOM managed instances in a resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a paged list of SCOM managed instances as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ManagedInstanceInner> listByResourceGroupAsync(String resourceGroupName) {
        return new PagedFlux<>(() -> listByResourceGroupSinglePageAsync(resourceGroupName),
            nextLink -> listByResourceGroupNextSinglePageAsync(nextLink));
    }

    /**
     * Lists all SCOM managed instances in a resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a paged list of SCOM managed instances as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ManagedInstanceInner> listByResourceGroupAsync(String resourceGroupName, Context context) {
        return new PagedFlux<>(() -> listByResourceGroupSinglePageAsync(resourceGroupName, context),
            nextLink -> listByResourceGroupNextSinglePageAsync(nextLink, context));
    }

    /**
     * Lists all SCOM managed instances in a resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a paged list of SCOM managed instances as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ManagedInstanceInner> listByResourceGroup(String resourceGroupName) {
        return new PagedIterable<>(listByResourceGroupAsync(resourceGroupName));
    }

    /**
     * Lists all SCOM managed instances in a resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a paged list of SCOM managed instances as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ManagedInstanceInner> listByResourceGroup(String resourceGroupName, Context context) {
        return new PagedIterable<>(listByResourceGroupAsync(resourceGroupName, context));
    }

    /**
     * Lists all SCOM managed instances in a subscription.
     * 
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a paged list of SCOM managed instances along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ManagedInstanceInner>> listSinglePageAsync() {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.list(this.client.getEndpoint(), this.client.getSubscriptionId(),
                this.client.getApiVersion(), accept, context))
            .<PagedResponse<ManagedInstanceInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Lists all SCOM managed instances in a subscription.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a paged list of SCOM managed instances along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ManagedInstanceInner>> listSinglePageAsync(Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .list(this.client.getEndpoint(), this.client.getSubscriptionId(), this.client.getApiVersion(), accept,
                context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * Lists all SCOM managed instances in a subscription.
     * 
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a paged list of SCOM managed instances as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ManagedInstanceInner> listAsync() {
        return new PagedFlux<>(() -> listSinglePageAsync(),
            nextLink -> listBySubscriptionNextSinglePageAsync(nextLink));
    }

    /**
     * Lists all SCOM managed instances in a subscription.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a paged list of SCOM managed instances as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ManagedInstanceInner> listAsync(Context context) {
        return new PagedFlux<>(() -> listSinglePageAsync(context),
            nextLink -> listBySubscriptionNextSinglePageAsync(nextLink, context));
    }

    /**
     * Lists all SCOM managed instances in a subscription.
     * 
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a paged list of SCOM managed instances as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ManagedInstanceInner> list() {
        return new PagedIterable<>(listAsync());
    }

    /**
     * Lists all SCOM managed instances in a subscription.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a paged list of SCOM managed instances as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ManagedInstanceInner> list(Context context) {
        return new PagedIterable<>(listAsync(context));
    }

    /**
     * Get SCOM managed instance details.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return sCOM managed instance details along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ManagedInstanceInner>> getByResourceGroupWithResponseAsync(String resourceGroupName,
        String instanceName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (instanceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter instanceName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.getByResourceGroup(this.client.getEndpoint(), this.client.getSubscriptionId(),
                    resourceGroupName, instanceName, this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get SCOM managed instance details.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return sCOM managed instance details along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ManagedInstanceInner>> getByResourceGroupWithResponseAsync(String resourceGroupName,
        String instanceName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (instanceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter instanceName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.getByResourceGroup(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            instanceName, this.client.getApiVersion(), accept, context);
    }

    /**
     * Get SCOM managed instance details.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return sCOM managed instance details on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ManagedInstanceInner> getByResourceGroupAsync(String resourceGroupName, String instanceName) {
        return getByResourceGroupWithResponseAsync(resourceGroupName, instanceName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get SCOM managed instance details.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return sCOM managed instance details along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ManagedInstanceInner> getByResourceGroupWithResponse(String resourceGroupName, String instanceName,
        Context context) {
        return getByResourceGroupWithResponseAsync(resourceGroupName, instanceName, context).block();
    }

    /**
     * Get SCOM managed instance details.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return sCOM managed instance details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ManagedInstanceInner getByResourceGroup(String resourceGroupName, String instanceName) {
        return getByResourceGroupWithResponse(resourceGroupName, instanceName, Context.NONE).getValue();
    }

    /**
     * Create or update SCOM managed instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @param managedInstance SCOM Managed Instance.
     * @param validationMode Validation mode for the SCOM managed instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SCOM instance resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String resourceGroupName,
        String instanceName, ManagedInstanceInner managedInstance, Boolean validationMode) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (instanceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter instanceName is required and cannot be null."));
        }
        if (managedInstance == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managedInstance is required and cannot be null."));
        } else {
            managedInstance.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.createOrUpdate(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, instanceName, this.client.getApiVersion(), validationMode, managedInstance, accept,
                context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create or update SCOM managed instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @param managedInstance SCOM Managed Instance.
     * @param validationMode Validation mode for the SCOM managed instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SCOM instance resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String resourceGroupName,
        String instanceName, ManagedInstanceInner managedInstance, Boolean validationMode, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (instanceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter instanceName is required and cannot be null."));
        }
        if (managedInstance == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managedInstance is required and cannot be null."));
        } else {
            managedInstance.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.createOrUpdate(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            instanceName, this.client.getApiVersion(), validationMode, managedInstance, accept, context);
    }

    /**
     * Create or update SCOM managed instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @param managedInstance SCOM Managed Instance.
     * @param validationMode Validation mode for the SCOM managed instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of a SCOM instance resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ManagedInstanceInner>, ManagedInstanceInner> beginCreateOrUpdateAsync(
        String resourceGroupName, String instanceName, ManagedInstanceInner managedInstance, Boolean validationMode) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = createOrUpdateWithResponseAsync(resourceGroupName, instanceName, managedInstance, validationMode);
        return this.client.<ManagedInstanceInner, ManagedInstanceInner>getLroResult(mono, this.client.getHttpPipeline(),
            ManagedInstanceInner.class, ManagedInstanceInner.class, this.client.getContext());
    }

    /**
     * Create or update SCOM managed instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @param managedInstance SCOM Managed Instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of a SCOM instance resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ManagedInstanceInner>, ManagedInstanceInner>
        beginCreateOrUpdateAsync(String resourceGroupName, String instanceName, ManagedInstanceInner managedInstance) {
        final Boolean validationMode = null;
        Mono<Response<Flux<ByteBuffer>>> mono
            = createOrUpdateWithResponseAsync(resourceGroupName, instanceName, managedInstance, validationMode);
        return this.client.<ManagedInstanceInner, ManagedInstanceInner>getLroResult(mono, this.client.getHttpPipeline(),
            ManagedInstanceInner.class, ManagedInstanceInner.class, this.client.getContext());
    }

    /**
     * Create or update SCOM managed instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @param managedInstance SCOM Managed Instance.
     * @param validationMode Validation mode for the SCOM managed instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of a SCOM instance resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ManagedInstanceInner>, ManagedInstanceInner> beginCreateOrUpdateAsync(
        String resourceGroupName, String instanceName, ManagedInstanceInner managedInstance, Boolean validationMode,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = createOrUpdateWithResponseAsync(resourceGroupName, instanceName,
            managedInstance, validationMode, context);
        return this.client.<ManagedInstanceInner, ManagedInstanceInner>getLroResult(mono, this.client.getHttpPipeline(),
            ManagedInstanceInner.class, ManagedInstanceInner.class, context);
    }

    /**
     * Create or update SCOM managed instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @param managedInstance SCOM Managed Instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a SCOM instance resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ManagedInstanceInner>, ManagedInstanceInner>
        beginCreateOrUpdate(String resourceGroupName, String instanceName, ManagedInstanceInner managedInstance) {
        final Boolean validationMode = null;
        return this.beginCreateOrUpdateAsync(resourceGroupName, instanceName, managedInstance, validationMode)
            .getSyncPoller();
    }

    /**
     * Create or update SCOM managed instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @param managedInstance SCOM Managed Instance.
     * @param validationMode Validation mode for the SCOM managed instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a SCOM instance resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ManagedInstanceInner>, ManagedInstanceInner> beginCreateOrUpdate(
        String resourceGroupName, String instanceName, ManagedInstanceInner managedInstance, Boolean validationMode,
        Context context) {
        return this.beginCreateOrUpdateAsync(resourceGroupName, instanceName, managedInstance, validationMode, context)
            .getSyncPoller();
    }

    /**
     * Create or update SCOM managed instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @param managedInstance SCOM Managed Instance.
     * @param validationMode Validation mode for the SCOM managed instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SCOM instance resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ManagedInstanceInner> createOrUpdateAsync(String resourceGroupName, String instanceName,
        ManagedInstanceInner managedInstance, Boolean validationMode) {
        return beginCreateOrUpdateAsync(resourceGroupName, instanceName, managedInstance, validationMode).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create or update SCOM managed instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @param managedInstance SCOM Managed Instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SCOM instance resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ManagedInstanceInner> createOrUpdateAsync(String resourceGroupName, String instanceName,
        ManagedInstanceInner managedInstance) {
        final Boolean validationMode = null;
        return beginCreateOrUpdateAsync(resourceGroupName, instanceName, managedInstance, validationMode).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create or update SCOM managed instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @param managedInstance SCOM Managed Instance.
     * @param validationMode Validation mode for the SCOM managed instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SCOM instance resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ManagedInstanceInner> createOrUpdateAsync(String resourceGroupName, String instanceName,
        ManagedInstanceInner managedInstance, Boolean validationMode, Context context) {
        return beginCreateOrUpdateAsync(resourceGroupName, instanceName, managedInstance, validationMode, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create or update SCOM managed instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @param managedInstance SCOM Managed Instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SCOM instance resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ManagedInstanceInner createOrUpdate(String resourceGroupName, String instanceName,
        ManagedInstanceInner managedInstance) {
        final Boolean validationMode = null;
        return createOrUpdateAsync(resourceGroupName, instanceName, managedInstance, validationMode).block();
    }

    /**
     * Create or update SCOM managed instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @param managedInstance SCOM Managed Instance.
     * @param validationMode Validation mode for the SCOM managed instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SCOM instance resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ManagedInstanceInner createOrUpdate(String resourceGroupName, String instanceName,
        ManagedInstanceInner managedInstance, Boolean validationMode, Context context) {
        return createOrUpdateAsync(resourceGroupName, instanceName, managedInstance, validationMode, context).block();
    }

    /**
     * Patch SCOM managed instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @param managedInstance SCOM managed instance properties update.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SCOM instance resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(String resourceGroupName, String instanceName,
        MonitoringInstancePatch managedInstance) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (instanceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter instanceName is required and cannot be null."));
        }
        if (managedInstance != null) {
            managedInstance.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.update(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, instanceName, this.client.getApiVersion(), managedInstance, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Patch SCOM managed instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @param managedInstance SCOM managed instance properties update.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SCOM instance resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(String resourceGroupName, String instanceName,
        MonitoringInstancePatch managedInstance, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (instanceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter instanceName is required and cannot be null."));
        }
        if (managedInstance != null) {
            managedInstance.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.update(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            instanceName, this.client.getApiVersion(), managedInstance, accept, context);
    }

    /**
     * Patch SCOM managed instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @param managedInstance SCOM managed instance properties update.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of a SCOM instance resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ManagedInstanceInner>, ManagedInstanceInner>
        beginUpdateAsync(String resourceGroupName, String instanceName, MonitoringInstancePatch managedInstance) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = updateWithResponseAsync(resourceGroupName, instanceName, managedInstance);
        return this.client.<ManagedInstanceInner, ManagedInstanceInner>getLroResult(mono, this.client.getHttpPipeline(),
            ManagedInstanceInner.class, ManagedInstanceInner.class, this.client.getContext());
    }

    /**
     * Patch SCOM managed instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of a SCOM instance resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ManagedInstanceInner>, ManagedInstanceInner>
        beginUpdateAsync(String resourceGroupName, String instanceName) {
        final MonitoringInstancePatch managedInstance = null;
        Mono<Response<Flux<ByteBuffer>>> mono
            = updateWithResponseAsync(resourceGroupName, instanceName, managedInstance);
        return this.client.<ManagedInstanceInner, ManagedInstanceInner>getLroResult(mono, this.client.getHttpPipeline(),
            ManagedInstanceInner.class, ManagedInstanceInner.class, this.client.getContext());
    }

    /**
     * Patch SCOM managed instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @param managedInstance SCOM managed instance properties update.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of a SCOM instance resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ManagedInstanceInner>, ManagedInstanceInner> beginUpdateAsync(
        String resourceGroupName, String instanceName, MonitoringInstancePatch managedInstance, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono
            = updateWithResponseAsync(resourceGroupName, instanceName, managedInstance, context);
        return this.client.<ManagedInstanceInner, ManagedInstanceInner>getLroResult(mono, this.client.getHttpPipeline(),
            ManagedInstanceInner.class, ManagedInstanceInner.class, context);
    }

    /**
     * Patch SCOM managed instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a SCOM instance resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ManagedInstanceInner>, ManagedInstanceInner> beginUpdate(String resourceGroupName,
        String instanceName) {
        final MonitoringInstancePatch managedInstance = null;
        return this.beginUpdateAsync(resourceGroupName, instanceName, managedInstance).getSyncPoller();
    }

    /**
     * Patch SCOM managed instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @param managedInstance SCOM managed instance properties update.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a SCOM instance resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ManagedInstanceInner>, ManagedInstanceInner> beginUpdate(String resourceGroupName,
        String instanceName, MonitoringInstancePatch managedInstance, Context context) {
        return this.beginUpdateAsync(resourceGroupName, instanceName, managedInstance, context).getSyncPoller();
    }

    /**
     * Patch SCOM managed instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @param managedInstance SCOM managed instance properties update.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SCOM instance resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ManagedInstanceInner> updateAsync(String resourceGroupName, String instanceName,
        MonitoringInstancePatch managedInstance) {
        return beginUpdateAsync(resourceGroupName, instanceName, managedInstance).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Patch SCOM managed instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SCOM instance resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ManagedInstanceInner> updateAsync(String resourceGroupName, String instanceName) {
        final MonitoringInstancePatch managedInstance = null;
        return beginUpdateAsync(resourceGroupName, instanceName, managedInstance).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Patch SCOM managed instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @param managedInstance SCOM managed instance properties update.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SCOM instance resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ManagedInstanceInner> updateAsync(String resourceGroupName, String instanceName,
        MonitoringInstancePatch managedInstance, Context context) {
        return beginUpdateAsync(resourceGroupName, instanceName, managedInstance, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Patch SCOM managed instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SCOM instance resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ManagedInstanceInner update(String resourceGroupName, String instanceName) {
        final MonitoringInstancePatch managedInstance = null;
        return updateAsync(resourceGroupName, instanceName, managedInstance).block();
    }

    /**
     * Patch SCOM managed instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @param managedInstance SCOM managed instance properties update.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SCOM instance resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ManagedInstanceInner update(String resourceGroupName, String instanceName,
        MonitoringInstancePatch managedInstance, Context context) {
        return updateAsync(resourceGroupName, instanceName, managedInstance, context).block();
    }

    /**
     * Delete a SCOM managed instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName, String instanceName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (instanceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter instanceName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.delete(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, instanceName, this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Delete a SCOM managed instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName, String instanceName,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (instanceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter instanceName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.delete(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            instanceName, this.client.getApiVersion(), accept, context);
    }

    /**
     * Delete a SCOM managed instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceGroupName, String instanceName) {
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(resourceGroupName, instanceName);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            this.client.getContext());
    }

    /**
     * Delete a SCOM managed instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceGroupName, String instanceName,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(resourceGroupName, instanceName, context);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            context);
    }

    /**
     * Delete a SCOM managed instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String instanceName) {
        return this.beginDeleteAsync(resourceGroupName, instanceName).getSyncPoller();
    }

    /**
     * Delete a SCOM managed instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String instanceName,
        Context context) {
        return this.beginDeleteAsync(resourceGroupName, instanceName, context).getSyncPoller();
    }

    /**
     * Delete a SCOM managed instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String instanceName) {
        return beginDeleteAsync(resourceGroupName, instanceName).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete a SCOM managed instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String instanceName, Context context) {
        return beginDeleteAsync(resourceGroupName, instanceName, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete a SCOM managed instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String instanceName) {
        deleteAsync(resourceGroupName, instanceName).block();
    }

    /**
     * Delete a SCOM managed instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String instanceName, Context context) {
        deleteAsync(resourceGroupName, instanceName, context).block();
    }

    /**
     * Scaling SCOM managed instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @param body Properties for Scaling.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties for set server count operation along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> scaleWithResponseAsync(String resourceGroupName, String instanceName,
        ScalingProperties body) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (instanceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter instanceName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.scale(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, instanceName, this.client.getApiVersion(), body, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Scaling SCOM managed instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @param body Properties for Scaling.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties for set server count operation along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> scaleWithResponseAsync(String resourceGroupName, String instanceName,
        ScalingProperties body, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (instanceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter instanceName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.scale(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            instanceName, this.client.getApiVersion(), body, accept, context);
    }

    /**
     * Scaling SCOM managed instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @param body Properties for Scaling.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of properties for set server count operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<SetServerCountResponsePropertiesInner>, SetServerCountResponsePropertiesInner>
        beginScaleAsync(String resourceGroupName, String instanceName, ScalingProperties body) {
        Mono<Response<Flux<ByteBuffer>>> mono = scaleWithResponseAsync(resourceGroupName, instanceName, body);
        return this.client.<SetServerCountResponsePropertiesInner, SetServerCountResponsePropertiesInner>getLroResult(
            mono, this.client.getHttpPipeline(), SetServerCountResponsePropertiesInner.class,
            SetServerCountResponsePropertiesInner.class, this.client.getContext());
    }

    /**
     * Scaling SCOM managed instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @param body Properties for Scaling.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of properties for set server count operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<SetServerCountResponsePropertiesInner>, SetServerCountResponsePropertiesInner>
        beginScaleAsync(String resourceGroupName, String instanceName, ScalingProperties body, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = scaleWithResponseAsync(resourceGroupName, instanceName, body, context);
        return this.client.<SetServerCountResponsePropertiesInner, SetServerCountResponsePropertiesInner>getLroResult(
            mono, this.client.getHttpPipeline(), SetServerCountResponsePropertiesInner.class,
            SetServerCountResponsePropertiesInner.class, context);
    }

    /**
     * Scaling SCOM managed instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @param body Properties for Scaling.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of properties for set server count operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<SetServerCountResponsePropertiesInner>, SetServerCountResponsePropertiesInner>
        beginScale(String resourceGroupName, String instanceName, ScalingProperties body) {
        return this.beginScaleAsync(resourceGroupName, instanceName, body).getSyncPoller();
    }

    /**
     * Scaling SCOM managed instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @param body Properties for Scaling.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of properties for set server count operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<SetServerCountResponsePropertiesInner>, SetServerCountResponsePropertiesInner>
        beginScale(String resourceGroupName, String instanceName, ScalingProperties body, Context context) {
        return this.beginScaleAsync(resourceGroupName, instanceName, body, context).getSyncPoller();
    }

    /**
     * Scaling SCOM managed instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @param body Properties for Scaling.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties for set server count operation on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SetServerCountResponsePropertiesInner> scaleAsync(String resourceGroupName, String instanceName,
        ScalingProperties body) {
        return beginScaleAsync(resourceGroupName, instanceName, body).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Scaling SCOM managed instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @param body Properties for Scaling.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties for set server count operation on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SetServerCountResponsePropertiesInner> scaleAsync(String resourceGroupName, String instanceName,
        ScalingProperties body, Context context) {
        return beginScaleAsync(resourceGroupName, instanceName, body, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Scaling SCOM managed instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @param body Properties for Scaling.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties for set server count operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SetServerCountResponsePropertiesInner scale(String resourceGroupName, String instanceName,
        ScalingProperties body) {
        return scaleAsync(resourceGroupName, instanceName, body).block();
    }

    /**
     * Scaling SCOM managed instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @param body Properties for Scaling.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties for set server count operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SetServerCountResponsePropertiesInner scale(String resourceGroupName, String instanceName,
        ScalingProperties body, Context context) {
        return scaleAsync(resourceGroupName, instanceName, body, context).block();
    }

    /**
     * Update SCOM servers with latest scom software.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties for patching servers along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> patchServersWithResponseAsync(String resourceGroupName,
        String instanceName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (instanceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter instanceName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.patchServers(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, instanceName, this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Update SCOM servers with latest scom software.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties for patching servers along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> patchServersWithResponseAsync(String resourceGroupName,
        String instanceName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (instanceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter instanceName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.patchServers(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            instanceName, this.client.getApiVersion(), accept, context);
    }

    /**
     * Update SCOM servers with latest scom software.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of properties for patching servers.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<PatchServersResponsePropertiesInner>, PatchServersResponsePropertiesInner>
        beginPatchServersAsync(String resourceGroupName, String instanceName) {
        Mono<Response<Flux<ByteBuffer>>> mono = patchServersWithResponseAsync(resourceGroupName, instanceName);
        return this.client.<PatchServersResponsePropertiesInner, PatchServersResponsePropertiesInner>getLroResult(mono,
            this.client.getHttpPipeline(), PatchServersResponsePropertiesInner.class,
            PatchServersResponsePropertiesInner.class, this.client.getContext());
    }

    /**
     * Update SCOM servers with latest scom software.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of properties for patching servers.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<PatchServersResponsePropertiesInner>, PatchServersResponsePropertiesInner>
        beginPatchServersAsync(String resourceGroupName, String instanceName, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = patchServersWithResponseAsync(resourceGroupName, instanceName, context);
        return this.client.<PatchServersResponsePropertiesInner, PatchServersResponsePropertiesInner>getLroResult(mono,
            this.client.getHttpPipeline(), PatchServersResponsePropertiesInner.class,
            PatchServersResponsePropertiesInner.class, context);
    }

    /**
     * Update SCOM servers with latest scom software.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of properties for patching servers.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<PatchServersResponsePropertiesInner>, PatchServersResponsePropertiesInner>
        beginPatchServers(String resourceGroupName, String instanceName) {
        return this.beginPatchServersAsync(resourceGroupName, instanceName).getSyncPoller();
    }

    /**
     * Update SCOM servers with latest scom software.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of properties for patching servers.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<PatchServersResponsePropertiesInner>, PatchServersResponsePropertiesInner>
        beginPatchServers(String resourceGroupName, String instanceName, Context context) {
        return this.beginPatchServersAsync(resourceGroupName, instanceName, context).getSyncPoller();
    }

    /**
     * Update SCOM servers with latest scom software.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties for patching servers on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PatchServersResponsePropertiesInner> patchServersAsync(String resourceGroupName, String instanceName) {
        return beginPatchServersAsync(resourceGroupName, instanceName).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Update SCOM servers with latest scom software.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties for patching servers on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PatchServersResponsePropertiesInner> patchServersAsync(String resourceGroupName, String instanceName,
        Context context) {
        return beginPatchServersAsync(resourceGroupName, instanceName, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Update SCOM servers with latest scom software.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties for patching servers.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PatchServersResponsePropertiesInner patchServers(String resourceGroupName, String instanceName) {
        return patchServersAsync(resourceGroupName, instanceName).block();
    }

    /**
     * Update SCOM servers with latest scom software.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties for patching servers.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PatchServersResponsePropertiesInner patchServers(String resourceGroupName, String instanceName,
        Context context) {
        return patchServersAsync(resourceGroupName, instanceName, context).block();
    }

    /**
     * Link Log Analytics workspace for SCOM monitoring instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @param body Configuration for Log Analytics linking to SCOM managed instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration for Log Analytics linking to SCOM managed instance along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> linkLogAnalyticsWithResponseAsync(String resourceGroupName,
        String instanceName, LogAnalyticsConfigurationInner body) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (instanceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter instanceName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.linkLogAnalytics(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, instanceName, this.client.getApiVersion(), body, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Link Log Analytics workspace for SCOM monitoring instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @param body Configuration for Log Analytics linking to SCOM managed instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration for Log Analytics linking to SCOM managed instance along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> linkLogAnalyticsWithResponseAsync(String resourceGroupName,
        String instanceName, LogAnalyticsConfigurationInner body, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (instanceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter instanceName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.linkLogAnalytics(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            instanceName, this.client.getApiVersion(), body, accept, context);
    }

    /**
     * Link Log Analytics workspace for SCOM monitoring instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @param body Configuration for Log Analytics linking to SCOM managed instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of configuration for Log Analytics linking to SCOM managed instance.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<LogAnalyticsConfigurationInner>, LogAnalyticsConfigurationInner>
        beginLinkLogAnalyticsAsync(String resourceGroupName, String instanceName, LogAnalyticsConfigurationInner body) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = linkLogAnalyticsWithResponseAsync(resourceGroupName, instanceName, body);
        return this.client.<LogAnalyticsConfigurationInner, LogAnalyticsConfigurationInner>getLroResult(mono,
            this.client.getHttpPipeline(), LogAnalyticsConfigurationInner.class, LogAnalyticsConfigurationInner.class,
            this.client.getContext());
    }

    /**
     * Link Log Analytics workspace for SCOM monitoring instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @param body Configuration for Log Analytics linking to SCOM managed instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of configuration for Log Analytics linking to SCOM managed instance.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<LogAnalyticsConfigurationInner>, LogAnalyticsConfigurationInner>
        beginLinkLogAnalyticsAsync(String resourceGroupName, String instanceName, LogAnalyticsConfigurationInner body,
            Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono
            = linkLogAnalyticsWithResponseAsync(resourceGroupName, instanceName, body, context);
        return this.client.<LogAnalyticsConfigurationInner, LogAnalyticsConfigurationInner>getLroResult(mono,
            this.client.getHttpPipeline(), LogAnalyticsConfigurationInner.class, LogAnalyticsConfigurationInner.class,
            context);
    }

    /**
     * Link Log Analytics workspace for SCOM monitoring instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @param body Configuration for Log Analytics linking to SCOM managed instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of configuration for Log Analytics linking to SCOM managed instance.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<LogAnalyticsConfigurationInner>, LogAnalyticsConfigurationInner>
        beginLinkLogAnalytics(String resourceGroupName, String instanceName, LogAnalyticsConfigurationInner body) {
        return this.beginLinkLogAnalyticsAsync(resourceGroupName, instanceName, body).getSyncPoller();
    }

    /**
     * Link Log Analytics workspace for SCOM monitoring instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @param body Configuration for Log Analytics linking to SCOM managed instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of configuration for Log Analytics linking to SCOM managed instance.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<LogAnalyticsConfigurationInner>, LogAnalyticsConfigurationInner> beginLinkLogAnalytics(
        String resourceGroupName, String instanceName, LogAnalyticsConfigurationInner body, Context context) {
        return this.beginLinkLogAnalyticsAsync(resourceGroupName, instanceName, body, context).getSyncPoller();
    }

    /**
     * Link Log Analytics workspace for SCOM monitoring instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @param body Configuration for Log Analytics linking to SCOM managed instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration for Log Analytics linking to SCOM managed instance on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<LogAnalyticsConfigurationInner> linkLogAnalyticsAsync(String resourceGroupName, String instanceName,
        LogAnalyticsConfigurationInner body) {
        return beginLinkLogAnalyticsAsync(resourceGroupName, instanceName, body).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Link Log Analytics workspace for SCOM monitoring instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @param body Configuration for Log Analytics linking to SCOM managed instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration for Log Analytics linking to SCOM managed instance on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<LogAnalyticsConfigurationInner> linkLogAnalyticsAsync(String resourceGroupName, String instanceName,
        LogAnalyticsConfigurationInner body, Context context) {
        return beginLinkLogAnalyticsAsync(resourceGroupName, instanceName, body, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Link Log Analytics workspace for SCOM monitoring instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @param body Configuration for Log Analytics linking to SCOM managed instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration for Log Analytics linking to SCOM managed instance.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public LogAnalyticsConfigurationInner linkLogAnalytics(String resourceGroupName, String instanceName,
        LogAnalyticsConfigurationInner body) {
        return linkLogAnalyticsAsync(resourceGroupName, instanceName, body).block();
    }

    /**
     * Link Log Analytics workspace for SCOM monitoring instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @param body Configuration for Log Analytics linking to SCOM managed instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration for Log Analytics linking to SCOM managed instance.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public LogAnalyticsConfigurationInner linkLogAnalytics(String resourceGroupName, String instanceName,
        LogAnalyticsConfigurationInner body, Context context) {
        return linkLogAnalyticsAsync(resourceGroupName, instanceName, body, context).block();
    }

    /**
     * Unlink Log Analytics workspace for SCOM monitoring instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties for unlinking log analytics along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> unlinkLogAnalyticsWithResponseAsync(String resourceGroupName,
        String instanceName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (instanceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter instanceName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.unlinkLogAnalytics(this.client.getEndpoint(), this.client.getSubscriptionId(),
                    resourceGroupName, instanceName, this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Unlink Log Analytics workspace for SCOM monitoring instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties for unlinking log analytics along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> unlinkLogAnalyticsWithResponseAsync(String resourceGroupName,
        String instanceName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (instanceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter instanceName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.unlinkLogAnalytics(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            instanceName, this.client.getApiVersion(), accept, context);
    }

    /**
     * Unlink Log Analytics workspace for SCOM monitoring instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of properties for unlinking log analytics.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<UnlinkLogAnalyticsResponsePropertiesInner>, UnlinkLogAnalyticsResponsePropertiesInner>
        beginUnlinkLogAnalyticsAsync(String resourceGroupName, String instanceName) {
        Mono<Response<Flux<ByteBuffer>>> mono = unlinkLogAnalyticsWithResponseAsync(resourceGroupName, instanceName);
        return this.client
            .<UnlinkLogAnalyticsResponsePropertiesInner, UnlinkLogAnalyticsResponsePropertiesInner>getLroResult(mono,
                this.client.getHttpPipeline(), UnlinkLogAnalyticsResponsePropertiesInner.class,
                UnlinkLogAnalyticsResponsePropertiesInner.class, this.client.getContext());
    }

    /**
     * Unlink Log Analytics workspace for SCOM monitoring instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of properties for unlinking log analytics.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<UnlinkLogAnalyticsResponsePropertiesInner>, UnlinkLogAnalyticsResponsePropertiesInner>
        beginUnlinkLogAnalyticsAsync(String resourceGroupName, String instanceName, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono
            = unlinkLogAnalyticsWithResponseAsync(resourceGroupName, instanceName, context);
        return this.client
            .<UnlinkLogAnalyticsResponsePropertiesInner, UnlinkLogAnalyticsResponsePropertiesInner>getLroResult(mono,
                this.client.getHttpPipeline(), UnlinkLogAnalyticsResponsePropertiesInner.class,
                UnlinkLogAnalyticsResponsePropertiesInner.class, context);
    }

    /**
     * Unlink Log Analytics workspace for SCOM monitoring instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of properties for unlinking log analytics.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<UnlinkLogAnalyticsResponsePropertiesInner>, UnlinkLogAnalyticsResponsePropertiesInner>
        beginUnlinkLogAnalytics(String resourceGroupName, String instanceName) {
        return this.beginUnlinkLogAnalyticsAsync(resourceGroupName, instanceName).getSyncPoller();
    }

    /**
     * Unlink Log Analytics workspace for SCOM monitoring instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of properties for unlinking log analytics.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<UnlinkLogAnalyticsResponsePropertiesInner>, UnlinkLogAnalyticsResponsePropertiesInner>
        beginUnlinkLogAnalytics(String resourceGroupName, String instanceName, Context context) {
        return this.beginUnlinkLogAnalyticsAsync(resourceGroupName, instanceName, context).getSyncPoller();
    }

    /**
     * Unlink Log Analytics workspace for SCOM monitoring instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties for unlinking log analytics on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<UnlinkLogAnalyticsResponsePropertiesInner> unlinkLogAnalyticsAsync(String resourceGroupName,
        String instanceName) {
        return beginUnlinkLogAnalyticsAsync(resourceGroupName, instanceName).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Unlink Log Analytics workspace for SCOM monitoring instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties for unlinking log analytics on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<UnlinkLogAnalyticsResponsePropertiesInner> unlinkLogAnalyticsAsync(String resourceGroupName,
        String instanceName, Context context) {
        return beginUnlinkLogAnalyticsAsync(resourceGroupName, instanceName, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Unlink Log Analytics workspace for SCOM monitoring instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties for unlinking log analytics.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public UnlinkLogAnalyticsResponsePropertiesInner unlinkLogAnalytics(String resourceGroupName, String instanceName) {
        return unlinkLogAnalyticsAsync(resourceGroupName, instanceName).block();
    }

    /**
     * Unlink Log Analytics workspace for SCOM monitoring instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties for unlinking log analytics.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public UnlinkLogAnalyticsResponsePropertiesInner unlinkLogAnalytics(String resourceGroupName, String instanceName,
        Context context) {
        return unlinkLogAnalyticsAsync(resourceGroupName, instanceName, context).block();
    }

    /**
     * Update configuration for log analytics linking for SCOM monitoring instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @param body Updated configuration for Log Analytics linking.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return updated configuration for Log Analytics linking along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateLogAnalyticsWithResponseAsync(String resourceGroupName,
        String instanceName, LogAnalyticsUpdateConfigurationInner body) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (instanceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter instanceName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.updateLogAnalytics(this.client.getEndpoint(), this.client.getSubscriptionId(),
                    resourceGroupName, instanceName, this.client.getApiVersion(), body, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Update configuration for log analytics linking for SCOM monitoring instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @param body Updated configuration for Log Analytics linking.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return updated configuration for Log Analytics linking along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateLogAnalyticsWithResponseAsync(String resourceGroupName,
        String instanceName, LogAnalyticsUpdateConfigurationInner body, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (instanceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter instanceName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.updateLogAnalytics(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            instanceName, this.client.getApiVersion(), body, accept, context);
    }

    /**
     * Update configuration for log analytics linking for SCOM monitoring instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @param body Updated configuration for Log Analytics linking.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of updated configuration for Log Analytics linking.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<LogAnalyticsUpdateConfigurationInner>, LogAnalyticsUpdateConfigurationInner>
        beginUpdateLogAnalyticsAsync(String resourceGroupName, String instanceName,
            LogAnalyticsUpdateConfigurationInner body) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = updateLogAnalyticsWithResponseAsync(resourceGroupName, instanceName, body);
        return this.client.<LogAnalyticsUpdateConfigurationInner, LogAnalyticsUpdateConfigurationInner>getLroResult(
            mono, this.client.getHttpPipeline(), LogAnalyticsUpdateConfigurationInner.class,
            LogAnalyticsUpdateConfigurationInner.class, this.client.getContext());
    }

    /**
     * Update configuration for log analytics linking for SCOM monitoring instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @param body Updated configuration for Log Analytics linking.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of updated configuration for Log Analytics linking.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<LogAnalyticsUpdateConfigurationInner>, LogAnalyticsUpdateConfigurationInner>
        beginUpdateLogAnalyticsAsync(String resourceGroupName, String instanceName,
            LogAnalyticsUpdateConfigurationInner body, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono
            = updateLogAnalyticsWithResponseAsync(resourceGroupName, instanceName, body, context);
        return this.client.<LogAnalyticsUpdateConfigurationInner, LogAnalyticsUpdateConfigurationInner>getLroResult(
            mono, this.client.getHttpPipeline(), LogAnalyticsUpdateConfigurationInner.class,
            LogAnalyticsUpdateConfigurationInner.class, context);
    }

    /**
     * Update configuration for log analytics linking for SCOM monitoring instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @param body Updated configuration for Log Analytics linking.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of updated configuration for Log Analytics linking.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<LogAnalyticsUpdateConfigurationInner>, LogAnalyticsUpdateConfigurationInner>
        beginUpdateLogAnalytics(String resourceGroupName, String instanceName,
            LogAnalyticsUpdateConfigurationInner body) {
        return this.beginUpdateLogAnalyticsAsync(resourceGroupName, instanceName, body).getSyncPoller();
    }

    /**
     * Update configuration for log analytics linking for SCOM monitoring instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @param body Updated configuration for Log Analytics linking.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of updated configuration for Log Analytics linking.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<LogAnalyticsUpdateConfigurationInner>, LogAnalyticsUpdateConfigurationInner>
        beginUpdateLogAnalytics(String resourceGroupName, String instanceName,
            LogAnalyticsUpdateConfigurationInner body, Context context) {
        return this.beginUpdateLogAnalyticsAsync(resourceGroupName, instanceName, body, context).getSyncPoller();
    }

    /**
     * Update configuration for log analytics linking for SCOM monitoring instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @param body Updated configuration for Log Analytics linking.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return updated configuration for Log Analytics linking on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<LogAnalyticsUpdateConfigurationInner> updateLogAnalyticsAsync(String resourceGroupName,
        String instanceName, LogAnalyticsUpdateConfigurationInner body) {
        return beginUpdateLogAnalyticsAsync(resourceGroupName, instanceName, body).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Update configuration for log analytics linking for SCOM monitoring instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @param body Updated configuration for Log Analytics linking.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return updated configuration for Log Analytics linking on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<LogAnalyticsUpdateConfigurationInner> updateLogAnalyticsAsync(String resourceGroupName,
        String instanceName, LogAnalyticsUpdateConfigurationInner body, Context context) {
        return beginUpdateLogAnalyticsAsync(resourceGroupName, instanceName, body, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Update configuration for log analytics linking for SCOM monitoring instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @param body Updated configuration for Log Analytics linking.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return updated configuration for Log Analytics linking.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public LogAnalyticsUpdateConfigurationInner updateLogAnalytics(String resourceGroupName, String instanceName,
        LogAnalyticsUpdateConfigurationInner body) {
        return updateLogAnalyticsAsync(resourceGroupName, instanceName, body).block();
    }

    /**
     * Update configuration for log analytics linking for SCOM monitoring instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the Azure Monitor Operations Manager Managed Instance (SCOM MI).
     * @param body Updated configuration for Log Analytics linking.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return updated configuration for Log Analytics linking.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public LogAnalyticsUpdateConfigurationInner updateLogAnalytics(String resourceGroupName, String instanceName,
        LogAnalyticsUpdateConfigurationInner body, Context context) {
        return updateLogAnalyticsAsync(resourceGroupName, instanceName, body, context).block();
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a paged list of SCOM managed instances along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ManagedInstanceInner>> listByResourceGroupNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listByResourceGroupNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<ManagedInstanceInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a paged list of SCOM managed instances along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ManagedInstanceInner>> listByResourceGroupNextSinglePageAsync(String nextLink,
        Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listByResourceGroupNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a paged list of SCOM managed instances along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ManagedInstanceInner>> listBySubscriptionNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listBySubscriptionNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<ManagedInstanceInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a paged list of SCOM managed instances along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ManagedInstanceInner>> listBySubscriptionNextSinglePageAsync(String nextLink,
        Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listBySubscriptionNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }
}
