// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.scom.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.scom.fluent.InstancesClient;
import com.azure.resourcemanager.scom.fluent.models.MonitoringInstanceInner;
import com.azure.resourcemanager.scom.models.MonitoringInstanceList;
import com.azure.resourcemanager.scom.models.MonitoringInstancePatch;
import com.azure.resourcemanager.scom.models.ScalingProperties;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in InstancesClient. */
public final class InstancesClientImpl implements InstancesClient {
    /** The proxy service used to perform REST calls. */
    private final InstancesService service;

    /** The service client containing this operation class. */
    private final AzureApiForManagingScomMonitoringInstancesImpl client;

    /**
     * Initializes an instance of InstancesClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    InstancesClientImpl(AzureApiForManagingScomMonitoringInstancesImpl client) {
        this.service =
            RestProxy.create(InstancesService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AzureApiForManagingScomMonitoringInstancesInstances to be used by the
     * proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "AzureApiForManagingS")
    public interface InstancesService {
        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scom/managedInstances")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<MonitoringInstanceList>> listByResourceGroup(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("/subscriptions/{subscriptionId}/providers/Microsoft.Scom/managedInstances")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<MonitoringInstanceList>> list(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scom/managedInstances/{instanceName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<MonitoringInstanceInner>> getByResourceGroup(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("instanceName") String instanceName,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scom/managedInstances/{instanceName}")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdate(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("instanceName") String instanceName,
            @QueryParam("api-version") String apiVersion,
            @QueryParam("validationMode") Boolean validationMode,
            @BodyParam("application/json") MonitoringInstanceInner monitoringInstance,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Patch(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scom/managedInstances/{instanceName}")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> update(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("instanceName") String instanceName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") MonitoringInstancePatch monitoringInstance,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scom/managedInstances/{instanceName}")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("instanceName") String instanceName,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scom/managedInstances/{instanceName}/setServerCount")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> scale(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("instanceName") String instanceName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") ScalingProperties body,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scom/managedInstances/{instanceName}/patchServers")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> patchServers(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("instanceName") String instanceName,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<MonitoringInstanceList>> listByResourceGroupNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<MonitoringInstanceList>> listBySubscriptionNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Lists all SCOM monitoring instances in a resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a paged list of SCOM monitoring instances along with {@link PagedResponse} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<MonitoringInstanceInner>> listByResourceGroupSinglePageAsync(String resourceGroupName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listByResourceGroup(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            this.client.getApiVersion(),
                            accept,
                            context))
            .<PagedResponse<MonitoringInstanceInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Lists all SCOM monitoring instances in a resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a paged list of SCOM monitoring instances along with {@link PagedResponse} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<MonitoringInstanceInner>> listByResourceGroupSinglePageAsync(
        String resourceGroupName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByResourceGroup(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                this.client.getApiVersion(),
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Lists all SCOM monitoring instances in a resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a paged list of SCOM monitoring instances as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<MonitoringInstanceInner> listByResourceGroupAsync(String resourceGroupName) {
        return new PagedFlux<>(
            () -> listByResourceGroupSinglePageAsync(resourceGroupName),
            nextLink -> listByResourceGroupNextSinglePageAsync(nextLink));
    }

    /**
     * Lists all SCOM monitoring instances in a resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a paged list of SCOM monitoring instances as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<MonitoringInstanceInner> listByResourceGroupAsync(String resourceGroupName, Context context) {
        return new PagedFlux<>(
            () -> listByResourceGroupSinglePageAsync(resourceGroupName, context),
            nextLink -> listByResourceGroupNextSinglePageAsync(nextLink, context));
    }

    /**
     * Lists all SCOM monitoring instances in a resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a paged list of SCOM monitoring instances as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<MonitoringInstanceInner> listByResourceGroup(String resourceGroupName) {
        return new PagedIterable<>(listByResourceGroupAsync(resourceGroupName));
    }

    /**
     * Lists all SCOM monitoring instances in a resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a paged list of SCOM monitoring instances as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<MonitoringInstanceInner> listByResourceGroup(String resourceGroupName, Context context) {
        return new PagedIterable<>(listByResourceGroupAsync(resourceGroupName, context));
    }

    /**
     * Lists all SCOM monitoring instances in a subscription.
     *
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a paged list of SCOM monitoring instances along with {@link PagedResponse} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<MonitoringInstanceInner>> listSinglePageAsync() {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .list(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            this.client.getApiVersion(),
                            accept,
                            context))
            .<PagedResponse<MonitoringInstanceInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Lists all SCOM monitoring instances in a subscription.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a paged list of SCOM monitoring instances along with {@link PagedResponse} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<MonitoringInstanceInner>> listSinglePageAsync(Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .list(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                this.client.getApiVersion(),
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Lists all SCOM monitoring instances in a subscription.
     *
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a paged list of SCOM monitoring instances as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<MonitoringInstanceInner> listAsync() {
        return new PagedFlux<>(
            () -> listSinglePageAsync(), nextLink -> listBySubscriptionNextSinglePageAsync(nextLink));
    }

    /**
     * Lists all SCOM monitoring instances in a subscription.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a paged list of SCOM monitoring instances as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<MonitoringInstanceInner> listAsync(Context context) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(context), nextLink -> listBySubscriptionNextSinglePageAsync(nextLink, context));
    }

    /**
     * Lists all SCOM monitoring instances in a subscription.
     *
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a paged list of SCOM monitoring instances as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<MonitoringInstanceInner> list() {
        return new PagedIterable<>(listAsync());
    }

    /**
     * Lists all SCOM monitoring instances in a subscription.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a paged list of SCOM monitoring instances as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<MonitoringInstanceInner> list(Context context) {
        return new PagedIterable<>(listAsync(context));
    }

    /**
     * Get SCOM monitoring instance details.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the SCOM monitoring instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return sCOM monitoring instance details along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<MonitoringInstanceInner>> getByResourceGroupWithResponseAsync(
        String resourceGroupName, String instanceName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (instanceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter instanceName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getByResourceGroup(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            instanceName,
                            this.client.getApiVersion(),
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get SCOM monitoring instance details.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the SCOM monitoring instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return sCOM monitoring instance details along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<MonitoringInstanceInner>> getByResourceGroupWithResponseAsync(
        String resourceGroupName, String instanceName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (instanceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter instanceName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .getByResourceGroup(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                instanceName,
                this.client.getApiVersion(),
                accept,
                context);
    }

    /**
     * Get SCOM monitoring instance details.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the SCOM monitoring instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return sCOM monitoring instance details on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<MonitoringInstanceInner> getByResourceGroupAsync(String resourceGroupName, String instanceName) {
        return getByResourceGroupWithResponseAsync(resourceGroupName, instanceName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get SCOM monitoring instance details.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the SCOM monitoring instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return sCOM monitoring instance details along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<MonitoringInstanceInner> getByResourceGroupWithResponse(
        String resourceGroupName, String instanceName, Context context) {
        return getByResourceGroupWithResponseAsync(resourceGroupName, instanceName, context).block();
    }

    /**
     * Get SCOM monitoring instance details.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the SCOM monitoring instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return sCOM monitoring instance details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MonitoringInstanceInner getByResourceGroup(String resourceGroupName, String instanceName) {
        return getByResourceGroupWithResponse(resourceGroupName, instanceName, Context.NONE).getValue();
    }

    /**
     * Create or update SCOM monitoring instance.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the SCOM monitoring instance.
     * @param monitoringInstance SCOM Monitoring Instance.
     * @param validationMode Validation mode for the SCOM monitoring instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SCOM instance resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(
        String resourceGroupName,
        String instanceName,
        MonitoringInstanceInner monitoringInstance,
        Boolean validationMode) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (instanceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter instanceName is required and cannot be null."));
        }
        if (monitoringInstance == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter monitoringInstance is required and cannot be null."));
        } else {
            monitoringInstance.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .createOrUpdate(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            instanceName,
                            this.client.getApiVersion(),
                            validationMode,
                            monitoringInstance,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create or update SCOM monitoring instance.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the SCOM monitoring instance.
     * @param monitoringInstance SCOM Monitoring Instance.
     * @param validationMode Validation mode for the SCOM monitoring instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SCOM instance resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(
        String resourceGroupName,
        String instanceName,
        MonitoringInstanceInner monitoringInstance,
        Boolean validationMode,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (instanceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter instanceName is required and cannot be null."));
        }
        if (monitoringInstance == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter monitoringInstance is required and cannot be null."));
        } else {
            monitoringInstance.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .createOrUpdate(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                instanceName,
                this.client.getApiVersion(),
                validationMode,
                monitoringInstance,
                accept,
                context);
    }

    /**
     * Create or update SCOM monitoring instance.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the SCOM monitoring instance.
     * @param monitoringInstance SCOM Monitoring Instance.
     * @param validationMode Validation mode for the SCOM monitoring instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of a SCOM instance resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<MonitoringInstanceInner>, MonitoringInstanceInner> beginCreateOrUpdateAsync(
        String resourceGroupName,
        String instanceName,
        MonitoringInstanceInner monitoringInstance,
        Boolean validationMode) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            createOrUpdateWithResponseAsync(resourceGroupName, instanceName, monitoringInstance, validationMode);
        return this
            .client
            .<MonitoringInstanceInner, MonitoringInstanceInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                MonitoringInstanceInner.class,
                MonitoringInstanceInner.class,
                this.client.getContext());
    }

    /**
     * Create or update SCOM monitoring instance.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the SCOM monitoring instance.
     * @param monitoringInstance SCOM Monitoring Instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of a SCOM instance resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<MonitoringInstanceInner>, MonitoringInstanceInner> beginCreateOrUpdateAsync(
        String resourceGroupName, String instanceName, MonitoringInstanceInner monitoringInstance) {
        final Boolean validationMode = null;
        Mono<Response<Flux<ByteBuffer>>> mono =
            createOrUpdateWithResponseAsync(resourceGroupName, instanceName, monitoringInstance, validationMode);
        return this
            .client
            .<MonitoringInstanceInner, MonitoringInstanceInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                MonitoringInstanceInner.class,
                MonitoringInstanceInner.class,
                this.client.getContext());
    }

    /**
     * Create or update SCOM monitoring instance.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the SCOM monitoring instance.
     * @param monitoringInstance SCOM Monitoring Instance.
     * @param validationMode Validation mode for the SCOM monitoring instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of a SCOM instance resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<MonitoringInstanceInner>, MonitoringInstanceInner> beginCreateOrUpdateAsync(
        String resourceGroupName,
        String instanceName,
        MonitoringInstanceInner monitoringInstance,
        Boolean validationMode,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            createOrUpdateWithResponseAsync(
                resourceGroupName, instanceName, monitoringInstance, validationMode, context);
        return this
            .client
            .<MonitoringInstanceInner, MonitoringInstanceInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                MonitoringInstanceInner.class,
                MonitoringInstanceInner.class,
                context);
    }

    /**
     * Create or update SCOM monitoring instance.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the SCOM monitoring instance.
     * @param monitoringInstance SCOM Monitoring Instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a SCOM instance resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<MonitoringInstanceInner>, MonitoringInstanceInner> beginCreateOrUpdate(
        String resourceGroupName, String instanceName, MonitoringInstanceInner monitoringInstance) {
        final Boolean validationMode = null;
        return this
            .beginCreateOrUpdateAsync(resourceGroupName, instanceName, monitoringInstance, validationMode)
            .getSyncPoller();
    }

    /**
     * Create or update SCOM monitoring instance.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the SCOM monitoring instance.
     * @param monitoringInstance SCOM Monitoring Instance.
     * @param validationMode Validation mode for the SCOM monitoring instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a SCOM instance resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<MonitoringInstanceInner>, MonitoringInstanceInner> beginCreateOrUpdate(
        String resourceGroupName,
        String instanceName,
        MonitoringInstanceInner monitoringInstance,
        Boolean validationMode,
        Context context) {
        return this
            .beginCreateOrUpdateAsync(resourceGroupName, instanceName, monitoringInstance, validationMode, context)
            .getSyncPoller();
    }

    /**
     * Create or update SCOM monitoring instance.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the SCOM monitoring instance.
     * @param monitoringInstance SCOM Monitoring Instance.
     * @param validationMode Validation mode for the SCOM monitoring instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SCOM instance resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<MonitoringInstanceInner> createOrUpdateAsync(
        String resourceGroupName,
        String instanceName,
        MonitoringInstanceInner monitoringInstance,
        Boolean validationMode) {
        return beginCreateOrUpdateAsync(resourceGroupName, instanceName, monitoringInstance, validationMode)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create or update SCOM monitoring instance.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the SCOM monitoring instance.
     * @param monitoringInstance SCOM Monitoring Instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SCOM instance resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<MonitoringInstanceInner> createOrUpdateAsync(
        String resourceGroupName, String instanceName, MonitoringInstanceInner monitoringInstance) {
        final Boolean validationMode = null;
        return beginCreateOrUpdateAsync(resourceGroupName, instanceName, monitoringInstance, validationMode)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create or update SCOM monitoring instance.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the SCOM monitoring instance.
     * @param monitoringInstance SCOM Monitoring Instance.
     * @param validationMode Validation mode for the SCOM monitoring instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SCOM instance resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<MonitoringInstanceInner> createOrUpdateAsync(
        String resourceGroupName,
        String instanceName,
        MonitoringInstanceInner monitoringInstance,
        Boolean validationMode,
        Context context) {
        return beginCreateOrUpdateAsync(resourceGroupName, instanceName, monitoringInstance, validationMode, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create or update SCOM monitoring instance.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the SCOM monitoring instance.
     * @param monitoringInstance SCOM Monitoring Instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SCOM instance resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MonitoringInstanceInner createOrUpdate(
        String resourceGroupName, String instanceName, MonitoringInstanceInner monitoringInstance) {
        final Boolean validationMode = null;
        return createOrUpdateAsync(resourceGroupName, instanceName, monitoringInstance, validationMode).block();
    }

    /**
     * Create or update SCOM monitoring instance.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the SCOM monitoring instance.
     * @param monitoringInstance SCOM Monitoring Instance.
     * @param validationMode Validation mode for the SCOM monitoring instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SCOM instance resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MonitoringInstanceInner createOrUpdate(
        String resourceGroupName,
        String instanceName,
        MonitoringInstanceInner monitoringInstance,
        Boolean validationMode,
        Context context) {
        return createOrUpdateAsync(resourceGroupName, instanceName, monitoringInstance, validationMode, context)
            .block();
    }

    /**
     * Patch SCOM monitoring instance.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the SCOM monitoring instance.
     * @param monitoringInstance SCOM monitoring instance properties update.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SCOM instance resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(
        String resourceGroupName, String instanceName, MonitoringInstancePatch monitoringInstance) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (instanceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter instanceName is required and cannot be null."));
        }
        if (monitoringInstance != null) {
            monitoringInstance.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .update(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            instanceName,
                            this.client.getApiVersion(),
                            monitoringInstance,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Patch SCOM monitoring instance.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the SCOM monitoring instance.
     * @param monitoringInstance SCOM monitoring instance properties update.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SCOM instance resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(
        String resourceGroupName, String instanceName, MonitoringInstancePatch monitoringInstance, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (instanceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter instanceName is required and cannot be null."));
        }
        if (monitoringInstance != null) {
            monitoringInstance.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .update(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                instanceName,
                this.client.getApiVersion(),
                monitoringInstance,
                accept,
                context);
    }

    /**
     * Patch SCOM monitoring instance.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the SCOM monitoring instance.
     * @param monitoringInstance SCOM monitoring instance properties update.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of a SCOM instance resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<MonitoringInstanceInner>, MonitoringInstanceInner> beginUpdateAsync(
        String resourceGroupName, String instanceName, MonitoringInstancePatch monitoringInstance) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            updateWithResponseAsync(resourceGroupName, instanceName, monitoringInstance);
        return this
            .client
            .<MonitoringInstanceInner, MonitoringInstanceInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                MonitoringInstanceInner.class,
                MonitoringInstanceInner.class,
                this.client.getContext());
    }

    /**
     * Patch SCOM monitoring instance.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the SCOM monitoring instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of a SCOM instance resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<MonitoringInstanceInner>, MonitoringInstanceInner> beginUpdateAsync(
        String resourceGroupName, String instanceName) {
        final MonitoringInstancePatch monitoringInstance = null;
        Mono<Response<Flux<ByteBuffer>>> mono =
            updateWithResponseAsync(resourceGroupName, instanceName, monitoringInstance);
        return this
            .client
            .<MonitoringInstanceInner, MonitoringInstanceInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                MonitoringInstanceInner.class,
                MonitoringInstanceInner.class,
                this.client.getContext());
    }

    /**
     * Patch SCOM monitoring instance.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the SCOM monitoring instance.
     * @param monitoringInstance SCOM monitoring instance properties update.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of a SCOM instance resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<MonitoringInstanceInner>, MonitoringInstanceInner> beginUpdateAsync(
        String resourceGroupName, String instanceName, MonitoringInstancePatch monitoringInstance, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            updateWithResponseAsync(resourceGroupName, instanceName, monitoringInstance, context);
        return this
            .client
            .<MonitoringInstanceInner, MonitoringInstanceInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                MonitoringInstanceInner.class,
                MonitoringInstanceInner.class,
                context);
    }

    /**
     * Patch SCOM monitoring instance.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the SCOM monitoring instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a SCOM instance resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<MonitoringInstanceInner>, MonitoringInstanceInner> beginUpdate(
        String resourceGroupName, String instanceName) {
        final MonitoringInstancePatch monitoringInstance = null;
        return this.beginUpdateAsync(resourceGroupName, instanceName, monitoringInstance).getSyncPoller();
    }

    /**
     * Patch SCOM monitoring instance.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the SCOM monitoring instance.
     * @param monitoringInstance SCOM monitoring instance properties update.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a SCOM instance resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<MonitoringInstanceInner>, MonitoringInstanceInner> beginUpdate(
        String resourceGroupName, String instanceName, MonitoringInstancePatch monitoringInstance, Context context) {
        return this.beginUpdateAsync(resourceGroupName, instanceName, monitoringInstance, context).getSyncPoller();
    }

    /**
     * Patch SCOM monitoring instance.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the SCOM monitoring instance.
     * @param monitoringInstance SCOM monitoring instance properties update.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SCOM instance resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<MonitoringInstanceInner> updateAsync(
        String resourceGroupName, String instanceName, MonitoringInstancePatch monitoringInstance) {
        return beginUpdateAsync(resourceGroupName, instanceName, monitoringInstance)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Patch SCOM monitoring instance.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the SCOM monitoring instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SCOM instance resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<MonitoringInstanceInner> updateAsync(String resourceGroupName, String instanceName) {
        final MonitoringInstancePatch monitoringInstance = null;
        return beginUpdateAsync(resourceGroupName, instanceName, monitoringInstance)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Patch SCOM monitoring instance.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the SCOM monitoring instance.
     * @param monitoringInstance SCOM monitoring instance properties update.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SCOM instance resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<MonitoringInstanceInner> updateAsync(
        String resourceGroupName, String instanceName, MonitoringInstancePatch monitoringInstance, Context context) {
        return beginUpdateAsync(resourceGroupName, instanceName, monitoringInstance, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Patch SCOM monitoring instance.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the SCOM monitoring instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SCOM instance resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MonitoringInstanceInner update(String resourceGroupName, String instanceName) {
        final MonitoringInstancePatch monitoringInstance = null;
        return updateAsync(resourceGroupName, instanceName, monitoringInstance).block();
    }

    /**
     * Patch SCOM monitoring instance.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the SCOM monitoring instance.
     * @param monitoringInstance SCOM monitoring instance properties update.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SCOM instance resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MonitoringInstanceInner update(
        String resourceGroupName, String instanceName, MonitoringInstancePatch monitoringInstance, Context context) {
        return updateAsync(resourceGroupName, instanceName, monitoringInstance, context).block();
    }

    /**
     * Delete a SCOM monitoring instance.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the SCOM monitoring instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName, String instanceName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (instanceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter instanceName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .delete(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            instanceName,
                            this.client.getApiVersion(),
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Delete a SCOM monitoring instance.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the SCOM monitoring instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(
        String resourceGroupName, String instanceName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (instanceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter instanceName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .delete(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                instanceName,
                this.client.getApiVersion(),
                accept,
                context);
    }

    /**
     * Delete a SCOM monitoring instance.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the SCOM monitoring instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceGroupName, String instanceName) {
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(resourceGroupName, instanceName);
        return this
            .client
            .<Void, Void>getLroResult(
                mono, this.client.getHttpPipeline(), Void.class, Void.class, this.client.getContext());
    }

    /**
     * Delete a SCOM monitoring instance.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the SCOM monitoring instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(
        String resourceGroupName, String instanceName, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(resourceGroupName, instanceName, context);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, context);
    }

    /**
     * Delete a SCOM monitoring instance.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the SCOM monitoring instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String instanceName) {
        return this.beginDeleteAsync(resourceGroupName, instanceName).getSyncPoller();
    }

    /**
     * Delete a SCOM monitoring instance.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the SCOM monitoring instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(
        String resourceGroupName, String instanceName, Context context) {
        return this.beginDeleteAsync(resourceGroupName, instanceName, context).getSyncPoller();
    }

    /**
     * Delete a SCOM monitoring instance.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the SCOM monitoring instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String instanceName) {
        return beginDeleteAsync(resourceGroupName, instanceName).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete a SCOM monitoring instance.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the SCOM monitoring instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String instanceName, Context context) {
        return beginDeleteAsync(resourceGroupName, instanceName, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete a SCOM monitoring instance.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the SCOM monitoring instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String instanceName) {
        deleteAsync(resourceGroupName, instanceName).block();
    }

    /**
     * Delete a SCOM monitoring instance.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the SCOM monitoring instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String instanceName, Context context) {
        deleteAsync(resourceGroupName, instanceName, context).block();
    }

    /**
     * Scaling SCOM monitoring instance.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the SCOM monitoring instance.
     * @param body Properties for Scaling.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> scaleWithResponseAsync(
        String resourceGroupName, String instanceName, ScalingProperties body) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (instanceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter instanceName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .scale(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            instanceName,
                            this.client.getApiVersion(),
                            body,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Scaling SCOM monitoring instance.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the SCOM monitoring instance.
     * @param body Properties for Scaling.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> scaleWithResponseAsync(
        String resourceGroupName, String instanceName, ScalingProperties body, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (instanceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter instanceName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .scale(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                instanceName,
                this.client.getApiVersion(),
                body,
                accept,
                context);
    }

    /**
     * Scaling SCOM monitoring instance.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the SCOM monitoring instance.
     * @param body Properties for Scaling.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginScaleAsync(
        String resourceGroupName, String instanceName, ScalingProperties body) {
        Mono<Response<Flux<ByteBuffer>>> mono = scaleWithResponseAsync(resourceGroupName, instanceName, body);
        return this
            .client
            .<Void, Void>getLroResult(
                mono, this.client.getHttpPipeline(), Void.class, Void.class, this.client.getContext());
    }

    /**
     * Scaling SCOM monitoring instance.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the SCOM monitoring instance.
     * @param body Properties for Scaling.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginScaleAsync(
        String resourceGroupName, String instanceName, ScalingProperties body, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = scaleWithResponseAsync(resourceGroupName, instanceName, body, context);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, context);
    }

    /**
     * Scaling SCOM monitoring instance.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the SCOM monitoring instance.
     * @param body Properties for Scaling.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginScale(
        String resourceGroupName, String instanceName, ScalingProperties body) {
        return this.beginScaleAsync(resourceGroupName, instanceName, body).getSyncPoller();
    }

    /**
     * Scaling SCOM monitoring instance.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the SCOM monitoring instance.
     * @param body Properties for Scaling.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginScale(
        String resourceGroupName, String instanceName, ScalingProperties body, Context context) {
        return this.beginScaleAsync(resourceGroupName, instanceName, body, context).getSyncPoller();
    }

    /**
     * Scaling SCOM monitoring instance.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the SCOM monitoring instance.
     * @param body Properties for Scaling.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> scaleAsync(String resourceGroupName, String instanceName, ScalingProperties body) {
        return beginScaleAsync(resourceGroupName, instanceName, body)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Scaling SCOM monitoring instance.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the SCOM monitoring instance.
     * @param body Properties for Scaling.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> scaleAsync(
        String resourceGroupName, String instanceName, ScalingProperties body, Context context) {
        return beginScaleAsync(resourceGroupName, instanceName, body, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Scaling SCOM monitoring instance.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the SCOM monitoring instance.
     * @param body Properties for Scaling.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void scale(String resourceGroupName, String instanceName, ScalingProperties body) {
        scaleAsync(resourceGroupName, instanceName, body).block();
    }

    /**
     * Scaling SCOM monitoring instance.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the SCOM monitoring instance.
     * @param body Properties for Scaling.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void scale(String resourceGroupName, String instanceName, ScalingProperties body, Context context) {
        scaleAsync(resourceGroupName, instanceName, body, context).block();
    }

    /**
     * Update SCOM servers with latest scom software.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the SCOM monitoring instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> patchServersWithResponseAsync(
        String resourceGroupName, String instanceName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (instanceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter instanceName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .patchServers(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            instanceName,
                            this.client.getApiVersion(),
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Update SCOM servers with latest scom software.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the SCOM monitoring instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> patchServersWithResponseAsync(
        String resourceGroupName, String instanceName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (instanceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter instanceName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .patchServers(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                instanceName,
                this.client.getApiVersion(),
                accept,
                context);
    }

    /**
     * Update SCOM servers with latest scom software.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the SCOM monitoring instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginPatchServersAsync(String resourceGroupName, String instanceName) {
        Mono<Response<Flux<ByteBuffer>>> mono = patchServersWithResponseAsync(resourceGroupName, instanceName);
        return this
            .client
            .<Void, Void>getLroResult(
                mono, this.client.getHttpPipeline(), Void.class, Void.class, this.client.getContext());
    }

    /**
     * Update SCOM servers with latest scom software.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the SCOM monitoring instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginPatchServersAsync(
        String resourceGroupName, String instanceName, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = patchServersWithResponseAsync(resourceGroupName, instanceName, context);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, context);
    }

    /**
     * Update SCOM servers with latest scom software.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the SCOM monitoring instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginPatchServers(String resourceGroupName, String instanceName) {
        return this.beginPatchServersAsync(resourceGroupName, instanceName).getSyncPoller();
    }

    /**
     * Update SCOM servers with latest scom software.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the SCOM monitoring instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginPatchServers(
        String resourceGroupName, String instanceName, Context context) {
        return this.beginPatchServersAsync(resourceGroupName, instanceName, context).getSyncPoller();
    }

    /**
     * Update SCOM servers with latest scom software.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the SCOM monitoring instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> patchServersAsync(String resourceGroupName, String instanceName) {
        return beginPatchServersAsync(resourceGroupName, instanceName)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Update SCOM servers with latest scom software.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the SCOM monitoring instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> patchServersAsync(String resourceGroupName, String instanceName, Context context) {
        return beginPatchServersAsync(resourceGroupName, instanceName, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Update SCOM servers with latest scom software.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the SCOM monitoring instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void patchServers(String resourceGroupName, String instanceName) {
        patchServersAsync(resourceGroupName, instanceName).block();
    }

    /**
     * Update SCOM servers with latest scom software.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of the SCOM monitoring instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void patchServers(String resourceGroupName, String instanceName, Context context) {
        patchServersAsync(resourceGroupName, instanceName, context).block();
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a paged list of SCOM monitoring instances along with {@link PagedResponse} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<MonitoringInstanceInner>> listByResourceGroupNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listByResourceGroupNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<MonitoringInstanceInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a paged list of SCOM monitoring instances along with {@link PagedResponse} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<MonitoringInstanceInner>> listByResourceGroupNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByResourceGroupNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a paged list of SCOM monitoring instances along with {@link PagedResponse} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<MonitoringInstanceInner>> listBySubscriptionNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listBySubscriptionNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<MonitoringInstanceInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a paged list of SCOM monitoring instances along with {@link PagedResponse} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<MonitoringInstanceInner>> listBySubscriptionNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listBySubscriptionNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }
}
