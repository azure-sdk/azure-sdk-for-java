// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.scom.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.scom.fluent.models.LogAnalyticsConfigurationInner;
import com.azure.resourcemanager.scom.fluent.models.LogAnalyticsUpdateConfigurationInner;
import com.azure.resourcemanager.scom.fluent.models.ManagedInstanceInner;
import com.azure.resourcemanager.scom.models.AzureHybridBenefitProperties;
import com.azure.resourcemanager.scom.models.DatabaseInstanceProperties;
import com.azure.resourcemanager.scom.models.DomainControllerProperties;
import com.azure.resourcemanager.scom.models.DomainUserCredentials;
import com.azure.resourcemanager.scom.models.GmsaDetails;
import com.azure.resourcemanager.scom.models.LogAnalyticsConfiguration;
import com.azure.resourcemanager.scom.models.LogAnalyticsUpdateConfiguration;
import com.azure.resourcemanager.scom.models.ManagedIdentity;
import com.azure.resourcemanager.scom.models.ManagedInstance;
import com.azure.resourcemanager.scom.models.ManagedInstanceOperationStatus;
import com.azure.resourcemanager.scom.models.ManagementServerProperties;
import com.azure.resourcemanager.scom.models.MonitoringInstancePatch;
import com.azure.resourcemanager.scom.models.PatchServersResponseProperties;
import com.azure.resourcemanager.scom.models.ScalingProperties;
import com.azure.resourcemanager.scom.models.SetServerCountResponseProperties;
import com.azure.resourcemanager.scom.models.UnlinkLogAnalyticsResponseProperties;
import java.util.Collections;
import java.util.List;
import java.util.Map;

public final class ManagedInstanceImpl implements ManagedInstance, ManagedInstance.Definition, ManagedInstance.Update {
    private ManagedInstanceInner innerObject;

    private final com.azure.resourcemanager.scom.ScomManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public ManagedIdentity identity() {
        return this.innerModel().identity();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public String productVersion() {
        return this.innerModel().productVersion();
    }

    public String vNetSubnetId() {
        return this.innerModel().vNetSubnetId();
    }

    public List<ManagementServerProperties> managementEndpoints() {
        List<ManagementServerProperties> inner = this.innerModel().managementEndpoints();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public DatabaseInstanceProperties databaseInstance() {
        return this.innerModel().databaseInstance();
    }

    public DomainControllerProperties domainController() {
        return this.innerModel().domainController();
    }

    public DomainUserCredentials domainUserCredentials() {
        return this.innerModel().domainUserCredentials();
    }

    public GmsaDetails gmsaDetails() {
        return this.innerModel().gmsaDetails();
    }

    public AzureHybridBenefitProperties azureHybridBenefit() {
        return this.innerModel().azureHybridBenefit();
    }

    public String provisioningState() {
        return this.innerModel().provisioningState();
    }

    public LogAnalyticsConfiguration logAnalyticsProperties() {
        LogAnalyticsConfigurationInner inner = this.innerModel().logAnalyticsProperties();
        if (inner != null) {
            return new LogAnalyticsConfigurationImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public List<ManagedInstanceOperationStatus> operationsStatus() {
        List<ManagedInstanceOperationStatus> inner = this.innerModel().operationsStatus();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public ManagedInstanceInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.scom.ScomManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String instanceName;

    private Boolean createValidationMode;

    private MonitoringInstancePatch updateManagedInstance;

    public ManagedInstanceImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public ManagedInstance create() {
        this.innerObject = serviceManager.serviceClient().getInstances().createOrUpdate(resourceGroupName, instanceName,
            this.innerModel(), createValidationMode, Context.NONE);
        return this;
    }

    public ManagedInstance create(Context context) {
        this.innerObject = serviceManager.serviceClient().getInstances().createOrUpdate(resourceGroupName, instanceName,
            this.innerModel(), createValidationMode, context);
        return this;
    }

    ManagedInstanceImpl(String name, com.azure.resourcemanager.scom.ScomManager serviceManager) {
        this.innerObject = new ManagedInstanceInner();
        this.serviceManager = serviceManager;
        this.instanceName = name;
        this.createValidationMode = null;
    }

    public ManagedInstanceImpl update() {
        this.updateManagedInstance = new MonitoringInstancePatch();
        return this;
    }

    public ManagedInstance apply() {
        this.innerObject = serviceManager.serviceClient().getInstances().update(resourceGroupName, instanceName,
            updateManagedInstance, Context.NONE);
        return this;
    }

    public ManagedInstance apply(Context context) {
        this.innerObject = serviceManager.serviceClient().getInstances().update(resourceGroupName, instanceName,
            updateManagedInstance, context);
        return this;
    }

    ManagedInstanceImpl(ManagedInstanceInner innerObject, com.azure.resourcemanager.scom.ScomManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.instanceName = Utils.getValueFromIdByName(innerObject.id(), "managedInstances");
    }

    public ManagedInstance refresh() {
        this.innerObject = serviceManager.serviceClient().getInstances()
            .getByResourceGroupWithResponse(resourceGroupName, instanceName, Context.NONE).getValue();
        return this;
    }

    public ManagedInstance refresh(Context context) {
        this.innerObject = serviceManager.serviceClient().getInstances()
            .getByResourceGroupWithResponse(resourceGroupName, instanceName, context).getValue();
        return this;
    }

    public LogAnalyticsConfiguration linkLogAnalytics(LogAnalyticsConfigurationInner body) {
        return serviceManager.instances().linkLogAnalytics(resourceGroupName, instanceName, body);
    }

    public LogAnalyticsConfiguration linkLogAnalytics(LogAnalyticsConfigurationInner body, Context context) {
        return serviceManager.instances().linkLogAnalytics(resourceGroupName, instanceName, body, context);
    }

    public PatchServersResponseProperties patchServers() {
        return serviceManager.instances().patchServers(resourceGroupName, instanceName);
    }

    public PatchServersResponseProperties patchServers(Context context) {
        return serviceManager.instances().patchServers(resourceGroupName, instanceName, context);
    }

    public SetServerCountResponseProperties scale(ScalingProperties body) {
        return serviceManager.instances().scale(resourceGroupName, instanceName, body);
    }

    public SetServerCountResponseProperties scale(ScalingProperties body, Context context) {
        return serviceManager.instances().scale(resourceGroupName, instanceName, body, context);
    }

    public UnlinkLogAnalyticsResponseProperties unlinkLogAnalytics() {
        return serviceManager.instances().unlinkLogAnalytics(resourceGroupName, instanceName);
    }

    public UnlinkLogAnalyticsResponseProperties unlinkLogAnalytics(Context context) {
        return serviceManager.instances().unlinkLogAnalytics(resourceGroupName, instanceName, context);
    }

    public LogAnalyticsUpdateConfiguration updateLogAnalytics(LogAnalyticsUpdateConfigurationInner body) {
        return serviceManager.instances().updateLogAnalytics(resourceGroupName, instanceName, body);
    }

    public LogAnalyticsUpdateConfiguration updateLogAnalytics(LogAnalyticsUpdateConfigurationInner body,
        Context context) {
        return serviceManager.instances().updateLogAnalytics(resourceGroupName, instanceName, body, context);
    }

    public ManagedInstanceImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public ManagedInstanceImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public ManagedInstanceImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateManagedInstance.withTags(tags);
            return this;
        }
    }

    public ManagedInstanceImpl withIdentity(ManagedIdentity identity) {
        if (isInCreateMode()) {
            this.innerModel().withIdentity(identity);
            return this;
        } else {
            this.updateManagedInstance.withIdentity(identity);
            return this;
        }
    }

    public ManagedInstanceImpl withVNetSubnetId(String vNetSubnetId) {
        this.innerModel().withVNetSubnetId(vNetSubnetId);
        return this;
    }

    public ManagedInstanceImpl withDatabaseInstance(DatabaseInstanceProperties databaseInstance) {
        this.innerModel().withDatabaseInstance(databaseInstance);
        return this;
    }

    public ManagedInstanceImpl withDomainController(DomainControllerProperties domainController) {
        this.innerModel().withDomainController(domainController);
        return this;
    }

    public ManagedInstanceImpl withDomainUserCredentials(DomainUserCredentials domainUserCredentials) {
        this.innerModel().withDomainUserCredentials(domainUserCredentials);
        return this;
    }

    public ManagedInstanceImpl withGmsaDetails(GmsaDetails gmsaDetails) {
        this.innerModel().withGmsaDetails(gmsaDetails);
        return this;
    }

    public ManagedInstanceImpl withAzureHybridBenefit(AzureHybridBenefitProperties azureHybridBenefit) {
        this.innerModel().withAzureHybridBenefit(azureHybridBenefit);
        return this;
    }

    public ManagedInstanceImpl withValidationMode(Boolean validationMode) {
        this.createValidationMode = validationMode;
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
