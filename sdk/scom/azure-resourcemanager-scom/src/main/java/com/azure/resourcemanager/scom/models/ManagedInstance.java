// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.scom.models;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.scom.fluent.models.LogAnalyticsConfigurationInner;
import com.azure.resourcemanager.scom.fluent.models.LogAnalyticsUpdateConfigurationInner;
import com.azure.resourcemanager.scom.fluent.models.ManagedInstanceInner;
import java.util.List;
import java.util.Map;

/**
 * An immutable client-side representation of ManagedInstance.
 */
public interface ManagedInstance {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     * 
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     * 
     * @return the type value.
     */
    String type();

    /**
     * Gets the location property: The geo-location where the resource lives.
     * 
     * @return the location value.
     */
    String location();

    /**
     * Gets the tags property: Resource tags.
     * 
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the identity property: The managed service identities assigned to this resource.
     * 
     * @return the identity value.
     */
    ManagedIdentity identity();

    /**
     * Gets the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * Gets the productVersion property: SCOM product version to be installed on instance.
     * 
     * @return the productVersion value.
     */
    String productVersion();

    /**
     * Gets the vNetSubnetId property: Virtual Network subnet id on which Aquila instance will be provisioned.
     * 
     * @return the vNetSubnetId value.
     */
    String vNetSubnetId();

    /**
     * Gets the managementEndpoints property: List of management server endpoints.
     * 
     * @return the managementEndpoints value.
     */
    List<ManagementServerProperties> managementEndpoints();

    /**
     * Gets the databaseInstance property: The database instance where the SCOM Operational and Warehouse databases will
     * be stored.
     * 
     * @return the databaseInstance value.
     */
    DatabaseInstanceProperties databaseInstance();

    /**
     * Gets the domainController property: Domain controller details.
     * 
     * @return the domainController value.
     */
    DomainControllerProperties domainController();

    /**
     * Gets the domainUserCredentials property: Domain user which will be used to join VMs to domain and login to VMs.
     * 
     * @return the domainUserCredentials value.
     */
    DomainUserCredentials domainUserCredentials();

    /**
     * Gets the gmsaDetails property: Gmsa Details for load balancer and vmss.
     * 
     * @return the gmsaDetails value.
     */
    GmsaDetails gmsaDetails();

    /**
     * Gets the azureHybridBenefit property: The properties to enable Azure Hybrid benefit for various SCOM
     * infrastructure license.
     * 
     * @return the azureHybridBenefit value.
     */
    AzureHybridBenefitProperties azureHybridBenefit();

    /**
     * Gets the provisioningState property: Gets or sets the provisioning state.
     * 
     * @return the provisioningState value.
     */
    String provisioningState();

    /**
     * Gets the logAnalyticsProperties property: Details of Log Analytics workspace and data being ingested.
     * 
     * @return the logAnalyticsProperties value.
     */
    LogAnalyticsConfiguration logAnalyticsProperties();

    /**
     * Gets the operationsStatus property: Gets status of current and latest SCOM managed instance operations.
     * 
     * @return the operationsStatus value.
     */
    List<ManagedInstanceOperationStatus> operationsStatus();

    /**
     * Gets the region of the resource.
     * 
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     * 
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the name of the resource group.
     * 
     * @return the name of the resource group.
     */
    String resourceGroupName();

    /**
     * Gets the inner com.azure.resourcemanager.scom.fluent.models.ManagedInstanceInner object.
     * 
     * @return the inner object.
     */
    ManagedInstanceInner innerModel();

    /**
     * The entirety of the ManagedInstance definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithLocation,
        DefinitionStages.WithResourceGroup, DefinitionStages.WithCreate {
    }

    /**
     * The ManagedInstance definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of the ManagedInstance definition.
         */
        interface Blank extends WithLocation {
        }

        /**
         * The stage of the ManagedInstance definition allowing to specify location.
         */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             * 
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(Region location);

            /**
             * Specifies the region for the resource.
             * 
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(String location);
        }

        /**
         * The stage of the ManagedInstance definition allowing to specify parent resource.
         */
        interface WithResourceGroup {
            /**
             * Specifies resourceGroupName.
             * 
             * @param resourceGroupName The name of the resource group. The name is case insensitive.
             * @return the next definition stage.
             */
            WithCreate withExistingResourceGroup(String resourceGroupName);
        }

        /**
         * The stage of the ManagedInstance definition which contains all the minimum required properties for the
         * resource to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithTags, DefinitionStages.WithIdentity, DefinitionStages.WithVNetSubnetId,
            DefinitionStages.WithDatabaseInstance, DefinitionStages.WithDomainController,
            DefinitionStages.WithDomainUserCredentials, DefinitionStages.WithGmsaDetails,
            DefinitionStages.WithAzureHybridBenefit, DefinitionStages.WithValidationMode {
            /**
             * Executes the create request.
             * 
             * @return the created resource.
             */
            ManagedInstance create();

            /**
             * Executes the create request.
             * 
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            ManagedInstance create(Context context);
        }

        /**
         * The stage of the ManagedInstance definition allowing to specify tags.
         */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             * 
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }

        /**
         * The stage of the ManagedInstance definition allowing to specify identity.
         */
        interface WithIdentity {
            /**
             * Specifies the identity property: The managed service identities assigned to this resource..
             * 
             * @param identity The managed service identities assigned to this resource.
             * @return the next definition stage.
             */
            WithCreate withIdentity(ManagedIdentity identity);
        }

        /**
         * The stage of the ManagedInstance definition allowing to specify vNetSubnetId.
         */
        interface WithVNetSubnetId {
            /**
             * Specifies the vNetSubnetId property: Virtual Network subnet id on which Aquila instance will be
             * provisioned.
             * 
             * @param vNetSubnetId Virtual Network subnet id on which Aquila instance will be provisioned.
             * @return the next definition stage.
             */
            WithCreate withVNetSubnetId(String vNetSubnetId);
        }

        /**
         * The stage of the ManagedInstance definition allowing to specify databaseInstance.
         */
        interface WithDatabaseInstance {
            /**
             * Specifies the databaseInstance property: The database instance where the SCOM Operational and Warehouse
             * databases will be stored..
             * 
             * @param databaseInstance The database instance where the SCOM Operational and Warehouse databases will be
             * stored.
             * @return the next definition stage.
             */
            WithCreate withDatabaseInstance(DatabaseInstanceProperties databaseInstance);
        }

        /**
         * The stage of the ManagedInstance definition allowing to specify domainController.
         */
        interface WithDomainController {
            /**
             * Specifies the domainController property: Domain controller details.
             * 
             * @param domainController Domain controller details.
             * @return the next definition stage.
             */
            WithCreate withDomainController(DomainControllerProperties domainController);
        }

        /**
         * The stage of the ManagedInstance definition allowing to specify domainUserCredentials.
         */
        interface WithDomainUserCredentials {
            /**
             * Specifies the domainUserCredentials property: Domain user which will be used to join VMs to domain and
             * login to VMs..
             * 
             * @param domainUserCredentials Domain user which will be used to join VMs to domain and login to VMs.
             * @return the next definition stage.
             */
            WithCreate withDomainUserCredentials(DomainUserCredentials domainUserCredentials);
        }

        /**
         * The stage of the ManagedInstance definition allowing to specify gmsaDetails.
         */
        interface WithGmsaDetails {
            /**
             * Specifies the gmsaDetails property: Gmsa Details for load balancer and vmss.
             * 
             * @param gmsaDetails Gmsa Details for load balancer and vmss.
             * @return the next definition stage.
             */
            WithCreate withGmsaDetails(GmsaDetails gmsaDetails);
        }

        /**
         * The stage of the ManagedInstance definition allowing to specify azureHybridBenefit.
         */
        interface WithAzureHybridBenefit {
            /**
             * Specifies the azureHybridBenefit property: The properties to enable Azure Hybrid benefit for various SCOM
             * infrastructure license..
             * 
             * @param azureHybridBenefit The properties to enable Azure Hybrid benefit for various SCOM infrastructure
             * license.
             * @return the next definition stage.
             */
            WithCreate withAzureHybridBenefit(AzureHybridBenefitProperties azureHybridBenefit);
        }

        /**
         * The stage of the ManagedInstance definition allowing to specify validationMode.
         */
        interface WithValidationMode {
            /**
             * Specifies the validationMode property: Validation mode for the SCOM managed instance.
             * 
             * @param validationMode Validation mode for the SCOM managed instance.
             * @return the next definition stage.
             */
            WithCreate withValidationMode(Boolean validationMode);
        }
    }

    /**
     * Begins update for the ManagedInstance resource.
     * 
     * @return the stage of resource update.
     */
    ManagedInstance.Update update();

    /**
     * The template for ManagedInstance update.
     */
    interface Update extends UpdateStages.WithTags, UpdateStages.WithIdentity {
        /**
         * Executes the update request.
         * 
         * @return the updated resource.
         */
        ManagedInstance apply();

        /**
         * Executes the update request.
         * 
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        ManagedInstance apply(Context context);
    }

    /**
     * The ManagedInstance update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the ManagedInstance update allowing to specify tags.
         */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             * 
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }

        /**
         * The stage of the ManagedInstance update allowing to specify identity.
         */
        interface WithIdentity {
            /**
             * Specifies the identity property: The Azure Active Directory identity of the SCOM instance.
             * 
             * @param identity The Azure Active Directory identity of the SCOM instance.
             * @return the next definition stage.
             */
            Update withIdentity(ManagedIdentity identity);
        }
    }

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @return the refreshed resource.
     */
    ManagedInstance refresh();

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    ManagedInstance refresh(Context context);

    /**
     * Link Log Analytics workspace for SCOM monitoring instance.
     * 
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration for Log Analytics linking to SCOM managed instance.
     */
    LogAnalyticsConfiguration linkLogAnalytics(LogAnalyticsConfigurationInner body);

    /**
     * Link Log Analytics workspace for SCOM monitoring instance.
     * 
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration for Log Analytics linking to SCOM managed instance.
     */
    LogAnalyticsConfiguration linkLogAnalytics(LogAnalyticsConfigurationInner body, Context context);

    /**
     * Update SCOM servers with latest scom software.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties for patching servers.
     */
    PatchServersResponseProperties patchServers();

    /**
     * Update SCOM servers with latest scom software.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties for patching servers.
     */
    PatchServersResponseProperties patchServers(Context context);

    /**
     * Scaling SCOM managed instance.
     * 
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties for set server count operation.
     */
    SetServerCountResponseProperties scale(ScalingProperties body);

    /**
     * Scaling SCOM managed instance.
     * 
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties for set server count operation.
     */
    SetServerCountResponseProperties scale(ScalingProperties body, Context context);

    /**
     * Unlink Log Analytics workspace for SCOM monitoring instance.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties for unlinking log analytics.
     */
    UnlinkLogAnalyticsResponseProperties unlinkLogAnalytics();

    /**
     * Unlink Log Analytics workspace for SCOM monitoring instance.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties for unlinking log analytics.
     */
    UnlinkLogAnalyticsResponseProperties unlinkLogAnalytics(Context context);

    /**
     * Update configuration for log analytics linking for SCOM monitoring instance.
     * 
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return updated configuration for Log Analytics linking.
     */
    LogAnalyticsUpdateConfiguration updateLogAnalytics(LogAnalyticsUpdateConfigurationInner body);

    /**
     * Update configuration for log analytics linking for SCOM monitoring instance.
     * 
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return updated configuration for Log Analytics linking.
     */
    LogAnalyticsUpdateConfiguration updateLogAnalytics(LogAnalyticsUpdateConfigurationInner body, Context context);
}
