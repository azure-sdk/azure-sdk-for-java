// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.scom.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.scom.fluent.models.MonitoringInstanceInner;
import com.azure.resourcemanager.scom.models.ManagedIdentity;
import com.azure.resourcemanager.scom.models.MonitoringInstance;
import com.azure.resourcemanager.scom.models.MonitoringInstancePatch;
import com.azure.resourcemanager.scom.models.MonitoringInstanceProperties;
import com.azure.resourcemanager.scom.models.ScalingProperties;
import java.util.Collections;
import java.util.Map;

public final class MonitoringInstanceImpl
    implements MonitoringInstance, MonitoringInstance.Definition, MonitoringInstance.Update {
    private MonitoringInstanceInner innerObject;

    private final com.azure.resourcemanager.scom.ScomManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public MonitoringInstanceProperties properties() {
        return this.innerModel().properties();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public ManagedIdentity identity() {
        return this.innerModel().identity();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public MonitoringInstanceInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.scom.ScomManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String instanceName;

    private Boolean createValidationMode;

    private MonitoringInstancePatch updateMonitoringInstance;

    public MonitoringInstanceImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public MonitoringInstance create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getInstances()
                .createOrUpdate(resourceGroupName, instanceName, this.innerModel(), createValidationMode, Context.NONE);
        return this;
    }

    public MonitoringInstance create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getInstances()
                .createOrUpdate(resourceGroupName, instanceName, this.innerModel(), createValidationMode, context);
        return this;
    }

    MonitoringInstanceImpl(String name, com.azure.resourcemanager.scom.ScomManager serviceManager) {
        this.innerObject = new MonitoringInstanceInner();
        this.serviceManager = serviceManager;
        this.instanceName = name;
        this.createValidationMode = null;
    }

    public MonitoringInstanceImpl update() {
        this.updateMonitoringInstance = new MonitoringInstancePatch();
        return this;
    }

    public MonitoringInstance apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getInstances()
                .update(resourceGroupName, instanceName, updateMonitoringInstance, Context.NONE);
        return this;
    }

    public MonitoringInstance apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getInstances()
                .update(resourceGroupName, instanceName, updateMonitoringInstance, context);
        return this;
    }

    MonitoringInstanceImpl(
        MonitoringInstanceInner innerObject, com.azure.resourcemanager.scom.ScomManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.instanceName = Utils.getValueFromIdByName(innerObject.id(), "managedInstances");
    }

    public MonitoringInstance refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getInstances()
                .getByResourceGroupWithResponse(resourceGroupName, instanceName, Context.NONE)
                .getValue();
        return this;
    }

    public MonitoringInstance refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getInstances()
                .getByResourceGroupWithResponse(resourceGroupName, instanceName, context)
                .getValue();
        return this;
    }

    public void scale(ScalingProperties body) {
        serviceManager.instances().scale(resourceGroupName, instanceName, body);
    }

    public void scale(ScalingProperties body, Context context) {
        serviceManager.instances().scale(resourceGroupName, instanceName, body, context);
    }

    public void patchServers() {
        serviceManager.instances().patchServers(resourceGroupName, instanceName);
    }

    public void patchServers(Context context) {
        serviceManager.instances().patchServers(resourceGroupName, instanceName, context);
    }

    public MonitoringInstanceImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public MonitoringInstanceImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public MonitoringInstanceImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateMonitoringInstance.withTags(tags);
            return this;
        }
    }

    public MonitoringInstanceImpl withProperties(MonitoringInstanceProperties properties) {
        this.innerModel().withProperties(properties);
        return this;
    }

    public MonitoringInstanceImpl withIdentity(ManagedIdentity identity) {
        this.innerModel().withIdentity(identity);
        return this;
    }

    public MonitoringInstanceImpl withValidationMode(Boolean validationMode) {
        this.createValidationMode = validationMode;
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
