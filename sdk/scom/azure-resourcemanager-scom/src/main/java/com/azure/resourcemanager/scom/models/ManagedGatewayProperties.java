// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.scom.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * The properties of a gateway resource.
 */
@Fluent
public final class ManagedGatewayProperties {
    /*
     * ArmId of the gateway to be monitored.
     */
    @JsonProperty(value = "resourceId")
    private String resourceId;

    /*
     * Location of the gateway to be monitored.
     */
    @JsonProperty(value = "resourceLocation")
    private String resourceLocation;

    /*
     * ComputerName of the gateway to be monitored.
     */
    @JsonProperty(value = "computerName")
    private String computerName;

    /*
     * The domain name associated with the gateway to be monitored.
     */
    @JsonProperty(value = "domainName")
    private String domainName;

    /*
     * The management server endpoint to which the gateway is directed.
     */
    @JsonProperty(value = "managementServerEndpoint", access = JsonProperty.Access.WRITE_ONLY)
    private String managementServerEndpoint;

    /*
     * The health status of the gateway resource.
     */
    @JsonProperty(value = "healthStatus", access = JsonProperty.Access.WRITE_ONLY)
    private String healthStatus;

    /*
     * The connection status of the gateway resource.
     */
    @JsonProperty(value = "connectionStatus", access = JsonProperty.Access.WRITE_ONLY)
    private String connectionStatus;

    /*
     * The version of the gateway resource.
     */
    @JsonProperty(value = "version", access = JsonProperty.Access.WRITE_ONLY)
    private String version;

    /*
     * Install type of gateway resource.
     */
    @JsonProperty(value = "installType", access = JsonProperty.Access.WRITE_ONLY)
    private String installType;

    /*
     * The provisioningState property.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private String provisioningState;

    /**
     * Creates an instance of ManagedGatewayProperties class.
     */
    public ManagedGatewayProperties() {
    }

    /**
     * Get the resourceId property: ArmId of the gateway to be monitored.
     * 
     * @return the resourceId value.
     */
    public String resourceId() {
        return this.resourceId;
    }

    /**
     * Set the resourceId property: ArmId of the gateway to be monitored.
     * 
     * @param resourceId the resourceId value to set.
     * @return the ManagedGatewayProperties object itself.
     */
    public ManagedGatewayProperties withResourceId(String resourceId) {
        this.resourceId = resourceId;
        return this;
    }

    /**
     * Get the resourceLocation property: Location of the gateway to be monitored.
     * 
     * @return the resourceLocation value.
     */
    public String resourceLocation() {
        return this.resourceLocation;
    }

    /**
     * Set the resourceLocation property: Location of the gateway to be monitored.
     * 
     * @param resourceLocation the resourceLocation value to set.
     * @return the ManagedGatewayProperties object itself.
     */
    public ManagedGatewayProperties withResourceLocation(String resourceLocation) {
        this.resourceLocation = resourceLocation;
        return this;
    }

    /**
     * Get the computerName property: ComputerName of the gateway to be monitored.
     * 
     * @return the computerName value.
     */
    public String computerName() {
        return this.computerName;
    }

    /**
     * Set the computerName property: ComputerName of the gateway to be monitored.
     * 
     * @param computerName the computerName value to set.
     * @return the ManagedGatewayProperties object itself.
     */
    public ManagedGatewayProperties withComputerName(String computerName) {
        this.computerName = computerName;
        return this;
    }

    /**
     * Get the domainName property: The domain name associated with the gateway to be monitored.
     * 
     * @return the domainName value.
     */
    public String domainName() {
        return this.domainName;
    }

    /**
     * Set the domainName property: The domain name associated with the gateway to be monitored.
     * 
     * @param domainName the domainName value to set.
     * @return the ManagedGatewayProperties object itself.
     */
    public ManagedGatewayProperties withDomainName(String domainName) {
        this.domainName = domainName;
        return this;
    }

    /**
     * Get the managementServerEndpoint property: The management server endpoint to which the gateway is directed.
     * 
     * @return the managementServerEndpoint value.
     */
    public String managementServerEndpoint() {
        return this.managementServerEndpoint;
    }

    /**
     * Get the healthStatus property: The health status of the gateway resource.
     * 
     * @return the healthStatus value.
     */
    public String healthStatus() {
        return this.healthStatus;
    }

    /**
     * Get the connectionStatus property: The connection status of the gateway resource.
     * 
     * @return the connectionStatus value.
     */
    public String connectionStatus() {
        return this.connectionStatus;
    }

    /**
     * Get the version property: The version of the gateway resource.
     * 
     * @return the version value.
     */
    public String version() {
        return this.version;
    }

    /**
     * Get the installType property: Install type of gateway resource.
     * 
     * @return the installType value.
     */
    public String installType() {
        return this.installType;
    }

    /**
     * Get the provisioningState property: The provisioningState property.
     * 
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
