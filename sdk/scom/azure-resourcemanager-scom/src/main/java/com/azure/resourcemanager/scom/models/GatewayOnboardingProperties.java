// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.scom.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Properties for approval of gateway.
 */
@Fluent
public final class GatewayOnboardingProperties {
    /*
     * computer name or fqdn of the machine which is onboarded as gateway.
     */
    @JsonProperty(value = "scomGateway")
    private String scomGateway;

    /*
     * ArmId of the gateway resource.
     */
    @JsonProperty(value = "resourceId")
    private String resourceId;

    /**
     * Creates an instance of GatewayOnboardingProperties class.
     */
    public GatewayOnboardingProperties() {
    }

    /**
     * Get the scomGateway property: computer name or fqdn of the machine which is onboarded as gateway.
     * 
     * @return the scomGateway value.
     */
    public String scomGateway() {
        return this.scomGateway;
    }

    /**
     * Set the scomGateway property: computer name or fqdn of the machine which is onboarded as gateway.
     * 
     * @param scomGateway the scomGateway value to set.
     * @return the GatewayOnboardingProperties object itself.
     */
    public GatewayOnboardingProperties withScomGateway(String scomGateway) {
        this.scomGateway = scomGateway;
        return this;
    }

    /**
     * Get the resourceId property: ArmId of the gateway resource.
     * 
     * @return the resourceId value.
     */
    public String resourceId() {
        return this.resourceId;
    }

    /**
     * Set the resourceId property: ArmId of the gateway resource.
     * 
     * @param resourceId the resourceId value to set.
     * @return the GatewayOnboardingProperties object itself.
     */
    public GatewayOnboardingProperties withResourceId(String resourceId) {
        this.resourceId = resourceId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
