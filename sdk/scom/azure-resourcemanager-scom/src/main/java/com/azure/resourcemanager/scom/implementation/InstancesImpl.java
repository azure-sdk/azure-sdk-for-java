// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.scom.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.scom.fluent.InstancesClient;
import com.azure.resourcemanager.scom.fluent.models.LogAnalyticsConfigurationInner;
import com.azure.resourcemanager.scom.fluent.models.LogAnalyticsUpdateConfigurationInner;
import com.azure.resourcemanager.scom.fluent.models.ManagedInstanceInner;
import com.azure.resourcemanager.scom.fluent.models.PatchServersResponsePropertiesInner;
import com.azure.resourcemanager.scom.fluent.models.SetServerCountResponsePropertiesInner;
import com.azure.resourcemanager.scom.fluent.models.UnlinkLogAnalyticsResponsePropertiesInner;
import com.azure.resourcemanager.scom.models.Instances;
import com.azure.resourcemanager.scom.models.LogAnalyticsConfiguration;
import com.azure.resourcemanager.scom.models.LogAnalyticsUpdateConfiguration;
import com.azure.resourcemanager.scom.models.ManagedInstance;
import com.azure.resourcemanager.scom.models.PatchServersResponseProperties;
import com.azure.resourcemanager.scom.models.ScalingProperties;
import com.azure.resourcemanager.scom.models.SetServerCountResponseProperties;
import com.azure.resourcemanager.scom.models.UnlinkLogAnalyticsResponseProperties;

public final class InstancesImpl implements Instances {
    private static final ClientLogger LOGGER = new ClientLogger(InstancesImpl.class);

    private final InstancesClient innerClient;

    private final com.azure.resourcemanager.scom.ScomManager serviceManager;

    public InstancesImpl(InstancesClient innerClient, com.azure.resourcemanager.scom.ScomManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<ManagedInstance> listByResourceGroup(String resourceGroupName) {
        PagedIterable<ManagedInstanceInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return Utils.mapPage(inner, inner1 -> new ManagedInstanceImpl(inner1, this.manager()));
    }

    public PagedIterable<ManagedInstance> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<ManagedInstanceInner> inner =
            this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return Utils.mapPage(inner, inner1 -> new ManagedInstanceImpl(inner1, this.manager()));
    }

    public PagedIterable<ManagedInstance> list() {
        PagedIterable<ManagedInstanceInner> inner = this.serviceClient().list();
        return Utils.mapPage(inner, inner1 -> new ManagedInstanceImpl(inner1, this.manager()));
    }

    public PagedIterable<ManagedInstance> list(Context context) {
        PagedIterable<ManagedInstanceInner> inner = this.serviceClient().list(context);
        return Utils.mapPage(inner, inner1 -> new ManagedInstanceImpl(inner1, this.manager()));
    }

    public Response<ManagedInstance> getByResourceGroupWithResponse(
        String resourceGroupName, String instanceName, Context context) {
        Response<ManagedInstanceInner> inner =
            this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, instanceName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ManagedInstanceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ManagedInstance getByResourceGroup(String resourceGroupName, String instanceName) {
        ManagedInstanceInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, instanceName);
        if (inner != null) {
            return new ManagedInstanceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceGroupName, String instanceName) {
        this.serviceClient().delete(resourceGroupName, instanceName);
    }

    public void delete(String resourceGroupName, String instanceName, Context context) {
        this.serviceClient().delete(resourceGroupName, instanceName, context);
    }

    public SetServerCountResponseProperties scale(
        String resourceGroupName, String instanceName, ScalingProperties body) {
        SetServerCountResponsePropertiesInner inner = this.serviceClient().scale(resourceGroupName, instanceName, body);
        if (inner != null) {
            return new SetServerCountResponsePropertiesImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public SetServerCountResponseProperties scale(
        String resourceGroupName, String instanceName, ScalingProperties body, Context context) {
        SetServerCountResponsePropertiesInner inner =
            this.serviceClient().scale(resourceGroupName, instanceName, body, context);
        if (inner != null) {
            return new SetServerCountResponsePropertiesImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PatchServersResponseProperties patchServers(String resourceGroupName, String instanceName) {
        PatchServersResponsePropertiesInner inner = this.serviceClient().patchServers(resourceGroupName, instanceName);
        if (inner != null) {
            return new PatchServersResponsePropertiesImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PatchServersResponseProperties patchServers(String resourceGroupName, String instanceName, Context context) {
        PatchServersResponsePropertiesInner inner =
            this.serviceClient().patchServers(resourceGroupName, instanceName, context);
        if (inner != null) {
            return new PatchServersResponsePropertiesImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public LogAnalyticsConfiguration linkLogAnalytics(
        String resourceGroupName, String instanceName, LogAnalyticsConfigurationInner body) {
        LogAnalyticsConfigurationInner inner =
            this.serviceClient().linkLogAnalytics(resourceGroupName, instanceName, body);
        if (inner != null) {
            return new LogAnalyticsConfigurationImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public LogAnalyticsConfiguration linkLogAnalytics(
        String resourceGroupName, String instanceName, LogAnalyticsConfigurationInner body, Context context) {
        LogAnalyticsConfigurationInner inner =
            this.serviceClient().linkLogAnalytics(resourceGroupName, instanceName, body, context);
        if (inner != null) {
            return new LogAnalyticsConfigurationImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public UnlinkLogAnalyticsResponseProperties unlinkLogAnalytics(String resourceGroupName, String instanceName) {
        UnlinkLogAnalyticsResponsePropertiesInner inner =
            this.serviceClient().unlinkLogAnalytics(resourceGroupName, instanceName);
        if (inner != null) {
            return new UnlinkLogAnalyticsResponsePropertiesImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public UnlinkLogAnalyticsResponseProperties unlinkLogAnalytics(
        String resourceGroupName, String instanceName, Context context) {
        UnlinkLogAnalyticsResponsePropertiesInner inner =
            this.serviceClient().unlinkLogAnalytics(resourceGroupName, instanceName, context);
        if (inner != null) {
            return new UnlinkLogAnalyticsResponsePropertiesImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public LogAnalyticsUpdateConfiguration updateLogAnalytics(
        String resourceGroupName, String instanceName, LogAnalyticsUpdateConfigurationInner body) {
        LogAnalyticsUpdateConfigurationInner inner =
            this.serviceClient().updateLogAnalytics(resourceGroupName, instanceName, body);
        if (inner != null) {
            return new LogAnalyticsUpdateConfigurationImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public LogAnalyticsUpdateConfiguration updateLogAnalytics(
        String resourceGroupName, String instanceName, LogAnalyticsUpdateConfigurationInner body, Context context) {
        LogAnalyticsUpdateConfigurationInner inner =
            this.serviceClient().updateLogAnalytics(resourceGroupName, instanceName, body, context);
        if (inner != null) {
            return new LogAnalyticsUpdateConfigurationImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ManagedInstance getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String instanceName = Utils.getValueFromIdByName(id, "managedInstances");
        if (instanceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'managedInstances'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, instanceName, Context.NONE).getValue();
    }

    public Response<ManagedInstance> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String instanceName = Utils.getValueFromIdByName(id, "managedInstances");
        if (instanceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'managedInstances'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, instanceName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String instanceName = Utils.getValueFromIdByName(id, "managedInstances");
        if (instanceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'managedInstances'.", id)));
        }
        this.delete(resourceGroupName, instanceName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String instanceName = Utils.getValueFromIdByName(id, "managedInstances");
        if (instanceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'managedInstances'.", id)));
        }
        this.delete(resourceGroupName, instanceName, context);
    }

    private InstancesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.scom.ScomManager manager() {
        return this.serviceManager;
    }

    public ManagedInstanceImpl define(String name) {
        return new ManagedInstanceImpl(name, this.manager());
    }
}
