// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.scom.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.scom.fluent.InstancesClient;
import com.azure.resourcemanager.scom.fluent.models.MonitoringInstanceInner;
import com.azure.resourcemanager.scom.models.Instances;
import com.azure.resourcemanager.scom.models.MonitoringInstance;
import com.azure.resourcemanager.scom.models.ScalingProperties;

public final class InstancesImpl implements Instances {
    private static final ClientLogger LOGGER = new ClientLogger(InstancesImpl.class);

    private final InstancesClient innerClient;

    private final com.azure.resourcemanager.scom.ScomManager serviceManager;

    public InstancesImpl(InstancesClient innerClient, com.azure.resourcemanager.scom.ScomManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<MonitoringInstance> listByResourceGroup(String resourceGroupName) {
        PagedIterable<MonitoringInstanceInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return Utils.mapPage(inner, inner1 -> new MonitoringInstanceImpl(inner1, this.manager()));
    }

    public PagedIterable<MonitoringInstance> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<MonitoringInstanceInner> inner =
            this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return Utils.mapPage(inner, inner1 -> new MonitoringInstanceImpl(inner1, this.manager()));
    }

    public PagedIterable<MonitoringInstance> list() {
        PagedIterable<MonitoringInstanceInner> inner = this.serviceClient().list();
        return Utils.mapPage(inner, inner1 -> new MonitoringInstanceImpl(inner1, this.manager()));
    }

    public PagedIterable<MonitoringInstance> list(Context context) {
        PagedIterable<MonitoringInstanceInner> inner = this.serviceClient().list(context);
        return Utils.mapPage(inner, inner1 -> new MonitoringInstanceImpl(inner1, this.manager()));
    }

    public Response<MonitoringInstance> getByResourceGroupWithResponse(
        String resourceGroupName, String instanceName, Context context) {
        Response<MonitoringInstanceInner> inner =
            this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, instanceName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new MonitoringInstanceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public MonitoringInstance getByResourceGroup(String resourceGroupName, String instanceName) {
        MonitoringInstanceInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, instanceName);
        if (inner != null) {
            return new MonitoringInstanceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceGroupName, String instanceName) {
        this.serviceClient().delete(resourceGroupName, instanceName);
    }

    public void delete(String resourceGroupName, String instanceName, Context context) {
        this.serviceClient().delete(resourceGroupName, instanceName, context);
    }

    public void scale(String resourceGroupName, String instanceName, ScalingProperties body) {
        this.serviceClient().scale(resourceGroupName, instanceName, body);
    }

    public void scale(String resourceGroupName, String instanceName, ScalingProperties body, Context context) {
        this.serviceClient().scale(resourceGroupName, instanceName, body, context);
    }

    public void patchServers(String resourceGroupName, String instanceName) {
        this.serviceClient().patchServers(resourceGroupName, instanceName);
    }

    public void patchServers(String resourceGroupName, String instanceName, Context context) {
        this.serviceClient().patchServers(resourceGroupName, instanceName, context);
    }

    public MonitoringInstance getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String instanceName = Utils.getValueFromIdByName(id, "managedInstances");
        if (instanceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'managedInstances'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, instanceName, Context.NONE).getValue();
    }

    public Response<MonitoringInstance> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String instanceName = Utils.getValueFromIdByName(id, "managedInstances");
        if (instanceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'managedInstances'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, instanceName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String instanceName = Utils.getValueFromIdByName(id, "managedInstances");
        if (instanceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'managedInstances'.", id)));
        }
        this.delete(resourceGroupName, instanceName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String instanceName = Utils.getValueFromIdByName(id, "managedInstances");
        if (instanceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'managedInstances'.", id)));
        }
        this.delete(resourceGroupName, instanceName, context);
    }

    private InstancesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.scom.ScomManager manager() {
        return this.serviceManager;
    }

    public MonitoringInstanceImpl define(String name) {
        return new MonitoringInstanceImpl(name, this.manager());
    }
}
