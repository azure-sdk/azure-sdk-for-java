// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.codesigning.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.codesigning.models.RevocationStatus;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;

/**
 * Revocation details of the certificate.
 */
@Fluent
public final class Revocation {
    /*
     * The timestamp when the revocation is requested.
     */
    @JsonProperty(value = "requestedAt")
    private OffsetDateTime requestedAt;

    /*
     * The timestamp when the revocation is effective.
     */
    @JsonProperty(value = "effectiveAt")
    private OffsetDateTime effectiveAt;

    /*
     * Reason for revocation.
     */
    @JsonProperty(value = "reason")
    private String reason;

    /*
     * Remarks for the revocation.
     */
    @JsonProperty(value = "remarks")
    private String remarks;

    /*
     * Status of the revocation.
     */
    @JsonProperty(value = "status", access = JsonProperty.Access.WRITE_ONLY)
    private RevocationStatus status;

    /*
     * Reason for the revocation failure.
     */
    @JsonProperty(value = "failureReason")
    private String failureReason;

    /**
     * Creates an instance of Revocation class.
     */
    public Revocation() {
    }

    /**
     * Get the requestedAt property: The timestamp when the revocation is requested.
     * 
     * @return the requestedAt value.
     */
    public OffsetDateTime requestedAt() {
        return this.requestedAt;
    }

    /**
     * Set the requestedAt property: The timestamp when the revocation is requested.
     * 
     * @param requestedAt the requestedAt value to set.
     * @return the Revocation object itself.
     */
    public Revocation withRequestedAt(OffsetDateTime requestedAt) {
        this.requestedAt = requestedAt;
        return this;
    }

    /**
     * Get the effectiveAt property: The timestamp when the revocation is effective.
     * 
     * @return the effectiveAt value.
     */
    public OffsetDateTime effectiveAt() {
        return this.effectiveAt;
    }

    /**
     * Set the effectiveAt property: The timestamp when the revocation is effective.
     * 
     * @param effectiveAt the effectiveAt value to set.
     * @return the Revocation object itself.
     */
    public Revocation withEffectiveAt(OffsetDateTime effectiveAt) {
        this.effectiveAt = effectiveAt;
        return this;
    }

    /**
     * Get the reason property: Reason for revocation.
     * 
     * @return the reason value.
     */
    public String reason() {
        return this.reason;
    }

    /**
     * Set the reason property: Reason for revocation.
     * 
     * @param reason the reason value to set.
     * @return the Revocation object itself.
     */
    public Revocation withReason(String reason) {
        this.reason = reason;
        return this;
    }

    /**
     * Get the remarks property: Remarks for the revocation.
     * 
     * @return the remarks value.
     */
    public String remarks() {
        return this.remarks;
    }

    /**
     * Set the remarks property: Remarks for the revocation.
     * 
     * @param remarks the remarks value to set.
     * @return the Revocation object itself.
     */
    public Revocation withRemarks(String remarks) {
        this.remarks = remarks;
        return this;
    }

    /**
     * Get the status property: Status of the revocation.
     * 
     * @return the status value.
     */
    public RevocationStatus status() {
        return this.status;
    }

    /**
     * Get the failureReason property: Reason for the revocation failure.
     * 
     * @return the failureReason value.
     */
    public String failureReason() {
        return this.failureReason;
    }

    /**
     * Set the failureReason property: Reason for the revocation failure.
     * 
     * @param failureReason the failureReason value to set.
     * @return the Revocation object itself.
     */
    public Revocation withFailureReason(String failureReason) {
        this.failureReason = failureReason;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
