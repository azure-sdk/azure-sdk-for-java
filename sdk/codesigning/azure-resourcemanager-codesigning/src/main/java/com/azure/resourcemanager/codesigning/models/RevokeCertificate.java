// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.codesigning.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;

/**
 * Defines the certificate revocation properties.
 */
@Fluent
public final class RevokeCertificate {
    /*
     * Serial number of the certificate.
     */
    @JsonProperty(value = "serialNumber", required = true)
    private String serialNumber;

    /*
     * Thumbprint of the certificate.
     */
    @JsonProperty(value = "thumbprint", required = true)
    private String thumbprint;

    /*
     * The timestamp when the revocation is effective.
     */
    @JsonProperty(value = "effectiveAt", required = true)
    private OffsetDateTime effectiveAt;

    /*
     * Reason for the revocation.
     */
    @JsonProperty(value = "reason", required = true)
    private String reason;

    /*
     * Remarks for the revocation.
     */
    @JsonProperty(value = "remarks")
    private String remarks;

    /**
     * Creates an instance of RevokeCertificate class.
     */
    public RevokeCertificate() {
    }

    /**
     * Get the serialNumber property: Serial number of the certificate.
     * 
     * @return the serialNumber value.
     */
    public String serialNumber() {
        return this.serialNumber;
    }

    /**
     * Set the serialNumber property: Serial number of the certificate.
     * 
     * @param serialNumber the serialNumber value to set.
     * @return the RevokeCertificate object itself.
     */
    public RevokeCertificate withSerialNumber(String serialNumber) {
        this.serialNumber = serialNumber;
        return this;
    }

    /**
     * Get the thumbprint property: Thumbprint of the certificate.
     * 
     * @return the thumbprint value.
     */
    public String thumbprint() {
        return this.thumbprint;
    }

    /**
     * Set the thumbprint property: Thumbprint of the certificate.
     * 
     * @param thumbprint the thumbprint value to set.
     * @return the RevokeCertificate object itself.
     */
    public RevokeCertificate withThumbprint(String thumbprint) {
        this.thumbprint = thumbprint;
        return this;
    }

    /**
     * Get the effectiveAt property: The timestamp when the revocation is effective.
     * 
     * @return the effectiveAt value.
     */
    public OffsetDateTime effectiveAt() {
        return this.effectiveAt;
    }

    /**
     * Set the effectiveAt property: The timestamp when the revocation is effective.
     * 
     * @param effectiveAt the effectiveAt value to set.
     * @return the RevokeCertificate object itself.
     */
    public RevokeCertificate withEffectiveAt(OffsetDateTime effectiveAt) {
        this.effectiveAt = effectiveAt;
        return this;
    }

    /**
     * Get the reason property: Reason for the revocation.
     * 
     * @return the reason value.
     */
    public String reason() {
        return this.reason;
    }

    /**
     * Set the reason property: Reason for the revocation.
     * 
     * @param reason the reason value to set.
     * @return the RevokeCertificate object itself.
     */
    public RevokeCertificate withReason(String reason) {
        this.reason = reason;
        return this;
    }

    /**
     * Get the remarks property: Remarks for the revocation.
     * 
     * @return the remarks value.
     */
    public String remarks() {
        return this.remarks;
    }

    /**
     * Set the remarks property: Remarks for the revocation.
     * 
     * @param remarks the remarks value to set.
     * @return the RevokeCertificate object itself.
     */
    public RevokeCertificate withRemarks(String remarks) {
        this.remarks = remarks;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (serialNumber() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property serialNumber in model RevokeCertificate"));
        }
        if (thumbprint() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property thumbprint in model RevokeCertificate"));
        }
        if (effectiveAt() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property effectiveAt in model RevokeCertificate"));
        }
        if (reason() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property reason in model RevokeCertificate"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(RevokeCertificate.class);
}
