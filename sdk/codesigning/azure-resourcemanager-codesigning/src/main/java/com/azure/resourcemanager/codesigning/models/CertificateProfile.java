// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.codesigning.models;

import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.codesigning.fluent.models.CertificateProfileInner;
import java.util.List;

/** An immutable client-side representation of CertificateProfile. */
public interface CertificateProfile {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     *
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * Gets the profileType property: Profile type of the certificate.
     *
     * @return the profileType value.
     */
    ProfileType profileType();

    /**
     * Gets the rotationPolicy property: Rotation policy of the certificate.
     *
     * @return the rotationPolicy value.
     */
    RotationPolicy rotationPolicy();

    /**
     * Gets the commonName property: Used as CN in the subject name of the certificate.
     *
     * @return the commonName value.
     */
    String commonName();

    /**
     * Gets the organization property: Used as O in the subject name of the certificate.
     *
     * @return the organization value.
     */
    String organization();

    /**
     * Gets the organizationUnit property: Used as OU in the subject name of the private trust certificate.
     *
     * @return the organizationUnit value.
     */
    String organizationUnit();

    /**
     * Gets the streetAddress property: The streetAddress property.
     *
     * @return the streetAddress value.
     */
    String streetAddress();

    /**
     * Gets the includeStreetAddress property: Whether to include in the public trust certificate subject name.
     *
     * @return the includeStreetAddress value.
     */
    Boolean includeStreetAddress();

    /**
     * Gets the state property: The state property.
     *
     * @return the state value.
     */
    String state();

    /**
     * Gets the includeState property: Whether to include in the public trust or private trust certificate subject name.
     *
     * @return the includeState value.
     */
    Boolean includeState();

    /**
     * Gets the city property: The city property.
     *
     * @return the city value.
     */
    String city();

    /**
     * Gets the includeCity property: Whether to include in the public trust or private trust certificate subject name.
     *
     * @return the includeCity value.
     */
    Boolean includeCity();

    /**
     * Gets the postalCode property: The postalCode property.
     *
     * @return the postalCode value.
     */
    String postalCode();

    /**
     * Gets the includePostalCode property: Whether to include in the public trust certificate subject name.
     *
     * @return the includePostalCode value.
     */
    Boolean includePostalCode();

    /**
     * Gets the country property: The country property.
     *
     * @return the country value.
     */
    String country();

    /**
     * Gets the includeCountry property: Whether to include in the public trust or private trust certificate subject
     * name.
     *
     * @return the includeCountry value.
     */
    Boolean includeCountry();

    /**
     * Gets the enhancedKeyUsage property: Enhanced key usage of the certificate.
     *
     * @return the enhancedKeyUsage value.
     */
    String enhancedKeyUsage();

    /**
     * Gets the identityValidationId property: The identityValidationId property.
     *
     * @return the identityValidationId value.
     */
    String identityValidationId();

    /**
     * Gets the provisioningState property: Provisioning state of the code signing account.
     *
     * @return the provisioningState value.
     */
    ProvisioningState provisioningState();

    /**
     * Gets the status property: Status of the certificate profiles.
     *
     * @return the status value.
     */
    CertificateProfileStatus status();

    /**
     * Gets the certificates property: The certificates property.
     *
     * @return the certificates value.
     */
    List<Certificate> certificates();

    /**
     * Gets the name of the resource group.
     *
     * @return the name of the resource group.
     */
    String resourceGroupName();

    /**
     * Gets the inner com.azure.resourcemanager.codesigning.fluent.models.CertificateProfileInner object.
     *
     * @return the inner object.
     */
    CertificateProfileInner innerModel();

    /** The entirety of the CertificateProfile definition. */
    interface Definition
        extends DefinitionStages.Blank,
            DefinitionStages.WithParentResource,
            DefinitionStages.WithProfileType,
            DefinitionStages.WithRotationPolicy,
            DefinitionStages.WithCommonName,
            DefinitionStages.WithOrganization,
            DefinitionStages.WithCreate {
    }
    /** The CertificateProfile definition stages. */
    interface DefinitionStages {
        /** The first stage of the CertificateProfile definition. */
        interface Blank extends WithParentResource {
        }
        /** The stage of the CertificateProfile definition allowing to specify parent resource. */
        interface WithParentResource {
            /**
             * Specifies resourceGroupName, accountName.
             *
             * @param resourceGroupName The name of the resource group. The name is case insensitive.
             * @param accountName Code Signing account name.
             * @return the next definition stage.
             */
            WithProfileType withExistingCodeSigningAccount(String resourceGroupName, String accountName);
        }
        /** The stage of the CertificateProfile definition allowing to specify profileType. */
        interface WithProfileType {
            /**
             * Specifies the profileType property: Profile type of the certificate.
             *
             * @param profileType Profile type of the certificate.
             * @return the next definition stage.
             */
            WithRotationPolicy withProfileType(ProfileType profileType);
        }
        /** The stage of the CertificateProfile definition allowing to specify rotationPolicy. */
        interface WithRotationPolicy {
            /**
             * Specifies the rotationPolicy property: Rotation policy of the certificate.
             *
             * @param rotationPolicy Rotation policy of the certificate.
             * @return the next definition stage.
             */
            WithCommonName withRotationPolicy(RotationPolicy rotationPolicy);
        }
        /** The stage of the CertificateProfile definition allowing to specify commonName. */
        interface WithCommonName {
            /**
             * Specifies the commonName property: Used as CN in the subject name of the certificate.
             *
             * @param commonName Used as CN in the subject name of the certificate.
             * @return the next definition stage.
             */
            WithOrganization withCommonName(String commonName);
        }
        /** The stage of the CertificateProfile definition allowing to specify organization. */
        interface WithOrganization {
            /**
             * Specifies the organization property: Used as O in the subject name of the certificate.
             *
             * @param organization Used as O in the subject name of the certificate.
             * @return the next definition stage.
             */
            WithCreate withOrganization(String organization);
        }
        /**
         * The stage of the CertificateProfile definition which contains all the minimum required properties for the
         * resource to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithOrganizationUnit,
                DefinitionStages.WithIncludeStreetAddress,
                DefinitionStages.WithIncludeState,
                DefinitionStages.WithIncludeCity,
                DefinitionStages.WithIncludePostalCode,
                DefinitionStages.WithIncludeCountry {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            CertificateProfile create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            CertificateProfile create(Context context);
        }
        /** The stage of the CertificateProfile definition allowing to specify organizationUnit. */
        interface WithOrganizationUnit {
            /**
             * Specifies the organizationUnit property: Used as OU in the subject name of the private trust certificate.
             *
             * @param organizationUnit Used as OU in the subject name of the private trust certificate.
             * @return the next definition stage.
             */
            WithCreate withOrganizationUnit(String organizationUnit);
        }
        /** The stage of the CertificateProfile definition allowing to specify includeStreetAddress. */
        interface WithIncludeStreetAddress {
            /**
             * Specifies the includeStreetAddress property: Whether to include in the public trust certificate subject
             * name.
             *
             * @param includeStreetAddress Whether to include in the public trust certificate subject name.
             * @return the next definition stage.
             */
            WithCreate withIncludeStreetAddress(Boolean includeStreetAddress);
        }
        /** The stage of the CertificateProfile definition allowing to specify includeState. */
        interface WithIncludeState {
            /**
             * Specifies the includeState property: Whether to include in the public trust or private trust certificate
             * subject name.
             *
             * @param includeState Whether to include in the public trust or private trust certificate subject name.
             * @return the next definition stage.
             */
            WithCreate withIncludeState(Boolean includeState);
        }
        /** The stage of the CertificateProfile definition allowing to specify includeCity. */
        interface WithIncludeCity {
            /**
             * Specifies the includeCity property: Whether to include in the public trust or private trust certificate
             * subject name.
             *
             * @param includeCity Whether to include in the public trust or private trust certificate subject name.
             * @return the next definition stage.
             */
            WithCreate withIncludeCity(Boolean includeCity);
        }
        /** The stage of the CertificateProfile definition allowing to specify includePostalCode. */
        interface WithIncludePostalCode {
            /**
             * Specifies the includePostalCode property: Whether to include in the public trust certificate subject
             * name.
             *
             * @param includePostalCode Whether to include in the public trust certificate subject name.
             * @return the next definition stage.
             */
            WithCreate withIncludePostalCode(Boolean includePostalCode);
        }
        /** The stage of the CertificateProfile definition allowing to specify includeCountry. */
        interface WithIncludeCountry {
            /**
             * Specifies the includeCountry property: Whether to include in the public trust or private trust
             * certificate subject name.
             *
             * @param includeCountry Whether to include in the public trust or private trust certificate subject name.
             * @return the next definition stage.
             */
            WithCreate withIncludeCountry(Boolean includeCountry);
        }
    }
    /**
     * Begins update for the CertificateProfile resource.
     *
     * @return the stage of resource update.
     */
    CertificateProfile.Update update();

    /** The template for CertificateProfile update. */
    interface Update extends UpdateStages.WithCertificates {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        CertificateProfile apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        CertificateProfile apply(Context context);
    }
    /** The CertificateProfile update stages. */
    interface UpdateStages {
        /** The stage of the CertificateProfile update allowing to specify certificates. */
        interface WithCertificates {
            /**
             * Specifies the certificates property: The certificates property..
             *
             * @param certificates The certificates property.
             * @return the next definition stage.
             */
            Update withCertificates(List<Certificate> certificates);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    CertificateProfile refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    CertificateProfile refresh(Context context);
}
