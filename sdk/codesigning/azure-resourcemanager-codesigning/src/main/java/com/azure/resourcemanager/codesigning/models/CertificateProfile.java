// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.codesigning.models;

import com.azure.core.http.rest.Response;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.codesigning.fluent.models.CertificateProfileInner;
import java.util.List;

/**
 * An immutable client-side representation of CertificateProfile.
 */
public interface CertificateProfile {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     * 
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     * 
     * @return the type value.
     */
    String type();

    /**
     * Gets the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * Gets the profileType property: Profile type of the certificate.
     * 
     * @return the profileType value.
     */
    ProfileType profileType();

    /**
     * Gets the commonName property: Used as CN in the certificate subject name.
     * 
     * @return the commonName value.
     */
    String commonName();

    /**
     * Gets the organization property: Used as O in the certificate subject name.
     * 
     * @return the organization value.
     */
    String organization();

    /**
     * Gets the organizationUnit property: Used as OU in the private trust certificate subject name.
     * 
     * @return the organizationUnit value.
     */
    String organizationUnit();

    /**
     * Gets the streetAddress property: Used as STREET in the certificate subject name.
     * 
     * @return the streetAddress value.
     */
    String streetAddress();

    /**
     * Gets the includeStreetAddress property: Whether to include STREET in the certificate subject name.
     * 
     * @return the includeStreetAddress value.
     */
    Boolean includeStreetAddress();

    /**
     * Gets the city property: Used as L in the certificate subject name.
     * 
     * @return the city value.
     */
    String city();

    /**
     * Gets the includeCity property: Whether to include L in the certificate subject name. Applicable only for private
     * trust, private trust ci profile types.
     * 
     * @return the includeCity value.
     */
    Boolean includeCity();

    /**
     * Gets the state property: Used as S in the certificate subject name.
     * 
     * @return the state value.
     */
    String state();

    /**
     * Gets the includeState property: Whether to include S in the certificate subject name. Applicable only for private
     * trust, private trust ci profile types.
     * 
     * @return the includeState value.
     */
    Boolean includeState();

    /**
     * Gets the country property: Used as C in the certificate subject name.
     * 
     * @return the country value.
     */
    String country();

    /**
     * Gets the includeCountry property: Whether to include C in the certificate subject name. Applicable only for
     * private trust, private trust ci profile types.
     * 
     * @return the includeCountry value.
     */
    Boolean includeCountry();

    /**
     * Gets the postalCode property: Used as PC in the certificate subject name.
     * 
     * @return the postalCode value.
     */
    String postalCode();

    /**
     * Gets the includePostalCode property: Whether to include PC in the certificate subject name.
     * 
     * @return the includePostalCode value.
     */
    Boolean includePostalCode();

    /**
     * Gets the enhancedKeyUsage property: Enhanced key usage of the certificate.
     * 
     * @return the enhancedKeyUsage value.
     */
    String enhancedKeyUsage();

    /**
     * Gets the identityValidationId property: Identity validation id used for the certificate subject name.
     * 
     * @return the identityValidationId value.
     */
    String identityValidationId();

    /**
     * Gets the provisioningState property: Status of the current operation on certificate profile.
     * 
     * @return the provisioningState value.
     */
    ProvisioningState provisioningState();

    /**
     * Gets the status property: Status of the certificate profile.
     * 
     * @return the status value.
     */
    CertificateProfileStatus status();

    /**
     * Gets the certificates property: List of renewed certificates.
     * 
     * @return the certificates value.
     */
    List<Certificate> certificates();

    /**
     * Gets the inner com.azure.resourcemanager.codesigning.fluent.models.CertificateProfileInner object.
     * 
     * @return the inner object.
     */
    CertificateProfileInner innerModel();

    /**
     * The entirety of the CertificateProfile definition.
     */
    interface Definition
        extends DefinitionStages.Blank, DefinitionStages.WithParentResource, DefinitionStages.WithCreate {
    }

    /**
     * The CertificateProfile definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of the CertificateProfile definition.
         */
        interface Blank extends WithParentResource {
        }

        /**
         * The stage of the CertificateProfile definition allowing to specify parent resource.
         */
        interface WithParentResource {
            /**
             * Specifies resourceGroupName, accountName.
             * 
             * @param resourceGroupName The name of the resource group. The name is case insensitive.
             * @param accountName Trusted Signing account name.
             * @return the next definition stage.
             */
            WithCreate withExistingCodeSigningAccount(String resourceGroupName, String accountName);
        }

        /**
         * The stage of the CertificateProfile definition which contains all the minimum required properties for the
         * resource to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate extends DefinitionStages.WithProfileType, DefinitionStages.WithIncludeStreetAddress,
            DefinitionStages.WithIncludeCity, DefinitionStages.WithIncludeState, DefinitionStages.WithIncludeCountry,
            DefinitionStages.WithIncludePostalCode, DefinitionStages.WithIdentityValidationId {
            /**
             * Executes the create request.
             * 
             * @return the created resource.
             */
            CertificateProfile create();

            /**
             * Executes the create request.
             * 
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            CertificateProfile create(Context context);
        }

        /**
         * The stage of the CertificateProfile definition allowing to specify profileType.
         */
        interface WithProfileType {
            /**
             * Specifies the profileType property: Profile type of the certificate..
             * 
             * @param profileType Profile type of the certificate.
             * @return the next definition stage.
             */
            WithCreate withProfileType(ProfileType profileType);
        }

        /**
         * The stage of the CertificateProfile definition allowing to specify includeStreetAddress.
         */
        interface WithIncludeStreetAddress {
            /**
             * Specifies the includeStreetAddress property: Whether to include STREET in the certificate subject name..
             * 
             * @param includeStreetAddress Whether to include STREET in the certificate subject name.
             * @return the next definition stage.
             */
            WithCreate withIncludeStreetAddress(Boolean includeStreetAddress);
        }

        /**
         * The stage of the CertificateProfile definition allowing to specify includeCity.
         */
        interface WithIncludeCity {
            /**
             * Specifies the includeCity property: Whether to include L in the certificate subject name. Applicable only
             * for private trust, private trust ci profile types.
             * 
             * @param includeCity Whether to include L in the certificate subject name. Applicable only for private
             * trust, private trust ci profile types.
             * @return the next definition stage.
             */
            WithCreate withIncludeCity(Boolean includeCity);
        }

        /**
         * The stage of the CertificateProfile definition allowing to specify includeState.
         */
        interface WithIncludeState {
            /**
             * Specifies the includeState property: Whether to include S in the certificate subject name. Applicable
             * only for private trust, private trust ci profile types.
             * 
             * @param includeState Whether to include S in the certificate subject name. Applicable only for private
             * trust, private trust ci profile types.
             * @return the next definition stage.
             */
            WithCreate withIncludeState(Boolean includeState);
        }

        /**
         * The stage of the CertificateProfile definition allowing to specify includeCountry.
         */
        interface WithIncludeCountry {
            /**
             * Specifies the includeCountry property: Whether to include C in the certificate subject name. Applicable
             * only for private trust, private trust ci profile types.
             * 
             * @param includeCountry Whether to include C in the certificate subject name. Applicable only for private
             * trust, private trust ci profile types.
             * @return the next definition stage.
             */
            WithCreate withIncludeCountry(Boolean includeCountry);
        }

        /**
         * The stage of the CertificateProfile definition allowing to specify includePostalCode.
         */
        interface WithIncludePostalCode {
            /**
             * Specifies the includePostalCode property: Whether to include PC in the certificate subject name..
             * 
             * @param includePostalCode Whether to include PC in the certificate subject name.
             * @return the next definition stage.
             */
            WithCreate withIncludePostalCode(Boolean includePostalCode);
        }

        /**
         * The stage of the CertificateProfile definition allowing to specify identityValidationId.
         */
        interface WithIdentityValidationId {
            /**
             * Specifies the identityValidationId property: Identity validation id used for the certificate subject
             * name..
             * 
             * @param identityValidationId Identity validation id used for the certificate subject name.
             * @return the next definition stage.
             */
            WithCreate withIdentityValidationId(String identityValidationId);
        }
    }

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @return the refreshed resource.
     */
    CertificateProfile refresh();

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    CertificateProfile refresh(Context context);

    /**
     * Revoke a certificate under a certificate profile.
     * 
     * @param body Parameters to revoke the certificate profile.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    Response<Void> revokeCertificateWithResponse(RevokeCertificate body, Context context);

    /**
     * Revoke a certificate under a certificate profile.
     * 
     * @param body Parameters to revoke the certificate profile.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void revokeCertificate(RevokeCertificate body);
}
