// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.codesigning.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.codesigning.fluent.models.CheckNameAvailabilityResultInner;
import com.azure.resourcemanager.codesigning.fluent.models.CodeSigningAccountInner;
import com.azure.resourcemanager.codesigning.models.CheckNameAvailability;
import com.azure.resourcemanager.codesigning.models.CodeSigningAccountPatch;

/** An instance of this class provides access to all the operations defined in CodeSigningAccountOperationsClient. */
public interface CodeSigningAccountOperationsClient {
    /**
     * Create a Code Signing Account.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Code Signing account name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of code signing account resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<CodeSigningAccountInner>, CodeSigningAccountInner> beginCreate(
        String resourceGroupName, String accountName);

    /**
     * Create a Code Signing Account.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Code Signing account name.
     * @param codeSigningAccount Parameters to create the code signing account.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of code signing account resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<CodeSigningAccountInner>, CodeSigningAccountInner> beginCreate(
        String resourceGroupName, String accountName, CodeSigningAccountInner codeSigningAccount, Context context);

    /**
     * Create a Code Signing Account.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Code Signing account name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return code signing account resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    CodeSigningAccountInner create(String resourceGroupName, String accountName);

    /**
     * Create a Code Signing Account.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Code Signing account name.
     * @param codeSigningAccount Parameters to create the code signing account.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return code signing account resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    CodeSigningAccountInner create(
        String resourceGroupName, String accountName, CodeSigningAccountInner codeSigningAccount, Context context);

    /**
     * Update a code signing account.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Code Signing account name.
     * @param codeSigningAccountPatch Parameters supplied to update code signing account.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return code signing account resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<CodeSigningAccountInner> updateWithResponse(
        String resourceGroupName, String accountName, CodeSigningAccountPatch codeSigningAccountPatch, Context context);

    /**
     * Update a code signing account.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Code Signing account name.
     * @param codeSigningAccountPatch Parameters supplied to update code signing account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return code signing account resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    CodeSigningAccountInner update(
        String resourceGroupName, String accountName, CodeSigningAccountPatch codeSigningAccountPatch);

    /**
     * Get a Code Signing Account.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Code Signing account name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Code Signing Account along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<CodeSigningAccountInner> getByResourceGroupWithResponse(
        String resourceGroupName, String accountName, Context context);

    /**
     * Get a Code Signing Account.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Code Signing account name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Code Signing Account.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    CodeSigningAccountInner getByResourceGroup(String resourceGroupName, String accountName);

    /**
     * Delete Code Signing Account.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Code Signing account name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String accountName);

    /**
     * Delete Code Signing Account.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Code Signing account name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String accountName, Context context);

    /**
     * Delete Code Signing Account.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Code Signing account name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String accountName);

    /**
     * Delete Code Signing Account.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Code Signing account name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String accountName, Context context);

    /**
     * Lists Code Signing Accounts within a subscription.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the paginated list of code signing accounts as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<CodeSigningAccountInner> list();

    /**
     * Lists Code Signing Accounts within a subscription.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the paginated list of code signing accounts as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<CodeSigningAccountInner> list(Context context);

    /**
     * List Code Signing Accounts within a resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the paginated list of code signing accounts as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<CodeSigningAccountInner> listByResourceGroup(String resourceGroupName);

    /**
     * List Code Signing Accounts within a resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the paginated list of code signing accounts as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<CodeSigningAccountInner> listByResourceGroup(String resourceGroupName, Context context);

    /**
     * Checks that the code signing account name is valid and is not already in use.
     *
     * @param accountName The name of the code signing account.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the CheckNameAvailability operation response along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<CheckNameAvailabilityResultInner> checkNameAvailabilityWithResponse(
        CheckNameAvailability accountName, Context context);

    /**
     * Checks that the code signing account name is valid and is not already in use.
     *
     * @param accountName The name of the code signing account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the CheckNameAvailability operation response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    CheckNameAvailabilityResultInner checkNameAvailability(CheckNameAvailability accountName);
}
