// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.codesigning.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.codesigning.fluent.CodeSigningAccountsClient;
import com.azure.resourcemanager.codesigning.fluent.models.CheckNameAvailabilityResultInner;
import com.azure.resourcemanager.codesigning.fluent.models.CodeSigningAccountInner;
import com.azure.resourcemanager.codesigning.models.CheckNameAvailability;
import com.azure.resourcemanager.codesigning.models.CheckNameAvailabilityResult;
import com.azure.resourcemanager.codesigning.models.CodeSigningAccount;
import com.azure.resourcemanager.codesigning.models.CodeSigningAccounts;

public final class CodeSigningAccountsImpl implements CodeSigningAccounts {
    private static final ClientLogger LOGGER = new ClientLogger(CodeSigningAccountsImpl.class);

    private final CodeSigningAccountsClient innerClient;

    private final com.azure.resourcemanager.codesigning.CodeSigningManager serviceManager;

    public CodeSigningAccountsImpl(CodeSigningAccountsClient innerClient,
        com.azure.resourcemanager.codesigning.CodeSigningManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<CheckNameAvailabilityResult> checkNameAvailabilityWithResponse(CheckNameAvailability body,
        Context context) {
        Response<CheckNameAvailabilityResultInner> inner
            = this.serviceClient().checkNameAvailabilityWithResponse(body, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new CheckNameAvailabilityResultImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public CheckNameAvailabilityResult checkNameAvailability(CheckNameAvailability body) {
        CheckNameAvailabilityResultInner inner = this.serviceClient().checkNameAvailability(body);
        if (inner != null) {
            return new CheckNameAvailabilityResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<CodeSigningAccount> list() {
        PagedIterable<CodeSigningAccountInner> inner = this.serviceClient().list();
        return ResourceManagerUtils.mapPage(inner, inner1 -> new CodeSigningAccountImpl(inner1, this.manager()));
    }

    public PagedIterable<CodeSigningAccount> list(Context context) {
        PagedIterable<CodeSigningAccountInner> inner = this.serviceClient().list(context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new CodeSigningAccountImpl(inner1, this.manager()));
    }

    public PagedIterable<CodeSigningAccount> listByResourceGroup(String resourceGroupName) {
        PagedIterable<CodeSigningAccountInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new CodeSigningAccountImpl(inner1, this.manager()));
    }

    public PagedIterable<CodeSigningAccount> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<CodeSigningAccountInner> inner
            = this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new CodeSigningAccountImpl(inner1, this.manager()));
    }

    public Response<CodeSigningAccount> getByResourceGroupWithResponse(String resourceGroupName, String accountName,
        Context context) {
        Response<CodeSigningAccountInner> inner
            = this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, accountName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new CodeSigningAccountImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public CodeSigningAccount getByResourceGroup(String resourceGroupName, String accountName) {
        CodeSigningAccountInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, accountName);
        if (inner != null) {
            return new CodeSigningAccountImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceGroupName, String accountName) {
        this.serviceClient().delete(resourceGroupName, accountName);
    }

    public void delete(String resourceGroupName, String accountName, Context context) {
        this.serviceClient().delete(resourceGroupName, accountName, context);
    }

    public CodeSigningAccount getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = ResourceManagerUtils.getValueFromIdByName(id, "codeSigningAccounts");
        if (accountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'codeSigningAccounts'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, accountName, Context.NONE).getValue();
    }

    public Response<CodeSigningAccount> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = ResourceManagerUtils.getValueFromIdByName(id, "codeSigningAccounts");
        if (accountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'codeSigningAccounts'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, accountName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = ResourceManagerUtils.getValueFromIdByName(id, "codeSigningAccounts");
        if (accountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'codeSigningAccounts'.", id)));
        }
        this.delete(resourceGroupName, accountName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = ResourceManagerUtils.getValueFromIdByName(id, "codeSigningAccounts");
        if (accountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'codeSigningAccounts'.", id)));
        }
        this.delete(resourceGroupName, accountName, context);
    }

    private CodeSigningAccountsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.codesigning.CodeSigningManager manager() {
        return this.serviceManager;
    }

    public CodeSigningAccountImpl define(String name) {
        return new CodeSigningAccountImpl(name, this.manager());
    }
}
