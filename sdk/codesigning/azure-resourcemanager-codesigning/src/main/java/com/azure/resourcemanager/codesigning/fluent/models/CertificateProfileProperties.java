// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.codesigning.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.codesigning.models.Certificate;
import com.azure.resourcemanager.codesigning.models.CertificateProfileStatus;
import com.azure.resourcemanager.codesigning.models.ProfileType;
import com.azure.resourcemanager.codesigning.models.ProvisioningState;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * Properties of the certificate profile.
 */
@Fluent
public final class CertificateProfileProperties {
    /*
     * Profile type of the certificate.
     */
    @JsonProperty(value = "profileType", required = true)
    private ProfileType profileType;

    /*
     * Used as CN in the certificate subject name.
     */
    @JsonProperty(value = "commonName", access = JsonProperty.Access.WRITE_ONLY)
    private String commonName;

    /*
     * Used as O in the certificate subject name.
     */
    @JsonProperty(value = "organization", access = JsonProperty.Access.WRITE_ONLY)
    private String organization;

    /*
     * Used as OU in the private trust certificate subject name.
     */
    @JsonProperty(value = "organizationUnit", access = JsonProperty.Access.WRITE_ONLY)
    private String organizationUnit;

    /*
     * Used as STREET in the certificate subject name.
     */
    @JsonProperty(value = "streetAddress", access = JsonProperty.Access.WRITE_ONLY)
    private String streetAddress;

    /*
     * Whether to include STREET in the certificate subject name.
     */
    @JsonProperty(value = "includeStreetAddress")
    private Boolean includeStreetAddress;

    /*
     * Used as L in the certificate subject name.
     */
    @JsonProperty(value = "city", access = JsonProperty.Access.WRITE_ONLY)
    private String city;

    /*
     * Whether to include L in the certificate subject name. Applicable only for private trust, private trust ci profile types
     */
    @JsonProperty(value = "includeCity")
    private Boolean includeCity;

    /*
     * Used as S in the certificate subject name.
     */
    @JsonProperty(value = "state", access = JsonProperty.Access.WRITE_ONLY)
    private String state;

    /*
     * Whether to include S in the certificate subject name. Applicable only for private trust, private trust ci profile types
     */
    @JsonProperty(value = "includeState")
    private Boolean includeState;

    /*
     * Used as C in the certificate subject name.
     */
    @JsonProperty(value = "country", access = JsonProperty.Access.WRITE_ONLY)
    private String country;

    /*
     * Whether to include C in the certificate subject name. Applicable only for private trust, private trust ci profile types
     */
    @JsonProperty(value = "includeCountry")
    private Boolean includeCountry;

    /*
     * Used as PC in the certificate subject name.
     */
    @JsonProperty(value = "postalCode", access = JsonProperty.Access.WRITE_ONLY)
    private String postalCode;

    /*
     * Whether to include PC in the certificate subject name.
     */
    @JsonProperty(value = "includePostalCode")
    private Boolean includePostalCode;

    /*
     * Enhanced key usage of the certificate.
     */
    @JsonProperty(value = "enhancedKeyUsage", access = JsonProperty.Access.WRITE_ONLY)
    private String enhancedKeyUsage;

    /*
     * Identity validation id used for the certificate subject name.
     */
    @JsonProperty(value = "identityValidationId")
    private String identityValidationId;

    /*
     * Status of the current operation on certificate profile.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /*
     * Status of the certificate profile.
     */
    @JsonProperty(value = "status", access = JsonProperty.Access.WRITE_ONLY)
    private CertificateProfileStatus status;

    /*
     * List of renewed certificates.
     */
    @JsonProperty(value = "certificates", access = JsonProperty.Access.WRITE_ONLY)
    private List<Certificate> certificates;

    /**
     * Creates an instance of CertificateProfileProperties class.
     */
    public CertificateProfileProperties() {
    }

    /**
     * Get the profileType property: Profile type of the certificate.
     * 
     * @return the profileType value.
     */
    public ProfileType profileType() {
        return this.profileType;
    }

    /**
     * Set the profileType property: Profile type of the certificate.
     * 
     * @param profileType the profileType value to set.
     * @return the CertificateProfileProperties object itself.
     */
    public CertificateProfileProperties withProfileType(ProfileType profileType) {
        this.profileType = profileType;
        return this;
    }

    /**
     * Get the commonName property: Used as CN in the certificate subject name.
     * 
     * @return the commonName value.
     */
    public String commonName() {
        return this.commonName;
    }

    /**
     * Get the organization property: Used as O in the certificate subject name.
     * 
     * @return the organization value.
     */
    public String organization() {
        return this.organization;
    }

    /**
     * Get the organizationUnit property: Used as OU in the private trust certificate subject name.
     * 
     * @return the organizationUnit value.
     */
    public String organizationUnit() {
        return this.organizationUnit;
    }

    /**
     * Get the streetAddress property: Used as STREET in the certificate subject name.
     * 
     * @return the streetAddress value.
     */
    public String streetAddress() {
        return this.streetAddress;
    }

    /**
     * Get the includeStreetAddress property: Whether to include STREET in the certificate subject name.
     * 
     * @return the includeStreetAddress value.
     */
    public Boolean includeStreetAddress() {
        return this.includeStreetAddress;
    }

    /**
     * Set the includeStreetAddress property: Whether to include STREET in the certificate subject name.
     * 
     * @param includeStreetAddress the includeStreetAddress value to set.
     * @return the CertificateProfileProperties object itself.
     */
    public CertificateProfileProperties withIncludeStreetAddress(Boolean includeStreetAddress) {
        this.includeStreetAddress = includeStreetAddress;
        return this;
    }

    /**
     * Get the city property: Used as L in the certificate subject name.
     * 
     * @return the city value.
     */
    public String city() {
        return this.city;
    }

    /**
     * Get the includeCity property: Whether to include L in the certificate subject name. Applicable only for private
     * trust, private trust ci profile types.
     * 
     * @return the includeCity value.
     */
    public Boolean includeCity() {
        return this.includeCity;
    }

    /**
     * Set the includeCity property: Whether to include L in the certificate subject name. Applicable only for private
     * trust, private trust ci profile types.
     * 
     * @param includeCity the includeCity value to set.
     * @return the CertificateProfileProperties object itself.
     */
    public CertificateProfileProperties withIncludeCity(Boolean includeCity) {
        this.includeCity = includeCity;
        return this;
    }

    /**
     * Get the state property: Used as S in the certificate subject name.
     * 
     * @return the state value.
     */
    public String state() {
        return this.state;
    }

    /**
     * Get the includeState property: Whether to include S in the certificate subject name. Applicable only for private
     * trust, private trust ci profile types.
     * 
     * @return the includeState value.
     */
    public Boolean includeState() {
        return this.includeState;
    }

    /**
     * Set the includeState property: Whether to include S in the certificate subject name. Applicable only for private
     * trust, private trust ci profile types.
     * 
     * @param includeState the includeState value to set.
     * @return the CertificateProfileProperties object itself.
     */
    public CertificateProfileProperties withIncludeState(Boolean includeState) {
        this.includeState = includeState;
        return this;
    }

    /**
     * Get the country property: Used as C in the certificate subject name.
     * 
     * @return the country value.
     */
    public String country() {
        return this.country;
    }

    /**
     * Get the includeCountry property: Whether to include C in the certificate subject name. Applicable only for
     * private trust, private trust ci profile types.
     * 
     * @return the includeCountry value.
     */
    public Boolean includeCountry() {
        return this.includeCountry;
    }

    /**
     * Set the includeCountry property: Whether to include C in the certificate subject name. Applicable only for
     * private trust, private trust ci profile types.
     * 
     * @param includeCountry the includeCountry value to set.
     * @return the CertificateProfileProperties object itself.
     */
    public CertificateProfileProperties withIncludeCountry(Boolean includeCountry) {
        this.includeCountry = includeCountry;
        return this;
    }

    /**
     * Get the postalCode property: Used as PC in the certificate subject name.
     * 
     * @return the postalCode value.
     */
    public String postalCode() {
        return this.postalCode;
    }

    /**
     * Get the includePostalCode property: Whether to include PC in the certificate subject name.
     * 
     * @return the includePostalCode value.
     */
    public Boolean includePostalCode() {
        return this.includePostalCode;
    }

    /**
     * Set the includePostalCode property: Whether to include PC in the certificate subject name.
     * 
     * @param includePostalCode the includePostalCode value to set.
     * @return the CertificateProfileProperties object itself.
     */
    public CertificateProfileProperties withIncludePostalCode(Boolean includePostalCode) {
        this.includePostalCode = includePostalCode;
        return this;
    }

    /**
     * Get the enhancedKeyUsage property: Enhanced key usage of the certificate.
     * 
     * @return the enhancedKeyUsage value.
     */
    public String enhancedKeyUsage() {
        return this.enhancedKeyUsage;
    }

    /**
     * Get the identityValidationId property: Identity validation id used for the certificate subject name.
     * 
     * @return the identityValidationId value.
     */
    public String identityValidationId() {
        return this.identityValidationId;
    }

    /**
     * Set the identityValidationId property: Identity validation id used for the certificate subject name.
     * 
     * @param identityValidationId the identityValidationId value to set.
     * @return the CertificateProfileProperties object itself.
     */
    public CertificateProfileProperties withIdentityValidationId(String identityValidationId) {
        this.identityValidationId = identityValidationId;
        return this;
    }

    /**
     * Get the provisioningState property: Status of the current operation on certificate profile.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the status property: Status of the certificate profile.
     * 
     * @return the status value.
     */
    public CertificateProfileStatus status() {
        return this.status;
    }

    /**
     * Get the certificates property: List of renewed certificates.
     * 
     * @return the certificates value.
     */
    public List<Certificate> certificates() {
        return this.certificates;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (profileType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property profileType in model CertificateProfileProperties"));
        }
        if (certificates() != null) {
            certificates().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(CertificateProfileProperties.class);
}
