// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.codesigning.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.codesigning.fluent.CertificateProfileOperationsClient;
import com.azure.resourcemanager.codesigning.fluent.models.CertificateProfileInner;
import com.azure.resourcemanager.codesigning.models.CertificateProfilePatch;
import com.azure.resourcemanager.codesigning.models.CertificateProfiles;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in CertificateProfileOperationsClient. */
public final class CertificateProfileOperationsClientImpl implements CertificateProfileOperationsClient {
    /** The proxy service used to perform REST calls. */
    private final CertificateProfileOperationsService service;

    /** The service client containing this operation class. */
    private final CodeSigningManagementClientImpl client;

    /**
     * Initializes an instance of CertificateProfileOperationsClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    CertificateProfileOperationsClientImpl(CodeSigningManagementClientImpl client) {
        this.service =
            RestProxy
                .create(
                    CertificateProfileOperationsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for CodeSigningManagementClientCertificateProfileOperations to be used by
     * the proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "CodeSigningManagemen")
    public interface CertificateProfileOperationsService {
        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CodeSigning/codeSigningAccounts/{accountName}/certificateProfiles")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<CertificateProfiles>> listByCodeSigningAccount(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("accountName") String accountName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CodeSigning/codeSigningAccounts/{accountName}/certificateProfiles/{profileName}")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> create(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("accountName") String accountName,
            @PathParam("profileName") String profileName,
            @BodyParam("application/json") CertificateProfileInner certificateProfile,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CodeSigning/codeSigningAccounts/{accountName}/certificateProfiles/{profileName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<CertificateProfileInner>> get(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("accountName") String accountName,
            @PathParam("profileName") String profileName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Patch(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CodeSigning/codeSigningAccounts/{accountName}/certificateProfiles/{profileName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<CertificateProfileInner>> update(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("accountName") String accountName,
            @PathParam("profileName") String profileName,
            @BodyParam("application/json") CertificateProfilePatch certificateProfilePatch,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CodeSigning/codeSigningAccounts/{accountName}/certificateProfiles/{profileName}")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("accountName") String accountName,
            @PathParam("profileName") String profileName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<CertificateProfiles>> listByCodeSigningAccountNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * List certificate profiles within a code signing account.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Code Signing account name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the paginated list of certificate profiles along with {@link PagedResponse} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<CertificateProfileInner>> listByCodeSigningAccountSinglePageAsync(
        String resourceGroupName, String accountName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (accountName == null) {
            return Mono.error(new IllegalArgumentException("Parameter accountName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listByCodeSigningAccount(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            accountName,
                            accept,
                            context))
            .<PagedResponse<CertificateProfileInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List certificate profiles within a code signing account.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Code Signing account name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the paginated list of certificate profiles along with {@link PagedResponse} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<CertificateProfileInner>> listByCodeSigningAccountSinglePageAsync(
        String resourceGroupName, String accountName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (accountName == null) {
            return Mono.error(new IllegalArgumentException("Parameter accountName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByCodeSigningAccount(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                accountName,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * List certificate profiles within a code signing account.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Code Signing account name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the paginated list of certificate profiles as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<CertificateProfileInner> listByCodeSigningAccountAsync(
        String resourceGroupName, String accountName) {
        return new PagedFlux<>(
            () -> listByCodeSigningAccountSinglePageAsync(resourceGroupName, accountName),
            nextLink -> listByCodeSigningAccountNextSinglePageAsync(nextLink));
    }

    /**
     * List certificate profiles within a code signing account.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Code Signing account name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the paginated list of certificate profiles as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<CertificateProfileInner> listByCodeSigningAccountAsync(
        String resourceGroupName, String accountName, Context context) {
        return new PagedFlux<>(
            () -> listByCodeSigningAccountSinglePageAsync(resourceGroupName, accountName, context),
            nextLink -> listByCodeSigningAccountNextSinglePageAsync(nextLink, context));
    }

    /**
     * List certificate profiles within a code signing account.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Code Signing account name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the paginated list of certificate profiles as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<CertificateProfileInner> listByCodeSigningAccount(
        String resourceGroupName, String accountName) {
        return new PagedIterable<>(listByCodeSigningAccountAsync(resourceGroupName, accountName));
    }

    /**
     * List certificate profiles within a code signing account.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Code Signing account name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the paginated list of certificate profiles as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<CertificateProfileInner> listByCodeSigningAccount(
        String resourceGroupName, String accountName, Context context) {
        return new PagedIterable<>(listByCodeSigningAccountAsync(resourceGroupName, accountName, context));
    }

    /**
     * Create a certificate profile.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Code Signing account name.
     * @param profileName Certificate profile name.
     * @param certificateProfile Parameters to create the certificate profile.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return certificate profile resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createWithResponseAsync(
        String resourceGroupName, String accountName, String profileName, CertificateProfileInner certificateProfile) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (accountName == null) {
            return Mono.error(new IllegalArgumentException("Parameter accountName is required and cannot be null."));
        }
        if (profileName == null) {
            return Mono.error(new IllegalArgumentException("Parameter profileName is required and cannot be null."));
        }
        if (certificateProfile == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter certificateProfile is required and cannot be null."));
        } else {
            certificateProfile.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .create(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            accountName,
                            profileName,
                            certificateProfile,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create a certificate profile.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Code Signing account name.
     * @param profileName Certificate profile name.
     * @param certificateProfile Parameters to create the certificate profile.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return certificate profile resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createWithResponseAsync(
        String resourceGroupName,
        String accountName,
        String profileName,
        CertificateProfileInner certificateProfile,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (accountName == null) {
            return Mono.error(new IllegalArgumentException("Parameter accountName is required and cannot be null."));
        }
        if (profileName == null) {
            return Mono.error(new IllegalArgumentException("Parameter profileName is required and cannot be null."));
        }
        if (certificateProfile == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter certificateProfile is required and cannot be null."));
        } else {
            certificateProfile.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .create(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                accountName,
                profileName,
                certificateProfile,
                accept,
                context);
    }

    /**
     * Create a certificate profile.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Code Signing account name.
     * @param profileName Certificate profile name.
     * @param certificateProfile Parameters to create the certificate profile.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of certificate profile resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<CertificateProfileInner>, CertificateProfileInner> beginCreateAsync(
        String resourceGroupName, String accountName, String profileName, CertificateProfileInner certificateProfile) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            createWithResponseAsync(resourceGroupName, accountName, profileName, certificateProfile);
        return this
            .client
            .<CertificateProfileInner, CertificateProfileInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                CertificateProfileInner.class,
                CertificateProfileInner.class,
                this.client.getContext());
    }

    /**
     * Create a certificate profile.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Code Signing account name.
     * @param profileName Certificate profile name.
     * @param certificateProfile Parameters to create the certificate profile.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of certificate profile resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<CertificateProfileInner>, CertificateProfileInner> beginCreateAsync(
        String resourceGroupName,
        String accountName,
        String profileName,
        CertificateProfileInner certificateProfile,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            createWithResponseAsync(resourceGroupName, accountName, profileName, certificateProfile, context);
        return this
            .client
            .<CertificateProfileInner, CertificateProfileInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                CertificateProfileInner.class,
                CertificateProfileInner.class,
                context);
    }

    /**
     * Create a certificate profile.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Code Signing account name.
     * @param profileName Certificate profile name.
     * @param certificateProfile Parameters to create the certificate profile.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of certificate profile resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<CertificateProfileInner>, CertificateProfileInner> beginCreate(
        String resourceGroupName, String accountName, String profileName, CertificateProfileInner certificateProfile) {
        return this.beginCreateAsync(resourceGroupName, accountName, profileName, certificateProfile).getSyncPoller();
    }

    /**
     * Create a certificate profile.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Code Signing account name.
     * @param profileName Certificate profile name.
     * @param certificateProfile Parameters to create the certificate profile.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of certificate profile resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<CertificateProfileInner>, CertificateProfileInner> beginCreate(
        String resourceGroupName,
        String accountName,
        String profileName,
        CertificateProfileInner certificateProfile,
        Context context) {
        return this
            .beginCreateAsync(resourceGroupName, accountName, profileName, certificateProfile, context)
            .getSyncPoller();
    }

    /**
     * Create a certificate profile.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Code Signing account name.
     * @param profileName Certificate profile name.
     * @param certificateProfile Parameters to create the certificate profile.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return certificate profile resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<CertificateProfileInner> createAsync(
        String resourceGroupName, String accountName, String profileName, CertificateProfileInner certificateProfile) {
        return beginCreateAsync(resourceGroupName, accountName, profileName, certificateProfile)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create a certificate profile.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Code Signing account name.
     * @param profileName Certificate profile name.
     * @param certificateProfile Parameters to create the certificate profile.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return certificate profile resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<CertificateProfileInner> createAsync(
        String resourceGroupName,
        String accountName,
        String profileName,
        CertificateProfileInner certificateProfile,
        Context context) {
        return beginCreateAsync(resourceGroupName, accountName, profileName, certificateProfile, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create a certificate profile.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Code Signing account name.
     * @param profileName Certificate profile name.
     * @param certificateProfile Parameters to create the certificate profile.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return certificate profile resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CertificateProfileInner create(
        String resourceGroupName, String accountName, String profileName, CertificateProfileInner certificateProfile) {
        return createAsync(resourceGroupName, accountName, profileName, certificateProfile).block();
    }

    /**
     * Create a certificate profile.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Code Signing account name.
     * @param profileName Certificate profile name.
     * @param certificateProfile Parameters to create the certificate profile.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return certificate profile resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CertificateProfileInner create(
        String resourceGroupName,
        String accountName,
        String profileName,
        CertificateProfileInner certificateProfile,
        Context context) {
        return createAsync(resourceGroupName, accountName, profileName, certificateProfile, context).block();
    }

    /**
     * Get details of a certificate profile.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Code Signing account name.
     * @param profileName Certificate profile name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details of a certificate profile along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<CertificateProfileInner>> getWithResponseAsync(
        String resourceGroupName, String accountName, String profileName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (accountName == null) {
            return Mono.error(new IllegalArgumentException("Parameter accountName is required and cannot be null."));
        }
        if (profileName == null) {
            return Mono.error(new IllegalArgumentException("Parameter profileName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .get(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            accountName,
                            profileName,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get details of a certificate profile.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Code Signing account name.
     * @param profileName Certificate profile name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details of a certificate profile along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<CertificateProfileInner>> getWithResponseAsync(
        String resourceGroupName, String accountName, String profileName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (accountName == null) {
            return Mono.error(new IllegalArgumentException("Parameter accountName is required and cannot be null."));
        }
        if (profileName == null) {
            return Mono.error(new IllegalArgumentException("Parameter profileName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .get(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                accountName,
                profileName,
                accept,
                context);
    }

    /**
     * Get details of a certificate profile.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Code Signing account name.
     * @param profileName Certificate profile name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details of a certificate profile on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<CertificateProfileInner> getAsync(String resourceGroupName, String accountName, String profileName) {
        return getWithResponseAsync(resourceGroupName, accountName, profileName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get details of a certificate profile.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Code Signing account name.
     * @param profileName Certificate profile name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details of a certificate profile along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<CertificateProfileInner> getWithResponse(
        String resourceGroupName, String accountName, String profileName, Context context) {
        return getWithResponseAsync(resourceGroupName, accountName, profileName, context).block();
    }

    /**
     * Get details of a certificate profile.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Code Signing account name.
     * @param profileName Certificate profile name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details of a certificate profile.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CertificateProfileInner get(String resourceGroupName, String accountName, String profileName) {
        return getWithResponse(resourceGroupName, accountName, profileName, Context.NONE).getValue();
    }

    /**
     * Update a certificate profile.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Code Signing account name.
     * @param profileName Certificate profile name.
     * @param certificateProfilePatch Parameters supplied to update certificate profile.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return certificate profile resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<CertificateProfileInner>> updateWithResponseAsync(
        String resourceGroupName,
        String accountName,
        String profileName,
        CertificateProfilePatch certificateProfilePatch) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (accountName == null) {
            return Mono.error(new IllegalArgumentException("Parameter accountName is required and cannot be null."));
        }
        if (profileName == null) {
            return Mono.error(new IllegalArgumentException("Parameter profileName is required and cannot be null."));
        }
        if (certificateProfilePatch == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter certificateProfilePatch is required and cannot be null."));
        } else {
            certificateProfilePatch.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .update(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            accountName,
                            profileName,
                            certificateProfilePatch,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Update a certificate profile.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Code Signing account name.
     * @param profileName Certificate profile name.
     * @param certificateProfilePatch Parameters supplied to update certificate profile.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return certificate profile resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<CertificateProfileInner>> updateWithResponseAsync(
        String resourceGroupName,
        String accountName,
        String profileName,
        CertificateProfilePatch certificateProfilePatch,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (accountName == null) {
            return Mono.error(new IllegalArgumentException("Parameter accountName is required and cannot be null."));
        }
        if (profileName == null) {
            return Mono.error(new IllegalArgumentException("Parameter profileName is required and cannot be null."));
        }
        if (certificateProfilePatch == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter certificateProfilePatch is required and cannot be null."));
        } else {
            certificateProfilePatch.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .update(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                accountName,
                profileName,
                certificateProfilePatch,
                accept,
                context);
    }

    /**
     * Update a certificate profile.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Code Signing account name.
     * @param profileName Certificate profile name.
     * @param certificateProfilePatch Parameters supplied to update certificate profile.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return certificate profile resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<CertificateProfileInner> updateAsync(
        String resourceGroupName,
        String accountName,
        String profileName,
        CertificateProfilePatch certificateProfilePatch) {
        return updateWithResponseAsync(resourceGroupName, accountName, profileName, certificateProfilePatch)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Update a certificate profile.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Code Signing account name.
     * @param profileName Certificate profile name.
     * @param certificateProfilePatch Parameters supplied to update certificate profile.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return certificate profile resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<CertificateProfileInner> updateWithResponse(
        String resourceGroupName,
        String accountName,
        String profileName,
        CertificateProfilePatch certificateProfilePatch,
        Context context) {
        return updateWithResponseAsync(resourceGroupName, accountName, profileName, certificateProfilePatch, context)
            .block();
    }

    /**
     * Update a certificate profile.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Code Signing account name.
     * @param profileName Certificate profile name.
     * @param certificateProfilePatch Parameters supplied to update certificate profile.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return certificate profile resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CertificateProfileInner update(
        String resourceGroupName,
        String accountName,
        String profileName,
        CertificateProfilePatch certificateProfilePatch) {
        return updateWithResponse(resourceGroupName, accountName, profileName, certificateProfilePatch, Context.NONE)
            .getValue();
    }

    /**
     * Delete a Certificate Profile.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Code Signing account name.
     * @param profileName Certificate profile name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(
        String resourceGroupName, String accountName, String profileName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (accountName == null) {
            return Mono.error(new IllegalArgumentException("Parameter accountName is required and cannot be null."));
        }
        if (profileName == null) {
            return Mono.error(new IllegalArgumentException("Parameter profileName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .delete(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            accountName,
                            profileName,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Delete a Certificate Profile.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Code Signing account name.
     * @param profileName Certificate profile name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(
        String resourceGroupName, String accountName, String profileName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (accountName == null) {
            return Mono.error(new IllegalArgumentException("Parameter accountName is required and cannot be null."));
        }
        if (profileName == null) {
            return Mono.error(new IllegalArgumentException("Parameter profileName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .delete(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                accountName,
                profileName,
                accept,
                context);
    }

    /**
     * Delete a Certificate Profile.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Code Signing account name.
     * @param profileName Certificate profile name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(
        String resourceGroupName, String accountName, String profileName) {
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(resourceGroupName, accountName, profileName);
        return this
            .client
            .<Void, Void>getLroResult(
                mono, this.client.getHttpPipeline(), Void.class, Void.class, this.client.getContext());
    }

    /**
     * Delete a Certificate Profile.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Code Signing account name.
     * @param profileName Certificate profile name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(
        String resourceGroupName, String accountName, String profileName, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            deleteWithResponseAsync(resourceGroupName, accountName, profileName, context);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, context);
    }

    /**
     * Delete a Certificate Profile.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Code Signing account name.
     * @param profileName Certificate profile name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(
        String resourceGroupName, String accountName, String profileName) {
        return this.beginDeleteAsync(resourceGroupName, accountName, profileName).getSyncPoller();
    }

    /**
     * Delete a Certificate Profile.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Code Signing account name.
     * @param profileName Certificate profile name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(
        String resourceGroupName, String accountName, String profileName, Context context) {
        return this.beginDeleteAsync(resourceGroupName, accountName, profileName, context).getSyncPoller();
    }

    /**
     * Delete a Certificate Profile.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Code Signing account name.
     * @param profileName Certificate profile name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String accountName, String profileName) {
        return beginDeleteAsync(resourceGroupName, accountName, profileName)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete a Certificate Profile.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Code Signing account name.
     * @param profileName Certificate profile name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String accountName, String profileName, Context context) {
        return beginDeleteAsync(resourceGroupName, accountName, profileName, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete a Certificate Profile.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Code Signing account name.
     * @param profileName Certificate profile name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String accountName, String profileName) {
        deleteAsync(resourceGroupName, accountName, profileName).block();
    }

    /**
     * Delete a Certificate Profile.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Code Signing account name.
     * @param profileName Certificate profile name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String accountName, String profileName, Context context) {
        deleteAsync(resourceGroupName, accountName, profileName, context).block();
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the paginated list of certificate profiles along with {@link PagedResponse} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<CertificateProfileInner>> listByCodeSigningAccountNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listByCodeSigningAccountNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<CertificateProfileInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the paginated list of certificate profiles along with {@link PagedResponse} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<CertificateProfileInner>> listByCodeSigningAccountNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByCodeSigningAccountNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }
}
