// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.codesigning.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.codesigning.models.Certificate;
import com.azure.resourcemanager.codesigning.models.CertificateProfileStatus;
import com.azure.resourcemanager.codesigning.models.ProfileType;
import com.azure.resourcemanager.codesigning.models.ProvisioningState;
import java.io.IOException;
import java.util.List;

/**
 * Certificate profile resource.
 */
@Fluent
public final class CertificateProfileInner extends ProxyResource {
    /*
     * The resource-specific properties for this resource.
     */
    private CertificateProfileProperties innerProperties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of CertificateProfileInner class.
     */
    public CertificateProfileInner() {
    }

    /**
     * Get the innerProperties property: The resource-specific properties for this resource.
     * 
     * @return the innerProperties value.
     */
    private CertificateProfileProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the profileType property: Profile type of the certificate.
     * 
     * @return the profileType value.
     */
    public ProfileType profileType() {
        return this.innerProperties() == null ? null : this.innerProperties().profileType();
    }

    /**
     * Set the profileType property: Profile type of the certificate.
     * 
     * @param profileType the profileType value to set.
     * @return the CertificateProfileInner object itself.
     */
    public CertificateProfileInner withProfileType(ProfileType profileType) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CertificateProfileProperties();
        }
        this.innerProperties().withProfileType(profileType);
        return this;
    }

    /**
     * Get the includeStreetAddress property: Whether to include STREET in the certificate subject name.
     * 
     * @return the includeStreetAddress value.
     */
    public Boolean includeStreetAddress() {
        return this.innerProperties() == null ? null : this.innerProperties().includeStreetAddress();
    }

    /**
     * Set the includeStreetAddress property: Whether to include STREET in the certificate subject name.
     * 
     * @param includeStreetAddress the includeStreetAddress value to set.
     * @return the CertificateProfileInner object itself.
     */
    public CertificateProfileInner withIncludeStreetAddress(Boolean includeStreetAddress) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CertificateProfileProperties();
        }
        this.innerProperties().withIncludeStreetAddress(includeStreetAddress);
        return this;
    }

    /**
     * Get the includeCity property: Whether to include L in the certificate subject name. Applicable only for private
     * trust, private trust ci profile types.
     * 
     * @return the includeCity value.
     */
    public Boolean includeCity() {
        return this.innerProperties() == null ? null : this.innerProperties().includeCity();
    }

    /**
     * Set the includeCity property: Whether to include L in the certificate subject name. Applicable only for private
     * trust, private trust ci profile types.
     * 
     * @param includeCity the includeCity value to set.
     * @return the CertificateProfileInner object itself.
     */
    public CertificateProfileInner withIncludeCity(Boolean includeCity) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CertificateProfileProperties();
        }
        this.innerProperties().withIncludeCity(includeCity);
        return this;
    }

    /**
     * Get the includeState property: Whether to include S in the certificate subject name. Applicable only for private
     * trust, private trust ci profile types.
     * 
     * @return the includeState value.
     */
    public Boolean includeState() {
        return this.innerProperties() == null ? null : this.innerProperties().includeState();
    }

    /**
     * Set the includeState property: Whether to include S in the certificate subject name. Applicable only for private
     * trust, private trust ci profile types.
     * 
     * @param includeState the includeState value to set.
     * @return the CertificateProfileInner object itself.
     */
    public CertificateProfileInner withIncludeState(Boolean includeState) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CertificateProfileProperties();
        }
        this.innerProperties().withIncludeState(includeState);
        return this;
    }

    /**
     * Get the includeCountry property: Whether to include C in the certificate subject name. Applicable only for
     * private trust, private trust ci profile types.
     * 
     * @return the includeCountry value.
     */
    public Boolean includeCountry() {
        return this.innerProperties() == null ? null : this.innerProperties().includeCountry();
    }

    /**
     * Set the includeCountry property: Whether to include C in the certificate subject name. Applicable only for
     * private trust, private trust ci profile types.
     * 
     * @param includeCountry the includeCountry value to set.
     * @return the CertificateProfileInner object itself.
     */
    public CertificateProfileInner withIncludeCountry(Boolean includeCountry) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CertificateProfileProperties();
        }
        this.innerProperties().withIncludeCountry(includeCountry);
        return this;
    }

    /**
     * Get the includePostalCode property: Whether to include PC in the certificate subject name.
     * 
     * @return the includePostalCode value.
     */
    public Boolean includePostalCode() {
        return this.innerProperties() == null ? null : this.innerProperties().includePostalCode();
    }

    /**
     * Set the includePostalCode property: Whether to include PC in the certificate subject name.
     * 
     * @param includePostalCode the includePostalCode value to set.
     * @return the CertificateProfileInner object itself.
     */
    public CertificateProfileInner withIncludePostalCode(Boolean includePostalCode) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CertificateProfileProperties();
        }
        this.innerProperties().withIncludePostalCode(includePostalCode);
        return this;
    }

    /**
     * Get the identityValidationId property: Identity validation id used for the certificate subject name.
     * 
     * @return the identityValidationId value.
     */
    public String identityValidationId() {
        return this.innerProperties() == null ? null : this.innerProperties().identityValidationId();
    }

    /**
     * Set the identityValidationId property: Identity validation id used for the certificate subject name.
     * 
     * @param identityValidationId the identityValidationId value to set.
     * @return the CertificateProfileInner object itself.
     */
    public CertificateProfileInner withIdentityValidationId(String identityValidationId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CertificateProfileProperties();
        }
        this.innerProperties().withIdentityValidationId(identityValidationId);
        return this;
    }

    /**
     * Get the provisioningState property: Status of the current operation on certificate profile.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the status property: Status of the certificate profile.
     * 
     * @return the status value.
     */
    public CertificateProfileStatus status() {
        return this.innerProperties() == null ? null : this.innerProperties().status();
    }

    /**
     * Get the certificates property: List of renewed certificates.
     * 
     * @return the certificates value.
     */
    public List<Certificate> certificates() {
        return this.innerProperties() == null ? null : this.innerProperties().certificates();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CertificateProfileInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CertificateProfileInner if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CertificateProfileInner.
     */
    public static CertificateProfileInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CertificateProfileInner deserializedCertificateProfileInner = new CertificateProfileInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedCertificateProfileInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedCertificateProfileInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedCertificateProfileInner.type = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedCertificateProfileInner.innerProperties = CertificateProfileProperties.fromJson(reader);
                } else if ("systemData".equals(fieldName)) {
                    deserializedCertificateProfileInner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCertificateProfileInner;
        });
    }
}
