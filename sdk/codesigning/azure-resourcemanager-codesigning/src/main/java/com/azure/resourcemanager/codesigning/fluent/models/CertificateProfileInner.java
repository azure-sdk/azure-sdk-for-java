// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.codesigning.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.codesigning.models.Certificate;
import com.azure.resourcemanager.codesigning.models.CertificateProfileStatus;
import com.azure.resourcemanager.codesigning.models.ProfileType;
import com.azure.resourcemanager.codesigning.models.ProvisioningState;
import com.azure.resourcemanager.codesigning.models.RotationPolicy;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Certificate profile resource. */
@Fluent
public final class CertificateProfileInner extends ProxyResource {
    /*
     * Properties of the certificate profile
     */
    @JsonProperty(value = "properties", required = true)
    private CertificateProfileProperties innerProperties = new CertificateProfileProperties();

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /** Creates an instance of CertificateProfileInner class. */
    public CertificateProfileInner() {
    }

    /**
     * Get the innerProperties property: Properties of the certificate profile.
     *
     * @return the innerProperties value.
     */
    private CertificateProfileProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     *
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the profileType property: Profile type of the certificate.
     *
     * @return the profileType value.
     */
    public ProfileType profileType() {
        return this.innerProperties() == null ? null : this.innerProperties().profileType();
    }

    /**
     * Set the profileType property: Profile type of the certificate.
     *
     * @param profileType the profileType value to set.
     * @return the CertificateProfileInner object itself.
     */
    public CertificateProfileInner withProfileType(ProfileType profileType) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CertificateProfileProperties();
        }
        this.innerProperties().withProfileType(profileType);
        return this;
    }

    /**
     * Get the rotationPolicy property: Rotation policy of the certificate.
     *
     * @return the rotationPolicy value.
     */
    public RotationPolicy rotationPolicy() {
        return this.innerProperties() == null ? null : this.innerProperties().rotationPolicy();
    }

    /**
     * Set the rotationPolicy property: Rotation policy of the certificate.
     *
     * @param rotationPolicy the rotationPolicy value to set.
     * @return the CertificateProfileInner object itself.
     */
    public CertificateProfileInner withRotationPolicy(RotationPolicy rotationPolicy) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CertificateProfileProperties();
        }
        this.innerProperties().withRotationPolicy(rotationPolicy);
        return this;
    }

    /**
     * Get the commonName property: Used as CN in the subject name of the certificate.
     *
     * @return the commonName value.
     */
    public String commonName() {
        return this.innerProperties() == null ? null : this.innerProperties().commonName();
    }

    /**
     * Set the commonName property: Used as CN in the subject name of the certificate.
     *
     * @param commonName the commonName value to set.
     * @return the CertificateProfileInner object itself.
     */
    public CertificateProfileInner withCommonName(String commonName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CertificateProfileProperties();
        }
        this.innerProperties().withCommonName(commonName);
        return this;
    }

    /**
     * Get the organization property: Used as O in the subject name of the certificate.
     *
     * @return the organization value.
     */
    public String organization() {
        return this.innerProperties() == null ? null : this.innerProperties().organization();
    }

    /**
     * Set the organization property: Used as O in the subject name of the certificate.
     *
     * @param organization the organization value to set.
     * @return the CertificateProfileInner object itself.
     */
    public CertificateProfileInner withOrganization(String organization) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CertificateProfileProperties();
        }
        this.innerProperties().withOrganization(organization);
        return this;
    }

    /**
     * Get the organizationUnit property: Used as OU in the subject name of the private trust certificate.
     *
     * @return the organizationUnit value.
     */
    public String organizationUnit() {
        return this.innerProperties() == null ? null : this.innerProperties().organizationUnit();
    }

    /**
     * Set the organizationUnit property: Used as OU in the subject name of the private trust certificate.
     *
     * @param organizationUnit the organizationUnit value to set.
     * @return the CertificateProfileInner object itself.
     */
    public CertificateProfileInner withOrganizationUnit(String organizationUnit) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CertificateProfileProperties();
        }
        this.innerProperties().withOrganizationUnit(organizationUnit);
        return this;
    }

    /**
     * Get the streetAddress property: The streetAddress property.
     *
     * @return the streetAddress value.
     */
    public String streetAddress() {
        return this.innerProperties() == null ? null : this.innerProperties().streetAddress();
    }

    /**
     * Get the includeStreetAddress property: Whether to include in the public trust certificate subject name.
     *
     * @return the includeStreetAddress value.
     */
    public Boolean includeStreetAddress() {
        return this.innerProperties() == null ? null : this.innerProperties().includeStreetAddress();
    }

    /**
     * Set the includeStreetAddress property: Whether to include in the public trust certificate subject name.
     *
     * @param includeStreetAddress the includeStreetAddress value to set.
     * @return the CertificateProfileInner object itself.
     */
    public CertificateProfileInner withIncludeStreetAddress(Boolean includeStreetAddress) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CertificateProfileProperties();
        }
        this.innerProperties().withIncludeStreetAddress(includeStreetAddress);
        return this;
    }

    /**
     * Get the state property: The state property.
     *
     * @return the state value.
     */
    public String state() {
        return this.innerProperties() == null ? null : this.innerProperties().state();
    }

    /**
     * Get the includeState property: Whether to include in the public trust or private trust certificate subject name.
     *
     * @return the includeState value.
     */
    public Boolean includeState() {
        return this.innerProperties() == null ? null : this.innerProperties().includeState();
    }

    /**
     * Set the includeState property: Whether to include in the public trust or private trust certificate subject name.
     *
     * @param includeState the includeState value to set.
     * @return the CertificateProfileInner object itself.
     */
    public CertificateProfileInner withIncludeState(Boolean includeState) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CertificateProfileProperties();
        }
        this.innerProperties().withIncludeState(includeState);
        return this;
    }

    /**
     * Get the city property: The city property.
     *
     * @return the city value.
     */
    public String city() {
        return this.innerProperties() == null ? null : this.innerProperties().city();
    }

    /**
     * Get the includeCity property: Whether to include in the public trust or private trust certificate subject name.
     *
     * @return the includeCity value.
     */
    public Boolean includeCity() {
        return this.innerProperties() == null ? null : this.innerProperties().includeCity();
    }

    /**
     * Set the includeCity property: Whether to include in the public trust or private trust certificate subject name.
     *
     * @param includeCity the includeCity value to set.
     * @return the CertificateProfileInner object itself.
     */
    public CertificateProfileInner withIncludeCity(Boolean includeCity) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CertificateProfileProperties();
        }
        this.innerProperties().withIncludeCity(includeCity);
        return this;
    }

    /**
     * Get the postalCode property: The postalCode property.
     *
     * @return the postalCode value.
     */
    public String postalCode() {
        return this.innerProperties() == null ? null : this.innerProperties().postalCode();
    }

    /**
     * Get the includePostalCode property: Whether to include in the public trust certificate subject name.
     *
     * @return the includePostalCode value.
     */
    public Boolean includePostalCode() {
        return this.innerProperties() == null ? null : this.innerProperties().includePostalCode();
    }

    /**
     * Set the includePostalCode property: Whether to include in the public trust certificate subject name.
     *
     * @param includePostalCode the includePostalCode value to set.
     * @return the CertificateProfileInner object itself.
     */
    public CertificateProfileInner withIncludePostalCode(Boolean includePostalCode) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CertificateProfileProperties();
        }
        this.innerProperties().withIncludePostalCode(includePostalCode);
        return this;
    }

    /**
     * Get the country property: The country property.
     *
     * @return the country value.
     */
    public String country() {
        return this.innerProperties() == null ? null : this.innerProperties().country();
    }

    /**
     * Get the includeCountry property: Whether to include in the public trust or private trust certificate subject
     * name.
     *
     * @return the includeCountry value.
     */
    public Boolean includeCountry() {
        return this.innerProperties() == null ? null : this.innerProperties().includeCountry();
    }

    /**
     * Set the includeCountry property: Whether to include in the public trust or private trust certificate subject
     * name.
     *
     * @param includeCountry the includeCountry value to set.
     * @return the CertificateProfileInner object itself.
     */
    public CertificateProfileInner withIncludeCountry(Boolean includeCountry) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CertificateProfileProperties();
        }
        this.innerProperties().withIncludeCountry(includeCountry);
        return this;
    }

    /**
     * Get the enhancedKeyUsage property: Enhanced key usage of the certificate.
     *
     * @return the enhancedKeyUsage value.
     */
    public String enhancedKeyUsage() {
        return this.innerProperties() == null ? null : this.innerProperties().enhancedKeyUsage();
    }

    /**
     * Get the identityValidationId property: The identityValidationId property.
     *
     * @return the identityValidationId value.
     */
    public String identityValidationId() {
        return this.innerProperties() == null ? null : this.innerProperties().identityValidationId();
    }

    /**
     * Get the provisioningState property: Provisioning state of the code signing account.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the status property: Status of the certificate profiles.
     *
     * @return the status value.
     */
    public CertificateProfileStatus status() {
        return this.innerProperties() == null ? null : this.innerProperties().status();
    }

    /**
     * Get the certificates property: The certificates property.
     *
     * @return the certificates value.
     */
    public List<Certificate> certificates() {
        return this.innerProperties() == null ? null : this.innerProperties().certificates();
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property innerProperties in model CertificateProfileInner"));
        } else {
            innerProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(CertificateProfileInner.class);
}
