// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databasefleetmanager.generated;

import com.azure.resourcemanager.databasefleetmanager.models.DatabaseCreateMode;
import com.azure.resourcemanager.databasefleetmanager.models.DatabaseIdentity;
import com.azure.resourcemanager.databasefleetmanager.models.FleetDatabase;
import com.azure.resourcemanager.databasefleetmanager.models.FleetDatabaseProperties;
import com.azure.resourcemanager.databasefleetmanager.models.Identity;
import com.azure.resourcemanager.databasefleetmanager.models.IdentityType;
import com.azure.resourcemanager.databasefleetmanager.models.TransparentDataEncryption;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for FleetDatabases Update.
 */
public final class FleetDatabasesUpdateSamples {
    /*
     * x-ms-original-file:
     * specification/databasefleetmanager/resource-manager/Microsoft.DatabaseFleetManager/preview/2025-02-01-preview/
     * examples/FleetDatabases_Update_MaximumSet_Gen.json
     */
    /**
     * Sample code: Update Database in Fleetspace - Generated by Policy.
     * 
     * @param manager Entry point to DatabaseFleetManager.
     */
    public static void updateDatabaseInFleetspaceGeneratedByPolicy(
        com.azure.resourcemanager.databasefleetmanager.DatabaseFleetManager manager) {
        FleetDatabase resource = manager.fleetDatabases()
            .getWithResponse("rgdatabasefleetmanager", "production-fleet", "primary-space", "customer-database-prod",
                com.azure.core.util.Context.NONE)
            .getValue();
        resource.update()
            .withProperties(new FleetDatabaseProperties().withCreateMode(DatabaseCreateMode.DEFAULT)
                .withTierName("Standard")
                .withRestoreFromTime(OffsetDateTime.parse("2024-11-06T09:16:05.048Z"))
                .withSourceDatabaseName("customer-database-staging")
                .withResourceTags(mapOf("environment", "production", "owner", "database-team"))
                .withIdentity(new Identity().withIdentityType(IdentityType.USER_ASSIGNED)
                    .withUserAssignedIdentities(Arrays.asList(new DatabaseIdentity().withResourceId(
                        "/subscriptions/C3897315-3847-4D8A-B2FC-7307B066AD63/resourcegroups/rgdatabasefleetmanager/providers/Microsoft.ManagedIdentity/userAssignedIdentities/db-identity")
                        .withPrincipalId("f8b7c2d3-b9c4-4f3b-85cd-3d56c6e49f92")
                        .withClientId("d2d8b19e-c4f7-4c62-8e8d-7f0f96d94e39")))
                    .withFederatedClientId("a2b3c4d5-6789-0123-4567-89abcdef1234"))
                .withTransparentDataEncryption(new TransparentDataEncryption().withKeyUri("fakeTokenPlaceholder")
                    .withKeys(Arrays.asList("abc123", "xyz789"))
                    .withEnableAutoRotation(true)))
            .apply();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
