// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.databasefleetmanager.generated;

import com.azure.resourcemanager.databasefleetmanager.models.DatabaseCreateMode;
import com.azure.resourcemanager.databasefleetmanager.models.DatabaseIdentity;
import com.azure.resourcemanager.databasefleetmanager.models.FleetDatabaseProperties;
import com.azure.resourcemanager.databasefleetmanager.models.Identity;
import com.azure.resourcemanager.databasefleetmanager.models.IdentityType;
import com.azure.resourcemanager.databasefleetmanager.models.TransparentDataEncryption;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for FleetDatabases CreateOrUpdate.
 */
public final class FleetDatabasesCreateOrUpdateSamples {
    /*
     * x-ms-original-file: 2025-02-01-preview/FleetDatabases_CreateOrUpdate_MaximumSet_Gen.json
     */
    /**
     * Sample code: Create or Update Database in Fleet - Generated by Policy.
     * 
     * @param manager Entry point to DatabasefleetmanagerManager.
     */
    public static void createOrUpdateDatabaseInFleetGeneratedByPolicy(
        com.azure.resourcemanager.databasefleetmanager.DatabasefleetmanagerManager manager) {
        manager.fleetDatabases()
            .define("customer-db-prod")
            .withExistingFleetspace("rg-database-operations", "data-fleet-01", "prod-environment")
            .withProperties(new FleetDatabaseProperties().withCreateMode(DatabaseCreateMode.DEFAULT)
                .withTierName("Premium")
                .withRestoreFromTime(OffsetDateTime.parse("2024-11-06T09:16:05.048Z"))
                .withSourceDatabaseName("existing-db-prod")
                .withResourceTags(mapOf("project", "Customer Data"))
                .withIdentity(new Identity().withIdentityType(IdentityType.NONE)
                    .withUserAssignedIdentities(Arrays.asList(new DatabaseIdentity().withResourceId(
                        "/subscriptions/12345678-90ab-cdef-1234-567890abcdef/resourceGroups/rg-database-operations/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity-01")
                        .withPrincipalId("a2b3c4d5-6789-0123-4567-89abcdef1234")
                        .withClientId("a2b3c4d5-6789-0123-4567-89abcdef1234")))
                    .withFederatedClientId("a2b3c4d5-6789-0123-4567-89abcdef1234"))
                .withTransparentDataEncryption(new TransparentDataEncryption().withKeyUri("fakeTokenPlaceholder")
                    .withKeys(Arrays.asList("key1"))
                    .withEnableAutoRotation(true)))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
