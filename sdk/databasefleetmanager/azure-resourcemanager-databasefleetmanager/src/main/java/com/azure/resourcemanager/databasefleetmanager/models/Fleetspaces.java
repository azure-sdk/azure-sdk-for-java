// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.databasefleetmanager.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/**
 * Resource collection API of Fleetspaces.
 */
public interface Fleetspaces {
    /**
     * Gets fleetspace resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fleetName Name of the database fleet.
     * @param fleetspaceName Name of the fleetspace.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return fleetspace resource along with {@link Response}.
     */
    Response<Fleetspace> getWithResponse(String resourceGroupName, String fleetName, String fleetspaceName,
        Context context);

    /**
     * Gets fleetspace resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fleetName Name of the database fleet.
     * @param fleetspaceName Name of the fleetspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return fleetspace resource.
     */
    Fleetspace get(String resourceGroupName, String fleetName, String fleetspaceName);

    /**
     * Deletes a fleetspace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fleetName Name of the database fleet.
     * @param fleetspaceName Name of the fleetspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(String resourceGroupName, String fleetName, String fleetspaceName);

    /**
     * Deletes a fleetspace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fleetName Name of the database fleet.
     * @param fleetspaceName Name of the fleetspace.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(String resourceGroupName, String fleetName, String fleetspaceName, Context context);

    /**
     * Lists fleetspaces in a fleet.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fleetName Name of the database fleet.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Fleetspace list operation as paginated response with {@link PagedIterable}.
     */
    PagedIterable<Fleetspace> listByFleet(String resourceGroupName, String fleetName);

    /**
     * Lists fleetspaces in a fleet.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fleetName Name of the database fleet.
     * @param skip The number of elements in the collection to skip.
     * @param top The number of elements to return from the collection.
     * @param skiptoken An opaque token that identifies a starting point in the collection.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Fleetspace list operation as paginated response with {@link PagedIterable}.
     */
    PagedIterable<Fleetspace> listByFleet(String resourceGroupName, String fleetName, Long skip, Long top,
        String skiptoken, Context context);

    /**
     * Migrates an existing logical server into fleet.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fleetName Name of the database fleet.
     * @param fleetspaceName Name of the fleetspace.
     * @param body The details of the register server operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void registerServer(String resourceGroupName, String fleetName, String fleetspaceName,
        RegisterServerProperties body);

    /**
     * Migrates an existing logical server into fleet.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fleetName Name of the database fleet.
     * @param fleetspaceName Name of the fleetspace.
     * @param body The details of the register server operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void registerServer(String resourceGroupName, String fleetName, String fleetspaceName,
        RegisterServerProperties body, Context context);

    /**
     * Unregisters all databases from a fleetspace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fleetName Name of the database fleet.
     * @param fleetspaceName Name of the fleetspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void unregister(String resourceGroupName, String fleetName, String fleetspaceName);

    /**
     * Unregisters all databases from a fleetspace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fleetName Name of the database fleet.
     * @param fleetspaceName Name of the fleetspace.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void unregister(String resourceGroupName, String fleetName, String fleetspaceName, Context context);

    /**
     * Gets fleetspace resource.
     * 
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return fleetspace resource along with {@link Response}.
     */
    Fleetspace getById(String id);

    /**
     * Gets fleetspace resource.
     * 
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return fleetspace resource along with {@link Response}.
     */
    Response<Fleetspace> getByIdWithResponse(String id, Context context);

    /**
     * Deletes a fleetspace.
     * 
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteById(String id);

    /**
     * Deletes a fleetspace.
     * 
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteByIdWithResponse(String id, Context context);

    /**
     * Begins definition for a new Fleetspace resource.
     * 
     * @param name resource name.
     * @return the first stage of the new Fleetspace definition.
     */
    Fleetspace.DefinitionStages.Blank define(String name);
}
