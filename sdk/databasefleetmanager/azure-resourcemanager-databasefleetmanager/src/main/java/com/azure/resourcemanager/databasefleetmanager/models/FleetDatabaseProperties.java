// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.databasefleetmanager.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Map;

/**
 * Fleet database properties.
 */
@Fluent
public final class FleetDatabaseProperties implements JsonSerializable<FleetDatabaseProperties> {
    /*
     * Resource identifier for the underlying database resource.
     */
    private String originalDatabaseId;

    /*
     * Database state.
     */
    private AzureProvisioningState provisioningState;

    /*
     * Create mode. Available options: Default - Create a database. Copy - Copy the source database (source database
     * name must be specified) PointInTimeRestore - Create a database by restoring source database from a point in time
     * (source database name and restore from time must be specified)
     */
    private DatabaseCreateMode createMode;

    /*
     * Name of the tier this database belongs to.
     */
    private String tierName;

    /*
     * Connection string to connect to the database with.
     */
    private String connectionString;

    /*
     * If true, database is recoverable.
     */
    private Boolean recoverable;

    /*
     * Restore from time when CreateMode is PointInTimeRestore.
     */
    private OffsetDateTime restoreFromTime;

    /*
     * Earliest restore time.
     */
    private OffsetDateTime earliestRestoreTime;

    /*
     * Latest restore time.
     */
    private OffsetDateTime latestRestoreTime;

    /*
     * Backup retention in days.
     */
    private Integer backupRetentionDays;

    /*
     * Maximum database size in Gb.
     */
    private Integer databaseSizeGbMax;

    /*
     * Source database name used when CreateMode is Copy or PointInTimeRestore.
     */
    private String sourceDatabaseName;

    /*
     * Additional database properties to be applied as the underlying database resource tags.
     */
    private Map<String, String> resourceTags;

    /*
     * Identity property.
     */
    private Identity identity;

    /*
     * Transparent Data Encryption properties
     */
    private TransparentDataEncryption transparentDataEncryption;

    /*
     * Database collation.
     */
    private String collation;

    /**
     * Creates an instance of FleetDatabaseProperties class.
     */
    public FleetDatabaseProperties() {
    }

    /**
     * Get the originalDatabaseId property: Resource identifier for the underlying database resource.
     * 
     * @return the originalDatabaseId value.
     */
    public String originalDatabaseId() {
        return this.originalDatabaseId;
    }

    /**
     * Get the provisioningState property: Database state.
     * 
     * @return the provisioningState value.
     */
    public AzureProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the createMode property: Create mode. Available options: Default - Create a database. Copy - Copy the source
     * database (source database name must be specified) PointInTimeRestore - Create a database by restoring source
     * database from a point in time (source database name and restore from time must be specified).
     * 
     * @return the createMode value.
     */
    public DatabaseCreateMode createMode() {
        return this.createMode;
    }

    /**
     * Set the createMode property: Create mode. Available options: Default - Create a database. Copy - Copy the source
     * database (source database name must be specified) PointInTimeRestore - Create a database by restoring source
     * database from a point in time (source database name and restore from time must be specified).
     * 
     * @param createMode the createMode value to set.
     * @return the FleetDatabaseProperties object itself.
     */
    public FleetDatabaseProperties withCreateMode(DatabaseCreateMode createMode) {
        this.createMode = createMode;
        return this;
    }

    /**
     * Get the tierName property: Name of the tier this database belongs to.
     * 
     * @return the tierName value.
     */
    public String tierName() {
        return this.tierName;
    }

    /**
     * Set the tierName property: Name of the tier this database belongs to.
     * 
     * @param tierName the tierName value to set.
     * @return the FleetDatabaseProperties object itself.
     */
    public FleetDatabaseProperties withTierName(String tierName) {
        this.tierName = tierName;
        return this;
    }

    /**
     * Get the connectionString property: Connection string to connect to the database with.
     * 
     * @return the connectionString value.
     */
    public String connectionString() {
        return this.connectionString;
    }

    /**
     * Get the recoverable property: If true, database is recoverable.
     * 
     * @return the recoverable value.
     */
    public Boolean recoverable() {
        return this.recoverable;
    }

    /**
     * Get the restoreFromTime property: Restore from time when CreateMode is PointInTimeRestore.
     * 
     * @return the restoreFromTime value.
     */
    public OffsetDateTime restoreFromTime() {
        return this.restoreFromTime;
    }

    /**
     * Set the restoreFromTime property: Restore from time when CreateMode is PointInTimeRestore.
     * 
     * @param restoreFromTime the restoreFromTime value to set.
     * @return the FleetDatabaseProperties object itself.
     */
    public FleetDatabaseProperties withRestoreFromTime(OffsetDateTime restoreFromTime) {
        this.restoreFromTime = restoreFromTime;
        return this;
    }

    /**
     * Get the earliestRestoreTime property: Earliest restore time.
     * 
     * @return the earliestRestoreTime value.
     */
    public OffsetDateTime earliestRestoreTime() {
        return this.earliestRestoreTime;
    }

    /**
     * Get the latestRestoreTime property: Latest restore time.
     * 
     * @return the latestRestoreTime value.
     */
    public OffsetDateTime latestRestoreTime() {
        return this.latestRestoreTime;
    }

    /**
     * Get the backupRetentionDays property: Backup retention in days.
     * 
     * @return the backupRetentionDays value.
     */
    public Integer backupRetentionDays() {
        return this.backupRetentionDays;
    }

    /**
     * Get the databaseSizeGbMax property: Maximum database size in Gb.
     * 
     * @return the databaseSizeGbMax value.
     */
    public Integer databaseSizeGbMax() {
        return this.databaseSizeGbMax;
    }

    /**
     * Get the sourceDatabaseName property: Source database name used when CreateMode is Copy or PointInTimeRestore.
     * 
     * @return the sourceDatabaseName value.
     */
    public String sourceDatabaseName() {
        return this.sourceDatabaseName;
    }

    /**
     * Set the sourceDatabaseName property: Source database name used when CreateMode is Copy or PointInTimeRestore.
     * 
     * @param sourceDatabaseName the sourceDatabaseName value to set.
     * @return the FleetDatabaseProperties object itself.
     */
    public FleetDatabaseProperties withSourceDatabaseName(String sourceDatabaseName) {
        this.sourceDatabaseName = sourceDatabaseName;
        return this;
    }

    /**
     * Get the resourceTags property: Additional database properties to be applied as the underlying database resource
     * tags.
     * 
     * @return the resourceTags value.
     */
    public Map<String, String> resourceTags() {
        return this.resourceTags;
    }

    /**
     * Set the resourceTags property: Additional database properties to be applied as the underlying database resource
     * tags.
     * 
     * @param resourceTags the resourceTags value to set.
     * @return the FleetDatabaseProperties object itself.
     */
    public FleetDatabaseProperties withResourceTags(Map<String, String> resourceTags) {
        this.resourceTags = resourceTags;
        return this;
    }

    /**
     * Get the identity property: Identity property.
     * 
     * @return the identity value.
     */
    public Identity identity() {
        return this.identity;
    }

    /**
     * Set the identity property: Identity property.
     * 
     * @param identity the identity value to set.
     * @return the FleetDatabaseProperties object itself.
     */
    public FleetDatabaseProperties withIdentity(Identity identity) {
        this.identity = identity;
        return this;
    }

    /**
     * Get the transparentDataEncryption property: Transparent Data Encryption properties.
     * 
     * @return the transparentDataEncryption value.
     */
    public TransparentDataEncryption transparentDataEncryption() {
        return this.transparentDataEncryption;
    }

    /**
     * Set the transparentDataEncryption property: Transparent Data Encryption properties.
     * 
     * @param transparentDataEncryption the transparentDataEncryption value to set.
     * @return the FleetDatabaseProperties object itself.
     */
    public FleetDatabaseProperties withTransparentDataEncryption(TransparentDataEncryption transparentDataEncryption) {
        this.transparentDataEncryption = transparentDataEncryption;
        return this;
    }

    /**
     * Get the collation property: Database collation.
     * 
     * @return the collation value.
     */
    public String collation() {
        return this.collation;
    }

    /**
     * Set the collation property: Database collation.
     * 
     * @param collation the collation value to set.
     * @return the FleetDatabaseProperties object itself.
     */
    public FleetDatabaseProperties withCollation(String collation) {
        this.collation = collation;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (identity() != null) {
            identity().validate();
        }
        if (transparentDataEncryption() != null) {
            transparentDataEncryption().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("createMode", this.createMode == null ? null : this.createMode.toString());
        jsonWriter.writeStringField("tierName", this.tierName);
        jsonWriter.writeStringField("restoreFromTime",
            this.restoreFromTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.restoreFromTime));
        jsonWriter.writeStringField("sourceDatabaseName", this.sourceDatabaseName);
        jsonWriter.writeMapField("resourceTags", this.resourceTags, (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("identity", this.identity);
        jsonWriter.writeJsonField("transparentDataEncryption", this.transparentDataEncryption);
        jsonWriter.writeStringField("collation", this.collation);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FleetDatabaseProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FleetDatabaseProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the FleetDatabaseProperties.
     */
    public static FleetDatabaseProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FleetDatabaseProperties deserializedFleetDatabaseProperties = new FleetDatabaseProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("originalDatabaseId".equals(fieldName)) {
                    deserializedFleetDatabaseProperties.originalDatabaseId = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedFleetDatabaseProperties.provisioningState
                        = AzureProvisioningState.fromString(reader.getString());
                } else if ("createMode".equals(fieldName)) {
                    deserializedFleetDatabaseProperties.createMode = DatabaseCreateMode.fromString(reader.getString());
                } else if ("tierName".equals(fieldName)) {
                    deserializedFleetDatabaseProperties.tierName = reader.getString();
                } else if ("connectionString".equals(fieldName)) {
                    deserializedFleetDatabaseProperties.connectionString = reader.getString();
                } else if ("recoverable".equals(fieldName)) {
                    deserializedFleetDatabaseProperties.recoverable = reader.getNullable(JsonReader::getBoolean);
                } else if ("restoreFromTime".equals(fieldName)) {
                    deserializedFleetDatabaseProperties.restoreFromTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("earliestRestoreTime".equals(fieldName)) {
                    deserializedFleetDatabaseProperties.earliestRestoreTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("latestRestoreTime".equals(fieldName)) {
                    deserializedFleetDatabaseProperties.latestRestoreTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("backupRetentionDays".equals(fieldName)) {
                    deserializedFleetDatabaseProperties.backupRetentionDays = reader.getNullable(JsonReader::getInt);
                } else if ("databaseSizeGbMax".equals(fieldName)) {
                    deserializedFleetDatabaseProperties.databaseSizeGbMax = reader.getNullable(JsonReader::getInt);
                } else if ("sourceDatabaseName".equals(fieldName)) {
                    deserializedFleetDatabaseProperties.sourceDatabaseName = reader.getString();
                } else if ("resourceTags".equals(fieldName)) {
                    Map<String, String> resourceTags = reader.readMap(reader1 -> reader1.getString());
                    deserializedFleetDatabaseProperties.resourceTags = resourceTags;
                } else if ("identity".equals(fieldName)) {
                    deserializedFleetDatabaseProperties.identity = Identity.fromJson(reader);
                } else if ("transparentDataEncryption".equals(fieldName)) {
                    deserializedFleetDatabaseProperties.transparentDataEncryption
                        = TransparentDataEncryption.fromJson(reader);
                } else if ("collation".equals(fieldName)) {
                    deserializedFleetDatabaseProperties.collation = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFleetDatabaseProperties;
        });
    }
}
