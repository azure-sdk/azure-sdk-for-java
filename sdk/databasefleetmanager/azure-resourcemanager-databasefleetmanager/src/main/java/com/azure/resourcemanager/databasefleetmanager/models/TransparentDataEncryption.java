// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.databasefleetmanager.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Transparent Data Encryption properties.
 */
@Fluent
public final class TransparentDataEncryption implements JsonSerializable<TransparentDataEncryption> {
    /*
     * Customer Managed Key (CMK) Uri.
     */
    private String keyUri;

    /*
     * Additional Keys
     */
    private List<String> keys;

    /*
     * Enable key auto rotation
     */
    private Boolean enableAutoRotation;

    /**
     * Creates an instance of TransparentDataEncryption class.
     */
    public TransparentDataEncryption() {
    }

    /**
     * Get the keyUri property: Customer Managed Key (CMK) Uri.
     * 
     * @return the keyUri value.
     */
    public String keyUri() {
        return this.keyUri;
    }

    /**
     * Set the keyUri property: Customer Managed Key (CMK) Uri.
     * 
     * @param keyUri the keyUri value to set.
     * @return the TransparentDataEncryption object itself.
     */
    public TransparentDataEncryption withKeyUri(String keyUri) {
        this.keyUri = keyUri;
        return this;
    }

    /**
     * Get the keys property: Additional Keys.
     * 
     * @return the keys value.
     */
    public List<String> keys() {
        return this.keys;
    }

    /**
     * Set the keys property: Additional Keys.
     * 
     * @param keys the keys value to set.
     * @return the TransparentDataEncryption object itself.
     */
    public TransparentDataEncryption withKeys(List<String> keys) {
        this.keys = keys;
        return this;
    }

    /**
     * Get the enableAutoRotation property: Enable key auto rotation.
     * 
     * @return the enableAutoRotation value.
     */
    public Boolean enableAutoRotation() {
        return this.enableAutoRotation;
    }

    /**
     * Set the enableAutoRotation property: Enable key auto rotation.
     * 
     * @param enableAutoRotation the enableAutoRotation value to set.
     * @return the TransparentDataEncryption object itself.
     */
    public TransparentDataEncryption withEnableAutoRotation(Boolean enableAutoRotation) {
        this.enableAutoRotation = enableAutoRotation;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("keyUri", this.keyUri);
        jsonWriter.writeArrayField("keys", this.keys, (writer, element) -> writer.writeString(element));
        jsonWriter.writeBooleanField("enableAutoRotation", this.enableAutoRotation);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TransparentDataEncryption from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TransparentDataEncryption if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the TransparentDataEncryption.
     */
    public static TransparentDataEncryption fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TransparentDataEncryption deserializedTransparentDataEncryption = new TransparentDataEncryption();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("keyUri".equals(fieldName)) {
                    deserializedTransparentDataEncryption.keyUri = reader.getString();
                } else if ("keys".equals(fieldName)) {
                    List<String> keys = reader.readArray(reader1 -> reader1.getString());
                    deserializedTransparentDataEncryption.keys = keys;
                } else if ("enableAutoRotation".equals(fieldName)) {
                    deserializedTransparentDataEncryption.enableAutoRotation
                        = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTransparentDataEncryption;
        });
    }
}
