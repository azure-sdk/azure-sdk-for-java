// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.databasefleetmanager.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.databasefleetmanager.fluent.FirewallRulesClient;
import com.azure.resourcemanager.databasefleetmanager.fluent.models.FirewallRuleInner;
import com.azure.resourcemanager.databasefleetmanager.implementation.models.FirewallRuleListResult;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in FirewallRulesClient.
 */
public final class FirewallRulesClientImpl implements FirewallRulesClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final FirewallRulesService service;

    /**
     * The service client containing this operation class.
     */
    private final DatabaseFleetManagerClientImpl client;

    /**
     * Initializes an instance of FirewallRulesClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    FirewallRulesClientImpl(DatabaseFleetManagerClientImpl client) {
        this.service
            = RestProxy.create(FirewallRulesService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for DatabaseFleetManagerClientFirewallRules to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "DatabaseFleetManager")
    public interface FirewallRulesService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DatabaseFleetManager/fleets/{fleetName}/fleetspaces/{fleetspaceName}/firewallRules/{firewallRuleName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<FirewallRuleInner>> get(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("fleetName") String fleetName,
            @PathParam("fleetspaceName") String fleetspaceName, @PathParam("firewallRuleName") String firewallRuleName,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DatabaseFleetManager/fleets/{fleetName}/fleetspaces/{fleetspaceName}/firewallRules/{firewallRuleName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<FirewallRuleInner> getSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("fleetName") String fleetName,
            @PathParam("fleetspaceName") String fleetspaceName, @PathParam("firewallRuleName") String firewallRuleName,
            @HeaderParam("Accept") String accept, Context context);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DatabaseFleetManager/fleets/{fleetName}/fleetspaces/{fleetspaceName}/firewallRules/{firewallRuleName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdate(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("fleetName") String fleetName,
            @PathParam("fleetspaceName") String fleetspaceName, @PathParam("firewallRuleName") String firewallRuleName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") FirewallRuleInner resource, Context context);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DatabaseFleetManager/fleets/{fleetName}/fleetspaces/{fleetspaceName}/firewallRules/{firewallRuleName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> createOrUpdateSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("fleetName") String fleetName,
            @PathParam("fleetspaceName") String fleetspaceName, @PathParam("firewallRuleName") String firewallRuleName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") FirewallRuleInner resource, Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DatabaseFleetManager/fleets/{fleetName}/fleetspaces/{fleetspaceName}/firewallRules/{firewallRuleName}")
        @ExpectedResponses({ 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("fleetName") String fleetName,
            @PathParam("fleetspaceName") String fleetspaceName, @PathParam("firewallRuleName") String firewallRuleName,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DatabaseFleetManager/fleets/{fleetName}/fleetspaces/{fleetspaceName}/firewallRules/{firewallRuleName}")
        @ExpectedResponses({ 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> deleteSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("fleetName") String fleetName,
            @PathParam("fleetspaceName") String fleetspaceName, @PathParam("firewallRuleName") String firewallRuleName,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DatabaseFleetManager/fleets/{fleetName}/fleetspaces/{fleetspaceName}/firewallRules")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<FirewallRuleListResult>> listByFleetspace(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("fleetName") String fleetName,
            @PathParam("fleetspaceName") String fleetspaceName, @QueryParam("$skip") Long skip,
            @QueryParam("$top") Long top, @QueryParam("$skiptoken") String skiptoken,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DatabaseFleetManager/fleets/{fleetName}/fleetspaces/{fleetspaceName}/firewallRules")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<FirewallRuleListResult> listByFleetspaceSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("fleetName") String fleetName,
            @PathParam("fleetspaceName") String fleetspaceName, @QueryParam("$skip") Long skip,
            @QueryParam("$top") Long top, @QueryParam("$skiptoken") String skiptoken,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<FirewallRuleListResult>> listByFleetspaceNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<FirewallRuleListResult> listByFleetspaceNextSync(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Gets a firewall rule.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fleetName Name of the database fleet.
     * @param fleetspaceName Name of the fleetspace.
     * @param firewallRuleName Name of the firewall rule.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a firewall rule along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<FirewallRuleInner>> getWithResponseAsync(String resourceGroupName, String fleetName,
        String fleetspaceName, String firewallRuleName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (fleetName == null) {
            return Mono.error(new IllegalArgumentException("Parameter fleetName is required and cannot be null."));
        }
        if (fleetspaceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter fleetspaceName is required and cannot be null."));
        }
        if (firewallRuleName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter firewallRuleName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, fleetName, fleetspaceName, firewallRuleName, accept,
                context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets a firewall rule.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fleetName Name of the database fleet.
     * @param fleetspaceName Name of the fleetspace.
     * @param firewallRuleName Name of the firewall rule.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a firewall rule on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<FirewallRuleInner> getAsync(String resourceGroupName, String fleetName, String fleetspaceName,
        String firewallRuleName) {
        return getWithResponseAsync(resourceGroupName, fleetName, fleetspaceName, firewallRuleName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets a firewall rule.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fleetName Name of the database fleet.
     * @param fleetspaceName Name of the fleetspace.
     * @param firewallRuleName Name of the firewall rule.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a firewall rule along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<FirewallRuleInner> getWithResponse(String resourceGroupName, String fleetName,
        String fleetspaceName, String firewallRuleName, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (fleetName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter fleetName is required and cannot be null."));
        }
        if (fleetspaceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter fleetspaceName is required and cannot be null."));
        }
        if (firewallRuleName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter firewallRuleName is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.getSync(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, fleetName, fleetspaceName, firewallRuleName, accept, context);
    }

    /**
     * Gets a firewall rule.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fleetName Name of the database fleet.
     * @param fleetspaceName Name of the fleetspace.
     * @param firewallRuleName Name of the firewall rule.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a firewall rule.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public FirewallRuleInner get(String resourceGroupName, String fleetName, String fleetspaceName,
        String firewallRuleName) {
        return getWithResponse(resourceGroupName, fleetName, fleetspaceName, firewallRuleName, Context.NONE).getValue();
    }

    /**
     * Creates or updates a firewall rule.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fleetName Name of the database fleet.
     * @param fleetspaceName Name of the fleetspace.
     * @param firewallRuleName Name of the firewall rule.
     * @param resource The firewall rule object to create or update.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a firewall rule along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String resourceGroupName, String fleetName,
        String fleetspaceName, String firewallRuleName, FirewallRuleInner resource) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (fleetName == null) {
            return Mono.error(new IllegalArgumentException("Parameter fleetName is required and cannot be null."));
        }
        if (fleetspaceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter fleetspaceName is required and cannot be null."));
        }
        if (firewallRuleName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter firewallRuleName is required and cannot be null."));
        }
        if (resource == null) {
            return Mono.error(new IllegalArgumentException("Parameter resource is required and cannot be null."));
        } else {
            resource.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.createOrUpdate(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, fleetName, fleetspaceName, firewallRuleName,
                contentType, accept, resource, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Creates or updates a firewall rule.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fleetName Name of the database fleet.
     * @param fleetspaceName Name of the fleetspace.
     * @param firewallRuleName Name of the firewall rule.
     * @param resource The firewall rule object to create or update.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a firewall rule along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> createOrUpdateWithResponse(String resourceGroupName, String fleetName,
        String fleetspaceName, String firewallRuleName, FirewallRuleInner resource) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (fleetName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter fleetName is required and cannot be null."));
        }
        if (fleetspaceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter fleetspaceName is required and cannot be null."));
        }
        if (firewallRuleName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter firewallRuleName is required and cannot be null."));
        }
        if (resource == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resource is required and cannot be null."));
        } else {
            resource.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.createOrUpdateSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, fleetName, fleetspaceName, firewallRuleName,
            contentType, accept, resource, Context.NONE);
    }

    /**
     * Creates or updates a firewall rule.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fleetName Name of the database fleet.
     * @param fleetspaceName Name of the fleetspace.
     * @param firewallRuleName Name of the firewall rule.
     * @param resource The firewall rule object to create or update.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a firewall rule along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> createOrUpdateWithResponse(String resourceGroupName, String fleetName,
        String fleetspaceName, String firewallRuleName, FirewallRuleInner resource, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (fleetName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter fleetName is required and cannot be null."));
        }
        if (fleetspaceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter fleetspaceName is required and cannot be null."));
        }
        if (firewallRuleName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter firewallRuleName is required and cannot be null."));
        }
        if (resource == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resource is required and cannot be null."));
        } else {
            resource.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.createOrUpdateSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, fleetName, fleetspaceName, firewallRuleName,
            contentType, accept, resource, context);
    }

    /**
     * Creates or updates a firewall rule.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fleetName Name of the database fleet.
     * @param fleetspaceName Name of the fleetspace.
     * @param firewallRuleName Name of the firewall rule.
     * @param resource The firewall rule object to create or update.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of a firewall rule.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<FirewallRuleInner>, FirewallRuleInner> beginCreateOrUpdateAsync(
        String resourceGroupName, String fleetName, String fleetspaceName, String firewallRuleName,
        FirewallRuleInner resource) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = createOrUpdateWithResponseAsync(resourceGroupName, fleetName, fleetspaceName, firewallRuleName, resource);
        return this.client.<FirewallRuleInner, FirewallRuleInner>getLroResult(mono, this.client.getHttpPipeline(),
            FirewallRuleInner.class, FirewallRuleInner.class, this.client.getContext());
    }

    /**
     * Creates or updates a firewall rule.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fleetName Name of the database fleet.
     * @param fleetspaceName Name of the fleetspace.
     * @param firewallRuleName Name of the firewall rule.
     * @param resource The firewall rule object to create or update.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a firewall rule.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<FirewallRuleInner>, FirewallRuleInner> beginCreateOrUpdate(String resourceGroupName,
        String fleetName, String fleetspaceName, String firewallRuleName, FirewallRuleInner resource) {
        Response<BinaryData> response
            = createOrUpdateWithResponse(resourceGroupName, fleetName, fleetspaceName, firewallRuleName, resource);
        return this.client.<FirewallRuleInner, FirewallRuleInner>getLroResult(response, FirewallRuleInner.class,
            FirewallRuleInner.class, Context.NONE);
    }

    /**
     * Creates or updates a firewall rule.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fleetName Name of the database fleet.
     * @param fleetspaceName Name of the fleetspace.
     * @param firewallRuleName Name of the firewall rule.
     * @param resource The firewall rule object to create or update.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a firewall rule.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<FirewallRuleInner>, FirewallRuleInner> beginCreateOrUpdate(String resourceGroupName,
        String fleetName, String fleetspaceName, String firewallRuleName, FirewallRuleInner resource, Context context) {
        Response<BinaryData> response = createOrUpdateWithResponse(resourceGroupName, fleetName, fleetspaceName,
            firewallRuleName, resource, context);
        return this.client.<FirewallRuleInner, FirewallRuleInner>getLroResult(response, FirewallRuleInner.class,
            FirewallRuleInner.class, context);
    }

    /**
     * Creates or updates a firewall rule.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fleetName Name of the database fleet.
     * @param fleetspaceName Name of the fleetspace.
     * @param firewallRuleName Name of the firewall rule.
     * @param resource The firewall rule object to create or update.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a firewall rule on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<FirewallRuleInner> createOrUpdateAsync(String resourceGroupName, String fleetName,
        String fleetspaceName, String firewallRuleName, FirewallRuleInner resource) {
        return beginCreateOrUpdateAsync(resourceGroupName, fleetName, fleetspaceName, firewallRuleName, resource).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates or updates a firewall rule.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fleetName Name of the database fleet.
     * @param fleetspaceName Name of the fleetspace.
     * @param firewallRuleName Name of the firewall rule.
     * @param resource The firewall rule object to create or update.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a firewall rule.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public FirewallRuleInner createOrUpdate(String resourceGroupName, String fleetName, String fleetspaceName,
        String firewallRuleName, FirewallRuleInner resource) {
        return beginCreateOrUpdate(resourceGroupName, fleetName, fleetspaceName, firewallRuleName, resource)
            .getFinalResult();
    }

    /**
     * Creates or updates a firewall rule.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fleetName Name of the database fleet.
     * @param fleetspaceName Name of the fleetspace.
     * @param firewallRuleName Name of the firewall rule.
     * @param resource The firewall rule object to create or update.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a firewall rule.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public FirewallRuleInner createOrUpdate(String resourceGroupName, String fleetName, String fleetspaceName,
        String firewallRuleName, FirewallRuleInner resource, Context context) {
        return beginCreateOrUpdate(resourceGroupName, fleetName, fleetspaceName, firewallRuleName, resource, context)
            .getFinalResult();
    }

    /**
     * Deletes a firewall rule.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fleetName Name of the database fleet.
     * @param fleetspaceName Name of the fleetspace.
     * @param firewallRuleName Name of the firewall rule.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName, String fleetName,
        String fleetspaceName, String firewallRuleName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (fleetName == null) {
            return Mono.error(new IllegalArgumentException("Parameter fleetName is required and cannot be null."));
        }
        if (fleetspaceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter fleetspaceName is required and cannot be null."));
        }
        if (firewallRuleName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter firewallRuleName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.delete(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, fleetName, fleetspaceName, firewallRuleName, accept,
                context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Deletes a firewall rule.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fleetName Name of the database fleet.
     * @param fleetspaceName Name of the fleetspace.
     * @param firewallRuleName Name of the firewall rule.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> deleteWithResponse(String resourceGroupName, String fleetName, String fleetspaceName,
        String firewallRuleName) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (fleetName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter fleetName is required and cannot be null."));
        }
        if (fleetspaceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter fleetspaceName is required and cannot be null."));
        }
        if (firewallRuleName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter firewallRuleName is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.deleteSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, fleetName, fleetspaceName, firewallRuleName, accept,
            Context.NONE);
    }

    /**
     * Deletes a firewall rule.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fleetName Name of the database fleet.
     * @param fleetspaceName Name of the fleetspace.
     * @param firewallRuleName Name of the firewall rule.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> deleteWithResponse(String resourceGroupName, String fleetName, String fleetspaceName,
        String firewallRuleName, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (fleetName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter fleetName is required and cannot be null."));
        }
        if (fleetspaceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter fleetspaceName is required and cannot be null."));
        }
        if (firewallRuleName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter firewallRuleName is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.deleteSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, fleetName, fleetspaceName, firewallRuleName, accept,
            context);
    }

    /**
     * Deletes a firewall rule.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fleetName Name of the database fleet.
     * @param fleetspaceName Name of the fleetspace.
     * @param firewallRuleName Name of the firewall rule.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceGroupName, String fleetName,
        String fleetspaceName, String firewallRuleName) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = deleteWithResponseAsync(resourceGroupName, fleetName, fleetspaceName, firewallRuleName);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            this.client.getContext());
    }

    /**
     * Deletes a firewall rule.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fleetName Name of the database fleet.
     * @param fleetspaceName Name of the fleetspace.
     * @param firewallRuleName Name of the firewall rule.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String fleetName,
        String fleetspaceName, String firewallRuleName) {
        Response<BinaryData> response
            = deleteWithResponse(resourceGroupName, fleetName, fleetspaceName, firewallRuleName);
        return this.client.<Void, Void>getLroResult(response, Void.class, Void.class, Context.NONE);
    }

    /**
     * Deletes a firewall rule.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fleetName Name of the database fleet.
     * @param fleetspaceName Name of the fleetspace.
     * @param firewallRuleName Name of the firewall rule.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String fleetName,
        String fleetspaceName, String firewallRuleName, Context context) {
        Response<BinaryData> response
            = deleteWithResponse(resourceGroupName, fleetName, fleetspaceName, firewallRuleName, context);
        return this.client.<Void, Void>getLroResult(response, Void.class, Void.class, context);
    }

    /**
     * Deletes a firewall rule.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fleetName Name of the database fleet.
     * @param fleetspaceName Name of the fleetspace.
     * @param firewallRuleName Name of the firewall rule.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String fleetName, String fleetspaceName,
        String firewallRuleName) {
        return beginDeleteAsync(resourceGroupName, fleetName, fleetspaceName, firewallRuleName).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes a firewall rule.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fleetName Name of the database fleet.
     * @param fleetspaceName Name of the fleetspace.
     * @param firewallRuleName Name of the firewall rule.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String fleetName, String fleetspaceName, String firewallRuleName) {
        beginDelete(resourceGroupName, fleetName, fleetspaceName, firewallRuleName).getFinalResult();
    }

    /**
     * Deletes a firewall rule.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fleetName Name of the database fleet.
     * @param fleetspaceName Name of the fleetspace.
     * @param firewallRuleName Name of the firewall rule.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String fleetName, String fleetspaceName, String firewallRuleName,
        Context context) {
        beginDelete(resourceGroupName, fleetName, fleetspaceName, firewallRuleName, context).getFinalResult();
    }

    /**
     * Gets all firewall rules in a fleetspace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fleetName Name of the database fleet.
     * @param fleetspaceName Name of the fleetspace.
     * @param skip The number of elements in the collection to skip.
     * @param top The number of elements to return from the collection.
     * @param skiptoken An opaque token that identifies a starting point in the collection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all firewall rules in a fleetspace along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<FirewallRuleInner>> listByFleetspaceSinglePageAsync(String resourceGroupName,
        String fleetName, String fleetspaceName, Long skip, Long top, String skiptoken) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (fleetName == null) {
            return Mono.error(new IllegalArgumentException("Parameter fleetName is required and cannot be null."));
        }
        if (fleetspaceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter fleetspaceName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByFleetspace(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, fleetName, fleetspaceName, skip, top, skiptoken,
                accept, context))
            .<PagedResponse<FirewallRuleInner>>map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(),
                res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets all firewall rules in a fleetspace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fleetName Name of the database fleet.
     * @param fleetspaceName Name of the fleetspace.
     * @param skip The number of elements in the collection to skip.
     * @param top The number of elements to return from the collection.
     * @param skiptoken An opaque token that identifies a starting point in the collection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all firewall rules in a fleetspace as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<FirewallRuleInner> listByFleetspaceAsync(String resourceGroupName, String fleetName,
        String fleetspaceName, Long skip, Long top, String skiptoken) {
        return new PagedFlux<>(
            () -> listByFleetspaceSinglePageAsync(resourceGroupName, fleetName, fleetspaceName, skip, top, skiptoken),
            nextLink -> listByFleetspaceNextSinglePageAsync(nextLink));
    }

    /**
     * Gets all firewall rules in a fleetspace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fleetName Name of the database fleet.
     * @param fleetspaceName Name of the fleetspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all firewall rules in a fleetspace as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<FirewallRuleInner> listByFleetspaceAsync(String resourceGroupName, String fleetName,
        String fleetspaceName) {
        final Long skip = null;
        final Long top = null;
        final String skiptoken = null;
        return new PagedFlux<>(
            () -> listByFleetspaceSinglePageAsync(resourceGroupName, fleetName, fleetspaceName, skip, top, skiptoken),
            nextLink -> listByFleetspaceNextSinglePageAsync(nextLink));
    }

    /**
     * Gets all firewall rules in a fleetspace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fleetName Name of the database fleet.
     * @param fleetspaceName Name of the fleetspace.
     * @param skip The number of elements in the collection to skip.
     * @param top The number of elements to return from the collection.
     * @param skiptoken An opaque token that identifies a starting point in the collection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all firewall rules in a fleetspace along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<FirewallRuleInner> listByFleetspaceSinglePage(String resourceGroupName, String fleetName,
        String fleetspaceName, Long skip, Long top, String skiptoken) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (fleetName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter fleetName is required and cannot be null."));
        }
        if (fleetspaceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter fleetspaceName is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<FirewallRuleListResult> res = service.listByFleetspaceSync(this.client.getEndpoint(),
            this.client.getApiVersion(), this.client.getSubscriptionId(), resourceGroupName, fleetName, fleetspaceName,
            skip, top, skiptoken, accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Gets all firewall rules in a fleetspace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fleetName Name of the database fleet.
     * @param fleetspaceName Name of the fleetspace.
     * @param skip The number of elements in the collection to skip.
     * @param top The number of elements to return from the collection.
     * @param skiptoken An opaque token that identifies a starting point in the collection.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all firewall rules in a fleetspace along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<FirewallRuleInner> listByFleetspaceSinglePage(String resourceGroupName, String fleetName,
        String fleetspaceName, Long skip, Long top, String skiptoken, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (fleetName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter fleetName is required and cannot be null."));
        }
        if (fleetspaceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter fleetspaceName is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<FirewallRuleListResult> res = service.listByFleetspaceSync(this.client.getEndpoint(),
            this.client.getApiVersion(), this.client.getSubscriptionId(), resourceGroupName, fleetName, fleetspaceName,
            skip, top, skiptoken, accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Gets all firewall rules in a fleetspace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fleetName Name of the database fleet.
     * @param fleetspaceName Name of the fleetspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all firewall rules in a fleetspace as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<FirewallRuleInner> listByFleetspace(String resourceGroupName, String fleetName,
        String fleetspaceName) {
        final Long skip = null;
        final Long top = null;
        final String skiptoken = null;
        return new PagedIterable<>(
            () -> listByFleetspaceSinglePage(resourceGroupName, fleetName, fleetspaceName, skip, top, skiptoken),
            nextLink -> listByFleetspaceNextSinglePage(nextLink));
    }

    /**
     * Gets all firewall rules in a fleetspace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fleetName Name of the database fleet.
     * @param fleetspaceName Name of the fleetspace.
     * @param skip The number of elements in the collection to skip.
     * @param top The number of elements to return from the collection.
     * @param skiptoken An opaque token that identifies a starting point in the collection.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all firewall rules in a fleetspace as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<FirewallRuleInner> listByFleetspace(String resourceGroupName, String fleetName,
        String fleetspaceName, Long skip, Long top, String skiptoken, Context context) {
        return new PagedIterable<>(() -> listByFleetspaceSinglePage(resourceGroupName, fleetName, fleetspaceName, skip,
            top, skiptoken, context), nextLink -> listByFleetspaceNextSinglePage(nextLink, context));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a FirewallRule list operation along with {@link PagedResponse} on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<FirewallRuleInner>> listByFleetspaceNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByFleetspaceNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<FirewallRuleInner>>map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(),
                res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a FirewallRule list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<FirewallRuleInner> listByFleetspaceNextSinglePage(String nextLink) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<FirewallRuleListResult> res
            = service.listByFleetspaceNextSync(nextLink, this.client.getEndpoint(), accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a FirewallRule list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<FirewallRuleInner> listByFleetspaceNextSinglePage(String nextLink, Context context) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<FirewallRuleListResult> res
            = service.listByFleetspaceNextSync(nextLink, this.client.getEndpoint(), accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    private static final ClientLogger LOGGER = new ClientLogger(FirewallRulesClientImpl.class);
}
