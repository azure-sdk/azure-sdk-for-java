// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databasefleetmanager.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Database Identity.
 */
@Fluent
public final class Identity implements JsonSerializable<Identity> {
    /*
     * Identity type of the main principal.
     */
    private IdentityType identityType;

    /*
     * User identity ids
     */
    private List<DatabaseIdentity> userAssignedIdentities;

    /*
     * The federated client id for the SQL Database. It is used for cross tenant CMK scenario.
     */
    private String federatedClientId;

    /**
     * Creates an instance of Identity class.
     */
    public Identity() {
    }

    /**
     * Get the identityType property: Identity type of the main principal.
     * 
     * @return the identityType value.
     */
    public IdentityType identityType() {
        return this.identityType;
    }

    /**
     * Set the identityType property: Identity type of the main principal.
     * 
     * @param identityType the identityType value to set.
     * @return the Identity object itself.
     */
    public Identity withIdentityType(IdentityType identityType) {
        this.identityType = identityType;
        return this;
    }

    /**
     * Get the userAssignedIdentities property: User identity ids.
     * 
     * @return the userAssignedIdentities value.
     */
    public List<DatabaseIdentity> userAssignedIdentities() {
        return this.userAssignedIdentities;
    }

    /**
     * Set the userAssignedIdentities property: User identity ids.
     * 
     * @param userAssignedIdentities the userAssignedIdentities value to set.
     * @return the Identity object itself.
     */
    public Identity withUserAssignedIdentities(List<DatabaseIdentity> userAssignedIdentities) {
        this.userAssignedIdentities = userAssignedIdentities;
        return this;
    }

    /**
     * Get the federatedClientId property: The federated client id for the SQL Database. It is used for cross tenant CMK
     * scenario.
     * 
     * @return the federatedClientId value.
     */
    public String federatedClientId() {
        return this.federatedClientId;
    }

    /**
     * Set the federatedClientId property: The federated client id for the SQL Database. It is used for cross tenant CMK
     * scenario.
     * 
     * @param federatedClientId the federatedClientId value to set.
     * @return the Identity object itself.
     */
    public Identity withFederatedClientId(String federatedClientId) {
        this.federatedClientId = federatedClientId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (userAssignedIdentities() != null) {
            userAssignedIdentities().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("identityType", this.identityType == null ? null : this.identityType.toString());
        jsonWriter.writeArrayField("userAssignedIdentities", this.userAssignedIdentities,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("federatedClientId", this.federatedClientId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Identity from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Identity if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the Identity.
     */
    public static Identity fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Identity deserializedIdentity = new Identity();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("identityType".equals(fieldName)) {
                    deserializedIdentity.identityType = IdentityType.fromString(reader.getString());
                } else if ("userAssignedIdentities".equals(fieldName)) {
                    List<DatabaseIdentity> userAssignedIdentities
                        = reader.readArray(reader1 -> DatabaseIdentity.fromJson(reader1));
                    deserializedIdentity.userAssignedIdentities = userAssignedIdentities;
                } else if ("federatedClientId".equals(fieldName)) {
                    deserializedIdentity.federatedClientId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedIdentity;
        });
    }
}
