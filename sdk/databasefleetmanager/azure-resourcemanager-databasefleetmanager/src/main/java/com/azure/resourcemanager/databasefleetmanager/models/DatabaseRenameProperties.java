// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databasefleetmanager.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * A database rename definition.
 */
@Fluent
public final class DatabaseRenameProperties implements JsonSerializable<DatabaseRenameProperties> {
    /*
     * New database name.
     */
    private String newName;

    /**
     * Creates an instance of DatabaseRenameProperties class.
     */
    public DatabaseRenameProperties() {
    }

    /**
     * Get the newName property: New database name.
     * 
     * @return the newName value.
     */
    public String newName() {
        return this.newName;
    }

    /**
     * Set the newName property: New database name.
     * 
     * @param newName the newName value to set.
     * @return the DatabaseRenameProperties object itself.
     */
    public DatabaseRenameProperties withNewName(String newName) {
        this.newName = newName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("newName", this.newName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DatabaseRenameProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DatabaseRenameProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DatabaseRenameProperties.
     */
    public static DatabaseRenameProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DatabaseRenameProperties deserializedDatabaseRenameProperties = new DatabaseRenameProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("newName".equals(fieldName)) {
                    deserializedDatabaseRenameProperties.newName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDatabaseRenameProperties;
        });
    }
}
