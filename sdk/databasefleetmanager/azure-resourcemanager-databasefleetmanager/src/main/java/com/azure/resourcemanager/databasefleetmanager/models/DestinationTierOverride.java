// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databasefleetmanager.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * A destination tier override.
 */
@Fluent
public final class DestinationTierOverride implements JsonSerializable<DestinationTierOverride> {
    /*
     * Resource type.
     */
    private ResourceType resourceType;

    /*
     * Destination tier name.
     */
    private String tierName;

    /*
     * Resource name.
     */
    private String resourceName;

    /**
     * Creates an instance of DestinationTierOverride class.
     */
    public DestinationTierOverride() {
    }

    /**
     * Get the resourceType property: Resource type.
     * 
     * @return the resourceType value.
     */
    public ResourceType resourceType() {
        return this.resourceType;
    }

    /**
     * Set the resourceType property: Resource type.
     * 
     * @param resourceType the resourceType value to set.
     * @return the DestinationTierOverride object itself.
     */
    public DestinationTierOverride withResourceType(ResourceType resourceType) {
        this.resourceType = resourceType;
        return this;
    }

    /**
     * Get the tierName property: Destination tier name.
     * 
     * @return the tierName value.
     */
    public String tierName() {
        return this.tierName;
    }

    /**
     * Set the tierName property: Destination tier name.
     * 
     * @param tierName the tierName value to set.
     * @return the DestinationTierOverride object itself.
     */
    public DestinationTierOverride withTierName(String tierName) {
        this.tierName = tierName;
        return this;
    }

    /**
     * Get the resourceName property: Resource name.
     * 
     * @return the resourceName value.
     */
    public String resourceName() {
        return this.resourceName;
    }

    /**
     * Set the resourceName property: Resource name.
     * 
     * @param resourceName the resourceName value to set.
     * @return the DestinationTierOverride object itself.
     */
    public DestinationTierOverride withResourceName(String resourceName) {
        this.resourceName = resourceName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (resourceType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property resourceType in model DestinationTierOverride"));
        }
        if (tierName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property tierName in model DestinationTierOverride"));
        }
        if (resourceName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property resourceName in model DestinationTierOverride"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DestinationTierOverride.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("resourceType", this.resourceType == null ? null : this.resourceType.toString());
        jsonWriter.writeStringField("tierName", this.tierName);
        jsonWriter.writeStringField("resourceName", this.resourceName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DestinationTierOverride from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DestinationTierOverride if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DestinationTierOverride.
     */
    public static DestinationTierOverride fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DestinationTierOverride deserializedDestinationTierOverride = new DestinationTierOverride();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("resourceType".equals(fieldName)) {
                    deserializedDestinationTierOverride.resourceType = ResourceType.fromString(reader.getString());
                } else if ("tierName".equals(fieldName)) {
                    deserializedDestinationTierOverride.tierName = reader.getString();
                } else if ("resourceName".equals(fieldName)) {
                    deserializedDestinationTierOverride.resourceName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDestinationTierOverride;
        });
    }
}
