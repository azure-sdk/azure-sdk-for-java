// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databasefleetmanager.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.databasefleetmanager.fluent.models.FleetInner;
import com.azure.resourcemanager.databasefleetmanager.models.FleetUpdate;

/**
 * An instance of this class provides access to all the operations defined in FleetsClient.
 */
public interface FleetsClient {
    /**
     * Gets all fleets in a subscription.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all fleets in a subscription as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<FleetInner> list();

    /**
     * Gets all fleets in a subscription.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all fleets in a subscription as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<FleetInner> list(Context context);

    /**
     * Gets all fleets in a resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all fleets in a resource group as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<FleetInner> listByResourceGroup(String resourceGroupName);

    /**
     * Gets all fleets in a resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param skip The number of elements in the collection to skip.
     * @param top The number of elements to return from the collection.
     * @param skiptoken An opaque token that identifies a starting point in the collection.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all fleets in a resource group as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<FleetInner> listByResourceGroup(String resourceGroupName, Long skip, Long top, String skiptoken,
        Context context);

    /**
     * Gets a fleet resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fleetName Name of the database fleet.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a fleet resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<FleetInner> getByResourceGroupWithResponse(String resourceGroupName, String fleetName, Context context);

    /**
     * Gets a fleet resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fleetName Name of the database fleet.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a fleet resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    FleetInner getByResourceGroup(String resourceGroupName, String fleetName);

    /**
     * Creates or updates a fleet resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fleetName Name of the database fleet.
     * @param resource The fleet object to create or update.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a Database Fleet.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<FleetInner>, FleetInner> beginCreateOrUpdate(String resourceGroupName, String fleetName,
        FleetInner resource);

    /**
     * Creates or updates a fleet resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fleetName Name of the database fleet.
     * @param resource The fleet object to create or update.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a Database Fleet.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<FleetInner>, FleetInner> beginCreateOrUpdate(String resourceGroupName, String fleetName,
        FleetInner resource, Context context);

    /**
     * Creates or updates a fleet resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fleetName Name of the database fleet.
     * @param resource The fleet object to create or update.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Database Fleet.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    FleetInner createOrUpdate(String resourceGroupName, String fleetName, FleetInner resource);

    /**
     * Creates or updates a fleet resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fleetName Name of the database fleet.
     * @param resource The fleet object to create or update.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Database Fleet.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    FleetInner createOrUpdate(String resourceGroupName, String fleetName, FleetInner resource, Context context);

    /**
     * Modifies a fleet resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fleetName Name of the database fleet.
     * @param properties The fleet object to patch.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a Database Fleet.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<FleetInner>, FleetInner> beginUpdate(String resourceGroupName, String fleetName,
        FleetUpdate properties);

    /**
     * Modifies a fleet resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fleetName Name of the database fleet.
     * @param properties The fleet object to patch.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a Database Fleet.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<FleetInner>, FleetInner> beginUpdate(String resourceGroupName, String fleetName,
        FleetUpdate properties, Context context);

    /**
     * Modifies a fleet resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fleetName Name of the database fleet.
     * @param properties The fleet object to patch.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Database Fleet.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    FleetInner update(String resourceGroupName, String fleetName, FleetUpdate properties);

    /**
     * Modifies a fleet resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fleetName Name of the database fleet.
     * @param properties The fleet object to patch.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Database Fleet.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    FleetInner update(String resourceGroupName, String fleetName, FleetUpdate properties, Context context);

    /**
     * Deletes a fleet.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fleetName Name of the database fleet.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String fleetName);

    /**
     * Deletes a fleet.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fleetName Name of the database fleet.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String fleetName, Context context);

    /**
     * Deletes a fleet.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fleetName Name of the database fleet.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String fleetName);

    /**
     * Deletes a fleet.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fleetName Name of the database fleet.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String fleetName, Context context);
}
