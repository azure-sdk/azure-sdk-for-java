// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.databasefleetmanager.implementation;

import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.databasefleetmanager.fluent.models.FleetspaceInner;
import com.azure.resourcemanager.databasefleetmanager.models.Fleetspace;
import com.azure.resourcemanager.databasefleetmanager.models.FleetspaceProperties;
import com.azure.resourcemanager.databasefleetmanager.models.RegisterServerProperties;

public final class FleetspaceImpl implements Fleetspace, Fleetspace.Definition, Fleetspace.Update {
    private FleetspaceInner innerObject;

    private final com.azure.resourcemanager.databasefleetmanager.DatabasefleetmanagerManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public FleetspaceProperties properties() {
        return this.innerModel().properties();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public FleetspaceInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.databasefleetmanager.DatabasefleetmanagerManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String fleetName;

    private String fleetspaceName;

    public FleetspaceImpl withExistingFleet(String resourceGroupName, String fleetName) {
        this.resourceGroupName = resourceGroupName;
        this.fleetName = fleetName;
        return this;
    }

    public Fleetspace create() {
        this.innerObject = serviceManager.serviceClient()
            .getFleetspaces()
            .createOrUpdate(resourceGroupName, fleetName, fleetspaceName, this.innerModel(), Context.NONE);
        return this;
    }

    public Fleetspace create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getFleetspaces()
            .createOrUpdate(resourceGroupName, fleetName, fleetspaceName, this.innerModel(), context);
        return this;
    }

    FleetspaceImpl(String name,
        com.azure.resourcemanager.databasefleetmanager.DatabasefleetmanagerManager serviceManager) {
        this.innerObject = new FleetspaceInner();
        this.serviceManager = serviceManager;
        this.fleetspaceName = name;
    }

    public FleetspaceImpl update() {
        return this;
    }

    public Fleetspace apply() {
        this.innerObject = serviceManager.serviceClient()
            .getFleetspaces()
            .update(resourceGroupName, fleetName, fleetspaceName, this.innerModel(), Context.NONE);
        return this;
    }

    public Fleetspace apply(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getFleetspaces()
            .update(resourceGroupName, fleetName, fleetspaceName, this.innerModel(), context);
        return this;
    }

    FleetspaceImpl(FleetspaceInner innerObject,
        com.azure.resourcemanager.databasefleetmanager.DatabasefleetmanagerManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.fleetName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "fleets");
        this.fleetspaceName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "fleetspaces");
    }

    public Fleetspace refresh() {
        this.innerObject = serviceManager.serviceClient()
            .getFleetspaces()
            .getWithResponse(resourceGroupName, fleetName, fleetspaceName, Context.NONE)
            .getValue();
        return this;
    }

    public Fleetspace refresh(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getFleetspaces()
            .getWithResponse(resourceGroupName, fleetName, fleetspaceName, context)
            .getValue();
        return this;
    }

    public void registerServer(RegisterServerProperties body) {
        serviceManager.fleetspaces().registerServer(resourceGroupName, fleetName, fleetspaceName, body);
    }

    public void registerServer(RegisterServerProperties body, Context context) {
        serviceManager.fleetspaces().registerServer(resourceGroupName, fleetName, fleetspaceName, body, context);
    }

    public void unregister() {
        serviceManager.fleetspaces().unregister(resourceGroupName, fleetName, fleetspaceName);
    }

    public void unregister(Context context) {
        serviceManager.fleetspaces().unregister(resourceGroupName, fleetName, fleetspaceName, context);
    }

    public FleetspaceImpl withProperties(FleetspaceProperties properties) {
        this.innerModel().withProperties(properties);
        return this;
    }
}
