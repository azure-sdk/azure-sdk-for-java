// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.databasefleetmanager.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.databasefleetmanager.fluent.FleetDatabasesClient;
import com.azure.resourcemanager.databasefleetmanager.fluent.models.FleetDatabaseInner;
import com.azure.resourcemanager.databasefleetmanager.models.DatabaseChangeTierProperties;
import com.azure.resourcemanager.databasefleetmanager.models.DatabaseRenameProperties;
import com.azure.resourcemanager.databasefleetmanager.models.FleetDatabase;
import com.azure.resourcemanager.databasefleetmanager.models.FleetDatabases;

public final class FleetDatabasesImpl implements FleetDatabases {
    private static final ClientLogger LOGGER = new ClientLogger(FleetDatabasesImpl.class);

    private final FleetDatabasesClient innerClient;

    private final com.azure.resourcemanager.databasefleetmanager.DatabasefleetmanagerManager serviceManager;

    public FleetDatabasesImpl(FleetDatabasesClient innerClient,
        com.azure.resourcemanager.databasefleetmanager.DatabasefleetmanagerManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<FleetDatabase> getWithResponse(String resourceGroupName, String fleetName, String fleetspaceName,
        String databaseName, Context context) {
        Response<FleetDatabaseInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, fleetName, fleetspaceName, databaseName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new FleetDatabaseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public FleetDatabase get(String resourceGroupName, String fleetName, String fleetspaceName, String databaseName) {
        FleetDatabaseInner inner = this.serviceClient().get(resourceGroupName, fleetName, fleetspaceName, databaseName);
        if (inner != null) {
            return new FleetDatabaseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String fleetName, String fleetspaceName, String databaseName) {
        this.serviceClient().delete(resourceGroupName, fleetName, fleetspaceName, databaseName);
    }

    public void delete(String resourceGroupName, String fleetName, String fleetspaceName, String databaseName,
        Context context) {
        this.serviceClient().delete(resourceGroupName, fleetName, fleetspaceName, databaseName, context);
    }

    public PagedIterable<FleetDatabase> listByFleetspace(String resourceGroupName, String fleetName,
        String fleetspaceName) {
        PagedIterable<FleetDatabaseInner> inner
            = this.serviceClient().listByFleetspace(resourceGroupName, fleetName, fleetspaceName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new FleetDatabaseImpl(inner1, this.manager()));
    }

    public PagedIterable<FleetDatabase> listByFleetspace(String resourceGroupName, String fleetName,
        String fleetspaceName, Long skip, Long top, String filter, String skiptoken, Context context) {
        PagedIterable<FleetDatabaseInner> inner = this.serviceClient()
            .listByFleetspace(resourceGroupName, fleetName, fleetspaceName, skip, top, filter, skiptoken, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new FleetDatabaseImpl(inner1, this.manager()));
    }

    public void changeTier(String resourceGroupName, String fleetName, String fleetspaceName, String databaseName,
        DatabaseChangeTierProperties body) {
        this.serviceClient().changeTier(resourceGroupName, fleetName, fleetspaceName, databaseName, body);
    }

    public void changeTier(String resourceGroupName, String fleetName, String fleetspaceName, String databaseName,
        DatabaseChangeTierProperties body, Context context) {
        this.serviceClient().changeTier(resourceGroupName, fleetName, fleetspaceName, databaseName, body, context);
    }

    public void rename(String resourceGroupName, String fleetName, String fleetspaceName, String databaseName,
        DatabaseRenameProperties body) {
        this.serviceClient().rename(resourceGroupName, fleetName, fleetspaceName, databaseName, body);
    }

    public void rename(String resourceGroupName, String fleetName, String fleetspaceName, String databaseName,
        DatabaseRenameProperties body, Context context) {
        this.serviceClient().rename(resourceGroupName, fleetName, fleetspaceName, databaseName, body, context);
    }

    public FleetDatabase getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String fleetName = ResourceManagerUtils.getValueFromIdByName(id, "fleets");
        if (fleetName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'fleets'.", id)));
        }
        String fleetspaceName = ResourceManagerUtils.getValueFromIdByName(id, "fleetspaces");
        if (fleetspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'fleetspaces'.", id)));
        }
        String databaseName = ResourceManagerUtils.getValueFromIdByName(id, "databases");
        if (databaseName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'databases'.", id)));
        }
        return this.getWithResponse(resourceGroupName, fleetName, fleetspaceName, databaseName, Context.NONE)
            .getValue();
    }

    public Response<FleetDatabase> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String fleetName = ResourceManagerUtils.getValueFromIdByName(id, "fleets");
        if (fleetName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'fleets'.", id)));
        }
        String fleetspaceName = ResourceManagerUtils.getValueFromIdByName(id, "fleetspaces");
        if (fleetspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'fleetspaces'.", id)));
        }
        String databaseName = ResourceManagerUtils.getValueFromIdByName(id, "databases");
        if (databaseName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'databases'.", id)));
        }
        return this.getWithResponse(resourceGroupName, fleetName, fleetspaceName, databaseName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String fleetName = ResourceManagerUtils.getValueFromIdByName(id, "fleets");
        if (fleetName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'fleets'.", id)));
        }
        String fleetspaceName = ResourceManagerUtils.getValueFromIdByName(id, "fleetspaces");
        if (fleetspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'fleetspaces'.", id)));
        }
        String databaseName = ResourceManagerUtils.getValueFromIdByName(id, "databases");
        if (databaseName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'databases'.", id)));
        }
        this.delete(resourceGroupName, fleetName, fleetspaceName, databaseName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String fleetName = ResourceManagerUtils.getValueFromIdByName(id, "fleets");
        if (fleetName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'fleets'.", id)));
        }
        String fleetspaceName = ResourceManagerUtils.getValueFromIdByName(id, "fleetspaces");
        if (fleetspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'fleetspaces'.", id)));
        }
        String databaseName = ResourceManagerUtils.getValueFromIdByName(id, "databases");
        if (databaseName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'databases'.", id)));
        }
        this.delete(resourceGroupName, fleetName, fleetspaceName, databaseName, context);
    }

    private FleetDatabasesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.databasefleetmanager.DatabasefleetmanagerManager manager() {
        return this.serviceManager;
    }

    public FleetDatabaseImpl define(String name) {
        return new FleetDatabaseImpl(name, this.manager());
    }
}
