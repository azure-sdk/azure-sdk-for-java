// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databasefleetmanager.models;

import com.azure.core.http.rest.Response;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.databasefleetmanager.fluent.models.FleetTierInner;

/**
 * An immutable client-side representation of FleetTier.
 */
public interface FleetTier {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     * 
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     * 
     * @return the type value.
     */
    String type();

    /**
     * Gets the properties property: A Fleet tier properties.
     * 
     * @return the properties value.
     */
    FleetTierProperties properties();

    /**
     * Gets the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * Gets the name of the resource group.
     * 
     * @return the name of the resource group.
     */
    String resourceGroupName();

    /**
     * Gets the inner com.azure.resourcemanager.databasefleetmanager.fluent.models.FleetTierInner object.
     * 
     * @return the inner object.
     */
    FleetTierInner innerModel();

    /**
     * The entirety of the FleetTier definition.
     */
    interface Definition
        extends DefinitionStages.Blank, DefinitionStages.WithParentResource, DefinitionStages.WithCreate {
    }

    /**
     * The FleetTier definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of the FleetTier definition.
         */
        interface Blank extends WithParentResource {
        }

        /**
         * The stage of the FleetTier definition allowing to specify parent resource.
         */
        interface WithParentResource {
            /**
             * Specifies resourceGroupName, fleetName.
             * 
             * @param resourceGroupName The name of the resource group. The name is case insensitive.
             * @param fleetName Name of the database fleet.
             * @return the next definition stage.
             */
            WithCreate withExistingFleet(String resourceGroupName, String fleetName);
        }

        /**
         * The stage of the FleetTier definition which contains all the minimum required properties for the resource to
         * be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate extends DefinitionStages.WithProperties {
            /**
             * Executes the create request.
             * 
             * @return the created resource.
             */
            FleetTier create();

            /**
             * Executes the create request.
             * 
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            FleetTier create(Context context);
        }

        /**
         * The stage of the FleetTier definition allowing to specify properties.
         */
        interface WithProperties {
            /**
             * Specifies the properties property: A Fleet tier properties..
             * 
             * @param properties A Fleet tier properties.
             * @return the next definition stage.
             */
            WithCreate withProperties(FleetTierProperties properties);
        }
    }

    /**
     * Begins update for the FleetTier resource.
     * 
     * @return the stage of resource update.
     */
    FleetTier.Update update();

    /**
     * The template for FleetTier update.
     */
    interface Update extends UpdateStages.WithProperties {
        /**
         * Executes the update request.
         * 
         * @return the updated resource.
         */
        FleetTier apply();

        /**
         * Executes the update request.
         * 
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        FleetTier apply(Context context);
    }

    /**
     * The FleetTier update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the FleetTier update allowing to specify properties.
         */
        interface WithProperties {
            /**
             * Specifies the properties property: A Fleet tier properties..
             * 
             * @param properties A Fleet tier properties.
             * @return the next definition stage.
             */
            Update withProperties(FleetTierProperties properties);
        }
    }

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @return the refreshed resource.
     */
    FleetTier refresh();

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    FleetTier refresh(Context context);

    /**
     * Disables a tier.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SQL Database Fleet tier along with {@link Response}.
     */
    Response<FleetTier> disableWithResponse(Context context);

    /**
     * Disables a tier.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SQL Database Fleet tier.
     */
    FleetTier disable();
}
