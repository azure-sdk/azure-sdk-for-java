// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databasefleetmanager.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * A Fleetspace properties.
 */
@Fluent
public final class FleetspaceProperties implements JsonSerializable<FleetspaceProperties> {
    /*
     * Fleetspace state.
     */
    private AzureProvisioningState provisioningState;

    /*
     * Maximum number of vCores database fleet manager is allowed to provision in the fleetspace.
     */
    private Integer capacityMax;

    /*
     * Main Microsoft Entra ID principal that has admin access to all databases in the fleetspace.
     */
    private MainPrincipal mainPrincipal;

    /**
     * Creates an instance of FleetspaceProperties class.
     */
    public FleetspaceProperties() {
    }

    /**
     * Get the provisioningState property: Fleetspace state.
     * 
     * @return the provisioningState value.
     */
    public AzureProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the capacityMax property: Maximum number of vCores database fleet manager is allowed to provision in the
     * fleetspace.
     * 
     * @return the capacityMax value.
     */
    public Integer capacityMax() {
        return this.capacityMax;
    }

    /**
     * Set the capacityMax property: Maximum number of vCores database fleet manager is allowed to provision in the
     * fleetspace.
     * 
     * @param capacityMax the capacityMax value to set.
     * @return the FleetspaceProperties object itself.
     */
    public FleetspaceProperties withCapacityMax(Integer capacityMax) {
        this.capacityMax = capacityMax;
        return this;
    }

    /**
     * Get the mainPrincipal property: Main Microsoft Entra ID principal that has admin access to all databases in the
     * fleetspace.
     * 
     * @return the mainPrincipal value.
     */
    public MainPrincipal mainPrincipal() {
        return this.mainPrincipal;
    }

    /**
     * Set the mainPrincipal property: Main Microsoft Entra ID principal that has admin access to all databases in the
     * fleetspace.
     * 
     * @param mainPrincipal the mainPrincipal value to set.
     * @return the FleetspaceProperties object itself.
     */
    public FleetspaceProperties withMainPrincipal(MainPrincipal mainPrincipal) {
        this.mainPrincipal = mainPrincipal;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (mainPrincipal() != null) {
            mainPrincipal().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("capacityMax", this.capacityMax);
        jsonWriter.writeJsonField("mainPrincipal", this.mainPrincipal);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FleetspaceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FleetspaceProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the FleetspaceProperties.
     */
    public static FleetspaceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FleetspaceProperties deserializedFleetspaceProperties = new FleetspaceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedFleetspaceProperties.provisioningState
                        = AzureProvisioningState.fromString(reader.getString());
                } else if ("capacityMax".equals(fieldName)) {
                    deserializedFleetspaceProperties.capacityMax = reader.getNullable(JsonReader::getInt);
                } else if ("mainPrincipal".equals(fieldName)) {
                    deserializedFleetspaceProperties.mainPrincipal = MainPrincipal.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFleetspaceProperties;
        });
    }
}
