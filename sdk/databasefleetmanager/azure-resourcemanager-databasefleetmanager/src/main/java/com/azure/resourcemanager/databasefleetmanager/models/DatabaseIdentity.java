// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databasefleetmanager.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Database Identity properties.
 */
@Fluent
public final class DatabaseIdentity implements JsonSerializable<DatabaseIdentity> {
    /*
     * Resource Id of the database identity.
     */
    private String resourceId;

    /*
     * Principal Id of the database identity.
     */
    private String principalId;

    /*
     * Client Id of the database identity.
     */
    private String clientId;

    /**
     * Creates an instance of DatabaseIdentity class.
     */
    public DatabaseIdentity() {
    }

    /**
     * Get the resourceId property: Resource Id of the database identity.
     * 
     * @return the resourceId value.
     */
    public String resourceId() {
        return this.resourceId;
    }

    /**
     * Set the resourceId property: Resource Id of the database identity.
     * 
     * @param resourceId the resourceId value to set.
     * @return the DatabaseIdentity object itself.
     */
    public DatabaseIdentity withResourceId(String resourceId) {
        this.resourceId = resourceId;
        return this;
    }

    /**
     * Get the principalId property: Principal Id of the database identity.
     * 
     * @return the principalId value.
     */
    public String principalId() {
        return this.principalId;
    }

    /**
     * Set the principalId property: Principal Id of the database identity.
     * 
     * @param principalId the principalId value to set.
     * @return the DatabaseIdentity object itself.
     */
    public DatabaseIdentity withPrincipalId(String principalId) {
        this.principalId = principalId;
        return this;
    }

    /**
     * Get the clientId property: Client Id of the database identity.
     * 
     * @return the clientId value.
     */
    public String clientId() {
        return this.clientId;
    }

    /**
     * Set the clientId property: Client Id of the database identity.
     * 
     * @param clientId the clientId value to set.
     * @return the DatabaseIdentity object itself.
     */
    public DatabaseIdentity withClientId(String clientId) {
        this.clientId = clientId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("resourceId", this.resourceId);
        jsonWriter.writeStringField("principalId", this.principalId);
        jsonWriter.writeStringField("clientId", this.clientId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DatabaseIdentity from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DatabaseIdentity if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the DatabaseIdentity.
     */
    public static DatabaseIdentity fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DatabaseIdentity deserializedDatabaseIdentity = new DatabaseIdentity();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("resourceId".equals(fieldName)) {
                    deserializedDatabaseIdentity.resourceId = reader.getString();
                } else if ("principalId".equals(fieldName)) {
                    deserializedDatabaseIdentity.principalId = reader.getString();
                } else if ("clientId".equals(fieldName)) {
                    deserializedDatabaseIdentity.clientId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDatabaseIdentity;
        });
    }
}
