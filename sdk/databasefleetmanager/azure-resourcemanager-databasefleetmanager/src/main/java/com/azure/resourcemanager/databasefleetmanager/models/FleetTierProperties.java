// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databasefleetmanager.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * A Fleet tier properties.
 */
@Fluent
public final class FleetTierProperties implements JsonSerializable<FleetTierProperties> {
    /*
     * If true, tier is disabled.
     */
    private Boolean disabled;

    /*
     * If true, serverless resources are provisioned in the tier.
     */
    private Boolean serverless;

    /*
     * If true, databases are pooled.
     */
    private Boolean pooled;

    /*
     * Service tier of provisioned resources. Supported values: GeneralPurpose, Hyperscale.
     */
    private String serviceTier;

    /*
     * Family of provisioned resources, for example Gen5.
     */
    private String family;

    /*
     * Capacity of provisioned resources in the tier, in units matching the specified service tier, for example vCore
     * for GeneralPurpose.
     */
    private Integer capacity;

    /*
     * Maximum number of databases per pool.
     */
    private Integer poolNumOfDatabasesMax;

    /*
     * Number of high availability replicas for databases in this tier.
     */
    private Integer highAvailabilityReplicaCount;

    /*
     * Enable zone redundancy for all databases in this tier.
     */
    private ZoneRedundancy zoneRedundancy;

    /*
     * Minimum allocated capacity per database, in units matching the specified service tier.
     */
    private Double databaseCapacityMin;

    /*
     * Maximum allocated capacity per database, in units matching the specified service tier.
     */
    private Double databaseCapacityMax;

    /*
     * Maximum database size in Gb.
     */
    private Integer databaseSizeGbMax;

    /*
     * Provisioning state.
     */
    private AzureProvisioningState provisioningState;

    /**
     * Creates an instance of FleetTierProperties class.
     */
    public FleetTierProperties() {
    }

    /**
     * Get the disabled property: If true, tier is disabled.
     * 
     * @return the disabled value.
     */
    public Boolean disabled() {
        return this.disabled;
    }

    /**
     * Get the serverless property: If true, serverless resources are provisioned in the tier.
     * 
     * @return the serverless value.
     */
    public Boolean serverless() {
        return this.serverless;
    }

    /**
     * Set the serverless property: If true, serverless resources are provisioned in the tier.
     * 
     * @param serverless the serverless value to set.
     * @return the FleetTierProperties object itself.
     */
    public FleetTierProperties withServerless(Boolean serverless) {
        this.serverless = serverless;
        return this;
    }

    /**
     * Get the pooled property: If true, databases are pooled.
     * 
     * @return the pooled value.
     */
    public Boolean pooled() {
        return this.pooled;
    }

    /**
     * Set the pooled property: If true, databases are pooled.
     * 
     * @param pooled the pooled value to set.
     * @return the FleetTierProperties object itself.
     */
    public FleetTierProperties withPooled(Boolean pooled) {
        this.pooled = pooled;
        return this;
    }

    /**
     * Get the serviceTier property: Service tier of provisioned resources. Supported values: GeneralPurpose,
     * Hyperscale.
     * 
     * @return the serviceTier value.
     */
    public String serviceTier() {
        return this.serviceTier;
    }

    /**
     * Set the serviceTier property: Service tier of provisioned resources. Supported values: GeneralPurpose,
     * Hyperscale.
     * 
     * @param serviceTier the serviceTier value to set.
     * @return the FleetTierProperties object itself.
     */
    public FleetTierProperties withServiceTier(String serviceTier) {
        this.serviceTier = serviceTier;
        return this;
    }

    /**
     * Get the family property: Family of provisioned resources, for example Gen5.
     * 
     * @return the family value.
     */
    public String family() {
        return this.family;
    }

    /**
     * Set the family property: Family of provisioned resources, for example Gen5.
     * 
     * @param family the family value to set.
     * @return the FleetTierProperties object itself.
     */
    public FleetTierProperties withFamily(String family) {
        this.family = family;
        return this;
    }

    /**
     * Get the capacity property: Capacity of provisioned resources in the tier, in units matching the specified service
     * tier, for example vCore for GeneralPurpose.
     * 
     * @return the capacity value.
     */
    public Integer capacity() {
        return this.capacity;
    }

    /**
     * Set the capacity property: Capacity of provisioned resources in the tier, in units matching the specified service
     * tier, for example vCore for GeneralPurpose.
     * 
     * @param capacity the capacity value to set.
     * @return the FleetTierProperties object itself.
     */
    public FleetTierProperties withCapacity(Integer capacity) {
        this.capacity = capacity;
        return this;
    }

    /**
     * Get the poolNumOfDatabasesMax property: Maximum number of databases per pool.
     * 
     * @return the poolNumOfDatabasesMax value.
     */
    public Integer poolNumOfDatabasesMax() {
        return this.poolNumOfDatabasesMax;
    }

    /**
     * Set the poolNumOfDatabasesMax property: Maximum number of databases per pool.
     * 
     * @param poolNumOfDatabasesMax the poolNumOfDatabasesMax value to set.
     * @return the FleetTierProperties object itself.
     */
    public FleetTierProperties withPoolNumOfDatabasesMax(Integer poolNumOfDatabasesMax) {
        this.poolNumOfDatabasesMax = poolNumOfDatabasesMax;
        return this;
    }

    /**
     * Get the highAvailabilityReplicaCount property: Number of high availability replicas for databases in this tier.
     * 
     * @return the highAvailabilityReplicaCount value.
     */
    public Integer highAvailabilityReplicaCount() {
        return this.highAvailabilityReplicaCount;
    }

    /**
     * Set the highAvailabilityReplicaCount property: Number of high availability replicas for databases in this tier.
     * 
     * @param highAvailabilityReplicaCount the highAvailabilityReplicaCount value to set.
     * @return the FleetTierProperties object itself.
     */
    public FleetTierProperties withHighAvailabilityReplicaCount(Integer highAvailabilityReplicaCount) {
        this.highAvailabilityReplicaCount = highAvailabilityReplicaCount;
        return this;
    }

    /**
     * Get the zoneRedundancy property: Enable zone redundancy for all databases in this tier.
     * 
     * @return the zoneRedundancy value.
     */
    public ZoneRedundancy zoneRedundancy() {
        return this.zoneRedundancy;
    }

    /**
     * Set the zoneRedundancy property: Enable zone redundancy for all databases in this tier.
     * 
     * @param zoneRedundancy the zoneRedundancy value to set.
     * @return the FleetTierProperties object itself.
     */
    public FleetTierProperties withZoneRedundancy(ZoneRedundancy zoneRedundancy) {
        this.zoneRedundancy = zoneRedundancy;
        return this;
    }

    /**
     * Get the databaseCapacityMin property: Minimum allocated capacity per database, in units matching the specified
     * service tier.
     * 
     * @return the databaseCapacityMin value.
     */
    public Double databaseCapacityMin() {
        return this.databaseCapacityMin;
    }

    /**
     * Set the databaseCapacityMin property: Minimum allocated capacity per database, in units matching the specified
     * service tier.
     * 
     * @param databaseCapacityMin the databaseCapacityMin value to set.
     * @return the FleetTierProperties object itself.
     */
    public FleetTierProperties withDatabaseCapacityMin(Double databaseCapacityMin) {
        this.databaseCapacityMin = databaseCapacityMin;
        return this;
    }

    /**
     * Get the databaseCapacityMax property: Maximum allocated capacity per database, in units matching the specified
     * service tier.
     * 
     * @return the databaseCapacityMax value.
     */
    public Double databaseCapacityMax() {
        return this.databaseCapacityMax;
    }

    /**
     * Set the databaseCapacityMax property: Maximum allocated capacity per database, in units matching the specified
     * service tier.
     * 
     * @param databaseCapacityMax the databaseCapacityMax value to set.
     * @return the FleetTierProperties object itself.
     */
    public FleetTierProperties withDatabaseCapacityMax(Double databaseCapacityMax) {
        this.databaseCapacityMax = databaseCapacityMax;
        return this;
    }

    /**
     * Get the databaseSizeGbMax property: Maximum database size in Gb.
     * 
     * @return the databaseSizeGbMax value.
     */
    public Integer databaseSizeGbMax() {
        return this.databaseSizeGbMax;
    }

    /**
     * Set the databaseSizeGbMax property: Maximum database size in Gb.
     * 
     * @param databaseSizeGbMax the databaseSizeGbMax value to set.
     * @return the FleetTierProperties object itself.
     */
    public FleetTierProperties withDatabaseSizeGbMax(Integer databaseSizeGbMax) {
        this.databaseSizeGbMax = databaseSizeGbMax;
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state.
     * 
     * @return the provisioningState value.
     */
    public AzureProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("serverless", this.serverless);
        jsonWriter.writeBooleanField("pooled", this.pooled);
        jsonWriter.writeStringField("serviceTier", this.serviceTier);
        jsonWriter.writeStringField("family", this.family);
        jsonWriter.writeNumberField("capacity", this.capacity);
        jsonWriter.writeNumberField("poolNumOfDatabasesMax", this.poolNumOfDatabasesMax);
        jsonWriter.writeNumberField("highAvailabilityReplicaCount", this.highAvailabilityReplicaCount);
        jsonWriter.writeStringField("zoneRedundancy",
            this.zoneRedundancy == null ? null : this.zoneRedundancy.toString());
        jsonWriter.writeNumberField("databaseCapacityMin", this.databaseCapacityMin);
        jsonWriter.writeNumberField("databaseCapacityMax", this.databaseCapacityMax);
        jsonWriter.writeNumberField("databaseSizeGbMax", this.databaseSizeGbMax);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FleetTierProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FleetTierProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the FleetTierProperties.
     */
    public static FleetTierProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FleetTierProperties deserializedFleetTierProperties = new FleetTierProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("disabled".equals(fieldName)) {
                    deserializedFleetTierProperties.disabled = reader.getNullable(JsonReader::getBoolean);
                } else if ("serverless".equals(fieldName)) {
                    deserializedFleetTierProperties.serverless = reader.getNullable(JsonReader::getBoolean);
                } else if ("pooled".equals(fieldName)) {
                    deserializedFleetTierProperties.pooled = reader.getNullable(JsonReader::getBoolean);
                } else if ("serviceTier".equals(fieldName)) {
                    deserializedFleetTierProperties.serviceTier = reader.getString();
                } else if ("family".equals(fieldName)) {
                    deserializedFleetTierProperties.family = reader.getString();
                } else if ("capacity".equals(fieldName)) {
                    deserializedFleetTierProperties.capacity = reader.getNullable(JsonReader::getInt);
                } else if ("poolNumOfDatabasesMax".equals(fieldName)) {
                    deserializedFleetTierProperties.poolNumOfDatabasesMax = reader.getNullable(JsonReader::getInt);
                } else if ("highAvailabilityReplicaCount".equals(fieldName)) {
                    deserializedFleetTierProperties.highAvailabilityReplicaCount
                        = reader.getNullable(JsonReader::getInt);
                } else if ("zoneRedundancy".equals(fieldName)) {
                    deserializedFleetTierProperties.zoneRedundancy = ZoneRedundancy.fromString(reader.getString());
                } else if ("databaseCapacityMin".equals(fieldName)) {
                    deserializedFleetTierProperties.databaseCapacityMin = reader.getNullable(JsonReader::getDouble);
                } else if ("databaseCapacityMax".equals(fieldName)) {
                    deserializedFleetTierProperties.databaseCapacityMax = reader.getNullable(JsonReader::getDouble);
                } else if ("databaseSizeGbMax".equals(fieldName)) {
                    deserializedFleetTierProperties.databaseSizeGbMax = reader.getNullable(JsonReader::getInt);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedFleetTierProperties.provisioningState
                        = AzureProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFleetTierProperties;
        });
    }
}
