// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.databasefleetmanager.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Server registration definition.
 */
@Fluent
public final class RegisterServerProperties implements JsonSerializable<RegisterServerProperties> {
    /*
     * Destination tier name.
     */
    private String tierName;

    /*
     * Source subscription id.
     */
    private String sourceSubscriptionId;

    /*
     * Source resource group name.
     */
    private String sourceResourceGroupName;

    /*
     * Source SQL Server name.
     */
    private String sourceServerName;

    /*
     * Destination tier overrides.
     */
    private List<DestinationTierOverride> destinationTierOverrides;

    /**
     * Creates an instance of RegisterServerProperties class.
     */
    public RegisterServerProperties() {
    }

    /**
     * Get the tierName property: Destination tier name.
     * 
     * @return the tierName value.
     */
    public String tierName() {
        return this.tierName;
    }

    /**
     * Set the tierName property: Destination tier name.
     * 
     * @param tierName the tierName value to set.
     * @return the RegisterServerProperties object itself.
     */
    public RegisterServerProperties withTierName(String tierName) {
        this.tierName = tierName;
        return this;
    }

    /**
     * Get the sourceSubscriptionId property: Source subscription id.
     * 
     * @return the sourceSubscriptionId value.
     */
    public String sourceSubscriptionId() {
        return this.sourceSubscriptionId;
    }

    /**
     * Set the sourceSubscriptionId property: Source subscription id.
     * 
     * @param sourceSubscriptionId the sourceSubscriptionId value to set.
     * @return the RegisterServerProperties object itself.
     */
    public RegisterServerProperties withSourceSubscriptionId(String sourceSubscriptionId) {
        this.sourceSubscriptionId = sourceSubscriptionId;
        return this;
    }

    /**
     * Get the sourceResourceGroupName property: Source resource group name.
     * 
     * @return the sourceResourceGroupName value.
     */
    public String sourceResourceGroupName() {
        return this.sourceResourceGroupName;
    }

    /**
     * Set the sourceResourceGroupName property: Source resource group name.
     * 
     * @param sourceResourceGroupName the sourceResourceGroupName value to set.
     * @return the RegisterServerProperties object itself.
     */
    public RegisterServerProperties withSourceResourceGroupName(String sourceResourceGroupName) {
        this.sourceResourceGroupName = sourceResourceGroupName;
        return this;
    }

    /**
     * Get the sourceServerName property: Source SQL Server name.
     * 
     * @return the sourceServerName value.
     */
    public String sourceServerName() {
        return this.sourceServerName;
    }

    /**
     * Set the sourceServerName property: Source SQL Server name.
     * 
     * @param sourceServerName the sourceServerName value to set.
     * @return the RegisterServerProperties object itself.
     */
    public RegisterServerProperties withSourceServerName(String sourceServerName) {
        this.sourceServerName = sourceServerName;
        return this;
    }

    /**
     * Get the destinationTierOverrides property: Destination tier overrides.
     * 
     * @return the destinationTierOverrides value.
     */
    public List<DestinationTierOverride> destinationTierOverrides() {
        return this.destinationTierOverrides;
    }

    /**
     * Set the destinationTierOverrides property: Destination tier overrides.
     * 
     * @param destinationTierOverrides the destinationTierOverrides value to set.
     * @return the RegisterServerProperties object itself.
     */
    public RegisterServerProperties
        withDestinationTierOverrides(List<DestinationTierOverride> destinationTierOverrides) {
        this.destinationTierOverrides = destinationTierOverrides;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (destinationTierOverrides() != null) {
            destinationTierOverrides().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("tierName", this.tierName);
        jsonWriter.writeStringField("sourceSubscriptionId", this.sourceSubscriptionId);
        jsonWriter.writeStringField("sourceResourceGroupName", this.sourceResourceGroupName);
        jsonWriter.writeStringField("sourceServerName", this.sourceServerName);
        jsonWriter.writeArrayField("destinationTierOverrides", this.destinationTierOverrides,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RegisterServerProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RegisterServerProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the RegisterServerProperties.
     */
    public static RegisterServerProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RegisterServerProperties deserializedRegisterServerProperties = new RegisterServerProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("tierName".equals(fieldName)) {
                    deserializedRegisterServerProperties.tierName = reader.getString();
                } else if ("sourceSubscriptionId".equals(fieldName)) {
                    deserializedRegisterServerProperties.sourceSubscriptionId = reader.getString();
                } else if ("sourceResourceGroupName".equals(fieldName)) {
                    deserializedRegisterServerProperties.sourceResourceGroupName = reader.getString();
                } else if ("sourceServerName".equals(fieldName)) {
                    deserializedRegisterServerProperties.sourceServerName = reader.getString();
                } else if ("destinationTierOverrides".equals(fieldName)) {
                    List<DestinationTierOverride> destinationTierOverrides
                        = reader.readArray(reader1 -> DestinationTierOverride.fromJson(reader1));
                    deserializedRegisterServerProperties.destinationTierOverrides = destinationTierOverrides;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRegisterServerProperties;
        });
    }
}
