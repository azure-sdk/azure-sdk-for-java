// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.databasefleetmanager.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * A database change tier definition.
 */
@Fluent
public final class DatabaseChangeTierProperties implements JsonSerializable<DatabaseChangeTierProperties> {
    /*
     * A target tier name.
     */
    private String targetTierName;

    /**
     * Creates an instance of DatabaseChangeTierProperties class.
     */
    public DatabaseChangeTierProperties() {
    }

    /**
     * Get the targetTierName property: A target tier name.
     * 
     * @return the targetTierName value.
     */
    public String targetTierName() {
        return this.targetTierName;
    }

    /**
     * Set the targetTierName property: A target tier name.
     * 
     * @param targetTierName the targetTierName value to set.
     * @return the DatabaseChangeTierProperties object itself.
     */
    public DatabaseChangeTierProperties withTargetTierName(String targetTierName) {
        this.targetTierName = targetTierName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("targetTierName", this.targetTierName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DatabaseChangeTierProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DatabaseChangeTierProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DatabaseChangeTierProperties.
     */
    public static DatabaseChangeTierProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DatabaseChangeTierProperties deserializedDatabaseChangeTierProperties = new DatabaseChangeTierProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("targetTierName".equals(fieldName)) {
                    deserializedDatabaseChangeTierProperties.targetTierName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDatabaseChangeTierProperties;
        });
    }
}
