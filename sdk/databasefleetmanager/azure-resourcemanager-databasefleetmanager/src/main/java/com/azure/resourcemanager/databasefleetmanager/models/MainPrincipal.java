// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databasefleetmanager.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * A main principal.
 */
@Fluent
public final class MainPrincipal implements JsonSerializable<MainPrincipal> {
    /*
     * Login name of the main principal.
     */
    private String login;

    /*
     * Application Id of the main principal.
     */
    private String applicationId;

    /*
     * Object Id of the main principal.
     */
    private String objectId;

    /*
     * Tenant Id of the main principal.
     */
    private String tenantId;

    /*
     * Principal type of the main principal.
     */
    private PrincipalType principalType;

    /**
     * Creates an instance of MainPrincipal class.
     */
    public MainPrincipal() {
    }

    /**
     * Get the login property: Login name of the main principal.
     * 
     * @return the login value.
     */
    public String login() {
        return this.login;
    }

    /**
     * Set the login property: Login name of the main principal.
     * 
     * @param login the login value to set.
     * @return the MainPrincipal object itself.
     */
    public MainPrincipal withLogin(String login) {
        this.login = login;
        return this;
    }

    /**
     * Get the applicationId property: Application Id of the main principal.
     * 
     * @return the applicationId value.
     */
    public String applicationId() {
        return this.applicationId;
    }

    /**
     * Set the applicationId property: Application Id of the main principal.
     * 
     * @param applicationId the applicationId value to set.
     * @return the MainPrincipal object itself.
     */
    public MainPrincipal withApplicationId(String applicationId) {
        this.applicationId = applicationId;
        return this;
    }

    /**
     * Get the objectId property: Object Id of the main principal.
     * 
     * @return the objectId value.
     */
    public String objectId() {
        return this.objectId;
    }

    /**
     * Set the objectId property: Object Id of the main principal.
     * 
     * @param objectId the objectId value to set.
     * @return the MainPrincipal object itself.
     */
    public MainPrincipal withObjectId(String objectId) {
        this.objectId = objectId;
        return this;
    }

    /**
     * Get the tenantId property: Tenant Id of the main principal.
     * 
     * @return the tenantId value.
     */
    public String tenantId() {
        return this.tenantId;
    }

    /**
     * Set the tenantId property: Tenant Id of the main principal.
     * 
     * @param tenantId the tenantId value to set.
     * @return the MainPrincipal object itself.
     */
    public MainPrincipal withTenantId(String tenantId) {
        this.tenantId = tenantId;
        return this;
    }

    /**
     * Get the principalType property: Principal type of the main principal.
     * 
     * @return the principalType value.
     */
    public PrincipalType principalType() {
        return this.principalType;
    }

    /**
     * Set the principalType property: Principal type of the main principal.
     * 
     * @param principalType the principalType value to set.
     * @return the MainPrincipal object itself.
     */
    public MainPrincipal withPrincipalType(PrincipalType principalType) {
        this.principalType = principalType;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("login", this.login);
        jsonWriter.writeStringField("applicationId", this.applicationId);
        jsonWriter.writeStringField("objectId", this.objectId);
        jsonWriter.writeStringField("tenantId", this.tenantId);
        jsonWriter.writeStringField("principalType", this.principalType == null ? null : this.principalType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MainPrincipal from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MainPrincipal if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the MainPrincipal.
     */
    public static MainPrincipal fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MainPrincipal deserializedMainPrincipal = new MainPrincipal();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("login".equals(fieldName)) {
                    deserializedMainPrincipal.login = reader.getString();
                } else if ("applicationId".equals(fieldName)) {
                    deserializedMainPrincipal.applicationId = reader.getString();
                } else if ("objectId".equals(fieldName)) {
                    deserializedMainPrincipal.objectId = reader.getString();
                } else if ("tenantId".equals(fieldName)) {
                    deserializedMainPrincipal.tenantId = reader.getString();
                } else if ("principalType".equals(fieldName)) {
                    deserializedMainPrincipal.principalType = PrincipalType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMainPrincipal;
        });
    }
}
