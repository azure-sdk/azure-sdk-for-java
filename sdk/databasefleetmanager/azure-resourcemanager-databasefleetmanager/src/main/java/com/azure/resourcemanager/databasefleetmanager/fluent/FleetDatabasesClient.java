// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databasefleetmanager.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.databasefleetmanager.fluent.models.FleetDatabaseInner;
import com.azure.resourcemanager.databasefleetmanager.models.DatabaseChangeTierProperties;
import com.azure.resourcemanager.databasefleetmanager.models.DatabaseRenameProperties;

/**
 * An instance of this class provides access to all the operations defined in FleetDatabasesClient.
 */
public interface FleetDatabasesClient {
    /**
     * Gets all fleet databases in a fleetspace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fleetName Name of the database fleet.
     * @param fleetspaceName Name of the fleetspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all fleet databases in a fleetspace as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<FleetDatabaseInner> listByFleetspace(String resourceGroupName, String fleetName,
        String fleetspaceName);

    /**
     * Gets all fleet databases in a fleetspace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fleetName Name of the database fleet.
     * @param fleetspaceName Name of the fleetspace.
     * @param skip The number of elements in the collection to skip.
     * @param top The number of elements to return from the collection.
     * @param filter An OData filter expression that filters elements in the collection.
     * @param skiptoken An opaque token that identifies a starting point in the collection.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all fleet databases in a fleetspace as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<FleetDatabaseInner> listByFleetspace(String resourceGroupName, String fleetName,
        String fleetspaceName, Long skip, Long top, String filter, String skiptoken, Context context);

    /**
     * Gets a fleet database.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fleetName Name of the database fleet.
     * @param fleetspaceName Name of the fleetspace.
     * @param databaseName Name of the database.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a fleet database along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<FleetDatabaseInner> getWithResponse(String resourceGroupName, String fleetName, String fleetspaceName,
        String databaseName, Context context);

    /**
     * Gets a fleet database.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fleetName Name of the database fleet.
     * @param fleetspaceName Name of the fleetspace.
     * @param databaseName Name of the database.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a fleet database.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    FleetDatabaseInner get(String resourceGroupName, String fleetName, String fleetspaceName, String databaseName);

    /**
     * Creates or updates a fleet database.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fleetName Name of the database fleet.
     * @param fleetspaceName Name of the fleetspace.
     * @param databaseName Name of the database.
     * @param resource The database object to create or update.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a fleet database.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<FleetDatabaseInner>, FleetDatabaseInner> beginCreateOrUpdate(String resourceGroupName,
        String fleetName, String fleetspaceName, String databaseName, FleetDatabaseInner resource);

    /**
     * Creates or updates a fleet database.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fleetName Name of the database fleet.
     * @param fleetspaceName Name of the fleetspace.
     * @param databaseName Name of the database.
     * @param resource The database object to create or update.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a fleet database.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<FleetDatabaseInner>, FleetDatabaseInner> beginCreateOrUpdate(String resourceGroupName,
        String fleetName, String fleetspaceName, String databaseName, FleetDatabaseInner resource, Context context);

    /**
     * Creates or updates a fleet database.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fleetName Name of the database fleet.
     * @param fleetspaceName Name of the fleetspace.
     * @param databaseName Name of the database.
     * @param resource The database object to create or update.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a fleet database.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    FleetDatabaseInner createOrUpdate(String resourceGroupName, String fleetName, String fleetspaceName,
        String databaseName, FleetDatabaseInner resource);

    /**
     * Creates or updates a fleet database.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fleetName Name of the database fleet.
     * @param fleetspaceName Name of the fleetspace.
     * @param databaseName Name of the database.
     * @param resource The database object to create or update.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a fleet database.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    FleetDatabaseInner createOrUpdate(String resourceGroupName, String fleetName, String fleetspaceName,
        String databaseName, FleetDatabaseInner resource, Context context);

    /**
     * Updates a fleet database.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fleetName Name of the database fleet.
     * @param fleetspaceName Name of the fleetspace.
     * @param databaseName Name of the database.
     * @param properties The database object to patch.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a fleet database.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<FleetDatabaseInner>, FleetDatabaseInner> beginUpdate(String resourceGroupName,
        String fleetName, String fleetspaceName, String databaseName, FleetDatabaseInner properties);

    /**
     * Updates a fleet database.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fleetName Name of the database fleet.
     * @param fleetspaceName Name of the fleetspace.
     * @param databaseName Name of the database.
     * @param properties The database object to patch.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a fleet database.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<FleetDatabaseInner>, FleetDatabaseInner> beginUpdate(String resourceGroupName,
        String fleetName, String fleetspaceName, String databaseName, FleetDatabaseInner properties, Context context);

    /**
     * Updates a fleet database.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fleetName Name of the database fleet.
     * @param fleetspaceName Name of the fleetspace.
     * @param databaseName Name of the database.
     * @param properties The database object to patch.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a fleet database.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    FleetDatabaseInner update(String resourceGroupName, String fleetName, String fleetspaceName, String databaseName,
        FleetDatabaseInner properties);

    /**
     * Updates a fleet database.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fleetName Name of the database fleet.
     * @param fleetspaceName Name of the fleetspace.
     * @param databaseName Name of the database.
     * @param properties The database object to patch.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a fleet database.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    FleetDatabaseInner update(String resourceGroupName, String fleetName, String fleetspaceName, String databaseName,
        FleetDatabaseInner properties, Context context);

    /**
     * Deletes a fleet database.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fleetName Name of the database fleet.
     * @param fleetspaceName Name of the fleetspace.
     * @param databaseName Name of the database.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String fleetName, String fleetspaceName,
        String databaseName);

    /**
     * Deletes a fleet database.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fleetName Name of the database fleet.
     * @param fleetspaceName Name of the fleetspace.
     * @param databaseName Name of the database.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String fleetName, String fleetspaceName,
        String databaseName, Context context);

    /**
     * Deletes a fleet database.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fleetName Name of the database fleet.
     * @param fleetspaceName Name of the fleetspace.
     * @param databaseName Name of the database.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String fleetName, String fleetspaceName, String databaseName);

    /**
     * Deletes a fleet database.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fleetName Name of the database fleet.
     * @param fleetspaceName Name of the fleetspace.
     * @param databaseName Name of the database.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String fleetName, String fleetspaceName, String databaseName,
        Context context);

    /**
     * Moves database to a different tier.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fleetName Name of the database fleet.
     * @param fleetspaceName Name of the fleetspace.
     * @param databaseName Name of the database.
     * @param body The details of the change tier operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginChangeTier(String resourceGroupName, String fleetName,
        String fleetspaceName, String databaseName, DatabaseChangeTierProperties body);

    /**
     * Moves database to a different tier.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fleetName Name of the database fleet.
     * @param fleetspaceName Name of the fleetspace.
     * @param databaseName Name of the database.
     * @param body The details of the change tier operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginChangeTier(String resourceGroupName, String fleetName,
        String fleetspaceName, String databaseName, DatabaseChangeTierProperties body, Context context);

    /**
     * Moves database to a different tier.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fleetName Name of the database fleet.
     * @param fleetspaceName Name of the fleetspace.
     * @param databaseName Name of the database.
     * @param body The details of the change tier operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void changeTier(String resourceGroupName, String fleetName, String fleetspaceName, String databaseName,
        DatabaseChangeTierProperties body);

    /**
     * Moves database to a different tier.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fleetName Name of the database fleet.
     * @param fleetspaceName Name of the fleetspace.
     * @param databaseName Name of the database.
     * @param body The details of the change tier operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void changeTier(String resourceGroupName, String fleetName, String fleetspaceName, String databaseName,
        DatabaseChangeTierProperties body, Context context);

    /**
     * Renames a database.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fleetName Name of the database fleet.
     * @param fleetspaceName Name of the fleetspace.
     * @param databaseName Name of the database.
     * @param body The details of the rename operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginRename(String resourceGroupName, String fleetName, String fleetspaceName,
        String databaseName, DatabaseRenameProperties body);

    /**
     * Renames a database.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fleetName Name of the database fleet.
     * @param fleetspaceName Name of the fleetspace.
     * @param databaseName Name of the database.
     * @param body The details of the rename operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginRename(String resourceGroupName, String fleetName, String fleetspaceName,
        String databaseName, DatabaseRenameProperties body, Context context);

    /**
     * Renames a database.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fleetName Name of the database fleet.
     * @param fleetspaceName Name of the fleetspace.
     * @param databaseName Name of the database.
     * @param body The details of the rename operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void rename(String resourceGroupName, String fleetName, String fleetspaceName, String databaseName,
        DatabaseRenameProperties body);

    /**
     * Renames a database.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fleetName Name of the database fleet.
     * @param fleetspaceName Name of the fleetspace.
     * @param databaseName Name of the database.
     * @param body The details of the rename operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void rename(String resourceGroupName, String fleetName, String fleetspaceName, String databaseName,
        DatabaseRenameProperties body, Context context);

    /**
     * Revert a database transparent data encryption (TDE).
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fleetName Name of the database fleet.
     * @param fleetspaceName Name of the fleetspace.
     * @param databaseName Name of the database.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginRevert(String resourceGroupName, String fleetName, String fleetspaceName,
        String databaseName);

    /**
     * Revert a database transparent data encryption (TDE).
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fleetName Name of the database fleet.
     * @param fleetspaceName Name of the fleetspace.
     * @param databaseName Name of the database.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginRevert(String resourceGroupName, String fleetName, String fleetspaceName,
        String databaseName, Context context);

    /**
     * Revert a database transparent data encryption (TDE).
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fleetName Name of the database fleet.
     * @param fleetspaceName Name of the fleetspace.
     * @param databaseName Name of the database.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void revert(String resourceGroupName, String fleetName, String fleetspaceName, String databaseName);

    /**
     * Revert a database transparent data encryption (TDE).
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fleetName Name of the database fleet.
     * @param fleetspaceName Name of the fleetspace.
     * @param databaseName Name of the database.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void revert(String resourceGroupName, String fleetName, String fleetspaceName, String databaseName,
        Context context);
}
