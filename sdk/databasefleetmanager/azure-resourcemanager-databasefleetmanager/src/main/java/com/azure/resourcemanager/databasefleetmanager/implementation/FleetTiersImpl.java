// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.databasefleetmanager.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.databasefleetmanager.fluent.FleetTiersClient;
import com.azure.resourcemanager.databasefleetmanager.fluent.models.FleetTierInner;
import com.azure.resourcemanager.databasefleetmanager.models.FleetTier;
import com.azure.resourcemanager.databasefleetmanager.models.FleetTiers;

public final class FleetTiersImpl implements FleetTiers {
    private static final ClientLogger LOGGER = new ClientLogger(FleetTiersImpl.class);

    private final FleetTiersClient innerClient;

    private final com.azure.resourcemanager.databasefleetmanager.DatabasefleetmanagerManager serviceManager;

    public FleetTiersImpl(FleetTiersClient innerClient,
        com.azure.resourcemanager.databasefleetmanager.DatabasefleetmanagerManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<FleetTier> getWithResponse(String resourceGroupName, String fleetName, String tierName,
        Context context) {
        Response<FleetTierInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, fleetName, tierName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new FleetTierImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public FleetTier get(String resourceGroupName, String fleetName, String tierName) {
        FleetTierInner inner = this.serviceClient().get(resourceGroupName, fleetName, tierName);
        if (inner != null) {
            return new FleetTierImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String fleetName, String tierName) {
        this.serviceClient().delete(resourceGroupName, fleetName, tierName);
    }

    public void delete(String resourceGroupName, String fleetName, String tierName, Context context) {
        this.serviceClient().delete(resourceGroupName, fleetName, tierName, context);
    }

    public PagedIterable<FleetTier> listByFleet(String resourceGroupName, String fleetName) {
        PagedIterable<FleetTierInner> inner = this.serviceClient().listByFleet(resourceGroupName, fleetName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new FleetTierImpl(inner1, this.manager()));
    }

    public PagedIterable<FleetTier> listByFleet(String resourceGroupName, String fleetName, Long skip, Long top,
        String skiptoken, Context context) {
        PagedIterable<FleetTierInner> inner
            = this.serviceClient().listByFleet(resourceGroupName, fleetName, skip, top, skiptoken, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new FleetTierImpl(inner1, this.manager()));
    }

    public Response<FleetTier> disableWithResponse(String resourceGroupName, String fleetName, String tierName,
        Context context) {
        Response<FleetTierInner> inner
            = this.serviceClient().disableWithResponse(resourceGroupName, fleetName, tierName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new FleetTierImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public FleetTier disable(String resourceGroupName, String fleetName, String tierName) {
        FleetTierInner inner = this.serviceClient().disable(resourceGroupName, fleetName, tierName);
        if (inner != null) {
            return new FleetTierImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public FleetTier getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String fleetName = ResourceManagerUtils.getValueFromIdByName(id, "fleets");
        if (fleetName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'fleets'.", id)));
        }
        String tierName = ResourceManagerUtils.getValueFromIdByName(id, "tiers");
        if (tierName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'tiers'.", id)));
        }
        return this.getWithResponse(resourceGroupName, fleetName, tierName, Context.NONE).getValue();
    }

    public Response<FleetTier> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String fleetName = ResourceManagerUtils.getValueFromIdByName(id, "fleets");
        if (fleetName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'fleets'.", id)));
        }
        String tierName = ResourceManagerUtils.getValueFromIdByName(id, "tiers");
        if (tierName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'tiers'.", id)));
        }
        return this.getWithResponse(resourceGroupName, fleetName, tierName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String fleetName = ResourceManagerUtils.getValueFromIdByName(id, "fleets");
        if (fleetName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'fleets'.", id)));
        }
        String tierName = ResourceManagerUtils.getValueFromIdByName(id, "tiers");
        if (tierName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'tiers'.", id)));
        }
        this.delete(resourceGroupName, fleetName, tierName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String fleetName = ResourceManagerUtils.getValueFromIdByName(id, "fleets");
        if (fleetName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'fleets'.", id)));
        }
        String tierName = ResourceManagerUtils.getValueFromIdByName(id, "tiers");
        if (tierName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'tiers'.", id)));
        }
        this.delete(resourceGroupName, fleetName, tierName, context);
    }

    private FleetTiersClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.databasefleetmanager.DatabasefleetmanagerManager manager() {
        return this.serviceManager;
    }

    public FleetTierImpl define(String name) {
        return new FleetTierImpl(name, this.manager());
    }
}
