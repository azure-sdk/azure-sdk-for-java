// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.databasefleetmanager.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.databasefleetmanager.models.DatabaseIdentity;
import com.azure.resourcemanager.databasefleetmanager.models.Identity;
import com.azure.resourcemanager.databasefleetmanager.models.IdentityType;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class IdentityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        Identity model = BinaryData.fromString(
            "{\"identityType\":\"None\",\"userAssignedIdentities\":[{\"resourceId\":\"qjbasvms\",\"principalId\":\"qulngsntnbybkzgc\",\"clientId\":\"wclxxwrl\"},{\"resourceId\":\"ouskcqvkocrc\",\"principalId\":\"kwt\",\"clientId\":\"xbnjbiksq\"},{\"resourceId\":\"lssai\",\"principalId\":\"p\",\"clientId\":\"nzl\"},{\"resourceId\":\"fmppe\",\"principalId\":\"vmgxsab\",\"clientId\":\"qduujitcjczdz\"}],\"federatedClientId\":\"ndhkrw\"}")
            .toObject(Identity.class);
        Assertions.assertEquals(IdentityType.NONE, model.identityType());
        Assertions.assertEquals("qjbasvms", model.userAssignedIdentities().get(0).resourceId());
        Assertions.assertEquals("qulngsntnbybkzgc", model.userAssignedIdentities().get(0).principalId());
        Assertions.assertEquals("wclxxwrl", model.userAssignedIdentities().get(0).clientId());
        Assertions.assertEquals("ndhkrw", model.federatedClientId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        Identity model = new Identity().withIdentityType(IdentityType.NONE)
            .withUserAssignedIdentities(Arrays.asList(
                new DatabaseIdentity().withResourceId("qjbasvms")
                    .withPrincipalId("qulngsntnbybkzgc")
                    .withClientId("wclxxwrl"),
                new DatabaseIdentity().withResourceId("ouskcqvkocrc").withPrincipalId("kwt").withClientId("xbnjbiksq"),
                new DatabaseIdentity().withResourceId("lssai").withPrincipalId("p").withClientId("nzl"),
                new DatabaseIdentity().withResourceId("fmppe")
                    .withPrincipalId("vmgxsab")
                    .withClientId("qduujitcjczdz")))
            .withFederatedClientId("ndhkrw");
        model = BinaryData.fromObject(model).toObject(Identity.class);
        Assertions.assertEquals(IdentityType.NONE, model.identityType());
        Assertions.assertEquals("qjbasvms", model.userAssignedIdentities().get(0).resourceId());
        Assertions.assertEquals("qulngsntnbybkzgc", model.userAssignedIdentities().get(0).principalId());
        Assertions.assertEquals("wclxxwrl", model.userAssignedIdentities().get(0).clientId());
        Assertions.assertEquals("ndhkrw", model.federatedClientId());
    }
}
