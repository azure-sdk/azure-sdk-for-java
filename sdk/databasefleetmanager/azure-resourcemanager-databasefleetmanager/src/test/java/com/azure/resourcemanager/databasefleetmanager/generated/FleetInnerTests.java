// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.databasefleetmanager.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.databasefleetmanager.fluent.models.FleetInner;
import com.azure.resourcemanager.databasefleetmanager.models.FleetProperties;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class FleetInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        FleetInner model = BinaryData.fromString(
            "{\"properties\":{\"description\":\"exxppofmxaxcfjp\",\"provisioningState\":\"Canceled\"},\"location\":\"ocjjxhvpmouexh\",\"tags\":{\"qeojnxqbzvddntw\":\"i\",\"vuhrhcffcyddgl\":\"deicbtwnpzao\",\"xmqci\":\"jthjqkwpyei\"},\"id\":\"q\",\"name\":\"hkh\",\"type\":\"xuigdtopbobj\"}")
            .toObject(FleetInner.class);
        Assertions.assertEquals("ocjjxhvpmouexh", model.location());
        Assertions.assertEquals("i", model.tags().get("qeojnxqbzvddntw"));
        Assertions.assertEquals("exxppofmxaxcfjp", model.properties().description());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        FleetInner model = new FleetInner().withLocation("ocjjxhvpmouexh")
            .withTags(mapOf("qeojnxqbzvddntw", "i", "vuhrhcffcyddgl", "deicbtwnpzao", "xmqci", "jthjqkwpyei"))
            .withProperties(new FleetProperties().withDescription("exxppofmxaxcfjp"));
        model = BinaryData.fromObject(model).toObject(FleetInner.class);
        Assertions.assertEquals("ocjjxhvpmouexh", model.location());
        Assertions.assertEquals("i", model.tags().get("qeojnxqbzvddntw"));
        Assertions.assertEquals("exxppofmxaxcfjp", model.properties().description());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
