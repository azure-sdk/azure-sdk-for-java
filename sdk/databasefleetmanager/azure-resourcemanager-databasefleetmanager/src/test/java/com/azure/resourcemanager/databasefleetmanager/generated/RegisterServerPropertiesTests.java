// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.databasefleetmanager.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.databasefleetmanager.models.DestinationTierOverride;
import com.azure.resourcemanager.databasefleetmanager.models.RegisterServerProperties;
import com.azure.resourcemanager.databasefleetmanager.models.ResourceType;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class RegisterServerPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        RegisterServerProperties model = BinaryData.fromString(
            "{\"tierName\":\"kudjkrlkhb\",\"sourceSubscriptionId\":\"fepgzgq\",\"sourceResourceGroupName\":\"zloc\",\"sourceServerName\":\"c\",\"destinationTierOverrides\":[{\"resourceType\":\"Pool\",\"tierName\":\"rhhbcs\",\"resourceName\":\"l\"},{\"resourceType\":\"Pool\",\"tierName\":\"majtjaod\",\"resourceName\":\"obnbdxkqpxokaj\"},{\"resourceType\":\"Pool\",\"tierName\":\"npime\",\"resourceName\":\"gstxgcp\"},{\"resourceType\":\"Database\",\"tierName\":\"gmaajrm\",\"resourceName\":\"djwzrlov\"}]}")
            .toObject(RegisterServerProperties.class);
        Assertions.assertEquals("kudjkrlkhb", model.tierName());
        Assertions.assertEquals("fepgzgq", model.sourceSubscriptionId());
        Assertions.assertEquals("zloc", model.sourceResourceGroupName());
        Assertions.assertEquals("c", model.sourceServerName());
        Assertions.assertEquals(ResourceType.POOL, model.destinationTierOverrides().get(0).resourceType());
        Assertions.assertEquals("rhhbcs", model.destinationTierOverrides().get(0).tierName());
        Assertions.assertEquals("l", model.destinationTierOverrides().get(0).resourceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        RegisterServerProperties model = new RegisterServerProperties().withTierName("kudjkrlkhb")
            .withSourceSubscriptionId("fepgzgq")
            .withSourceResourceGroupName("zloc")
            .withSourceServerName("c")
            .withDestinationTierOverrides(Arrays.asList(
                new DestinationTierOverride().withResourceType(ResourceType.POOL)
                    .withTierName("rhhbcs")
                    .withResourceName("l"),
                new DestinationTierOverride().withResourceType(ResourceType.POOL)
                    .withTierName("majtjaod")
                    .withResourceName("obnbdxkqpxokaj"),
                new DestinationTierOverride().withResourceType(ResourceType.POOL)
                    .withTierName("npime")
                    .withResourceName("gstxgcp"),
                new DestinationTierOverride().withResourceType(ResourceType.DATABASE)
                    .withTierName("gmaajrm")
                    .withResourceName("djwzrlov")));
        model = BinaryData.fromObject(model).toObject(RegisterServerProperties.class);
        Assertions.assertEquals("kudjkrlkhb", model.tierName());
        Assertions.assertEquals("fepgzgq", model.sourceSubscriptionId());
        Assertions.assertEquals("zloc", model.sourceResourceGroupName());
        Assertions.assertEquals("c", model.sourceServerName());
        Assertions.assertEquals(ResourceType.POOL, model.destinationTierOverrides().get(0).resourceType());
        Assertions.assertEquals("rhhbcs", model.destinationTierOverrides().get(0).tierName());
        Assertions.assertEquals("l", model.destinationTierOverrides().get(0).resourceName());
    }
}
