// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.databasefleetmanager.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.databasefleetmanager.models.FleetTierProperties;
import com.azure.resourcemanager.databasefleetmanager.models.ZoneRedundancy;
import org.junit.jupiter.api.Assertions;

public final class FleetTierPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        FleetTierProperties model = BinaryData.fromString(
            "{\"disabled\":true,\"serverless\":true,\"pooled\":true,\"serviceTier\":\"myzydagfuaxbez\",\"family\":\"uokktwhrdxwz\",\"capacity\":180468800,\"poolNumOfDatabasesMax\":436585772,\"highAvailabilityReplicaCount\":1170430043,\"zoneRedundancy\":\"Disabled\",\"databaseCapacityMin\":17.70073898875807,\"databaseCapacityMax\":0.6073530909555869,\"databaseSizeGbMax\":1010959661,\"provisioningState\":\"Succeeded\"}")
            .toObject(FleetTierProperties.class);
        Assertions.assertEquals(true, model.serverless());
        Assertions.assertEquals(true, model.pooled());
        Assertions.assertEquals("myzydagfuaxbez", model.serviceTier());
        Assertions.assertEquals("uokktwhrdxwz", model.family());
        Assertions.assertEquals(180468800, model.capacity());
        Assertions.assertEquals(436585772, model.poolNumOfDatabasesMax());
        Assertions.assertEquals(1170430043, model.highAvailabilityReplicaCount());
        Assertions.assertEquals(ZoneRedundancy.DISABLED, model.zoneRedundancy());
        Assertions.assertEquals(17.70073898875807D, model.databaseCapacityMin());
        Assertions.assertEquals(0.6073530909555869D, model.databaseCapacityMax());
        Assertions.assertEquals(1010959661, model.databaseSizeGbMax());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        FleetTierProperties model = new FleetTierProperties().withServerless(true)
            .withPooled(true)
            .withServiceTier("myzydagfuaxbez")
            .withFamily("uokktwhrdxwz")
            .withCapacity(180468800)
            .withPoolNumOfDatabasesMax(436585772)
            .withHighAvailabilityReplicaCount(1170430043)
            .withZoneRedundancy(ZoneRedundancy.DISABLED)
            .withDatabaseCapacityMin(17.70073898875807D)
            .withDatabaseCapacityMax(0.6073530909555869D)
            .withDatabaseSizeGbMax(1010959661);
        model = BinaryData.fromObject(model).toObject(FleetTierProperties.class);
        Assertions.assertEquals(true, model.serverless());
        Assertions.assertEquals(true, model.pooled());
        Assertions.assertEquals("myzydagfuaxbez", model.serviceTier());
        Assertions.assertEquals("uokktwhrdxwz", model.family());
        Assertions.assertEquals(180468800, model.capacity());
        Assertions.assertEquals(436585772, model.poolNumOfDatabasesMax());
        Assertions.assertEquals(1170430043, model.highAvailabilityReplicaCount());
        Assertions.assertEquals(ZoneRedundancy.DISABLED, model.zoneRedundancy());
        Assertions.assertEquals(17.70073898875807D, model.databaseCapacityMin());
        Assertions.assertEquals(0.6073530909555869D, model.databaseCapacityMax());
        Assertions.assertEquals(1010959661, model.databaseSizeGbMax());
    }
}
