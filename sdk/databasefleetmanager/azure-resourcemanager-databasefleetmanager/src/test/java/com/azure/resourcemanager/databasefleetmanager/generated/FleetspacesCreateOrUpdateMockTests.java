// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.databasefleetmanager.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.databasefleetmanager.DatabasefleetmanagerManager;
import com.azure.resourcemanager.databasefleetmanager.models.Fleetspace;
import com.azure.resourcemanager.databasefleetmanager.models.FleetspaceProperties;
import com.azure.resourcemanager.databasefleetmanager.models.MainPrincipal;
import com.azure.resourcemanager.databasefleetmanager.models.PrincipalType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class FleetspacesCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"capacityMax\":11356345,\"mainPrincipal\":{\"login\":\"ooxdjebwpuc\",\"applicationId\":\"fvovbvmeuecivy\",\"objectId\":\"ce\",\"tenantId\":\"jgjrwjueiotwm\",\"principalType\":\"Application\"}},\"id\":\"dxwitx\",\"name\":\"rjaw\",\"type\":\"qwgxhniskx\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DatabasefleetmanagerManager manager = DatabasefleetmanagerManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        Fleetspace response = manager.fleetspaces()
            .define("ahvljuaha")
            .withExistingFleet("srtslhspkdeem", "ofmxagkvtmelmqkr")
            .withProperties(new FleetspaceProperties().withCapacityMax(1312333731)
                .withMainPrincipal(new MainPrincipal().withLogin("ualaexqpvfadmw")
                    .withApplicationId("crgvxpvgom")
                    .withObjectId("fmisg")
                    .withTenantId("nbbelda")
                    .withPrincipalType(PrincipalType.USER)))
            .create();

        Assertions.assertEquals(11356345, response.properties().capacityMax());
        Assertions.assertEquals("ooxdjebwpuc", response.properties().mainPrincipal().login());
        Assertions.assertEquals("fvovbvmeuecivy", response.properties().mainPrincipal().applicationId());
        Assertions.assertEquals("ce", response.properties().mainPrincipal().objectId());
        Assertions.assertEquals("jgjrwjueiotwm", response.properties().mainPrincipal().tenantId());
        Assertions.assertEquals(PrincipalType.APPLICATION, response.properties().mainPrincipal().principalType());
    }
}
