// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.databasefleetmanager.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.databasefleetmanager.fluent.models.FleetspaceInner;
import com.azure.resourcemanager.databasefleetmanager.models.FleetspaceProperties;
import com.azure.resourcemanager.databasefleetmanager.models.MainPrincipal;
import com.azure.resourcemanager.databasefleetmanager.models.PrincipalType;
import org.junit.jupiter.api.Assertions;

public final class FleetspaceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        FleetspaceInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"Succeeded\",\"capacityMax\":432312766,\"mainPrincipal\":{\"login\":\"pbhtqqrolfpfpsa\",\"applicationId\":\"bquxigjy\",\"objectId\":\"zjaoyfhrtxil\",\"tenantId\":\"rkujy\",\"principalType\":\"Application\"}},\"id\":\"juvf\",\"name\":\"awrlyx\",\"type\":\"jkcpr\"}")
            .toObject(FleetspaceInner.class);
        Assertions.assertEquals(432312766, model.properties().capacityMax());
        Assertions.assertEquals("pbhtqqrolfpfpsa", model.properties().mainPrincipal().login());
        Assertions.assertEquals("bquxigjy", model.properties().mainPrincipal().applicationId());
        Assertions.assertEquals("zjaoyfhrtxil", model.properties().mainPrincipal().objectId());
        Assertions.assertEquals("rkujy", model.properties().mainPrincipal().tenantId());
        Assertions.assertEquals(PrincipalType.APPLICATION, model.properties().mainPrincipal().principalType());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        FleetspaceInner model
            = new FleetspaceInner().withProperties(new FleetspaceProperties().withCapacityMax(432312766)
                .withMainPrincipal(new MainPrincipal().withLogin("pbhtqqrolfpfpsa")
                    .withApplicationId("bquxigjy")
                    .withObjectId("zjaoyfhrtxil")
                    .withTenantId("rkujy")
                    .withPrincipalType(PrincipalType.APPLICATION)));
        model = BinaryData.fromObject(model).toObject(FleetspaceInner.class);
        Assertions.assertEquals(432312766, model.properties().capacityMax());
        Assertions.assertEquals("pbhtqqrolfpfpsa", model.properties().mainPrincipal().login());
        Assertions.assertEquals("bquxigjy", model.properties().mainPrincipal().applicationId());
        Assertions.assertEquals("zjaoyfhrtxil", model.properties().mainPrincipal().objectId());
        Assertions.assertEquals("rkujy", model.properties().mainPrincipal().tenantId());
        Assertions.assertEquals(PrincipalType.APPLICATION, model.properties().mainPrincipal().principalType());
    }
}
