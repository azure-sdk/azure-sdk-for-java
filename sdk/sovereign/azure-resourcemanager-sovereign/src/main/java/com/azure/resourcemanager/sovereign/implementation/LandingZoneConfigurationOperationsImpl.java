// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sovereign.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.sovereign.fluent.LandingZoneConfigurationOperationsClient;
import com.azure.resourcemanager.sovereign.fluent.models.CreateLandingZoneConfigurationCopyResponseInner;
import com.azure.resourcemanager.sovereign.fluent.models.GenerateLandingZoneResponseInner;
import com.azure.resourcemanager.sovereign.fluent.models.LandingZoneConfigurationResourceInner;
import com.azure.resourcemanager.sovereign.fluent.models.UpdateAuthoringStatusResponseInner;
import com.azure.resourcemanager.sovereign.models.CreateLandingZoneConfigurationCopyRequest;
import com.azure.resourcemanager.sovereign.models.CreateLandingZoneConfigurationCopyResponse;
import com.azure.resourcemanager.sovereign.models.GenerateLandingZoneRequest;
import com.azure.resourcemanager.sovereign.models.GenerateLandingZoneResponse;
import com.azure.resourcemanager.sovereign.models.LandingZoneConfigurationOperations;
import com.azure.resourcemanager.sovereign.models.LandingZoneConfigurationResource;
import com.azure.resourcemanager.sovereign.models.UpdateAuthoringStatusRequest;
import com.azure.resourcemanager.sovereign.models.UpdateAuthoringStatusResponse;

public final class LandingZoneConfigurationOperationsImpl implements LandingZoneConfigurationOperations {
    private static final ClientLogger LOGGER = new ClientLogger(LandingZoneConfigurationOperationsImpl.class);

    private final LandingZoneConfigurationOperationsClient innerClient;

    private final com.azure.resourcemanager.sovereign.SovereignManager serviceManager;

    public LandingZoneConfigurationOperationsImpl(LandingZoneConfigurationOperationsClient innerClient,
        com.azure.resourcemanager.sovereign.SovereignManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<LandingZoneConfigurationResource> list(String resourceGroupName,
        String landingZoneAccountName) {
        PagedIterable<LandingZoneConfigurationResourceInner> inner
            = this.serviceClient().list(resourceGroupName, landingZoneAccountName);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new LandingZoneConfigurationResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<LandingZoneConfigurationResource> list(String resourceGroupName, String landingZoneAccountName,
        Context context) {
        PagedIterable<LandingZoneConfigurationResourceInner> inner
            = this.serviceClient().list(resourceGroupName, landingZoneAccountName, context);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new LandingZoneConfigurationResourceImpl(inner1, this.manager()));
    }

    public Response<LandingZoneConfigurationResource> getWithResponse(String resourceGroupName,
        String landingZoneAccountName, String landingZoneConfigurationName, Context context) {
        Response<LandingZoneConfigurationResourceInner> inner = this.serviceClient()
            .getWithResponse(resourceGroupName, landingZoneAccountName, landingZoneConfigurationName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new LandingZoneConfigurationResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public LandingZoneConfigurationResource get(String resourceGroupName, String landingZoneAccountName,
        String landingZoneConfigurationName) {
        LandingZoneConfigurationResourceInner inner
            = this.serviceClient().get(resourceGroupName, landingZoneAccountName, landingZoneConfigurationName);
        if (inner != null) {
            return new LandingZoneConfigurationResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String landingZoneAccountName, String landingZoneConfigurationName) {
        this.serviceClient().delete(resourceGroupName, landingZoneAccountName, landingZoneConfigurationName);
    }

    public void delete(String resourceGroupName, String landingZoneAccountName, String landingZoneConfigurationName,
        Context context) {
        this.serviceClient().delete(resourceGroupName, landingZoneAccountName, landingZoneConfigurationName, context);
    }

    public CreateLandingZoneConfigurationCopyResponse createCopy(String resourceGroupName,
        String landingZoneAccountName, String landingZoneConfigurationName,
        CreateLandingZoneConfigurationCopyRequest body) {
        CreateLandingZoneConfigurationCopyResponseInner inner = this.serviceClient()
            .createCopy(resourceGroupName, landingZoneAccountName, landingZoneConfigurationName, body);
        if (inner != null) {
            return new CreateLandingZoneConfigurationCopyResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public CreateLandingZoneConfigurationCopyResponse createCopy(String resourceGroupName,
        String landingZoneAccountName, String landingZoneConfigurationName,
        CreateLandingZoneConfigurationCopyRequest body, Context context) {
        CreateLandingZoneConfigurationCopyResponseInner inner = this.serviceClient()
            .createCopy(resourceGroupName, landingZoneAccountName, landingZoneConfigurationName, body, context);
        if (inner != null) {
            return new CreateLandingZoneConfigurationCopyResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public GenerateLandingZoneResponse generateLandingZone(String resourceGroupName, String landingZoneAccountName,
        String landingZoneConfigurationName, GenerateLandingZoneRequest body) {
        GenerateLandingZoneResponseInner inner = this.serviceClient()
            .generateLandingZone(resourceGroupName, landingZoneAccountName, landingZoneConfigurationName, body);
        if (inner != null) {
            return new GenerateLandingZoneResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public GenerateLandingZoneResponse generateLandingZone(String resourceGroupName, String landingZoneAccountName,
        String landingZoneConfigurationName, GenerateLandingZoneRequest body, Context context) {
        GenerateLandingZoneResponseInner inner = this.serviceClient()
            .generateLandingZone(resourceGroupName, landingZoneAccountName, landingZoneConfigurationName, body,
                context);
        if (inner != null) {
            return new GenerateLandingZoneResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public UpdateAuthoringStatusResponse updateAuthoringStatus(String resourceGroupName, String landingZoneAccountName,
        String landingZoneConfigurationName, UpdateAuthoringStatusRequest body) {
        UpdateAuthoringStatusResponseInner inner = this.serviceClient()
            .updateAuthoringStatus(resourceGroupName, landingZoneAccountName, landingZoneConfigurationName, body);
        if (inner != null) {
            return new UpdateAuthoringStatusResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public UpdateAuthoringStatusResponse updateAuthoringStatus(String resourceGroupName, String landingZoneAccountName,
        String landingZoneConfigurationName, UpdateAuthoringStatusRequest body, Context context) {
        UpdateAuthoringStatusResponseInner inner = this.serviceClient()
            .updateAuthoringStatus(resourceGroupName, landingZoneAccountName, landingZoneConfigurationName, body,
                context);
        if (inner != null) {
            return new UpdateAuthoringStatusResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public LandingZoneConfigurationResource getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String landingZoneAccountName = ResourceManagerUtils.getValueFromIdByName(id, "landingZoneAccounts");
        if (landingZoneAccountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'landingZoneAccounts'.", id)));
        }
        String landingZoneConfigurationName
            = ResourceManagerUtils.getValueFromIdByName(id, "landingZoneConfigurations");
        if (landingZoneConfigurationName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'landingZoneConfigurations'.", id)));
        }
        return this
            .getWithResponse(resourceGroupName, landingZoneAccountName, landingZoneConfigurationName, Context.NONE)
            .getValue();
    }

    public Response<LandingZoneConfigurationResource> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String landingZoneAccountName = ResourceManagerUtils.getValueFromIdByName(id, "landingZoneAccounts");
        if (landingZoneAccountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'landingZoneAccounts'.", id)));
        }
        String landingZoneConfigurationName
            = ResourceManagerUtils.getValueFromIdByName(id, "landingZoneConfigurations");
        if (landingZoneConfigurationName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'landingZoneConfigurations'.", id)));
        }
        return this.getWithResponse(resourceGroupName, landingZoneAccountName, landingZoneConfigurationName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String landingZoneAccountName = ResourceManagerUtils.getValueFromIdByName(id, "landingZoneAccounts");
        if (landingZoneAccountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'landingZoneAccounts'.", id)));
        }
        String landingZoneConfigurationName
            = ResourceManagerUtils.getValueFromIdByName(id, "landingZoneConfigurations");
        if (landingZoneConfigurationName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'landingZoneConfigurations'.", id)));
        }
        this.delete(resourceGroupName, landingZoneAccountName, landingZoneConfigurationName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String landingZoneAccountName = ResourceManagerUtils.getValueFromIdByName(id, "landingZoneAccounts");
        if (landingZoneAccountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'landingZoneAccounts'.", id)));
        }
        String landingZoneConfigurationName
            = ResourceManagerUtils.getValueFromIdByName(id, "landingZoneConfigurations");
        if (landingZoneConfigurationName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'landingZoneConfigurations'.", id)));
        }
        this.delete(resourceGroupName, landingZoneAccountName, landingZoneConfigurationName, context);
    }

    private LandingZoneConfigurationOperationsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.sovereign.SovereignManager manager() {
        return this.serviceManager;
    }

    public LandingZoneConfigurationResourceImpl define(String name) {
        return new LandingZoneConfigurationResourceImpl(name, this.manager());
    }
}
