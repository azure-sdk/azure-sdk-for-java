// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sovereign.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The properties of landing zone registration resource type.
 */
@Fluent
public final class LandingZoneRegistrationResourcePropertiesUpdate
    implements JsonSerializable<LandingZoneRegistrationResourcePropertiesUpdate> {
    /*
     * The resource id of the top level management group
     */
    private String existingTopLevelMgId;

    /*
     * The resource id of the associated landing zone configuration.
     */
    private String existingLandingZoneConfigurationId;

    /*
     * The managed identity to be tied to this landing zone registration
     */
    private ManagedIdentityPropertiesUpdate managedIdentity;

    /**
     * Creates an instance of LandingZoneRegistrationResourcePropertiesUpdate class.
     */
    public LandingZoneRegistrationResourcePropertiesUpdate() {
    }

    /**
     * Get the existingTopLevelMgId property: The resource id of the top level management group.
     * 
     * @return the existingTopLevelMgId value.
     */
    public String existingTopLevelMgId() {
        return this.existingTopLevelMgId;
    }

    /**
     * Set the existingTopLevelMgId property: The resource id of the top level management group.
     * 
     * @param existingTopLevelMgId the existingTopLevelMgId value to set.
     * @return the LandingZoneRegistrationResourcePropertiesUpdate object itself.
     */
    public LandingZoneRegistrationResourcePropertiesUpdate withExistingTopLevelMgId(String existingTopLevelMgId) {
        this.existingTopLevelMgId = existingTopLevelMgId;
        return this;
    }

    /**
     * Get the existingLandingZoneConfigurationId property: The resource id of the associated landing zone
     * configuration.
     * 
     * @return the existingLandingZoneConfigurationId value.
     */
    public String existingLandingZoneConfigurationId() {
        return this.existingLandingZoneConfigurationId;
    }

    /**
     * Set the existingLandingZoneConfigurationId property: The resource id of the associated landing zone
     * configuration.
     * 
     * @param existingLandingZoneConfigurationId the existingLandingZoneConfigurationId value to set.
     * @return the LandingZoneRegistrationResourcePropertiesUpdate object itself.
     */
    public LandingZoneRegistrationResourcePropertiesUpdate
        withExistingLandingZoneConfigurationId(String existingLandingZoneConfigurationId) {
        this.existingLandingZoneConfigurationId = existingLandingZoneConfigurationId;
        return this;
    }

    /**
     * Get the managedIdentity property: The managed identity to be tied to this landing zone registration.
     * 
     * @return the managedIdentity value.
     */
    public ManagedIdentityPropertiesUpdate managedIdentity() {
        return this.managedIdentity;
    }

    /**
     * Set the managedIdentity property: The managed identity to be tied to this landing zone registration.
     * 
     * @param managedIdentity the managedIdentity value to set.
     * @return the LandingZoneRegistrationResourcePropertiesUpdate object itself.
     */
    public LandingZoneRegistrationResourcePropertiesUpdate
        withManagedIdentity(ManagedIdentityPropertiesUpdate managedIdentity) {
        this.managedIdentity = managedIdentity;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (managedIdentity() != null) {
            managedIdentity().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("existingTopLevelMgId", this.existingTopLevelMgId);
        jsonWriter.writeStringField("existingLandingZoneConfigurationId", this.existingLandingZoneConfigurationId);
        jsonWriter.writeJsonField("managedIdentity", this.managedIdentity);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LandingZoneRegistrationResourcePropertiesUpdate from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LandingZoneRegistrationResourcePropertiesUpdate if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the LandingZoneRegistrationResourcePropertiesUpdate.
     */
    public static LandingZoneRegistrationResourcePropertiesUpdate fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LandingZoneRegistrationResourcePropertiesUpdate deserializedLandingZoneRegistrationResourcePropertiesUpdate
                = new LandingZoneRegistrationResourcePropertiesUpdate();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("existingTopLevelMgId".equals(fieldName)) {
                    deserializedLandingZoneRegistrationResourcePropertiesUpdate.existingTopLevelMgId
                        = reader.getString();
                } else if ("existingLandingZoneConfigurationId".equals(fieldName)) {
                    deserializedLandingZoneRegistrationResourcePropertiesUpdate.existingLandingZoneConfigurationId
                        = reader.getString();
                } else if ("managedIdentity".equals(fieldName)) {
                    deserializedLandingZoneRegistrationResourcePropertiesUpdate.managedIdentity
                        = ManagedIdentityPropertiesUpdate.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLandingZoneRegistrationResourcePropertiesUpdate;
        });
    }
}
