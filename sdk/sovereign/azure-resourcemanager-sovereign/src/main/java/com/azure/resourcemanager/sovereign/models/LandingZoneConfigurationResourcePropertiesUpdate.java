// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sovereign.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The properties of landing zone configuration resource type.
 */
@Fluent
public final class LandingZoneConfigurationResourcePropertiesUpdate
    implements JsonSerializable<LandingZoneConfigurationResourcePropertiesUpdate> {
    /*
     * To deploy ddos, choose Yes, otherwise No. Select Existing to provide an existing ddos protection plan.
     */
    private ResourceCreationOptions ddosProtectionCreationOption;

    /*
     * The resource id of the ddos protection plan.
     */
    private String existingDdosProtectionId;

    /*
     * To deploy log analytics workspace, choose Yes, otherwise No. Select UseExisting to provide an existing log
     * analytics workspace.
     */
    private ResourceCreationOptions logAnalyticsWorkspaceCreationOption;

    /*
     * The resource id of the log analytics workspace that was created to centralize log ingestion.
     */
    private String existingLogAnalyticsWorkspaceId;

    /*
     * Array of tag objects in format of {'name':'a tag name', 'value':'a tag value'}.
     */
    private List<Tags> tags;

    /*
     * To deploy firewall, choose the Standard/Premium based on the desired SKU. Choose None for no firewall and
     * UseExisting for a pre existing one.
     */
    private FirewallCreationOptions firewallCreationOption;

    /*
     * Azure firewall subnet. IPv4 CIDR block.
     */
    private String firewallSubnetCidrBlock;

    /*
     * Gateway subnet. IPv4 CIDR block.
     */
    private String gatewaySubnetCidrBlock;

    /*
     * Set how long logs are retained for, in days. Minimum length is 30 and maximum is 730
     */
    private Long logRetentionInDays;

    /*
     * The address space for the VNET. IPv4 CIDR block.
     */
    private String hubNetworkCidrBlock;

    /*
     * To deploy the bastion service, choose Yes, otherwise No. Choose UseExisting for existing bastion service.
     */
    private ResourceCreationOptions azureBastionCreationOption;

    /*
     * The resource id of azure bastion.
     */
    private String existingAzureBastionId;

    /*
     * Azure bastion subnet. IP v4 CIDR block.
     */
    private String azureBastionSubnetCidrBlock;

    /*
     * Landing zone children management group properties
     */
    private List<LandingZoneManagementGroupProperties> landingZonesMgChildren;

    /*
     * This will be applied to the root of the landing zone deployment.
     */
    private ManagementGroupPropertiesUpdate topLevelMgMetadata;

    /*
     * This will be applied to the landing zone management groups.
     */
    private ManagementGroupPropertiesUpdate landingZonesMgMetadata;

    /*
     * This will be applied to the platform management group.
     */
    private ManagementGroupPropertiesUpdate platformMgMetadata;

    /*
     * This will be applied to the management management group under platform.
     */
    private ManagementGroupPropertiesUpdate platformManagementMgMetadata;

    /*
     * This will be applied to the connectivity management group under platform.
     */
    private ManagementGroupPropertiesUpdate platformConnectivityMgMetadata;

    /*
     * This will be applied to the identity management group under platform.
     */
    private ManagementGroupPropertiesUpdate platformIdentityMgMetadata;

    /*
     * This will be applied to the decommissioned management group.
     */
    private DecommissionedManagementGroupPropertiesUpdate decommissionedMgMetadata;

    /*
     * This will be applied to the sandbox management group.
     */
    private SandboxManagementGroupPropertiesUpdate sandboxMgMetadata;

    /*
     * The managed identity to be tied to this landing zone configuration
     */
    private ManagedIdentityPropertiesUpdate managedIdentity;

    /*
     * Platform children management group properties.
     */
    private List<PlatformManagementGroupProperties> platformMgChildren;

    /*
     * The naming convention that's used by default for all resource types for this landing zone configuration
     */
    private String namingConventionFormula;

    /*
     * The customized naming convention for one or more resource types in this landing zone configuration
     */
    private List<CustomNamingConvention> customNamingConvention;

    /**
     * Creates an instance of LandingZoneConfigurationResourcePropertiesUpdate class.
     */
    public LandingZoneConfigurationResourcePropertiesUpdate() {
    }

    /**
     * Get the ddosProtectionCreationOption property: To deploy ddos, choose Yes, otherwise No. Select Existing to
     * provide an existing ddos protection plan.
     * 
     * @return the ddosProtectionCreationOption value.
     */
    public ResourceCreationOptions ddosProtectionCreationOption() {
        return this.ddosProtectionCreationOption;
    }

    /**
     * Set the ddosProtectionCreationOption property: To deploy ddos, choose Yes, otherwise No. Select Existing to
     * provide an existing ddos protection plan.
     * 
     * @param ddosProtectionCreationOption the ddosProtectionCreationOption value to set.
     * @return the LandingZoneConfigurationResourcePropertiesUpdate object itself.
     */
    public LandingZoneConfigurationResourcePropertiesUpdate
        withDdosProtectionCreationOption(ResourceCreationOptions ddosProtectionCreationOption) {
        this.ddosProtectionCreationOption = ddosProtectionCreationOption;
        return this;
    }

    /**
     * Get the existingDdosProtectionId property: The resource id of the ddos protection plan.
     * 
     * @return the existingDdosProtectionId value.
     */
    public String existingDdosProtectionId() {
        return this.existingDdosProtectionId;
    }

    /**
     * Set the existingDdosProtectionId property: The resource id of the ddos protection plan.
     * 
     * @param existingDdosProtectionId the existingDdosProtectionId value to set.
     * @return the LandingZoneConfigurationResourcePropertiesUpdate object itself.
     */
    public LandingZoneConfigurationResourcePropertiesUpdate
        withExistingDdosProtectionId(String existingDdosProtectionId) {
        this.existingDdosProtectionId = existingDdosProtectionId;
        return this;
    }

    /**
     * Get the logAnalyticsWorkspaceCreationOption property: To deploy log analytics workspace, choose Yes, otherwise
     * No. Select UseExisting to provide an existing log analytics workspace.
     * 
     * @return the logAnalyticsWorkspaceCreationOption value.
     */
    public ResourceCreationOptions logAnalyticsWorkspaceCreationOption() {
        return this.logAnalyticsWorkspaceCreationOption;
    }

    /**
     * Set the logAnalyticsWorkspaceCreationOption property: To deploy log analytics workspace, choose Yes, otherwise
     * No. Select UseExisting to provide an existing log analytics workspace.
     * 
     * @param logAnalyticsWorkspaceCreationOption the logAnalyticsWorkspaceCreationOption value to set.
     * @return the LandingZoneConfigurationResourcePropertiesUpdate object itself.
     */
    public LandingZoneConfigurationResourcePropertiesUpdate
        withLogAnalyticsWorkspaceCreationOption(ResourceCreationOptions logAnalyticsWorkspaceCreationOption) {
        this.logAnalyticsWorkspaceCreationOption = logAnalyticsWorkspaceCreationOption;
        return this;
    }

    /**
     * Get the existingLogAnalyticsWorkspaceId property: The resource id of the log analytics workspace that was created
     * to centralize log ingestion.
     * 
     * @return the existingLogAnalyticsWorkspaceId value.
     */
    public String existingLogAnalyticsWorkspaceId() {
        return this.existingLogAnalyticsWorkspaceId;
    }

    /**
     * Set the existingLogAnalyticsWorkspaceId property: The resource id of the log analytics workspace that was created
     * to centralize log ingestion.
     * 
     * @param existingLogAnalyticsWorkspaceId the existingLogAnalyticsWorkspaceId value to set.
     * @return the LandingZoneConfigurationResourcePropertiesUpdate object itself.
     */
    public LandingZoneConfigurationResourcePropertiesUpdate
        withExistingLogAnalyticsWorkspaceId(String existingLogAnalyticsWorkspaceId) {
        this.existingLogAnalyticsWorkspaceId = existingLogAnalyticsWorkspaceId;
        return this;
    }

    /**
     * Get the tags property: Array of tag objects in format of {'name':'a tag name', 'value':'a tag value'}.
     * 
     * @return the tags value.
     */
    public List<Tags> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: Array of tag objects in format of {'name':'a tag name', 'value':'a tag value'}.
     * 
     * @param tags the tags value to set.
     * @return the LandingZoneConfigurationResourcePropertiesUpdate object itself.
     */
    public LandingZoneConfigurationResourcePropertiesUpdate withTags(List<Tags> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the firewallCreationOption property: To deploy firewall, choose the Standard/Premium based on the desired
     * SKU. Choose None for no firewall and UseExisting for a pre existing one.
     * 
     * @return the firewallCreationOption value.
     */
    public FirewallCreationOptions firewallCreationOption() {
        return this.firewallCreationOption;
    }

    /**
     * Set the firewallCreationOption property: To deploy firewall, choose the Standard/Premium based on the desired
     * SKU. Choose None for no firewall and UseExisting for a pre existing one.
     * 
     * @param firewallCreationOption the firewallCreationOption value to set.
     * @return the LandingZoneConfigurationResourcePropertiesUpdate object itself.
     */
    public LandingZoneConfigurationResourcePropertiesUpdate
        withFirewallCreationOption(FirewallCreationOptions firewallCreationOption) {
        this.firewallCreationOption = firewallCreationOption;
        return this;
    }

    /**
     * Get the firewallSubnetCidrBlock property: Azure firewall subnet. IPv4 CIDR block.
     * 
     * @return the firewallSubnetCidrBlock value.
     */
    public String firewallSubnetCidrBlock() {
        return this.firewallSubnetCidrBlock;
    }

    /**
     * Set the firewallSubnetCidrBlock property: Azure firewall subnet. IPv4 CIDR block.
     * 
     * @param firewallSubnetCidrBlock the firewallSubnetCidrBlock value to set.
     * @return the LandingZoneConfigurationResourcePropertiesUpdate object itself.
     */
    public LandingZoneConfigurationResourcePropertiesUpdate
        withFirewallSubnetCidrBlock(String firewallSubnetCidrBlock) {
        this.firewallSubnetCidrBlock = firewallSubnetCidrBlock;
        return this;
    }

    /**
     * Get the gatewaySubnetCidrBlock property: Gateway subnet. IPv4 CIDR block.
     * 
     * @return the gatewaySubnetCidrBlock value.
     */
    public String gatewaySubnetCidrBlock() {
        return this.gatewaySubnetCidrBlock;
    }

    /**
     * Set the gatewaySubnetCidrBlock property: Gateway subnet. IPv4 CIDR block.
     * 
     * @param gatewaySubnetCidrBlock the gatewaySubnetCidrBlock value to set.
     * @return the LandingZoneConfigurationResourcePropertiesUpdate object itself.
     */
    public LandingZoneConfigurationResourcePropertiesUpdate withGatewaySubnetCidrBlock(String gatewaySubnetCidrBlock) {
        this.gatewaySubnetCidrBlock = gatewaySubnetCidrBlock;
        return this;
    }

    /**
     * Get the logRetentionInDays property: Set how long logs are retained for, in days. Minimum length is 30 and
     * maximum is 730.
     * 
     * @return the logRetentionInDays value.
     */
    public Long logRetentionInDays() {
        return this.logRetentionInDays;
    }

    /**
     * Set the logRetentionInDays property: Set how long logs are retained for, in days. Minimum length is 30 and
     * maximum is 730.
     * 
     * @param logRetentionInDays the logRetentionInDays value to set.
     * @return the LandingZoneConfigurationResourcePropertiesUpdate object itself.
     */
    public LandingZoneConfigurationResourcePropertiesUpdate withLogRetentionInDays(Long logRetentionInDays) {
        this.logRetentionInDays = logRetentionInDays;
        return this;
    }

    /**
     * Get the hubNetworkCidrBlock property: The address space for the VNET. IPv4 CIDR block.
     * 
     * @return the hubNetworkCidrBlock value.
     */
    public String hubNetworkCidrBlock() {
        return this.hubNetworkCidrBlock;
    }

    /**
     * Set the hubNetworkCidrBlock property: The address space for the VNET. IPv4 CIDR block.
     * 
     * @param hubNetworkCidrBlock the hubNetworkCidrBlock value to set.
     * @return the LandingZoneConfigurationResourcePropertiesUpdate object itself.
     */
    public LandingZoneConfigurationResourcePropertiesUpdate withHubNetworkCidrBlock(String hubNetworkCidrBlock) {
        this.hubNetworkCidrBlock = hubNetworkCidrBlock;
        return this;
    }

    /**
     * Get the azureBastionCreationOption property: To deploy the bastion service, choose Yes, otherwise No. Choose
     * UseExisting for existing bastion service.
     * 
     * @return the azureBastionCreationOption value.
     */
    public ResourceCreationOptions azureBastionCreationOption() {
        return this.azureBastionCreationOption;
    }

    /**
     * Set the azureBastionCreationOption property: To deploy the bastion service, choose Yes, otherwise No. Choose
     * UseExisting for existing bastion service.
     * 
     * @param azureBastionCreationOption the azureBastionCreationOption value to set.
     * @return the LandingZoneConfigurationResourcePropertiesUpdate object itself.
     */
    public LandingZoneConfigurationResourcePropertiesUpdate
        withAzureBastionCreationOption(ResourceCreationOptions azureBastionCreationOption) {
        this.azureBastionCreationOption = azureBastionCreationOption;
        return this;
    }

    /**
     * Get the existingAzureBastionId property: The resource id of azure bastion.
     * 
     * @return the existingAzureBastionId value.
     */
    public String existingAzureBastionId() {
        return this.existingAzureBastionId;
    }

    /**
     * Set the existingAzureBastionId property: The resource id of azure bastion.
     * 
     * @param existingAzureBastionId the existingAzureBastionId value to set.
     * @return the LandingZoneConfigurationResourcePropertiesUpdate object itself.
     */
    public LandingZoneConfigurationResourcePropertiesUpdate withExistingAzureBastionId(String existingAzureBastionId) {
        this.existingAzureBastionId = existingAzureBastionId;
        return this;
    }

    /**
     * Get the azureBastionSubnetCidrBlock property: Azure bastion subnet. IP v4 CIDR block.
     * 
     * @return the azureBastionSubnetCidrBlock value.
     */
    public String azureBastionSubnetCidrBlock() {
        return this.azureBastionSubnetCidrBlock;
    }

    /**
     * Set the azureBastionSubnetCidrBlock property: Azure bastion subnet. IP v4 CIDR block.
     * 
     * @param azureBastionSubnetCidrBlock the azureBastionSubnetCidrBlock value to set.
     * @return the LandingZoneConfigurationResourcePropertiesUpdate object itself.
     */
    public LandingZoneConfigurationResourcePropertiesUpdate
        withAzureBastionSubnetCidrBlock(String azureBastionSubnetCidrBlock) {
        this.azureBastionSubnetCidrBlock = azureBastionSubnetCidrBlock;
        return this;
    }

    /**
     * Get the landingZonesMgChildren property: Landing zone children management group properties.
     * 
     * @return the landingZonesMgChildren value.
     */
    public List<LandingZoneManagementGroupProperties> landingZonesMgChildren() {
        return this.landingZonesMgChildren;
    }

    /**
     * Set the landingZonesMgChildren property: Landing zone children management group properties.
     * 
     * @param landingZonesMgChildren the landingZonesMgChildren value to set.
     * @return the LandingZoneConfigurationResourcePropertiesUpdate object itself.
     */
    public LandingZoneConfigurationResourcePropertiesUpdate
        withLandingZonesMgChildren(List<LandingZoneManagementGroupProperties> landingZonesMgChildren) {
        this.landingZonesMgChildren = landingZonesMgChildren;
        return this;
    }

    /**
     * Get the topLevelMgMetadata property: This will be applied to the root of the landing zone deployment.
     * 
     * @return the topLevelMgMetadata value.
     */
    public ManagementGroupPropertiesUpdate topLevelMgMetadata() {
        return this.topLevelMgMetadata;
    }

    /**
     * Set the topLevelMgMetadata property: This will be applied to the root of the landing zone deployment.
     * 
     * @param topLevelMgMetadata the topLevelMgMetadata value to set.
     * @return the LandingZoneConfigurationResourcePropertiesUpdate object itself.
     */
    public LandingZoneConfigurationResourcePropertiesUpdate
        withTopLevelMgMetadata(ManagementGroupPropertiesUpdate topLevelMgMetadata) {
        this.topLevelMgMetadata = topLevelMgMetadata;
        return this;
    }

    /**
     * Get the landingZonesMgMetadata property: This will be applied to the landing zone management groups.
     * 
     * @return the landingZonesMgMetadata value.
     */
    public ManagementGroupPropertiesUpdate landingZonesMgMetadata() {
        return this.landingZonesMgMetadata;
    }

    /**
     * Set the landingZonesMgMetadata property: This will be applied to the landing zone management groups.
     * 
     * @param landingZonesMgMetadata the landingZonesMgMetadata value to set.
     * @return the LandingZoneConfigurationResourcePropertiesUpdate object itself.
     */
    public LandingZoneConfigurationResourcePropertiesUpdate
        withLandingZonesMgMetadata(ManagementGroupPropertiesUpdate landingZonesMgMetadata) {
        this.landingZonesMgMetadata = landingZonesMgMetadata;
        return this;
    }

    /**
     * Get the platformMgMetadata property: This will be applied to the platform management group.
     * 
     * @return the platformMgMetadata value.
     */
    public ManagementGroupPropertiesUpdate platformMgMetadata() {
        return this.platformMgMetadata;
    }

    /**
     * Set the platformMgMetadata property: This will be applied to the platform management group.
     * 
     * @param platformMgMetadata the platformMgMetadata value to set.
     * @return the LandingZoneConfigurationResourcePropertiesUpdate object itself.
     */
    public LandingZoneConfigurationResourcePropertiesUpdate
        withPlatformMgMetadata(ManagementGroupPropertiesUpdate platformMgMetadata) {
        this.platformMgMetadata = platformMgMetadata;
        return this;
    }

    /**
     * Get the platformManagementMgMetadata property: This will be applied to the management management group under
     * platform.
     * 
     * @return the platformManagementMgMetadata value.
     */
    public ManagementGroupPropertiesUpdate platformManagementMgMetadata() {
        return this.platformManagementMgMetadata;
    }

    /**
     * Set the platformManagementMgMetadata property: This will be applied to the management management group under
     * platform.
     * 
     * @param platformManagementMgMetadata the platformManagementMgMetadata value to set.
     * @return the LandingZoneConfigurationResourcePropertiesUpdate object itself.
     */
    public LandingZoneConfigurationResourcePropertiesUpdate
        withPlatformManagementMgMetadata(ManagementGroupPropertiesUpdate platformManagementMgMetadata) {
        this.platformManagementMgMetadata = platformManagementMgMetadata;
        return this;
    }

    /**
     * Get the platformConnectivityMgMetadata property: This will be applied to the connectivity management group under
     * platform.
     * 
     * @return the platformConnectivityMgMetadata value.
     */
    public ManagementGroupPropertiesUpdate platformConnectivityMgMetadata() {
        return this.platformConnectivityMgMetadata;
    }

    /**
     * Set the platformConnectivityMgMetadata property: This will be applied to the connectivity management group under
     * platform.
     * 
     * @param platformConnectivityMgMetadata the platformConnectivityMgMetadata value to set.
     * @return the LandingZoneConfigurationResourcePropertiesUpdate object itself.
     */
    public LandingZoneConfigurationResourcePropertiesUpdate
        withPlatformConnectivityMgMetadata(ManagementGroupPropertiesUpdate platformConnectivityMgMetadata) {
        this.platformConnectivityMgMetadata = platformConnectivityMgMetadata;
        return this;
    }

    /**
     * Get the platformIdentityMgMetadata property: This will be applied to the identity management group under
     * platform.
     * 
     * @return the platformIdentityMgMetadata value.
     */
    public ManagementGroupPropertiesUpdate platformIdentityMgMetadata() {
        return this.platformIdentityMgMetadata;
    }

    /**
     * Set the platformIdentityMgMetadata property: This will be applied to the identity management group under
     * platform.
     * 
     * @param platformIdentityMgMetadata the platformIdentityMgMetadata value to set.
     * @return the LandingZoneConfigurationResourcePropertiesUpdate object itself.
     */
    public LandingZoneConfigurationResourcePropertiesUpdate
        withPlatformIdentityMgMetadata(ManagementGroupPropertiesUpdate platformIdentityMgMetadata) {
        this.platformIdentityMgMetadata = platformIdentityMgMetadata;
        return this;
    }

    /**
     * Get the decommissionedMgMetadata property: This will be applied to the decommissioned management group.
     * 
     * @return the decommissionedMgMetadata value.
     */
    public DecommissionedManagementGroupPropertiesUpdate decommissionedMgMetadata() {
        return this.decommissionedMgMetadata;
    }

    /**
     * Set the decommissionedMgMetadata property: This will be applied to the decommissioned management group.
     * 
     * @param decommissionedMgMetadata the decommissionedMgMetadata value to set.
     * @return the LandingZoneConfigurationResourcePropertiesUpdate object itself.
     */
    public LandingZoneConfigurationResourcePropertiesUpdate
        withDecommissionedMgMetadata(DecommissionedManagementGroupPropertiesUpdate decommissionedMgMetadata) {
        this.decommissionedMgMetadata = decommissionedMgMetadata;
        return this;
    }

    /**
     * Get the sandboxMgMetadata property: This will be applied to the sandbox management group.
     * 
     * @return the sandboxMgMetadata value.
     */
    public SandboxManagementGroupPropertiesUpdate sandboxMgMetadata() {
        return this.sandboxMgMetadata;
    }

    /**
     * Set the sandboxMgMetadata property: This will be applied to the sandbox management group.
     * 
     * @param sandboxMgMetadata the sandboxMgMetadata value to set.
     * @return the LandingZoneConfigurationResourcePropertiesUpdate object itself.
     */
    public LandingZoneConfigurationResourcePropertiesUpdate
        withSandboxMgMetadata(SandboxManagementGroupPropertiesUpdate sandboxMgMetadata) {
        this.sandboxMgMetadata = sandboxMgMetadata;
        return this;
    }

    /**
     * Get the managedIdentity property: The managed identity to be tied to this landing zone configuration.
     * 
     * @return the managedIdentity value.
     */
    public ManagedIdentityPropertiesUpdate managedIdentity() {
        return this.managedIdentity;
    }

    /**
     * Set the managedIdentity property: The managed identity to be tied to this landing zone configuration.
     * 
     * @param managedIdentity the managedIdentity value to set.
     * @return the LandingZoneConfigurationResourcePropertiesUpdate object itself.
     */
    public LandingZoneConfigurationResourcePropertiesUpdate
        withManagedIdentity(ManagedIdentityPropertiesUpdate managedIdentity) {
        this.managedIdentity = managedIdentity;
        return this;
    }

    /**
     * Get the platformMgChildren property: Platform children management group properties.
     * 
     * @return the platformMgChildren value.
     */
    public List<PlatformManagementGroupProperties> platformMgChildren() {
        return this.platformMgChildren;
    }

    /**
     * Set the platformMgChildren property: Platform children management group properties.
     * 
     * @param platformMgChildren the platformMgChildren value to set.
     * @return the LandingZoneConfigurationResourcePropertiesUpdate object itself.
     */
    public LandingZoneConfigurationResourcePropertiesUpdate
        withPlatformMgChildren(List<PlatformManagementGroupProperties> platformMgChildren) {
        this.platformMgChildren = platformMgChildren;
        return this;
    }

    /**
     * Get the namingConventionFormula property: The naming convention that's used by default for all resource types for
     * this landing zone configuration.
     * 
     * @return the namingConventionFormula value.
     */
    public String namingConventionFormula() {
        return this.namingConventionFormula;
    }

    /**
     * Set the namingConventionFormula property: The naming convention that's used by default for all resource types for
     * this landing zone configuration.
     * 
     * @param namingConventionFormula the namingConventionFormula value to set.
     * @return the LandingZoneConfigurationResourcePropertiesUpdate object itself.
     */
    public LandingZoneConfigurationResourcePropertiesUpdate
        withNamingConventionFormula(String namingConventionFormula) {
        this.namingConventionFormula = namingConventionFormula;
        return this;
    }

    /**
     * Get the customNamingConvention property: The customized naming convention for one or more resource types in this
     * landing zone configuration.
     * 
     * @return the customNamingConvention value.
     */
    public List<CustomNamingConvention> customNamingConvention() {
        return this.customNamingConvention;
    }

    /**
     * Set the customNamingConvention property: The customized naming convention for one or more resource types in this
     * landing zone configuration.
     * 
     * @param customNamingConvention the customNamingConvention value to set.
     * @return the LandingZoneConfigurationResourcePropertiesUpdate object itself.
     */
    public LandingZoneConfigurationResourcePropertiesUpdate
        withCustomNamingConvention(List<CustomNamingConvention> customNamingConvention) {
        this.customNamingConvention = customNamingConvention;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (tags() != null) {
            tags().forEach(e -> e.validate());
        }
        if (landingZonesMgChildren() != null) {
            landingZonesMgChildren().forEach(e -> e.validate());
        }
        if (topLevelMgMetadata() != null) {
            topLevelMgMetadata().validate();
        }
        if (landingZonesMgMetadata() != null) {
            landingZonesMgMetadata().validate();
        }
        if (platformMgMetadata() != null) {
            platformMgMetadata().validate();
        }
        if (platformManagementMgMetadata() != null) {
            platformManagementMgMetadata().validate();
        }
        if (platformConnectivityMgMetadata() != null) {
            platformConnectivityMgMetadata().validate();
        }
        if (platformIdentityMgMetadata() != null) {
            platformIdentityMgMetadata().validate();
        }
        if (decommissionedMgMetadata() != null) {
            decommissionedMgMetadata().validate();
        }
        if (sandboxMgMetadata() != null) {
            sandboxMgMetadata().validate();
        }
        if (managedIdentity() != null) {
            managedIdentity().validate();
        }
        if (platformMgChildren() != null) {
            platformMgChildren().forEach(e -> e.validate());
        }
        if (customNamingConvention() != null) {
            customNamingConvention().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("ddosProtectionCreationOption",
            this.ddosProtectionCreationOption == null ? null : this.ddosProtectionCreationOption.toString());
        jsonWriter.writeStringField("existingDdosProtectionId", this.existingDdosProtectionId);
        jsonWriter.writeStringField("logAnalyticsWorkspaceCreationOption",
            this.logAnalyticsWorkspaceCreationOption == null
                ? null
                : this.logAnalyticsWorkspaceCreationOption.toString());
        jsonWriter.writeStringField("existingLogAnalyticsWorkspaceId", this.existingLogAnalyticsWorkspaceId);
        jsonWriter.writeArrayField("tags", this.tags, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("firewallCreationOption",
            this.firewallCreationOption == null ? null : this.firewallCreationOption.toString());
        jsonWriter.writeStringField("firewallSubnetCidrBlock", this.firewallSubnetCidrBlock);
        jsonWriter.writeStringField("gatewaySubnetCidrBlock", this.gatewaySubnetCidrBlock);
        jsonWriter.writeNumberField("logRetentionInDays", this.logRetentionInDays);
        jsonWriter.writeStringField("hubNetworkCidrBlock", this.hubNetworkCidrBlock);
        jsonWriter.writeStringField("azureBastionCreationOption",
            this.azureBastionCreationOption == null ? null : this.azureBastionCreationOption.toString());
        jsonWriter.writeStringField("existingAzureBastionId", this.existingAzureBastionId);
        jsonWriter.writeStringField("azureBastionSubnetCidrBlock", this.azureBastionSubnetCidrBlock);
        jsonWriter.writeArrayField("landingZonesMgChildren", this.landingZonesMgChildren,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("topLevelMgMetadata", this.topLevelMgMetadata);
        jsonWriter.writeJsonField("landingZonesMgMetadata", this.landingZonesMgMetadata);
        jsonWriter.writeJsonField("platformMgMetadata", this.platformMgMetadata);
        jsonWriter.writeJsonField("platformManagementMgMetadata", this.platformManagementMgMetadata);
        jsonWriter.writeJsonField("platformConnectivityMgMetadata", this.platformConnectivityMgMetadata);
        jsonWriter.writeJsonField("platformIdentityMgMetadata", this.platformIdentityMgMetadata);
        jsonWriter.writeJsonField("decommissionedMgMetadata", this.decommissionedMgMetadata);
        jsonWriter.writeJsonField("sandboxMgMetadata", this.sandboxMgMetadata);
        jsonWriter.writeJsonField("managedIdentity", this.managedIdentity);
        jsonWriter.writeArrayField("platformMgChildren", this.platformMgChildren,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("namingConventionFormula", this.namingConventionFormula);
        jsonWriter.writeArrayField("customNamingConvention", this.customNamingConvention,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LandingZoneConfigurationResourcePropertiesUpdate from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LandingZoneConfigurationResourcePropertiesUpdate if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the LandingZoneConfigurationResourcePropertiesUpdate.
     */
    public static LandingZoneConfigurationResourcePropertiesUpdate fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LandingZoneConfigurationResourcePropertiesUpdate deserializedLandingZoneConfigurationResourcePropertiesUpdate
                = new LandingZoneConfigurationResourcePropertiesUpdate();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("ddosProtectionCreationOption".equals(fieldName)) {
                    deserializedLandingZoneConfigurationResourcePropertiesUpdate.ddosProtectionCreationOption
                        = ResourceCreationOptions.fromString(reader.getString());
                } else if ("existingDdosProtectionId".equals(fieldName)) {
                    deserializedLandingZoneConfigurationResourcePropertiesUpdate.existingDdosProtectionId
                        = reader.getString();
                } else if ("logAnalyticsWorkspaceCreationOption".equals(fieldName)) {
                    deserializedLandingZoneConfigurationResourcePropertiesUpdate.logAnalyticsWorkspaceCreationOption
                        = ResourceCreationOptions.fromString(reader.getString());
                } else if ("existingLogAnalyticsWorkspaceId".equals(fieldName)) {
                    deserializedLandingZoneConfigurationResourcePropertiesUpdate.existingLogAnalyticsWorkspaceId
                        = reader.getString();
                } else if ("tags".equals(fieldName)) {
                    List<Tags> tags = reader.readArray(reader1 -> Tags.fromJson(reader1));
                    deserializedLandingZoneConfigurationResourcePropertiesUpdate.tags = tags;
                } else if ("firewallCreationOption".equals(fieldName)) {
                    deserializedLandingZoneConfigurationResourcePropertiesUpdate.firewallCreationOption
                        = FirewallCreationOptions.fromString(reader.getString());
                } else if ("firewallSubnetCidrBlock".equals(fieldName)) {
                    deserializedLandingZoneConfigurationResourcePropertiesUpdate.firewallSubnetCidrBlock
                        = reader.getString();
                } else if ("gatewaySubnetCidrBlock".equals(fieldName)) {
                    deserializedLandingZoneConfigurationResourcePropertiesUpdate.gatewaySubnetCidrBlock
                        = reader.getString();
                } else if ("logRetentionInDays".equals(fieldName)) {
                    deserializedLandingZoneConfigurationResourcePropertiesUpdate.logRetentionInDays
                        = reader.getNullable(JsonReader::getLong);
                } else if ("hubNetworkCidrBlock".equals(fieldName)) {
                    deserializedLandingZoneConfigurationResourcePropertiesUpdate.hubNetworkCidrBlock
                        = reader.getString();
                } else if ("azureBastionCreationOption".equals(fieldName)) {
                    deserializedLandingZoneConfigurationResourcePropertiesUpdate.azureBastionCreationOption
                        = ResourceCreationOptions.fromString(reader.getString());
                } else if ("existingAzureBastionId".equals(fieldName)) {
                    deserializedLandingZoneConfigurationResourcePropertiesUpdate.existingAzureBastionId
                        = reader.getString();
                } else if ("azureBastionSubnetCidrBlock".equals(fieldName)) {
                    deserializedLandingZoneConfigurationResourcePropertiesUpdate.azureBastionSubnetCidrBlock
                        = reader.getString();
                } else if ("landingZonesMgChildren".equals(fieldName)) {
                    List<LandingZoneManagementGroupProperties> landingZonesMgChildren
                        = reader.readArray(reader1 -> LandingZoneManagementGroupProperties.fromJson(reader1));
                    deserializedLandingZoneConfigurationResourcePropertiesUpdate.landingZonesMgChildren
                        = landingZonesMgChildren;
                } else if ("topLevelMgMetadata".equals(fieldName)) {
                    deserializedLandingZoneConfigurationResourcePropertiesUpdate.topLevelMgMetadata
                        = ManagementGroupPropertiesUpdate.fromJson(reader);
                } else if ("landingZonesMgMetadata".equals(fieldName)) {
                    deserializedLandingZoneConfigurationResourcePropertiesUpdate.landingZonesMgMetadata
                        = ManagementGroupPropertiesUpdate.fromJson(reader);
                } else if ("platformMgMetadata".equals(fieldName)) {
                    deserializedLandingZoneConfigurationResourcePropertiesUpdate.platformMgMetadata
                        = ManagementGroupPropertiesUpdate.fromJson(reader);
                } else if ("platformManagementMgMetadata".equals(fieldName)) {
                    deserializedLandingZoneConfigurationResourcePropertiesUpdate.platformManagementMgMetadata
                        = ManagementGroupPropertiesUpdate.fromJson(reader);
                } else if ("platformConnectivityMgMetadata".equals(fieldName)) {
                    deserializedLandingZoneConfigurationResourcePropertiesUpdate.platformConnectivityMgMetadata
                        = ManagementGroupPropertiesUpdate.fromJson(reader);
                } else if ("platformIdentityMgMetadata".equals(fieldName)) {
                    deserializedLandingZoneConfigurationResourcePropertiesUpdate.platformIdentityMgMetadata
                        = ManagementGroupPropertiesUpdate.fromJson(reader);
                } else if ("decommissionedMgMetadata".equals(fieldName)) {
                    deserializedLandingZoneConfigurationResourcePropertiesUpdate.decommissionedMgMetadata
                        = DecommissionedManagementGroupPropertiesUpdate.fromJson(reader);
                } else if ("sandboxMgMetadata".equals(fieldName)) {
                    deserializedLandingZoneConfigurationResourcePropertiesUpdate.sandboxMgMetadata
                        = SandboxManagementGroupPropertiesUpdate.fromJson(reader);
                } else if ("managedIdentity".equals(fieldName)) {
                    deserializedLandingZoneConfigurationResourcePropertiesUpdate.managedIdentity
                        = ManagedIdentityPropertiesUpdate.fromJson(reader);
                } else if ("platformMgChildren".equals(fieldName)) {
                    List<PlatformManagementGroupProperties> platformMgChildren
                        = reader.readArray(reader1 -> PlatformManagementGroupProperties.fromJson(reader1));
                    deserializedLandingZoneConfigurationResourcePropertiesUpdate.platformMgChildren
                        = platformMgChildren;
                } else if ("namingConventionFormula".equals(fieldName)) {
                    deserializedLandingZoneConfigurationResourcePropertiesUpdate.namingConventionFormula
                        = reader.getString();
                } else if ("customNamingConvention".equals(fieldName)) {
                    List<CustomNamingConvention> customNamingConvention
                        = reader.readArray(reader1 -> CustomNamingConvention.fromJson(reader1));
                    deserializedLandingZoneConfigurationResourcePropertiesUpdate.customNamingConvention
                        = customNamingConvention;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLandingZoneConfigurationResourcePropertiesUpdate;
        });
    }
}
