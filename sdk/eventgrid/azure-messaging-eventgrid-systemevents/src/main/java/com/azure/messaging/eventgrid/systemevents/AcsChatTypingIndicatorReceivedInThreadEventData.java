// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.messaging.eventgrid.systemevents;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Schema of the Data property of an EventGridEvent for a Microsoft.Communication.ChatTypingIndicatorReceivedInThread
 * event.
 */
@Immutable
public final class AcsChatTypingIndicatorReceivedInThreadEventData extends AcsChatEventInThreadBaseProperties {
    /*
     * The communication identifier of the sender
     */
    @Generated
    private final CommunicationIdentifierModel senderCommunicationIdentifier;

    /*
     * The display name of the sender
     */
    @Generated
    private String senderDisplayName;

    /*
     * The transaction id will be used as co-relation vector
     */
    @Generated
    private String transactionId;

    /**
     * Creates an instance of AcsChatTypingIndicatorReceivedInThreadEventData class.
     * 
     * @param threadId the threadId value to set.
     * @param senderCommunicationIdentifier the senderCommunicationIdentifier value to set.
     */
    @Generated
    private AcsChatTypingIndicatorReceivedInThreadEventData(String threadId,
        CommunicationIdentifierModel senderCommunicationIdentifier) {
        super(threadId);
        this.senderCommunicationIdentifier = senderCommunicationIdentifier;
    }

    /**
     * Get the senderCommunicationIdentifier property: The communication identifier of the sender.
     * 
     * @return the senderCommunicationIdentifier value.
     */
    @Generated
    public CommunicationIdentifierModel getSenderCommunicationIdentifier() {
        return this.senderCommunicationIdentifier;
    }

    /**
     * Get the senderDisplayName property: The display name of the sender.
     * 
     * @return the senderDisplayName value.
     */
    @Generated
    public String getSenderDisplayName() {
        return this.senderDisplayName;
    }

    /**
     * Get the transactionId property: The transaction id will be used as co-relation vector.
     * 
     * @return the transactionId value.
     */
    @Generated
    @Override
    public String getTransactionId() {
        return this.transactionId;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("threadId", getThreadId());
        jsonWriter.writeStringField("transactionId", getTransactionId());
        jsonWriter.writeJsonField("senderCommunicationIdentifier", this.senderCommunicationIdentifier);
        jsonWriter.writeStringField("senderDisplayName", this.senderDisplayName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AcsChatTypingIndicatorReceivedInThreadEventData from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AcsChatTypingIndicatorReceivedInThreadEventData if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AcsChatTypingIndicatorReceivedInThreadEventData.
     */
    @Generated
    public static AcsChatTypingIndicatorReceivedInThreadEventData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String threadId = null;
            String transactionId = null;
            CommunicationIdentifierModel senderCommunicationIdentifier = null;
            String senderDisplayName = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("threadId".equals(fieldName)) {
                    threadId = reader.getString();
                } else if ("transactionId".equals(fieldName)) {
                    transactionId = reader.getString();
                } else if ("senderCommunicationIdentifier".equals(fieldName)) {
                    senderCommunicationIdentifier = CommunicationIdentifierModel.fromJson(reader);
                } else if ("senderDisplayName".equals(fieldName)) {
                    senderDisplayName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            AcsChatTypingIndicatorReceivedInThreadEventData deserializedAcsChatTypingIndicatorReceivedInThreadEventData
                = new AcsChatTypingIndicatorReceivedInThreadEventData(threadId, senderCommunicationIdentifier);
            deserializedAcsChatTypingIndicatorReceivedInThreadEventData.transactionId = transactionId;
            deserializedAcsChatTypingIndicatorReceivedInThreadEventData.senderDisplayName = senderDisplayName;

            return deserializedAcsChatTypingIndicatorReceivedInThreadEventData;
        });
    }
}
