// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mixedreality.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The ObjectAnchorsAccountIdentity model.
 */
@Fluent
public final class ObjectAnchorsAccountIdentity extends Identity {
    /*
     * The tenant ID of resource.
     */
    private String tenantId;

    /*
     * The principal ID of resource identity.
     */
    private String principalId;

    /**
     * Creates an instance of ObjectAnchorsAccountIdentity class.
     */
    public ObjectAnchorsAccountIdentity() {
    }

    /**
     * Get the tenantId property: The tenant ID of resource.
     * 
     * @return the tenantId value.
     */
    @Override
    public String tenantId() {
        return this.tenantId;
    }

    /**
     * Get the principalId property: The principal ID of resource identity.
     * 
     * @return the principalId value.
     */
    @Override
    public String principalId() {
        return this.principalId;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ObjectAnchorsAccountIdentity withType(ResourceIdentityType type) {
        super.withType(type);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", type() == null ? null : type().toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ObjectAnchorsAccountIdentity from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ObjectAnchorsAccountIdentity if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ObjectAnchorsAccountIdentity.
     */
    public static ObjectAnchorsAccountIdentity fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ObjectAnchorsAccountIdentity deserializedObjectAnchorsAccountIdentity = new ObjectAnchorsAccountIdentity();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("principalId".equals(fieldName)) {
                    deserializedObjectAnchorsAccountIdentity.principalId = reader.getString();
                } else if ("tenantId".equals(fieldName)) {
                    deserializedObjectAnchorsAccountIdentity.tenantId = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedObjectAnchorsAccountIdentity
                        .withType(ResourceIdentityType.fromString(reader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedObjectAnchorsAccountIdentity;
        });
    }
}
