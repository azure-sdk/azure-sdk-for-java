// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resourcesmicrosoftresourcesdeploymentscripts.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.SystemData;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.resourcesmicrosoftresourcesdeploymentscripts.models.AzureCliScript;
import com.azure.resourcemanager.resourcesmicrosoftresourcesdeploymentscripts.models.AzurePowerShellScript;
import com.azure.resourcemanager.resourcesmicrosoftresourcesdeploymentscripts.models.AzureResourceBase;
import com.azure.resourcemanager.resourcesmicrosoftresourcesdeploymentscripts.models.ManagedServiceIdentity;
import com.azure.resourcemanager.resourcesmicrosoftresourcesdeploymentscripts.models.ScriptType;
import java.io.IOException;
import java.util.Map;

/**
 * Deployment script object.
 */
@Fluent
public class DeploymentScriptInner extends AzureResourceBase {
    /*
     * Type of the script.
     */
    private ScriptType kind = ScriptType.fromString("DeploymentScript");

    /*
     * Optional property. Managed identity to be used for this deployment script. Currently, only user-assigned MSI is
     * supported.
     */
    private ManagedServiceIdentity identity;

    /*
     * The location of the ACI and the storage account for the deployment script.
     */
    private String location;

    /*
     * Resource tags.
     */
    private Map<String, String> tags;

    /*
     * The system metadata related to this resource.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of DeploymentScriptInner class.
     */
    public DeploymentScriptInner() {
    }

    /**
     * Get the kind property: Type of the script.
     * 
     * @return the kind value.
     */
    public ScriptType kind() {
        return this.kind;
    }

    /**
     * Get the identity property: Optional property. Managed identity to be used for this deployment script. Currently,
     * only user-assigned MSI is supported.
     * 
     * @return the identity value.
     */
    public ManagedServiceIdentity identity() {
        return this.identity;
    }

    /**
     * Set the identity property: Optional property. Managed identity to be used for this deployment script. Currently,
     * only user-assigned MSI is supported.
     * 
     * @param identity the identity value to set.
     * @return the DeploymentScriptInner object itself.
     */
    public DeploymentScriptInner withIdentity(ManagedServiceIdentity identity) {
        this.identity = identity;
        return this;
    }

    /**
     * Get the location property: The location of the ACI and the storage account for the deployment script.
     * 
     * @return the location value.
     */
    public String location() {
        return this.location;
    }

    /**
     * Set the location property: The location of the ACI and the storage account for the deployment script.
     * 
     * @param location the location value to set.
     * @return the DeploymentScriptInner object itself.
     */
    public DeploymentScriptInner withLocation(String location) {
        this.location = location;
        return this;
    }

    /**
     * Get the tags property: Resource tags.
     * 
     * @return the tags value.
     */
    public Map<String, String> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: Resource tags.
     * 
     * @param tags the tags value to set.
     * @return the DeploymentScriptInner object itself.
     */
    public DeploymentScriptInner withTags(Map<String, String> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the systemData property: The system metadata related to this resource.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Set the systemData property: The system metadata related to this resource.
     * 
     * @param systemData the systemData value to set.
     * @return the DeploymentScriptInner object itself.
     */
    DeploymentScriptInner withSystemData(SystemData systemData) {
        this.systemData = systemData;
        return this;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (identity() != null) {
            identity().validate();
        }
        if (location() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property location in model DeploymentScriptInner"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DeploymentScriptInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("location", this.location);
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        jsonWriter.writeJsonField("identity", this.identity);
        jsonWriter.writeMapField("tags", this.tags, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DeploymentScriptInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DeploymentScriptInner if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DeploymentScriptInner.
     */
    public static DeploymentScriptInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("kind".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("AzurePowerShell".equals(discriminatorValue)) {
                    return AzurePowerShellScript.fromJson(readerToUse.reset());
                } else if ("AzureCLI".equals(discriminatorValue)) {
                    return AzureCliScript.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    static DeploymentScriptInner fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DeploymentScriptInner deserializedDeploymentScriptInner = new DeploymentScriptInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedDeploymentScriptInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedDeploymentScriptInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedDeploymentScriptInner.type = reader.getString();
                } else if ("location".equals(fieldName)) {
                    deserializedDeploymentScriptInner.location = reader.getString();
                } else if ("kind".equals(fieldName)) {
                    deserializedDeploymentScriptInner.kind = ScriptType.fromString(reader.getString());
                } else if ("identity".equals(fieldName)) {
                    deserializedDeploymentScriptInner.identity = ManagedServiceIdentity.fromJson(reader);
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedDeploymentScriptInner.tags = tags;
                } else if ("systemData".equals(fieldName)) {
                    deserializedDeploymentScriptInner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDeploymentScriptInner;
        });
    }
}
