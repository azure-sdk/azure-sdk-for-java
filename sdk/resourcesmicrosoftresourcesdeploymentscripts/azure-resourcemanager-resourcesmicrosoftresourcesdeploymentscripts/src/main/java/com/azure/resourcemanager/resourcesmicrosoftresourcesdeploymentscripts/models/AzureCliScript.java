// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resourcesmicrosoftresourcesdeploymentscripts.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.SystemData;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.resourcesmicrosoftresourcesdeploymentscripts.fluent.models.AzureCliScriptProperties;
import com.azure.resourcemanager.resourcesmicrosoftresourcesdeploymentscripts.fluent.models.DeploymentScriptInner;
import java.io.IOException;
import java.time.Duration;
import java.util.List;
import java.util.Map;

/**
 * Object model for the Azure CLI script.
 */
@Fluent
public final class AzureCliScript extends DeploymentScriptInner {
    /*
     * Type of the script.
     */
    private ScriptType kind = ScriptType.AZURE_CLI;

    /*
     * Properties of the Azure CLI script object.
     */
    private AzureCliScriptProperties innerProperties = new AzureCliScriptProperties();

    /*
     * The system metadata related to this resource.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of AzureCliScript class.
     */
    public AzureCliScript() {
    }

    /**
     * Get the kind property: Type of the script.
     * 
     * @return the kind value.
     */
    @Override
    public ScriptType kind() {
        return this.kind;
    }

    /**
     * Get the innerProperties property: Properties of the Azure CLI script object.
     * 
     * @return the innerProperties value.
     */
    private AzureCliScriptProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: The system metadata related to this resource.
     * 
     * @return the systemData value.
     */
    @Override
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureCliScript withIdentity(ManagedServiceIdentity identity) {
        super.withIdentity(identity);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureCliScript withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureCliScript withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the azCliVersion property: Azure CLI module version to be used.
     * 
     * @return the azCliVersion value.
     */
    public String azCliVersion() {
        return this.innerProperties() == null ? null : this.innerProperties().azCliVersion();
    }

    /**
     * Set the azCliVersion property: Azure CLI module version to be used.
     * 
     * @param azCliVersion the azCliVersion value to set.
     * @return the AzureCliScript object itself.
     */
    public AzureCliScript withAzCliVersion(String azCliVersion) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AzureCliScriptProperties();
        }
        this.innerProperties().withAzCliVersion(azCliVersion);
        return this;
    }

    /**
     * Get the primaryScriptUri property: Uri for the script. This is the entry point for the external script.
     * 
     * @return the primaryScriptUri value.
     */
    public String primaryScriptUri() {
        return this.innerProperties() == null ? null : this.innerProperties().primaryScriptUri();
    }

    /**
     * Set the primaryScriptUri property: Uri for the script. This is the entry point for the external script.
     * 
     * @param primaryScriptUri the primaryScriptUri value to set.
     * @return the AzureCliScript object itself.
     */
    public AzureCliScript withPrimaryScriptUri(String primaryScriptUri) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AzureCliScriptProperties();
        }
        this.innerProperties().withPrimaryScriptUri(primaryScriptUri);
        return this;
    }

    /**
     * Get the supportingScriptUris property: Supporting files for the external script.
     * 
     * @return the supportingScriptUris value.
     */
    public List<String> supportingScriptUris() {
        return this.innerProperties() == null ? null : this.innerProperties().supportingScriptUris();
    }

    /**
     * Set the supportingScriptUris property: Supporting files for the external script.
     * 
     * @param supportingScriptUris the supportingScriptUris value to set.
     * @return the AzureCliScript object itself.
     */
    public AzureCliScript withSupportingScriptUris(List<String> supportingScriptUris) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AzureCliScriptProperties();
        }
        this.innerProperties().withSupportingScriptUris(supportingScriptUris);
        return this;
    }

    /**
     * Get the scriptContent property: Script body.
     * 
     * @return the scriptContent value.
     */
    public String scriptContent() {
        return this.innerProperties() == null ? null : this.innerProperties().scriptContent();
    }

    /**
     * Set the scriptContent property: Script body.
     * 
     * @param scriptContent the scriptContent value to set.
     * @return the AzureCliScript object itself.
     */
    public AzureCliScript withScriptContent(String scriptContent) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AzureCliScriptProperties();
        }
        this.innerProperties().withScriptContent(scriptContent);
        return this;
    }

    /**
     * Get the arguments property: Command line arguments to pass to the script. Arguments are separated by spaces. ex:
     * -Name blue* -Location 'West US 2'.
     * 
     * @return the arguments value.
     */
    public String arguments() {
        return this.innerProperties() == null ? null : this.innerProperties().arguments();
    }

    /**
     * Set the arguments property: Command line arguments to pass to the script. Arguments are separated by spaces. ex:
     * -Name blue* -Location 'West US 2'.
     * 
     * @param arguments the arguments value to set.
     * @return the AzureCliScript object itself.
     */
    public AzureCliScript withArguments(String arguments) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AzureCliScriptProperties();
        }
        this.innerProperties().withArguments(arguments);
        return this;
    }

    /**
     * Get the environmentVariables property: The environment variables to pass over to the script.
     * 
     * @return the environmentVariables value.
     */
    public List<EnvironmentVariable> environmentVariables() {
        return this.innerProperties() == null ? null : this.innerProperties().environmentVariables();
    }

    /**
     * Set the environmentVariables property: The environment variables to pass over to the script.
     * 
     * @param environmentVariables the environmentVariables value to set.
     * @return the AzureCliScript object itself.
     */
    public AzureCliScript withEnvironmentVariables(List<EnvironmentVariable> environmentVariables) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AzureCliScriptProperties();
        }
        this.innerProperties().withEnvironmentVariables(environmentVariables);
        return this;
    }

    /**
     * Get the forceUpdateTag property: Gets or sets how the deployment script should be forced to execute even if the
     * script resource has not changed. Can be current time stamp or a GUID.
     * 
     * @return the forceUpdateTag value.
     */
    public String forceUpdateTag() {
        return this.innerProperties() == null ? null : this.innerProperties().forceUpdateTag();
    }

    /**
     * Set the forceUpdateTag property: Gets or sets how the deployment script should be forced to execute even if the
     * script resource has not changed. Can be current time stamp or a GUID.
     * 
     * @param forceUpdateTag the forceUpdateTag value to set.
     * @return the AzureCliScript object itself.
     */
    public AzureCliScript withForceUpdateTag(String forceUpdateTag) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AzureCliScriptProperties();
        }
        this.innerProperties().withForceUpdateTag(forceUpdateTag);
        return this;
    }

    /**
     * Get the retentionInterval property: Interval for which the service retains the script resource after it reaches a
     * terminal state. Resource will be deleted when this duration expires. Duration is based on ISO 8601 pattern (for
     * example P1D means one day).
     * 
     * @return the retentionInterval value.
     */
    public Duration retentionInterval() {
        return this.innerProperties() == null ? null : this.innerProperties().retentionInterval();
    }

    /**
     * Set the retentionInterval property: Interval for which the service retains the script resource after it reaches a
     * terminal state. Resource will be deleted when this duration expires. Duration is based on ISO 8601 pattern (for
     * example P1D means one day).
     * 
     * @param retentionInterval the retentionInterval value to set.
     * @return the AzureCliScript object itself.
     */
    public AzureCliScript withRetentionInterval(Duration retentionInterval) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AzureCliScriptProperties();
        }
        this.innerProperties().withRetentionInterval(retentionInterval);
        return this;
    }

    /**
     * Get the timeout property: Maximum allowed script execution time specified in ISO 8601 format. Default value is
     * P1D.
     * 
     * @return the timeout value.
     */
    public Duration timeout() {
        return this.innerProperties() == null ? null : this.innerProperties().timeout();
    }

    /**
     * Set the timeout property: Maximum allowed script execution time specified in ISO 8601 format. Default value is
     * P1D.
     * 
     * @param timeout the timeout value to set.
     * @return the AzureCliScript object itself.
     */
    public AzureCliScript withTimeout(Duration timeout) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AzureCliScriptProperties();
        }
        this.innerProperties().withTimeout(timeout);
        return this;
    }

    /**
     * Get the containerSettings property: Container settings.
     * 
     * @return the containerSettings value.
     */
    public ContainerConfiguration containerSettings() {
        return this.innerProperties() == null ? null : this.innerProperties().containerSettings();
    }

    /**
     * Set the containerSettings property: Container settings.
     * 
     * @param containerSettings the containerSettings value to set.
     * @return the AzureCliScript object itself.
     */
    public AzureCliScript withContainerSettings(ContainerConfiguration containerSettings) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AzureCliScriptProperties();
        }
        this.innerProperties().withContainerSettings(containerSettings);
        return this;
    }

    /**
     * Get the storageAccountSettings property: Storage Account settings.
     * 
     * @return the storageAccountSettings value.
     */
    public StorageAccountConfiguration storageAccountSettings() {
        return this.innerProperties() == null ? null : this.innerProperties().storageAccountSettings();
    }

    /**
     * Set the storageAccountSettings property: Storage Account settings.
     * 
     * @param storageAccountSettings the storageAccountSettings value to set.
     * @return the AzureCliScript object itself.
     */
    public AzureCliScript withStorageAccountSettings(StorageAccountConfiguration storageAccountSettings) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AzureCliScriptProperties();
        }
        this.innerProperties().withStorageAccountSettings(storageAccountSettings);
        return this;
    }

    /**
     * Get the cleanupPreference property: The clean up preference when the script execution gets in a terminal state.
     * Default setting is 'Always'.
     * 
     * @return the cleanupPreference value.
     */
    public CleanupOptions cleanupPreference() {
        return this.innerProperties() == null ? null : this.innerProperties().cleanupPreference();
    }

    /**
     * Set the cleanupPreference property: The clean up preference when the script execution gets in a terminal state.
     * Default setting is 'Always'.
     * 
     * @param cleanupPreference the cleanupPreference value to set.
     * @return the AzureCliScript object itself.
     */
    public AzureCliScript withCleanupPreference(CleanupOptions cleanupPreference) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AzureCliScriptProperties();
        }
        this.innerProperties().withCleanupPreference(cleanupPreference);
        return this;
    }

    /**
     * Get the provisioningState property: State of the script execution. This only appears in the response.
     * 
     * @return the provisioningState value.
     */
    public ScriptProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the status property: Contains the results of script execution.
     * 
     * @return the status value.
     */
    public ScriptStatus status() {
        return this.innerProperties() == null ? null : this.innerProperties().status();
    }

    /**
     * Get the outputs property: List of script outputs.
     * 
     * @return the outputs value.
     */
    public Map<String, Object> outputs() {
        return this.innerProperties() == null ? null : this.innerProperties().outputs();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (innerProperties() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property innerProperties in model AzureCliScript"));
        } else {
            innerProperties().validate();
        }
        if (identity() != null) {
            identity().validate();
        }
        if (location() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property location in model AzureCliScript"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(AzureCliScript.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("location", location());
        jsonWriter.writeJsonField("identity", identity());
        jsonWriter.writeMapField("tags", tags(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("properties", this.innerProperties);
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AzureCliScript from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AzureCliScript if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AzureCliScript.
     */
    public static AzureCliScript fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AzureCliScript deserializedAzureCliScript = new AzureCliScript();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedAzureCliScript.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedAzureCliScript.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedAzureCliScript.type = reader.getString();
                } else if ("location".equals(fieldName)) {
                    deserializedAzureCliScript.withLocation(reader.getString());
                } else if ("identity".equals(fieldName)) {
                    deserializedAzureCliScript.withIdentity(ManagedServiceIdentity.fromJson(reader));
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedAzureCliScript.withTags(tags);
                } else if ("systemData".equals(fieldName)) {
                    deserializedAzureCliScript.systemData = SystemData.fromJson(reader);
                } else if ("properties".equals(fieldName)) {
                    deserializedAzureCliScript.innerProperties = AzureCliScriptProperties.fromJson(reader);
                } else if ("kind".equals(fieldName)) {
                    deserializedAzureCliScript.kind = ScriptType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAzureCliScript;
        });
    }
}
