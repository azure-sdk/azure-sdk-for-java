// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resourcesmicrosoftresourcesdeploymentscripts.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.exception.ManagementError;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Generic object modeling results of script execution.
 */
@Fluent
public final class ScriptStatus implements JsonSerializable<ScriptStatus> {
    /*
     * ACI resource Id.
     */
    private String containerInstanceId;

    /*
     * Storage account resource Id.
     */
    private String storageAccountId;

    /*
     * Start time of the script execution.
     */
    private OffsetDateTime startTime;

    /*
     * End time of the script execution.
     */
    private OffsetDateTime endTime;

    /*
     * Time the deployment script resource will expire.
     */
    private OffsetDateTime expirationTime;

    /*
     * Error that is relayed from the script execution.
     */
    private ManagementError error;

    /**
     * Creates an instance of ScriptStatus class.
     */
    public ScriptStatus() {
    }

    /**
     * Get the containerInstanceId property: ACI resource Id.
     * 
     * @return the containerInstanceId value.
     */
    public String containerInstanceId() {
        return this.containerInstanceId;
    }

    /**
     * Get the storageAccountId property: Storage account resource Id.
     * 
     * @return the storageAccountId value.
     */
    public String storageAccountId() {
        return this.storageAccountId;
    }

    /**
     * Get the startTime property: Start time of the script execution.
     * 
     * @return the startTime value.
     */
    public OffsetDateTime startTime() {
        return this.startTime;
    }

    /**
     * Get the endTime property: End time of the script execution.
     * 
     * @return the endTime value.
     */
    public OffsetDateTime endTime() {
        return this.endTime;
    }

    /**
     * Get the expirationTime property: Time the deployment script resource will expire.
     * 
     * @return the expirationTime value.
     */
    public OffsetDateTime expirationTime() {
        return this.expirationTime;
    }

    /**
     * Get the error property: Error that is relayed from the script execution.
     * 
     * @return the error value.
     */
    public ManagementError error() {
        return this.error;
    }

    /**
     * Set the error property: Error that is relayed from the script execution.
     * 
     * @param error the error value to set.
     * @return the ScriptStatus object itself.
     */
    public ScriptStatus withError(ManagementError error) {
        this.error = error;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("error", this.error);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ScriptStatus from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ScriptStatus if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ScriptStatus.
     */
    public static ScriptStatus fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ScriptStatus deserializedScriptStatus = new ScriptStatus();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("containerInstanceId".equals(fieldName)) {
                    deserializedScriptStatus.containerInstanceId = reader.getString();
                } else if ("storageAccountId".equals(fieldName)) {
                    deserializedScriptStatus.storageAccountId = reader.getString();
                } else if ("startTime".equals(fieldName)) {
                    deserializedScriptStatus.startTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("endTime".equals(fieldName)) {
                    deserializedScriptStatus.endTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("expirationTime".equals(fieldName)) {
                    deserializedScriptStatus.expirationTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("error".equals(fieldName)) {
                    deserializedScriptStatus.error = ManagementError.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedScriptStatus;
        });
    }
}
