// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resourcesmicrosoftresourcesdeploymentscripts.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Settings to customize ACI container instance.
 */
@Fluent
public final class ContainerConfiguration implements JsonSerializable<ContainerConfiguration> {
    /*
     * Container group name, if not specified then the name will get auto-generated. Not specifying a
     * 'containerGroupName' indicates the system to generate a unique name which might end up flagging an Azure Policy
     * as non-compliant. Use 'containerGroupName' when you have an Azure Policy that expects a specific naming
     * convention or when you want to fully control the name. 'containerGroupName' property must be between 1 and 63
     * characters long, must contain only lowercase letters, numbers, and dashes and it cannot start or end with a dash
     * and consecutive dashes are not allowed. To specify a 'containerGroupName', add the following object to
     * properties: { "containerSettings": { "containerGroupName": "contoso-container" } }. If you do not want to specify
     * a 'containerGroupName' then do not add 'containerSettings' property.
     */
    private String containerGroupName;

    /*
     * The subnet resource IDs for a container group.
     */
    private List<ContainerGroupSubnetId> subnetIds;

    /**
     * Creates an instance of ContainerConfiguration class.
     */
    public ContainerConfiguration() {
    }

    /**
     * Get the containerGroupName property: Container group name, if not specified then the name will get
     * auto-generated. Not specifying a 'containerGroupName' indicates the system to generate a unique name which might
     * end up flagging an Azure Policy as non-compliant. Use 'containerGroupName' when you have an Azure Policy that
     * expects a specific naming convention or when you want to fully control the name. 'containerGroupName' property
     * must be between 1 and 63 characters long, must contain only lowercase letters, numbers, and dashes and it cannot
     * start or end with a dash and consecutive dashes are not allowed. To specify a 'containerGroupName', add the
     * following object to properties: { "containerSettings": { "containerGroupName": "contoso-container" } }. If you do
     * not want to specify a 'containerGroupName' then do not add 'containerSettings' property.
     * 
     * @return the containerGroupName value.
     */
    public String containerGroupName() {
        return this.containerGroupName;
    }

    /**
     * Set the containerGroupName property: Container group name, if not specified then the name will get
     * auto-generated. Not specifying a 'containerGroupName' indicates the system to generate a unique name which might
     * end up flagging an Azure Policy as non-compliant. Use 'containerGroupName' when you have an Azure Policy that
     * expects a specific naming convention or when you want to fully control the name. 'containerGroupName' property
     * must be between 1 and 63 characters long, must contain only lowercase letters, numbers, and dashes and it cannot
     * start or end with a dash and consecutive dashes are not allowed. To specify a 'containerGroupName', add the
     * following object to properties: { "containerSettings": { "containerGroupName": "contoso-container" } }. If you do
     * not want to specify a 'containerGroupName' then do not add 'containerSettings' property.
     * 
     * @param containerGroupName the containerGroupName value to set.
     * @return the ContainerConfiguration object itself.
     */
    public ContainerConfiguration withContainerGroupName(String containerGroupName) {
        this.containerGroupName = containerGroupName;
        return this;
    }

    /**
     * Get the subnetIds property: The subnet resource IDs for a container group.
     * 
     * @return the subnetIds value.
     */
    public List<ContainerGroupSubnetId> subnetIds() {
        return this.subnetIds;
    }

    /**
     * Set the subnetIds property: The subnet resource IDs for a container group.
     * 
     * @param subnetIds the subnetIds value to set.
     * @return the ContainerConfiguration object itself.
     */
    public ContainerConfiguration withSubnetIds(List<ContainerGroupSubnetId> subnetIds) {
        this.subnetIds = subnetIds;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (subnetIds() != null) {
            subnetIds().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("containerGroupName", this.containerGroupName);
        jsonWriter.writeArrayField("subnetIds", this.subnetIds, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ContainerConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ContainerConfiguration if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ContainerConfiguration.
     */
    public static ContainerConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ContainerConfiguration deserializedContainerConfiguration = new ContainerConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("containerGroupName".equals(fieldName)) {
                    deserializedContainerConfiguration.containerGroupName = reader.getString();
                } else if ("subnetIds".equals(fieldName)) {
                    List<ContainerGroupSubnetId> subnetIds
                        = reader.readArray(reader1 -> ContainerGroupSubnetId.fromJson(reader1));
                    deserializedContainerConfiguration.subnetIds = subnetIds;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedContainerConfiguration;
        });
    }
}
