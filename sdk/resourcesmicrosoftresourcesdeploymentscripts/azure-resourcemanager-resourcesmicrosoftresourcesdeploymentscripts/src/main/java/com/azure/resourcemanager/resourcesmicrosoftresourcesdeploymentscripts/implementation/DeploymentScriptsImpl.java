// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resourcesmicrosoftresourcesdeploymentscripts.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.resourcesmicrosoftresourcesdeploymentscripts.fluent.DeploymentScriptsClient;
import com.azure.resourcemanager.resourcesmicrosoftresourcesdeploymentscripts.fluent.models.DeploymentScriptInner;
import com.azure.resourcemanager.resourcesmicrosoftresourcesdeploymentscripts.fluent.models.ScriptLogInner;
import com.azure.resourcemanager.resourcesmicrosoftresourcesdeploymentscripts.fluent.models.ScriptLogsListInner;
import com.azure.resourcemanager.resourcesmicrosoftresourcesdeploymentscripts.models.DeploymentScript;
import com.azure.resourcemanager.resourcesmicrosoftresourcesdeploymentscripts.models.DeploymentScriptUpdateParameter;
import com.azure.resourcemanager.resourcesmicrosoftresourcesdeploymentscripts.models.DeploymentScripts;
import com.azure.resourcemanager.resourcesmicrosoftresourcesdeploymentscripts.models.ScriptLog;
import com.azure.resourcemanager.resourcesmicrosoftresourcesdeploymentscripts.models.ScriptLogsList;

public final class DeploymentScriptsImpl implements DeploymentScripts {
    private static final ClientLogger LOGGER = new ClientLogger(DeploymentScriptsImpl.class);

    private final DeploymentScriptsClient innerClient;

    private final com.azure.resourcemanager.resourcesmicrosoftresourcesdeploymentscripts.DeploymentScriptsManager serviceManager;

    public DeploymentScriptsImpl(DeploymentScriptsClient innerClient,
        com.azure.resourcemanager.resourcesmicrosoftresourcesdeploymentscripts.DeploymentScriptsManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public DeploymentScript create(String resourceGroupName, String scriptName,
        DeploymentScriptInner deploymentScript) {
        DeploymentScriptInner inner = this.serviceClient().create(resourceGroupName, scriptName, deploymentScript);
        if (inner != null) {
            return new DeploymentScriptImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public DeploymentScript create(String resourceGroupName, String scriptName, DeploymentScriptInner deploymentScript,
        Context context) {
        DeploymentScriptInner inner
            = this.serviceClient().create(resourceGroupName, scriptName, deploymentScript, context);
        if (inner != null) {
            return new DeploymentScriptImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<DeploymentScript> updateWithResponse(String resourceGroupName, String scriptName,
        DeploymentScriptUpdateParameter deploymentScript, Context context) {
        Response<DeploymentScriptInner> inner
            = this.serviceClient().updateWithResponse(resourceGroupName, scriptName, deploymentScript, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new DeploymentScriptImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public DeploymentScript update(String resourceGroupName, String scriptName) {
        DeploymentScriptInner inner = this.serviceClient().update(resourceGroupName, scriptName);
        if (inner != null) {
            return new DeploymentScriptImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<DeploymentScript> getByResourceGroupWithResponse(String resourceGroupName, String scriptName,
        Context context) {
        Response<DeploymentScriptInner> inner
            = this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, scriptName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new DeploymentScriptImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public DeploymentScript getByResourceGroup(String resourceGroupName, String scriptName) {
        DeploymentScriptInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, scriptName);
        if (inner != null) {
            return new DeploymentScriptImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteByResourceGroupWithResponse(String resourceGroupName, String scriptName,
        Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, scriptName, context);
    }

    public void deleteByResourceGroup(String resourceGroupName, String scriptName) {
        this.serviceClient().delete(resourceGroupName, scriptName);
    }

    public PagedIterable<DeploymentScript> list() {
        PagedIterable<DeploymentScriptInner> inner = this.serviceClient().list();
        return ResourceManagerUtils.mapPage(inner, inner1 -> new DeploymentScriptImpl(inner1, this.manager()));
    }

    public PagedIterable<DeploymentScript> list(Context context) {
        PagedIterable<DeploymentScriptInner> inner = this.serviceClient().list(context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new DeploymentScriptImpl(inner1, this.manager()));
    }

    public Response<ScriptLogsList> getLogsWithResponse(String resourceGroupName, String scriptName, Context context) {
        Response<ScriptLogsListInner> inner
            = this.serviceClient().getLogsWithResponse(resourceGroupName, scriptName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new ScriptLogsListImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ScriptLogsList getLogs(String resourceGroupName, String scriptName) {
        ScriptLogsListInner inner = this.serviceClient().getLogs(resourceGroupName, scriptName);
        if (inner != null) {
            return new ScriptLogsListImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ScriptLog> getLogsDefaultWithResponse(String resourceGroupName, String scriptName, Integer tail,
        Context context) {
        Response<ScriptLogInner> inner
            = this.serviceClient().getLogsDefaultWithResponse(resourceGroupName, scriptName, tail, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new ScriptLogImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ScriptLog getLogsDefault(String resourceGroupName, String scriptName) {
        ScriptLogInner inner = this.serviceClient().getLogsDefault(resourceGroupName, scriptName);
        if (inner != null) {
            return new ScriptLogImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<DeploymentScript> listByResourceGroup(String resourceGroupName) {
        PagedIterable<DeploymentScriptInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new DeploymentScriptImpl(inner1, this.manager()));
    }

    public PagedIterable<DeploymentScript> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<DeploymentScriptInner> inner
            = this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new DeploymentScriptImpl(inner1, this.manager()));
    }

    private DeploymentScriptsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.resourcesmicrosoftresourcesdeploymentscripts.DeploymentScriptsManager manager() {
        return this.serviceManager;
    }
}
