// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resourcesmicrosoftresourcesdeploymentscripts.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Common properties for the deployment script.
 */
@Fluent
public class DeploymentScriptPropertiesBase implements JsonSerializable<DeploymentScriptPropertiesBase> {
    /*
     * Container settings.
     */
    private ContainerConfiguration containerSettings;

    /*
     * Storage Account settings.
     */
    private StorageAccountConfiguration storageAccountSettings;

    /*
     * The clean up preference when the script execution gets in a terminal state. Default setting is 'Always'.
     */
    private CleanupOptions cleanupPreference;

    /*
     * State of the script execution. This only appears in the response.
     */
    private ScriptProvisioningState provisioningState;

    /*
     * Contains the results of script execution.
     */
    private ScriptStatus status;

    /*
     * List of script outputs.
     */
    private Map<String, Object> outputs;

    /**
     * Creates an instance of DeploymentScriptPropertiesBase class.
     */
    public DeploymentScriptPropertiesBase() {
    }

    /**
     * Get the containerSettings property: Container settings.
     * 
     * @return the containerSettings value.
     */
    public ContainerConfiguration containerSettings() {
        return this.containerSettings;
    }

    /**
     * Set the containerSettings property: Container settings.
     * 
     * @param containerSettings the containerSettings value to set.
     * @return the DeploymentScriptPropertiesBase object itself.
     */
    public DeploymentScriptPropertiesBase withContainerSettings(ContainerConfiguration containerSettings) {
        this.containerSettings = containerSettings;
        return this;
    }

    /**
     * Get the storageAccountSettings property: Storage Account settings.
     * 
     * @return the storageAccountSettings value.
     */
    public StorageAccountConfiguration storageAccountSettings() {
        return this.storageAccountSettings;
    }

    /**
     * Set the storageAccountSettings property: Storage Account settings.
     * 
     * @param storageAccountSettings the storageAccountSettings value to set.
     * @return the DeploymentScriptPropertiesBase object itself.
     */
    public DeploymentScriptPropertiesBase
        withStorageAccountSettings(StorageAccountConfiguration storageAccountSettings) {
        this.storageAccountSettings = storageAccountSettings;
        return this;
    }

    /**
     * Get the cleanupPreference property: The clean up preference when the script execution gets in a terminal state.
     * Default setting is 'Always'.
     * 
     * @return the cleanupPreference value.
     */
    public CleanupOptions cleanupPreference() {
        return this.cleanupPreference;
    }

    /**
     * Set the cleanupPreference property: The clean up preference when the script execution gets in a terminal state.
     * Default setting is 'Always'.
     * 
     * @param cleanupPreference the cleanupPreference value to set.
     * @return the DeploymentScriptPropertiesBase object itself.
     */
    public DeploymentScriptPropertiesBase withCleanupPreference(CleanupOptions cleanupPreference) {
        this.cleanupPreference = cleanupPreference;
        return this;
    }

    /**
     * Get the provisioningState property: State of the script execution. This only appears in the response.
     * 
     * @return the provisioningState value.
     */
    public ScriptProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Set the provisioningState property: State of the script execution. This only appears in the response.
     * 
     * @param provisioningState the provisioningState value to set.
     * @return the DeploymentScriptPropertiesBase object itself.
     */
    DeploymentScriptPropertiesBase withProvisioningState(ScriptProvisioningState provisioningState) {
        this.provisioningState = provisioningState;
        return this;
    }

    /**
     * Get the status property: Contains the results of script execution.
     * 
     * @return the status value.
     */
    public ScriptStatus status() {
        return this.status;
    }

    /**
     * Set the status property: Contains the results of script execution.
     * 
     * @param status the status value to set.
     * @return the DeploymentScriptPropertiesBase object itself.
     */
    DeploymentScriptPropertiesBase withStatus(ScriptStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Get the outputs property: List of script outputs.
     * 
     * @return the outputs value.
     */
    public Map<String, Object> outputs() {
        return this.outputs;
    }

    /**
     * Set the outputs property: List of script outputs.
     * 
     * @param outputs the outputs value to set.
     * @return the DeploymentScriptPropertiesBase object itself.
     */
    DeploymentScriptPropertiesBase withOutputs(Map<String, Object> outputs) {
        this.outputs = outputs;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (containerSettings() != null) {
            containerSettings().validate();
        }
        if (storageAccountSettings() != null) {
            storageAccountSettings().validate();
        }
        if (status() != null) {
            status().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("containerSettings", this.containerSettings);
        jsonWriter.writeJsonField("storageAccountSettings", this.storageAccountSettings);
        jsonWriter.writeStringField("cleanupPreference",
            this.cleanupPreference == null ? null : this.cleanupPreference.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DeploymentScriptPropertiesBase from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DeploymentScriptPropertiesBase if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DeploymentScriptPropertiesBase.
     */
    public static DeploymentScriptPropertiesBase fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DeploymentScriptPropertiesBase deserializedDeploymentScriptPropertiesBase
                = new DeploymentScriptPropertiesBase();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("containerSettings".equals(fieldName)) {
                    deserializedDeploymentScriptPropertiesBase.containerSettings
                        = ContainerConfiguration.fromJson(reader);
                } else if ("storageAccountSettings".equals(fieldName)) {
                    deserializedDeploymentScriptPropertiesBase.storageAccountSettings
                        = StorageAccountConfiguration.fromJson(reader);
                } else if ("cleanupPreference".equals(fieldName)) {
                    deserializedDeploymentScriptPropertiesBase.cleanupPreference
                        = CleanupOptions.fromString(reader.getString());
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedDeploymentScriptPropertiesBase.provisioningState
                        = ScriptProvisioningState.fromString(reader.getString());
                } else if ("status".equals(fieldName)) {
                    deserializedDeploymentScriptPropertiesBase.status = ScriptStatus.fromJson(reader);
                } else if ("outputs".equals(fieldName)) {
                    Map<String, Object> outputs = reader.readMap(reader1 -> reader1.readUntyped());
                    deserializedDeploymentScriptPropertiesBase.outputs = outputs;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDeploymentScriptPropertiesBase;
        });
    }
}
