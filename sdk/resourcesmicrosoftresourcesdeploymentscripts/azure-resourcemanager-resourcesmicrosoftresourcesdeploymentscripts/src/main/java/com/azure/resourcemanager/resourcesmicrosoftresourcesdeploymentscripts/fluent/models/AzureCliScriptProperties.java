// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resourcesmicrosoftresourcesdeploymentscripts.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.resourcesmicrosoftresourcesdeploymentscripts.models.CleanupOptions;
import com.azure.resourcemanager.resourcesmicrosoftresourcesdeploymentscripts.models.ContainerConfiguration;
import com.azure.resourcemanager.resourcesmicrosoftresourcesdeploymentscripts.models.DeploymentScriptPropertiesBase;
import com.azure.resourcemanager.resourcesmicrosoftresourcesdeploymentscripts.models.EnvironmentVariable;
import com.azure.resourcemanager.resourcesmicrosoftresourcesdeploymentscripts.models.ScriptProvisioningState;
import com.azure.resourcemanager.resourcesmicrosoftresourcesdeploymentscripts.models.ScriptStatus;
import com.azure.resourcemanager.resourcesmicrosoftresourcesdeploymentscripts.models.StorageAccountConfiguration;
import java.io.IOException;
import java.time.Duration;
import java.util.List;
import java.util.Map;

/**
 * Properties of the Azure CLI script object.
 */
@Fluent
public final class AzureCliScriptProperties extends DeploymentScriptPropertiesBase {
    /*
     * Azure CLI module version to be used.
     */
    private String azCliVersion;

    /*
     * Uri for the script. This is the entry point for the external script.
     */
    private String primaryScriptUri;

    /*
     * Supporting files for the external script.
     */
    private List<String> supportingScriptUris;

    /*
     * Script body.
     */
    private String scriptContent;

    /*
     * Command line arguments to pass to the script. Arguments are separated by spaces. ex: -Name blue* -Location 'West
     * US 2'
     */
    private String arguments;

    /*
     * The environment variables to pass over to the script.
     */
    private List<EnvironmentVariable> environmentVariables;

    /*
     * Gets or sets how the deployment script should be forced to execute even if the script resource has not changed.
     * Can be current time stamp or a GUID.
     */
    private String forceUpdateTag;

    /*
     * Interval for which the service retains the script resource after it reaches a terminal state. Resource will be
     * deleted when this duration expires. Duration is based on ISO 8601 pattern (for example P1D means one day).
     */
    private Duration retentionInterval;

    /*
     * Maximum allowed script execution time specified in ISO 8601 format. Default value is P1D
     */
    private Duration timeout;

    /*
     * List of script outputs.
     */
    private Map<String, Object> outputs;

    /*
     * Contains the results of script execution.
     */
    private ScriptStatus status;

    /*
     * State of the script execution. This only appears in the response.
     */
    private ScriptProvisioningState provisioningState;

    /**
     * Creates an instance of AzureCliScriptProperties class.
     */
    public AzureCliScriptProperties() {
    }

    /**
     * Get the azCliVersion property: Azure CLI module version to be used.
     * 
     * @return the azCliVersion value.
     */
    public String azCliVersion() {
        return this.azCliVersion;
    }

    /**
     * Set the azCliVersion property: Azure CLI module version to be used.
     * 
     * @param azCliVersion the azCliVersion value to set.
     * @return the AzureCliScriptProperties object itself.
     */
    public AzureCliScriptProperties withAzCliVersion(String azCliVersion) {
        this.azCliVersion = azCliVersion;
        return this;
    }

    /**
     * Get the primaryScriptUri property: Uri for the script. This is the entry point for the external script.
     * 
     * @return the primaryScriptUri value.
     */
    public String primaryScriptUri() {
        return this.primaryScriptUri;
    }

    /**
     * Set the primaryScriptUri property: Uri for the script. This is the entry point for the external script.
     * 
     * @param primaryScriptUri the primaryScriptUri value to set.
     * @return the AzureCliScriptProperties object itself.
     */
    public AzureCliScriptProperties withPrimaryScriptUri(String primaryScriptUri) {
        this.primaryScriptUri = primaryScriptUri;
        return this;
    }

    /**
     * Get the supportingScriptUris property: Supporting files for the external script.
     * 
     * @return the supportingScriptUris value.
     */
    public List<String> supportingScriptUris() {
        return this.supportingScriptUris;
    }

    /**
     * Set the supportingScriptUris property: Supporting files for the external script.
     * 
     * @param supportingScriptUris the supportingScriptUris value to set.
     * @return the AzureCliScriptProperties object itself.
     */
    public AzureCliScriptProperties withSupportingScriptUris(List<String> supportingScriptUris) {
        this.supportingScriptUris = supportingScriptUris;
        return this;
    }

    /**
     * Get the scriptContent property: Script body.
     * 
     * @return the scriptContent value.
     */
    public String scriptContent() {
        return this.scriptContent;
    }

    /**
     * Set the scriptContent property: Script body.
     * 
     * @param scriptContent the scriptContent value to set.
     * @return the AzureCliScriptProperties object itself.
     */
    public AzureCliScriptProperties withScriptContent(String scriptContent) {
        this.scriptContent = scriptContent;
        return this;
    }

    /**
     * Get the arguments property: Command line arguments to pass to the script. Arguments are separated by spaces. ex:
     * -Name blue* -Location 'West US 2'.
     * 
     * @return the arguments value.
     */
    public String arguments() {
        return this.arguments;
    }

    /**
     * Set the arguments property: Command line arguments to pass to the script. Arguments are separated by spaces. ex:
     * -Name blue* -Location 'West US 2'.
     * 
     * @param arguments the arguments value to set.
     * @return the AzureCliScriptProperties object itself.
     */
    public AzureCliScriptProperties withArguments(String arguments) {
        this.arguments = arguments;
        return this;
    }

    /**
     * Get the environmentVariables property: The environment variables to pass over to the script.
     * 
     * @return the environmentVariables value.
     */
    public List<EnvironmentVariable> environmentVariables() {
        return this.environmentVariables;
    }

    /**
     * Set the environmentVariables property: The environment variables to pass over to the script.
     * 
     * @param environmentVariables the environmentVariables value to set.
     * @return the AzureCliScriptProperties object itself.
     */
    public AzureCliScriptProperties withEnvironmentVariables(List<EnvironmentVariable> environmentVariables) {
        this.environmentVariables = environmentVariables;
        return this;
    }

    /**
     * Get the forceUpdateTag property: Gets or sets how the deployment script should be forced to execute even if the
     * script resource has not changed. Can be current time stamp or a GUID.
     * 
     * @return the forceUpdateTag value.
     */
    public String forceUpdateTag() {
        return this.forceUpdateTag;
    }

    /**
     * Set the forceUpdateTag property: Gets or sets how the deployment script should be forced to execute even if the
     * script resource has not changed. Can be current time stamp or a GUID.
     * 
     * @param forceUpdateTag the forceUpdateTag value to set.
     * @return the AzureCliScriptProperties object itself.
     */
    public AzureCliScriptProperties withForceUpdateTag(String forceUpdateTag) {
        this.forceUpdateTag = forceUpdateTag;
        return this;
    }

    /**
     * Get the retentionInterval property: Interval for which the service retains the script resource after it reaches a
     * terminal state. Resource will be deleted when this duration expires. Duration is based on ISO 8601 pattern (for
     * example P1D means one day).
     * 
     * @return the retentionInterval value.
     */
    public Duration retentionInterval() {
        return this.retentionInterval;
    }

    /**
     * Set the retentionInterval property: Interval for which the service retains the script resource after it reaches a
     * terminal state. Resource will be deleted when this duration expires. Duration is based on ISO 8601 pattern (for
     * example P1D means one day).
     * 
     * @param retentionInterval the retentionInterval value to set.
     * @return the AzureCliScriptProperties object itself.
     */
    public AzureCliScriptProperties withRetentionInterval(Duration retentionInterval) {
        this.retentionInterval = retentionInterval;
        return this;
    }

    /**
     * Get the timeout property: Maximum allowed script execution time specified in ISO 8601 format. Default value is
     * P1D.
     * 
     * @return the timeout value.
     */
    public Duration timeout() {
        return this.timeout;
    }

    /**
     * Set the timeout property: Maximum allowed script execution time specified in ISO 8601 format. Default value is
     * P1D.
     * 
     * @param timeout the timeout value to set.
     * @return the AzureCliScriptProperties object itself.
     */
    public AzureCliScriptProperties withTimeout(Duration timeout) {
        this.timeout = timeout;
        return this;
    }

    /**
     * Get the outputs property: List of script outputs.
     * 
     * @return the outputs value.
     */
    @Override
    public Map<String, Object> outputs() {
        return this.outputs;
    }

    /**
     * Get the status property: Contains the results of script execution.
     * 
     * @return the status value.
     */
    @Override
    public ScriptStatus status() {
        return this.status;
    }

    /**
     * Get the provisioningState property: State of the script execution. This only appears in the response.
     * 
     * @return the provisioningState value.
     */
    @Override
    public ScriptProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureCliScriptProperties withContainerSettings(ContainerConfiguration containerSettings) {
        super.withContainerSettings(containerSettings);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureCliScriptProperties withStorageAccountSettings(StorageAccountConfiguration storageAccountSettings) {
        super.withStorageAccountSettings(storageAccountSettings);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureCliScriptProperties withCleanupPreference(CleanupOptions cleanupPreference) {
        super.withCleanupPreference(cleanupPreference);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (azCliVersion() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property azCliVersion in model AzureCliScriptProperties"));
        }
        if (environmentVariables() != null) {
            environmentVariables().forEach(e -> e.validate());
        }
        if (retentionInterval() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property retentionInterval in model AzureCliScriptProperties"));
        }
        if (containerSettings() != null) {
            containerSettings().validate();
        }
        if (storageAccountSettings() != null) {
            storageAccountSettings().validate();
        }
        if (status() != null) {
            status().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(AzureCliScriptProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("containerSettings", containerSettings());
        jsonWriter.writeJsonField("storageAccountSettings", storageAccountSettings());
        jsonWriter.writeStringField("cleanupPreference",
            cleanupPreference() == null ? null : cleanupPreference().toString());
        jsonWriter.writeStringField("azCliVersion", this.azCliVersion);
        jsonWriter.writeStringField("retentionInterval", CoreUtils.durationToStringWithDays(this.retentionInterval));
        jsonWriter.writeStringField("primaryScriptUri", this.primaryScriptUri);
        jsonWriter.writeArrayField("supportingScriptUris", this.supportingScriptUris,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("scriptContent", this.scriptContent);
        jsonWriter.writeStringField("arguments", this.arguments);
        jsonWriter.writeArrayField("environmentVariables", this.environmentVariables,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("forceUpdateTag", this.forceUpdateTag);
        jsonWriter.writeStringField("timeout", CoreUtils.durationToStringWithDays(this.timeout));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AzureCliScriptProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AzureCliScriptProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AzureCliScriptProperties.
     */
    public static AzureCliScriptProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AzureCliScriptProperties deserializedAzureCliScriptProperties = new AzureCliScriptProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("containerSettings".equals(fieldName)) {
                    deserializedAzureCliScriptProperties.withContainerSettings(ContainerConfiguration.fromJson(reader));
                } else if ("storageAccountSettings".equals(fieldName)) {
                    deserializedAzureCliScriptProperties
                        .withStorageAccountSettings(StorageAccountConfiguration.fromJson(reader));
                } else if ("cleanupPreference".equals(fieldName)) {
                    deserializedAzureCliScriptProperties
                        .withCleanupPreference(CleanupOptions.fromString(reader.getString()));
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedAzureCliScriptProperties.provisioningState
                        = ScriptProvisioningState.fromString(reader.getString());
                } else if ("status".equals(fieldName)) {
                    deserializedAzureCliScriptProperties.status = ScriptStatus.fromJson(reader);
                } else if ("outputs".equals(fieldName)) {
                    Map<String, Object> outputs = reader.readMap(reader1 -> reader1.readUntyped());
                    deserializedAzureCliScriptProperties.outputs = outputs;
                } else if ("azCliVersion".equals(fieldName)) {
                    deserializedAzureCliScriptProperties.azCliVersion = reader.getString();
                } else if ("retentionInterval".equals(fieldName)) {
                    deserializedAzureCliScriptProperties.retentionInterval
                        = reader.getNullable(nonNullReader -> Duration.parse(nonNullReader.getString()));
                } else if ("primaryScriptUri".equals(fieldName)) {
                    deserializedAzureCliScriptProperties.primaryScriptUri = reader.getString();
                } else if ("supportingScriptUris".equals(fieldName)) {
                    List<String> supportingScriptUris = reader.readArray(reader1 -> reader1.getString());
                    deserializedAzureCliScriptProperties.supportingScriptUris = supportingScriptUris;
                } else if ("scriptContent".equals(fieldName)) {
                    deserializedAzureCliScriptProperties.scriptContent = reader.getString();
                } else if ("arguments".equals(fieldName)) {
                    deserializedAzureCliScriptProperties.arguments = reader.getString();
                } else if ("environmentVariables".equals(fieldName)) {
                    List<EnvironmentVariable> environmentVariables
                        = reader.readArray(reader1 -> EnvironmentVariable.fromJson(reader1));
                    deserializedAzureCliScriptProperties.environmentVariables = environmentVariables;
                } else if ("forceUpdateTag".equals(fieldName)) {
                    deserializedAzureCliScriptProperties.forceUpdateTag = reader.getString();
                } else if ("timeout".equals(fieldName)) {
                    deserializedAzureCliScriptProperties.timeout
                        = reader.getNullable(nonNullReader -> Duration.parse(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAzureCliScriptProperties;
        });
    }
}
