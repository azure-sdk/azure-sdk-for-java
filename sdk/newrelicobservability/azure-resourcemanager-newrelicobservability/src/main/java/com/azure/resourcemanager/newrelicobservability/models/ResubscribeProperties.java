// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.newrelicobservability.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Resubscribe Properties.
 */
@Fluent
public final class ResubscribeProperties implements JsonSerializable<ResubscribeProperties> {
    /*
     * Newly selected plan Id to create the new Marketplace subscription for Resubscribe
     */
    private String planId;

    /*
     * Newly selected term Id to create the new Marketplace subscription for Resubscribe
     */
    private String termId;

    /*
     * Newly selected Azure Subscription Id in which the new Marketplace subscription will be created for Resubscribe
     */
    private String subscriptionId;

    /*
     * Newly selected Azure resource group in which the new Marketplace subscription will be created for Resubscribe
     */
    private String resourceGroup;

    /*
     * Organization Id of the NewRelic Organization that needs to be resubscribed
     */
    private String organizationId;

    /*
     * Publisher Id of the NewRelic offer that needs to be resubscribed
     */
    private String publisherId;

    /*
     * Offer Id of the NewRelic offer that needs to be resubscribed
     */
    private String offerId;

    /**
     * Creates an instance of ResubscribeProperties class.
     */
    public ResubscribeProperties() {
    }

    /**
     * Get the planId property: Newly selected plan Id to create the new Marketplace subscription for Resubscribe.
     * 
     * @return the planId value.
     */
    public String planId() {
        return this.planId;
    }

    /**
     * Set the planId property: Newly selected plan Id to create the new Marketplace subscription for Resubscribe.
     * 
     * @param planId the planId value to set.
     * @return the ResubscribeProperties object itself.
     */
    public ResubscribeProperties withPlanId(String planId) {
        this.planId = planId;
        return this;
    }

    /**
     * Get the termId property: Newly selected term Id to create the new Marketplace subscription for Resubscribe.
     * 
     * @return the termId value.
     */
    public String termId() {
        return this.termId;
    }

    /**
     * Set the termId property: Newly selected term Id to create the new Marketplace subscription for Resubscribe.
     * 
     * @param termId the termId value to set.
     * @return the ResubscribeProperties object itself.
     */
    public ResubscribeProperties withTermId(String termId) {
        this.termId = termId;
        return this;
    }

    /**
     * Get the subscriptionId property: Newly selected Azure Subscription Id in which the new Marketplace subscription
     * will be created for Resubscribe.
     * 
     * @return the subscriptionId value.
     */
    public String subscriptionId() {
        return this.subscriptionId;
    }

    /**
     * Set the subscriptionId property: Newly selected Azure Subscription Id in which the new Marketplace subscription
     * will be created for Resubscribe.
     * 
     * @param subscriptionId the subscriptionId value to set.
     * @return the ResubscribeProperties object itself.
     */
    public ResubscribeProperties withSubscriptionId(String subscriptionId) {
        this.subscriptionId = subscriptionId;
        return this;
    }

    /**
     * Get the resourceGroup property: Newly selected Azure resource group in which the new Marketplace subscription
     * will be created for Resubscribe.
     * 
     * @return the resourceGroup value.
     */
    public String resourceGroup() {
        return this.resourceGroup;
    }

    /**
     * Set the resourceGroup property: Newly selected Azure resource group in which the new Marketplace subscription
     * will be created for Resubscribe.
     * 
     * @param resourceGroup the resourceGroup value to set.
     * @return the ResubscribeProperties object itself.
     */
    public ResubscribeProperties withResourceGroup(String resourceGroup) {
        this.resourceGroup = resourceGroup;
        return this;
    }

    /**
     * Get the organizationId property: Organization Id of the NewRelic Organization that needs to be resubscribed.
     * 
     * @return the organizationId value.
     */
    public String organizationId() {
        return this.organizationId;
    }

    /**
     * Set the organizationId property: Organization Id of the NewRelic Organization that needs to be resubscribed.
     * 
     * @param organizationId the organizationId value to set.
     * @return the ResubscribeProperties object itself.
     */
    public ResubscribeProperties withOrganizationId(String organizationId) {
        this.organizationId = organizationId;
        return this;
    }

    /**
     * Get the publisherId property: Publisher Id of the NewRelic offer that needs to be resubscribed.
     * 
     * @return the publisherId value.
     */
    public String publisherId() {
        return this.publisherId;
    }

    /**
     * Set the publisherId property: Publisher Id of the NewRelic offer that needs to be resubscribed.
     * 
     * @param publisherId the publisherId value to set.
     * @return the ResubscribeProperties object itself.
     */
    public ResubscribeProperties withPublisherId(String publisherId) {
        this.publisherId = publisherId;
        return this;
    }

    /**
     * Get the offerId property: Offer Id of the NewRelic offer that needs to be resubscribed.
     * 
     * @return the offerId value.
     */
    public String offerId() {
        return this.offerId;
    }

    /**
     * Set the offerId property: Offer Id of the NewRelic offer that needs to be resubscribed.
     * 
     * @param offerId the offerId value to set.
     * @return the ResubscribeProperties object itself.
     */
    public ResubscribeProperties withOfferId(String offerId) {
        this.offerId = offerId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("planId", this.planId);
        jsonWriter.writeStringField("termId", this.termId);
        jsonWriter.writeStringField("subscriptionId", this.subscriptionId);
        jsonWriter.writeStringField("resourceGroup", this.resourceGroup);
        jsonWriter.writeStringField("organizationId", this.organizationId);
        jsonWriter.writeStringField("publisherId", this.publisherId);
        jsonWriter.writeStringField("offerId", this.offerId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResubscribeProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResubscribeProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ResubscribeProperties.
     */
    public static ResubscribeProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ResubscribeProperties deserializedResubscribeProperties = new ResubscribeProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("planId".equals(fieldName)) {
                    deserializedResubscribeProperties.planId = reader.getString();
                } else if ("termId".equals(fieldName)) {
                    deserializedResubscribeProperties.termId = reader.getString();
                } else if ("subscriptionId".equals(fieldName)) {
                    deserializedResubscribeProperties.subscriptionId = reader.getString();
                } else if ("resourceGroup".equals(fieldName)) {
                    deserializedResubscribeProperties.resourceGroup = reader.getString();
                } else if ("organizationId".equals(fieldName)) {
                    deserializedResubscribeProperties.organizationId = reader.getString();
                } else if ("publisherId".equals(fieldName)) {
                    deserializedResubscribeProperties.publisherId = reader.getString();
                } else if ("offerId".equals(fieldName)) {
                    deserializedResubscribeProperties.offerId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedResubscribeProperties;
        });
    }
}
