// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhcimicrosoftazurestackhcistackhci.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.resourcemanager.azurestackhcimicrosoftazurestackhcistackhci.models.DeploymentConfiguration;
import com.azure.resourcemanager.azurestackhcimicrosoftazurestackhcistackhci.models.DeploymentMode;
import com.azure.resourcemanager.azurestackhcimicrosoftazurestackhcistackhci.models.EceReportedProperties;
import com.azure.resourcemanager.azurestackhcimicrosoftazurestackhcistackhci.models.OperationType;
import com.azure.resourcemanager.azurestackhcimicrosoftazurestackhcistackhci.models.ProvisioningState;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * Edge device resource.
 */
@Fluent
public final class DeploymentSettingInner extends ProxyResource {
    /*
     * The resource-specific properties for this resource.
     */
    @JsonProperty(value = "properties")
    private DeploymentSettingsProperties innerProperties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /**
     * Creates an instance of DeploymentSettingInner class.
     */
    public DeploymentSettingInner() {
    }

    /**
     * Get the innerProperties property: The resource-specific properties for this resource.
     * 
     * @return the innerProperties value.
     */
    private DeploymentSettingsProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the provisioningState property: DeploymentSetting provisioning state.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the arcNodeResourceIds property: Azure resource ids of Arc machines to be part of cluster.
     * 
     * @return the arcNodeResourceIds value.
     */
    public List<String> arcNodeResourceIds() {
        return this.innerProperties() == null ? null : this.innerProperties().arcNodeResourceIds();
    }

    /**
     * Set the arcNodeResourceIds property: Azure resource ids of Arc machines to be part of cluster.
     * 
     * @param arcNodeResourceIds the arcNodeResourceIds value to set.
     * @return the DeploymentSettingInner object itself.
     */
    public DeploymentSettingInner withArcNodeResourceIds(List<String> arcNodeResourceIds) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DeploymentSettingsProperties();
        }
        this.innerProperties().withArcNodeResourceIds(arcNodeResourceIds);
        return this;
    }

    /**
     * Get the deploymentMode property: The deployment mode for cluster deployment.
     * 
     * @return the deploymentMode value.
     */
    public DeploymentMode deploymentMode() {
        return this.innerProperties() == null ? null : this.innerProperties().deploymentMode();
    }

    /**
     * Set the deploymentMode property: The deployment mode for cluster deployment.
     * 
     * @param deploymentMode the deploymentMode value to set.
     * @return the DeploymentSettingInner object itself.
     */
    public DeploymentSettingInner withDeploymentMode(DeploymentMode deploymentMode) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DeploymentSettingsProperties();
        }
        this.innerProperties().withDeploymentMode(deploymentMode);
        return this;
    }

    /**
     * Get the operationType property: The intended operation for a cluster.
     * 
     * @return the operationType value.
     */
    public OperationType operationType() {
        return this.innerProperties() == null ? null : this.innerProperties().operationType();
    }

    /**
     * Set the operationType property: The intended operation for a cluster.
     * 
     * @param operationType the operationType value to set.
     * @return the DeploymentSettingInner object itself.
     */
    public DeploymentSettingInner withOperationType(OperationType operationType) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DeploymentSettingsProperties();
        }
        this.innerProperties().withOperationType(operationType);
        return this;
    }

    /**
     * Get the deploymentConfiguration property: Scale units will contains list of deployment data.
     * 
     * @return the deploymentConfiguration value.
     */
    public DeploymentConfiguration deploymentConfiguration() {
        return this.innerProperties() == null ? null : this.innerProperties().deploymentConfiguration();
    }

    /**
     * Set the deploymentConfiguration property: Scale units will contains list of deployment data.
     * 
     * @param deploymentConfiguration the deploymentConfiguration value to set.
     * @return the DeploymentSettingInner object itself.
     */
    public DeploymentSettingInner withDeploymentConfiguration(DeploymentConfiguration deploymentConfiguration) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DeploymentSettingsProperties();
        }
        this.innerProperties().withDeploymentConfiguration(deploymentConfiguration);
        return this;
    }

    /**
     * Get the reportedProperties property: Deployment Status reported from cluster.
     * 
     * @return the reportedProperties value.
     */
    public EceReportedProperties reportedProperties() {
        return this.innerProperties() == null ? null : this.innerProperties().reportedProperties();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
