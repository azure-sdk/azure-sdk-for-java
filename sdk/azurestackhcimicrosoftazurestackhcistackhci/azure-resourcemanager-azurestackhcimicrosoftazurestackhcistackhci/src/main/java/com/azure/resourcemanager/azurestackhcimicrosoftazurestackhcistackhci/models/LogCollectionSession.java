// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhcimicrosoftazurestackhcistackhci.models;

import com.azure.core.annotation.Immutable;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;

/**
 * Log Collection Session details of the cluster.
 */
@Immutable
public final class LogCollectionSession {
    /*
     * Start Time of the logs when it was collected
     */
    @JsonProperty(value = "logStartTime", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime logStartTime;

    /*
     * End Time of the logs when it was collected
     */
    @JsonProperty(value = "logEndTime", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime logEndTime;

    /*
     * Duration of logs collected
     */
    @JsonProperty(value = "timeCollected", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime timeCollected;

    /*
     * Size of the logs collected
     */
    @JsonProperty(value = "logSize", access = JsonProperty.Access.WRITE_ONLY)
    private Long logSize;

    /*
     * LogCollection status
     */
    @JsonProperty(value = "logCollectionStatus", access = JsonProperty.Access.WRITE_ONLY)
    private LogCollectionStatus logCollectionStatus;

    /*
     * LogCollection job type
     */
    @JsonProperty(value = "logCollectionJobType", access = JsonProperty.Access.WRITE_ONLY)
    private LogCollectionJobType logCollectionJobType;

    /*
     * CorrelationId of the log collection
     */
    @JsonProperty(value = "correlationId", access = JsonProperty.Access.WRITE_ONLY)
    private String correlationId;

    /*
     * End Time of the logs when it was collected
     */
    @JsonProperty(value = "endTimeCollected", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime endTimeCollected;

    /*
     * Log Collection Error details of the cluster.
     */
    @JsonProperty(value = "logCollectionError", access = JsonProperty.Access.WRITE_ONLY)
    private LogCollectionError logCollectionError;

    /**
     * Creates an instance of LogCollectionSession class.
     */
    public LogCollectionSession() {
    }

    /**
     * Get the logStartTime property: Start Time of the logs when it was collected.
     * 
     * @return the logStartTime value.
     */
    public OffsetDateTime logStartTime() {
        return this.logStartTime;
    }

    /**
     * Get the logEndTime property: End Time of the logs when it was collected.
     * 
     * @return the logEndTime value.
     */
    public OffsetDateTime logEndTime() {
        return this.logEndTime;
    }

    /**
     * Get the timeCollected property: Duration of logs collected.
     * 
     * @return the timeCollected value.
     */
    public OffsetDateTime timeCollected() {
        return this.timeCollected;
    }

    /**
     * Get the logSize property: Size of the logs collected.
     * 
     * @return the logSize value.
     */
    public Long logSize() {
        return this.logSize;
    }

    /**
     * Get the logCollectionStatus property: LogCollection status.
     * 
     * @return the logCollectionStatus value.
     */
    public LogCollectionStatus logCollectionStatus() {
        return this.logCollectionStatus;
    }

    /**
     * Get the logCollectionJobType property: LogCollection job type.
     * 
     * @return the logCollectionJobType value.
     */
    public LogCollectionJobType logCollectionJobType() {
        return this.logCollectionJobType;
    }

    /**
     * Get the correlationId property: CorrelationId of the log collection.
     * 
     * @return the correlationId value.
     */
    public String correlationId() {
        return this.correlationId;
    }

    /**
     * Get the endTimeCollected property: End Time of the logs when it was collected.
     * 
     * @return the endTimeCollected value.
     */
    public OffsetDateTime endTimeCollected() {
        return this.endTimeCollected;
    }

    /**
     * Get the logCollectionError property: Log Collection Error details of the cluster.
     * 
     * @return the logCollectionError value.
     */
    public LogCollectionError logCollectionError() {
        return this.logCollectionError;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (logCollectionError() != null) {
            logCollectionError().validate();
        }
    }
}
