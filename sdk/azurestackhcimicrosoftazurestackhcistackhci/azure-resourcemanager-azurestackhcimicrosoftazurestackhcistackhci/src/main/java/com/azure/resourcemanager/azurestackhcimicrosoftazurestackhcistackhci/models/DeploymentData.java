// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhcimicrosoftazurestackhcistackhci.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * The Deployment data of AzureStackHCI Cluster.
 */
@Fluent
public final class DeploymentData {
    /*
     * SecuritySettings to deploy AzureStackHCI Cluster.
     */
    @JsonProperty(value = "securitySettings")
    private DeploymentSecuritySettings securitySettings;

    /*
     * Observability config to deploy AzureStackHCI Cluster.
     */
    @JsonProperty(value = "observability")
    private Observability observability;

    /*
     * Observability config to deploy AzureStackHCI Cluster.
     */
    @JsonProperty(value = "cluster")
    private DeploymentCluster cluster;

    /*
     * Storage config to deploy AzureStackHCI Cluster.
     */
    @JsonProperty(value = "storage")
    private Storage storage;

    /*
     * naming prefix to deploy cluster.
     */
    @JsonProperty(value = "namingPrefix")
    private String namingPrefix;

    /*
     * FQDN to deploy cluster
     */
    @JsonProperty(value = "domainFqdn")
    private String domainFqdn;

    /*
     * InfrastructureNetwork config to deploy AzureStackHCI Cluster.
     */
    @JsonProperty(value = "infrastructureNetwork")
    private List<InfrastructureNetwork> infrastructureNetwork;

    /*
     * list of physical nodes config to deploy AzureStackHCI Cluster.
     */
    @JsonProperty(value = "physicalNodes")
    private List<PhysicalNodes> physicalNodes;

    /*
     * HostNetwork config to deploy AzureStackHCI Cluster.
     */
    @JsonProperty(value = "hostNetwork")
    private HostNetwork hostNetwork;

    /*
     * SDN Integration config to deploy AzureStackHCI Cluster.
     */
    @JsonProperty(value = "sdnIntegration")
    private SdnIntegration sdnIntegration;

    /*
     * The path to the Active Directory Organizational Unit container object prepared for the deployment. 
     */
    @JsonProperty(value = "adouPath")
    private String adouPath;

    /*
     * Azure keyvault endpoint. This property is deprecated from 2023-12-01-preview. Please use secrets property instead.
     */
    @JsonProperty(value = "secretsLocation")
    private String secretsLocation;

    /*
     * secrets used for cloud deployment.
     */
    @JsonProperty(value = "secrets")
    private List<EceDeploymentSecrets> secrets;

    /*
     * OptionalServices config to deploy AzureStackHCI Cluster.
     */
    @JsonProperty(value = "optionalServices")
    private OptionalServices optionalServices;

    /**
     * Creates an instance of DeploymentData class.
     */
    public DeploymentData() {
    }

    /**
     * Get the securitySettings property: SecuritySettings to deploy AzureStackHCI Cluster.
     * 
     * @return the securitySettings value.
     */
    public DeploymentSecuritySettings securitySettings() {
        return this.securitySettings;
    }

    /**
     * Set the securitySettings property: SecuritySettings to deploy AzureStackHCI Cluster.
     * 
     * @param securitySettings the securitySettings value to set.
     * @return the DeploymentData object itself.
     */
    public DeploymentData withSecuritySettings(DeploymentSecuritySettings securitySettings) {
        this.securitySettings = securitySettings;
        return this;
    }

    /**
     * Get the observability property: Observability config to deploy AzureStackHCI Cluster.
     * 
     * @return the observability value.
     */
    public Observability observability() {
        return this.observability;
    }

    /**
     * Set the observability property: Observability config to deploy AzureStackHCI Cluster.
     * 
     * @param observability the observability value to set.
     * @return the DeploymentData object itself.
     */
    public DeploymentData withObservability(Observability observability) {
        this.observability = observability;
        return this;
    }

    /**
     * Get the cluster property: Observability config to deploy AzureStackHCI Cluster.
     * 
     * @return the cluster value.
     */
    public DeploymentCluster cluster() {
        return this.cluster;
    }

    /**
     * Set the cluster property: Observability config to deploy AzureStackHCI Cluster.
     * 
     * @param cluster the cluster value to set.
     * @return the DeploymentData object itself.
     */
    public DeploymentData withCluster(DeploymentCluster cluster) {
        this.cluster = cluster;
        return this;
    }

    /**
     * Get the storage property: Storage config to deploy AzureStackHCI Cluster.
     * 
     * @return the storage value.
     */
    public Storage storage() {
        return this.storage;
    }

    /**
     * Set the storage property: Storage config to deploy AzureStackHCI Cluster.
     * 
     * @param storage the storage value to set.
     * @return the DeploymentData object itself.
     */
    public DeploymentData withStorage(Storage storage) {
        this.storage = storage;
        return this;
    }

    /**
     * Get the namingPrefix property: naming prefix to deploy cluster.
     * 
     * @return the namingPrefix value.
     */
    public String namingPrefix() {
        return this.namingPrefix;
    }

    /**
     * Set the namingPrefix property: naming prefix to deploy cluster.
     * 
     * @param namingPrefix the namingPrefix value to set.
     * @return the DeploymentData object itself.
     */
    public DeploymentData withNamingPrefix(String namingPrefix) {
        this.namingPrefix = namingPrefix;
        return this;
    }

    /**
     * Get the domainFqdn property: FQDN to deploy cluster.
     * 
     * @return the domainFqdn value.
     */
    public String domainFqdn() {
        return this.domainFqdn;
    }

    /**
     * Set the domainFqdn property: FQDN to deploy cluster.
     * 
     * @param domainFqdn the domainFqdn value to set.
     * @return the DeploymentData object itself.
     */
    public DeploymentData withDomainFqdn(String domainFqdn) {
        this.domainFqdn = domainFqdn;
        return this;
    }

    /**
     * Get the infrastructureNetwork property: InfrastructureNetwork config to deploy AzureStackHCI Cluster.
     * 
     * @return the infrastructureNetwork value.
     */
    public List<InfrastructureNetwork> infrastructureNetwork() {
        return this.infrastructureNetwork;
    }

    /**
     * Set the infrastructureNetwork property: InfrastructureNetwork config to deploy AzureStackHCI Cluster.
     * 
     * @param infrastructureNetwork the infrastructureNetwork value to set.
     * @return the DeploymentData object itself.
     */
    public DeploymentData withInfrastructureNetwork(List<InfrastructureNetwork> infrastructureNetwork) {
        this.infrastructureNetwork = infrastructureNetwork;
        return this;
    }

    /**
     * Get the physicalNodes property: list of physical nodes config to deploy AzureStackHCI Cluster.
     * 
     * @return the physicalNodes value.
     */
    public List<PhysicalNodes> physicalNodes() {
        return this.physicalNodes;
    }

    /**
     * Set the physicalNodes property: list of physical nodes config to deploy AzureStackHCI Cluster.
     * 
     * @param physicalNodes the physicalNodes value to set.
     * @return the DeploymentData object itself.
     */
    public DeploymentData withPhysicalNodes(List<PhysicalNodes> physicalNodes) {
        this.physicalNodes = physicalNodes;
        return this;
    }

    /**
     * Get the hostNetwork property: HostNetwork config to deploy AzureStackHCI Cluster.
     * 
     * @return the hostNetwork value.
     */
    public HostNetwork hostNetwork() {
        return this.hostNetwork;
    }

    /**
     * Set the hostNetwork property: HostNetwork config to deploy AzureStackHCI Cluster.
     * 
     * @param hostNetwork the hostNetwork value to set.
     * @return the DeploymentData object itself.
     */
    public DeploymentData withHostNetwork(HostNetwork hostNetwork) {
        this.hostNetwork = hostNetwork;
        return this;
    }

    /**
     * Get the sdnIntegration property: SDN Integration config to deploy AzureStackHCI Cluster.
     * 
     * @return the sdnIntegration value.
     */
    public SdnIntegration sdnIntegration() {
        return this.sdnIntegration;
    }

    /**
     * Set the sdnIntegration property: SDN Integration config to deploy AzureStackHCI Cluster.
     * 
     * @param sdnIntegration the sdnIntegration value to set.
     * @return the DeploymentData object itself.
     */
    public DeploymentData withSdnIntegration(SdnIntegration sdnIntegration) {
        this.sdnIntegration = sdnIntegration;
        return this;
    }

    /**
     * Get the adouPath property: The path to the Active Directory Organizational Unit container object prepared for the
     * deployment.
     * 
     * @return the adouPath value.
     */
    public String adouPath() {
        return this.adouPath;
    }

    /**
     * Set the adouPath property: The path to the Active Directory Organizational Unit container object prepared for the
     * deployment.
     * 
     * @param adouPath the adouPath value to set.
     * @return the DeploymentData object itself.
     */
    public DeploymentData withAdouPath(String adouPath) {
        this.adouPath = adouPath;
        return this;
    }

    /**
     * Get the secretsLocation property: Azure keyvault endpoint. This property is deprecated from 2023-12-01-preview.
     * Please use secrets property instead.
     * 
     * @return the secretsLocation value.
     */
    public String secretsLocation() {
        return this.secretsLocation;
    }

    /**
     * Set the secretsLocation property: Azure keyvault endpoint. This property is deprecated from 2023-12-01-preview.
     * Please use secrets property instead.
     * 
     * @param secretsLocation the secretsLocation value to set.
     * @return the DeploymentData object itself.
     */
    public DeploymentData withSecretsLocation(String secretsLocation) {
        this.secretsLocation = secretsLocation;
        return this;
    }

    /**
     * Get the secrets property: secrets used for cloud deployment.
     * 
     * @return the secrets value.
     */
    public List<EceDeploymentSecrets> secrets() {
        return this.secrets;
    }

    /**
     * Set the secrets property: secrets used for cloud deployment.
     * 
     * @param secrets the secrets value to set.
     * @return the DeploymentData object itself.
     */
    public DeploymentData withSecrets(List<EceDeploymentSecrets> secrets) {
        this.secrets = secrets;
        return this;
    }

    /**
     * Get the optionalServices property: OptionalServices config to deploy AzureStackHCI Cluster.
     * 
     * @return the optionalServices value.
     */
    public OptionalServices optionalServices() {
        return this.optionalServices;
    }

    /**
     * Set the optionalServices property: OptionalServices config to deploy AzureStackHCI Cluster.
     * 
     * @param optionalServices the optionalServices value to set.
     * @return the DeploymentData object itself.
     */
    public DeploymentData withOptionalServices(OptionalServices optionalServices) {
        this.optionalServices = optionalServices;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (securitySettings() != null) {
            securitySettings().validate();
        }
        if (observability() != null) {
            observability().validate();
        }
        if (cluster() != null) {
            cluster().validate();
        }
        if (storage() != null) {
            storage().validate();
        }
        if (infrastructureNetwork() != null) {
            infrastructureNetwork().forEach(e -> e.validate());
        }
        if (physicalNodes() != null) {
            physicalNodes().forEach(e -> e.validate());
        }
        if (hostNetwork() != null) {
            hostNetwork().validate();
        }
        if (sdnIntegration() != null) {
            sdnIntegration().validate();
        }
        if (secrets() != null) {
            secrets().forEach(e -> e.validate());
        }
        if (optionalServices() != null) {
            optionalServices().validate();
        }
    }
}
