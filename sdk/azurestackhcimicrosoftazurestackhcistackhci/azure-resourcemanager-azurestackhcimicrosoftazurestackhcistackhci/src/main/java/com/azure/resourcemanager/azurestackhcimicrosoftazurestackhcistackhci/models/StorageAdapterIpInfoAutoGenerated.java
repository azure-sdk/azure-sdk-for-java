// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhcimicrosoftazurestackhcistackhci.models;

import com.azure.core.annotation.Immutable;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * The StorageAdapter physical nodes of a cluster.
 */
@Immutable
public final class StorageAdapterIpInfoAutoGenerated {
    /*
     * storage adapter physical node name.
     */
    @JsonProperty(value = "physicalNode", access = JsonProperty.Access.WRITE_ONLY)
    private String physicalNode;

    /*
     * The IPv4 address assigned to each storage adapter physical node on your Azure Stack HCI cluster.
     */
    @JsonProperty(value = "ipv4Address", access = JsonProperty.Access.WRITE_ONLY)
    private String ipv4Address;

    /*
     * The SubnetMask address assigned to each storage adapter physical node on your Azure Stack HCI cluster.
     */
    @JsonProperty(value = "subnetMask", access = JsonProperty.Access.WRITE_ONLY)
    private String subnetMask;

    /**
     * Creates an instance of StorageAdapterIpInfoAutoGenerated class.
     */
    public StorageAdapterIpInfoAutoGenerated() {
    }

    /**
     * Get the physicalNode property: storage adapter physical node name.
     * 
     * @return the physicalNode value.
     */
    public String physicalNode() {
        return this.physicalNode;
    }

    /**
     * Get the ipv4Address property: The IPv4 address assigned to each storage adapter physical node on your Azure Stack
     * HCI cluster.
     * 
     * @return the ipv4Address value.
     */
    public String ipv4Address() {
        return this.ipv4Address;
    }

    /**
     * Get the subnetMask property: The SubnetMask address assigned to each storage adapter physical node on your Azure
     * Stack HCI cluster.
     * 
     * @return the subnetMask value.
     */
    public String subnetMask() {
        return this.subnetMask;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
