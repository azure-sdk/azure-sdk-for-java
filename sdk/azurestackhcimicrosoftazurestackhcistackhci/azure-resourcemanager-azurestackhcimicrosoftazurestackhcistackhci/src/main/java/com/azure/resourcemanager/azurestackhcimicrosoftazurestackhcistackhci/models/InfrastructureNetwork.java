// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhcimicrosoftazurestackhcistackhci.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * The InfrastructureNetwork of a AzureStackHCI Cluster.
 */
@Fluent
public final class InfrastructureNetwork {
    /*
     * Subnet mask that matches the provided IP address space.
     */
    @JsonProperty(value = "subnetMask")
    private String subnetMask;

    /*
     * Default gateway that should be used for the provided IP address space.
     */
    @JsonProperty(value = "gateway")
    private String gateway;

    /*
     * Range of IP addresses from which addresses are allocated for nodes within a subnet.
     */
    @JsonProperty(value = "ipPools")
    private List<IpPools> ipPools;

    /*
     * IPv4 address of the DNS servers in your environment.
     */
    @JsonProperty(value = "dnsServers")
    private List<String> dnsServers;

    /*
     * Allows customers to use DHCP for Hosts and Cluster IPs. If not declared, the deployment will default to static IPs. When true, GW and DNS servers are not required
     */
    @JsonProperty(value = "useDhcp")
    private Boolean useDhcp;

    /**
     * Creates an instance of InfrastructureNetwork class.
     */
    public InfrastructureNetwork() {
    }

    /**
     * Get the subnetMask property: Subnet mask that matches the provided IP address space.
     * 
     * @return the subnetMask value.
     */
    public String subnetMask() {
        return this.subnetMask;
    }

    /**
     * Set the subnetMask property: Subnet mask that matches the provided IP address space.
     * 
     * @param subnetMask the subnetMask value to set.
     * @return the InfrastructureNetwork object itself.
     */
    public InfrastructureNetwork withSubnetMask(String subnetMask) {
        this.subnetMask = subnetMask;
        return this;
    }

    /**
     * Get the gateway property: Default gateway that should be used for the provided IP address space.
     * 
     * @return the gateway value.
     */
    public String gateway() {
        return this.gateway;
    }

    /**
     * Set the gateway property: Default gateway that should be used for the provided IP address space.
     * 
     * @param gateway the gateway value to set.
     * @return the InfrastructureNetwork object itself.
     */
    public InfrastructureNetwork withGateway(String gateway) {
        this.gateway = gateway;
        return this;
    }

    /**
     * Get the ipPools property: Range of IP addresses from which addresses are allocated for nodes within a subnet.
     * 
     * @return the ipPools value.
     */
    public List<IpPools> ipPools() {
        return this.ipPools;
    }

    /**
     * Set the ipPools property: Range of IP addresses from which addresses are allocated for nodes within a subnet.
     * 
     * @param ipPools the ipPools value to set.
     * @return the InfrastructureNetwork object itself.
     */
    public InfrastructureNetwork withIpPools(List<IpPools> ipPools) {
        this.ipPools = ipPools;
        return this;
    }

    /**
     * Get the dnsServers property: IPv4 address of the DNS servers in your environment.
     * 
     * @return the dnsServers value.
     */
    public List<String> dnsServers() {
        return this.dnsServers;
    }

    /**
     * Set the dnsServers property: IPv4 address of the DNS servers in your environment.
     * 
     * @param dnsServers the dnsServers value to set.
     * @return the InfrastructureNetwork object itself.
     */
    public InfrastructureNetwork withDnsServers(List<String> dnsServers) {
        this.dnsServers = dnsServers;
        return this;
    }

    /**
     * Get the useDhcp property: Allows customers to use DHCP for Hosts and Cluster IPs. If not declared, the deployment
     * will default to static IPs. When true, GW and DNS servers are not required.
     * 
     * @return the useDhcp value.
     */
    public Boolean useDhcp() {
        return this.useDhcp;
    }

    /**
     * Set the useDhcp property: Allows customers to use DHCP for Hosts and Cluster IPs. If not declared, the deployment
     * will default to static IPs. When true, GW and DNS servers are not required.
     * 
     * @param useDhcp the useDhcp value to set.
     * @return the InfrastructureNetwork object itself.
     */
    public InfrastructureNetwork withUseDhcp(Boolean useDhcp) {
        this.useDhcp = useDhcp;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (ipPools() != null) {
            ipPools().forEach(e -> e.validate());
        }
    }
}
