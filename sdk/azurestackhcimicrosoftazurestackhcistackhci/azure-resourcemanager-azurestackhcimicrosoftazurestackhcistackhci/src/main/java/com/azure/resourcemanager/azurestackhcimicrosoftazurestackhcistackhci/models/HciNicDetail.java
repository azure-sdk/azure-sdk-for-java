// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhcimicrosoftazurestackhcistackhci.models;

import com.azure.core.annotation.Immutable;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * The NIC Detail of a device.
 */
@Immutable
public final class HciNicDetail {
    /*
     * Adapter Name of NIC
     */
    @JsonProperty(value = "adapterName", access = JsonProperty.Access.WRITE_ONLY)
    private String adapterName;

    /*
     * Interface Description of NIC
     */
    @JsonProperty(value = "interfaceDescription", access = JsonProperty.Access.WRITE_ONLY)
    private String interfaceDescription;

    /*
     * Component Id of NIC
     */
    @JsonProperty(value = "componentId", access = JsonProperty.Access.WRITE_ONLY)
    private String componentId;

    /*
     * Driver Version of NIC
     */
    @JsonProperty(value = "driverVersion", access = JsonProperty.Access.WRITE_ONLY)
    private String driverVersion;

    /*
     * Subnet Mask of NIC
     */
    @JsonProperty(value = "ip4Address", access = JsonProperty.Access.WRITE_ONLY)
    private String ip4Address;

    /*
     * Subnet Mask of NIC
     */
    @JsonProperty(value = "subnetMask", access = JsonProperty.Access.WRITE_ONLY)
    private String subnetMask;

    /*
     * Default Gateway of NIC
     */
    @JsonProperty(value = "defaultGateway", access = JsonProperty.Access.WRITE_ONLY)
    private String defaultGateway;

    /*
     * DNS Servers for NIC
     */
    @JsonProperty(value = "dnsServers", access = JsonProperty.Access.WRITE_ONLY)
    private List<String> dnsServers;

    /*
     * Default Isolation of Management NIC
     */
    @JsonProperty(value = "defaultIsolationId", access = JsonProperty.Access.WRITE_ONLY)
    private String defaultIsolationId;

    /*
     * MAC address information of NIC.
     */
    @JsonProperty(value = "macAddress", access = JsonProperty.Access.WRITE_ONLY)
    private String macAddress;

    /*
     * The slot attached to the NIC.
     */
    @JsonProperty(value = "slot", access = JsonProperty.Access.WRITE_ONLY)
    private String slot;

    /*
     * The switch attached to the NIC, if any.
     */
    @JsonProperty(value = "switchName", access = JsonProperty.Access.WRITE_ONLY)
    private String switchName;

    /*
     * The type of NIC, physical, virtual, management.
     */
    @JsonProperty(value = "nicType", access = JsonProperty.Access.WRITE_ONLY)
    private String nicType;

    /*
     * The VLAN ID of the physical NIC.
     */
    @JsonProperty(value = "vlanId", access = JsonProperty.Access.WRITE_ONLY)
    private String vlanId;

    /*
     * The status of NIC, up, disconnected.
     */
    @JsonProperty(value = "nicStatus", access = JsonProperty.Access.WRITE_ONLY)
    private String nicStatus;

    /**
     * Creates an instance of HciNicDetail class.
     */
    public HciNicDetail() {
    }

    /**
     * Get the adapterName property: Adapter Name of NIC.
     * 
     * @return the adapterName value.
     */
    public String adapterName() {
        return this.adapterName;
    }

    /**
     * Get the interfaceDescription property: Interface Description of NIC.
     * 
     * @return the interfaceDescription value.
     */
    public String interfaceDescription() {
        return this.interfaceDescription;
    }

    /**
     * Get the componentId property: Component Id of NIC.
     * 
     * @return the componentId value.
     */
    public String componentId() {
        return this.componentId;
    }

    /**
     * Get the driverVersion property: Driver Version of NIC.
     * 
     * @return the driverVersion value.
     */
    public String driverVersion() {
        return this.driverVersion;
    }

    /**
     * Get the ip4Address property: Subnet Mask of NIC.
     * 
     * @return the ip4Address value.
     */
    public String ip4Address() {
        return this.ip4Address;
    }

    /**
     * Get the subnetMask property: Subnet Mask of NIC.
     * 
     * @return the subnetMask value.
     */
    public String subnetMask() {
        return this.subnetMask;
    }

    /**
     * Get the defaultGateway property: Default Gateway of NIC.
     * 
     * @return the defaultGateway value.
     */
    public String defaultGateway() {
        return this.defaultGateway;
    }

    /**
     * Get the dnsServers property: DNS Servers for NIC.
     * 
     * @return the dnsServers value.
     */
    public List<String> dnsServers() {
        return this.dnsServers;
    }

    /**
     * Get the defaultIsolationId property: Default Isolation of Management NIC.
     * 
     * @return the defaultIsolationId value.
     */
    public String defaultIsolationId() {
        return this.defaultIsolationId;
    }

    /**
     * Get the macAddress property: MAC address information of NIC.
     * 
     * @return the macAddress value.
     */
    public String macAddress() {
        return this.macAddress;
    }

    /**
     * Get the slot property: The slot attached to the NIC.
     * 
     * @return the slot value.
     */
    public String slot() {
        return this.slot;
    }

    /**
     * Get the switchName property: The switch attached to the NIC, if any.
     * 
     * @return the switchName value.
     */
    public String switchName() {
        return this.switchName;
    }

    /**
     * Get the nicType property: The type of NIC, physical, virtual, management.
     * 
     * @return the nicType value.
     */
    public String nicType() {
        return this.nicType;
    }

    /**
     * Get the vlanId property: The VLAN ID of the physical NIC.
     * 
     * @return the vlanId value.
     */
    public String vlanId() {
        return this.vlanId;
    }

    /**
     * Get the nicStatus property: The status of NIC, up, disconnected.
     * 
     * @return the nicStatus value.
     */
    public String nicStatus() {
        return this.nicStatus;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
