// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Represents a clauses in a condition. */
@Fluent
public final class Clause {
    /*
     * Connective used to logically join the values on this clause
     */
    @JsonProperty(value = "clauseConnective")
    private Connective clauseConnective;

    /*
     * The name of the field we are targeting.
     */
    @JsonProperty(value = "field")
    private String field;

    /*
     * Operator which describes how this clause should be constructed into an expression.
     */
    @JsonProperty(value = "operator")
    private ConditionOperator operator;

    /*
     * Represents all values to construct this clause from in combination with the clause's field and operator.
     */
    @JsonProperty(value = "values")
    private List<String> values;

    /**
     * Get the clauseConnective property: Connective used to logically join the values on this clause.
     *
     * @return the clauseConnective value.
     */
    public Connective clauseConnective() {
        return this.clauseConnective;
    }

    /**
     * Set the clauseConnective property: Connective used to logically join the values on this clause.
     *
     * @param clauseConnective the clauseConnective value to set.
     * @return the Clause object itself.
     */
    public Clause withClauseConnective(Connective clauseConnective) {
        this.clauseConnective = clauseConnective;
        return this;
    }

    /**
     * Get the field property: The name of the field we are targeting.
     *
     * @return the field value.
     */
    public String field() {
        return this.field;
    }

    /**
     * Set the field property: The name of the field we are targeting.
     *
     * @param field the field value to set.
     * @return the Clause object itself.
     */
    public Clause withField(String field) {
        this.field = field;
        return this;
    }

    /**
     * Get the operator property: Operator which describes how this clause should be constructed into an expression.
     *
     * @return the operator value.
     */
    public ConditionOperator operator() {
        return this.operator;
    }

    /**
     * Set the operator property: Operator which describes how this clause should be constructed into an expression.
     *
     * @param operator the operator value to set.
     * @return the Clause object itself.
     */
    public Clause withOperator(ConditionOperator operator) {
        this.operator = operator;
        return this;
    }

    /**
     * Get the values property: Represents all values to construct this clause from in combination with the clause's
     * field and operator.
     *
     * @return the values value.
     */
    public List<String> values() {
        return this.values;
    }

    /**
     * Set the values property: Represents all values to construct this clause from in combination with the clause's
     * field and operator.
     *
     * @param values the values value to set.
     * @return the Clause object itself.
     */
    public Clause withValues(List<String> values) {
        this.values = values;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
