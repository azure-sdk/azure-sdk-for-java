// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.securityinsights.models.Flag;
import com.azure.resourcemanager.securityinsights.models.MetadataAuthor;
import com.azure.resourcemanager.securityinsights.models.MetadataCategories;
import com.azure.resourcemanager.securityinsights.models.MetadataDependencies;
import com.azure.resourcemanager.securityinsights.models.MetadataSource;
import com.azure.resourcemanager.securityinsights.models.MetadataSupport;
import com.azure.resourcemanager.securityinsights.models.PackageKind;
import com.azure.resourcemanager.securityinsights.models.ResourceWithEtag;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.LocalDate;
import java.util.List;

/**
 * Represents a Package in Azure Security Insights.
 */
@Fluent
public final class PackageModelInner extends ResourceWithEtag {
    /*
     * package properties
     */
    @JsonProperty(value = "properties")
    private PackageProperties innerProperties;

    /**
     * Creates an instance of PackageModelInner class.
     */
    public PackageModelInner() {
    }

    /**
     * Get the innerProperties property: package properties.
     * 
     * @return the innerProperties value.
     */
    private PackageProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PackageModelInner withEtag(String etag) {
        super.withEtag(etag);
        return this;
    }

    /**
     * Get the contentId property: The content id of the package.
     * 
     * @return the contentId value.
     */
    public String contentId() {
        return this.innerProperties() == null ? null : this.innerProperties().contentId();
    }

    /**
     * Set the contentId property: The content id of the package.
     * 
     * @param contentId the contentId value to set.
     * @return the PackageModelInner object itself.
     */
    public PackageModelInner withContentId(String contentId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new PackageProperties();
        }
        this.innerProperties().withContentId(contentId);
        return this;
    }

    /**
     * Get the contentProductId property: Unique ID for the content. It should be generated based on the contentId,
     * contentKind and the contentVersion of the package.
     * 
     * @return the contentProductId value.
     */
    public String contentProductId() {
        return this.innerProperties() == null ? null : this.innerProperties().contentProductId();
    }

    /**
     * Set the contentProductId property: Unique ID for the content. It should be generated based on the contentId,
     * contentKind and the contentVersion of the package.
     * 
     * @param contentProductId the contentProductId value to set.
     * @return the PackageModelInner object itself.
     */
    public PackageModelInner withContentProductId(String contentProductId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new PackageProperties();
        }
        this.innerProperties().withContentProductId(contentProductId);
        return this;
    }

    /**
     * Get the contentKind property: The package kind.
     * 
     * @return the contentKind value.
     */
    public PackageKind contentKind() {
        return this.innerProperties() == null ? null : this.innerProperties().contentKind();
    }

    /**
     * Set the contentKind property: The package kind.
     * 
     * @param contentKind the contentKind value to set.
     * @return the PackageModelInner object itself.
     */
    public PackageModelInner withContentKind(PackageKind contentKind) {
        if (this.innerProperties() == null) {
            this.innerProperties = new PackageProperties();
        }
        this.innerProperties().withContentKind(contentKind);
        return this;
    }

    /**
     * Get the contentSchemaVersion property: The version of the content schema.
     * 
     * @return the contentSchemaVersion value.
     */
    public String contentSchemaVersion() {
        return this.innerProperties() == null ? null : this.innerProperties().contentSchemaVersion();
    }

    /**
     * Set the contentSchemaVersion property: The version of the content schema.
     * 
     * @param contentSchemaVersion the contentSchemaVersion value to set.
     * @return the PackageModelInner object itself.
     */
    public PackageModelInner withContentSchemaVersion(String contentSchemaVersion) {
        if (this.innerProperties() == null) {
            this.innerProperties = new PackageProperties();
        }
        this.innerProperties().withContentSchemaVersion(contentSchemaVersion);
        return this;
    }

    /**
     * Get the isNew property: Flag indicates if this is a newly published package.
     * 
     * @return the isNew value.
     */
    public Flag isNew() {
        return this.innerProperties() == null ? null : this.innerProperties().isNew();
    }

    /**
     * Set the isNew property: Flag indicates if this is a newly published package.
     * 
     * @param isNew the isNew value to set.
     * @return the PackageModelInner object itself.
     */
    public PackageModelInner withIsNew(Flag isNew) {
        if (this.innerProperties() == null) {
            this.innerProperties = new PackageProperties();
        }
        this.innerProperties().withIsNew(isNew);
        return this;
    }

    /**
     * Get the isPreview property: Flag indicates if this package is in preview.
     * 
     * @return the isPreview value.
     */
    public Flag isPreview() {
        return this.innerProperties() == null ? null : this.innerProperties().isPreview();
    }

    /**
     * Set the isPreview property: Flag indicates if this package is in preview.
     * 
     * @param isPreview the isPreview value to set.
     * @return the PackageModelInner object itself.
     */
    public PackageModelInner withIsPreview(Flag isPreview) {
        if (this.innerProperties() == null) {
            this.innerProperties = new PackageProperties();
        }
        this.innerProperties().withIsPreview(isPreview);
        return this;
    }

    /**
     * Get the isFeatured property: Flag indicates if this package is among the featured list.
     * 
     * @return the isFeatured value.
     */
    public Flag isFeatured() {
        return this.innerProperties() == null ? null : this.innerProperties().isFeatured();
    }

    /**
     * Set the isFeatured property: Flag indicates if this package is among the featured list.
     * 
     * @param isFeatured the isFeatured value to set.
     * @return the PackageModelInner object itself.
     */
    public PackageModelInner withIsFeatured(Flag isFeatured) {
        if (this.innerProperties() == null) {
            this.innerProperties = new PackageProperties();
        }
        this.innerProperties().withIsFeatured(isFeatured);
        return this;
    }

    /**
     * Get the isDeprecated property: Flag indicates if this template is deprecated.
     * 
     * @return the isDeprecated value.
     */
    public Flag isDeprecated() {
        return this.innerProperties() == null ? null : this.innerProperties().isDeprecated();
    }

    /**
     * Set the isDeprecated property: Flag indicates if this template is deprecated.
     * 
     * @param isDeprecated the isDeprecated value to set.
     * @return the PackageModelInner object itself.
     */
    public PackageModelInner withIsDeprecated(Flag isDeprecated) {
        if (this.innerProperties() == null) {
            this.innerProperties = new PackageProperties();
        }
        this.innerProperties().withIsDeprecated(isDeprecated);
        return this;
    }

    /**
     * Get the version property: the latest version number of the package.
     * 
     * @return the version value.
     */
    public String version() {
        return this.innerProperties() == null ? null : this.innerProperties().version();
    }

    /**
     * Set the version property: the latest version number of the package.
     * 
     * @param version the version value to set.
     * @return the PackageModelInner object itself.
     */
    public PackageModelInner withVersion(String version) {
        if (this.innerProperties() == null) {
            this.innerProperties = new PackageProperties();
        }
        this.innerProperties().withVersion(version);
        return this;
    }

    /**
     * Get the displayName property: The display name of the package.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.innerProperties() == null ? null : this.innerProperties().displayName();
    }

    /**
     * Set the displayName property: The display name of the package.
     * 
     * @param displayName the displayName value to set.
     * @return the PackageModelInner object itself.
     */
    public PackageModelInner withDisplayName(String displayName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new PackageProperties();
        }
        this.innerProperties().withDisplayName(displayName);
        return this;
    }

    /**
     * Get the description property: The description of the package.
     * 
     * @return the description value.
     */
    public String description() {
        return this.innerProperties() == null ? null : this.innerProperties().description();
    }

    /**
     * Set the description property: The description of the package.
     * 
     * @param description the description value to set.
     * @return the PackageModelInner object itself.
     */
    public PackageModelInner withDescription(String description) {
        if (this.innerProperties() == null) {
            this.innerProperties = new PackageProperties();
        }
        this.innerProperties().withDescription(description);
        return this;
    }

    /**
     * Get the publisherDisplayName property: The publisher display name of the package.
     * 
     * @return the publisherDisplayName value.
     */
    public String publisherDisplayName() {
        return this.innerProperties() == null ? null : this.innerProperties().publisherDisplayName();
    }

    /**
     * Set the publisherDisplayName property: The publisher display name of the package.
     * 
     * @param publisherDisplayName the publisherDisplayName value to set.
     * @return the PackageModelInner object itself.
     */
    public PackageModelInner withPublisherDisplayName(String publisherDisplayName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new PackageProperties();
        }
        this.innerProperties().withPublisherDisplayName(publisherDisplayName);
        return this;
    }

    /**
     * Get the source property: The source of the package.
     * 
     * @return the source value.
     */
    public MetadataSource source() {
        return this.innerProperties() == null ? null : this.innerProperties().source();
    }

    /**
     * Set the source property: The source of the package.
     * 
     * @param source the source value to set.
     * @return the PackageModelInner object itself.
     */
    public PackageModelInner withSource(MetadataSource source) {
        if (this.innerProperties() == null) {
            this.innerProperties = new PackageProperties();
        }
        this.innerProperties().withSource(source);
        return this;
    }

    /**
     * Get the author property: The author of the package.
     * 
     * @return the author value.
     */
    public MetadataAuthor author() {
        return this.innerProperties() == null ? null : this.innerProperties().author();
    }

    /**
     * Set the author property: The author of the package.
     * 
     * @param author the author value to set.
     * @return the PackageModelInner object itself.
     */
    public PackageModelInner withAuthor(MetadataAuthor author) {
        if (this.innerProperties() == null) {
            this.innerProperties = new PackageProperties();
        }
        this.innerProperties().withAuthor(author);
        return this;
    }

    /**
     * Get the support property: The support tier of the package.
     * 
     * @return the support value.
     */
    public MetadataSupport support() {
        return this.innerProperties() == null ? null : this.innerProperties().support();
    }

    /**
     * Set the support property: The support tier of the package.
     * 
     * @param support the support value to set.
     * @return the PackageModelInner object itself.
     */
    public PackageModelInner withSupport(MetadataSupport support) {
        if (this.innerProperties() == null) {
            this.innerProperties = new PackageProperties();
        }
        this.innerProperties().withSupport(support);
        return this;
    }

    /**
     * Get the dependencies property: The support tier of the package.
     * 
     * @return the dependencies value.
     */
    public MetadataDependencies dependencies() {
        return this.innerProperties() == null ? null : this.innerProperties().dependencies();
    }

    /**
     * Set the dependencies property: The support tier of the package.
     * 
     * @param dependencies the dependencies value to set.
     * @return the PackageModelInner object itself.
     */
    public PackageModelInner withDependencies(MetadataDependencies dependencies) {
        if (this.innerProperties() == null) {
            this.innerProperties = new PackageProperties();
        }
        this.innerProperties().withDependencies(dependencies);
        return this;
    }

    /**
     * Get the providers property: Providers for the package item.
     * 
     * @return the providers value.
     */
    public List<String> providers() {
        return this.innerProperties() == null ? null : this.innerProperties().providers();
    }

    /**
     * Set the providers property: Providers for the package item.
     * 
     * @param providers the providers value to set.
     * @return the PackageModelInner object itself.
     */
    public PackageModelInner withProviders(List<String> providers) {
        if (this.innerProperties() == null) {
            this.innerProperties = new PackageProperties();
        }
        this.innerProperties().withProviders(providers);
        return this;
    }

    /**
     * Get the firstPublishDate property: first publish date package item.
     * 
     * @return the firstPublishDate value.
     */
    public LocalDate firstPublishDate() {
        return this.innerProperties() == null ? null : this.innerProperties().firstPublishDate();
    }

    /**
     * Set the firstPublishDate property: first publish date package item.
     * 
     * @param firstPublishDate the firstPublishDate value to set.
     * @return the PackageModelInner object itself.
     */
    public PackageModelInner withFirstPublishDate(LocalDate firstPublishDate) {
        if (this.innerProperties() == null) {
            this.innerProperties = new PackageProperties();
        }
        this.innerProperties().withFirstPublishDate(firstPublishDate);
        return this;
    }

    /**
     * Get the lastPublishDate property: last publish date for the package item.
     * 
     * @return the lastPublishDate value.
     */
    public LocalDate lastPublishDate() {
        return this.innerProperties() == null ? null : this.innerProperties().lastPublishDate();
    }

    /**
     * Set the lastPublishDate property: last publish date for the package item.
     * 
     * @param lastPublishDate the lastPublishDate value to set.
     * @return the PackageModelInner object itself.
     */
    public PackageModelInner withLastPublishDate(LocalDate lastPublishDate) {
        if (this.innerProperties() == null) {
            this.innerProperties = new PackageProperties();
        }
        this.innerProperties().withLastPublishDate(lastPublishDate);
        return this;
    }

    /**
     * Get the categories property: The categories of the package.
     * 
     * @return the categories value.
     */
    public MetadataCategories categories() {
        return this.innerProperties() == null ? null : this.innerProperties().categories();
    }

    /**
     * Set the categories property: The categories of the package.
     * 
     * @param categories the categories value to set.
     * @return the PackageModelInner object itself.
     */
    public PackageModelInner withCategories(MetadataCategories categories) {
        if (this.innerProperties() == null) {
            this.innerProperties = new PackageProperties();
        }
        this.innerProperties().withCategories(categories);
        return this;
    }

    /**
     * Get the threatAnalysisTactics property: the tactics the resource covers.
     * 
     * @return the threatAnalysisTactics value.
     */
    public List<String> threatAnalysisTactics() {
        return this.innerProperties() == null ? null : this.innerProperties().threatAnalysisTactics();
    }

    /**
     * Set the threatAnalysisTactics property: the tactics the resource covers.
     * 
     * @param threatAnalysisTactics the threatAnalysisTactics value to set.
     * @return the PackageModelInner object itself.
     */
    public PackageModelInner withThreatAnalysisTactics(List<String> threatAnalysisTactics) {
        if (this.innerProperties() == null) {
            this.innerProperties = new PackageProperties();
        }
        this.innerProperties().withThreatAnalysisTactics(threatAnalysisTactics);
        return this;
    }

    /**
     * Get the threatAnalysisTechniques property: the techniques the resource covers, these have to be aligned with the
     * tactics being used.
     * 
     * @return the threatAnalysisTechniques value.
     */
    public List<String> threatAnalysisTechniques() {
        return this.innerProperties() == null ? null : this.innerProperties().threatAnalysisTechniques();
    }

    /**
     * Set the threatAnalysisTechniques property: the techniques the resource covers, these have to be aligned with the
     * tactics being used.
     * 
     * @param threatAnalysisTechniques the threatAnalysisTechniques value to set.
     * @return the PackageModelInner object itself.
     */
    public PackageModelInner withThreatAnalysisTechniques(List<String> threatAnalysisTechniques) {
        if (this.innerProperties() == null) {
            this.innerProperties = new PackageProperties();
        }
        this.innerProperties().withThreatAnalysisTechniques(threatAnalysisTechniques);
        return this;
    }

    /**
     * Get the icon property: the icon identifier. this id can later be fetched from the content metadata.
     * 
     * @return the icon value.
     */
    public String icon() {
        return this.innerProperties() == null ? null : this.innerProperties().icon();
    }

    /**
     * Set the icon property: the icon identifier. this id can later be fetched from the content metadata.
     * 
     * @param icon the icon value to set.
     * @return the PackageModelInner object itself.
     */
    public PackageModelInner withIcon(String icon) {
        if (this.innerProperties() == null) {
            this.innerProperties = new PackageProperties();
        }
        this.innerProperties().withIcon(icon);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
