// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Describes the Rfc connector.
 */
@Fluent
public final class RfcConnector extends SystemsConfigurationConnector {
    /*
     * Represents the types of SAP systems.
     */
    private SystemConfigurationConnectorType type = SystemConfigurationConnectorType.RFC;

    /*
     * FQDN, hostname, or IP address of the ABAP server.
     */
    private String abapServerHost;

    /*
     * FQDN, hostname, or IP address of the Message server.
     */
    private String messageServerHost;

    /*
     * Logon group of the message server.
     */
    private String group;

    /*
     * Port number, or service name (from /etc/services) of the message server.
     */
    private String messageServerService;

    /*
     * SNC QOP.
     * Options are 1, 2, 3, 8, 9.
     */
    private String sncQop;

    /*
     * The SAP code page used for character encoding.
     * Example - 1100
     */
    private String codePage;

    /*
     * System number of the ABAP server.
     */
    private String systemNumber;

    /*
     * System ID of the ABAP server.
     * Example - A4H
     */
    private String systemId;

    /*
     * Client number of the ABAP server.
     * Example - 001
     */
    private String client;

    /*
     * The authentication type to SAP.
     */
    private SapAuthenticationType authenticationType;

    /**
     * Creates an instance of RfcConnector class.
     */
    public RfcConnector() {
    }

    /**
     * Get the type property: Represents the types of SAP systems.
     * 
     * @return the type value.
     */
    @Override
    public SystemConfigurationConnectorType type() {
        return this.type;
    }

    /**
     * Get the abapServerHost property: FQDN, hostname, or IP address of the ABAP server.
     * 
     * @return the abapServerHost value.
     */
    public String abapServerHost() {
        return this.abapServerHost;
    }

    /**
     * Set the abapServerHost property: FQDN, hostname, or IP address of the ABAP server.
     * 
     * @param abapServerHost the abapServerHost value to set.
     * @return the RfcConnector object itself.
     */
    public RfcConnector withAbapServerHost(String abapServerHost) {
        this.abapServerHost = abapServerHost;
        return this;
    }

    /**
     * Get the messageServerHost property: FQDN, hostname, or IP address of the Message server.
     * 
     * @return the messageServerHost value.
     */
    public String messageServerHost() {
        return this.messageServerHost;
    }

    /**
     * Set the messageServerHost property: FQDN, hostname, or IP address of the Message server.
     * 
     * @param messageServerHost the messageServerHost value to set.
     * @return the RfcConnector object itself.
     */
    public RfcConnector withMessageServerHost(String messageServerHost) {
        this.messageServerHost = messageServerHost;
        return this;
    }

    /**
     * Get the group property: Logon group of the message server.
     * 
     * @return the group value.
     */
    public String group() {
        return this.group;
    }

    /**
     * Set the group property: Logon group of the message server.
     * 
     * @param group the group value to set.
     * @return the RfcConnector object itself.
     */
    public RfcConnector withGroup(String group) {
        this.group = group;
        return this;
    }

    /**
     * Get the messageServerService property: Port number, or service name (from /etc/services) of the message server.
     * 
     * @return the messageServerService value.
     */
    public String messageServerService() {
        return this.messageServerService;
    }

    /**
     * Set the messageServerService property: Port number, or service name (from /etc/services) of the message server.
     * 
     * @param messageServerService the messageServerService value to set.
     * @return the RfcConnector object itself.
     */
    public RfcConnector withMessageServerService(String messageServerService) {
        this.messageServerService = messageServerService;
        return this;
    }

    /**
     * Get the sncQop property: SNC QOP.
     * Options are 1, 2, 3, 8, 9.
     * 
     * @return the sncQop value.
     */
    public String sncQop() {
        return this.sncQop;
    }

    /**
     * Set the sncQop property: SNC QOP.
     * Options are 1, 2, 3, 8, 9.
     * 
     * @param sncQop the sncQop value to set.
     * @return the RfcConnector object itself.
     */
    public RfcConnector withSncQop(String sncQop) {
        this.sncQop = sncQop;
        return this;
    }

    /**
     * Get the codePage property: The SAP code page used for character encoding.
     * Example - 1100.
     * 
     * @return the codePage value.
     */
    public String codePage() {
        return this.codePage;
    }

    /**
     * Set the codePage property: The SAP code page used for character encoding.
     * Example - 1100.
     * 
     * @param codePage the codePage value to set.
     * @return the RfcConnector object itself.
     */
    public RfcConnector withCodePage(String codePage) {
        this.codePage = codePage;
        return this;
    }

    /**
     * Get the systemNumber property: System number of the ABAP server.
     * 
     * @return the systemNumber value.
     */
    public String systemNumber() {
        return this.systemNumber;
    }

    /**
     * Set the systemNumber property: System number of the ABAP server.
     * 
     * @param systemNumber the systemNumber value to set.
     * @return the RfcConnector object itself.
     */
    public RfcConnector withSystemNumber(String systemNumber) {
        this.systemNumber = systemNumber;
        return this;
    }

    /**
     * Get the systemId property: System ID of the ABAP server.
     * Example - A4H.
     * 
     * @return the systemId value.
     */
    public String systemId() {
        return this.systemId;
    }

    /**
     * Set the systemId property: System ID of the ABAP server.
     * Example - A4H.
     * 
     * @param systemId the systemId value to set.
     * @return the RfcConnector object itself.
     */
    public RfcConnector withSystemId(String systemId) {
        this.systemId = systemId;
        return this;
    }

    /**
     * Get the client property: Client number of the ABAP server.
     * Example - 001.
     * 
     * @return the client value.
     */
    public String client() {
        return this.client;
    }

    /**
     * Set the client property: Client number of the ABAP server.
     * Example - 001.
     * 
     * @param client the client value to set.
     * @return the RfcConnector object itself.
     */
    public RfcConnector withClient(String client) {
        this.client = client;
        return this;
    }

    /**
     * Get the authenticationType property: The authentication type to SAP.
     * 
     * @return the authenticationType value.
     */
    public SapAuthenticationType authenticationType() {
        return this.authenticationType;
    }

    /**
     * Set the authenticationType property: The authentication type to SAP.
     * 
     * @param authenticationType the authenticationType value to set.
     * @return the RfcConnector object itself.
     */
    public RfcConnector withAuthenticationType(SapAuthenticationType authenticationType) {
        this.authenticationType = authenticationType;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (systemNumber() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property systemNumber in model RfcConnector"));
        }
        if (systemId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property systemId in model RfcConnector"));
        }
        if (client() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property client in model RfcConnector"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(RfcConnector.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("systemNumber", this.systemNumber);
        jsonWriter.writeStringField("systemId", this.systemId);
        jsonWriter.writeStringField("client", this.client);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeStringField("abapServerHost", this.abapServerHost);
        jsonWriter.writeStringField("messageServerHost", this.messageServerHost);
        jsonWriter.writeStringField("group", this.group);
        jsonWriter.writeStringField("messageServerService", this.messageServerService);
        jsonWriter.writeStringField("sncQop", this.sncQop);
        jsonWriter.writeStringField("codePage", this.codePage);
        jsonWriter.writeStringField("authenticationType",
            this.authenticationType == null ? null : this.authenticationType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RfcConnector from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RfcConnector if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RfcConnector.
     */
    public static RfcConnector fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RfcConnector deserializedRfcConnector = new RfcConnector();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("systemNumber".equals(fieldName)) {
                    deserializedRfcConnector.systemNumber = reader.getString();
                } else if ("systemId".equals(fieldName)) {
                    deserializedRfcConnector.systemId = reader.getString();
                } else if ("client".equals(fieldName)) {
                    deserializedRfcConnector.client = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedRfcConnector.type = SystemConfigurationConnectorType.fromString(reader.getString());
                } else if ("abapServerHost".equals(fieldName)) {
                    deserializedRfcConnector.abapServerHost = reader.getString();
                } else if ("messageServerHost".equals(fieldName)) {
                    deserializedRfcConnector.messageServerHost = reader.getString();
                } else if ("group".equals(fieldName)) {
                    deserializedRfcConnector.group = reader.getString();
                } else if ("messageServerService".equals(fieldName)) {
                    deserializedRfcConnector.messageServerService = reader.getString();
                } else if ("sncQop".equals(fieldName)) {
                    deserializedRfcConnector.sncQop = reader.getString();
                } else if ("codePage".equals(fieldName)) {
                    deserializedRfcConnector.codePage = reader.getString();
                } else if ("authenticationType".equals(fieldName)) {
                    deserializedRfcConnector.authenticationType = SapAuthenticationType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRfcConnector;
        });
    }
}
