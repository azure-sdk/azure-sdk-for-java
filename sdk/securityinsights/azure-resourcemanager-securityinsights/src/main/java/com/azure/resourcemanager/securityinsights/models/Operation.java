// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Represents the operation to be applied to all items captured by this bulk action. */
@Fluent
public final class Operation {
    /*
     * Describes which type of operation we are applying to items captured by this bulk action.
     */
    @JsonProperty(value = "type")
    private OperationType type;

    /*
     * List of operation steps to be applied.
     */
    @JsonProperty(value = "steps")
    private List<OperationStep> steps;

    /**
     * Get the type property: Describes which type of operation we are applying to items captured by this bulk action.
     *
     * @return the type value.
     */
    public OperationType type() {
        return this.type;
    }

    /**
     * Set the type property: Describes which type of operation we are applying to items captured by this bulk action.
     *
     * @param type the type value to set.
     * @return the Operation object itself.
     */
    public Operation withType(OperationType type) {
        this.type = type;
        return this;
    }

    /**
     * Get the steps property: List of operation steps to be applied.
     *
     * @return the steps value.
     */
    public List<OperationStep> steps() {
        return this.steps;
    }

    /**
     * Set the steps property: List of operation steps to be applied.
     *
     * @param steps the steps value to set.
     * @return the Operation object itself.
     */
    public Operation withSteps(List<OperationStep> steps) {
        this.steps = steps;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (steps() != null) {
            steps().forEach(e -> e.validate());
        }
    }
}
