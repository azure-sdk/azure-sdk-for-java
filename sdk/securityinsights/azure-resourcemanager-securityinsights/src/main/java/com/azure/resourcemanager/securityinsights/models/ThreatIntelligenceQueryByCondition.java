// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Definition of the query threat intelligence objects by condition parameter. */
@Fluent
public final class ThreatIntelligenceQueryByCondition {
    /*
     * The query condition.
     */
    @JsonProperty(value = "condition")
    private Condition condition;

    /*
     * Number of threat intelligence indicators to return in one page.
     */
    @JsonProperty(value = "pageSize")
    private Integer pageSize;

    /*
     * Columns to sort by and sorting order
     */
    @JsonProperty(value = "sortBy")
    private List<ThreatIntelligenceSortingCriteria> sortBy;

    /*
     * Skip token.
     */
    @JsonProperty(value = "skipToken")
    private String skipToken;

    /**
     * Get the condition property: The query condition.
     *
     * @return the condition value.
     */
    public Condition condition() {
        return this.condition;
    }

    /**
     * Set the condition property: The query condition.
     *
     * @param condition the condition value to set.
     * @return the ThreatIntelligenceQueryByCondition object itself.
     */
    public ThreatIntelligenceQueryByCondition withCondition(Condition condition) {
        this.condition = condition;
        return this;
    }

    /**
     * Get the pageSize property: Number of threat intelligence indicators to return in one page.
     *
     * @return the pageSize value.
     */
    public Integer pageSize() {
        return this.pageSize;
    }

    /**
     * Set the pageSize property: Number of threat intelligence indicators to return in one page.
     *
     * @param pageSize the pageSize value to set.
     * @return the ThreatIntelligenceQueryByCondition object itself.
     */
    public ThreatIntelligenceQueryByCondition withPageSize(Integer pageSize) {
        this.pageSize = pageSize;
        return this;
    }

    /**
     * Get the sortBy property: Columns to sort by and sorting order.
     *
     * @return the sortBy value.
     */
    public List<ThreatIntelligenceSortingCriteria> sortBy() {
        return this.sortBy;
    }

    /**
     * Set the sortBy property: Columns to sort by and sorting order.
     *
     * @param sortBy the sortBy value to set.
     * @return the ThreatIntelligenceQueryByCondition object itself.
     */
    public ThreatIntelligenceQueryByCondition withSortBy(List<ThreatIntelligenceSortingCriteria> sortBy) {
        this.sortBy = sortBy;
        return this;
    }

    /**
     * Get the skipToken property: Skip token.
     *
     * @return the skipToken value.
     */
    public String skipToken() {
        return this.skipToken;
    }

    /**
     * Set the skipToken property: Skip token.
     *
     * @param skipToken the skipToken value to set.
     * @return the ThreatIntelligenceQueryByCondition object itself.
     */
    public ThreatIntelligenceQueryByCondition withSkipToken(String skipToken) {
        this.skipToken = skipToken;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (condition() != null) {
            condition().validate();
        }
        if (sortBy() != null) {
            sortBy().forEach(e -> e.validate());
        }
    }
}
