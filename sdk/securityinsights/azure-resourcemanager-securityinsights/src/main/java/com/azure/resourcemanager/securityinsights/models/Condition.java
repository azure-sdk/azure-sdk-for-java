// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Represents a condition which is composed of a set of clauses. */
@Fluent
public final class Condition {
    /*
     * Connective used to logically join the clauses.
     */
    @JsonProperty(value = "conditionConnective")
    private Connective conditionConnective;

    /*
     * List of clauses which make up this condition.
     */
    @JsonProperty(value = "clauses")
    private List<Clause> clauses;

    /**
     * Get the conditionConnective property: Connective used to logically join the clauses.
     *
     * @return the conditionConnective value.
     */
    public Connective conditionConnective() {
        return this.conditionConnective;
    }

    /**
     * Set the conditionConnective property: Connective used to logically join the clauses.
     *
     * @param conditionConnective the conditionConnective value to set.
     * @return the Condition object itself.
     */
    public Condition withConditionConnective(Connective conditionConnective) {
        this.conditionConnective = conditionConnective;
        return this;
    }

    /**
     * Get the clauses property: List of clauses which make up this condition.
     *
     * @return the clauses value.
     */
    public List<Clause> clauses() {
        return this.clauses;
    }

    /**
     * Set the clauses property: List of clauses which make up this condition.
     *
     * @param clauses the clauses value to set.
     * @return the Condition object itself.
     */
    public Condition withClauses(List<Clause> clauses) {
        this.clauses = clauses;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (clauses() != null) {
            clauses().forEach(e -> e.validate());
        }
    }
}
