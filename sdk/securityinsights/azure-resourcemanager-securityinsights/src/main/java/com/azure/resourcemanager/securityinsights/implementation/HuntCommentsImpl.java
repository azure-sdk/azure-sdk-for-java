// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.securityinsights.fluent.HuntCommentsClient;
import com.azure.resourcemanager.securityinsights.fluent.models.HuntCommentInner;
import com.azure.resourcemanager.securityinsights.models.HuntComment;
import com.azure.resourcemanager.securityinsights.models.HuntComments;

public final class HuntCommentsImpl implements HuntComments {
    private static final ClientLogger LOGGER = new ClientLogger(HuntCommentsImpl.class);

    private final HuntCommentsClient innerClient;

    private final com.azure.resourcemanager.securityinsights.SecurityInsightsManager serviceManager;

    public HuntCommentsImpl(HuntCommentsClient innerClient,
        com.azure.resourcemanager.securityinsights.SecurityInsightsManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<HuntComment> list(String resourceGroupName, String workspaceName, String huntId) {
        PagedIterable<HuntCommentInner> inner = this.serviceClient().list(resourceGroupName, workspaceName, huntId);
        return Utils.mapPage(inner, inner1 -> new HuntCommentImpl(inner1, this.manager()));
    }

    public PagedIterable<HuntComment> list(String resourceGroupName, String workspaceName, String huntId, String filter,
        String orderby, Integer top, String skipToken, Context context) {
        PagedIterable<HuntCommentInner> inner = this.serviceClient().list(resourceGroupName, workspaceName, huntId,
            filter, orderby, top, skipToken, context);
        return Utils.mapPage(inner, inner1 -> new HuntCommentImpl(inner1, this.manager()));
    }

    public Response<HuntComment> getWithResponse(String resourceGroupName, String workspaceName, String huntId,
        String huntCommentId, Context context) {
        Response<HuntCommentInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, workspaceName, huntId, huntCommentId, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new HuntCommentImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public HuntComment get(String resourceGroupName, String workspaceName, String huntId, String huntCommentId) {
        HuntCommentInner inner = this.serviceClient().get(resourceGroupName, workspaceName, huntId, huntCommentId);
        if (inner != null) {
            return new HuntCommentImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteWithResponse(String resourceGroupName, String workspaceName, String huntId,
        String huntCommentId, Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, workspaceName, huntId, huntCommentId,
            context);
    }

    public void delete(String resourceGroupName, String workspaceName, String huntId, String huntCommentId) {
        this.serviceClient().delete(resourceGroupName, workspaceName, huntId, huntCommentId);
    }

    public HuntComment getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = Utils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String huntId = Utils.getValueFromIdByName(id, "hunts");
        if (huntId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'hunts'.", id)));
        }
        String huntCommentId = Utils.getValueFromIdByName(id, "comments");
        if (huntCommentId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'comments'.", id)));
        }
        return this.getWithResponse(resourceGroupName, workspaceName, huntId, huntCommentId, Context.NONE).getValue();
    }

    public Response<HuntComment> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = Utils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String huntId = Utils.getValueFromIdByName(id, "hunts");
        if (huntId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'hunts'.", id)));
        }
        String huntCommentId = Utils.getValueFromIdByName(id, "comments");
        if (huntCommentId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'comments'.", id)));
        }
        return this.getWithResponse(resourceGroupName, workspaceName, huntId, huntCommentId, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = Utils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String huntId = Utils.getValueFromIdByName(id, "hunts");
        if (huntId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'hunts'.", id)));
        }
        String huntCommentId = Utils.getValueFromIdByName(id, "comments");
        if (huntCommentId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'comments'.", id)));
        }
        this.deleteWithResponse(resourceGroupName, workspaceName, huntId, huntCommentId, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = Utils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String huntId = Utils.getValueFromIdByName(id, "hunts");
        if (huntId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'hunts'.", id)));
        }
        String huntCommentId = Utils.getValueFromIdByName(id, "comments");
        if (huntCommentId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'comments'.", id)));
        }
        return this.deleteWithResponse(resourceGroupName, workspaceName, huntId, huntCommentId, context);
    }

    private HuntCommentsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.securityinsights.SecurityInsightsManager manager() {
        return this.serviceManager;
    }

    public HuntCommentImpl define(String name) {
        return new HuntCommentImpl(name, this.manager());
    }
}
