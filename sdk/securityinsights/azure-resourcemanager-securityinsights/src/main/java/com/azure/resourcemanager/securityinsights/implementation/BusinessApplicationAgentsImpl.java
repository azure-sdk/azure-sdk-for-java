// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.securityinsights.fluent.BusinessApplicationAgentsClient;
import com.azure.resourcemanager.securityinsights.fluent.models.BusinessApplicationAgentResourceInner;
import com.azure.resourcemanager.securityinsights.models.BusinessApplicationAgentResource;
import com.azure.resourcemanager.securityinsights.models.BusinessApplicationAgents;

public final class BusinessApplicationAgentsImpl implements BusinessApplicationAgents {
    private static final ClientLogger LOGGER = new ClientLogger(BusinessApplicationAgentsImpl.class);

    private final BusinessApplicationAgentsClient innerClient;

    private final com.azure.resourcemanager.securityinsights.SecurityInsightsManager serviceManager;

    public BusinessApplicationAgentsImpl(BusinessApplicationAgentsClient innerClient,
        com.azure.resourcemanager.securityinsights.SecurityInsightsManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<Void> deleteWithResponse(String resourceGroupName, String workspaceName, String agentResourceName,
        Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, workspaceName, agentResourceName, context);
    }

    public void delete(String resourceGroupName, String workspaceName, String agentResourceName) {
        this.serviceClient().delete(resourceGroupName, workspaceName, agentResourceName);
    }

    public PagedIterable<BusinessApplicationAgentResource> list(String resourceGroupName, String workspaceName) {
        PagedIterable<BusinessApplicationAgentResourceInner> inner
            = this.serviceClient().list(resourceGroupName, workspaceName);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new BusinessApplicationAgentResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<BusinessApplicationAgentResource> list(String resourceGroupName, String workspaceName,
        String filter, String skipToken, Context context) {
        PagedIterable<BusinessApplicationAgentResourceInner> inner
            = this.serviceClient().list(resourceGroupName, workspaceName, filter, skipToken, context);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new BusinessApplicationAgentResourceImpl(inner1, this.manager()));
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = ResourceManagerUtils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String agentResourceName = ResourceManagerUtils.getValueFromIdByName(id, "businessApplicationAgents");
        if (agentResourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'businessApplicationAgents'.", id)));
        }
        this.deleteWithResponse(resourceGroupName, workspaceName, agentResourceName, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = ResourceManagerUtils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String agentResourceName = ResourceManagerUtils.getValueFromIdByName(id, "businessApplicationAgents");
        if (agentResourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'businessApplicationAgents'.", id)));
        }
        return this.deleteWithResponse(resourceGroupName, workspaceName, agentResourceName, context);
    }

    private BusinessApplicationAgentsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.securityinsights.SecurityInsightsManager manager() {
        return this.serviceManager;
    }

    public BusinessApplicationAgentResourceImpl define(String name) {
        return new BusinessApplicationAgentResourceImpl(name, this.manager());
    }
}
