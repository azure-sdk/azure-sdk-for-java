// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The request paging configuration for NextPageToken and PersistentToken paging type parameters.
 */
@Fluent
public final class RestApiPollerRequestPagingTokenConfig extends RestApiPollerRequestPagingConfig {
    /*
     * JSON path of next page token in HTTP response payload
     */
    private String nextPageTokenJsonPath;

    /*
     * JSON path of flag in HTTP response payload to indicate more pages
     */
    private String hasNextFlagJsonPath;

    /*
     * HTTP response header name of next page token
     */
    private String nextPageTokenResponseHeader;

    /*
     * Next page parameter name in HTTP request
     */
    private String nextPageParaName;

    /*
     * Next page header name in the request
     */
    private String nextPageRequestHeader;

    /**
     * Creates an instance of RestApiPollerRequestPagingTokenConfig class.
     */
    public RestApiPollerRequestPagingTokenConfig() {
    }

    /**
     * Get the nextPageTokenJsonPath property: JSON path of next page token in HTTP response payload.
     * 
     * @return the nextPageTokenJsonPath value.
     */
    public String nextPageTokenJsonPath() {
        return this.nextPageTokenJsonPath;
    }

    /**
     * Set the nextPageTokenJsonPath property: JSON path of next page token in HTTP response payload.
     * 
     * @param nextPageTokenJsonPath the nextPageTokenJsonPath value to set.
     * @return the RestApiPollerRequestPagingTokenConfig object itself.
     */
    public RestApiPollerRequestPagingTokenConfig withNextPageTokenJsonPath(String nextPageTokenJsonPath) {
        this.nextPageTokenJsonPath = nextPageTokenJsonPath;
        return this;
    }

    /**
     * Get the hasNextFlagJsonPath property: JSON path of flag in HTTP response payload to indicate more pages.
     * 
     * @return the hasNextFlagJsonPath value.
     */
    public String hasNextFlagJsonPath() {
        return this.hasNextFlagJsonPath;
    }

    /**
     * Set the hasNextFlagJsonPath property: JSON path of flag in HTTP response payload to indicate more pages.
     * 
     * @param hasNextFlagJsonPath the hasNextFlagJsonPath value to set.
     * @return the RestApiPollerRequestPagingTokenConfig object itself.
     */
    public RestApiPollerRequestPagingTokenConfig withHasNextFlagJsonPath(String hasNextFlagJsonPath) {
        this.hasNextFlagJsonPath = hasNextFlagJsonPath;
        return this;
    }

    /**
     * Get the nextPageTokenResponseHeader property: HTTP response header name of next page token.
     * 
     * @return the nextPageTokenResponseHeader value.
     */
    public String nextPageTokenResponseHeader() {
        return this.nextPageTokenResponseHeader;
    }

    /**
     * Set the nextPageTokenResponseHeader property: HTTP response header name of next page token.
     * 
     * @param nextPageTokenResponseHeader the nextPageTokenResponseHeader value to set.
     * @return the RestApiPollerRequestPagingTokenConfig object itself.
     */
    public RestApiPollerRequestPagingTokenConfig withNextPageTokenResponseHeader(String nextPageTokenResponseHeader) {
        this.nextPageTokenResponseHeader = nextPageTokenResponseHeader;
        return this;
    }

    /**
     * Get the nextPageParaName property: Next page parameter name in HTTP request.
     * 
     * @return the nextPageParaName value.
     */
    public String nextPageParaName() {
        return this.nextPageParaName;
    }

    /**
     * Set the nextPageParaName property: Next page parameter name in HTTP request.
     * 
     * @param nextPageParaName the nextPageParaName value to set.
     * @return the RestApiPollerRequestPagingTokenConfig object itself.
     */
    public RestApiPollerRequestPagingTokenConfig withNextPageParaName(String nextPageParaName) {
        this.nextPageParaName = nextPageParaName;
        return this;
    }

    /**
     * Get the nextPageRequestHeader property: Next page header name in the request.
     * 
     * @return the nextPageRequestHeader value.
     */
    public String nextPageRequestHeader() {
        return this.nextPageRequestHeader;
    }

    /**
     * Set the nextPageRequestHeader property: Next page header name in the request.
     * 
     * @param nextPageRequestHeader the nextPageRequestHeader value to set.
     * @return the RestApiPollerRequestPagingTokenConfig object itself.
     */
    public RestApiPollerRequestPagingTokenConfig withNextPageRequestHeader(String nextPageRequestHeader) {
        this.nextPageRequestHeader = nextPageRequestHeader;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RestApiPollerRequestPagingTokenConfig withPagingType(RestApiPollerRequestPagingKind pagingType) {
        super.withPagingType(pagingType);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RestApiPollerRequestPagingTokenConfig withPageSize(Integer pageSize) {
        super.withPageSize(pageSize);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RestApiPollerRequestPagingTokenConfig withPageSizeParameterName(String pageSizeParameterName) {
        super.withPageSizeParameterName(pageSizeParameterName);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("pagingType", pagingType() == null ? null : pagingType().toString());
        jsonWriter.writeNumberField("pageSize", pageSize());
        jsonWriter.writeStringField("pageSizeParameterName", pageSizeParameterName());
        jsonWriter.writeStringField("nextPageTokenJsonPath", this.nextPageTokenJsonPath);
        jsonWriter.writeStringField("hasNextFlagJsonPath", this.hasNextFlagJsonPath);
        jsonWriter.writeStringField("nextPageTokenResponseHeader", this.nextPageTokenResponseHeader);
        jsonWriter.writeStringField("nextPageParaName", this.nextPageParaName);
        jsonWriter.writeStringField("nextPageRequestHeader", this.nextPageRequestHeader);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RestApiPollerRequestPagingTokenConfig from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RestApiPollerRequestPagingTokenConfig if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RestApiPollerRequestPagingTokenConfig.
     */
    public static RestApiPollerRequestPagingTokenConfig fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RestApiPollerRequestPagingTokenConfig deserializedRestApiPollerRequestPagingTokenConfig
                = new RestApiPollerRequestPagingTokenConfig();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("pagingType".equals(fieldName)) {
                    deserializedRestApiPollerRequestPagingTokenConfig
                        .withPagingType(RestApiPollerRequestPagingKind.fromString(reader.getString()));
                } else if ("pageSize".equals(fieldName)) {
                    deserializedRestApiPollerRequestPagingTokenConfig
                        .withPageSize(reader.getNullable(JsonReader::getInt));
                } else if ("pageSizeParameterName".equals(fieldName)) {
                    deserializedRestApiPollerRequestPagingTokenConfig.withPageSizeParameterName(reader.getString());
                } else if ("nextPageTokenJsonPath".equals(fieldName)) {
                    deserializedRestApiPollerRequestPagingTokenConfig.nextPageTokenJsonPath = reader.getString();
                } else if ("hasNextFlagJsonPath".equals(fieldName)) {
                    deserializedRestApiPollerRequestPagingTokenConfig.hasNextFlagJsonPath = reader.getString();
                } else if ("nextPageTokenResponseHeader".equals(fieldName)) {
                    deserializedRestApiPollerRequestPagingTokenConfig.nextPageTokenResponseHeader = reader.getString();
                } else if ("nextPageParaName".equals(fieldName)) {
                    deserializedRestApiPollerRequestPagingTokenConfig.nextPageParaName = reader.getString();
                } else if ("nextPageRequestHeader".equals(fieldName)) {
                    deserializedRestApiPollerRequestPagingTokenConfig.nextPageRequestHeader = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRestApiPollerRequestPagingTokenConfig;
        });
    }
}
