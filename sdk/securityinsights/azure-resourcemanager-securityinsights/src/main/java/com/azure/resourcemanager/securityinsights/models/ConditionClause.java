// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * Represents a single clause to be evaluated by a NormalizedCondition.
 */
@Fluent
public final class ConditionClause {
    /*
     * The connective used to join all values in this ConditionClause
     */
    @JsonProperty(value = "clauseConnective")
    private Connective clauseConnective;

    /*
     * The name of the field that is evaluated.
     */
    @JsonProperty(value = "field", required = true)
    private String field;

    /*
     * Represents an operator in a ConditionClause.
     */
    @JsonProperty(value = "operator", required = true)
    private Operator operator;

    /*
     * The top level connective operator for this condition.
     */
    @JsonProperty(value = "values", required = true)
    private List<String> values;

    /**
     * Creates an instance of ConditionClause class.
     */
    public ConditionClause() {
    }

    /**
     * Get the clauseConnective property: The connective used to join all values in this ConditionClause.
     * 
     * @return the clauseConnective value.
     */
    public Connective clauseConnective() {
        return this.clauseConnective;
    }

    /**
     * Set the clauseConnective property: The connective used to join all values in this ConditionClause.
     * 
     * @param clauseConnective the clauseConnective value to set.
     * @return the ConditionClause object itself.
     */
    public ConditionClause withClauseConnective(Connective clauseConnective) {
        this.clauseConnective = clauseConnective;
        return this;
    }

    /**
     * Get the field property: The name of the field that is evaluated.
     * 
     * @return the field value.
     */
    public String field() {
        return this.field;
    }

    /**
     * Set the field property: The name of the field that is evaluated.
     * 
     * @param field the field value to set.
     * @return the ConditionClause object itself.
     */
    public ConditionClause withField(String field) {
        this.field = field;
        return this;
    }

    /**
     * Get the operator property: Represents an operator in a ConditionClause.
     * 
     * @return the operator value.
     */
    public Operator operator() {
        return this.operator;
    }

    /**
     * Set the operator property: Represents an operator in a ConditionClause.
     * 
     * @param operator the operator value to set.
     * @return the ConditionClause object itself.
     */
    public ConditionClause withOperator(Operator operator) {
        this.operator = operator;
        return this;
    }

    /**
     * Get the values property: The top level connective operator for this condition.
     * 
     * @return the values value.
     */
    public List<String> values() {
        return this.values;
    }

    /**
     * Set the values property: The top level connective operator for this condition.
     * 
     * @param values the values value to set.
     * @return the ConditionClause object itself.
     */
    public ConditionClause withValues(List<String> values) {
        this.values = values;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (field() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property field in model ConditionClause"));
        }
        if (operator() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property operator in model ConditionClause"));
        }
        if (values() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property values in model ConditionClause"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ConditionClause.class);
}
