// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.securityinsights.fluent.models.SystemResourceInner;
import java.time.OffsetDateTime;

/**
 * An immutable client-side representation of SystemResource.
 */
public interface SystemResource {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     * 
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     * 
     * @return the type value.
     */
    String type();

    /**
     * Gets the etag property: Etag of the azure resource.
     * 
     * @return the etag value.
     */
    String etag();

    /**
     * Gets the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * Gets the status property: The status of the system.
     * 
     * @return the status value.
     */
    SystemStatusType status();

    /**
     * Gets the configuration property: The configuration of the system.
     * 
     * @return the configuration value.
     */
    SystemsConfiguration configuration();

    /**
     * Gets the displayName property: The displayName property.
     * 
     * @return the displayName value.
     */
    String displayName();

    /**
     * Gets the lastModifiedTimeUtc property: The lastModifiedTimeUtc property.
     * 
     * @return the lastModifiedTimeUtc value.
     */
    OffsetDateTime lastModifiedTimeUtc();

    /**
     * Gets the name of the resource group.
     * 
     * @return the name of the resource group.
     */
    String resourceGroupName();

    /**
     * Gets the inner com.azure.resourcemanager.securityinsights.fluent.models.SystemResourceInner object.
     * 
     * @return the inner object.
     */
    SystemResourceInner innerModel();

    /**
     * The entirety of the SystemResource definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithParentResource,
        DefinitionStages.WithConfiguration, DefinitionStages.WithDisplayName, DefinitionStages.WithCreate {
    }

    /**
     * The SystemResource definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of the SystemResource definition.
         */
        interface Blank extends WithParentResource {
        }

        /**
         * The stage of the SystemResource definition allowing to specify parent resource.
         */
        interface WithParentResource {
            /**
             * Specifies resourceGroupName, workspaceName, agentResourceName.
             * 
             * @param resourceGroupName The name of the resource group. The name is case insensitive.
             * @param workspaceName The name of the workspace.
             * @param agentResourceName Business Application Agent Name.
             * @return the next definition stage.
             */
            WithConfiguration withExistingBusinessApplicationAgent(String resourceGroupName, String workspaceName,
                String agentResourceName);
        }

        /**
         * The stage of the SystemResource definition allowing to specify configuration.
         */
        interface WithConfiguration {
            /**
             * Specifies the configuration property: The configuration of the system..
             * 
             * @param configuration The configuration of the system.
             * @return the next definition stage.
             */
            WithDisplayName withConfiguration(SystemsConfiguration configuration);
        }

        /**
         * The stage of the SystemResource definition allowing to specify displayName.
         */
        interface WithDisplayName {
            /**
             * Specifies the displayName property: The displayName property..
             * 
             * @param displayName The displayName property.
             * @return the next definition stage.
             */
            WithCreate withDisplayName(String displayName);
        }

        /**
         * The stage of the SystemResource definition which contains all the minimum required properties for the
         * resource to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate extends DefinitionStages.WithEtag, DefinitionStages.WithStatus {
            /**
             * Executes the create request.
             * 
             * @return the created resource.
             */
            SystemResource create();

            /**
             * Executes the create request.
             * 
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            SystemResource create(Context context);
        }

        /**
         * The stage of the SystemResource definition allowing to specify etag.
         */
        interface WithEtag {
            /**
             * Specifies the etag property: Etag of the azure resource.
             * 
             * @param etag Etag of the azure resource.
             * @return the next definition stage.
             */
            WithCreate withEtag(String etag);
        }

        /**
         * The stage of the SystemResource definition allowing to specify status.
         */
        interface WithStatus {
            /**
             * Specifies the status property: The status of the system..
             * 
             * @param status The status of the system.
             * @return the next definition stage.
             */
            WithCreate withStatus(SystemStatusType status);
        }
    }

    /**
     * Begins update for the SystemResource resource.
     * 
     * @return the stage of resource update.
     */
    SystemResource.Update update();

    /**
     * The template for SystemResource update.
     */
    interface Update extends UpdateStages.WithEtag, UpdateStages.WithStatus, UpdateStages.WithConfiguration,
        UpdateStages.WithDisplayName {
        /**
         * Executes the update request.
         * 
         * @return the updated resource.
         */
        SystemResource apply();

        /**
         * Executes the update request.
         * 
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        SystemResource apply(Context context);
    }

    /**
     * The SystemResource update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the SystemResource update allowing to specify etag.
         */
        interface WithEtag {
            /**
             * Specifies the etag property: Etag of the azure resource.
             * 
             * @param etag Etag of the azure resource.
             * @return the next definition stage.
             */
            Update withEtag(String etag);
        }

        /**
         * The stage of the SystemResource update allowing to specify status.
         */
        interface WithStatus {
            /**
             * Specifies the status property: The status of the system..
             * 
             * @param status The status of the system.
             * @return the next definition stage.
             */
            Update withStatus(SystemStatusType status);
        }

        /**
         * The stage of the SystemResource update allowing to specify configuration.
         */
        interface WithConfiguration {
            /**
             * Specifies the configuration property: The configuration of the system..
             * 
             * @param configuration The configuration of the system.
             * @return the next definition stage.
             */
            Update withConfiguration(SystemsConfiguration configuration);
        }

        /**
         * The stage of the SystemResource update allowing to specify displayName.
         */
        interface WithDisplayName {
            /**
             * Specifies the displayName property: The displayName property..
             * 
             * @param displayName The displayName property.
             * @return the next definition stage.
             */
            Update withDisplayName(String displayName);
        }
    }

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @return the refreshed resource.
     */
    SystemResource refresh();

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    SystemResource refresh(Context context);

    /**
     * List of actions for a business application system.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list all actions for a system to perform as paginated response with {@link PagedIterable}.
     */
    PagedIterable<Action> listActions();

    /**
     * List of actions for a business application system.
     * 
     * @param filter Filters the results, based on a Boolean condition. Optional.
     * @param skipToken Skiptoken is only used if a previous operation returned a partial result. If a previous response
     * contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies
     * a starting point to use for subsequent calls. Optional.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list all actions for a system to perform as paginated response with {@link PagedIterable}.
     */
    PagedIterable<Action> listActions(String filter, String skipToken, Context context);

    /**
     * Undo action, based on the actionId.
     * 
     * @param payload Undo action, based on the actionId.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    Response<Void> undoActionWithResponse(Object payload, Context context);

    /**
     * Undo action, based on the actionId.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void undoAction();

    /**
     * Report the status of the action.
     * 
     * @param payload Report a status of the action that was performed by the agent.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    Response<Void> reportActionStatusWithResponse(Object payload, Context context);

    /**
     * Report the status of the action.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void reportActionStatus();
}
