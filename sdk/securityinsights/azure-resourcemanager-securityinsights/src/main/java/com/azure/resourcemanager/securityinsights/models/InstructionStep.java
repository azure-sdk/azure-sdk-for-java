// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Instruction steps to enable the connector.
 */
@Fluent
public final class InstructionStep implements JsonSerializable<InstructionStep> {
    /*
     * Gets or sets the instruction step title.
     */
    private String title;

    /*
     * Gets or sets the instruction step description.
     */
    private String description;

    /*
     * Gets or sets the instruction step details.
     */
    private List<InstructionStepDetails> instructions;

    /*
     * Gets or sets the inner instruction steps details.
     * For Example: instruction step 1 might contain inner instruction steps: [instruction step 1.1, instruction step
     * 1.2].
     */
    private List<InstructionStep> innerSteps;

    /**
     * Creates an instance of InstructionStep class.
     */
    public InstructionStep() {
    }

    /**
     * Get the title property: Gets or sets the instruction step title.
     * 
     * @return the title value.
     */
    public String title() {
        return this.title;
    }

    /**
     * Set the title property: Gets or sets the instruction step title.
     * 
     * @param title the title value to set.
     * @return the InstructionStep object itself.
     */
    public InstructionStep withTitle(String title) {
        this.title = title;
        return this;
    }

    /**
     * Get the description property: Gets or sets the instruction step description.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: Gets or sets the instruction step description.
     * 
     * @param description the description value to set.
     * @return the InstructionStep object itself.
     */
    public InstructionStep withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the instructions property: Gets or sets the instruction step details.
     * 
     * @return the instructions value.
     */
    public List<InstructionStepDetails> instructions() {
        return this.instructions;
    }

    /**
     * Set the instructions property: Gets or sets the instruction step details.
     * 
     * @param instructions the instructions value to set.
     * @return the InstructionStep object itself.
     */
    public InstructionStep withInstructions(List<InstructionStepDetails> instructions) {
        this.instructions = instructions;
        return this;
    }

    /**
     * Get the innerSteps property: Gets or sets the inner instruction steps details.
     * For Example: instruction step 1 might contain inner instruction steps: [instruction step 1.1, instruction step
     * 1.2].
     * 
     * @return the innerSteps value.
     */
    public List<InstructionStep> innerSteps() {
        return this.innerSteps;
    }

    /**
     * Set the innerSteps property: Gets or sets the inner instruction steps details.
     * For Example: instruction step 1 might contain inner instruction steps: [instruction step 1.1, instruction step
     * 1.2].
     * 
     * @param innerSteps the innerSteps value to set.
     * @return the InstructionStep object itself.
     */
    public InstructionStep withInnerSteps(List<InstructionStep> innerSteps) {
        this.innerSteps = innerSteps;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (instructions() != null) {
            instructions().forEach(e -> e.validate());
        }
        if (innerSteps() != null) {
            innerSteps().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("title", this.title);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeArrayField("instructions", this.instructions, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("innerSteps", this.innerSteps, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of InstructionStep from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of InstructionStep if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the InstructionStep.
     */
    public static InstructionStep fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            InstructionStep deserializedInstructionStep = new InstructionStep();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("title".equals(fieldName)) {
                    deserializedInstructionStep.title = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedInstructionStep.description = reader.getString();
                } else if ("instructions".equals(fieldName)) {
                    List<InstructionStepDetails> instructions
                        = reader.readArray(reader1 -> InstructionStepDetails.fromJson(reader1));
                    deserializedInstructionStep.instructions = instructions;
                } else if ("innerSteps".equals(fieldName)) {
                    List<InstructionStep> innerSteps = reader.readArray(reader1 -> InstructionStep.fromJson(reader1));
                    deserializedInstructionStep.innerSteps = innerSteps;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedInstructionStep;
        });
    }
}
