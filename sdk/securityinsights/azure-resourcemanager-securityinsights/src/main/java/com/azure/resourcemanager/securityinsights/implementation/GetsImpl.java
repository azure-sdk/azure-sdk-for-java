// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.securityinsights.fluent.GetsClient;
import com.azure.resourcemanager.securityinsights.fluent.models.RecommendationInner;
import com.azure.resourcemanager.securityinsights.models.Gets;
import com.azure.resourcemanager.securityinsights.models.Recommendation;
import java.util.Collections;
import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

public final class GetsImpl implements Gets {
    private static final ClientLogger LOGGER = new ClientLogger(GetsImpl.class);

    private final GetsClient innerClient;

    private final com.azure.resourcemanager.securityinsights.SecurityInsightsManager serviceManager;

    public GetsImpl(
        GetsClient innerClient, com.azure.resourcemanager.securityinsights.SecurityInsightsManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public List<Recommendation> recommendations(String resourceGroupName, String workspaceName) {
        List<RecommendationInner> inner = this.serviceClient().recommendations(resourceGroupName, workspaceName);
        if (inner != null) {
            return Collections
                .unmodifiableList(
                    inner
                        .stream()
                        .map(inner1 -> new RecommendationImpl(inner1, this.manager()))
                        .collect(Collectors.toList()));
        } else {
            return Collections.emptyList();
        }
    }

    public Response<List<Recommendation>> recommendationsWithResponse(
        String resourceGroupName, String workspaceName, Context context) {
        Response<List<RecommendationInner>> inner =
            this.serviceClient().recommendationsWithResponse(resourceGroupName, workspaceName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                inner
                    .getValue()
                    .stream()
                    .map(inner1 -> new RecommendationImpl(inner1, this.manager()))
                    .collect(Collectors.toList()));
        } else {
            return null;
        }
    }

    public Recommendation singleRecommendation(String resourceGroupName, String workspaceName, UUID recommendationId) {
        RecommendationInner inner =
            this.serviceClient().singleRecommendation(resourceGroupName, workspaceName, recommendationId);
        if (inner != null) {
            return new RecommendationImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Recommendation> singleRecommendationWithResponse(
        String resourceGroupName, String workspaceName, UUID recommendationId, Context context) {
        Response<RecommendationInner> inner =
            this
                .serviceClient()
                .singleRecommendationWithResponse(resourceGroupName, workspaceName, recommendationId, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new RecommendationImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    private GetsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.securityinsights.SecurityInsightsManager manager() {
        return this.serviceManager;
    }
}
