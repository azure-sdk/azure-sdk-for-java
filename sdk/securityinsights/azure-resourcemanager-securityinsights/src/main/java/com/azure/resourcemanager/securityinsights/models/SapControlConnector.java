// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Describes the SapControl connector configuration.
 */
@Fluent
public final class SapControlConnector extends SystemsConfigurationConnector {
    /*
     * Represents the types of SAP systems.
     */
    private SystemConfigurationConnectorType type = SystemConfigurationConnectorType.SAP_CONTROL;

    /*
     * The server name.
     * FQDN or IP address.
     */
    private String server;

    /*
     * The instance name. Only 2 digits are allowed.
     */
    private String instance;

    /*
     * The timezone.
     * example: "GMT+0" or "GMT-8"
     * default: "GMT+0"
     */
    private String timezone;

    /*
     * The suffix of the port. 2 digits only.
     */
    private String suffix;

    /*
     * Represents the types of HTTPS configuration to connect to the SapControl service.
     */
    private HttpsConfigurationType httpsConfiguration;

    /**
     * Creates an instance of SapControlConnector class.
     */
    public SapControlConnector() {
    }

    /**
     * Get the type property: Represents the types of SAP systems.
     * 
     * @return the type value.
     */
    @Override
    public SystemConfigurationConnectorType type() {
        return this.type;
    }

    /**
     * Get the server property: The server name.
     * FQDN or IP address.
     * 
     * @return the server value.
     */
    public String server() {
        return this.server;
    }

    /**
     * Set the server property: The server name.
     * FQDN or IP address.
     * 
     * @param server the server value to set.
     * @return the SapControlConnector object itself.
     */
    public SapControlConnector withServer(String server) {
        this.server = server;
        return this;
    }

    /**
     * Get the instance property: The instance name. Only 2 digits are allowed.
     * 
     * @return the instance value.
     */
    public String instance() {
        return this.instance;
    }

    /**
     * Set the instance property: The instance name. Only 2 digits are allowed.
     * 
     * @param instance the instance value to set.
     * @return the SapControlConnector object itself.
     */
    public SapControlConnector withInstance(String instance) {
        this.instance = instance;
        return this;
    }

    /**
     * Get the timezone property: The timezone.
     * example: "GMT+0" or "GMT-8"
     * default: "GMT+0".
     * 
     * @return the timezone value.
     */
    public String timezone() {
        return this.timezone;
    }

    /**
     * Set the timezone property: The timezone.
     * example: "GMT+0" or "GMT-8"
     * default: "GMT+0".
     * 
     * @param timezone the timezone value to set.
     * @return the SapControlConnector object itself.
     */
    public SapControlConnector withTimezone(String timezone) {
        this.timezone = timezone;
        return this;
    }

    /**
     * Get the suffix property: The suffix of the port. 2 digits only.
     * 
     * @return the suffix value.
     */
    public String suffix() {
        return this.suffix;
    }

    /**
     * Set the suffix property: The suffix of the port. 2 digits only.
     * 
     * @param suffix the suffix value to set.
     * @return the SapControlConnector object itself.
     */
    public SapControlConnector withSuffix(String suffix) {
        this.suffix = suffix;
        return this;
    }

    /**
     * Get the httpsConfiguration property: Represents the types of HTTPS configuration to connect to the SapControl
     * service.
     * 
     * @return the httpsConfiguration value.
     */
    public HttpsConfigurationType httpsConfiguration() {
        return this.httpsConfiguration;
    }

    /**
     * Set the httpsConfiguration property: Represents the types of HTTPS configuration to connect to the SapControl
     * service.
     * 
     * @param httpsConfiguration the httpsConfiguration value to set.
     * @return the SapControlConnector object itself.
     */
    public SapControlConnector withHttpsConfiguration(HttpsConfigurationType httpsConfiguration) {
        this.httpsConfiguration = httpsConfiguration;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (server() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property server in model SapControlConnector"));
        }
        if (instance() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property instance in model SapControlConnector"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(SapControlConnector.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("server", this.server);
        jsonWriter.writeStringField("instance", this.instance);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeStringField("timezone", this.timezone);
        jsonWriter.writeStringField("suffix", this.suffix);
        jsonWriter.writeStringField("httpsConfiguration",
            this.httpsConfiguration == null ? null : this.httpsConfiguration.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SapControlConnector from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SapControlConnector if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SapControlConnector.
     */
    public static SapControlConnector fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SapControlConnector deserializedSapControlConnector = new SapControlConnector();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("server".equals(fieldName)) {
                    deserializedSapControlConnector.server = reader.getString();
                } else if ("instance".equals(fieldName)) {
                    deserializedSapControlConnector.instance = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedSapControlConnector.type
                        = SystemConfigurationConnectorType.fromString(reader.getString());
                } else if ("timezone".equals(fieldName)) {
                    deserializedSapControlConnector.timezone = reader.getString();
                } else if ("suffix".equals(fieldName)) {
                    deserializedSapControlConnector.suffix = reader.getString();
                } else if ("httpsConfiguration".equals(fieldName)) {
                    deserializedSapControlConnector.httpsConfiguration
                        = HttpsConfigurationType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSapControlConnector;
        });
    }
}
