// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.securityinsights.models.DcrConfiguration;
import com.azure.resourcemanager.securityinsights.models.GcpAuthProperties;
import com.azure.resourcemanager.securityinsights.models.GcpRequestProperties;
import java.io.IOException;

/**
 * Google Cloud Platform data connector properties.
 */
@Fluent
public final class GcpDataConnectorProperties implements JsonSerializable<GcpDataConnectorProperties> {
    /*
     * The name of the connector definition that represents the UI config.
     */
    private String connectorDefinitionName;

    /*
     * The auth section of the connector.
     */
    private GcpAuthProperties auth;

    /*
     * The request section of the connector.
     */
    private GcpRequestProperties request;

    /*
     * The configuration of the destination of the data.
     */
    private DcrConfiguration dcrConfig;

    /**
     * Creates an instance of GcpDataConnectorProperties class.
     */
    public GcpDataConnectorProperties() {
    }

    /**
     * Get the connectorDefinitionName property: The name of the connector definition that represents the UI config.
     * 
     * @return the connectorDefinitionName value.
     */
    public String connectorDefinitionName() {
        return this.connectorDefinitionName;
    }

    /**
     * Set the connectorDefinitionName property: The name of the connector definition that represents the UI config.
     * 
     * @param connectorDefinitionName the connectorDefinitionName value to set.
     * @return the GcpDataConnectorProperties object itself.
     */
    public GcpDataConnectorProperties withConnectorDefinitionName(String connectorDefinitionName) {
        this.connectorDefinitionName = connectorDefinitionName;
        return this;
    }

    /**
     * Get the auth property: The auth section of the connector.
     * 
     * @return the auth value.
     */
    public GcpAuthProperties auth() {
        return this.auth;
    }

    /**
     * Set the auth property: The auth section of the connector.
     * 
     * @param auth the auth value to set.
     * @return the GcpDataConnectorProperties object itself.
     */
    public GcpDataConnectorProperties withAuth(GcpAuthProperties auth) {
        this.auth = auth;
        return this;
    }

    /**
     * Get the request property: The request section of the connector.
     * 
     * @return the request value.
     */
    public GcpRequestProperties request() {
        return this.request;
    }

    /**
     * Set the request property: The request section of the connector.
     * 
     * @param request the request value to set.
     * @return the GcpDataConnectorProperties object itself.
     */
    public GcpDataConnectorProperties withRequest(GcpRequestProperties request) {
        this.request = request;
        return this;
    }

    /**
     * Get the dcrConfig property: The configuration of the destination of the data.
     * 
     * @return the dcrConfig value.
     */
    public DcrConfiguration dcrConfig() {
        return this.dcrConfig;
    }

    /**
     * Set the dcrConfig property: The configuration of the destination of the data.
     * 
     * @param dcrConfig the dcrConfig value to set.
     * @return the GcpDataConnectorProperties object itself.
     */
    public GcpDataConnectorProperties withDcrConfig(DcrConfiguration dcrConfig) {
        this.dcrConfig = dcrConfig;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (connectorDefinitionName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property connectorDefinitionName in model GcpDataConnectorProperties"));
        }
        if (auth() == null) {
            throw LOGGER.atError()
                .log(
                    new IllegalArgumentException("Missing required property auth in model GcpDataConnectorProperties"));
        } else {
            auth().validate();
        }
        if (request() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property request in model GcpDataConnectorProperties"));
        } else {
            request().validate();
        }
        if (dcrConfig() != null) {
            dcrConfig().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(GcpDataConnectorProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("connectorDefinitionName", this.connectorDefinitionName);
        jsonWriter.writeJsonField("auth", this.auth);
        jsonWriter.writeJsonField("request", this.request);
        jsonWriter.writeJsonField("dcrConfig", this.dcrConfig);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GcpDataConnectorProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GcpDataConnectorProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the GcpDataConnectorProperties.
     */
    public static GcpDataConnectorProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GcpDataConnectorProperties deserializedGcpDataConnectorProperties = new GcpDataConnectorProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("connectorDefinitionName".equals(fieldName)) {
                    deserializedGcpDataConnectorProperties.connectorDefinitionName = reader.getString();
                } else if ("auth".equals(fieldName)) {
                    deserializedGcpDataConnectorProperties.auth = GcpAuthProperties.fromJson(reader);
                } else if ("request".equals(fieldName)) {
                    deserializedGcpDataConnectorProperties.request = GcpRequestProperties.fromJson(reader);
                } else if ("dcrConfig".equals(fieldName)) {
                    deserializedGcpDataConnectorProperties.dcrConfig = DcrConfiguration.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedGcpDataConnectorProperties;
        });
    }
}
