// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.securityinsights.models.DcrConfiguration;
import com.azure.resourcemanager.securityinsights.models.GcpAuthProperties;
import com.azure.resourcemanager.securityinsights.models.GcpRequestProperties;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Google Cloud Platform data connector properties.
 */
@Fluent
public final class GcpDataConnectorProperties {
    /*
     * The name of the connector definition that represents the UI config.
     */
    @JsonProperty(value = "connectorDefinitionName", required = true)
    private String connectorDefinitionName;

    /*
     * The auth section of the connector.
     */
    @JsonProperty(value = "auth", required = true)
    private GcpAuthProperties auth;

    /*
     * The request section of the connector.
     */
    @JsonProperty(value = "request", required = true)
    private GcpRequestProperties request;

    /*
     * The configuration of the destination of the data.
     */
    @JsonProperty(value = "dcrConfig")
    private DcrConfiguration dcrConfig;

    /**
     * Creates an instance of GcpDataConnectorProperties class.
     */
    public GcpDataConnectorProperties() {
    }

    /**
     * Get the connectorDefinitionName property: The name of the connector definition that represents the UI config.
     * 
     * @return the connectorDefinitionName value.
     */
    public String connectorDefinitionName() {
        return this.connectorDefinitionName;
    }

    /**
     * Set the connectorDefinitionName property: The name of the connector definition that represents the UI config.
     * 
     * @param connectorDefinitionName the connectorDefinitionName value to set.
     * @return the GcpDataConnectorProperties object itself.
     */
    public GcpDataConnectorProperties withConnectorDefinitionName(String connectorDefinitionName) {
        this.connectorDefinitionName = connectorDefinitionName;
        return this;
    }

    /**
     * Get the auth property: The auth section of the connector.
     * 
     * @return the auth value.
     */
    public GcpAuthProperties auth() {
        return this.auth;
    }

    /**
     * Set the auth property: The auth section of the connector.
     * 
     * @param auth the auth value to set.
     * @return the GcpDataConnectorProperties object itself.
     */
    public GcpDataConnectorProperties withAuth(GcpAuthProperties auth) {
        this.auth = auth;
        return this;
    }

    /**
     * Get the request property: The request section of the connector.
     * 
     * @return the request value.
     */
    public GcpRequestProperties request() {
        return this.request;
    }

    /**
     * Set the request property: The request section of the connector.
     * 
     * @param request the request value to set.
     * @return the GcpDataConnectorProperties object itself.
     */
    public GcpDataConnectorProperties withRequest(GcpRequestProperties request) {
        this.request = request;
        return this;
    }

    /**
     * Get the dcrConfig property: The configuration of the destination of the data.
     * 
     * @return the dcrConfig value.
     */
    public DcrConfiguration dcrConfig() {
        return this.dcrConfig;
    }

    /**
     * Set the dcrConfig property: The configuration of the destination of the data.
     * 
     * @param dcrConfig the dcrConfig value to set.
     * @return the GcpDataConnectorProperties object itself.
     */
    public GcpDataConnectorProperties withDcrConfig(DcrConfiguration dcrConfig) {
        this.dcrConfig = dcrConfig;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (connectorDefinitionName() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property connectorDefinitionName in model GcpDataConnectorProperties"));
        }
        if (auth() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property auth in model GcpDataConnectorProperties"));
        } else {
            auth().validate();
        }
        if (request() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property request in model GcpDataConnectorProperties"));
        } else {
            request().validate();
        }
        if (dcrConfig() != null) {
            dcrConfig().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(GcpDataConnectorProperties.class);
}
