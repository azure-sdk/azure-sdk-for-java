// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Google Cloud Platform request section properties.
 */
@Fluent
public final class GcpRequestProperties implements JsonSerializable<GcpRequestProperties> {
    /*
     * The GCP project id.
     */
    private String projectId;

    /*
     * The GCP pub/sub subscription names.
     */
    private List<String> subscriptionNames;

    /**
     * Creates an instance of GcpRequestProperties class.
     */
    public GcpRequestProperties() {
    }

    /**
     * Get the projectId property: The GCP project id.
     * 
     * @return the projectId value.
     */
    public String projectId() {
        return this.projectId;
    }

    /**
     * Set the projectId property: The GCP project id.
     * 
     * @param projectId the projectId value to set.
     * @return the GcpRequestProperties object itself.
     */
    public GcpRequestProperties withProjectId(String projectId) {
        this.projectId = projectId;
        return this;
    }

    /**
     * Get the subscriptionNames property: The GCP pub/sub subscription names.
     * 
     * @return the subscriptionNames value.
     */
    public List<String> subscriptionNames() {
        return this.subscriptionNames;
    }

    /**
     * Set the subscriptionNames property: The GCP pub/sub subscription names.
     * 
     * @param subscriptionNames the subscriptionNames value to set.
     * @return the GcpRequestProperties object itself.
     */
    public GcpRequestProperties withSubscriptionNames(List<String> subscriptionNames) {
        this.subscriptionNames = subscriptionNames;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (projectId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property projectId in model GcpRequestProperties"));
        }
        if (subscriptionNames() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property subscriptionNames in model GcpRequestProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(GcpRequestProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("projectId", this.projectId);
        jsonWriter.writeArrayField("subscriptionNames", this.subscriptionNames,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GcpRequestProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GcpRequestProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the GcpRequestProperties.
     */
    public static GcpRequestProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GcpRequestProperties deserializedGcpRequestProperties = new GcpRequestProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("projectId".equals(fieldName)) {
                    deserializedGcpRequestProperties.projectId = reader.getString();
                } else if ("subscriptionNames".equals(fieldName)) {
                    List<String> subscriptionNames = reader.readArray(reader1 -> reader1.getString());
                    deserializedGcpRequestProperties.subscriptionNames = subscriptionNames;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedGcpRequestProperties;
        });
    }
}
