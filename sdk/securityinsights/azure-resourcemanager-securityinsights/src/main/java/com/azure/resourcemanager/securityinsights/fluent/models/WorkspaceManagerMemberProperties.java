// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The workspace manager member properties.
 */
@Fluent
public final class WorkspaceManagerMemberProperties implements JsonSerializable<WorkspaceManagerMemberProperties> {
    /*
     * Fully qualified resource ID of the target Sentinel workspace joining the given Sentinel workspace manager
     */
    private String targetWorkspaceResourceId;

    /*
     * Tenant id of the target Sentinel workspace joining the given Sentinel workspace manager
     */
    private String targetWorkspaceTenantId;

    /**
     * Creates an instance of WorkspaceManagerMemberProperties class.
     */
    public WorkspaceManagerMemberProperties() {
    }

    /**
     * Get the targetWorkspaceResourceId property: Fully qualified resource ID of the target Sentinel workspace joining
     * the given Sentinel workspace manager.
     * 
     * @return the targetWorkspaceResourceId value.
     */
    public String targetWorkspaceResourceId() {
        return this.targetWorkspaceResourceId;
    }

    /**
     * Set the targetWorkspaceResourceId property: Fully qualified resource ID of the target Sentinel workspace joining
     * the given Sentinel workspace manager.
     * 
     * @param targetWorkspaceResourceId the targetWorkspaceResourceId value to set.
     * @return the WorkspaceManagerMemberProperties object itself.
     */
    public WorkspaceManagerMemberProperties withTargetWorkspaceResourceId(String targetWorkspaceResourceId) {
        this.targetWorkspaceResourceId = targetWorkspaceResourceId;
        return this;
    }

    /**
     * Get the targetWorkspaceTenantId property: Tenant id of the target Sentinel workspace joining the given Sentinel
     * workspace manager.
     * 
     * @return the targetWorkspaceTenantId value.
     */
    public String targetWorkspaceTenantId() {
        return this.targetWorkspaceTenantId;
    }

    /**
     * Set the targetWorkspaceTenantId property: Tenant id of the target Sentinel workspace joining the given Sentinel
     * workspace manager.
     * 
     * @param targetWorkspaceTenantId the targetWorkspaceTenantId value to set.
     * @return the WorkspaceManagerMemberProperties object itself.
     */
    public WorkspaceManagerMemberProperties withTargetWorkspaceTenantId(String targetWorkspaceTenantId) {
        this.targetWorkspaceTenantId = targetWorkspaceTenantId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (targetWorkspaceResourceId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property targetWorkspaceResourceId in model WorkspaceManagerMemberProperties"));
        }
        if (targetWorkspaceTenantId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property targetWorkspaceTenantId in model WorkspaceManagerMemberProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(WorkspaceManagerMemberProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("targetWorkspaceResourceId", this.targetWorkspaceResourceId);
        jsonWriter.writeStringField("targetWorkspaceTenantId", this.targetWorkspaceTenantId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WorkspaceManagerMemberProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of WorkspaceManagerMemberProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the WorkspaceManagerMemberProperties.
     */
    public static WorkspaceManagerMemberProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WorkspaceManagerMemberProperties deserializedWorkspaceManagerMemberProperties
                = new WorkspaceManagerMemberProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("targetWorkspaceResourceId".equals(fieldName)) {
                    deserializedWorkspaceManagerMemberProperties.targetWorkspaceResourceId = reader.getString();
                } else if ("targetWorkspaceTenantId".equals(fieldName)) {
                    deserializedWorkspaceManagerMemberProperties.targetWorkspaceTenantId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedWorkspaceManagerMemberProperties;
        });
    }
}
