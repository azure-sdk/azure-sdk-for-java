// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.securityinsights.models.CcpAuthConfig;
import com.azure.resourcemanager.securityinsights.models.CcpResponseConfig;
import com.azure.resourcemanager.securityinsights.models.DcrConfiguration;
import com.azure.resourcemanager.securityinsights.models.RestApiPollerRequestConfig;
import com.azure.resourcemanager.securityinsights.models.RestApiPollerRequestPagingConfig;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Map;

/**
 * Rest Api Poller data connector properties.
 */
@Fluent
public final class RestApiPollerDataConnectorProperties {
    /*
     * The connector definition name (the dataConnectorDefinition resource id).
     */
    @JsonProperty(value = "connectorDefinitionName", required = true)
    private String connectorDefinitionName;

    /*
     * The a authentication model.
     */
    @JsonProperty(value = "auth", required = true)
    private CcpAuthConfig auth;

    /*
     * The request configuration.
     */
    @JsonProperty(value = "request", required = true)
    private RestApiPollerRequestConfig request;

    /*
     * The DCR related properties.
     */
    @JsonProperty(value = "dcrConfig")
    private DcrConfiguration dcrConfig;

    /*
     * Indicates whether the connector is active or not.
     */
    @JsonProperty(value = "isActive")
    private Boolean isActive;

    /*
     * The Log Analytics table destination.
     */
    @JsonProperty(value = "dataType")
    private String dataType;

    /*
     * The response configuration.
     */
    @JsonProperty(value = "response")
    private CcpResponseConfig response;

    /*
     * The paging configuration.
     */
    @JsonProperty(value = "paging")
    private RestApiPollerRequestPagingConfig paging;

    /*
     * The add on attributes. The key name will become attribute name (a column) and the value will become the attribute value in the payload.
     */
    @JsonProperty(value = "addOnAttributes")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, String> addOnAttributes;

    /**
     * Creates an instance of RestApiPollerDataConnectorProperties class.
     */
    public RestApiPollerDataConnectorProperties() {
    }

    /**
     * Get the connectorDefinitionName property: The connector definition name (the dataConnectorDefinition resource
     * id).
     * 
     * @return the connectorDefinitionName value.
     */
    public String connectorDefinitionName() {
        return this.connectorDefinitionName;
    }

    /**
     * Set the connectorDefinitionName property: The connector definition name (the dataConnectorDefinition resource
     * id).
     * 
     * @param connectorDefinitionName the connectorDefinitionName value to set.
     * @return the RestApiPollerDataConnectorProperties object itself.
     */
    public RestApiPollerDataConnectorProperties withConnectorDefinitionName(String connectorDefinitionName) {
        this.connectorDefinitionName = connectorDefinitionName;
        return this;
    }

    /**
     * Get the auth property: The a authentication model.
     * 
     * @return the auth value.
     */
    public CcpAuthConfig auth() {
        return this.auth;
    }

    /**
     * Set the auth property: The a authentication model.
     * 
     * @param auth the auth value to set.
     * @return the RestApiPollerDataConnectorProperties object itself.
     */
    public RestApiPollerDataConnectorProperties withAuth(CcpAuthConfig auth) {
        this.auth = auth;
        return this;
    }

    /**
     * Get the request property: The request configuration.
     * 
     * @return the request value.
     */
    public RestApiPollerRequestConfig request() {
        return this.request;
    }

    /**
     * Set the request property: The request configuration.
     * 
     * @param request the request value to set.
     * @return the RestApiPollerDataConnectorProperties object itself.
     */
    public RestApiPollerDataConnectorProperties withRequest(RestApiPollerRequestConfig request) {
        this.request = request;
        return this;
    }

    /**
     * Get the dcrConfig property: The DCR related properties.
     * 
     * @return the dcrConfig value.
     */
    public DcrConfiguration dcrConfig() {
        return this.dcrConfig;
    }

    /**
     * Set the dcrConfig property: The DCR related properties.
     * 
     * @param dcrConfig the dcrConfig value to set.
     * @return the RestApiPollerDataConnectorProperties object itself.
     */
    public RestApiPollerDataConnectorProperties withDcrConfig(DcrConfiguration dcrConfig) {
        this.dcrConfig = dcrConfig;
        return this;
    }

    /**
     * Get the isActive property: Indicates whether the connector is active or not.
     * 
     * @return the isActive value.
     */
    public Boolean isActive() {
        return this.isActive;
    }

    /**
     * Set the isActive property: Indicates whether the connector is active or not.
     * 
     * @param isActive the isActive value to set.
     * @return the RestApiPollerDataConnectorProperties object itself.
     */
    public RestApiPollerDataConnectorProperties withIsActive(Boolean isActive) {
        this.isActive = isActive;
        return this;
    }

    /**
     * Get the dataType property: The Log Analytics table destination.
     * 
     * @return the dataType value.
     */
    public String dataType() {
        return this.dataType;
    }

    /**
     * Set the dataType property: The Log Analytics table destination.
     * 
     * @param dataType the dataType value to set.
     * @return the RestApiPollerDataConnectorProperties object itself.
     */
    public RestApiPollerDataConnectorProperties withDataType(String dataType) {
        this.dataType = dataType;
        return this;
    }

    /**
     * Get the response property: The response configuration.
     * 
     * @return the response value.
     */
    public CcpResponseConfig response() {
        return this.response;
    }

    /**
     * Set the response property: The response configuration.
     * 
     * @param response the response value to set.
     * @return the RestApiPollerDataConnectorProperties object itself.
     */
    public RestApiPollerDataConnectorProperties withResponse(CcpResponseConfig response) {
        this.response = response;
        return this;
    }

    /**
     * Get the paging property: The paging configuration.
     * 
     * @return the paging value.
     */
    public RestApiPollerRequestPagingConfig paging() {
        return this.paging;
    }

    /**
     * Set the paging property: The paging configuration.
     * 
     * @param paging the paging value to set.
     * @return the RestApiPollerDataConnectorProperties object itself.
     */
    public RestApiPollerDataConnectorProperties withPaging(RestApiPollerRequestPagingConfig paging) {
        this.paging = paging;
        return this;
    }

    /**
     * Get the addOnAttributes property: The add on attributes. The key name will become attribute name (a column) and
     * the value will become the attribute value in the payload.
     * 
     * @return the addOnAttributes value.
     */
    public Map<String, String> addOnAttributes() {
        return this.addOnAttributes;
    }

    /**
     * Set the addOnAttributes property: The add on attributes. The key name will become attribute name (a column) and
     * the value will become the attribute value in the payload.
     * 
     * @param addOnAttributes the addOnAttributes value to set.
     * @return the RestApiPollerDataConnectorProperties object itself.
     */
    public RestApiPollerDataConnectorProperties withAddOnAttributes(Map<String, String> addOnAttributes) {
        this.addOnAttributes = addOnAttributes;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (connectorDefinitionName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property connectorDefinitionName in model RestApiPollerDataConnectorProperties"));
        }
        if (auth() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property auth in model RestApiPollerDataConnectorProperties"));
        } else {
            auth().validate();
        }
        if (request() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property request in model RestApiPollerDataConnectorProperties"));
        } else {
            request().validate();
        }
        if (dcrConfig() != null) {
            dcrConfig().validate();
        }
        if (response() != null) {
            response().validate();
        }
        if (paging() != null) {
            paging().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(RestApiPollerDataConnectorProperties.class);
}
