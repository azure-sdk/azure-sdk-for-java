// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.securityinsights.models.AgentConfiguration;
import com.azure.resourcemanager.securityinsights.models.AgentSystem;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * The AgentProperties model.
 */
@Fluent
public final class AgentProperties {
    /*
     * Describes the configuration of a Business Application Agent.
     */
    @JsonProperty(value = "configuration", required = true)
    private AgentConfiguration configuration;

    /*
     * The agentSystems property.
     */
    @JsonProperty(value = "agentSystems", access = JsonProperty.Access.WRITE_ONLY)
    private List<AgentSystem> agentSystems;

    /*
     * The displayName property.
     */
    @JsonProperty(value = "displayName", required = true)
    private String displayName;

    /*
     * The lastModifiedTimeUtc property.
     */
    @JsonProperty(value = "lastModifiedTimeUtc", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime lastModifiedTimeUtc;

    /**
     * Creates an instance of AgentProperties class.
     */
    public AgentProperties() {
    }

    /**
     * Get the configuration property: Describes the configuration of a Business Application Agent.
     * 
     * @return the configuration value.
     */
    public AgentConfiguration configuration() {
        return this.configuration;
    }

    /**
     * Set the configuration property: Describes the configuration of a Business Application Agent.
     * 
     * @param configuration the configuration value to set.
     * @return the AgentProperties object itself.
     */
    public AgentProperties withConfiguration(AgentConfiguration configuration) {
        this.configuration = configuration;
        return this;
    }

    /**
     * Get the agentSystems property: The agentSystems property.
     * 
     * @return the agentSystems value.
     */
    public List<AgentSystem> agentSystems() {
        return this.agentSystems;
    }

    /**
     * Get the displayName property: The displayName property.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: The displayName property.
     * 
     * @param displayName the displayName value to set.
     * @return the AgentProperties object itself.
     */
    public AgentProperties withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the lastModifiedTimeUtc property: The lastModifiedTimeUtc property.
     * 
     * @return the lastModifiedTimeUtc value.
     */
    public OffsetDateTime lastModifiedTimeUtc() {
        return this.lastModifiedTimeUtc;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (configuration() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property configuration in model AgentProperties"));
        } else {
            configuration().validate();
        }
        if (agentSystems() != null) {
            agentSystems().forEach(e -> e.validate());
        }
        if (displayName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property displayName in model AgentProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(AgentProperties.class);
}
