// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The workspace manager group properties.
 */
@Fluent
public final class WorkspaceManagerGroupProperties implements JsonSerializable<WorkspaceManagerGroupProperties> {
    /*
     * The description of the workspace manager group
     */
    private String description;

    /*
     * The display name of the workspace manager group
     */
    private String displayName;

    /*
     * The names of the workspace manager members participating in this group.
     */
    private List<String> memberResourceNames;

    /**
     * Creates an instance of WorkspaceManagerGroupProperties class.
     */
    public WorkspaceManagerGroupProperties() {
    }

    /**
     * Get the description property: The description of the workspace manager group.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: The description of the workspace manager group.
     * 
     * @param description the description value to set.
     * @return the WorkspaceManagerGroupProperties object itself.
     */
    public WorkspaceManagerGroupProperties withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the displayName property: The display name of the workspace manager group.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: The display name of the workspace manager group.
     * 
     * @param displayName the displayName value to set.
     * @return the WorkspaceManagerGroupProperties object itself.
     */
    public WorkspaceManagerGroupProperties withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the memberResourceNames property: The names of the workspace manager members participating in this group.
     * 
     * @return the memberResourceNames value.
     */
    public List<String> memberResourceNames() {
        return this.memberResourceNames;
    }

    /**
     * Set the memberResourceNames property: The names of the workspace manager members participating in this group.
     * 
     * @param memberResourceNames the memberResourceNames value to set.
     * @return the WorkspaceManagerGroupProperties object itself.
     */
    public WorkspaceManagerGroupProperties withMemberResourceNames(List<String> memberResourceNames) {
        this.memberResourceNames = memberResourceNames;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (displayName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property displayName in model WorkspaceManagerGroupProperties"));
        }
        if (memberResourceNames() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property memberResourceNames in model WorkspaceManagerGroupProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(WorkspaceManagerGroupProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("displayName", this.displayName);
        jsonWriter.writeArrayField("memberResourceNames", this.memberResourceNames,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("description", this.description);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WorkspaceManagerGroupProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of WorkspaceManagerGroupProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the WorkspaceManagerGroupProperties.
     */
    public static WorkspaceManagerGroupProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WorkspaceManagerGroupProperties deserializedWorkspaceManagerGroupProperties
                = new WorkspaceManagerGroupProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("displayName".equals(fieldName)) {
                    deserializedWorkspaceManagerGroupProperties.displayName = reader.getString();
                } else if ("memberResourceNames".equals(fieldName)) {
                    List<String> memberResourceNames = reader.readArray(reader1 -> reader1.getString());
                    deserializedWorkspaceManagerGroupProperties.memberResourceNames = memberResourceNames;
                } else if ("description".equals(fieldName)) {
                    deserializedWorkspaceManagerGroupProperties.description = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedWorkspaceManagerGroupProperties;
        });
    }
}
