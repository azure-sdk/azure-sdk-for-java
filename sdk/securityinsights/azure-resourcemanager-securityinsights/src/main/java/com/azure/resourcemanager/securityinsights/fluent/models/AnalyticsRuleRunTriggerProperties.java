// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * The Analytics Rule Run Trigger properties.
 */
@Fluent
public final class AnalyticsRuleRunTriggerProperties implements JsonSerializable<AnalyticsRuleRunTriggerProperties> {
    /*
     * The executionTimeUtc property.
     */
    private OffsetDateTime executionTimeUtc;

    /**
     * Creates an instance of AnalyticsRuleRunTriggerProperties class.
     */
    public AnalyticsRuleRunTriggerProperties() {
    }

    /**
     * Get the executionTimeUtc property: The executionTimeUtc property.
     * 
     * @return the executionTimeUtc value.
     */
    public OffsetDateTime executionTimeUtc() {
        return this.executionTimeUtc;
    }

    /**
     * Set the executionTimeUtc property: The executionTimeUtc property.
     * 
     * @param executionTimeUtc the executionTimeUtc value to set.
     * @return the AnalyticsRuleRunTriggerProperties object itself.
     */
    public AnalyticsRuleRunTriggerProperties withExecutionTimeUtc(OffsetDateTime executionTimeUtc) {
        this.executionTimeUtc = executionTimeUtc;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (executionTimeUtc() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property executionTimeUtc in model AnalyticsRuleRunTriggerProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(AnalyticsRuleRunTriggerProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("executionTimeUtc",
            this.executionTimeUtc == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.executionTimeUtc));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AnalyticsRuleRunTriggerProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AnalyticsRuleRunTriggerProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AnalyticsRuleRunTriggerProperties.
     */
    public static AnalyticsRuleRunTriggerProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AnalyticsRuleRunTriggerProperties deserializedAnalyticsRuleRunTriggerProperties
                = new AnalyticsRuleRunTriggerProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("executionTimeUtc".equals(fieldName)) {
                    deserializedAnalyticsRuleRunTriggerProperties.executionTimeUtc = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAnalyticsRuleRunTriggerProperties;
        });
    }
}
