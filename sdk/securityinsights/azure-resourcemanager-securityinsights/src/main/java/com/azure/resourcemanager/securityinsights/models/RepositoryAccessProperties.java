// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.securityinsights.fluent.models.RepositoryAccessObject;
import java.io.IOException;

/**
 * Credentials to access repository.
 */
@Fluent
public final class RepositoryAccessProperties implements JsonSerializable<RepositoryAccessProperties> {
    /*
     * RepositoryAccess properties
     */
    private RepositoryAccessObject innerProperties = new RepositoryAccessObject();

    /**
     * Creates an instance of RepositoryAccessProperties class.
     */
    public RepositoryAccessProperties() {
    }

    /**
     * Get the innerProperties property: RepositoryAccess properties.
     * 
     * @return the innerProperties value.
     */
    private RepositoryAccessObject innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the kind property: The kind of repository access credentials.
     * 
     * @return the kind value.
     */
    public RepositoryAccessKind kind() {
        return this.innerProperties() == null ? null : this.innerProperties().kind();
    }

    /**
     * Set the kind property: The kind of repository access credentials.
     * 
     * @param kind the kind value to set.
     * @return the RepositoryAccessProperties object itself.
     */
    public RepositoryAccessProperties withKind(RepositoryAccessKind kind) {
        if (this.innerProperties() == null) {
            this.innerProperties = new RepositoryAccessObject();
        }
        this.innerProperties().withKind(kind);
        return this;
    }

    /**
     * Get the code property: OAuth Code. Required when `kind` is `OAuth`.
     * 
     * @return the code value.
     */
    public String code() {
        return this.innerProperties() == null ? null : this.innerProperties().code();
    }

    /**
     * Set the code property: OAuth Code. Required when `kind` is `OAuth`.
     * 
     * @param code the code value to set.
     * @return the RepositoryAccessProperties object itself.
     */
    public RepositoryAccessProperties withCode(String code) {
        if (this.innerProperties() == null) {
            this.innerProperties = new RepositoryAccessObject();
        }
        this.innerProperties().withCode(code);
        return this;
    }

    /**
     * Get the state property: OAuth State. Required when `kind` is `OAuth`.
     * 
     * @return the state value.
     */
    public String state() {
        return this.innerProperties() == null ? null : this.innerProperties().state();
    }

    /**
     * Set the state property: OAuth State. Required when `kind` is `OAuth`.
     * 
     * @param state the state value to set.
     * @return the RepositoryAccessProperties object itself.
     */
    public RepositoryAccessProperties withState(String state) {
        if (this.innerProperties() == null) {
            this.innerProperties = new RepositoryAccessObject();
        }
        this.innerProperties().withState(state);
        return this;
    }

    /**
     * Get the clientId property: OAuth ClientId. Required when `kind` is `OAuth`.
     * 
     * @return the clientId value.
     */
    public String clientId() {
        return this.innerProperties() == null ? null : this.innerProperties().clientId();
    }

    /**
     * Set the clientId property: OAuth ClientId. Required when `kind` is `OAuth`.
     * 
     * @param clientId the clientId value to set.
     * @return the RepositoryAccessProperties object itself.
     */
    public RepositoryAccessProperties withClientId(String clientId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new RepositoryAccessObject();
        }
        this.innerProperties().withClientId(clientId);
        return this;
    }

    /**
     * Get the token property: Personal Access Token. Required when `kind` is `PAT`.
     * 
     * @return the token value.
     */
    public String token() {
        return this.innerProperties() == null ? null : this.innerProperties().token();
    }

    /**
     * Set the token property: Personal Access Token. Required when `kind` is `PAT`.
     * 
     * @param token the token value to set.
     * @return the RepositoryAccessProperties object itself.
     */
    public RepositoryAccessProperties withToken(String token) {
        if (this.innerProperties() == null) {
            this.innerProperties = new RepositoryAccessObject();
        }
        this.innerProperties().withToken(token);
        return this;
    }

    /**
     * Get the installationId property: Application installation ID. Required when `kind` is `App`. Supported by
     * `GitHub` only.
     * 
     * @return the installationId value.
     */
    public String installationId() {
        return this.innerProperties() == null ? null : this.innerProperties().installationId();
    }

    /**
     * Set the installationId property: Application installation ID. Required when `kind` is `App`. Supported by
     * `GitHub` only.
     * 
     * @param installationId the installationId value to set.
     * @return the RepositoryAccessProperties object itself.
     */
    public RepositoryAccessProperties withInstallationId(String installationId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new RepositoryAccessObject();
        }
        this.innerProperties().withInstallationId(installationId);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property innerProperties in model RepositoryAccessProperties"));
        } else {
            innerProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(RepositoryAccessProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RepositoryAccessProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RepositoryAccessProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RepositoryAccessProperties.
     */
    public static RepositoryAccessProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RepositoryAccessProperties deserializedRepositoryAccessProperties = new RepositoryAccessProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("properties".equals(fieldName)) {
                    deserializedRepositoryAccessProperties.innerProperties = RepositoryAccessObject.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRepositoryAccessProperties;
        });
    }
}
