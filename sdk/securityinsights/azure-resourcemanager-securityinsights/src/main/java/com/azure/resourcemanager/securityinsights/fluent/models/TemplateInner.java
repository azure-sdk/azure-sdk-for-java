// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.securityinsights.models.ResourceWithEtag;
import com.azure.resourcemanager.securityinsights.models.TemplateSource;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Represents a Template in Azure Security Insights. */
@Fluent
public final class TemplateInner extends ResourceWithEtag {
    /*
     * template properties
     */
    @JsonProperty(value = "properties")
    private TemplateProperties innerProperties;

    /**
     * Get the innerProperties property: template properties.
     *
     * @return the innerProperties value.
     */
    private TemplateProperties innerProperties() {
        return this.innerProperties;
    }

    /** {@inheritDoc} */
    @Override
    public TemplateInner withEtag(String etag) {
        super.withEtag(etag);
        return this;
    }

    /**
     * Get the contentId property: The content Id of the template.
     *
     * @return the contentId value.
     */
    public String contentId() {
        return this.innerProperties() == null ? null : this.innerProperties().contentId();
    }

    /**
     * Set the contentId property: The content Id of the template.
     *
     * @param contentId the contentId value to set.
     * @return the TemplateInner object itself.
     */
    public TemplateInner withContentId(String contentId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new TemplateProperties();
        }
        this.innerProperties().withContentId(contentId);
        return this;
    }

    /**
     * Get the version property: the version number of the template.
     *
     * @return the version value.
     */
    public String version() {
        return this.innerProperties() == null ? null : this.innerProperties().version();
    }

    /**
     * Set the version property: the version number of the template.
     *
     * @param version the version value to set.
     * @return the TemplateInner object itself.
     */
    public TemplateInner withVersion(String version) {
        if (this.innerProperties() == null) {
            this.innerProperties = new TemplateProperties();
        }
        this.innerProperties().withVersion(version);
        return this;
    }

    /**
     * Get the displayName property: The display name of the template.
     *
     * @return the displayName value.
     */
    public String displayName() {
        return this.innerProperties() == null ? null : this.innerProperties().displayName();
    }

    /**
     * Set the displayName property: The display name of the template.
     *
     * @param displayName the displayName value to set.
     * @return the TemplateInner object itself.
     */
    public TemplateInner withDisplayName(String displayName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new TemplateProperties();
        }
        this.innerProperties().withDisplayName(displayName);
        return this;
    }

    /**
     * Get the contentKind property: A description of the template.
     *
     * @return the contentKind value.
     */
    public String contentKind() {
        return this.innerProperties() == null ? null : this.innerProperties().contentKind();
    }

    /**
     * Set the contentKind property: A description of the template.
     *
     * @param contentKind the contentKind value to set.
     * @return the TemplateInner object itself.
     */
    public TemplateInner withContentKind(String contentKind) {
        if (this.innerProperties() == null) {
            this.innerProperties = new TemplateProperties();
        }
        this.innerProperties().withContentKind(contentKind);
        return this;
    }

    /**
     * Get the source property: The source of the template.
     *
     * @return the source value.
     */
    public TemplateSource source() {
        return this.innerProperties() == null ? null : this.innerProperties().source();
    }

    /**
     * Set the source property: The source of the template.
     *
     * @param source the source value to set.
     * @return the TemplateInner object itself.
     */
    public TemplateInner withSource(TemplateSource source) {
        if (this.innerProperties() == null) {
            this.innerProperties = new TemplateProperties();
        }
        this.innerProperties().withSource(source);
        return this;
    }

    /**
     * Get the mainTemplate property: The JSON string of the template.
     *
     * @return the mainTemplate value.
     */
    public String mainTemplate() {
        return this.innerProperties() == null ? null : this.innerProperties().mainTemplate();
    }

    /**
     * Set the mainTemplate property: The JSON string of the template.
     *
     * @param mainTemplate the mainTemplate value to set.
     * @return the TemplateInner object itself.
     */
    public TemplateInner withMainTemplate(String mainTemplate) {
        if (this.innerProperties() == null) {
            this.innerProperties = new TemplateProperties();
        }
        this.innerProperties().withMainTemplate(mainTemplate);
        return this;
    }

    /**
     * Get the dependencies property: Array of dependent templates.
     *
     * @return the dependencies value.
     */
    public List<TemplateProperties> dependencies() {
        return this.innerProperties() == null ? null : this.innerProperties().dependencies();
    }

    /**
     * Set the dependencies property: Array of dependent templates.
     *
     * @param dependencies the dependencies value to set.
     * @return the TemplateInner object itself.
     */
    public TemplateInner withDependencies(List<TemplateProperties> dependencies) {
        if (this.innerProperties() == null) {
            this.innerProperties = new TemplateProperties();
        }
        this.innerProperties().withDependencies(dependencies);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
