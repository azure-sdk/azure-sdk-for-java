// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.securityinsights.fluent.ConfidentialWatchlistItemsClient;
import com.azure.resourcemanager.securityinsights.fluent.models.WatchlistItemInner;
import com.azure.resourcemanager.securityinsights.models.ConfidentialWatchlistItems;
import com.azure.resourcemanager.securityinsights.models.WatchlistItem;

public final class ConfidentialWatchlistItemsImpl implements ConfidentialWatchlistItems {
    private static final ClientLogger LOGGER = new ClientLogger(ConfidentialWatchlistItemsImpl.class);

    private final ConfidentialWatchlistItemsClient innerClient;

    private final com.azure.resourcemanager.securityinsights.SecurityInsightsManager serviceManager;

    public ConfidentialWatchlistItemsImpl(
        ConfidentialWatchlistItemsClient innerClient,
        com.azure.resourcemanager.securityinsights.SecurityInsightsManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<WatchlistItem> list(String resourceGroupName, String workspaceName, String watchlistAlias) {
        PagedIterable<WatchlistItemInner> inner =
            this.serviceClient().list(resourceGroupName, workspaceName, watchlistAlias);
        return Utils.mapPage(inner, inner1 -> new WatchlistItemImpl(inner1, this.manager()));
    }

    public PagedIterable<WatchlistItem> list(
        String resourceGroupName, String workspaceName, String watchlistAlias, String skipToken, Context context) {
        PagedIterable<WatchlistItemInner> inner =
            this.serviceClient().list(resourceGroupName, workspaceName, watchlistAlias, skipToken, context);
        return Utils.mapPage(inner, inner1 -> new WatchlistItemImpl(inner1, this.manager()));
    }

    public WatchlistItem get(
        String resourceGroupName, String workspaceName, String watchlistAlias, String watchlistItemId) {
        WatchlistItemInner inner =
            this.serviceClient().get(resourceGroupName, workspaceName, watchlistAlias, watchlistItemId);
        if (inner != null) {
            return new WatchlistItemImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<WatchlistItem> getWithResponse(
        String resourceGroupName,
        String workspaceName,
        String watchlistAlias,
        String watchlistItemId,
        Context context) {
        Response<WatchlistItemInner> inner =
            this
                .serviceClient()
                .getWithResponse(resourceGroupName, workspaceName, watchlistAlias, watchlistItemId, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new WatchlistItemImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String workspaceName, String watchlistAlias, String watchlistItemId) {
        this.serviceClient().delete(resourceGroupName, workspaceName, watchlistAlias, watchlistItemId);
    }

    public Response<Void> deleteWithResponse(
        String resourceGroupName,
        String workspaceName,
        String watchlistAlias,
        String watchlistItemId,
        Context context) {
        return this
            .serviceClient()
            .deleteWithResponse(resourceGroupName, workspaceName, watchlistAlias, watchlistItemId, context);
    }

    public WatchlistItem createOrUpdate(
        String resourceGroupName,
        String workspaceName,
        String watchlistAlias,
        String watchlistItemId,
        WatchlistItemInner watchlistItem) {
        WatchlistItemInner inner =
            this
                .serviceClient()
                .createOrUpdate(resourceGroupName, workspaceName, watchlistAlias, watchlistItemId, watchlistItem);
        if (inner != null) {
            return new WatchlistItemImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<WatchlistItem> createOrUpdateWithResponse(
        String resourceGroupName,
        String workspaceName,
        String watchlistAlias,
        String watchlistItemId,
        WatchlistItemInner watchlistItem,
        Context context) {
        Response<WatchlistItemInner> inner =
            this
                .serviceClient()
                .createOrUpdateWithResponse(
                    resourceGroupName, workspaceName, watchlistAlias, watchlistItemId, watchlistItem, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new WatchlistItemImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    private ConfidentialWatchlistItemsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.securityinsights.SecurityInsightsManager manager() {
        return this.serviceManager;
    }
}
