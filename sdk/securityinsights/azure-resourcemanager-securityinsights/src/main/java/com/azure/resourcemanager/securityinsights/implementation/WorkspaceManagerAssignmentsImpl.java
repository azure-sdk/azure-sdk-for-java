// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.securityinsights.fluent.WorkspaceManagerAssignmentsClient;
import com.azure.resourcemanager.securityinsights.fluent.models.WorkspaceManagerAssignmentInner;
import com.azure.resourcemanager.securityinsights.models.WorkspaceManagerAssignment;
import com.azure.resourcemanager.securityinsights.models.WorkspaceManagerAssignments;

public final class WorkspaceManagerAssignmentsImpl implements WorkspaceManagerAssignments {
    private static final ClientLogger LOGGER = new ClientLogger(WorkspaceManagerAssignmentsImpl.class);

    private final WorkspaceManagerAssignmentsClient innerClient;

    private final com.azure.resourcemanager.securityinsights.SecurityInsightsManager serviceManager;

    public WorkspaceManagerAssignmentsImpl(WorkspaceManagerAssignmentsClient innerClient,
        com.azure.resourcemanager.securityinsights.SecurityInsightsManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<WorkspaceManagerAssignment> list(String resourceGroupName, String workspaceName) {
        PagedIterable<WorkspaceManagerAssignmentInner> inner
            = this.serviceClient().list(resourceGroupName, workspaceName);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new WorkspaceManagerAssignmentImpl(inner1, this.manager()));
    }

    public PagedIterable<WorkspaceManagerAssignment> list(String resourceGroupName, String workspaceName,
        String orderby, Integer top, String skipToken, Context context) {
        PagedIterable<WorkspaceManagerAssignmentInner> inner
            = this.serviceClient().list(resourceGroupName, workspaceName, orderby, top, skipToken, context);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new WorkspaceManagerAssignmentImpl(inner1, this.manager()));
    }

    public Response<WorkspaceManagerAssignment> getWithResponse(String resourceGroupName, String workspaceName,
        String workspaceManagerAssignmentName, Context context) {
        Response<WorkspaceManagerAssignmentInner> inner = this.serviceClient()
            .getWithResponse(resourceGroupName, workspaceName, workspaceManagerAssignmentName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new WorkspaceManagerAssignmentImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public WorkspaceManagerAssignment get(String resourceGroupName, String workspaceName,
        String workspaceManagerAssignmentName) {
        WorkspaceManagerAssignmentInner inner
            = this.serviceClient().get(resourceGroupName, workspaceName, workspaceManagerAssignmentName);
        if (inner != null) {
            return new WorkspaceManagerAssignmentImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteWithResponse(String resourceGroupName, String workspaceName,
        String workspaceManagerAssignmentName, Context context) {
        return this.serviceClient()
            .deleteWithResponse(resourceGroupName, workspaceName, workspaceManagerAssignmentName, context);
    }

    public void delete(String resourceGroupName, String workspaceName, String workspaceManagerAssignmentName) {
        this.serviceClient().delete(resourceGroupName, workspaceName, workspaceManagerAssignmentName);
    }

    public WorkspaceManagerAssignment getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = ResourceManagerUtils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String workspaceManagerAssignmentName
            = ResourceManagerUtils.getValueFromIdByName(id, "workspaceManagerAssignments");
        if (workspaceManagerAssignmentName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'workspaceManagerAssignments'.", id)));
        }
        return this.getWithResponse(resourceGroupName, workspaceName, workspaceManagerAssignmentName, Context.NONE)
            .getValue();
    }

    public Response<WorkspaceManagerAssignment> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = ResourceManagerUtils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String workspaceManagerAssignmentName
            = ResourceManagerUtils.getValueFromIdByName(id, "workspaceManagerAssignments");
        if (workspaceManagerAssignmentName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'workspaceManagerAssignments'.", id)));
        }
        return this.getWithResponse(resourceGroupName, workspaceName, workspaceManagerAssignmentName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = ResourceManagerUtils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String workspaceManagerAssignmentName
            = ResourceManagerUtils.getValueFromIdByName(id, "workspaceManagerAssignments");
        if (workspaceManagerAssignmentName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'workspaceManagerAssignments'.", id)));
        }
        this.deleteWithResponse(resourceGroupName, workspaceName, workspaceManagerAssignmentName, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = ResourceManagerUtils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String workspaceManagerAssignmentName
            = ResourceManagerUtils.getValueFromIdByName(id, "workspaceManagerAssignments");
        if (workspaceManagerAssignmentName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'workspaceManagerAssignments'.", id)));
        }
        return this.deleteWithResponse(resourceGroupName, workspaceName, workspaceManagerAssignmentName, context);
    }

    private WorkspaceManagerAssignmentsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.securityinsights.SecurityInsightsManager manager() {
        return this.serviceManager;
    }

    public WorkspaceManagerAssignmentImpl define(String name) {
        return new WorkspaceManagerAssignmentImpl(name, this.manager());
    }
}
