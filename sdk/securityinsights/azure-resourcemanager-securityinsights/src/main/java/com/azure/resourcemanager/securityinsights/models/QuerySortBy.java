// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Specifies how to sort the query results.
 */
@Fluent
public final class QuerySortBy implements JsonSerializable<QuerySortBy> {
    /*
     * The direction to sort the results by.
     */
    private SortingDirection direction;

    /*
     * Represents the field to sort the results by.
     */
    private String field;

    /**
     * Creates an instance of QuerySortBy class.
     */
    public QuerySortBy() {
    }

    /**
     * Get the direction property: The direction to sort the results by.
     * 
     * @return the direction value.
     */
    public SortingDirection direction() {
        return this.direction;
    }

    /**
     * Set the direction property: The direction to sort the results by.
     * 
     * @param direction the direction value to set.
     * @return the QuerySortBy object itself.
     */
    public QuerySortBy withDirection(SortingDirection direction) {
        this.direction = direction;
        return this;
    }

    /**
     * Get the field property: Represents the field to sort the results by.
     * 
     * @return the field value.
     */
    public String field() {
        return this.field;
    }

    /**
     * Set the field property: Represents the field to sort the results by.
     * 
     * @param field the field value to set.
     * @return the QuerySortBy object itself.
     */
    public QuerySortBy withField(String field) {
        this.field = field;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("direction", this.direction == null ? null : this.direction.toString());
        jsonWriter.writeStringField("field", this.field);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of QuerySortBy from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of QuerySortBy if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the QuerySortBy.
     */
    public static QuerySortBy fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            QuerySortBy deserializedQuerySortBy = new QuerySortBy();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("direction".equals(fieldName)) {
                    deserializedQuerySortBy.direction = SortingDirection.fromString(reader.getString());
                } else if ("field".equals(fieldName)) {
                    deserializedQuerySortBy.field = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedQuerySortBy;
        });
    }
}
