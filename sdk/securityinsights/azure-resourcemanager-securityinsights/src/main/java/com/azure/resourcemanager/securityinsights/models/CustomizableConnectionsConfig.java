// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The UiConfig for 'Customizable' connector definition kind.
 */
@Fluent
public final class CustomizableConnectionsConfig implements JsonSerializable<CustomizableConnectionsConfig> {
    /*
     * Gets or sets the template name. The template includes ARM templates that can be created by the connector, usually
     * it will be the dataConnectors ARM templates.
     */
    private String templateSpecName;

    /*
     * Gets or sets the template version.
     */
    private String templateSpecVersion;

    /**
     * Creates an instance of CustomizableConnectionsConfig class.
     */
    public CustomizableConnectionsConfig() {
    }

    /**
     * Get the templateSpecName property: Gets or sets the template name. The template includes ARM templates that can
     * be created by the connector, usually it will be the dataConnectors ARM templates.
     * 
     * @return the templateSpecName value.
     */
    public String templateSpecName() {
        return this.templateSpecName;
    }

    /**
     * Set the templateSpecName property: Gets or sets the template name. The template includes ARM templates that can
     * be created by the connector, usually it will be the dataConnectors ARM templates.
     * 
     * @param templateSpecName the templateSpecName value to set.
     * @return the CustomizableConnectionsConfig object itself.
     */
    public CustomizableConnectionsConfig withTemplateSpecName(String templateSpecName) {
        this.templateSpecName = templateSpecName;
        return this;
    }

    /**
     * Get the templateSpecVersion property: Gets or sets the template version.
     * 
     * @return the templateSpecVersion value.
     */
    public String templateSpecVersion() {
        return this.templateSpecVersion;
    }

    /**
     * Set the templateSpecVersion property: Gets or sets the template version.
     * 
     * @param templateSpecVersion the templateSpecVersion value to set.
     * @return the CustomizableConnectionsConfig object itself.
     */
    public CustomizableConnectionsConfig withTemplateSpecVersion(String templateSpecVersion) {
        this.templateSpecVersion = templateSpecVersion;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (templateSpecName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property templateSpecName in model CustomizableConnectionsConfig"));
        }
        if (templateSpecVersion() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property templateSpecVersion in model CustomizableConnectionsConfig"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(CustomizableConnectionsConfig.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("templateSpecName", this.templateSpecName);
        jsonWriter.writeStringField("templateSpecVersion", this.templateSpecVersion);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CustomizableConnectionsConfig from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CustomizableConnectionsConfig if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CustomizableConnectionsConfig.
     */
    public static CustomizableConnectionsConfig fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CustomizableConnectionsConfig deserializedCustomizableConnectionsConfig
                = new CustomizableConnectionsConfig();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("templateSpecName".equals(fieldName)) {
                    deserializedCustomizableConnectionsConfig.templateSpecName = reader.getString();
                } else if ("templateSpecVersion".equals(fieldName)) {
                    deserializedCustomizableConnectionsConfig.templateSpecVersion = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCustomizableConnectionsConfig;
        });
    }
}
