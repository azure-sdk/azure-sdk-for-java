// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * additional properties of product template.
 */
@Fluent
public class ProductTemplateAdditionalProperties implements JsonSerializable<ProductTemplateAdditionalProperties> {
    /*
     * The json of the ARM template to deploy
     */
    private Object packagedContent;

    /**
     * Creates an instance of ProductTemplateAdditionalProperties class.
     */
    public ProductTemplateAdditionalProperties() {
    }

    /**
     * Get the packagedContent property: The json of the ARM template to deploy.
     * 
     * @return the packagedContent value.
     */
    public Object packagedContent() {
        return this.packagedContent;
    }

    /**
     * Set the packagedContent property: The json of the ARM template to deploy.
     * 
     * @param packagedContent the packagedContent value to set.
     * @return the ProductTemplateAdditionalProperties object itself.
     */
    public ProductTemplateAdditionalProperties withPackagedContent(Object packagedContent) {
        this.packagedContent = packagedContent;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeUntypedField("packagedContent", this.packagedContent);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ProductTemplateAdditionalProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ProductTemplateAdditionalProperties if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ProductTemplateAdditionalProperties.
     */
    public static ProductTemplateAdditionalProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ProductTemplateAdditionalProperties deserializedProductTemplateAdditionalProperties
                = new ProductTemplateAdditionalProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("packagedContent".equals(fieldName)) {
                    deserializedProductTemplateAdditionalProperties.packagedContent = reader.readUntyped();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedProductTemplateAdditionalProperties;
        });
    }
}
