// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.securityinsights.fluent.ContentPackagesClient;
import com.azure.resourcemanager.securityinsights.fluent.models.PackageInner;
import com.azure.resourcemanager.securityinsights.models.ContentPackages;
import com.azure.resourcemanager.securityinsights.models.Package;
import com.azure.resourcemanager.securityinsights.models.PackageInstallationProperties;

public final class ContentPackagesImpl implements ContentPackages {
    private static final ClientLogger LOGGER = new ClientLogger(ContentPackagesImpl.class);

    private final ContentPackagesClient innerClient;

    private final com.azure.resourcemanager.securityinsights.SecurityInsightsManager serviceManager;

    public ContentPackagesImpl(
        ContentPackagesClient innerClient,
        com.azure.resourcemanager.securityinsights.SecurityInsightsManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<Package> list(String resourceGroupName, String sentinelWorkspaceName) {
        PagedIterable<PackageInner> inner = this.serviceClient().list(resourceGroupName, sentinelWorkspaceName);
        return Utils.mapPage(inner, inner1 -> new PackageImpl(inner1, this.manager()));
    }

    public PagedIterable<Package> list(
        String resourceGroupName,
        String sentinelWorkspaceName,
        String filter,
        String orderby,
        Integer top,
        Integer skip,
        Context context) {
        PagedIterable<PackageInner> inner =
            this.serviceClient().list(resourceGroupName, sentinelWorkspaceName, filter, orderby, top, skip, context);
        return Utils.mapPage(inner, inner1 -> new PackageImpl(inner1, this.manager()));
    }

    public Response<Package> getWithResponse(
        String resourceGroupName, String sentinelWorkspaceName, String packageId, Context context) {
        Response<PackageInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, sentinelWorkspaceName, packageId, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new PackageImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Package get(String resourceGroupName, String sentinelWorkspaceName, String packageId) {
        PackageInner inner = this.serviceClient().get(resourceGroupName, sentinelWorkspaceName, packageId);
        if (inner != null) {
            return new PackageImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Package> installWithResponse(
        String resourceGroupName,
        String sentinelWorkspaceName,
        String packageId,
        PackageInstallationProperties packageInstallationProperties,
        Context context) {
        Response<PackageInner> inner =
            this
                .serviceClient()
                .installWithResponse(
                    resourceGroupName, sentinelWorkspaceName, packageId, packageInstallationProperties, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new PackageImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Package install(
        String resourceGroupName,
        String sentinelWorkspaceName,
        String packageId,
        PackageInstallationProperties packageInstallationProperties) {
        PackageInner inner =
            this
                .serviceClient()
                .install(resourceGroupName, sentinelWorkspaceName, packageId, packageInstallationProperties);
        if (inner != null) {
            return new PackageImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Package> uninstallWithResponse(
        String resourceGroupName, String sentinelWorkspaceName, String packageId, Context context) {
        Response<PackageInner> inner =
            this.serviceClient().uninstallWithResponse(resourceGroupName, sentinelWorkspaceName, packageId, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new PackageImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Package uninstall(String resourceGroupName, String sentinelWorkspaceName, String packageId) {
        PackageInner inner = this.serviceClient().uninstall(resourceGroupName, sentinelWorkspaceName, packageId);
        if (inner != null) {
            return new PackageImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    private ContentPackagesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.securityinsights.SecurityInsightsManager manager() {
        return this.serviceManager;
    }
}
