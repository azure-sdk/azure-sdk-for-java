// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.SystemData;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.securityinsights.models.Flag;
import com.azure.resourcemanager.securityinsights.models.Kind;
import com.azure.resourcemanager.securityinsights.models.MetadataAuthor;
import com.azure.resourcemanager.securityinsights.models.MetadataCategories;
import com.azure.resourcemanager.securityinsights.models.MetadataDependencies;
import com.azure.resourcemanager.securityinsights.models.MetadataSource;
import com.azure.resourcemanager.securityinsights.models.MetadataSupport;
import com.azure.resourcemanager.securityinsights.models.PackageKind;
import com.azure.resourcemanager.securityinsights.models.ResourceWithEtag;
import java.io.IOException;
import java.time.LocalDate;
import java.util.List;

/**
 * Template resource definition.
 */
@Fluent
public final class ProductTemplateModelInner extends ResourceWithEtag {
    /*
     * template properties
     */
    private ProductTemplateProperties innerProperties;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /**
     * Creates an instance of ProductTemplateModelInner class.
     */
    public ProductTemplateModelInner() {
    }

    /**
     * Get the innerProperties property: template properties.
     * 
     * @return the innerProperties value.
     */
    private ProductTemplateProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    @Override
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProductTemplateModelInner withEtag(String etag) {
        super.withEtag(etag);
        return this;
    }

    /**
     * Get the packagedContent property: The json of the ARM template to deploy.
     * 
     * @return the packagedContent value.
     */
    public Object packagedContent() {
        return this.innerProperties() == null ? null : this.innerProperties().packagedContent();
    }

    /**
     * Set the packagedContent property: The json of the ARM template to deploy.
     * 
     * @param packagedContent the packagedContent value to set.
     * @return the ProductTemplateModelInner object itself.
     */
    public ProductTemplateModelInner withPackagedContent(Object packagedContent) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ProductTemplateProperties();
        }
        this.innerProperties().withPackagedContent(packagedContent);
        return this;
    }

    /**
     * Get the contentId property: Static ID for the content. Used to identify dependencies and content from solutions
     * or community. Hard-coded/static for out of the box content and solutions. Dynamic for user-created. This is the
     * resource name.
     * 
     * @return the contentId value.
     */
    public String contentId() {
        return this.innerProperties() == null ? null : this.innerProperties().contentId();
    }

    /**
     * Set the contentId property: Static ID for the content. Used to identify dependencies and content from solutions
     * or community. Hard-coded/static for out of the box content and solutions. Dynamic for user-created. This is the
     * resource name.
     * 
     * @param contentId the contentId value to set.
     * @return the ProductTemplateModelInner object itself.
     */
    public ProductTemplateModelInner withContentId(String contentId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ProductTemplateProperties();
        }
        this.innerProperties().withContentId(contentId);
        return this;
    }

    /**
     * Get the contentProductId property: Unique ID for the content. It should be generated based on the contentId of
     * the package, contentId of the template, contentKind of the template and the contentVersion of the template.
     * 
     * @return the contentProductId value.
     */
    public String contentProductId() {
        return this.innerProperties() == null ? null : this.innerProperties().contentProductId();
    }

    /**
     * Set the contentProductId property: Unique ID for the content. It should be generated based on the contentId of
     * the package, contentId of the template, contentKind of the template and the contentVersion of the template.
     * 
     * @param contentProductId the contentProductId value to set.
     * @return the ProductTemplateModelInner object itself.
     */
    public ProductTemplateModelInner withContentProductId(String contentProductId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ProductTemplateProperties();
        }
        this.innerProperties().withContentProductId(contentProductId);
        return this;
    }

    /**
     * Get the packageVersion property: Version of the package. Default and recommended format is numeric (e.g. 1, 1.0,
     * 1.0.0, 1.0.0.0), following ARM metadata best practices. Can also be any string, but then we cannot guarantee any
     * version checks.
     * 
     * @return the packageVersion value.
     */
    public String packageVersion() {
        return this.innerProperties() == null ? null : this.innerProperties().packageVersion();
    }

    /**
     * Set the packageVersion property: Version of the package. Default and recommended format is numeric (e.g. 1, 1.0,
     * 1.0.0, 1.0.0.0), following ARM metadata best practices. Can also be any string, but then we cannot guarantee any
     * version checks.
     * 
     * @param packageVersion the packageVersion value to set.
     * @return the ProductTemplateModelInner object itself.
     */
    public ProductTemplateModelInner withPackageVersion(String packageVersion) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ProductTemplateProperties();
        }
        this.innerProperties().withPackageVersion(packageVersion);
        return this;
    }

    /**
     * Get the version property: Version of the content. Default and recommended format is numeric (e.g. 1, 1.0, 1.0.0,
     * 1.0.0.0), following ARM metadata best practices. Can also be any string, but then we cannot guarantee any version
     * checks.
     * 
     * @return the version value.
     */
    public String version() {
        return this.innerProperties() == null ? null : this.innerProperties().version();
    }

    /**
     * Set the version property: Version of the content. Default and recommended format is numeric (e.g. 1, 1.0, 1.0.0,
     * 1.0.0.0), following ARM metadata best practices. Can also be any string, but then we cannot guarantee any version
     * checks.
     * 
     * @param version the version value to set.
     * @return the ProductTemplateModelInner object itself.
     */
    public ProductTemplateModelInner withVersion(String version) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ProductTemplateProperties();
        }
        this.innerProperties().withVersion(version);
        return this;
    }

    /**
     * Get the displayName property: The display name of the template.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.innerProperties() == null ? null : this.innerProperties().displayName();
    }

    /**
     * Set the displayName property: The display name of the template.
     * 
     * @param displayName the displayName value to set.
     * @return the ProductTemplateModelInner object itself.
     */
    public ProductTemplateModelInner withDisplayName(String displayName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ProductTemplateProperties();
        }
        this.innerProperties().withDisplayName(displayName);
        return this;
    }

    /**
     * Get the contentKind property: The kind of content the template is for.
     * 
     * @return the contentKind value.
     */
    public Kind contentKind() {
        return this.innerProperties() == null ? null : this.innerProperties().contentKind();
    }

    /**
     * Set the contentKind property: The kind of content the template is for.
     * 
     * @param contentKind the contentKind value to set.
     * @return the ProductTemplateModelInner object itself.
     */
    public ProductTemplateModelInner withContentKind(Kind contentKind) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ProductTemplateProperties();
        }
        this.innerProperties().withContentKind(contentKind);
        return this;
    }

    /**
     * Get the source property: Source of the content. This is where/how it was created.
     * 
     * @return the source value.
     */
    public MetadataSource source() {
        return this.innerProperties() == null ? null : this.innerProperties().source();
    }

    /**
     * Set the source property: Source of the content. This is where/how it was created.
     * 
     * @param source the source value to set.
     * @return the ProductTemplateModelInner object itself.
     */
    public ProductTemplateModelInner withSource(MetadataSource source) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ProductTemplateProperties();
        }
        this.innerProperties().withSource(source);
        return this;
    }

    /**
     * Get the author property: The creator of the content item.
     * 
     * @return the author value.
     */
    public MetadataAuthor author() {
        return this.innerProperties() == null ? null : this.innerProperties().author();
    }

    /**
     * Set the author property: The creator of the content item.
     * 
     * @param author the author value to set.
     * @return the ProductTemplateModelInner object itself.
     */
    public ProductTemplateModelInner withAuthor(MetadataAuthor author) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ProductTemplateProperties();
        }
        this.innerProperties().withAuthor(author);
        return this;
    }

    /**
     * Get the support property: Support information for the template - type, name, contact information.
     * 
     * @return the support value.
     */
    public MetadataSupport support() {
        return this.innerProperties() == null ? null : this.innerProperties().support();
    }

    /**
     * Set the support property: Support information for the template - type, name, contact information.
     * 
     * @param support the support value to set.
     * @return the ProductTemplateModelInner object itself.
     */
    public ProductTemplateModelInner withSupport(MetadataSupport support) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ProductTemplateProperties();
        }
        this.innerProperties().withSupport(support);
        return this;
    }

    /**
     * Get the dependencies property: Dependencies for the content item, what other content items it requires to work.
     * Can describe more complex dependencies using a recursive/nested structure. For a single dependency an
     * id/kind/version can be supplied or operator/criteria for complex formats.
     * 
     * @return the dependencies value.
     */
    public MetadataDependencies dependencies() {
        return this.innerProperties() == null ? null : this.innerProperties().dependencies();
    }

    /**
     * Set the dependencies property: Dependencies for the content item, what other content items it requires to work.
     * Can describe more complex dependencies using a recursive/nested structure. For a single dependency an
     * id/kind/version can be supplied or operator/criteria for complex formats.
     * 
     * @param dependencies the dependencies value to set.
     * @return the ProductTemplateModelInner object itself.
     */
    public ProductTemplateModelInner withDependencies(MetadataDependencies dependencies) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ProductTemplateProperties();
        }
        this.innerProperties().withDependencies(dependencies);
        return this;
    }

    /**
     * Get the categories property: Categories for the item.
     * 
     * @return the categories value.
     */
    public MetadataCategories categories() {
        return this.innerProperties() == null ? null : this.innerProperties().categories();
    }

    /**
     * Set the categories property: Categories for the item.
     * 
     * @param categories the categories value to set.
     * @return the ProductTemplateModelInner object itself.
     */
    public ProductTemplateModelInner withCategories(MetadataCategories categories) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ProductTemplateProperties();
        }
        this.innerProperties().withCategories(categories);
        return this;
    }

    /**
     * Get the providers property: Providers for the content item.
     * 
     * @return the providers value.
     */
    public List<String> providers() {
        return this.innerProperties() == null ? null : this.innerProperties().providers();
    }

    /**
     * Set the providers property: Providers for the content item.
     * 
     * @param providers the providers value to set.
     * @return the ProductTemplateModelInner object itself.
     */
    public ProductTemplateModelInner withProviders(List<String> providers) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ProductTemplateProperties();
        }
        this.innerProperties().withProviders(providers);
        return this;
    }

    /**
     * Get the firstPublishDate property: first publish date content item.
     * 
     * @return the firstPublishDate value.
     */
    public LocalDate firstPublishDate() {
        return this.innerProperties() == null ? null : this.innerProperties().firstPublishDate();
    }

    /**
     * Set the firstPublishDate property: first publish date content item.
     * 
     * @param firstPublishDate the firstPublishDate value to set.
     * @return the ProductTemplateModelInner object itself.
     */
    public ProductTemplateModelInner withFirstPublishDate(LocalDate firstPublishDate) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ProductTemplateProperties();
        }
        this.innerProperties().withFirstPublishDate(firstPublishDate);
        return this;
    }

    /**
     * Get the lastPublishDate property: last publish date for the content item.
     * 
     * @return the lastPublishDate value.
     */
    public LocalDate lastPublishDate() {
        return this.innerProperties() == null ? null : this.innerProperties().lastPublishDate();
    }

    /**
     * Set the lastPublishDate property: last publish date for the content item.
     * 
     * @param lastPublishDate the lastPublishDate value to set.
     * @return the ProductTemplateModelInner object itself.
     */
    public ProductTemplateModelInner withLastPublishDate(LocalDate lastPublishDate) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ProductTemplateProperties();
        }
        this.innerProperties().withLastPublishDate(lastPublishDate);
        return this;
    }

    /**
     * Get the customVersion property: The custom version of the content. A optional free text.
     * 
     * @return the customVersion value.
     */
    public String customVersion() {
        return this.innerProperties() == null ? null : this.innerProperties().customVersion();
    }

    /**
     * Set the customVersion property: The custom version of the content. A optional free text.
     * 
     * @param customVersion the customVersion value to set.
     * @return the ProductTemplateModelInner object itself.
     */
    public ProductTemplateModelInner withCustomVersion(String customVersion) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ProductTemplateProperties();
        }
        this.innerProperties().withCustomVersion(customVersion);
        return this;
    }

    /**
     * Get the contentSchemaVersion property: Schema version of the content. Can be used to distinguish between
     * different flow based on the schema version.
     * 
     * @return the contentSchemaVersion value.
     */
    public String contentSchemaVersion() {
        return this.innerProperties() == null ? null : this.innerProperties().contentSchemaVersion();
    }

    /**
     * Set the contentSchemaVersion property: Schema version of the content. Can be used to distinguish between
     * different flow based on the schema version.
     * 
     * @param contentSchemaVersion the contentSchemaVersion value to set.
     * @return the ProductTemplateModelInner object itself.
     */
    public ProductTemplateModelInner withContentSchemaVersion(String contentSchemaVersion) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ProductTemplateProperties();
        }
        this.innerProperties().withContentSchemaVersion(contentSchemaVersion);
        return this;
    }

    /**
     * Get the icon property: the icon identifier. this id can later be fetched from the content metadata.
     * 
     * @return the icon value.
     */
    public String icon() {
        return this.innerProperties() == null ? null : this.innerProperties().icon();
    }

    /**
     * Set the icon property: the icon identifier. this id can later be fetched from the content metadata.
     * 
     * @param icon the icon value to set.
     * @return the ProductTemplateModelInner object itself.
     */
    public ProductTemplateModelInner withIcon(String icon) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ProductTemplateProperties();
        }
        this.innerProperties().withIcon(icon);
        return this;
    }

    /**
     * Get the threatAnalysisTactics property: the tactics the resource covers.
     * 
     * @return the threatAnalysisTactics value.
     */
    public List<String> threatAnalysisTactics() {
        return this.innerProperties() == null ? null : this.innerProperties().threatAnalysisTactics();
    }

    /**
     * Set the threatAnalysisTactics property: the tactics the resource covers.
     * 
     * @param threatAnalysisTactics the threatAnalysisTactics value to set.
     * @return the ProductTemplateModelInner object itself.
     */
    public ProductTemplateModelInner withThreatAnalysisTactics(List<String> threatAnalysisTactics) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ProductTemplateProperties();
        }
        this.innerProperties().withThreatAnalysisTactics(threatAnalysisTactics);
        return this;
    }

    /**
     * Get the threatAnalysisTechniques property: the techniques the resource covers, these have to be aligned with the
     * tactics being used.
     * 
     * @return the threatAnalysisTechniques value.
     */
    public List<String> threatAnalysisTechniques() {
        return this.innerProperties() == null ? null : this.innerProperties().threatAnalysisTechniques();
    }

    /**
     * Set the threatAnalysisTechniques property: the techniques the resource covers, these have to be aligned with the
     * tactics being used.
     * 
     * @param threatAnalysisTechniques the threatAnalysisTechniques value to set.
     * @return the ProductTemplateModelInner object itself.
     */
    public ProductTemplateModelInner withThreatAnalysisTechniques(List<String> threatAnalysisTechniques) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ProductTemplateProperties();
        }
        this.innerProperties().withThreatAnalysisTechniques(threatAnalysisTechniques);
        return this;
    }

    /**
     * Get the previewImages property: preview image file names. These will be taken from the solution artifacts.
     * 
     * @return the previewImages value.
     */
    public List<String> previewImages() {
        return this.innerProperties() == null ? null : this.innerProperties().previewImages();
    }

    /**
     * Set the previewImages property: preview image file names. These will be taken from the solution artifacts.
     * 
     * @param previewImages the previewImages value to set.
     * @return the ProductTemplateModelInner object itself.
     */
    public ProductTemplateModelInner withPreviewImages(List<String> previewImages) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ProductTemplateProperties();
        }
        this.innerProperties().withPreviewImages(previewImages);
        return this;
    }

    /**
     * Get the previewImagesDark property: preview image file names. These will be taken from the solution artifacts.
     * used for dark theme support.
     * 
     * @return the previewImagesDark value.
     */
    public List<String> previewImagesDark() {
        return this.innerProperties() == null ? null : this.innerProperties().previewImagesDark();
    }

    /**
     * Set the previewImagesDark property: preview image file names. These will be taken from the solution artifacts.
     * used for dark theme support.
     * 
     * @param previewImagesDark the previewImagesDark value to set.
     * @return the ProductTemplateModelInner object itself.
     */
    public ProductTemplateModelInner withPreviewImagesDark(List<String> previewImagesDark) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ProductTemplateProperties();
        }
        this.innerProperties().withPreviewImagesDark(previewImagesDark);
        return this;
    }

    /**
     * Get the packageId property: the package Id contains this template.
     * 
     * @return the packageId value.
     */
    public String packageId() {
        return this.innerProperties() == null ? null : this.innerProperties().packageId();
    }

    /**
     * Set the packageId property: the package Id contains this template.
     * 
     * @param packageId the packageId value to set.
     * @return the ProductTemplateModelInner object itself.
     */
    public ProductTemplateModelInner withPackageId(String packageId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ProductTemplateProperties();
        }
        this.innerProperties().withPackageId(packageId);
        return this;
    }

    /**
     * Get the packageKind property: the packageKind of the package contains this template.
     * 
     * @return the packageKind value.
     */
    public PackageKind packageKind() {
        return this.innerProperties() == null ? null : this.innerProperties().packageKind();
    }

    /**
     * Set the packageKind property: the packageKind of the package contains this template.
     * 
     * @param packageKind the packageKind value to set.
     * @return the ProductTemplateModelInner object itself.
     */
    public ProductTemplateModelInner withPackageKind(PackageKind packageKind) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ProductTemplateProperties();
        }
        this.innerProperties().withPackageKind(packageKind);
        return this;
    }

    /**
     * Get the packageName property: the name of the package contains this template.
     * 
     * @return the packageName value.
     */
    public String packageName() {
        return this.innerProperties() == null ? null : this.innerProperties().packageName();
    }

    /**
     * Set the packageName property: the name of the package contains this template.
     * 
     * @param packageName the packageName value to set.
     * @return the ProductTemplateModelInner object itself.
     */
    public ProductTemplateModelInner withPackageName(String packageName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ProductTemplateProperties();
        }
        this.innerProperties().withPackageName(packageName);
        return this;
    }

    /**
     * Get the isDeprecated property: Flag indicates if this template is deprecated.
     * 
     * @return the isDeprecated value.
     */
    public Flag isDeprecated() {
        return this.innerProperties() == null ? null : this.innerProperties().isDeprecated();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("etag", etag());
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ProductTemplateModelInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ProductTemplateModelInner if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ProductTemplateModelInner.
     */
    public static ProductTemplateModelInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ProductTemplateModelInner deserializedProductTemplateModelInner = new ProductTemplateModelInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedProductTemplateModelInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedProductTemplateModelInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedProductTemplateModelInner.type = reader.getString();
                } else if ("etag".equals(fieldName)) {
                    deserializedProductTemplateModelInner.withEtag(reader.getString());
                } else if ("systemData".equals(fieldName)) {
                    deserializedProductTemplateModelInner.systemData = SystemData.fromJson(reader);
                } else if ("properties".equals(fieldName)) {
                    deserializedProductTemplateModelInner.innerProperties = ProductTemplateProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedProductTemplateModelInner;
        });
    }
}
