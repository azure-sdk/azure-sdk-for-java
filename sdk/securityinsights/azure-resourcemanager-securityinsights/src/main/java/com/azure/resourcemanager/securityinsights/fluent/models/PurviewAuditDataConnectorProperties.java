// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.securityinsights.models.DataConnectorTenantId;
import com.azure.resourcemanager.securityinsights.models.DcrConfiguration;
import com.azure.resourcemanager.securityinsights.models.PurviewAuditConnectorDataTypes;
import java.io.IOException;

/**
 * PurviewAudit data connector properties.
 */
@Fluent
public final class PurviewAuditDataConnectorProperties extends DataConnectorTenantId {
    /*
     * The connector definition name (the dataConnectorDefinition resource id).
     */
    private String connectorDefinitionName;

    /*
     * The source type indicates which kind of data is relevant for this connector.
     */
    private String sourceType;

    /*
     * The DCR related properties.
     */
    private DcrConfiguration dcrConfig;

    /*
     * The available data types for the connector.
     */
    private PurviewAuditConnectorDataTypes dataTypes;

    /**
     * Creates an instance of PurviewAuditDataConnectorProperties class.
     */
    public PurviewAuditDataConnectorProperties() {
    }

    /**
     * Get the connectorDefinitionName property: The connector definition name (the dataConnectorDefinition resource
     * id).
     * 
     * @return the connectorDefinitionName value.
     */
    public String connectorDefinitionName() {
        return this.connectorDefinitionName;
    }

    /**
     * Set the connectorDefinitionName property: The connector definition name (the dataConnectorDefinition resource
     * id).
     * 
     * @param connectorDefinitionName the connectorDefinitionName value to set.
     * @return the PurviewAuditDataConnectorProperties object itself.
     */
    public PurviewAuditDataConnectorProperties withConnectorDefinitionName(String connectorDefinitionName) {
        this.connectorDefinitionName = connectorDefinitionName;
        return this;
    }

    /**
     * Get the sourceType property: The source type indicates which kind of data is relevant for this connector.
     * 
     * @return the sourceType value.
     */
    public String sourceType() {
        return this.sourceType;
    }

    /**
     * Set the sourceType property: The source type indicates which kind of data is relevant for this connector.
     * 
     * @param sourceType the sourceType value to set.
     * @return the PurviewAuditDataConnectorProperties object itself.
     */
    public PurviewAuditDataConnectorProperties withSourceType(String sourceType) {
        this.sourceType = sourceType;
        return this;
    }

    /**
     * Get the dcrConfig property: The DCR related properties.
     * 
     * @return the dcrConfig value.
     */
    public DcrConfiguration dcrConfig() {
        return this.dcrConfig;
    }

    /**
     * Set the dcrConfig property: The DCR related properties.
     * 
     * @param dcrConfig the dcrConfig value to set.
     * @return the PurviewAuditDataConnectorProperties object itself.
     */
    public PurviewAuditDataConnectorProperties withDcrConfig(DcrConfiguration dcrConfig) {
        this.dcrConfig = dcrConfig;
        return this;
    }

    /**
     * Get the dataTypes property: The available data types for the connector.
     * 
     * @return the dataTypes value.
     */
    public PurviewAuditConnectorDataTypes dataTypes() {
        return this.dataTypes;
    }

    /**
     * Set the dataTypes property: The available data types for the connector.
     * 
     * @param dataTypes the dataTypes value to set.
     * @return the PurviewAuditDataConnectorProperties object itself.
     */
    public PurviewAuditDataConnectorProperties withDataTypes(PurviewAuditConnectorDataTypes dataTypes) {
        this.dataTypes = dataTypes;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PurviewAuditDataConnectorProperties withTenantId(String tenantId) {
        super.withTenantId(tenantId);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (dcrConfig() != null) {
            dcrConfig().validate();
        }
        if (dataTypes() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property dataTypes in model PurviewAuditDataConnectorProperties"));
        } else {
            dataTypes().validate();
        }
        if (tenantId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property tenantId in model PurviewAuditDataConnectorProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(PurviewAuditDataConnectorProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("tenantId", tenantId());
        jsonWriter.writeJsonField("dataTypes", this.dataTypes);
        jsonWriter.writeStringField("connectorDefinitionName", this.connectorDefinitionName);
        jsonWriter.writeStringField("sourceType", this.sourceType);
        jsonWriter.writeJsonField("dcrConfig", this.dcrConfig);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PurviewAuditDataConnectorProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PurviewAuditDataConnectorProperties if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the PurviewAuditDataConnectorProperties.
     */
    public static PurviewAuditDataConnectorProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PurviewAuditDataConnectorProperties deserializedPurviewAuditDataConnectorProperties
                = new PurviewAuditDataConnectorProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("tenantId".equals(fieldName)) {
                    deserializedPurviewAuditDataConnectorProperties.withTenantId(reader.getString());
                } else if ("dataTypes".equals(fieldName)) {
                    deserializedPurviewAuditDataConnectorProperties.dataTypes
                        = PurviewAuditConnectorDataTypes.fromJson(reader);
                } else if ("connectorDefinitionName".equals(fieldName)) {
                    deserializedPurviewAuditDataConnectorProperties.connectorDefinitionName = reader.getString();
                } else if ("sourceType".equals(fieldName)) {
                    deserializedPurviewAuditDataConnectorProperties.sourceType = reader.getString();
                } else if ("dcrConfig".equals(fieldName)) {
                    deserializedPurviewAuditDataConnectorProperties.dcrConfig = DcrConfiguration.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPurviewAuditDataConnectorProperties;
        });
    }
}
