// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * The UiConfig for 'Customizable' connector definition kind.
 */
@Fluent
public final class CustomizableConnectorUiConfig {
    /*
     * Gets or sets custom connector id. optional field.
     */
    @JsonProperty(value = "id")
    private String id;

    /*
     * Gets or sets the connector blade title.
     */
    @JsonProperty(value = "title", required = true)
    private String title;

    /*
     * Gets or sets the connector publisher name.
     */
    @JsonProperty(value = "publisher", required = true)
    private String publisher;

    /*
     * Gets or sets the connector description in markdown format.
     */
    @JsonProperty(value = "descriptionMarkdown", required = true)
    private String descriptionMarkdown;

    /*
     * Gets or sets the name of the table the connector will insert the data to.
     * This name can be used in other queries by specifying {{graphQueriesTableName}} placeholder
     * in Query and LastDataReceivedQuery values.
     */
    @JsonProperty(value = "graphQueriesTableName")
    private String graphQueriesTableName;

    /*
     * Gets or sets the graph queries to show the current data volume over time.
     */
    @JsonProperty(value = "graphQueries", required = true)
    private List<GraphQuery> graphQueries;

    /*
     * Gets or sets the sample queries for the connector.
     */
    @JsonProperty(value = "sampleQueries", required = true)
    private List<SampleQuery> sampleQueries;

    /*
     * Gets or sets the data types to check for last data received.
     */
    @JsonProperty(value = "dataTypes", required = true)
    private List<ConnectorDataType> dataTypes;

    /*
     * Gets or sets the way the connector checks whether the connector is connected.
     */
    @JsonProperty(value = "connectivityCriteria", required = true)
    private List<ConnectivityCriterion> connectivityCriteria;

    /*
     * The exposure status of the connector to the customers.
     */
    @JsonProperty(value = "availability")
    private ConnectorDefinitionsAvailability availability;

    /*
     * The required Permissions for the connector.
     */
    @JsonProperty(value = "permissions", required = true)
    private ConnectorDefinitionsPermissions permissions;

    /*
     * Gets or sets the instruction steps to enable the connector.
     */
    @JsonProperty(value = "instructionSteps", required = true)
    private List<InstructionStep> instructionSteps;

    /*
     * Gets or sets the connector logo to be used when displaying the connector within Azure Sentinel's connector's
     * gallery.
     * The logo value should be in SVG format.
     */
    @JsonProperty(value = "logo")
    private String logo;

    /*
     * Gets or sets a value indicating whether to use 'OR'(SOME) or 'AND' between ConnectivityCriteria items.
     */
    @JsonProperty(value = "isConnectivityCriteriasMatchSome")
    private Boolean isConnectivityCriteriasMatchSome;

    /**
     * Creates an instance of CustomizableConnectorUiConfig class.
     */
    public CustomizableConnectorUiConfig() {
    }

    /**
     * Get the id property: Gets or sets custom connector id. optional field.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: Gets or sets custom connector id. optional field.
     * 
     * @param id the id value to set.
     * @return the CustomizableConnectorUiConfig object itself.
     */
    public CustomizableConnectorUiConfig withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the title property: Gets or sets the connector blade title.
     * 
     * @return the title value.
     */
    public String title() {
        return this.title;
    }

    /**
     * Set the title property: Gets or sets the connector blade title.
     * 
     * @param title the title value to set.
     * @return the CustomizableConnectorUiConfig object itself.
     */
    public CustomizableConnectorUiConfig withTitle(String title) {
        this.title = title;
        return this;
    }

    /**
     * Get the publisher property: Gets or sets the connector publisher name.
     * 
     * @return the publisher value.
     */
    public String publisher() {
        return this.publisher;
    }

    /**
     * Set the publisher property: Gets or sets the connector publisher name.
     * 
     * @param publisher the publisher value to set.
     * @return the CustomizableConnectorUiConfig object itself.
     */
    public CustomizableConnectorUiConfig withPublisher(String publisher) {
        this.publisher = publisher;
        return this;
    }

    /**
     * Get the descriptionMarkdown property: Gets or sets the connector description in markdown format.
     * 
     * @return the descriptionMarkdown value.
     */
    public String descriptionMarkdown() {
        return this.descriptionMarkdown;
    }

    /**
     * Set the descriptionMarkdown property: Gets or sets the connector description in markdown format.
     * 
     * @param descriptionMarkdown the descriptionMarkdown value to set.
     * @return the CustomizableConnectorUiConfig object itself.
     */
    public CustomizableConnectorUiConfig withDescriptionMarkdown(String descriptionMarkdown) {
        this.descriptionMarkdown = descriptionMarkdown;
        return this;
    }

    /**
     * Get the graphQueriesTableName property: Gets or sets the name of the table the connector will insert the data
     * to.
     * This name can be used in other queries by specifying {{graphQueriesTableName}} placeholder
     * in Query and LastDataReceivedQuery values.
     * 
     * @return the graphQueriesTableName value.
     */
    public String graphQueriesTableName() {
        return this.graphQueriesTableName;
    }

    /**
     * Set the graphQueriesTableName property: Gets or sets the name of the table the connector will insert the data
     * to.
     * This name can be used in other queries by specifying {{graphQueriesTableName}} placeholder
     * in Query and LastDataReceivedQuery values.
     * 
     * @param graphQueriesTableName the graphQueriesTableName value to set.
     * @return the CustomizableConnectorUiConfig object itself.
     */
    public CustomizableConnectorUiConfig withGraphQueriesTableName(String graphQueriesTableName) {
        this.graphQueriesTableName = graphQueriesTableName;
        return this;
    }

    /**
     * Get the graphQueries property: Gets or sets the graph queries to show the current data volume over time.
     * 
     * @return the graphQueries value.
     */
    public List<GraphQuery> graphQueries() {
        return this.graphQueries;
    }

    /**
     * Set the graphQueries property: Gets or sets the graph queries to show the current data volume over time.
     * 
     * @param graphQueries the graphQueries value to set.
     * @return the CustomizableConnectorUiConfig object itself.
     */
    public CustomizableConnectorUiConfig withGraphQueries(List<GraphQuery> graphQueries) {
        this.graphQueries = graphQueries;
        return this;
    }

    /**
     * Get the sampleQueries property: Gets or sets the sample queries for the connector.
     * 
     * @return the sampleQueries value.
     */
    public List<SampleQuery> sampleQueries() {
        return this.sampleQueries;
    }

    /**
     * Set the sampleQueries property: Gets or sets the sample queries for the connector.
     * 
     * @param sampleQueries the sampleQueries value to set.
     * @return the CustomizableConnectorUiConfig object itself.
     */
    public CustomizableConnectorUiConfig withSampleQueries(List<SampleQuery> sampleQueries) {
        this.sampleQueries = sampleQueries;
        return this;
    }

    /**
     * Get the dataTypes property: Gets or sets the data types to check for last data received.
     * 
     * @return the dataTypes value.
     */
    public List<ConnectorDataType> dataTypes() {
        return this.dataTypes;
    }

    /**
     * Set the dataTypes property: Gets or sets the data types to check for last data received.
     * 
     * @param dataTypes the dataTypes value to set.
     * @return the CustomizableConnectorUiConfig object itself.
     */
    public CustomizableConnectorUiConfig withDataTypes(List<ConnectorDataType> dataTypes) {
        this.dataTypes = dataTypes;
        return this;
    }

    /**
     * Get the connectivityCriteria property: Gets or sets the way the connector checks whether the connector is
     * connected.
     * 
     * @return the connectivityCriteria value.
     */
    public List<ConnectivityCriterion> connectivityCriteria() {
        return this.connectivityCriteria;
    }

    /**
     * Set the connectivityCriteria property: Gets or sets the way the connector checks whether the connector is
     * connected.
     * 
     * @param connectivityCriteria the connectivityCriteria value to set.
     * @return the CustomizableConnectorUiConfig object itself.
     */
    public CustomizableConnectorUiConfig withConnectivityCriteria(List<ConnectivityCriterion> connectivityCriteria) {
        this.connectivityCriteria = connectivityCriteria;
        return this;
    }

    /**
     * Get the availability property: The exposure status of the connector to the customers.
     * 
     * @return the availability value.
     */
    public ConnectorDefinitionsAvailability availability() {
        return this.availability;
    }

    /**
     * Set the availability property: The exposure status of the connector to the customers.
     * 
     * @param availability the availability value to set.
     * @return the CustomizableConnectorUiConfig object itself.
     */
    public CustomizableConnectorUiConfig withAvailability(ConnectorDefinitionsAvailability availability) {
        this.availability = availability;
        return this;
    }

    /**
     * Get the permissions property: The required Permissions for the connector.
     * 
     * @return the permissions value.
     */
    public ConnectorDefinitionsPermissions permissions() {
        return this.permissions;
    }

    /**
     * Set the permissions property: The required Permissions for the connector.
     * 
     * @param permissions the permissions value to set.
     * @return the CustomizableConnectorUiConfig object itself.
     */
    public CustomizableConnectorUiConfig withPermissions(ConnectorDefinitionsPermissions permissions) {
        this.permissions = permissions;
        return this;
    }

    /**
     * Get the instructionSteps property: Gets or sets the instruction steps to enable the connector.
     * 
     * @return the instructionSteps value.
     */
    public List<InstructionStep> instructionSteps() {
        return this.instructionSteps;
    }

    /**
     * Set the instructionSteps property: Gets or sets the instruction steps to enable the connector.
     * 
     * @param instructionSteps the instructionSteps value to set.
     * @return the CustomizableConnectorUiConfig object itself.
     */
    public CustomizableConnectorUiConfig withInstructionSteps(List<InstructionStep> instructionSteps) {
        this.instructionSteps = instructionSteps;
        return this;
    }

    /**
     * Get the logo property: Gets or sets the connector logo to be used when displaying the connector within Azure
     * Sentinel's connector's gallery.
     * The logo value should be in SVG format.
     * 
     * @return the logo value.
     */
    public String logo() {
        return this.logo;
    }

    /**
     * Set the logo property: Gets or sets the connector logo to be used when displaying the connector within Azure
     * Sentinel's connector's gallery.
     * The logo value should be in SVG format.
     * 
     * @param logo the logo value to set.
     * @return the CustomizableConnectorUiConfig object itself.
     */
    public CustomizableConnectorUiConfig withLogo(String logo) {
        this.logo = logo;
        return this;
    }

    /**
     * Get the isConnectivityCriteriasMatchSome property: Gets or sets a value indicating whether to use 'OR'(SOME) or
     * 'AND' between ConnectivityCriteria items.
     * 
     * @return the isConnectivityCriteriasMatchSome value.
     */
    public Boolean isConnectivityCriteriasMatchSome() {
        return this.isConnectivityCriteriasMatchSome;
    }

    /**
     * Set the isConnectivityCriteriasMatchSome property: Gets or sets a value indicating whether to use 'OR'(SOME) or
     * 'AND' between ConnectivityCriteria items.
     * 
     * @param isConnectivityCriteriasMatchSome the isConnectivityCriteriasMatchSome value to set.
     * @return the CustomizableConnectorUiConfig object itself.
     */
    public CustomizableConnectorUiConfig
        withIsConnectivityCriteriasMatchSome(Boolean isConnectivityCriteriasMatchSome) {
        this.isConnectivityCriteriasMatchSome = isConnectivityCriteriasMatchSome;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (title() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property title in model CustomizableConnectorUiConfig"));
        }
        if (publisher() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property publisher in model CustomizableConnectorUiConfig"));
        }
        if (descriptionMarkdown() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property descriptionMarkdown in model CustomizableConnectorUiConfig"));
        }
        if (graphQueries() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property graphQueries in model CustomizableConnectorUiConfig"));
        } else {
            graphQueries().forEach(e -> e.validate());
        }
        if (sampleQueries() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property sampleQueries in model CustomizableConnectorUiConfig"));
        } else {
            sampleQueries().forEach(e -> e.validate());
        }
        if (dataTypes() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property dataTypes in model CustomizableConnectorUiConfig"));
        } else {
            dataTypes().forEach(e -> e.validate());
        }
        if (connectivityCriteria() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property connectivityCriteria in model CustomizableConnectorUiConfig"));
        } else {
            connectivityCriteria().forEach(e -> e.validate());
        }
        if (availability() != null) {
            availability().validate();
        }
        if (permissions() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property permissions in model CustomizableConnectorUiConfig"));
        } else {
            permissions().validate();
        }
        if (instructionSteps() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property instructionSteps in model CustomizableConnectorUiConfig"));
        } else {
            instructionSteps().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(CustomizableConnectorUiConfig.class);
}
