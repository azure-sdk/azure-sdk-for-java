// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.securityinsights.models.AttackTactic;
import com.azure.resourcemanager.securityinsights.models.HuntOwner;
import com.azure.resourcemanager.securityinsights.models.HypothesisStatus;
import com.azure.resourcemanager.securityinsights.models.Status;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * Describes hunt properties.
 */
@Fluent
public final class HuntProperties {
    /*
     * The display name of the hunt
     */
    @JsonProperty(value = "displayName", required = true)
    private String displayName;

    /*
     * The description of the hunt
     */
    @JsonProperty(value = "description", required = true)
    private String description;

    /*
     * The status of the hunt.
     */
    @JsonProperty(value = "status")
    private Status status;

    /*
     * The hypothesis status of the hunt.
     */
    @JsonProperty(value = "hypothesisStatus")
    private HypothesisStatus hypothesisStatus;

    /*
     * A list of mitre attack tactics the hunt is associated with
     */
    @JsonProperty(value = "attackTactics")
    private List<AttackTactic> attackTactics;

    /*
     * A list of a mitre attack techniques the hunt is associated with
     */
    @JsonProperty(value = "attackTechniques")
    private List<String> attackTechniques;

    /*
     * List of labels relevant to this hunt 
     */
    @JsonProperty(value = "labels")
    private List<String> labels;

    /*
     * Describes a user that the hunt is assigned to
     */
    @JsonProperty(value = "owner")
    private HuntOwner owner;

    /**
     * Creates an instance of HuntProperties class.
     */
    public HuntProperties() {
    }

    /**
     * Get the displayName property: The display name of the hunt.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: The display name of the hunt.
     * 
     * @param displayName the displayName value to set.
     * @return the HuntProperties object itself.
     */
    public HuntProperties withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the description property: The description of the hunt.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: The description of the hunt.
     * 
     * @param description the description value to set.
     * @return the HuntProperties object itself.
     */
    public HuntProperties withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the status property: The status of the hunt.
     * 
     * @return the status value.
     */
    public Status status() {
        return this.status;
    }

    /**
     * Set the status property: The status of the hunt.
     * 
     * @param status the status value to set.
     * @return the HuntProperties object itself.
     */
    public HuntProperties withStatus(Status status) {
        this.status = status;
        return this;
    }

    /**
     * Get the hypothesisStatus property: The hypothesis status of the hunt.
     * 
     * @return the hypothesisStatus value.
     */
    public HypothesisStatus hypothesisStatus() {
        return this.hypothesisStatus;
    }

    /**
     * Set the hypothesisStatus property: The hypothesis status of the hunt.
     * 
     * @param hypothesisStatus the hypothesisStatus value to set.
     * @return the HuntProperties object itself.
     */
    public HuntProperties withHypothesisStatus(HypothesisStatus hypothesisStatus) {
        this.hypothesisStatus = hypothesisStatus;
        return this;
    }

    /**
     * Get the attackTactics property: A list of mitre attack tactics the hunt is associated with.
     * 
     * @return the attackTactics value.
     */
    public List<AttackTactic> attackTactics() {
        return this.attackTactics;
    }

    /**
     * Set the attackTactics property: A list of mitre attack tactics the hunt is associated with.
     * 
     * @param attackTactics the attackTactics value to set.
     * @return the HuntProperties object itself.
     */
    public HuntProperties withAttackTactics(List<AttackTactic> attackTactics) {
        this.attackTactics = attackTactics;
        return this;
    }

    /**
     * Get the attackTechniques property: A list of a mitre attack techniques the hunt is associated with.
     * 
     * @return the attackTechniques value.
     */
    public List<String> attackTechniques() {
        return this.attackTechniques;
    }

    /**
     * Set the attackTechniques property: A list of a mitre attack techniques the hunt is associated with.
     * 
     * @param attackTechniques the attackTechniques value to set.
     * @return the HuntProperties object itself.
     */
    public HuntProperties withAttackTechniques(List<String> attackTechniques) {
        this.attackTechniques = attackTechniques;
        return this;
    }

    /**
     * Get the labels property: List of labels relevant to this hunt.
     * 
     * @return the labels value.
     */
    public List<String> labels() {
        return this.labels;
    }

    /**
     * Set the labels property: List of labels relevant to this hunt.
     * 
     * @param labels the labels value to set.
     * @return the HuntProperties object itself.
     */
    public HuntProperties withLabels(List<String> labels) {
        this.labels = labels;
        return this;
    }

    /**
     * Get the owner property: Describes a user that the hunt is assigned to.
     * 
     * @return the owner value.
     */
    public HuntOwner owner() {
        return this.owner;
    }

    /**
     * Set the owner property: Describes a user that the hunt is assigned to.
     * 
     * @param owner the owner value to set.
     * @return the HuntProperties object itself.
     */
    public HuntProperties withOwner(HuntOwner owner) {
        this.owner = owner;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (displayName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property displayName in model HuntProperties"));
        }
        if (description() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property description in model HuntProperties"));
        }
        if (owner() != null) {
            owner().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(HuntProperties.class);
}
