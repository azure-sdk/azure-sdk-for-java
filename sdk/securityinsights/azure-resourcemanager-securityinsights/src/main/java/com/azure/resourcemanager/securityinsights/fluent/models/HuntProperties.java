// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.securityinsights.models.AttackTactic;
import com.azure.resourcemanager.securityinsights.models.HuntOwner;
import com.azure.resourcemanager.securityinsights.models.HypothesisStatus;
import com.azure.resourcemanager.securityinsights.models.Status;
import java.io.IOException;
import java.util.List;

/**
 * Describes hunt properties.
 */
@Fluent
public final class HuntProperties implements JsonSerializable<HuntProperties> {
    /*
     * The display name of the hunt
     */
    private String displayName;

    /*
     * The description of the hunt
     */
    private String description;

    /*
     * The status of the hunt.
     */
    private Status status;

    /*
     * The hypothesis status of the hunt.
     */
    private HypothesisStatus hypothesisStatus;

    /*
     * A list of mitre attack tactics the hunt is associated with
     */
    private List<AttackTactic> attackTactics;

    /*
     * A list of a mitre attack techniques the hunt is associated with
     */
    private List<String> attackTechniques;

    /*
     * List of labels relevant to this hunt
     */
    private List<String> labels;

    /*
     * Describes a user that the hunt is assigned to
     */
    private HuntOwner owner;

    /**
     * Creates an instance of HuntProperties class.
     */
    public HuntProperties() {
    }

    /**
     * Get the displayName property: The display name of the hunt.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: The display name of the hunt.
     * 
     * @param displayName the displayName value to set.
     * @return the HuntProperties object itself.
     */
    public HuntProperties withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the description property: The description of the hunt.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: The description of the hunt.
     * 
     * @param description the description value to set.
     * @return the HuntProperties object itself.
     */
    public HuntProperties withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the status property: The status of the hunt.
     * 
     * @return the status value.
     */
    public Status status() {
        return this.status;
    }

    /**
     * Set the status property: The status of the hunt.
     * 
     * @param status the status value to set.
     * @return the HuntProperties object itself.
     */
    public HuntProperties withStatus(Status status) {
        this.status = status;
        return this;
    }

    /**
     * Get the hypothesisStatus property: The hypothesis status of the hunt.
     * 
     * @return the hypothesisStatus value.
     */
    public HypothesisStatus hypothesisStatus() {
        return this.hypothesisStatus;
    }

    /**
     * Set the hypothesisStatus property: The hypothesis status of the hunt.
     * 
     * @param hypothesisStatus the hypothesisStatus value to set.
     * @return the HuntProperties object itself.
     */
    public HuntProperties withHypothesisStatus(HypothesisStatus hypothesisStatus) {
        this.hypothesisStatus = hypothesisStatus;
        return this;
    }

    /**
     * Get the attackTactics property: A list of mitre attack tactics the hunt is associated with.
     * 
     * @return the attackTactics value.
     */
    public List<AttackTactic> attackTactics() {
        return this.attackTactics;
    }

    /**
     * Set the attackTactics property: A list of mitre attack tactics the hunt is associated with.
     * 
     * @param attackTactics the attackTactics value to set.
     * @return the HuntProperties object itself.
     */
    public HuntProperties withAttackTactics(List<AttackTactic> attackTactics) {
        this.attackTactics = attackTactics;
        return this;
    }

    /**
     * Get the attackTechniques property: A list of a mitre attack techniques the hunt is associated with.
     * 
     * @return the attackTechniques value.
     */
    public List<String> attackTechniques() {
        return this.attackTechniques;
    }

    /**
     * Set the attackTechniques property: A list of a mitre attack techniques the hunt is associated with.
     * 
     * @param attackTechniques the attackTechniques value to set.
     * @return the HuntProperties object itself.
     */
    public HuntProperties withAttackTechniques(List<String> attackTechniques) {
        this.attackTechniques = attackTechniques;
        return this;
    }

    /**
     * Get the labels property: List of labels relevant to this hunt.
     * 
     * @return the labels value.
     */
    public List<String> labels() {
        return this.labels;
    }

    /**
     * Set the labels property: List of labels relevant to this hunt.
     * 
     * @param labels the labels value to set.
     * @return the HuntProperties object itself.
     */
    public HuntProperties withLabels(List<String> labels) {
        this.labels = labels;
        return this;
    }

    /**
     * Get the owner property: Describes a user that the hunt is assigned to.
     * 
     * @return the owner value.
     */
    public HuntOwner owner() {
        return this.owner;
    }

    /**
     * Set the owner property: Describes a user that the hunt is assigned to.
     * 
     * @param owner the owner value to set.
     * @return the HuntProperties object itself.
     */
    public HuntProperties withOwner(HuntOwner owner) {
        this.owner = owner;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (displayName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property displayName in model HuntProperties"));
        }
        if (description() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property description in model HuntProperties"));
        }
        if (owner() != null) {
            owner().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(HuntProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("displayName", this.displayName);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        jsonWriter.writeStringField("hypothesisStatus",
            this.hypothesisStatus == null ? null : this.hypothesisStatus.toString());
        jsonWriter.writeArrayField("attackTactics", this.attackTactics,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        jsonWriter.writeArrayField("attackTechniques", this.attackTechniques,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("labels", this.labels, (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("owner", this.owner);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of HuntProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of HuntProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the HuntProperties.
     */
    public static HuntProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            HuntProperties deserializedHuntProperties = new HuntProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("displayName".equals(fieldName)) {
                    deserializedHuntProperties.displayName = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedHuntProperties.description = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedHuntProperties.status = Status.fromString(reader.getString());
                } else if ("hypothesisStatus".equals(fieldName)) {
                    deserializedHuntProperties.hypothesisStatus = HypothesisStatus.fromString(reader.getString());
                } else if ("attackTactics".equals(fieldName)) {
                    List<AttackTactic> attackTactics
                        = reader.readArray(reader1 -> AttackTactic.fromString(reader1.getString()));
                    deserializedHuntProperties.attackTactics = attackTactics;
                } else if ("attackTechniques".equals(fieldName)) {
                    List<String> attackTechniques = reader.readArray(reader1 -> reader1.getString());
                    deserializedHuntProperties.attackTechniques = attackTechniques;
                } else if ("labels".equals(fieldName)) {
                    List<String> labels = reader.readArray(reader1 -> reader1.getString());
                    deserializedHuntProperties.labels = labels;
                } else if ("owner".equals(fieldName)) {
                    deserializedHuntProperties.owner = HuntOwner.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedHuntProperties;
        });
    }
}
