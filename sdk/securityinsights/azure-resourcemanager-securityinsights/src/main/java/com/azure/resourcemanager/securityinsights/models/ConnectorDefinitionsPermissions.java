// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The required Permissions for the connector.
 */
@Fluent
public final class ConnectorDefinitionsPermissions implements JsonSerializable<ConnectorDefinitionsPermissions> {
    /*
     * Gets or sets the required tenant permissions for the connector.
     */
    private List<String> tenant;

    /*
     * Gets or sets the required licenses for the user to create connections.
     */
    private List<String> licenses;

    /*
     * Gets or sets the resource provider permissions required for the user to create connections.
     */
    private List<ConnectorDefinitionsResourceProvider> resourceProvider;

    /*
     * Gets or sets the customs permissions required for the user to create connections.
     */
    private List<CustomPermissionDetails> customs;

    /**
     * Creates an instance of ConnectorDefinitionsPermissions class.
     */
    public ConnectorDefinitionsPermissions() {
    }

    /**
     * Get the tenant property: Gets or sets the required tenant permissions for the connector.
     * 
     * @return the tenant value.
     */
    public List<String> tenant() {
        return this.tenant;
    }

    /**
     * Set the tenant property: Gets or sets the required tenant permissions for the connector.
     * 
     * @param tenant the tenant value to set.
     * @return the ConnectorDefinitionsPermissions object itself.
     */
    public ConnectorDefinitionsPermissions withTenant(List<String> tenant) {
        this.tenant = tenant;
        return this;
    }

    /**
     * Get the licenses property: Gets or sets the required licenses for the user to create connections.
     * 
     * @return the licenses value.
     */
    public List<String> licenses() {
        return this.licenses;
    }

    /**
     * Set the licenses property: Gets or sets the required licenses for the user to create connections.
     * 
     * @param licenses the licenses value to set.
     * @return the ConnectorDefinitionsPermissions object itself.
     */
    public ConnectorDefinitionsPermissions withLicenses(List<String> licenses) {
        this.licenses = licenses;
        return this;
    }

    /**
     * Get the resourceProvider property: Gets or sets the resource provider permissions required for the user to create
     * connections.
     * 
     * @return the resourceProvider value.
     */
    public List<ConnectorDefinitionsResourceProvider> resourceProvider() {
        return this.resourceProvider;
    }

    /**
     * Set the resourceProvider property: Gets or sets the resource provider permissions required for the user to create
     * connections.
     * 
     * @param resourceProvider the resourceProvider value to set.
     * @return the ConnectorDefinitionsPermissions object itself.
     */
    public ConnectorDefinitionsPermissions
        withResourceProvider(List<ConnectorDefinitionsResourceProvider> resourceProvider) {
        this.resourceProvider = resourceProvider;
        return this;
    }

    /**
     * Get the customs property: Gets or sets the customs permissions required for the user to create connections.
     * 
     * @return the customs value.
     */
    public List<CustomPermissionDetails> customs() {
        return this.customs;
    }

    /**
     * Set the customs property: Gets or sets the customs permissions required for the user to create connections.
     * 
     * @param customs the customs value to set.
     * @return the ConnectorDefinitionsPermissions object itself.
     */
    public ConnectorDefinitionsPermissions withCustoms(List<CustomPermissionDetails> customs) {
        this.customs = customs;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (resourceProvider() != null) {
            resourceProvider().forEach(e -> e.validate());
        }
        if (customs() != null) {
            customs().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("tenant", this.tenant, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("licenses", this.licenses, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("resourceProvider", this.resourceProvider,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("customs", this.customs, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ConnectorDefinitionsPermissions from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ConnectorDefinitionsPermissions if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ConnectorDefinitionsPermissions.
     */
    public static ConnectorDefinitionsPermissions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ConnectorDefinitionsPermissions deserializedConnectorDefinitionsPermissions
                = new ConnectorDefinitionsPermissions();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("tenant".equals(fieldName)) {
                    List<String> tenant = reader.readArray(reader1 -> reader1.getString());
                    deserializedConnectorDefinitionsPermissions.tenant = tenant;
                } else if ("licenses".equals(fieldName)) {
                    List<String> licenses = reader.readArray(reader1 -> reader1.getString());
                    deserializedConnectorDefinitionsPermissions.licenses = licenses;
                } else if ("resourceProvider".equals(fieldName)) {
                    List<ConnectorDefinitionsResourceProvider> resourceProvider
                        = reader.readArray(reader1 -> ConnectorDefinitionsResourceProvider.fromJson(reader1));
                    deserializedConnectorDefinitionsPermissions.resourceProvider = resourceProvider;
                } else if ("customs".equals(fieldName)) {
                    List<CustomPermissionDetails> customs
                        = reader.readArray(reader1 -> CustomPermissionDetails.fromJson(reader1));
                    deserializedConnectorDefinitionsPermissions.customs = customs;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedConnectorDefinitionsPermissions;
        });
    }
}
