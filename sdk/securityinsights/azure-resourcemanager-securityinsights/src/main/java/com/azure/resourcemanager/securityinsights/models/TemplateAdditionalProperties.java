// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.securityinsights.fluent.models.TemplateProperties;
import java.io.IOException;
import java.util.List;

/**
 * additional properties of product template.
 */
@Fluent
public class TemplateAdditionalProperties implements JsonSerializable<TemplateAdditionalProperties> {
    /*
     * The JSON of the ARM template to deploy active content. Expandable.
     */
    private Object mainTemplate;

    /*
     * Dependant templates. Expandable.
     */
    private List<TemplateProperties> dependantTemplates;

    /**
     * Creates an instance of TemplateAdditionalProperties class.
     */
    public TemplateAdditionalProperties() {
    }

    /**
     * Get the mainTemplate property: The JSON of the ARM template to deploy active content. Expandable.
     * 
     * @return the mainTemplate value.
     */
    public Object mainTemplate() {
        return this.mainTemplate;
    }

    /**
     * Set the mainTemplate property: The JSON of the ARM template to deploy active content. Expandable.
     * 
     * @param mainTemplate the mainTemplate value to set.
     * @return the TemplateAdditionalProperties object itself.
     */
    public TemplateAdditionalProperties withMainTemplate(Object mainTemplate) {
        this.mainTemplate = mainTemplate;
        return this;
    }

    /**
     * Get the dependantTemplates property: Dependant templates. Expandable.
     * 
     * @return the dependantTemplates value.
     */
    public List<TemplateProperties> dependantTemplates() {
        return this.dependantTemplates;
    }

    /**
     * Set the dependantTemplates property: Dependant templates. Expandable.
     * 
     * @param dependantTemplates the dependantTemplates value to set.
     * @return the TemplateAdditionalProperties object itself.
     */
    TemplateAdditionalProperties withDependantTemplates(List<TemplateProperties> dependantTemplates) {
        this.dependantTemplates = dependantTemplates;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (dependantTemplates() != null) {
            dependantTemplates().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeUntypedField("mainTemplate", this.mainTemplate);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TemplateAdditionalProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TemplateAdditionalProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the TemplateAdditionalProperties.
     */
    public static TemplateAdditionalProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TemplateAdditionalProperties deserializedTemplateAdditionalProperties = new TemplateAdditionalProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("mainTemplate".equals(fieldName)) {
                    deserializedTemplateAdditionalProperties.mainTemplate = reader.readUntyped();
                } else if ("dependantTemplates".equals(fieldName)) {
                    List<TemplateProperties> dependantTemplates
                        = reader.readArray(reader1 -> TemplateProperties.fromJson(reader1));
                    deserializedTemplateAdditionalProperties.dependantTemplates = dependantTemplates;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTemplateAdditionalProperties;
        });
    }
}
