// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.securityinsights.fluent.models.TemplateProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** additional properties of product template. */
@Fluent
public class TemplateAdditionalProperties {
    /*
     * The JSON of the ARM template to deploy active content. Expandable.
     */
    @JsonProperty(value = "mainTemplate")
    private Object mainTemplate;

    /*
     * Dependant templates. Expandable.
     */
    @JsonProperty(value = "dependantTemplates", access = JsonProperty.Access.WRITE_ONLY)
    private List<TemplateProperties> dependantTemplates;

    /** Creates an instance of TemplateAdditionalProperties class. */
    public TemplateAdditionalProperties() {
    }

    /**
     * Get the mainTemplate property: The JSON of the ARM template to deploy active content. Expandable.
     *
     * @return the mainTemplate value.
     */
    public Object mainTemplate() {
        return this.mainTemplate;
    }

    /**
     * Set the mainTemplate property: The JSON of the ARM template to deploy active content. Expandable.
     *
     * @param mainTemplate the mainTemplate value to set.
     * @return the TemplateAdditionalProperties object itself.
     */
    public TemplateAdditionalProperties withMainTemplate(Object mainTemplate) {
        this.mainTemplate = mainTemplate;
        return this;
    }

    /**
     * Get the dependantTemplates property: Dependant templates. Expandable.
     *
     * @return the dependantTemplates value.
     */
    public List<TemplateProperties> dependantTemplates() {
        return this.dependantTemplates;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (dependantTemplates() != null) {
            dependantTemplates().forEach(e -> e.validate());
        }
    }
}
