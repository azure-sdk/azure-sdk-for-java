// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeId;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Model for API authentication with basic flow - user name + password.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = "type", defaultImpl = BasicAuthModel.class, visible = true)
@JsonTypeName("Basic")
@Fluent
public final class BasicAuthModel extends CcpAuthConfig {
    /*
     * The auth type
     */
    @JsonTypeId
    @JsonProperty(value = "type", required = true)
    private CcpAuthType type = CcpAuthType.BASIC;

    /*
     * The user name.
     */
    @JsonProperty(value = "userName", required = true)
    private String username;

    /*
     * The password
     */
    @JsonProperty(value = "password", required = true)
    private String password;

    /**
     * Creates an instance of BasicAuthModel class.
     */
    public BasicAuthModel() {
    }

    /**
     * Get the type property: The auth type.
     * 
     * @return the type value.
     */
    @Override
    public CcpAuthType type() {
        return this.type;
    }

    /**
     * Get the username property: The user name.
     * 
     * @return the username value.
     */
    public String username() {
        return this.username;
    }

    /**
     * Set the username property: The user name.
     * 
     * @param username the username value to set.
     * @return the BasicAuthModel object itself.
     */
    public BasicAuthModel withUsername(String username) {
        this.username = username;
        return this;
    }

    /**
     * Get the password property: The password.
     * 
     * @return the password value.
     */
    public String password() {
        return this.password;
    }

    /**
     * Set the password property: The password.
     * 
     * @param password the password value to set.
     * @return the BasicAuthModel object itself.
     */
    public BasicAuthModel withPassword(String password) {
        this.password = password;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (username() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property username in model BasicAuthModel"));
        }
        if (password() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property password in model BasicAuthModel"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(BasicAuthModel.class);
}
