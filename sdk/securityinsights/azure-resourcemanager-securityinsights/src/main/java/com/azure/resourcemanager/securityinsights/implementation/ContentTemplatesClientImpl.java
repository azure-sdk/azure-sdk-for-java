// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.implementation;

import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.securityinsights.fluent.ContentTemplatesClient;
import com.azure.resourcemanager.securityinsights.fluent.models.TemplateInner;
import com.azure.resourcemanager.securityinsights.models.TemplateList;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in ContentTemplatesClient. */
public final class ContentTemplatesClientImpl implements ContentTemplatesClient {
    /** The proxy service used to perform REST calls. */
    private final ContentTemplatesService service;

    /** The service client containing this operation class. */
    private final SecurityInsightsImpl client;

    /**
     * Initializes an instance of ContentTemplatesClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    ContentTemplatesClientImpl(SecurityInsightsImpl client) {
        this.service =
            RestProxy.create(ContentTemplatesService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for SecurityInsightsContentTemplates to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "SecurityInsightsCont")
    public interface ContentTemplatesService {
        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights"
                + "/workspaces/{sentinelWorkspaceName}/providers/Microsoft.SecurityInsights/contentTemplates")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<TemplateList>> list(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("sentinelWorkspaceName") String sentinelWorkspaceName,
            @QueryParam("$filter") String filter,
            @QueryParam("$orderby") String orderby,
            @QueryParam("$top") Integer top,
            @QueryParam("$skip") Integer skip,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights"
                + "/workspaces/{sentinelWorkspaceName}/providers/Microsoft.SecurityInsights/contentTemplates"
                + "/{templateId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<TemplateInner>> get(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("sentinelWorkspaceName") String sentinelWorkspaceName,
            @PathParam("templateId") String templateId,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights"
                + "/workspaces/{sentinelWorkspaceName}/providers/Microsoft.SecurityInsights/contentTemplates"
                + "/{templateId}")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> delete(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("sentinelWorkspaceName") String sentinelWorkspaceName,
            @PathParam("templateId") String templateId,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<TemplateList>> listNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Gets all installed templates.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sentinelWorkspaceName The name of the workspace.
     * @param filter Filters the results, based on a Boolean condition. Optional.
     * @param orderby Sorts the results. Optional.
     * @param top Returns only the first n results. Optional.
     * @param skip Used to skip n elements in the OData query (offset). Returns a nextLink to the next page of results
     *     if there are any left.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all installed templates along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<TemplateInner>> listSinglePageAsync(
        String resourceGroupName,
        String sentinelWorkspaceName,
        String filter,
        String orderby,
        Integer top,
        Integer skip) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sentinelWorkspaceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter sentinelWorkspaceName is required and cannot be null."));
        }
        final String apiVersion = "2022-12-01-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .list(
                            this.client.getEndpoint(),
                            apiVersion,
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            sentinelWorkspaceName,
                            filter,
                            orderby,
                            top,
                            skip,
                            accept,
                            context))
            .<PagedResponse<TemplateInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets all installed templates.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sentinelWorkspaceName The name of the workspace.
     * @param filter Filters the results, based on a Boolean condition. Optional.
     * @param orderby Sorts the results. Optional.
     * @param top Returns only the first n results. Optional.
     * @param skip Used to skip n elements in the OData query (offset). Returns a nextLink to the next page of results
     *     if there are any left.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all installed templates along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<TemplateInner>> listSinglePageAsync(
        String resourceGroupName,
        String sentinelWorkspaceName,
        String filter,
        String orderby,
        Integer top,
        Integer skip,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sentinelWorkspaceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter sentinelWorkspaceName is required and cannot be null."));
        }
        final String apiVersion = "2022-12-01-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .list(
                this.client.getEndpoint(),
                apiVersion,
                this.client.getSubscriptionId(),
                resourceGroupName,
                sentinelWorkspaceName,
                filter,
                orderby,
                top,
                skip,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Gets all installed templates.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sentinelWorkspaceName The name of the workspace.
     * @param filter Filters the results, based on a Boolean condition. Optional.
     * @param orderby Sorts the results. Optional.
     * @param top Returns only the first n results. Optional.
     * @param skip Used to skip n elements in the OData query (offset). Returns a nextLink to the next page of results
     *     if there are any left.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all installed templates as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<TemplateInner> listAsync(
        String resourceGroupName,
        String sentinelWorkspaceName,
        String filter,
        String orderby,
        Integer top,
        Integer skip) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(resourceGroupName, sentinelWorkspaceName, filter, orderby, top, skip),
            nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Gets all installed templates.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sentinelWorkspaceName The name of the workspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all installed templates as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<TemplateInner> listAsync(String resourceGroupName, String sentinelWorkspaceName) {
        final String filter = null;
        final String orderby = null;
        final Integer top = null;
        final Integer skip = null;
        return new PagedFlux<>(
            () -> listSinglePageAsync(resourceGroupName, sentinelWorkspaceName, filter, orderby, top, skip),
            nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Gets all installed templates.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sentinelWorkspaceName The name of the workspace.
     * @param filter Filters the results, based on a Boolean condition. Optional.
     * @param orderby Sorts the results. Optional.
     * @param top Returns only the first n results. Optional.
     * @param skip Used to skip n elements in the OData query (offset). Returns a nextLink to the next page of results
     *     if there are any left.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all installed templates as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<TemplateInner> listAsync(
        String resourceGroupName,
        String sentinelWorkspaceName,
        String filter,
        String orderby,
        Integer top,
        Integer skip,
        Context context) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(resourceGroupName, sentinelWorkspaceName, filter, orderby, top, skip, context),
            nextLink -> listNextSinglePageAsync(nextLink, context));
    }

    /**
     * Gets all installed templates.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sentinelWorkspaceName The name of the workspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all installed templates as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<TemplateInner> list(String resourceGroupName, String sentinelWorkspaceName) {
        final String filter = null;
        final String orderby = null;
        final Integer top = null;
        final Integer skip = null;
        return new PagedIterable<>(listAsync(resourceGroupName, sentinelWorkspaceName, filter, orderby, top, skip));
    }

    /**
     * Gets all installed templates.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sentinelWorkspaceName The name of the workspace.
     * @param filter Filters the results, based on a Boolean condition. Optional.
     * @param orderby Sorts the results. Optional.
     * @param top Returns only the first n results. Optional.
     * @param skip Used to skip n elements in the OData query (offset). Returns a nextLink to the next page of results
     *     if there are any left.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all installed templates as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<TemplateInner> list(
        String resourceGroupName,
        String sentinelWorkspaceName,
        String filter,
        String orderby,
        Integer top,
        Integer skip,
        Context context) {
        return new PagedIterable<>(
            listAsync(resourceGroupName, sentinelWorkspaceName, filter, orderby, top, skip, context));
    }

    /**
     * Gets a template byt its identifier.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sentinelWorkspaceName The name of the workspace.
     * @param templateId template Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a template byt its identifier along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<TemplateInner>> getWithResponseAsync(
        String resourceGroupName, String sentinelWorkspaceName, String templateId) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sentinelWorkspaceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter sentinelWorkspaceName is required and cannot be null."));
        }
        if (templateId == null) {
            return Mono.error(new IllegalArgumentException("Parameter templateId is required and cannot be null."));
        }
        final String apiVersion = "2022-12-01-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .get(
                            this.client.getEndpoint(),
                            apiVersion,
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            sentinelWorkspaceName,
                            templateId,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets a template byt its identifier.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sentinelWorkspaceName The name of the workspace.
     * @param templateId template Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a template byt its identifier along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<TemplateInner>> getWithResponseAsync(
        String resourceGroupName, String sentinelWorkspaceName, String templateId, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sentinelWorkspaceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter sentinelWorkspaceName is required and cannot be null."));
        }
        if (templateId == null) {
            return Mono.error(new IllegalArgumentException("Parameter templateId is required and cannot be null."));
        }
        final String apiVersion = "2022-12-01-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .get(
                this.client.getEndpoint(),
                apiVersion,
                this.client.getSubscriptionId(),
                resourceGroupName,
                sentinelWorkspaceName,
                templateId,
                accept,
                context);
    }

    /**
     * Gets a template byt its identifier.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sentinelWorkspaceName The name of the workspace.
     * @param templateId template Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a template byt its identifier on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<TemplateInner> getAsync(String resourceGroupName, String sentinelWorkspaceName, String templateId) {
        return getWithResponseAsync(resourceGroupName, sentinelWorkspaceName, templateId)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets a template byt its identifier.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sentinelWorkspaceName The name of the workspace.
     * @param templateId template Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a template byt its identifier along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<TemplateInner> getWithResponse(
        String resourceGroupName, String sentinelWorkspaceName, String templateId, Context context) {
        return getWithResponseAsync(resourceGroupName, sentinelWorkspaceName, templateId, context).block();
    }

    /**
     * Gets a template byt its identifier.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sentinelWorkspaceName The name of the workspace.
     * @param templateId template Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a template byt its identifier.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TemplateInner get(String resourceGroupName, String sentinelWorkspaceName, String templateId) {
        return getWithResponse(resourceGroupName, sentinelWorkspaceName, templateId, Context.NONE).getValue();
    }

    /**
     * Delete an installed template.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sentinelWorkspaceName The name of the workspace.
     * @param templateId template Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(
        String resourceGroupName, String sentinelWorkspaceName, String templateId) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sentinelWorkspaceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter sentinelWorkspaceName is required and cannot be null."));
        }
        if (templateId == null) {
            return Mono.error(new IllegalArgumentException("Parameter templateId is required and cannot be null."));
        }
        final String apiVersion = "2022-12-01-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .delete(
                            this.client.getEndpoint(),
                            apiVersion,
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            sentinelWorkspaceName,
                            templateId,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Delete an installed template.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sentinelWorkspaceName The name of the workspace.
     * @param templateId template Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(
        String resourceGroupName, String sentinelWorkspaceName, String templateId, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sentinelWorkspaceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter sentinelWorkspaceName is required and cannot be null."));
        }
        if (templateId == null) {
            return Mono.error(new IllegalArgumentException("Parameter templateId is required and cannot be null."));
        }
        final String apiVersion = "2022-12-01-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .delete(
                this.client.getEndpoint(),
                apiVersion,
                this.client.getSubscriptionId(),
                resourceGroupName,
                sentinelWorkspaceName,
                templateId,
                accept,
                context);
    }

    /**
     * Delete an installed template.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sentinelWorkspaceName The name of the workspace.
     * @param templateId template Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String sentinelWorkspaceName, String templateId) {
        return deleteWithResponseAsync(resourceGroupName, sentinelWorkspaceName, templateId)
            .flatMap(ignored -> Mono.empty());
    }

    /**
     * Delete an installed template.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sentinelWorkspaceName The name of the workspace.
     * @param templateId template Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(
        String resourceGroupName, String sentinelWorkspaceName, String templateId, Context context) {
        return deleteWithResponseAsync(resourceGroupName, sentinelWorkspaceName, templateId, context).block();
    }

    /**
     * Delete an installed template.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sentinelWorkspaceName The name of the workspace.
     * @param templateId template Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String sentinelWorkspaceName, String templateId) {
        deleteWithResponse(resourceGroupName, sentinelWorkspaceName, templateId, Context.NONE);
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of all the template along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<TemplateInner>> listNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<TemplateInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of all the template along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<TemplateInner>> listNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }
}
