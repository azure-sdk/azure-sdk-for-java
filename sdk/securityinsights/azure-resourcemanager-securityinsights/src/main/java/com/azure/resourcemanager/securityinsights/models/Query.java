// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Represents a query to run on the TI objects in the workspace.
 */
@Fluent
public final class Query implements JsonSerializable<Query> {
    /*
     * Represents a condition used to query for TI objects.
     */
    private QueryCondition condition;

    /*
     * Specifies how to sort the query results.
     */
    private QuerySortBy sortBy;

    /*
     * Represents the maximum size of the page that will be returned from the query API.
     */
    private Integer maxPageSize;

    /*
     * Represents the minimum size of the page that will be returned from the query API.
     */
    private Integer minPageSize;

    /**
     * Creates an instance of Query class.
     */
    public Query() {
    }

    /**
     * Get the condition property: Represents a condition used to query for TI objects.
     * 
     * @return the condition value.
     */
    public QueryCondition condition() {
        return this.condition;
    }

    /**
     * Set the condition property: Represents a condition used to query for TI objects.
     * 
     * @param condition the condition value to set.
     * @return the Query object itself.
     */
    public Query withCondition(QueryCondition condition) {
        this.condition = condition;
        return this;
    }

    /**
     * Get the sortBy property: Specifies how to sort the query results.
     * 
     * @return the sortBy value.
     */
    public QuerySortBy sortBy() {
        return this.sortBy;
    }

    /**
     * Set the sortBy property: Specifies how to sort the query results.
     * 
     * @param sortBy the sortBy value to set.
     * @return the Query object itself.
     */
    public Query withSortBy(QuerySortBy sortBy) {
        this.sortBy = sortBy;
        return this;
    }

    /**
     * Get the maxPageSize property: Represents the maximum size of the page that will be returned from the query API.
     * 
     * @return the maxPageSize value.
     */
    public Integer maxPageSize() {
        return this.maxPageSize;
    }

    /**
     * Set the maxPageSize property: Represents the maximum size of the page that will be returned from the query API.
     * 
     * @param maxPageSize the maxPageSize value to set.
     * @return the Query object itself.
     */
    public Query withMaxPageSize(Integer maxPageSize) {
        this.maxPageSize = maxPageSize;
        return this;
    }

    /**
     * Get the minPageSize property: Represents the minimum size of the page that will be returned from the query API.
     * 
     * @return the minPageSize value.
     */
    public Integer minPageSize() {
        return this.minPageSize;
    }

    /**
     * Set the minPageSize property: Represents the minimum size of the page that will be returned from the query API.
     * 
     * @param minPageSize the minPageSize value to set.
     * @return the Query object itself.
     */
    public Query withMinPageSize(Integer minPageSize) {
        this.minPageSize = minPageSize;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (condition() != null) {
            condition().validate();
        }
        if (sortBy() != null) {
            sortBy().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("condition", this.condition);
        jsonWriter.writeJsonField("sortBy", this.sortBy);
        jsonWriter.writeNumberField("maxPageSize", this.maxPageSize);
        jsonWriter.writeNumberField("minPageSize", this.minPageSize);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Query from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Query if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the Query.
     */
    public static Query fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Query deserializedQuery = new Query();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("condition".equals(fieldName)) {
                    deserializedQuery.condition = QueryCondition.fromJson(reader);
                } else if ("sortBy".equals(fieldName)) {
                    deserializedQuery.sortBy = QuerySortBy.fromJson(reader);
                } else if ("maxPageSize".equals(fieldName)) {
                    deserializedQuery.maxPageSize = reader.getNullable(JsonReader::getInt);
                } else if ("minPageSize".equals(fieldName)) {
                    deserializedQuery.minPageSize = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedQuery;
        });
    }
}
