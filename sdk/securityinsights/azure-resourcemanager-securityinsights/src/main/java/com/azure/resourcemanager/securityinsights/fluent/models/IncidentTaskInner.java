// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.SystemData;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.securityinsights.models.ClientInfo;
import com.azure.resourcemanager.securityinsights.models.IncidentTaskStatus;
import com.azure.resourcemanager.securityinsights.models.ResourceWithEtag;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * The IncidentTask model.
 */
@Fluent
public final class IncidentTaskInner extends ResourceWithEtag {
    /*
     * The properties property.
     */
    private IncidentTaskProperties innerProperties = new IncidentTaskProperties();

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of IncidentTaskInner class.
     */
    public IncidentTaskInner() {
    }

    /**
     * Get the innerProperties property: The properties property.
     * 
     * @return the innerProperties value.
     */
    private IncidentTaskProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    @Override
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public IncidentTaskInner withEtag(String etag) {
        super.withEtag(etag);
        return this;
    }

    /**
     * Get the title property: The title of the task.
     * 
     * @return the title value.
     */
    public String title() {
        return this.innerProperties() == null ? null : this.innerProperties().title();
    }

    /**
     * Set the title property: The title of the task.
     * 
     * @param title the title value to set.
     * @return the IncidentTaskInner object itself.
     */
    public IncidentTaskInner withTitle(String title) {
        if (this.innerProperties() == null) {
            this.innerProperties = new IncidentTaskProperties();
        }
        this.innerProperties().withTitle(title);
        return this;
    }

    /**
     * Get the description property: The description of the task.
     * 
     * @return the description value.
     */
    public String description() {
        return this.innerProperties() == null ? null : this.innerProperties().description();
    }

    /**
     * Set the description property: The description of the task.
     * 
     * @param description the description value to set.
     * @return the IncidentTaskInner object itself.
     */
    public IncidentTaskInner withDescription(String description) {
        if (this.innerProperties() == null) {
            this.innerProperties = new IncidentTaskProperties();
        }
        this.innerProperties().withDescription(description);
        return this;
    }

    /**
     * Get the status property: The status property.
     * 
     * @return the status value.
     */
    public IncidentTaskStatus status() {
        return this.innerProperties() == null ? null : this.innerProperties().status();
    }

    /**
     * Set the status property: The status property.
     * 
     * @param status the status value to set.
     * @return the IncidentTaskInner object itself.
     */
    public IncidentTaskInner withStatus(IncidentTaskStatus status) {
        if (this.innerProperties() == null) {
            this.innerProperties = new IncidentTaskProperties();
        }
        this.innerProperties().withStatus(status);
        return this;
    }

    /**
     * Get the createdTimeUtc property: The time the task was created.
     * 
     * @return the createdTimeUtc value.
     */
    public OffsetDateTime createdTimeUtc() {
        return this.innerProperties() == null ? null : this.innerProperties().createdTimeUtc();
    }

    /**
     * Get the lastModifiedTimeUtc property: The last time the task was updated.
     * 
     * @return the lastModifiedTimeUtc value.
     */
    public OffsetDateTime lastModifiedTimeUtc() {
        return this.innerProperties() == null ? null : this.innerProperties().lastModifiedTimeUtc();
    }

    /**
     * Get the createdBy property: Information on the client (user or application) that made some action.
     * 
     * @return the createdBy value.
     */
    public ClientInfo createdBy() {
        return this.innerProperties() == null ? null : this.innerProperties().createdBy();
    }

    /**
     * Set the createdBy property: Information on the client (user or application) that made some action.
     * 
     * @param createdBy the createdBy value to set.
     * @return the IncidentTaskInner object itself.
     */
    public IncidentTaskInner withCreatedBy(ClientInfo createdBy) {
        if (this.innerProperties() == null) {
            this.innerProperties = new IncidentTaskProperties();
        }
        this.innerProperties().withCreatedBy(createdBy);
        return this;
    }

    /**
     * Get the lastModifiedBy property: Information on the client (user or application) that made some action.
     * 
     * @return the lastModifiedBy value.
     */
    public ClientInfo lastModifiedBy() {
        return this.innerProperties() == null ? null : this.innerProperties().lastModifiedBy();
    }

    /**
     * Set the lastModifiedBy property: Information on the client (user or application) that made some action.
     * 
     * @param lastModifiedBy the lastModifiedBy value to set.
     * @return the IncidentTaskInner object itself.
     */
    public IncidentTaskInner withLastModifiedBy(ClientInfo lastModifiedBy) {
        if (this.innerProperties() == null) {
            this.innerProperties = new IncidentTaskProperties();
        }
        this.innerProperties().withLastModifiedBy(lastModifiedBy);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (innerProperties() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property innerProperties in model IncidentTaskInner"));
        } else {
            innerProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(IncidentTaskInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("etag", etag());
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of IncidentTaskInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of IncidentTaskInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the IncidentTaskInner.
     */
    public static IncidentTaskInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            IncidentTaskInner deserializedIncidentTaskInner = new IncidentTaskInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedIncidentTaskInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedIncidentTaskInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedIncidentTaskInner.type = reader.getString();
                } else if ("etag".equals(fieldName)) {
                    deserializedIncidentTaskInner.withEtag(reader.getString());
                } else if ("systemData".equals(fieldName)) {
                    deserializedIncidentTaskInner.systemData = SystemData.fromJson(reader);
                } else if ("properties".equals(fieldName)) {
                    deserializedIncidentTaskInner.innerProperties = IncidentTaskProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedIncidentTaskInner;
        });
    }
}
