// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.securityinsights.models.AgentsSystemArmModel;
import com.azure.resourcemanager.securityinsights.models.KeyVaultAuthType;
import com.azure.resourcemanager.securityinsights.models.ResourceWithEtag;
import com.azure.resourcemanager.securityinsights.models.SecretSourceType;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * The Agent model.
 */
@Fluent
public final class AgentInner extends ResourceWithEtag {
    /*
     * The properties property.
     */
    @JsonProperty(value = "properties", required = true)
    private AgentArmModel innerProperties = new AgentArmModel();

    /**
     * Creates an instance of AgentInner class.
     */
    public AgentInner() {
    }

    /**
     * Get the innerProperties property: The properties property.
     * 
     * @return the innerProperties value.
     */
    private AgentArmModel innerProperties() {
        return this.innerProperties;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AgentInner withEtag(String etag) {
        super.withEtag(etag);
        return this;
    }

    /**
     * Get the agentContainerName property: The name of the agent.
     * only letters with numbers, underscores and hyphens are allowed
     * example: "my-agent".
     * 
     * @return the agentContainerName value.
     */
    public String agentContainerName() {
        return this.innerProperties() == null ? null : this.innerProperties().agentContainerName();
    }

    /**
     * Set the agentContainerName property: The name of the agent.
     * only letters with numbers, underscores and hyphens are allowed
     * example: "my-agent".
     * 
     * @param agentContainerName the agentContainerName value to set.
     * @return the AgentInner object itself.
     */
    public AgentInner withAgentContainerName(String agentContainerName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AgentArmModel();
        }
        this.innerProperties().withAgentContainerName(agentContainerName);
        return this;
    }

    /**
     * Get the sdkPath property: The SDK path (a file not a folder) on the agent machine.
     * example: "/path/to/nwrfc750P_8-70002755.zip".
     * 
     * @return the sdkPath value.
     */
    public String sdkPath() {
        return this.innerProperties() == null ? null : this.innerProperties().sdkPath();
    }

    /**
     * Set the sdkPath property: The SDK path (a file not a folder) on the agent machine.
     * example: "/path/to/nwrfc750P_8-70002755.zip".
     * 
     * @param sdkPath the sdkPath value to set.
     * @return the AgentInner object itself.
     */
    public AgentInner withSdkPath(String sdkPath) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AgentArmModel();
        }
        this.innerProperties().withSdkPath(sdkPath);
        return this;
    }

    /**
     * Get the sncPath property: The SNC path (a folder not a file) on the agent machine.
     * example: "/path/to/snc".
     * 
     * @return the sncPath value.
     */
    public String sncPath() {
        return this.innerProperties() == null ? null : this.innerProperties().sncPath();
    }

    /**
     * Set the sncPath property: The SNC path (a folder not a file) on the agent machine.
     * example: "/path/to/snc".
     * 
     * @param sncPath the sncPath value to set.
     * @return the AgentInner object itself.
     */
    public AgentInner withSncPath(String sncPath) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AgentArmModel();
        }
        this.innerProperties().withSncPath(sncPath);
        return this;
    }

    /**
     * Get the keyVaultResourceId property: The key vault resource id to access the key vault.
     * example:
     * "/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.KeyVault/vaults/myVault".
     * 
     * @return the keyVaultResourceId value.
     */
    public String keyVaultResourceId() {
        return this.innerProperties() == null ? null : this.innerProperties().keyVaultResourceId();
    }

    /**
     * Set the keyVaultResourceId property: The key vault resource id to access the key vault.
     * example:
     * "/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.KeyVault/vaults/myVault".
     * 
     * @param keyVaultResourceId the keyVaultResourceId value to set.
     * @return the AgentInner object itself.
     */
    public AgentInner withKeyVaultResourceId(String keyVaultResourceId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AgentArmModel();
        }
        this.innerProperties().withKeyVaultResourceId(keyVaultResourceId);
        return this;
    }

    /**
     * Get the keyVaultUri property: Key vault uri to access the key vault.
     * 
     * @return the keyVaultUri value.
     */
    public String keyVaultUri() {
        return this.innerProperties() == null ? null : this.innerProperties().keyVaultUri();
    }

    /**
     * Set the keyVaultUri property: Key vault uri to access the key vault.
     * 
     * @param keyVaultUri the keyVaultUri value to set.
     * @return the AgentInner object itself.
     */
    public AgentInner withKeyVaultUri(String keyVaultUri) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AgentArmModel();
        }
        this.innerProperties().withKeyVaultUri(keyVaultUri);
        return this;
    }

    /**
     * Get the keyVaultAuth property: The keyVaultAuth property.
     * 
     * @return the keyVaultAuth value.
     */
    public KeyVaultAuthType keyVaultAuth() {
        return this.innerProperties() == null ? null : this.innerProperties().keyVaultAuth();
    }

    /**
     * Set the keyVaultAuth property: The keyVaultAuth property.
     * 
     * @param keyVaultAuth the keyVaultAuth value to set.
     * @return the AgentInner object itself.
     */
    public AgentInner withKeyVaultAuth(KeyVaultAuthType keyVaultAuth) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AgentArmModel();
        }
        this.innerProperties().withKeyVaultAuth(keyVaultAuth);
        return this;
    }

    /**
     * Get the secretSource property: The secretSource property.
     * 
     * @return the secretSource value.
     */
    public SecretSourceType secretSource() {
        return this.innerProperties() == null ? null : this.innerProperties().secretSource();
    }

    /**
     * Set the secretSource property: The secretSource property.
     * 
     * @param secretSource the secretSource value to set.
     * @return the AgentInner object itself.
     */
    public AgentInner withSecretSource(SecretSourceType secretSource) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AgentArmModel();
        }
        this.innerProperties().withSecretSource(secretSource);
        return this;
    }

    /**
     * Get the agentsSystems property: The systems that installed in the agent.
     * 
     * @return the agentsSystems value.
     */
    public List<AgentsSystemArmModel> agentsSystems() {
        return this.innerProperties() == null ? null : this.innerProperties().agentsSystems();
    }

    /**
     * Get the displayName property: The displayName property.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.innerProperties() == null ? null : this.innerProperties().displayName();
    }

    /**
     * Set the displayName property: The displayName property.
     * 
     * @param displayName the displayName value to set.
     * @return the AgentInner object itself.
     */
    public AgentInner withDisplayName(String displayName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AgentArmModel();
        }
        this.innerProperties().withDisplayName(displayName);
        return this;
    }

    /**
     * Get the lastModifiedTimeUtc property: The lastModifiedTimeUtc property.
     * 
     * @return the lastModifiedTimeUtc value.
     */
    public OffsetDateTime lastModifiedTimeUtc() {
        return this.innerProperties() == null ? null : this.innerProperties().lastModifiedTimeUtc();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (innerProperties() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property innerProperties in model AgentInner"));
        } else {
            innerProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(AgentInner.class);
}
