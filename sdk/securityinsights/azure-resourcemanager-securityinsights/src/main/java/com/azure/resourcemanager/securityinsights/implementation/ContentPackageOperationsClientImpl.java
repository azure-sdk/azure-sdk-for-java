// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.securityinsights.fluent.ContentPackageOperationsClient;
import com.azure.resourcemanager.securityinsights.fluent.models.PackageModelInner;
import com.azure.resourcemanager.securityinsights.models.PackageInstallationProperties;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in ContentPackageOperationsClient. */
public final class ContentPackageOperationsClientImpl implements ContentPackageOperationsClient {
    /** The proxy service used to perform REST calls. */
    private final ContentPackageOperationsService service;

    /** The service client containing this operation class. */
    private final SecurityInsightsImpl client;

    /**
     * Initializes an instance of ContentPackageOperationsClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    ContentPackageOperationsClientImpl(SecurityInsightsImpl client) {
        this.service =
            RestProxy
                .create(ContentPackageOperationsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for SecurityInsightsContentPackageOperations to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "SecurityInsightsCont")
    private interface ContentPackageOperationsService {
        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers"
                + "/{operationalInsightsResourceProvider}/workspaces/{workspaceName}/providers"
                + "/Microsoft.SecurityInsights/contentPackages/{packageId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<PackageModelInner>> get(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("operationalInsightsResourceProvider") String operationalInsightsResourceProvider,
            @PathParam("workspaceName") String workspaceName,
            @PathParam("packageId") String packageId,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers"
                + "/{operationalInsightsResourceProvider}/workspaces/{workspaceName}/providers"
                + "/Microsoft.SecurityInsights/contentPackages/{packageId}/install")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<PackageModelInner>> install(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("operationalInsightsResourceProvider") String operationalInsightsResourceProvider,
            @PathParam("workspaceName") String workspaceName,
            @PathParam("packageId") String packageId,
            @BodyParam("application/json") PackageInstallationProperties packageInstallationProperties,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers"
                + "/{operationalInsightsResourceProvider}/workspaces/{workspaceName}/providers"
                + "/Microsoft.SecurityInsights/contentPackages/{packageId}/uninstall")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> uninstall(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("operationalInsightsResourceProvider") String operationalInsightsResourceProvider,
            @PathParam("workspaceName") String workspaceName,
            @PathParam("packageId") String packageId,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Gets a package byt its identifier.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param operationalInsightsResourceProvider The namespace of workspaces resource provider-
     *     Microsoft.OperationalInsights.
     * @param workspaceName The name of the workspace.
     * @param packageId package Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a package byt its identifier along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<PackageModelInner>> getWithResponseAsync(
        String resourceGroupName, String operationalInsightsResourceProvider, String workspaceName, String packageId) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (operationalInsightsResourceProvider == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter operationalInsightsResourceProvider is required and cannot be null."));
        }
        if (workspaceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workspaceName is required and cannot be null."));
        }
        if (packageId == null) {
            return Mono.error(new IllegalArgumentException("Parameter packageId is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .get(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            operationalInsightsResourceProvider,
                            workspaceName,
                            packageId,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets a package byt its identifier.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param operationalInsightsResourceProvider The namespace of workspaces resource provider-
     *     Microsoft.OperationalInsights.
     * @param workspaceName The name of the workspace.
     * @param packageId package Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a package byt its identifier along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<PackageModelInner>> getWithResponseAsync(
        String resourceGroupName,
        String operationalInsightsResourceProvider,
        String workspaceName,
        String packageId,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (operationalInsightsResourceProvider == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter operationalInsightsResourceProvider is required and cannot be null."));
        }
        if (workspaceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workspaceName is required and cannot be null."));
        }
        if (packageId == null) {
            return Mono.error(new IllegalArgumentException("Parameter packageId is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .get(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                operationalInsightsResourceProvider,
                workspaceName,
                packageId,
                accept,
                context);
    }

    /**
     * Gets a package byt its identifier.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param operationalInsightsResourceProvider The namespace of workspaces resource provider-
     *     Microsoft.OperationalInsights.
     * @param workspaceName The name of the workspace.
     * @param packageId package Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a package byt its identifier on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PackageModelInner> getAsync(
        String resourceGroupName, String operationalInsightsResourceProvider, String workspaceName, String packageId) {
        return getWithResponseAsync(resourceGroupName, operationalInsightsResourceProvider, workspaceName, packageId)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets a package byt its identifier.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param operationalInsightsResourceProvider The namespace of workspaces resource provider-
     *     Microsoft.OperationalInsights.
     * @param workspaceName The name of the workspace.
     * @param packageId package Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a package byt its identifier.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PackageModelInner get(
        String resourceGroupName, String operationalInsightsResourceProvider, String workspaceName, String packageId) {
        return getAsync(resourceGroupName, operationalInsightsResourceProvider, workspaceName, packageId).block();
    }

    /**
     * Gets a package byt its identifier.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param operationalInsightsResourceProvider The namespace of workspaces resource provider-
     *     Microsoft.OperationalInsights.
     * @param workspaceName The name of the workspace.
     * @param packageId package Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a package byt its identifier along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<PackageModelInner> getWithResponse(
        String resourceGroupName,
        String operationalInsightsResourceProvider,
        String workspaceName,
        String packageId,
        Context context) {
        return getWithResponseAsync(
                resourceGroupName, operationalInsightsResourceProvider, workspaceName, packageId, context)
            .block();
    }

    /**
     * Install a package to the workspace.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param operationalInsightsResourceProvider The namespace of workspaces resource provider-
     *     Microsoft.OperationalInsights.
     * @param workspaceName The name of the workspace.
     * @param packageId package Id.
     * @param packageInstallationProperties Package installation properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a Package in Azure Security Insights along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<PackageModelInner>> installWithResponseAsync(
        String resourceGroupName,
        String operationalInsightsResourceProvider,
        String workspaceName,
        String packageId,
        PackageInstallationProperties packageInstallationProperties) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (operationalInsightsResourceProvider == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter operationalInsightsResourceProvider is required and cannot be null."));
        }
        if (workspaceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workspaceName is required and cannot be null."));
        }
        if (packageId == null) {
            return Mono.error(new IllegalArgumentException("Parameter packageId is required and cannot be null."));
        }
        if (packageInstallationProperties == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter packageInstallationProperties is required and cannot be null."));
        } else {
            packageInstallationProperties.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .install(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            operationalInsightsResourceProvider,
                            workspaceName,
                            packageId,
                            packageInstallationProperties,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Install a package to the workspace.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param operationalInsightsResourceProvider The namespace of workspaces resource provider-
     *     Microsoft.OperationalInsights.
     * @param workspaceName The name of the workspace.
     * @param packageId package Id.
     * @param packageInstallationProperties Package installation properties.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a Package in Azure Security Insights along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<PackageModelInner>> installWithResponseAsync(
        String resourceGroupName,
        String operationalInsightsResourceProvider,
        String workspaceName,
        String packageId,
        PackageInstallationProperties packageInstallationProperties,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (operationalInsightsResourceProvider == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter operationalInsightsResourceProvider is required and cannot be null."));
        }
        if (workspaceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workspaceName is required and cannot be null."));
        }
        if (packageId == null) {
            return Mono.error(new IllegalArgumentException("Parameter packageId is required and cannot be null."));
        }
        if (packageInstallationProperties == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter packageInstallationProperties is required and cannot be null."));
        } else {
            packageInstallationProperties.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .install(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                operationalInsightsResourceProvider,
                workspaceName,
                packageId,
                packageInstallationProperties,
                accept,
                context);
    }

    /**
     * Install a package to the workspace.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param operationalInsightsResourceProvider The namespace of workspaces resource provider-
     *     Microsoft.OperationalInsights.
     * @param workspaceName The name of the workspace.
     * @param packageId package Id.
     * @param packageInstallationProperties Package installation properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a Package in Azure Security Insights on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PackageModelInner> installAsync(
        String resourceGroupName,
        String operationalInsightsResourceProvider,
        String workspaceName,
        String packageId,
        PackageInstallationProperties packageInstallationProperties) {
        return installWithResponseAsync(
                resourceGroupName,
                operationalInsightsResourceProvider,
                workspaceName,
                packageId,
                packageInstallationProperties)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Install a package to the workspace.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param operationalInsightsResourceProvider The namespace of workspaces resource provider-
     *     Microsoft.OperationalInsights.
     * @param workspaceName The name of the workspace.
     * @param packageId package Id.
     * @param packageInstallationProperties Package installation properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a Package in Azure Security Insights.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PackageModelInner install(
        String resourceGroupName,
        String operationalInsightsResourceProvider,
        String workspaceName,
        String packageId,
        PackageInstallationProperties packageInstallationProperties) {
        return installAsync(
                resourceGroupName,
                operationalInsightsResourceProvider,
                workspaceName,
                packageId,
                packageInstallationProperties)
            .block();
    }

    /**
     * Install a package to the workspace.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param operationalInsightsResourceProvider The namespace of workspaces resource provider-
     *     Microsoft.OperationalInsights.
     * @param workspaceName The name of the workspace.
     * @param packageId package Id.
     * @param packageInstallationProperties Package installation properties.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a Package in Azure Security Insights along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<PackageModelInner> installWithResponse(
        String resourceGroupName,
        String operationalInsightsResourceProvider,
        String workspaceName,
        String packageId,
        PackageInstallationProperties packageInstallationProperties,
        Context context) {
        return installWithResponseAsync(
                resourceGroupName,
                operationalInsightsResourceProvider,
                workspaceName,
                packageId,
                packageInstallationProperties,
                context)
            .block();
    }

    /**
     * Uninstall a package from the workspace.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param operationalInsightsResourceProvider The namespace of workspaces resource provider-
     *     Microsoft.OperationalInsights.
     * @param workspaceName The name of the workspace.
     * @param packageId package Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> uninstallWithResponseAsync(
        String resourceGroupName, String operationalInsightsResourceProvider, String workspaceName, String packageId) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (operationalInsightsResourceProvider == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter operationalInsightsResourceProvider is required and cannot be null."));
        }
        if (workspaceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workspaceName is required and cannot be null."));
        }
        if (packageId == null) {
            return Mono.error(new IllegalArgumentException("Parameter packageId is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .uninstall(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            operationalInsightsResourceProvider,
                            workspaceName,
                            packageId,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Uninstall a package from the workspace.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param operationalInsightsResourceProvider The namespace of workspaces resource provider-
     *     Microsoft.OperationalInsights.
     * @param workspaceName The name of the workspace.
     * @param packageId package Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> uninstallWithResponseAsync(
        String resourceGroupName,
        String operationalInsightsResourceProvider,
        String workspaceName,
        String packageId,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (operationalInsightsResourceProvider == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter operationalInsightsResourceProvider is required and cannot be null."));
        }
        if (workspaceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workspaceName is required and cannot be null."));
        }
        if (packageId == null) {
            return Mono.error(new IllegalArgumentException("Parameter packageId is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .uninstall(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                operationalInsightsResourceProvider,
                workspaceName,
                packageId,
                accept,
                context);
    }

    /**
     * Uninstall a package from the workspace.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param operationalInsightsResourceProvider The namespace of workspaces resource provider-
     *     Microsoft.OperationalInsights.
     * @param workspaceName The name of the workspace.
     * @param packageId package Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> uninstallAsync(
        String resourceGroupName, String operationalInsightsResourceProvider, String workspaceName, String packageId) {
        return uninstallWithResponseAsync(
                resourceGroupName, operationalInsightsResourceProvider, workspaceName, packageId)
            .flatMap(ignored -> Mono.empty());
    }

    /**
     * Uninstall a package from the workspace.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param operationalInsightsResourceProvider The namespace of workspaces resource provider-
     *     Microsoft.OperationalInsights.
     * @param workspaceName The name of the workspace.
     * @param packageId package Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void uninstall(
        String resourceGroupName, String operationalInsightsResourceProvider, String workspaceName, String packageId) {
        uninstallAsync(resourceGroupName, operationalInsightsResourceProvider, workspaceName, packageId).block();
    }

    /**
     * Uninstall a package from the workspace.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param operationalInsightsResourceProvider The namespace of workspaces resource provider-
     *     Microsoft.OperationalInsights.
     * @param workspaceName The name of the workspace.
     * @param packageId package Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> uninstallWithResponse(
        String resourceGroupName,
        String operationalInsightsResourceProvider,
        String workspaceName,
        String packageId,
        Context context) {
        return uninstallWithResponseAsync(
                resourceGroupName, operationalInsightsResourceProvider, workspaceName, packageId, context)
            .block();
    }
}
