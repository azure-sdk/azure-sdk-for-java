// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.securityinsights.models.AssignmentItem;
import com.azure.resourcemanager.securityinsights.models.ProvisioningState;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * The workspace manager assignment properties.
 */
@Fluent
public final class WorkspaceManagerAssignmentProperties
    implements JsonSerializable<WorkspaceManagerAssignmentProperties> {
    /*
     * The resource name of the workspace manager group targeted by the workspace manager assignment
     */
    private String targetResourceName;

    /*
     * The time the last job associated to this assignment ended at
     */
    private OffsetDateTime lastJobEndTime;

    /*
     * State of the last job associated to this assignment
     */
    private ProvisioningState lastJobProvisioningState;

    /*
     * List of resources included in this workspace manager assignment
     */
    private List<AssignmentItem> items;

    /**
     * Creates an instance of WorkspaceManagerAssignmentProperties class.
     */
    public WorkspaceManagerAssignmentProperties() {
    }

    /**
     * Get the targetResourceName property: The resource name of the workspace manager group targeted by the workspace
     * manager assignment.
     * 
     * @return the targetResourceName value.
     */
    public String targetResourceName() {
        return this.targetResourceName;
    }

    /**
     * Set the targetResourceName property: The resource name of the workspace manager group targeted by the workspace
     * manager assignment.
     * 
     * @param targetResourceName the targetResourceName value to set.
     * @return the WorkspaceManagerAssignmentProperties object itself.
     */
    public WorkspaceManagerAssignmentProperties withTargetResourceName(String targetResourceName) {
        this.targetResourceName = targetResourceName;
        return this;
    }

    /**
     * Get the lastJobEndTime property: The time the last job associated to this assignment ended at.
     * 
     * @return the lastJobEndTime value.
     */
    public OffsetDateTime lastJobEndTime() {
        return this.lastJobEndTime;
    }

    /**
     * Get the lastJobProvisioningState property: State of the last job associated to this assignment.
     * 
     * @return the lastJobProvisioningState value.
     */
    public ProvisioningState lastJobProvisioningState() {
        return this.lastJobProvisioningState;
    }

    /**
     * Get the items property: List of resources included in this workspace manager assignment.
     * 
     * @return the items value.
     */
    public List<AssignmentItem> items() {
        return this.items;
    }

    /**
     * Set the items property: List of resources included in this workspace manager assignment.
     * 
     * @param items the items value to set.
     * @return the WorkspaceManagerAssignmentProperties object itself.
     */
    public WorkspaceManagerAssignmentProperties withItems(List<AssignmentItem> items) {
        this.items = items;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (targetResourceName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property targetResourceName in model WorkspaceManagerAssignmentProperties"));
        }
        if (items() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property items in model WorkspaceManagerAssignmentProperties"));
        } else {
            items().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(WorkspaceManagerAssignmentProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("targetResourceName", this.targetResourceName);
        jsonWriter.writeArrayField("items", this.items, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WorkspaceManagerAssignmentProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of WorkspaceManagerAssignmentProperties if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the WorkspaceManagerAssignmentProperties.
     */
    public static WorkspaceManagerAssignmentProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WorkspaceManagerAssignmentProperties deserializedWorkspaceManagerAssignmentProperties
                = new WorkspaceManagerAssignmentProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("targetResourceName".equals(fieldName)) {
                    deserializedWorkspaceManagerAssignmentProperties.targetResourceName = reader.getString();
                } else if ("items".equals(fieldName)) {
                    List<AssignmentItem> items = reader.readArray(reader1 -> AssignmentItem.fromJson(reader1));
                    deserializedWorkspaceManagerAssignmentProperties.items = items;
                } else if ("lastJobEndTime".equals(fieldName)) {
                    deserializedWorkspaceManagerAssignmentProperties.lastJobEndTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastJobProvisioningState".equals(fieldName)) {
                    deserializedWorkspaceManagerAssignmentProperties.lastJobProvisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedWorkspaceManagerAssignmentProperties;
        });
    }
}
