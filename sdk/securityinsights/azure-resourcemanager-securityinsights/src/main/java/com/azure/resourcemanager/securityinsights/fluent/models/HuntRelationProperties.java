// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Describes hunt relation properties.
 */
@Fluent
public final class HuntRelationProperties implements JsonSerializable<HuntRelationProperties> {
    /*
     * The id of the related resource
     */
    private String relatedResourceId;

    /*
     * The name of the related resource
     */
    private String relatedResourceName;

    /*
     * The type of the hunt relation
     */
    private String relationType;

    /*
     * The resource that the relation is related to
     */
    private String relatedResourceKind;

    /*
     * List of labels relevant to this hunt
     */
    private List<String> labels;

    /**
     * Creates an instance of HuntRelationProperties class.
     */
    public HuntRelationProperties() {
    }

    /**
     * Get the relatedResourceId property: The id of the related resource.
     * 
     * @return the relatedResourceId value.
     */
    public String relatedResourceId() {
        return this.relatedResourceId;
    }

    /**
     * Set the relatedResourceId property: The id of the related resource.
     * 
     * @param relatedResourceId the relatedResourceId value to set.
     * @return the HuntRelationProperties object itself.
     */
    public HuntRelationProperties withRelatedResourceId(String relatedResourceId) {
        this.relatedResourceId = relatedResourceId;
        return this;
    }

    /**
     * Get the relatedResourceName property: The name of the related resource.
     * 
     * @return the relatedResourceName value.
     */
    public String relatedResourceName() {
        return this.relatedResourceName;
    }

    /**
     * Get the relationType property: The type of the hunt relation.
     * 
     * @return the relationType value.
     */
    public String relationType() {
        return this.relationType;
    }

    /**
     * Get the relatedResourceKind property: The resource that the relation is related to.
     * 
     * @return the relatedResourceKind value.
     */
    public String relatedResourceKind() {
        return this.relatedResourceKind;
    }

    /**
     * Get the labels property: List of labels relevant to this hunt.
     * 
     * @return the labels value.
     */
    public List<String> labels() {
        return this.labels;
    }

    /**
     * Set the labels property: List of labels relevant to this hunt.
     * 
     * @param labels the labels value to set.
     * @return the HuntRelationProperties object itself.
     */
    public HuntRelationProperties withLabels(List<String> labels) {
        this.labels = labels;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (relatedResourceId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property relatedResourceId in model HuntRelationProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(HuntRelationProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("relatedResourceId", this.relatedResourceId);
        jsonWriter.writeArrayField("labels", this.labels, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of HuntRelationProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of HuntRelationProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the HuntRelationProperties.
     */
    public static HuntRelationProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            HuntRelationProperties deserializedHuntRelationProperties = new HuntRelationProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("relatedResourceId".equals(fieldName)) {
                    deserializedHuntRelationProperties.relatedResourceId = reader.getString();
                } else if ("relatedResourceName".equals(fieldName)) {
                    deserializedHuntRelationProperties.relatedResourceName = reader.getString();
                } else if ("relationType".equals(fieldName)) {
                    deserializedHuntRelationProperties.relationType = reader.getString();
                } else if ("relatedResourceKind".equals(fieldName)) {
                    deserializedHuntRelationProperties.relatedResourceKind = reader.getString();
                } else if ("labels".equals(fieldName)) {
                    List<String> labels = reader.readArray(reader1 -> reader1.getString());
                    deserializedHuntRelationProperties.labels = labels;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedHuntRelationProperties;
        });
    }
}
