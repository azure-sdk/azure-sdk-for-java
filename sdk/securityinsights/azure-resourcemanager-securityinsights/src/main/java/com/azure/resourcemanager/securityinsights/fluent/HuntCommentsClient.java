// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.securityinsights.fluent.models.HuntCommentInner;

/**
 * An instance of this class provides access to all the operations defined in HuntCommentsClient.
 */
public interface HuntCommentsClient {
    /**
     * Gets all hunt comments.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param huntId The hunt id (GUID).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all hunt comments as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<HuntCommentInner> list(String resourceGroupName, String workspaceName, String huntId);

    /**
     * Gets all hunt comments.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param huntId The hunt id (GUID).
     * @param filter Filters the results, based on a Boolean condition. Optional.
     * @param orderby Sorts the results. Optional.
     * @param top Returns only the first n results. Optional.
     * @param skipToken Skiptoken is only used if a previous operation returned a partial result. If a previous response
     * contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies
     * a starting point to use for subsequent calls. Optional.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all hunt comments as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<HuntCommentInner> list(String resourceGroupName, String workspaceName, String huntId, String filter,
        String orderby, Integer top, String skipToken, Context context);

    /**
     * Gets a hunt comment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param huntId The hunt id (GUID).
     * @param huntCommentId The hunt comment id (GUID).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a hunt comment along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<HuntCommentInner> getWithResponse(String resourceGroupName, String workspaceName, String huntId,
        String huntCommentId, Context context);

    /**
     * Gets a hunt comment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param huntId The hunt id (GUID).
     * @param huntCommentId The hunt comment id (GUID).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a hunt comment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    HuntCommentInner get(String resourceGroupName, String workspaceName, String huntId, String huntCommentId);

    /**
     * Delete a hunt comment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param huntId The hunt id (GUID).
     * @param huntCommentId The hunt comment id (GUID).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> deleteWithResponse(String resourceGroupName, String workspaceName, String huntId,
        String huntCommentId, Context context);

    /**
     * Delete a hunt comment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param huntId The hunt id (GUID).
     * @param huntCommentId The hunt comment id (GUID).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String workspaceName, String huntId, String huntCommentId);

    /**
     * Creates or updates a hunt relation.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param huntId The hunt id (GUID).
     * @param huntCommentId The hunt comment id (GUID).
     * @param huntComment The hunt comment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a Hunt Comment in Azure Security Insights along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<HuntCommentInner> createOrUpdateWithResponse(String resourceGroupName, String workspaceName, String huntId,
        String huntCommentId, HuntCommentInner huntComment, Context context);

    /**
     * Creates or updates a hunt relation.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param huntId The hunt id (GUID).
     * @param huntCommentId The hunt comment id (GUID).
     * @param huntComment The hunt comment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a Hunt Comment in Azure Security Insights.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    HuntCommentInner createOrUpdate(String resourceGroupName, String workspaceName, String huntId, String huntCommentId,
        HuntCommentInner huntComment);
}
