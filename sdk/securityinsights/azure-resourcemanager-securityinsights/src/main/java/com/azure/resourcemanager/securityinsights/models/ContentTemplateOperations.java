// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/** Resource collection API of ContentTemplateOperations. */
public interface ContentTemplateOperations {
    /**
     * Gets a template byt its identifier.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param operationalInsightsResourceProvider The namespace of workspaces resource provider-
     *     Microsoft.OperationalInsights.
     * @param workspaceName The name of the workspace.
     * @param templateId template Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a template byt its identifier.
     */
    TemplateModel get(
        String resourceGroupName, String operationalInsightsResourceProvider, String workspaceName, String templateId);

    /**
     * Gets a template byt its identifier.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param operationalInsightsResourceProvider The namespace of workspaces resource provider-
     *     Microsoft.OperationalInsights.
     * @param workspaceName The name of the workspace.
     * @param templateId template Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a template byt its identifier along with {@link Response}.
     */
    Response<TemplateModel> getWithResponse(
        String resourceGroupName,
        String operationalInsightsResourceProvider,
        String workspaceName,
        String templateId,
        Context context);

    /**
     * Delete an installed template.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param operationalInsightsResourceProvider The namespace of workspaces resource provider-
     *     Microsoft.OperationalInsights.
     * @param workspaceName The name of the workspace.
     * @param templateId template Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(
        String resourceGroupName, String operationalInsightsResourceProvider, String workspaceName, String templateId);

    /**
     * Delete an installed template.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param operationalInsightsResourceProvider The namespace of workspaces resource provider-
     *     Microsoft.OperationalInsights.
     * @param workspaceName The name of the workspace.
     * @param templateId template Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    Response<Void> deleteWithResponse(
        String resourceGroupName,
        String operationalInsightsResourceProvider,
        String workspaceName,
        String templateId,
        Context context);
}
