// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The graph query to show the volume of data arriving into the workspace over time.
 */
@Fluent
public final class GraphQuery implements JsonSerializable<GraphQuery> {
    /*
     * Gets or sets the metric name that the query is checking. For example: 'Total data receive'.
     */
    private String metricName;

    /*
     * Gets or sets the legend for the graph.
     */
    private String legend;

    /*
     * Gets or sets the base query for the graph.
     * The base query is wrapped by Sentinel UI infra with a KQL query, that measures the volume over time.
     */
    private String baseQuery;

    /**
     * Creates an instance of GraphQuery class.
     */
    public GraphQuery() {
    }

    /**
     * Get the metricName property: Gets or sets the metric name that the query is checking. For example: 'Total data
     * receive'.
     * 
     * @return the metricName value.
     */
    public String metricName() {
        return this.metricName;
    }

    /**
     * Set the metricName property: Gets or sets the metric name that the query is checking. For example: 'Total data
     * receive'.
     * 
     * @param metricName the metricName value to set.
     * @return the GraphQuery object itself.
     */
    public GraphQuery withMetricName(String metricName) {
        this.metricName = metricName;
        return this;
    }

    /**
     * Get the legend property: Gets or sets the legend for the graph.
     * 
     * @return the legend value.
     */
    public String legend() {
        return this.legend;
    }

    /**
     * Set the legend property: Gets or sets the legend for the graph.
     * 
     * @param legend the legend value to set.
     * @return the GraphQuery object itself.
     */
    public GraphQuery withLegend(String legend) {
        this.legend = legend;
        return this;
    }

    /**
     * Get the baseQuery property: Gets or sets the base query for the graph.
     * The base query is wrapped by Sentinel UI infra with a KQL query, that measures the volume over time.
     * 
     * @return the baseQuery value.
     */
    public String baseQuery() {
        return this.baseQuery;
    }

    /**
     * Set the baseQuery property: Gets or sets the base query for the graph.
     * The base query is wrapped by Sentinel UI infra with a KQL query, that measures the volume over time.
     * 
     * @param baseQuery the baseQuery value to set.
     * @return the GraphQuery object itself.
     */
    public GraphQuery withBaseQuery(String baseQuery) {
        this.baseQuery = baseQuery;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (metricName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property metricName in model GraphQuery"));
        }
        if (legend() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property legend in model GraphQuery"));
        }
        if (baseQuery() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property baseQuery in model GraphQuery"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(GraphQuery.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("metricName", this.metricName);
        jsonWriter.writeStringField("legend", this.legend);
        jsonWriter.writeStringField("baseQuery", this.baseQuery);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GraphQuery from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GraphQuery if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the GraphQuery.
     */
    public static GraphQuery fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GraphQuery deserializedGraphQuery = new GraphQuery();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("metricName".equals(fieldName)) {
                    deserializedGraphQuery.metricName = reader.getString();
                } else if ("legend".equals(fieldName)) {
                    deserializedGraphQuery.legend = reader.getString();
                } else if ("baseQuery".equals(fieldName)) {
                    deserializedGraphQuery.baseQuery = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedGraphQuery;
        });
    }
}
