// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;

/** The graph query to show the volume of data arriving into the workspace over time. */
@Fluent
public final class GraphQuery {
    /*
     * Gets or sets the metric name that the query is checking. For example: 'Total data receive'.
     */
    @JsonProperty(value = "metricName", required = true)
    private String metricName;

    /*
     * Gets or sets the legend for the graph.
     */
    @JsonProperty(value = "legend", required = true)
    private String legend;

    /*
     * Gets or sets the base query for the graph.
     * The base query is wrapped by Sentinel UI infra with a KQL query, that measures the volume over time.
     */
    @JsonProperty(value = "baseQuery", required = true)
    private String baseQuery;

    /** Creates an instance of GraphQuery class. */
    public GraphQuery() {
    }

    /**
     * Get the metricName property: Gets or sets the metric name that the query is checking. For example: 'Total data
     * receive'.
     *
     * @return the metricName value.
     */
    public String metricName() {
        return this.metricName;
    }

    /**
     * Set the metricName property: Gets or sets the metric name that the query is checking. For example: 'Total data
     * receive'.
     *
     * @param metricName the metricName value to set.
     * @return the GraphQuery object itself.
     */
    public GraphQuery withMetricName(String metricName) {
        this.metricName = metricName;
        return this;
    }

    /**
     * Get the legend property: Gets or sets the legend for the graph.
     *
     * @return the legend value.
     */
    public String legend() {
        return this.legend;
    }

    /**
     * Set the legend property: Gets or sets the legend for the graph.
     *
     * @param legend the legend value to set.
     * @return the GraphQuery object itself.
     */
    public GraphQuery withLegend(String legend) {
        this.legend = legend;
        return this;
    }

    /**
     * Get the baseQuery property: Gets or sets the base query for the graph. The base query is wrapped by Sentinel UI
     * infra with a KQL query, that measures the volume over time.
     *
     * @return the baseQuery value.
     */
    public String baseQuery() {
        return this.baseQuery;
    }

    /**
     * Set the baseQuery property: Gets or sets the base query for the graph. The base query is wrapped by Sentinel UI
     * infra with a KQL query, that measures the volume over time.
     *
     * @param baseQuery the baseQuery value to set.
     * @return the GraphQuery object itself.
     */
    public GraphQuery withBaseQuery(String baseQuery) {
        this.baseQuery = baseQuery;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (metricName() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property metricName in model GraphQuery"));
        }
        if (legend() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property legend in model GraphQuery"));
        }
        if (baseQuery() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property baseQuery in model GraphQuery"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(GraphQuery.class);
}
