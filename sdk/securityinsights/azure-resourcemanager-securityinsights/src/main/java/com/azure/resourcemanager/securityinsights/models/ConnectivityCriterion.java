// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * The criteria by which we determine whether the connector is connected or not. For Example, use a KQL query to check
 * if the expected data type is flowing).
 */
@Fluent
public final class ConnectivityCriterion {
    /*
     * Gets or sets the type of connectivity.
     */
    @JsonProperty(value = "type", required = true)
    private String type;

    /*
     * Gets or sets the queries for checking connectivity.
     */
    @JsonProperty(value = "value")
    private List<String> value;

    /** Creates an instance of ConnectivityCriterion class. */
    public ConnectivityCriterion() {
    }

    /**
     * Get the type property: Gets or sets the type of connectivity.
     *
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Set the type property: Gets or sets the type of connectivity.
     *
     * @param type the type value to set.
     * @return the ConnectivityCriterion object itself.
     */
    public ConnectivityCriterion withType(String type) {
        this.type = type;
        return this;
    }

    /**
     * Get the value property: Gets or sets the queries for checking connectivity.
     *
     * @return the value value.
     */
    public List<String> value() {
        return this.value;
    }

    /**
     * Set the value property: Gets or sets the queries for checking connectivity.
     *
     * @param value the value value to set.
     * @return the ConnectivityCriterion object itself.
     */
    public ConnectivityCriterion withValue(List<String> value) {
        this.value = value;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (type() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property type in model ConnectivityCriterion"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ConnectivityCriterion.class);
}
