// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.securityinsights.models.ClientInfo;
import com.azure.resourcemanager.securityinsights.models.IncidentCreationRuleCondition;
import com.azure.resourcemanager.securityinsights.models.IncidentCreationRuleGroupingConfiguration;
import com.azure.resourcemanager.securityinsights.models.ResourceWithEtag;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;
import java.util.List;

/** The IncidentCreationRule model. */
@Fluent
public final class IncidentCreationRuleInner extends ResourceWithEtag {
    /*
     * Incident creation rule properties.
     */
    @JsonProperty(value = "properties", required = true)
    private IncidentCreationRuleProperties innerProperties = new IncidentCreationRuleProperties();

    /** Creates an instance of IncidentCreationRuleInner class. */
    public IncidentCreationRuleInner() {
    }

    /**
     * Get the innerProperties property: Incident creation rule properties.
     *
     * @return the innerProperties value.
     */
    private IncidentCreationRuleProperties innerProperties() {
        return this.innerProperties;
    }

    /** {@inheritDoc} */
    @Override
    public IncidentCreationRuleInner withEtag(String etag) {
        super.withEtag(etag);
        return this;
    }

    /**
     * Get the displayName property: The display name of the incident creation rule.
     *
     * @return the displayName value.
     */
    public String displayName() {
        return this.innerProperties() == null ? null : this.innerProperties().displayName();
    }

    /**
     * Set the displayName property: The display name of the incident creation rule.
     *
     * @param displayName the displayName value to set.
     * @return the IncidentCreationRuleInner object itself.
     */
    public IncidentCreationRuleInner withDisplayName(String displayName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new IncidentCreationRuleProperties();
        }
        this.innerProperties().withDisplayName(displayName);
        return this;
    }

    /**
     * Get the description property: The description of the incident creation rule.
     *
     * @return the description value.
     */
    public String description() {
        return this.innerProperties() == null ? null : this.innerProperties().description();
    }

    /**
     * Set the description property: The description of the incident creation rule.
     *
     * @param description the description value to set.
     * @return the IncidentCreationRuleInner object itself.
     */
    public IncidentCreationRuleInner withDescription(String description) {
        if (this.innerProperties() == null) {
            this.innerProperties = new IncidentCreationRuleProperties();
        }
        this.innerProperties().withDescription(description);
        return this;
    }

    /**
     * Get the order property: The order of evaluation of the incident creation rule.
     *
     * @return the order value.
     */
    public int order() {
        return this.innerProperties() == null ? 0 : this.innerProperties().order();
    }

    /**
     * Set the order property: The order of evaluation of the incident creation rule.
     *
     * @param order the order value to set.
     * @return the IncidentCreationRuleInner object itself.
     */
    public IncidentCreationRuleInner withOrder(int order) {
        if (this.innerProperties() == null) {
            this.innerProperties = new IncidentCreationRuleProperties();
        }
        this.innerProperties().withOrder(order);
        return this;
    }

    /**
     * Get the conditions property: The conditions to evaluate to determine if the incident creation rule should be
     * applied.
     *
     * @return the conditions value.
     */
    public List<IncidentCreationRuleCondition> conditions() {
        return this.innerProperties() == null ? null : this.innerProperties().conditions();
    }

    /**
     * Set the conditions property: The conditions to evaluate to determine if the incident creation rule should be
     * applied.
     *
     * @param conditions the conditions value to set.
     * @return the IncidentCreationRuleInner object itself.
     */
    public IncidentCreationRuleInner withConditions(List<IncidentCreationRuleCondition> conditions) {
        if (this.innerProperties() == null) {
            this.innerProperties = new IncidentCreationRuleProperties();
        }
        this.innerProperties().withConditions(conditions);
        return this;
    }

    /**
     * Get the createIncident property: Determines whether to create an incident based on this rule or not.
     *
     * @return the createIncident value.
     */
    public boolean createIncident() {
        return this.innerProperties() == null ? false : this.innerProperties().createIncident();
    }

    /**
     * Set the createIncident property: Determines whether to create an incident based on this rule or not.
     *
     * @param createIncident the createIncident value to set.
     * @return the IncidentCreationRuleInner object itself.
     */
    public IncidentCreationRuleInner withCreateIncident(boolean createIncident) {
        if (this.innerProperties() == null) {
            this.innerProperties = new IncidentCreationRuleProperties();
        }
        this.innerProperties().withCreateIncident(createIncident);
        return this;
    }

    /**
     * Get the groupingConfiguration property: Describes incident creation rule grouping configuration.
     *
     * @return the groupingConfiguration value.
     */
    public IncidentCreationRuleGroupingConfiguration groupingConfiguration() {
        return this.innerProperties() == null ? null : this.innerProperties().groupingConfiguration();
    }

    /**
     * Set the groupingConfiguration property: Describes incident creation rule grouping configuration.
     *
     * @param groupingConfiguration the groupingConfiguration value to set.
     * @return the IncidentCreationRuleInner object itself.
     */
    public IncidentCreationRuleInner withGroupingConfiguration(
        IncidentCreationRuleGroupingConfiguration groupingConfiguration) {
        if (this.innerProperties() == null) {
            this.innerProperties = new IncidentCreationRuleProperties();
        }
        this.innerProperties().withGroupingConfiguration(groupingConfiguration);
        return this;
    }

    /**
     * Get the enabled property: Determines whether the incident creation rule is enabled or disabled.
     *
     * @return the enabled value.
     */
    public boolean enabled() {
        return this.innerProperties() == null ? false : this.innerProperties().enabled();
    }

    /**
     * Set the enabled property: Determines whether the incident creation rule is enabled or disabled.
     *
     * @param enabled the enabled value to set.
     * @return the IncidentCreationRuleInner object itself.
     */
    public IncidentCreationRuleInner withEnabled(boolean enabled) {
        if (this.innerProperties() == null) {
            this.innerProperties = new IncidentCreationRuleProperties();
        }
        this.innerProperties().withEnabled(enabled);
        return this;
    }

    /**
     * Get the lastModifiedTimeUtc property: The last time the incident creation rule was updated.
     *
     * @return the lastModifiedTimeUtc value.
     */
    public OffsetDateTime lastModifiedTimeUtc() {
        return this.innerProperties() == null ? null : this.innerProperties().lastModifiedTimeUtc();
    }

    /**
     * Get the createdTimeUtc property: The time the incident creation rule was created.
     *
     * @return the createdTimeUtc value.
     */
    public OffsetDateTime createdTimeUtc() {
        return this.innerProperties() == null ? null : this.innerProperties().createdTimeUtc();
    }

    /**
     * Get the lastModifiedBy property: Information on the client (user or application) that made some action.
     *
     * @return the lastModifiedBy value.
     */
    public ClientInfo lastModifiedBy() {
        return this.innerProperties() == null ? null : this.innerProperties().lastModifiedBy();
    }

    /**
     * Set the lastModifiedBy property: Information on the client (user or application) that made some action.
     *
     * @param lastModifiedBy the lastModifiedBy value to set.
     * @return the IncidentCreationRuleInner object itself.
     */
    public IncidentCreationRuleInner withLastModifiedBy(ClientInfo lastModifiedBy) {
        if (this.innerProperties() == null) {
            this.innerProperties = new IncidentCreationRuleProperties();
        }
        this.innerProperties().withLastModifiedBy(lastModifiedBy);
        return this;
    }

    /**
     * Get the createdBy property: Information on the client (user or application) that made some action.
     *
     * @return the createdBy value.
     */
    public ClientInfo createdBy() {
        return this.innerProperties() == null ? null : this.innerProperties().createdBy();
    }

    /**
     * Set the createdBy property: Information on the client (user or application) that made some action.
     *
     * @param createdBy the createdBy value to set.
     * @return the IncidentCreationRuleInner object itself.
     */
    public IncidentCreationRuleInner withCreatedBy(ClientInfo createdBy) {
        if (this.innerProperties() == null) {
            this.innerProperties = new IncidentCreationRuleProperties();
        }
        this.innerProperties().withCreatedBy(createdBy);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (innerProperties() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property innerProperties in model IncidentCreationRuleInner"));
        } else {
            innerProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(IncidentCreationRuleInner.class);
}
