// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.securityinsights.fluent.TemplatesClient;
import com.azure.resourcemanager.securityinsights.fluent.models.TemplateInner;
import com.azure.resourcemanager.securityinsights.models.Template;
import com.azure.resourcemanager.securityinsights.models.Templates;

public final class TemplatesImpl implements Templates {
    private static final ClientLogger LOGGER = new ClientLogger(TemplatesImpl.class);

    private final TemplatesClient innerClient;

    private final com.azure.resourcemanager.securityinsights.SecurityInsightsManager serviceManager;

    public TemplatesImpl(
        TemplatesClient innerClient,
        com.azure.resourcemanager.securityinsights.SecurityInsightsManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<Template> list(
        String resourceGroupName, String operationalInsightsResourceProvider, String workspaceName) {
        PagedIterable<TemplateInner> inner =
            this.serviceClient().list(resourceGroupName, operationalInsightsResourceProvider, workspaceName);
        return Utils.mapPage(inner, inner1 -> new TemplateImpl(inner1, this.manager()));
    }

    public PagedIterable<Template> list(
        String resourceGroupName,
        String operationalInsightsResourceProvider,
        String workspaceName,
        String filter,
        String orderby,
        Integer top,
        String skipToken,
        Context context) {
        PagedIterable<TemplateInner> inner =
            this
                .serviceClient()
                .list(
                    resourceGroupName,
                    operationalInsightsResourceProvider,
                    workspaceName,
                    filter,
                    orderby,
                    top,
                    skipToken,
                    context);
        return Utils.mapPage(inner, inner1 -> new TemplateImpl(inner1, this.manager()));
    }

    public Template get(
        String resourceGroupName, String operationalInsightsResourceProvider, String workspaceName, String templateId) {
        TemplateInner inner =
            this.serviceClient().get(resourceGroupName, operationalInsightsResourceProvider, workspaceName, templateId);
        if (inner != null) {
            return new TemplateImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Template> getWithResponse(
        String resourceGroupName,
        String operationalInsightsResourceProvider,
        String workspaceName,
        String templateId,
        Context context) {
        Response<TemplateInner> inner =
            this
                .serviceClient()
                .getWithResponse(
                    resourceGroupName, operationalInsightsResourceProvider, workspaceName, templateId, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new TemplateImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    private TemplatesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.securityinsights.SecurityInsightsManager manager() {
        return this.serviceManager;
    }
}
