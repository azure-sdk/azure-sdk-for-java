// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Represents a condition used to query for TI objects.
 */
@Fluent
public final class QueryCondition implements JsonSerializable<QueryCondition> {
    /*
     * The STIX type for the objects returned by this query.
     */
    private String stixObjectType;

    /*
     * The list of clauses to be evaluated in disjunction or conjunction base on the specified top level connective
     * operator.
     */
    private List<ConditionClause> clauses;

    /*
     * The top level connective operator for this condition.
     */
    private Connective conditionConnective;

    /**
     * Creates an instance of QueryCondition class.
     */
    public QueryCondition() {
    }

    /**
     * Get the stixObjectType property: The STIX type for the objects returned by this query.
     * 
     * @return the stixObjectType value.
     */
    public String stixObjectType() {
        return this.stixObjectType;
    }

    /**
     * Set the stixObjectType property: The STIX type for the objects returned by this query.
     * 
     * @param stixObjectType the stixObjectType value to set.
     * @return the QueryCondition object itself.
     */
    public QueryCondition withStixObjectType(String stixObjectType) {
        this.stixObjectType = stixObjectType;
        return this;
    }

    /**
     * Get the clauses property: The list of clauses to be evaluated in disjunction or conjunction base on the specified
     * top level connective operator.
     * 
     * @return the clauses value.
     */
    public List<ConditionClause> clauses() {
        return this.clauses;
    }

    /**
     * Set the clauses property: The list of clauses to be evaluated in disjunction or conjunction base on the specified
     * top level connective operator.
     * 
     * @param clauses the clauses value to set.
     * @return the QueryCondition object itself.
     */
    public QueryCondition withClauses(List<ConditionClause> clauses) {
        this.clauses = clauses;
        return this;
    }

    /**
     * Get the conditionConnective property: The top level connective operator for this condition.
     * 
     * @return the conditionConnective value.
     */
    public Connective conditionConnective() {
        return this.conditionConnective;
    }

    /**
     * Set the conditionConnective property: The top level connective operator for this condition.
     * 
     * @param conditionConnective the conditionConnective value to set.
     * @return the QueryCondition object itself.
     */
    public QueryCondition withConditionConnective(Connective conditionConnective) {
        this.conditionConnective = conditionConnective;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (clauses() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property clauses in model QueryCondition"));
        } else {
            clauses().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(QueryCondition.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("clauses", this.clauses, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("stixObjectType", this.stixObjectType);
        jsonWriter.writeStringField("conditionConnective",
            this.conditionConnective == null ? null : this.conditionConnective.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of QueryCondition from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of QueryCondition if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the QueryCondition.
     */
    public static QueryCondition fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            QueryCondition deserializedQueryCondition = new QueryCondition();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("clauses".equals(fieldName)) {
                    List<ConditionClause> clauses = reader.readArray(reader1 -> ConditionClause.fromJson(reader1));
                    deserializedQueryCondition.clauses = clauses;
                } else if ("stixObjectType".equals(fieldName)) {
                    deserializedQueryCondition.stixObjectType = reader.getString();
                } else if ("conditionConnective".equals(fieldName)) {
                    deserializedQueryCondition.conditionConnective = Connective.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedQueryCondition;
        });
    }
}
