// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.securityinsights.models.AttackTactic;
import com.azure.resourcemanager.securityinsights.models.HuntOwner;
import com.azure.resourcemanager.securityinsights.models.HypothesisStatus;
import com.azure.resourcemanager.securityinsights.models.ResourceWithEtag;
import com.azure.resourcemanager.securityinsights.models.Status;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * Represents a Hunt in Azure Security Insights.
 */
@Fluent
public final class HuntInner extends ResourceWithEtag {
    /*
     * Hunt properties
     */
    @JsonProperty(value = "properties")
    private HuntProperties innerProperties;

    /**
     * Creates an instance of HuntInner class.
     */
    public HuntInner() {
    }

    /**
     * Get the innerProperties property: Hunt properties.
     * 
     * @return the innerProperties value.
     */
    private HuntProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public HuntInner withEtag(String etag) {
        super.withEtag(etag);
        return this;
    }

    /**
     * Get the displayName property: The display name of the hunt.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.innerProperties() == null ? null : this.innerProperties().displayName();
    }

    /**
     * Set the displayName property: The display name of the hunt.
     * 
     * @param displayName the displayName value to set.
     * @return the HuntInner object itself.
     */
    public HuntInner withDisplayName(String displayName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new HuntProperties();
        }
        this.innerProperties().withDisplayName(displayName);
        return this;
    }

    /**
     * Get the description property: The description of the hunt.
     * 
     * @return the description value.
     */
    public String description() {
        return this.innerProperties() == null ? null : this.innerProperties().description();
    }

    /**
     * Set the description property: The description of the hunt.
     * 
     * @param description the description value to set.
     * @return the HuntInner object itself.
     */
    public HuntInner withDescription(String description) {
        if (this.innerProperties() == null) {
            this.innerProperties = new HuntProperties();
        }
        this.innerProperties().withDescription(description);
        return this;
    }

    /**
     * Get the status property: The status of the hunt.
     * 
     * @return the status value.
     */
    public Status status() {
        return this.innerProperties() == null ? null : this.innerProperties().status();
    }

    /**
     * Set the status property: The status of the hunt.
     * 
     * @param status the status value to set.
     * @return the HuntInner object itself.
     */
    public HuntInner withStatus(Status status) {
        if (this.innerProperties() == null) {
            this.innerProperties = new HuntProperties();
        }
        this.innerProperties().withStatus(status);
        return this;
    }

    /**
     * Get the hypothesisStatus property: The hypothesis status of the hunt.
     * 
     * @return the hypothesisStatus value.
     */
    public HypothesisStatus hypothesisStatus() {
        return this.innerProperties() == null ? null : this.innerProperties().hypothesisStatus();
    }

    /**
     * Set the hypothesisStatus property: The hypothesis status of the hunt.
     * 
     * @param hypothesisStatus the hypothesisStatus value to set.
     * @return the HuntInner object itself.
     */
    public HuntInner withHypothesisStatus(HypothesisStatus hypothesisStatus) {
        if (this.innerProperties() == null) {
            this.innerProperties = new HuntProperties();
        }
        this.innerProperties().withHypothesisStatus(hypothesisStatus);
        return this;
    }

    /**
     * Get the attackTactics property: A list of mitre attack tactics the hunt is associated with.
     * 
     * @return the attackTactics value.
     */
    public List<AttackTactic> attackTactics() {
        return this.innerProperties() == null ? null : this.innerProperties().attackTactics();
    }

    /**
     * Set the attackTactics property: A list of mitre attack tactics the hunt is associated with.
     * 
     * @param attackTactics the attackTactics value to set.
     * @return the HuntInner object itself.
     */
    public HuntInner withAttackTactics(List<AttackTactic> attackTactics) {
        if (this.innerProperties() == null) {
            this.innerProperties = new HuntProperties();
        }
        this.innerProperties().withAttackTactics(attackTactics);
        return this;
    }

    /**
     * Get the attackTechniques property: A list of a mitre attack techniques the hunt is associated with.
     * 
     * @return the attackTechniques value.
     */
    public List<String> attackTechniques() {
        return this.innerProperties() == null ? null : this.innerProperties().attackTechniques();
    }

    /**
     * Set the attackTechniques property: A list of a mitre attack techniques the hunt is associated with.
     * 
     * @param attackTechniques the attackTechniques value to set.
     * @return the HuntInner object itself.
     */
    public HuntInner withAttackTechniques(List<String> attackTechniques) {
        if (this.innerProperties() == null) {
            this.innerProperties = new HuntProperties();
        }
        this.innerProperties().withAttackTechniques(attackTechniques);
        return this;
    }

    /**
     * Get the labels property: List of labels relevant to this hunt.
     * 
     * @return the labels value.
     */
    public List<String> labels() {
        return this.innerProperties() == null ? null : this.innerProperties().labels();
    }

    /**
     * Set the labels property: List of labels relevant to this hunt.
     * 
     * @param labels the labels value to set.
     * @return the HuntInner object itself.
     */
    public HuntInner withLabels(List<String> labels) {
        if (this.innerProperties() == null) {
            this.innerProperties = new HuntProperties();
        }
        this.innerProperties().withLabels(labels);
        return this;
    }

    /**
     * Get the owner property: Describes a user that the hunt is assigned to.
     * 
     * @return the owner value.
     */
    public HuntOwner owner() {
        return this.innerProperties() == null ? null : this.innerProperties().owner();
    }

    /**
     * Set the owner property: Describes a user that the hunt is assigned to.
     * 
     * @param owner the owner value to set.
     * @return the HuntInner object itself.
     */
    public HuntInner withOwner(HuntOwner owner) {
        if (this.innerProperties() == null) {
            this.innerProperties = new HuntProperties();
        }
        this.innerProperties().withOwner(owner);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
