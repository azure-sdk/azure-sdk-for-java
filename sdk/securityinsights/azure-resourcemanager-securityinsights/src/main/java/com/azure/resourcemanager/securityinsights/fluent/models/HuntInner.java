// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.SystemData;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.securityinsights.models.AttackTactic;
import com.azure.resourcemanager.securityinsights.models.HuntOwner;
import com.azure.resourcemanager.securityinsights.models.HypothesisStatus;
import com.azure.resourcemanager.securityinsights.models.ResourceWithEtag;
import com.azure.resourcemanager.securityinsights.models.Status;
import java.io.IOException;
import java.util.List;

/**
 * Represents a Hunt in Azure Security Insights.
 */
@Fluent
public final class HuntInner extends ResourceWithEtag {
    /*
     * Hunt properties
     */
    private HuntProperties innerProperties;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /**
     * Creates an instance of HuntInner class.
     */
    public HuntInner() {
    }

    /**
     * Get the innerProperties property: Hunt properties.
     * 
     * @return the innerProperties value.
     */
    private HuntProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    @Override
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public HuntInner withEtag(String etag) {
        super.withEtag(etag);
        return this;
    }

    /**
     * Get the displayName property: The display name of the hunt.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.innerProperties() == null ? null : this.innerProperties().displayName();
    }

    /**
     * Set the displayName property: The display name of the hunt.
     * 
     * @param displayName the displayName value to set.
     * @return the HuntInner object itself.
     */
    public HuntInner withDisplayName(String displayName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new HuntProperties();
        }
        this.innerProperties().withDisplayName(displayName);
        return this;
    }

    /**
     * Get the description property: The description of the hunt.
     * 
     * @return the description value.
     */
    public String description() {
        return this.innerProperties() == null ? null : this.innerProperties().description();
    }

    /**
     * Set the description property: The description of the hunt.
     * 
     * @param description the description value to set.
     * @return the HuntInner object itself.
     */
    public HuntInner withDescription(String description) {
        if (this.innerProperties() == null) {
            this.innerProperties = new HuntProperties();
        }
        this.innerProperties().withDescription(description);
        return this;
    }

    /**
     * Get the status property: The status of the hunt.
     * 
     * @return the status value.
     */
    public Status status() {
        return this.innerProperties() == null ? null : this.innerProperties().status();
    }

    /**
     * Set the status property: The status of the hunt.
     * 
     * @param status the status value to set.
     * @return the HuntInner object itself.
     */
    public HuntInner withStatus(Status status) {
        if (this.innerProperties() == null) {
            this.innerProperties = new HuntProperties();
        }
        this.innerProperties().withStatus(status);
        return this;
    }

    /**
     * Get the hypothesisStatus property: The hypothesis status of the hunt.
     * 
     * @return the hypothesisStatus value.
     */
    public HypothesisStatus hypothesisStatus() {
        return this.innerProperties() == null ? null : this.innerProperties().hypothesisStatus();
    }

    /**
     * Set the hypothesisStatus property: The hypothesis status of the hunt.
     * 
     * @param hypothesisStatus the hypothesisStatus value to set.
     * @return the HuntInner object itself.
     */
    public HuntInner withHypothesisStatus(HypothesisStatus hypothesisStatus) {
        if (this.innerProperties() == null) {
            this.innerProperties = new HuntProperties();
        }
        this.innerProperties().withHypothesisStatus(hypothesisStatus);
        return this;
    }

    /**
     * Get the attackTactics property: A list of mitre attack tactics the hunt is associated with.
     * 
     * @return the attackTactics value.
     */
    public List<AttackTactic> attackTactics() {
        return this.innerProperties() == null ? null : this.innerProperties().attackTactics();
    }

    /**
     * Set the attackTactics property: A list of mitre attack tactics the hunt is associated with.
     * 
     * @param attackTactics the attackTactics value to set.
     * @return the HuntInner object itself.
     */
    public HuntInner withAttackTactics(List<AttackTactic> attackTactics) {
        if (this.innerProperties() == null) {
            this.innerProperties = new HuntProperties();
        }
        this.innerProperties().withAttackTactics(attackTactics);
        return this;
    }

    /**
     * Get the attackTechniques property: A list of a mitre attack techniques the hunt is associated with.
     * 
     * @return the attackTechniques value.
     */
    public List<String> attackTechniques() {
        return this.innerProperties() == null ? null : this.innerProperties().attackTechniques();
    }

    /**
     * Set the attackTechniques property: A list of a mitre attack techniques the hunt is associated with.
     * 
     * @param attackTechniques the attackTechniques value to set.
     * @return the HuntInner object itself.
     */
    public HuntInner withAttackTechniques(List<String> attackTechniques) {
        if (this.innerProperties() == null) {
            this.innerProperties = new HuntProperties();
        }
        this.innerProperties().withAttackTechniques(attackTechniques);
        return this;
    }

    /**
     * Get the labels property: List of labels relevant to this hunt.
     * 
     * @return the labels value.
     */
    public List<String> labels() {
        return this.innerProperties() == null ? null : this.innerProperties().labels();
    }

    /**
     * Set the labels property: List of labels relevant to this hunt.
     * 
     * @param labels the labels value to set.
     * @return the HuntInner object itself.
     */
    public HuntInner withLabels(List<String> labels) {
        if (this.innerProperties() == null) {
            this.innerProperties = new HuntProperties();
        }
        this.innerProperties().withLabels(labels);
        return this;
    }

    /**
     * Get the owner property: Describes a user that the hunt is assigned to.
     * 
     * @return the owner value.
     */
    public HuntOwner owner() {
        return this.innerProperties() == null ? null : this.innerProperties().owner();
    }

    /**
     * Set the owner property: Describes a user that the hunt is assigned to.
     * 
     * @param owner the owner value to set.
     * @return the HuntInner object itself.
     */
    public HuntInner withOwner(HuntOwner owner) {
        if (this.innerProperties() == null) {
            this.innerProperties = new HuntProperties();
        }
        this.innerProperties().withOwner(owner);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("etag", etag());
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of HuntInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of HuntInner if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the HuntInner.
     */
    public static HuntInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            HuntInner deserializedHuntInner = new HuntInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedHuntInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedHuntInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedHuntInner.type = reader.getString();
                } else if ("etag".equals(fieldName)) {
                    deserializedHuntInner.withEtag(reader.getString());
                } else if ("systemData".equals(fieldName)) {
                    deserializedHuntInner.systemData = SystemData.fromJson(reader);
                } else if ("properties".equals(fieldName)) {
                    deserializedHuntInner.innerProperties = HuntProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedHuntInner;
        });
    }
}
