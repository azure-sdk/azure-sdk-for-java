// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * A custom response configuration for a rule.
 */
@Fluent
public final class CcpResponseConfig {
    /*
     * The json paths, '$' char is the json root.
     */
    @JsonProperty(value = "eventsJsonPaths", required = true)
    private List<String> eventsJsonPaths;

    /*
     * The value where the status message/code should appear in the response.
     */
    @JsonProperty(value = "successStatusJsonPath")
    private String successStatusJsonPath;

    /*
     * The the status value.
     */
    @JsonProperty(value = "successStatusValue")
    private String successStatusValue;

    /*
     * The value indicating whether the remote server support Gzip and we should expect Gzip response.
     */
    @JsonProperty(value = "isGzipCompressed")
    private Boolean isGzipCompressed;

    /*
     * The compression algorithm.
     */
    @JsonProperty(value = "compressionAlgo")
    private String compressionAlgo;

    /*
     * The response format. possible values are json,csv,xml
     */
    @JsonProperty(value = "format")
    private String format;

    /*
     * The csv delimiter, in case the response format is CSV.
     */
    @JsonProperty(value = "csvDelimiter")
    private String csvDelimiter;

    /*
     * The value indicating whether the response has CSV boundary in case the response in CSV format.
     */
    @JsonProperty(value = "hasCsvBoundary")
    private Boolean hasCsvBoundary;

    /*
     * The value indicating whether the response has headers in case the response in CSV format.
     */
    @JsonProperty(value = "hasCsvHeader")
    private Boolean hasCsvHeader;

    /*
     * The a value indicating whether the response isn't an array of events / logs. By setting this flag to true it
     * means the remote server will response with an object which each property has as a value an array of events /
     * logs.
     */
    @JsonProperty(value = "convertChildPropertiesToArray")
    private Boolean convertChildPropertiesToArray;

    /*
     * Th character used to escape characters in CSV.
     */
    @JsonProperty(value = "csvEscape")
    private String csvEscape;

    /**
     * Creates an instance of CcpResponseConfig class.
     */
    public CcpResponseConfig() {
    }

    /**
     * Get the eventsJsonPaths property: The json paths, '$' char is the json root.
     * 
     * @return the eventsJsonPaths value.
     */
    public List<String> eventsJsonPaths() {
        return this.eventsJsonPaths;
    }

    /**
     * Set the eventsJsonPaths property: The json paths, '$' char is the json root.
     * 
     * @param eventsJsonPaths the eventsJsonPaths value to set.
     * @return the CcpResponseConfig object itself.
     */
    public CcpResponseConfig withEventsJsonPaths(List<String> eventsJsonPaths) {
        this.eventsJsonPaths = eventsJsonPaths;
        return this;
    }

    /**
     * Get the successStatusJsonPath property: The value where the status message/code should appear in the response.
     * 
     * @return the successStatusJsonPath value.
     */
    public String successStatusJsonPath() {
        return this.successStatusJsonPath;
    }

    /**
     * Set the successStatusJsonPath property: The value where the status message/code should appear in the response.
     * 
     * @param successStatusJsonPath the successStatusJsonPath value to set.
     * @return the CcpResponseConfig object itself.
     */
    public CcpResponseConfig withSuccessStatusJsonPath(String successStatusJsonPath) {
        this.successStatusJsonPath = successStatusJsonPath;
        return this;
    }

    /**
     * Get the successStatusValue property: The the status value.
     * 
     * @return the successStatusValue value.
     */
    public String successStatusValue() {
        return this.successStatusValue;
    }

    /**
     * Set the successStatusValue property: The the status value.
     * 
     * @param successStatusValue the successStatusValue value to set.
     * @return the CcpResponseConfig object itself.
     */
    public CcpResponseConfig withSuccessStatusValue(String successStatusValue) {
        this.successStatusValue = successStatusValue;
        return this;
    }

    /**
     * Get the isGzipCompressed property: The value indicating whether the remote server support Gzip and we should
     * expect Gzip response.
     * 
     * @return the isGzipCompressed value.
     */
    public Boolean isGzipCompressed() {
        return this.isGzipCompressed;
    }

    /**
     * Set the isGzipCompressed property: The value indicating whether the remote server support Gzip and we should
     * expect Gzip response.
     * 
     * @param isGzipCompressed the isGzipCompressed value to set.
     * @return the CcpResponseConfig object itself.
     */
    public CcpResponseConfig withIsGzipCompressed(Boolean isGzipCompressed) {
        this.isGzipCompressed = isGzipCompressed;
        return this;
    }

    /**
     * Get the compressionAlgo property: The compression algorithm.
     * 
     * @return the compressionAlgo value.
     */
    public String compressionAlgo() {
        return this.compressionAlgo;
    }

    /**
     * Set the compressionAlgo property: The compression algorithm.
     * 
     * @param compressionAlgo the compressionAlgo value to set.
     * @return the CcpResponseConfig object itself.
     */
    public CcpResponseConfig withCompressionAlgo(String compressionAlgo) {
        this.compressionAlgo = compressionAlgo;
        return this;
    }

    /**
     * Get the format property: The response format. possible values are json,csv,xml.
     * 
     * @return the format value.
     */
    public String format() {
        return this.format;
    }

    /**
     * Set the format property: The response format. possible values are json,csv,xml.
     * 
     * @param format the format value to set.
     * @return the CcpResponseConfig object itself.
     */
    public CcpResponseConfig withFormat(String format) {
        this.format = format;
        return this;
    }

    /**
     * Get the csvDelimiter property: The csv delimiter, in case the response format is CSV.
     * 
     * @return the csvDelimiter value.
     */
    public String csvDelimiter() {
        return this.csvDelimiter;
    }

    /**
     * Set the csvDelimiter property: The csv delimiter, in case the response format is CSV.
     * 
     * @param csvDelimiter the csvDelimiter value to set.
     * @return the CcpResponseConfig object itself.
     */
    public CcpResponseConfig withCsvDelimiter(String csvDelimiter) {
        this.csvDelimiter = csvDelimiter;
        return this;
    }

    /**
     * Get the hasCsvBoundary property: The value indicating whether the response has CSV boundary in case the response
     * in CSV format.
     * 
     * @return the hasCsvBoundary value.
     */
    public Boolean hasCsvBoundary() {
        return this.hasCsvBoundary;
    }

    /**
     * Set the hasCsvBoundary property: The value indicating whether the response has CSV boundary in case the response
     * in CSV format.
     * 
     * @param hasCsvBoundary the hasCsvBoundary value to set.
     * @return the CcpResponseConfig object itself.
     */
    public CcpResponseConfig withHasCsvBoundary(Boolean hasCsvBoundary) {
        this.hasCsvBoundary = hasCsvBoundary;
        return this;
    }

    /**
     * Get the hasCsvHeader property: The value indicating whether the response has headers in case the response in CSV
     * format.
     * 
     * @return the hasCsvHeader value.
     */
    public Boolean hasCsvHeader() {
        return this.hasCsvHeader;
    }

    /**
     * Set the hasCsvHeader property: The value indicating whether the response has headers in case the response in CSV
     * format.
     * 
     * @param hasCsvHeader the hasCsvHeader value to set.
     * @return the CcpResponseConfig object itself.
     */
    public CcpResponseConfig withHasCsvHeader(Boolean hasCsvHeader) {
        this.hasCsvHeader = hasCsvHeader;
        return this;
    }

    /**
     * Get the convertChildPropertiesToArray property: The a value indicating whether the response isn't an array of
     * events / logs. By setting this flag to true it means the remote server will response with an object which each
     * property has as a value an array of events / logs.
     * 
     * @return the convertChildPropertiesToArray value.
     */
    public Boolean convertChildPropertiesToArray() {
        return this.convertChildPropertiesToArray;
    }

    /**
     * Set the convertChildPropertiesToArray property: The a value indicating whether the response isn't an array of
     * events / logs. By setting this flag to true it means the remote server will response with an object which each
     * property has as a value an array of events / logs.
     * 
     * @param convertChildPropertiesToArray the convertChildPropertiesToArray value to set.
     * @return the CcpResponseConfig object itself.
     */
    public CcpResponseConfig withConvertChildPropertiesToArray(Boolean convertChildPropertiesToArray) {
        this.convertChildPropertiesToArray = convertChildPropertiesToArray;
        return this;
    }

    /**
     * Get the csvEscape property: Th character used to escape characters in CSV.
     * 
     * @return the csvEscape value.
     */
    public String csvEscape() {
        return this.csvEscape;
    }

    /**
     * Set the csvEscape property: Th character used to escape characters in CSV.
     * 
     * @param csvEscape the csvEscape value to set.
     * @return the CcpResponseConfig object itself.
     */
    public CcpResponseConfig withCsvEscape(String csvEscape) {
        this.csvEscape = csvEscape;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (eventsJsonPaths() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property eventsJsonPaths in model CcpResponseConfig"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(CcpResponseConfig.class);
}
