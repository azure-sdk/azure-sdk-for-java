// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Model for API authentication with OAuth2.
 */
@Fluent
public final class OAuthModel extends CcpAuthConfig {
    /*
     * The auth type
     */
    private CcpAuthType type = CcpAuthType.OAUTH2;

    /*
     * The user's authorization code.
     */
    private String authorizationCode;

    /*
     * The Application (client) secret that the OAuth provider assigned to your app.
     */
    private String clientSecret;

    /*
     * The Application (client) ID that the OAuth provider assigned to your app.
     */
    private String clientId;

    /*
     * Indicating whether we want to send the clientId and clientSecret to token endpoint in the headers.
     */
    private Boolean isCredentialsInHeaders;

    /*
     * The Application (client) Scope that the OAuth provider assigned to your app.
     */
    private String scope;

    /*
     * The Application redirect url that the user config in the OAuth provider.
     */
    private String redirectUri;

    /*
     * The grant type, usually will be 'authorization code'.
     */
    private String grantType;

    /*
     * The token endpoint. Defines the OAuth2 refresh token.
     */
    private String tokenEndpoint;

    /*
     * The token endpoint headers.
     */
    private Map<String, String> tokenEndpointHeaders;

    /*
     * The token endpoint query parameters.
     */
    private Map<String, String> tokenEndpointQueryParameters;

    /*
     * The authorization endpoint.
     */
    private String authorizationEndpoint;

    /*
     * The authorization endpoint headers.
     */
    private Map<String, String> authorizationEndpointHeaders;

    /*
     * The authorization endpoint query parameters.
     */
    private Map<String, String> authorizationEndpointQueryParameters;

    /*
     * A value indicating whether it's a JWT flow.
     */
    private Boolean isJwtBearerFlow;

    /*
     * Access token prepend. Default is 'Bearer'.
     */
    private String accessTokenPrepend;

    /**
     * Creates an instance of OAuthModel class.
     */
    public OAuthModel() {
    }

    /**
     * Get the type property: The auth type.
     * 
     * @return the type value.
     */
    @Override
    public CcpAuthType type() {
        return this.type;
    }

    /**
     * Get the authorizationCode property: The user's authorization code.
     * 
     * @return the authorizationCode value.
     */
    public String authorizationCode() {
        return this.authorizationCode;
    }

    /**
     * Set the authorizationCode property: The user's authorization code.
     * 
     * @param authorizationCode the authorizationCode value to set.
     * @return the OAuthModel object itself.
     */
    public OAuthModel withAuthorizationCode(String authorizationCode) {
        this.authorizationCode = authorizationCode;
        return this;
    }

    /**
     * Get the clientSecret property: The Application (client) secret that the OAuth provider assigned to your app.
     * 
     * @return the clientSecret value.
     */
    public String clientSecret() {
        return this.clientSecret;
    }

    /**
     * Set the clientSecret property: The Application (client) secret that the OAuth provider assigned to your app.
     * 
     * @param clientSecret the clientSecret value to set.
     * @return the OAuthModel object itself.
     */
    public OAuthModel withClientSecret(String clientSecret) {
        this.clientSecret = clientSecret;
        return this;
    }

    /**
     * Get the clientId property: The Application (client) ID that the OAuth provider assigned to your app.
     * 
     * @return the clientId value.
     */
    public String clientId() {
        return this.clientId;
    }

    /**
     * Set the clientId property: The Application (client) ID that the OAuth provider assigned to your app.
     * 
     * @param clientId the clientId value to set.
     * @return the OAuthModel object itself.
     */
    public OAuthModel withClientId(String clientId) {
        this.clientId = clientId;
        return this;
    }

    /**
     * Get the isCredentialsInHeaders property: Indicating whether we want to send the clientId and clientSecret to
     * token endpoint in the headers.
     * 
     * @return the isCredentialsInHeaders value.
     */
    public Boolean isCredentialsInHeaders() {
        return this.isCredentialsInHeaders;
    }

    /**
     * Set the isCredentialsInHeaders property: Indicating whether we want to send the clientId and clientSecret to
     * token endpoint in the headers.
     * 
     * @param isCredentialsInHeaders the isCredentialsInHeaders value to set.
     * @return the OAuthModel object itself.
     */
    public OAuthModel withIsCredentialsInHeaders(Boolean isCredentialsInHeaders) {
        this.isCredentialsInHeaders = isCredentialsInHeaders;
        return this;
    }

    /**
     * Get the scope property: The Application (client) Scope that the OAuth provider assigned to your app.
     * 
     * @return the scope value.
     */
    public String scope() {
        return this.scope;
    }

    /**
     * Set the scope property: The Application (client) Scope that the OAuth provider assigned to your app.
     * 
     * @param scope the scope value to set.
     * @return the OAuthModel object itself.
     */
    public OAuthModel withScope(String scope) {
        this.scope = scope;
        return this;
    }

    /**
     * Get the redirectUri property: The Application redirect url that the user config in the OAuth provider.
     * 
     * @return the redirectUri value.
     */
    public String redirectUri() {
        return this.redirectUri;
    }

    /**
     * Set the redirectUri property: The Application redirect url that the user config in the OAuth provider.
     * 
     * @param redirectUri the redirectUri value to set.
     * @return the OAuthModel object itself.
     */
    public OAuthModel withRedirectUri(String redirectUri) {
        this.redirectUri = redirectUri;
        return this;
    }

    /**
     * Get the grantType property: The grant type, usually will be 'authorization code'.
     * 
     * @return the grantType value.
     */
    public String grantType() {
        return this.grantType;
    }

    /**
     * Set the grantType property: The grant type, usually will be 'authorization code'.
     * 
     * @param grantType the grantType value to set.
     * @return the OAuthModel object itself.
     */
    public OAuthModel withGrantType(String grantType) {
        this.grantType = grantType;
        return this;
    }

    /**
     * Get the tokenEndpoint property: The token endpoint. Defines the OAuth2 refresh token.
     * 
     * @return the tokenEndpoint value.
     */
    public String tokenEndpoint() {
        return this.tokenEndpoint;
    }

    /**
     * Set the tokenEndpoint property: The token endpoint. Defines the OAuth2 refresh token.
     * 
     * @param tokenEndpoint the tokenEndpoint value to set.
     * @return the OAuthModel object itself.
     */
    public OAuthModel withTokenEndpoint(String tokenEndpoint) {
        this.tokenEndpoint = tokenEndpoint;
        return this;
    }

    /**
     * Get the tokenEndpointHeaders property: The token endpoint headers.
     * 
     * @return the tokenEndpointHeaders value.
     */
    public Map<String, String> tokenEndpointHeaders() {
        return this.tokenEndpointHeaders;
    }

    /**
     * Set the tokenEndpointHeaders property: The token endpoint headers.
     * 
     * @param tokenEndpointHeaders the tokenEndpointHeaders value to set.
     * @return the OAuthModel object itself.
     */
    public OAuthModel withTokenEndpointHeaders(Map<String, String> tokenEndpointHeaders) {
        this.tokenEndpointHeaders = tokenEndpointHeaders;
        return this;
    }

    /**
     * Get the tokenEndpointQueryParameters property: The token endpoint query parameters.
     * 
     * @return the tokenEndpointQueryParameters value.
     */
    public Map<String, String> tokenEndpointQueryParameters() {
        return this.tokenEndpointQueryParameters;
    }

    /**
     * Set the tokenEndpointQueryParameters property: The token endpoint query parameters.
     * 
     * @param tokenEndpointQueryParameters the tokenEndpointQueryParameters value to set.
     * @return the OAuthModel object itself.
     */
    public OAuthModel withTokenEndpointQueryParameters(Map<String, String> tokenEndpointQueryParameters) {
        this.tokenEndpointQueryParameters = tokenEndpointQueryParameters;
        return this;
    }

    /**
     * Get the authorizationEndpoint property: The authorization endpoint.
     * 
     * @return the authorizationEndpoint value.
     */
    public String authorizationEndpoint() {
        return this.authorizationEndpoint;
    }

    /**
     * Set the authorizationEndpoint property: The authorization endpoint.
     * 
     * @param authorizationEndpoint the authorizationEndpoint value to set.
     * @return the OAuthModel object itself.
     */
    public OAuthModel withAuthorizationEndpoint(String authorizationEndpoint) {
        this.authorizationEndpoint = authorizationEndpoint;
        return this;
    }

    /**
     * Get the authorizationEndpointHeaders property: The authorization endpoint headers.
     * 
     * @return the authorizationEndpointHeaders value.
     */
    public Map<String, String> authorizationEndpointHeaders() {
        return this.authorizationEndpointHeaders;
    }

    /**
     * Set the authorizationEndpointHeaders property: The authorization endpoint headers.
     * 
     * @param authorizationEndpointHeaders the authorizationEndpointHeaders value to set.
     * @return the OAuthModel object itself.
     */
    public OAuthModel withAuthorizationEndpointHeaders(Map<String, String> authorizationEndpointHeaders) {
        this.authorizationEndpointHeaders = authorizationEndpointHeaders;
        return this;
    }

    /**
     * Get the authorizationEndpointQueryParameters property: The authorization endpoint query parameters.
     * 
     * @return the authorizationEndpointQueryParameters value.
     */
    public Map<String, String> authorizationEndpointQueryParameters() {
        return this.authorizationEndpointQueryParameters;
    }

    /**
     * Set the authorizationEndpointQueryParameters property: The authorization endpoint query parameters.
     * 
     * @param authorizationEndpointQueryParameters the authorizationEndpointQueryParameters value to set.
     * @return the OAuthModel object itself.
     */
    public OAuthModel
        withAuthorizationEndpointQueryParameters(Map<String, String> authorizationEndpointQueryParameters) {
        this.authorizationEndpointQueryParameters = authorizationEndpointQueryParameters;
        return this;
    }

    /**
     * Get the isJwtBearerFlow property: A value indicating whether it's a JWT flow.
     * 
     * @return the isJwtBearerFlow value.
     */
    public Boolean isJwtBearerFlow() {
        return this.isJwtBearerFlow;
    }

    /**
     * Set the isJwtBearerFlow property: A value indicating whether it's a JWT flow.
     * 
     * @param isJwtBearerFlow the isJwtBearerFlow value to set.
     * @return the OAuthModel object itself.
     */
    public OAuthModel withIsJwtBearerFlow(Boolean isJwtBearerFlow) {
        this.isJwtBearerFlow = isJwtBearerFlow;
        return this;
    }

    /**
     * Get the accessTokenPrepend property: Access token prepend. Default is 'Bearer'.
     * 
     * @return the accessTokenPrepend value.
     */
    public String accessTokenPrepend() {
        return this.accessTokenPrepend;
    }

    /**
     * Set the accessTokenPrepend property: Access token prepend. Default is 'Bearer'.
     * 
     * @param accessTokenPrepend the accessTokenPrepend value to set.
     * @return the OAuthModel object itself.
     */
    public OAuthModel withAccessTokenPrepend(String accessTokenPrepend) {
        this.accessTokenPrepend = accessTokenPrepend;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (clientSecret() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property clientSecret in model OAuthModel"));
        }
        if (clientId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property clientId in model OAuthModel"));
        }
        if (grantType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property grantType in model OAuthModel"));
        }
        if (tokenEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property tokenEndpoint in model OAuthModel"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(OAuthModel.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("clientSecret", this.clientSecret);
        jsonWriter.writeStringField("clientId", this.clientId);
        jsonWriter.writeStringField("grantType", this.grantType);
        jsonWriter.writeStringField("tokenEndpoint", this.tokenEndpoint);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeStringField("authorizationCode", this.authorizationCode);
        jsonWriter.writeBooleanField("isCredentialsInHeaders", this.isCredentialsInHeaders);
        jsonWriter.writeStringField("scope", this.scope);
        jsonWriter.writeStringField("redirectUri", this.redirectUri);
        jsonWriter.writeMapField("tokenEndpointHeaders", this.tokenEndpointHeaders,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeMapField("tokenEndpointQueryParameters", this.tokenEndpointQueryParameters,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("authorizationEndpoint", this.authorizationEndpoint);
        jsonWriter.writeMapField("authorizationEndpointHeaders", this.authorizationEndpointHeaders,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeMapField("authorizationEndpointQueryParameters", this.authorizationEndpointQueryParameters,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeBooleanField("isJwtBearerFlow", this.isJwtBearerFlow);
        jsonWriter.writeStringField("accessTokenPrepend", this.accessTokenPrepend);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OAuthModel from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OAuthModel if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the OAuthModel.
     */
    public static OAuthModel fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OAuthModel deserializedOAuthModel = new OAuthModel();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("clientSecret".equals(fieldName)) {
                    deserializedOAuthModel.clientSecret = reader.getString();
                } else if ("clientId".equals(fieldName)) {
                    deserializedOAuthModel.clientId = reader.getString();
                } else if ("grantType".equals(fieldName)) {
                    deserializedOAuthModel.grantType = reader.getString();
                } else if ("tokenEndpoint".equals(fieldName)) {
                    deserializedOAuthModel.tokenEndpoint = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedOAuthModel.type = CcpAuthType.fromString(reader.getString());
                } else if ("authorizationCode".equals(fieldName)) {
                    deserializedOAuthModel.authorizationCode = reader.getString();
                } else if ("isCredentialsInHeaders".equals(fieldName)) {
                    deserializedOAuthModel.isCredentialsInHeaders = reader.getNullable(JsonReader::getBoolean);
                } else if ("scope".equals(fieldName)) {
                    deserializedOAuthModel.scope = reader.getString();
                } else if ("redirectUri".equals(fieldName)) {
                    deserializedOAuthModel.redirectUri = reader.getString();
                } else if ("tokenEndpointHeaders".equals(fieldName)) {
                    Map<String, String> tokenEndpointHeaders = reader.readMap(reader1 -> reader1.getString());
                    deserializedOAuthModel.tokenEndpointHeaders = tokenEndpointHeaders;
                } else if ("tokenEndpointQueryParameters".equals(fieldName)) {
                    Map<String, String> tokenEndpointQueryParameters = reader.readMap(reader1 -> reader1.getString());
                    deserializedOAuthModel.tokenEndpointQueryParameters = tokenEndpointQueryParameters;
                } else if ("authorizationEndpoint".equals(fieldName)) {
                    deserializedOAuthModel.authorizationEndpoint = reader.getString();
                } else if ("authorizationEndpointHeaders".equals(fieldName)) {
                    Map<String, String> authorizationEndpointHeaders = reader.readMap(reader1 -> reader1.getString());
                    deserializedOAuthModel.authorizationEndpointHeaders = authorizationEndpointHeaders;
                } else if ("authorizationEndpointQueryParameters".equals(fieldName)) {
                    Map<String, String> authorizationEndpointQueryParameters
                        = reader.readMap(reader1 -> reader1.getString());
                    deserializedOAuthModel.authorizationEndpointQueryParameters = authorizationEndpointQueryParameters;
                } else if ("isJwtBearerFlow".equals(fieldName)) {
                    deserializedOAuthModel.isJwtBearerFlow = reader.getNullable(JsonReader::getBoolean);
                } else if ("accessTokenPrepend".equals(fieldName)) {
                    deserializedOAuthModel.accessTokenPrepend = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOAuthModel;
        });
    }
}
