// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.util.Map;

/**
 * Model for API authentication with JWT. Simple exchange between user name + password to access token.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type")
@JsonTypeName("JwtToken")
@Fluent
public final class JwtAuthModel extends CcpAuthConfig {
    /*
     * Token endpoint to request JWT
     */
    @JsonProperty(value = "tokenEndpoint", required = true)
    private String tokenEndpoint;

    /*
     * The user name. If user name and password sent in header request we only need to populate the `value` property
     * with the user name (Same as basic auth). If user name and password sent in body request we need to specify the
     * `Key` and `Value`.
     */
    @JsonProperty(value = "userName", required = true)
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, String> username;

    /*
     * The password
     */
    @JsonProperty(value = "password", required = true)
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, String> password;

    /*
     * The custom query parameter we want to add once we send request to token endpoint.
     */
    @JsonProperty(value = "queryParameters")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, String> queryParameters;

    /*
     * The custom headers we want to add once we send request to token endpoint.
     */
    @JsonProperty(value = "headers")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, String> headers;

    /*
     * Flag indicating whether we want to send the user name and password to token endpoint in the headers.
     */
    @JsonProperty(value = "isCredentialsInHeaders")
    private Boolean isCredentialsInHeaders;

    /*
     * Flag indicating whether the body request is JSON (header Content-Type = application/json), meaning its a Form
     * URL encoded request (header Content-Type = application/x-www-form-urlencoded).
     */
    @JsonProperty(value = "isJsonRequest")
    private Boolean isJsonRequest;

    /*
     * Request timeout in seconds.
     */
    @JsonProperty(value = "requestTimeoutInSeconds")
    private Integer requestTimeoutInSeconds;

    /**
     * Creates an instance of JwtAuthModel class.
     */
    public JwtAuthModel() {
    }

    /**
     * Get the tokenEndpoint property: Token endpoint to request JWT.
     * 
     * @return the tokenEndpoint value.
     */
    public String tokenEndpoint() {
        return this.tokenEndpoint;
    }

    /**
     * Set the tokenEndpoint property: Token endpoint to request JWT.
     * 
     * @param tokenEndpoint the tokenEndpoint value to set.
     * @return the JwtAuthModel object itself.
     */
    public JwtAuthModel withTokenEndpoint(String tokenEndpoint) {
        this.tokenEndpoint = tokenEndpoint;
        return this;
    }

    /**
     * Get the username property: The user name. If user name and password sent in header request we only need to
     * populate the `value` property with the user name (Same as basic auth). If user name and password sent in body
     * request we need to specify the `Key` and `Value`.
     * 
     * @return the username value.
     */
    public Map<String, String> username() {
        return this.username;
    }

    /**
     * Set the username property: The user name. If user name and password sent in header request we only need to
     * populate the `value` property with the user name (Same as basic auth). If user name and password sent in body
     * request we need to specify the `Key` and `Value`.
     * 
     * @param username the username value to set.
     * @return the JwtAuthModel object itself.
     */
    public JwtAuthModel withUsername(Map<String, String> username) {
        this.username = username;
        return this;
    }

    /**
     * Get the password property: The password.
     * 
     * @return the password value.
     */
    public Map<String, String> password() {
        return this.password;
    }

    /**
     * Set the password property: The password.
     * 
     * @param password the password value to set.
     * @return the JwtAuthModel object itself.
     */
    public JwtAuthModel withPassword(Map<String, String> password) {
        this.password = password;
        return this;
    }

    /**
     * Get the queryParameters property: The custom query parameter we want to add once we send request to token
     * endpoint.
     * 
     * @return the queryParameters value.
     */
    public Map<String, String> queryParameters() {
        return this.queryParameters;
    }

    /**
     * Set the queryParameters property: The custom query parameter we want to add once we send request to token
     * endpoint.
     * 
     * @param queryParameters the queryParameters value to set.
     * @return the JwtAuthModel object itself.
     */
    public JwtAuthModel withQueryParameters(Map<String, String> queryParameters) {
        this.queryParameters = queryParameters;
        return this;
    }

    /**
     * Get the headers property: The custom headers we want to add once we send request to token endpoint.
     * 
     * @return the headers value.
     */
    public Map<String, String> headers() {
        return this.headers;
    }

    /**
     * Set the headers property: The custom headers we want to add once we send request to token endpoint.
     * 
     * @param headers the headers value to set.
     * @return the JwtAuthModel object itself.
     */
    public JwtAuthModel withHeaders(Map<String, String> headers) {
        this.headers = headers;
        return this;
    }

    /**
     * Get the isCredentialsInHeaders property: Flag indicating whether we want to send the user name and password to
     * token endpoint in the headers.
     * 
     * @return the isCredentialsInHeaders value.
     */
    public Boolean isCredentialsInHeaders() {
        return this.isCredentialsInHeaders;
    }

    /**
     * Set the isCredentialsInHeaders property: Flag indicating whether we want to send the user name and password to
     * token endpoint in the headers.
     * 
     * @param isCredentialsInHeaders the isCredentialsInHeaders value to set.
     * @return the JwtAuthModel object itself.
     */
    public JwtAuthModel withIsCredentialsInHeaders(Boolean isCredentialsInHeaders) {
        this.isCredentialsInHeaders = isCredentialsInHeaders;
        return this;
    }

    /**
     * Get the isJsonRequest property: Flag indicating whether the body request is JSON (header Content-Type =
     * application/json), meaning its a Form URL encoded request (header Content-Type =
     * application/x-www-form-urlencoded).
     * 
     * @return the isJsonRequest value.
     */
    public Boolean isJsonRequest() {
        return this.isJsonRequest;
    }

    /**
     * Set the isJsonRequest property: Flag indicating whether the body request is JSON (header Content-Type =
     * application/json), meaning its a Form URL encoded request (header Content-Type =
     * application/x-www-form-urlencoded).
     * 
     * @param isJsonRequest the isJsonRequest value to set.
     * @return the JwtAuthModel object itself.
     */
    public JwtAuthModel withIsJsonRequest(Boolean isJsonRequest) {
        this.isJsonRequest = isJsonRequest;
        return this;
    }

    /**
     * Get the requestTimeoutInSeconds property: Request timeout in seconds.
     * 
     * @return the requestTimeoutInSeconds value.
     */
    public Integer requestTimeoutInSeconds() {
        return this.requestTimeoutInSeconds;
    }

    /**
     * Set the requestTimeoutInSeconds property: Request timeout in seconds.
     * 
     * @param requestTimeoutInSeconds the requestTimeoutInSeconds value to set.
     * @return the JwtAuthModel object itself.
     */
    public JwtAuthModel withRequestTimeoutInSeconds(Integer requestTimeoutInSeconds) {
        this.requestTimeoutInSeconds = requestTimeoutInSeconds;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (tokenEndpoint() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property tokenEndpoint in model JwtAuthModel"));
        }
        if (username() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property username in model JwtAuthModel"));
        }
        if (password() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property password in model JwtAuthModel"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(JwtAuthModel.class);
}
