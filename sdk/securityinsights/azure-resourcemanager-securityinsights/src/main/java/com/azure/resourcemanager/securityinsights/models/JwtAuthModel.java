// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Model for API authentication with JWT. Simple exchange between user name + password to access token.
 */
@Fluent
public final class JwtAuthModel extends CcpAuthConfig {
    /*
     * The auth type
     */
    private CcpAuthType type = CcpAuthType.JWT_TOKEN;

    /*
     * Token endpoint to request JWT
     */
    private String tokenEndpoint;

    /*
     * The user name. If user name and password sent in header request we only need to populate the `value` property
     * with the user name (Same as basic auth). If user name and password sent in body request we need to specify the
     * `Key` and `Value`.
     */
    private Map<String, String> username;

    /*
     * The password
     */
    private Map<String, String> password;

    /*
     * The custom query parameter we want to add once we send request to token endpoint.
     */
    private Map<String, String> queryParameters;

    /*
     * The custom headers we want to add once we send request to token endpoint.
     */
    private Map<String, String> headers;

    /*
     * Flag indicating whether we want to send the user name and password to token endpoint in the headers.
     */
    private Boolean isCredentialsInHeaders;

    /*
     * Flag indicating whether the body request is JSON (header Content-Type = application/json), meaning its a Form URL
     * encoded request (header Content-Type = application/x-www-form-urlencoded).
     */
    private Boolean isJsonRequest;

    /*
     * Request timeout in seconds.
     */
    private Integer requestTimeoutInSeconds;

    /**
     * Creates an instance of JwtAuthModel class.
     */
    public JwtAuthModel() {
    }

    /**
     * Get the type property: The auth type.
     * 
     * @return the type value.
     */
    @Override
    public CcpAuthType type() {
        return this.type;
    }

    /**
     * Get the tokenEndpoint property: Token endpoint to request JWT.
     * 
     * @return the tokenEndpoint value.
     */
    public String tokenEndpoint() {
        return this.tokenEndpoint;
    }

    /**
     * Set the tokenEndpoint property: Token endpoint to request JWT.
     * 
     * @param tokenEndpoint the tokenEndpoint value to set.
     * @return the JwtAuthModel object itself.
     */
    public JwtAuthModel withTokenEndpoint(String tokenEndpoint) {
        this.tokenEndpoint = tokenEndpoint;
        return this;
    }

    /**
     * Get the username property: The user name. If user name and password sent in header request we only need to
     * populate the `value` property with the user name (Same as basic auth). If user name and password sent in body
     * request we need to specify the `Key` and `Value`.
     * 
     * @return the username value.
     */
    public Map<String, String> username() {
        return this.username;
    }

    /**
     * Set the username property: The user name. If user name and password sent in header request we only need to
     * populate the `value` property with the user name (Same as basic auth). If user name and password sent in body
     * request we need to specify the `Key` and `Value`.
     * 
     * @param username the username value to set.
     * @return the JwtAuthModel object itself.
     */
    public JwtAuthModel withUsername(Map<String, String> username) {
        this.username = username;
        return this;
    }

    /**
     * Get the password property: The password.
     * 
     * @return the password value.
     */
    public Map<String, String> password() {
        return this.password;
    }

    /**
     * Set the password property: The password.
     * 
     * @param password the password value to set.
     * @return the JwtAuthModel object itself.
     */
    public JwtAuthModel withPassword(Map<String, String> password) {
        this.password = password;
        return this;
    }

    /**
     * Get the queryParameters property: The custom query parameter we want to add once we send request to token
     * endpoint.
     * 
     * @return the queryParameters value.
     */
    public Map<String, String> queryParameters() {
        return this.queryParameters;
    }

    /**
     * Set the queryParameters property: The custom query parameter we want to add once we send request to token
     * endpoint.
     * 
     * @param queryParameters the queryParameters value to set.
     * @return the JwtAuthModel object itself.
     */
    public JwtAuthModel withQueryParameters(Map<String, String> queryParameters) {
        this.queryParameters = queryParameters;
        return this;
    }

    /**
     * Get the headers property: The custom headers we want to add once we send request to token endpoint.
     * 
     * @return the headers value.
     */
    public Map<String, String> headers() {
        return this.headers;
    }

    /**
     * Set the headers property: The custom headers we want to add once we send request to token endpoint.
     * 
     * @param headers the headers value to set.
     * @return the JwtAuthModel object itself.
     */
    public JwtAuthModel withHeaders(Map<String, String> headers) {
        this.headers = headers;
        return this;
    }

    /**
     * Get the isCredentialsInHeaders property: Flag indicating whether we want to send the user name and password to
     * token endpoint in the headers.
     * 
     * @return the isCredentialsInHeaders value.
     */
    public Boolean isCredentialsInHeaders() {
        return this.isCredentialsInHeaders;
    }

    /**
     * Set the isCredentialsInHeaders property: Flag indicating whether we want to send the user name and password to
     * token endpoint in the headers.
     * 
     * @param isCredentialsInHeaders the isCredentialsInHeaders value to set.
     * @return the JwtAuthModel object itself.
     */
    public JwtAuthModel withIsCredentialsInHeaders(Boolean isCredentialsInHeaders) {
        this.isCredentialsInHeaders = isCredentialsInHeaders;
        return this;
    }

    /**
     * Get the isJsonRequest property: Flag indicating whether the body request is JSON (header Content-Type =
     * application/json), meaning its a Form URL encoded request (header Content-Type =
     * application/x-www-form-urlencoded).
     * 
     * @return the isJsonRequest value.
     */
    public Boolean isJsonRequest() {
        return this.isJsonRequest;
    }

    /**
     * Set the isJsonRequest property: Flag indicating whether the body request is JSON (header Content-Type =
     * application/json), meaning its a Form URL encoded request (header Content-Type =
     * application/x-www-form-urlencoded).
     * 
     * @param isJsonRequest the isJsonRequest value to set.
     * @return the JwtAuthModel object itself.
     */
    public JwtAuthModel withIsJsonRequest(Boolean isJsonRequest) {
        this.isJsonRequest = isJsonRequest;
        return this;
    }

    /**
     * Get the requestTimeoutInSeconds property: Request timeout in seconds.
     * 
     * @return the requestTimeoutInSeconds value.
     */
    public Integer requestTimeoutInSeconds() {
        return this.requestTimeoutInSeconds;
    }

    /**
     * Set the requestTimeoutInSeconds property: Request timeout in seconds.
     * 
     * @param requestTimeoutInSeconds the requestTimeoutInSeconds value to set.
     * @return the JwtAuthModel object itself.
     */
    public JwtAuthModel withRequestTimeoutInSeconds(Integer requestTimeoutInSeconds) {
        this.requestTimeoutInSeconds = requestTimeoutInSeconds;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (tokenEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property tokenEndpoint in model JwtAuthModel"));
        }
        if (username() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property username in model JwtAuthModel"));
        }
        if (password() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property password in model JwtAuthModel"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(JwtAuthModel.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("tokenEndpoint", this.tokenEndpoint);
        jsonWriter.writeMapField("userName", this.username, (writer, element) -> writer.writeString(element));
        jsonWriter.writeMapField("password", this.password, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeMapField("queryParameters", this.queryParameters,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeMapField("headers", this.headers, (writer, element) -> writer.writeString(element));
        jsonWriter.writeBooleanField("isCredentialsInHeaders", this.isCredentialsInHeaders);
        jsonWriter.writeBooleanField("isJsonRequest", this.isJsonRequest);
        jsonWriter.writeNumberField("requestTimeoutInSeconds", this.requestTimeoutInSeconds);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of JwtAuthModel from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of JwtAuthModel if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the JwtAuthModel.
     */
    public static JwtAuthModel fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            JwtAuthModel deserializedJwtAuthModel = new JwtAuthModel();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("tokenEndpoint".equals(fieldName)) {
                    deserializedJwtAuthModel.tokenEndpoint = reader.getString();
                } else if ("userName".equals(fieldName)) {
                    Map<String, String> username = reader.readMap(reader1 -> reader1.getString());
                    deserializedJwtAuthModel.username = username;
                } else if ("password".equals(fieldName)) {
                    Map<String, String> password = reader.readMap(reader1 -> reader1.getString());
                    deserializedJwtAuthModel.password = password;
                } else if ("type".equals(fieldName)) {
                    deserializedJwtAuthModel.type = CcpAuthType.fromString(reader.getString());
                } else if ("queryParameters".equals(fieldName)) {
                    Map<String, String> queryParameters = reader.readMap(reader1 -> reader1.getString());
                    deserializedJwtAuthModel.queryParameters = queryParameters;
                } else if ("headers".equals(fieldName)) {
                    Map<String, String> headers = reader.readMap(reader1 -> reader1.getString());
                    deserializedJwtAuthModel.headers = headers;
                } else if ("isCredentialsInHeaders".equals(fieldName)) {
                    deserializedJwtAuthModel.isCredentialsInHeaders = reader.getNullable(JsonReader::getBoolean);
                } else if ("isJsonRequest".equals(fieldName)) {
                    deserializedJwtAuthModel.isJsonRequest = reader.getNullable(JsonReader::getBoolean);
                } else if ("requestTimeoutInSeconds".equals(fieldName)) {
                    deserializedJwtAuthModel.requestTimeoutInSeconds = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedJwtAuthModel;
        });
    }
}
