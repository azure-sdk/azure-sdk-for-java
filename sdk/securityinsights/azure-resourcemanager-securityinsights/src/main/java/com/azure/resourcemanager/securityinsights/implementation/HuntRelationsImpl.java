// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.securityinsights.fluent.HuntRelationsClient;
import com.azure.resourcemanager.securityinsights.fluent.models.HuntRelationInner;
import com.azure.resourcemanager.securityinsights.models.HuntRelation;
import com.azure.resourcemanager.securityinsights.models.HuntRelations;

public final class HuntRelationsImpl implements HuntRelations {
    private static final ClientLogger LOGGER = new ClientLogger(HuntRelationsImpl.class);

    private final HuntRelationsClient innerClient;

    private final com.azure.resourcemanager.securityinsights.SecurityInsightsManager serviceManager;

    public HuntRelationsImpl(HuntRelationsClient innerClient,
        com.azure.resourcemanager.securityinsights.SecurityInsightsManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<HuntRelation> list(String resourceGroupName, String workspaceName, String huntId) {
        PagedIterable<HuntRelationInner> inner = this.serviceClient().list(resourceGroupName, workspaceName, huntId);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new HuntRelationImpl(inner1, this.manager()));
    }

    public PagedIterable<HuntRelation> list(String resourceGroupName, String workspaceName, String huntId,
        String filter, String orderby, Integer top, String skipToken, Context context) {
        PagedIterable<HuntRelationInner> inner = this.serviceClient().list(resourceGroupName, workspaceName, huntId,
            filter, orderby, top, skipToken, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new HuntRelationImpl(inner1, this.manager()));
    }

    public Response<HuntRelation> getWithResponse(String resourceGroupName, String workspaceName, String huntId,
        String huntRelationId, Context context) {
        Response<HuntRelationInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, workspaceName, huntId, huntRelationId, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new HuntRelationImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public HuntRelation get(String resourceGroupName, String workspaceName, String huntId, String huntRelationId) {
        HuntRelationInner inner = this.serviceClient().get(resourceGroupName, workspaceName, huntId, huntRelationId);
        if (inner != null) {
            return new HuntRelationImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteWithResponse(String resourceGroupName, String workspaceName, String huntId,
        String huntRelationId, Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, workspaceName, huntId, huntRelationId,
            context);
    }

    public void delete(String resourceGroupName, String workspaceName, String huntId, String huntRelationId) {
        this.serviceClient().delete(resourceGroupName, workspaceName, huntId, huntRelationId);
    }

    public HuntRelation getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = ResourceManagerUtils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String huntId = ResourceManagerUtils.getValueFromIdByName(id, "hunts");
        if (huntId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'hunts'.", id)));
        }
        String huntRelationId = ResourceManagerUtils.getValueFromIdByName(id, "relations");
        if (huntRelationId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'relations'.", id)));
        }
        return this.getWithResponse(resourceGroupName, workspaceName, huntId, huntRelationId, Context.NONE).getValue();
    }

    public Response<HuntRelation> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = ResourceManagerUtils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String huntId = ResourceManagerUtils.getValueFromIdByName(id, "hunts");
        if (huntId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'hunts'.", id)));
        }
        String huntRelationId = ResourceManagerUtils.getValueFromIdByName(id, "relations");
        if (huntRelationId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'relations'.", id)));
        }
        return this.getWithResponse(resourceGroupName, workspaceName, huntId, huntRelationId, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = ResourceManagerUtils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String huntId = ResourceManagerUtils.getValueFromIdByName(id, "hunts");
        if (huntId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'hunts'.", id)));
        }
        String huntRelationId = ResourceManagerUtils.getValueFromIdByName(id, "relations");
        if (huntRelationId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'relations'.", id)));
        }
        this.deleteWithResponse(resourceGroupName, workspaceName, huntId, huntRelationId, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = ResourceManagerUtils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String huntId = ResourceManagerUtils.getValueFromIdByName(id, "hunts");
        if (huntId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'hunts'.", id)));
        }
        String huntRelationId = ResourceManagerUtils.getValueFromIdByName(id, "relations");
        if (huntRelationId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'relations'.", id)));
        }
        return this.deleteWithResponse(resourceGroupName, workspaceName, huntId, huntRelationId, context);
    }

    private HuntRelationsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.securityinsights.SecurityInsightsManager manager() {
        return this.serviceManager;
    }

    public HuntRelationImpl define(String name) {
        return new HuntRelationImpl(name, this.manager());
    }
}
