// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.resourcemanager.securityinsights.models.AttackPattern;
import com.azure.resourcemanager.securityinsights.models.Identity;
import com.azure.resourcemanager.securityinsights.models.Indicator;
import com.azure.resourcemanager.securityinsights.models.Relationship;
import com.azure.resourcemanager.securityinsights.models.RelationshipHint;
import com.azure.resourcemanager.securityinsights.models.ThreatActor;
import com.azure.resourcemanager.securityinsights.models.TIObjectKind;
import com.azure.resourcemanager.securityinsights.models.UserInfoAutoGenerated;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeId;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import java.util.UUID;

/**
 * Represents a threat intelligence object in Azure Security Insights.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = "kind", defaultImpl = TIObjectInner.class, visible = true)
@JsonTypeName("TIObject")
@JsonSubTypes({
    @JsonSubTypes.Type(name = "ThreatActor", value = ThreatActor.class),
    @JsonSubTypes.Type(name = "AttackPattern", value = AttackPattern.class),
    @JsonSubTypes.Type(name = "Identity", value = Identity.class),
    @JsonSubTypes.Type(name = "Relationship", value = Relationship.class),
    @JsonSubTypes.Type(name = "Indicator", value = Indicator.class) })
@Immutable
public class TIObjectInner extends ProxyResource {
    /*
     * The kind of the TI object
     */
    @JsonTypeId
    @JsonProperty(value = "kind", required = true)
    private TIObjectKind kind;

    /*
     * The properties of the TI object
     */
    @JsonProperty(value = "properties")
    private TIObjectCommonProperties innerProperties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /**
     * Creates an instance of TIObjectInner class.
     */
    public TIObjectInner() {
        this.kind = TIObjectKind.fromString("TIObject");
    }

    /**
     * Get the kind property: The kind of the TI object.
     * 
     * @return the kind value.
     */
    public TIObjectKind kind() {
        return this.kind;
    }

    /**
     * Get the innerProperties property: The properties of the TI object.
     * 
     * @return the innerProperties value.
     */
    private TIObjectCommonProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the data property: The core STIX object that this TI object represents.
     * 
     * @return the data value.
     */
    public Map<String, Object> data() {
        return this.innerProperties() == null ? null : this.innerProperties().data();
    }

    /**
     * Get the createdBy property: The UserInfo of the user/entity which originally created this TI object.
     * 
     * @return the createdBy value.
     */
    public UserInfoAutoGenerated createdBy() {
        return this.innerProperties() == null ? null : this.innerProperties().createdBy();
    }

    /**
     * Get the source property: The source name for this TI object.
     * 
     * @return the source value.
     */
    public String source() {
        return this.innerProperties() == null ? null : this.innerProperties().source();
    }

    /**
     * Get the firstIngestedTimeUtc property: The timestamp for the first time this object was ingested.
     * 
     * @return the firstIngestedTimeUtc value.
     */
    public OffsetDateTime firstIngestedTimeUtc() {
        return this.innerProperties() == null ? null : this.innerProperties().firstIngestedTimeUtc();
    }

    /**
     * Get the lastIngestedTimeUtc property: The timestamp for the last time this object was ingested.
     * 
     * @return the lastIngestedTimeUtc value.
     */
    public OffsetDateTime lastIngestedTimeUtc() {
        return this.innerProperties() == null ? null : this.innerProperties().lastIngestedTimeUtc();
    }

    /**
     * Get the ingestionRulesVersion property: The ID of the rules version that was active when this TI object was last
     * ingested.
     * 
     * @return the ingestionRulesVersion value.
     */
    public UUID ingestionRulesVersion() {
        return this.innerProperties() == null ? null : this.innerProperties().ingestionRulesVersion();
    }

    /**
     * Get the lastUpdateMethod property: The name of the method/application that initiated the last write to this TI
     * object.
     * 
     * @return the lastUpdateMethod value.
     */
    public String lastUpdateMethod() {
        return this.innerProperties() == null ? null : this.innerProperties().lastUpdateMethod();
    }

    /**
     * Get the lastModifiedBy property: The UserInfo of the user/entity which last modified this TI object.
     * 
     * @return the lastModifiedBy value.
     */
    public UserInfoAutoGenerated lastModifiedBy() {
        return this.innerProperties() == null ? null : this.innerProperties().lastModifiedBy();
    }

    /**
     * Get the lastUpdatedDateTimeUtc property: The timestamp for the last time this TI object was updated.
     * 
     * @return the lastUpdatedDateTimeUtc value.
     */
    public OffsetDateTime lastUpdatedDateTimeUtc() {
        return this.innerProperties() == null ? null : this.innerProperties().lastUpdatedDateTimeUtc();
    }

    /**
     * Get the relationshipHints property: A dictionary used to help follow relationships from this object to other STIX
     * objects. The keys are field names from the STIX object (in the 'data' field), and the values are lists of sources
     * that can be prepended to the object ID in order to efficiently locate the target TI object.
     * 
     * @return the relationshipHints value.
     */
    public List<RelationshipHint> relationshipHints() {
        return this.innerProperties() == null ? null : this.innerProperties().relationshipHints();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
