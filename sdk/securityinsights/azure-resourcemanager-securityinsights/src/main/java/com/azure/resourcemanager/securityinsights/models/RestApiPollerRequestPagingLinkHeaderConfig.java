// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The request paging configuration for LinkHeader and PersistentLinkHeader paging type parameters.
 */
@Fluent
public final class RestApiPollerRequestPagingLinkHeaderConfig extends RestApiPollerRequestPagingConfig {
    /*
     * JSON path of link header token in HTTP response payload
     */
    private String linkHeaderTokenJsonPath;

    /*
     * Rel link name from the link header
     */
    private String linkHeaderRelLinkName;

    /**
     * Creates an instance of RestApiPollerRequestPagingLinkHeaderConfig class.
     */
    public RestApiPollerRequestPagingLinkHeaderConfig() {
    }

    /**
     * Get the linkHeaderTokenJsonPath property: JSON path of link header token in HTTP response payload.
     * 
     * @return the linkHeaderTokenJsonPath value.
     */
    public String linkHeaderTokenJsonPath() {
        return this.linkHeaderTokenJsonPath;
    }

    /**
     * Set the linkHeaderTokenJsonPath property: JSON path of link header token in HTTP response payload.
     * 
     * @param linkHeaderTokenJsonPath the linkHeaderTokenJsonPath value to set.
     * @return the RestApiPollerRequestPagingLinkHeaderConfig object itself.
     */
    public RestApiPollerRequestPagingLinkHeaderConfig withLinkHeaderTokenJsonPath(String linkHeaderTokenJsonPath) {
        this.linkHeaderTokenJsonPath = linkHeaderTokenJsonPath;
        return this;
    }

    /**
     * Get the linkHeaderRelLinkName property: Rel link name from the link header.
     * 
     * @return the linkHeaderRelLinkName value.
     */
    public String linkHeaderRelLinkName() {
        return this.linkHeaderRelLinkName;
    }

    /**
     * Set the linkHeaderRelLinkName property: Rel link name from the link header.
     * 
     * @param linkHeaderRelLinkName the linkHeaderRelLinkName value to set.
     * @return the RestApiPollerRequestPagingLinkHeaderConfig object itself.
     */
    public RestApiPollerRequestPagingLinkHeaderConfig withLinkHeaderRelLinkName(String linkHeaderRelLinkName) {
        this.linkHeaderRelLinkName = linkHeaderRelLinkName;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RestApiPollerRequestPagingLinkHeaderConfig withPagingType(RestApiPollerRequestPagingKind pagingType) {
        super.withPagingType(pagingType);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RestApiPollerRequestPagingLinkHeaderConfig withPageSize(Integer pageSize) {
        super.withPageSize(pageSize);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RestApiPollerRequestPagingLinkHeaderConfig withPageSizeParameterName(String pageSizeParameterName) {
        super.withPageSizeParameterName(pageSizeParameterName);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (pagingType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property pagingType in model RestApiPollerRequestPagingLinkHeaderConfig"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(RestApiPollerRequestPagingLinkHeaderConfig.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("pagingType", pagingType() == null ? null : pagingType().toString());
        jsonWriter.writeNumberField("pageSize", pageSize());
        jsonWriter.writeStringField("pageSizeParameterName", pageSizeParameterName());
        jsonWriter.writeStringField("linkHeaderTokenJsonPath", this.linkHeaderTokenJsonPath);
        jsonWriter.writeStringField("linkHeaderRelLinkName", this.linkHeaderRelLinkName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RestApiPollerRequestPagingLinkHeaderConfig from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RestApiPollerRequestPagingLinkHeaderConfig if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RestApiPollerRequestPagingLinkHeaderConfig.
     */
    public static RestApiPollerRequestPagingLinkHeaderConfig fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RestApiPollerRequestPagingLinkHeaderConfig deserializedRestApiPollerRequestPagingLinkHeaderConfig
                = new RestApiPollerRequestPagingLinkHeaderConfig();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("pagingType".equals(fieldName)) {
                    deserializedRestApiPollerRequestPagingLinkHeaderConfig
                        .withPagingType(RestApiPollerRequestPagingKind.fromString(reader.getString()));
                } else if ("pageSize".equals(fieldName)) {
                    deserializedRestApiPollerRequestPagingLinkHeaderConfig
                        .withPageSize(reader.getNullable(JsonReader::getInt));
                } else if ("pageSizeParameterName".equals(fieldName)) {
                    deserializedRestApiPollerRequestPagingLinkHeaderConfig
                        .withPageSizeParameterName(reader.getString());
                } else if ("linkHeaderTokenJsonPath".equals(fieldName)) {
                    deserializedRestApiPollerRequestPagingLinkHeaderConfig.linkHeaderTokenJsonPath = reader.getString();
                } else if ("linkHeaderRelLinkName".equals(fieldName)) {
                    deserializedRestApiPollerRequestPagingLinkHeaderConfig.linkHeaderRelLinkName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRestApiPollerRequestPagingLinkHeaderConfig;
        });
    }
}
