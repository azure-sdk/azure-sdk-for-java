// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.securityinsights.models.BulkActionState;
import com.azure.resourcemanager.securityinsights.models.Condition;
import com.azure.resourcemanager.securityinsights.models.Operation;
import com.azure.resourcemanager.securityinsights.models.TargetType;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;

/** Describes the BulkAction's properties. */
@Fluent
public final class BulkActionProperties {
    /*
     * Describes the type this bulk action targets for execution.
     */
    @JsonProperty(value = "targetType", required = true)
    private TargetType targetType;

    /*
     * The current state of this bulk action in the execution pipeline.
     */
    @JsonProperty(value = "state")
    private BulkActionState state;

    /*
     * The condition which describes what instances of the target type should be affected by this bulk action.
     */
    @JsonProperty(value = "condition", required = true)
    private Condition condition;

    /*
     * The operation which describes how the targeted objects will be modified by this bulk action.
     */
    @JsonProperty(value = "operation", required = true)
    private Operation operation;

    /*
     * Estimated number of items to be affected by this bulk action, computed at creation time.
     */
    @JsonProperty(value = "estimatedAffectedCountAtCreation", access = JsonProperty.Access.WRITE_ONLY)
    private Integer estimatedAffectedCountAtCreation;

    /*
     * Estimated number of items to be affected by this bulk action, computed at execution start time.
     */
    @JsonProperty(value = "estimatedAffectedCountAtExecutionStartTime", access = JsonProperty.Access.WRITE_ONLY)
    private Integer estimatedAffectedCountAtExecutionStartTime;

    /*
     * Total number of affected items by this bulk action.
     */
    @JsonProperty(value = "totalAffectedCount", access = JsonProperty.Access.WRITE_ONLY)
    private Integer totalAffectedCount;

    /*
     * Index of this bulk action in the execution queue.
     */
    @JsonProperty(value = "executionOrder")
    private Integer executionOrder;

    /*
     * The time this bulk action was created.
     */
    @JsonProperty(value = "createdTimeUtc", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime createdTimeUtc;

    /*
     * The last time this bulk action was modified.
     */
    @JsonProperty(value = "lastModifiedTimeUtc", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime lastModifiedTimeUtc;

    /**
     * Get the targetType property: Describes the type this bulk action targets for execution.
     *
     * @return the targetType value.
     */
    public TargetType targetType() {
        return this.targetType;
    }

    /**
     * Set the targetType property: Describes the type this bulk action targets for execution.
     *
     * @param targetType the targetType value to set.
     * @return the BulkActionProperties object itself.
     */
    public BulkActionProperties withTargetType(TargetType targetType) {
        this.targetType = targetType;
        return this;
    }

    /**
     * Get the state property: The current state of this bulk action in the execution pipeline.
     *
     * @return the state value.
     */
    public BulkActionState state() {
        return this.state;
    }

    /**
     * Set the state property: The current state of this bulk action in the execution pipeline.
     *
     * @param state the state value to set.
     * @return the BulkActionProperties object itself.
     */
    public BulkActionProperties withState(BulkActionState state) {
        this.state = state;
        return this;
    }

    /**
     * Get the condition property: The condition which describes what instances of the target type should be affected by
     * this bulk action.
     *
     * @return the condition value.
     */
    public Condition condition() {
        return this.condition;
    }

    /**
     * Set the condition property: The condition which describes what instances of the target type should be affected by
     * this bulk action.
     *
     * @param condition the condition value to set.
     * @return the BulkActionProperties object itself.
     */
    public BulkActionProperties withCondition(Condition condition) {
        this.condition = condition;
        return this;
    }

    /**
     * Get the operation property: The operation which describes how the targeted objects will be modified by this bulk
     * action.
     *
     * @return the operation value.
     */
    public Operation operation() {
        return this.operation;
    }

    /**
     * Set the operation property: The operation which describes how the targeted objects will be modified by this bulk
     * action.
     *
     * @param operation the operation value to set.
     * @return the BulkActionProperties object itself.
     */
    public BulkActionProperties withOperation(Operation operation) {
        this.operation = operation;
        return this;
    }

    /**
     * Get the estimatedAffectedCountAtCreation property: Estimated number of items to be affected by this bulk action,
     * computed at creation time.
     *
     * @return the estimatedAffectedCountAtCreation value.
     */
    public Integer estimatedAffectedCountAtCreation() {
        return this.estimatedAffectedCountAtCreation;
    }

    /**
     * Get the estimatedAffectedCountAtExecutionStartTime property: Estimated number of items to be affected by this
     * bulk action, computed at execution start time.
     *
     * @return the estimatedAffectedCountAtExecutionStartTime value.
     */
    public Integer estimatedAffectedCountAtExecutionStartTime() {
        return this.estimatedAffectedCountAtExecutionStartTime;
    }

    /**
     * Get the totalAffectedCount property: Total number of affected items by this bulk action.
     *
     * @return the totalAffectedCount value.
     */
    public Integer totalAffectedCount() {
        return this.totalAffectedCount;
    }

    /**
     * Get the executionOrder property: Index of this bulk action in the execution queue.
     *
     * @return the executionOrder value.
     */
    public Integer executionOrder() {
        return this.executionOrder;
    }

    /**
     * Set the executionOrder property: Index of this bulk action in the execution queue.
     *
     * @param executionOrder the executionOrder value to set.
     * @return the BulkActionProperties object itself.
     */
    public BulkActionProperties withExecutionOrder(Integer executionOrder) {
        this.executionOrder = executionOrder;
        return this;
    }

    /**
     * Get the createdTimeUtc property: The time this bulk action was created.
     *
     * @return the createdTimeUtc value.
     */
    public OffsetDateTime createdTimeUtc() {
        return this.createdTimeUtc;
    }

    /**
     * Get the lastModifiedTimeUtc property: The last time this bulk action was modified.
     *
     * @return the lastModifiedTimeUtc value.
     */
    public OffsetDateTime lastModifiedTimeUtc() {
        return this.lastModifiedTimeUtc;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (targetType() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property targetType in model BulkActionProperties"));
        }
        if (condition() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property condition in model BulkActionProperties"));
        } else {
            condition().validate();
        }
        if (operation() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property operation in model BulkActionProperties"));
        } else {
            operation().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(BulkActionProperties.class);
}
