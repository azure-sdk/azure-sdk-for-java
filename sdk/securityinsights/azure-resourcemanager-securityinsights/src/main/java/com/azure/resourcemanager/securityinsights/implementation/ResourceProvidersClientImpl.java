// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.securityinsights.fluent.ResourceProvidersClient;
import com.azure.resourcemanager.securityinsights.fluent.models.EnrichmentDomainWhoisInner;
import com.azure.resourcemanager.securityinsights.fluent.models.EnrichmentIpGeodataInner;
import com.azure.resourcemanager.securityinsights.models.EnrichmentDomainBody;
import com.azure.resourcemanager.securityinsights.models.EnrichmentIpAddressBody;
import com.azure.resourcemanager.securityinsights.models.EnrichmentType;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in ResourceProvidersClient.
 */
public final class ResourceProvidersClientImpl implements ResourceProvidersClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final ResourceProvidersService service;

    /**
     * The service client containing this operation class.
     */
    private final SecurityInsightsImpl client;

    /**
     * Initializes an instance of ResourceProvidersClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    ResourceProvidersClientImpl(SecurityInsightsImpl client) {
        this.service
            = RestProxy.create(ResourceProvidersService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for SecurityInsightsResourceProviders to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "SecurityInsightsReso")
    public interface ResourceProvidersService {
        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/enrichment/{enrichmentType}/listGeodataByIp")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<EnrichmentIpGeodataInner>> listGeodataByIp(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("workspaceName") String workspaceName,
            @PathParam("enrichmentType") EnrichmentType enrichmentType,
            @BodyParam("application/json") EnrichmentIpAddressBody ipAddressBody, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/enrichment/{enrichmentType}/listWhoisByDomain")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<EnrichmentDomainWhoisInner>> listWhoisByDomain(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("workspaceName") String workspaceName,
            @PathParam("enrichmentType") EnrichmentType enrichmentType,
            @BodyParam("application/json") EnrichmentDomainBody domainBody, @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Get geodata for a single IP address.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param enrichmentType Enrichment type.
     * @param ipAddressBody IP address (v4 or v6) to be enriched.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return geodata for a single IP address along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<EnrichmentIpGeodataInner>> listGeodataByIpWithResponseAsync(String resourceGroupName,
        String workspaceName, EnrichmentType enrichmentType, EnrichmentIpAddressBody ipAddressBody) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (workspaceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workspaceName is required and cannot be null."));
        }
        if (enrichmentType == null) {
            return Mono.error(new IllegalArgumentException("Parameter enrichmentType is required and cannot be null."));
        }
        if (ipAddressBody == null) {
            return Mono.error(new IllegalArgumentException("Parameter ipAddressBody is required and cannot be null."));
        } else {
            ipAddressBody.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listGeodataByIp(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, workspaceName, enrichmentType, ipAddressBody,
                accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get geodata for a single IP address.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param enrichmentType Enrichment type.
     * @param ipAddressBody IP address (v4 or v6) to be enriched.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return geodata for a single IP address along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<EnrichmentIpGeodataInner>> listGeodataByIpWithResponseAsync(String resourceGroupName,
        String workspaceName, EnrichmentType enrichmentType, EnrichmentIpAddressBody ipAddressBody, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (workspaceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workspaceName is required and cannot be null."));
        }
        if (enrichmentType == null) {
            return Mono.error(new IllegalArgumentException("Parameter enrichmentType is required and cannot be null."));
        }
        if (ipAddressBody == null) {
            return Mono.error(new IllegalArgumentException("Parameter ipAddressBody is required and cannot be null."));
        } else {
            ipAddressBody.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listGeodataByIp(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, workspaceName, enrichmentType, ipAddressBody, accept,
            context);
    }

    /**
     * Get geodata for a single IP address.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param enrichmentType Enrichment type.
     * @param ipAddressBody IP address (v4 or v6) to be enriched.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return geodata for a single IP address on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<EnrichmentIpGeodataInner> listGeodataByIpAsync(String resourceGroupName, String workspaceName,
        EnrichmentType enrichmentType, EnrichmentIpAddressBody ipAddressBody) {
        return listGeodataByIpWithResponseAsync(resourceGroupName, workspaceName, enrichmentType, ipAddressBody)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get geodata for a single IP address.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param enrichmentType Enrichment type.
     * @param ipAddressBody IP address (v4 or v6) to be enriched.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return geodata for a single IP address along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<EnrichmentIpGeodataInner> listGeodataByIpWithResponse(String resourceGroupName,
        String workspaceName, EnrichmentType enrichmentType, EnrichmentIpAddressBody ipAddressBody, Context context) {
        return listGeodataByIpWithResponseAsync(resourceGroupName, workspaceName, enrichmentType, ipAddressBody,
            context).block();
    }

    /**
     * Get geodata for a single IP address.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param enrichmentType Enrichment type.
     * @param ipAddressBody IP address (v4 or v6) to be enriched.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return geodata for a single IP address.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public EnrichmentIpGeodataInner listGeodataByIp(String resourceGroupName, String workspaceName,
        EnrichmentType enrichmentType, EnrichmentIpAddressBody ipAddressBody) {
        return listGeodataByIpWithResponse(resourceGroupName, workspaceName, enrichmentType, ipAddressBody,
            Context.NONE).getValue();
    }

    /**
     * Get whois information for a single domain name.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param enrichmentType Enrichment type.
     * @param domainBody Domain name to be enriched. Only domain name is accepted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return whois information for a single domain name along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<EnrichmentDomainWhoisInner>> listWhoisByDomainWithResponseAsync(String resourceGroupName,
        String workspaceName, EnrichmentType enrichmentType, EnrichmentDomainBody domainBody) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (workspaceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workspaceName is required and cannot be null."));
        }
        if (enrichmentType == null) {
            return Mono.error(new IllegalArgumentException("Parameter enrichmentType is required and cannot be null."));
        }
        if (domainBody == null) {
            return Mono.error(new IllegalArgumentException("Parameter domainBody is required and cannot be null."));
        } else {
            domainBody.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listWhoisByDomain(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, workspaceName, enrichmentType, domainBody, accept,
                context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get whois information for a single domain name.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param enrichmentType Enrichment type.
     * @param domainBody Domain name to be enriched. Only domain name is accepted.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return whois information for a single domain name along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<EnrichmentDomainWhoisInner>> listWhoisByDomainWithResponseAsync(String resourceGroupName,
        String workspaceName, EnrichmentType enrichmentType, EnrichmentDomainBody domainBody, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (workspaceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workspaceName is required and cannot be null."));
        }
        if (enrichmentType == null) {
            return Mono.error(new IllegalArgumentException("Parameter enrichmentType is required and cannot be null."));
        }
        if (domainBody == null) {
            return Mono.error(new IllegalArgumentException("Parameter domainBody is required and cannot be null."));
        } else {
            domainBody.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listWhoisByDomain(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, workspaceName, enrichmentType, domainBody, accept,
            context);
    }

    /**
     * Get whois information for a single domain name.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param enrichmentType Enrichment type.
     * @param domainBody Domain name to be enriched. Only domain name is accepted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return whois information for a single domain name on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<EnrichmentDomainWhoisInner> listWhoisByDomainAsync(String resourceGroupName, String workspaceName,
        EnrichmentType enrichmentType, EnrichmentDomainBody domainBody) {
        return listWhoisByDomainWithResponseAsync(resourceGroupName, workspaceName, enrichmentType, domainBody)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get whois information for a single domain name.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param enrichmentType Enrichment type.
     * @param domainBody Domain name to be enriched. Only domain name is accepted.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return whois information for a single domain name along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<EnrichmentDomainWhoisInner> listWhoisByDomainWithResponse(String resourceGroupName,
        String workspaceName, EnrichmentType enrichmentType, EnrichmentDomainBody domainBody, Context context) {
        return listWhoisByDomainWithResponseAsync(resourceGroupName, workspaceName, enrichmentType, domainBody, context)
            .block();
    }

    /**
     * Get whois information for a single domain name.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param enrichmentType Enrichment type.
     * @param domainBody Domain name to be enriched. Only domain name is accepted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return whois information for a single domain name.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public EnrichmentDomainWhoisInner listWhoisByDomain(String resourceGroupName, String workspaceName,
        EnrichmentType enrichmentType, EnrichmentDomainBody domainBody) {
        return listWhoisByDomainWithResponse(resourceGroupName, workspaceName, enrichmentType, domainBody, Context.NONE)
            .getValue();
    }
}
