// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The configuration of the destination of the data.
 */
@Fluent
public final class DcrConfiguration implements JsonSerializable<DcrConfiguration> {
    /*
     * Represents the data collection ingestion endpoint in log analytics.
     */
    private String dataCollectionEndpoint;

    /*
     * The data collection rule immutable id, the rule defines the transformation and data destination.
     */
    private String dataCollectionRuleImmutableId;

    /*
     * The stream we are sending the data to.
     */
    private String streamName;

    /**
     * Creates an instance of DcrConfiguration class.
     */
    public DcrConfiguration() {
    }

    /**
     * Get the dataCollectionEndpoint property: Represents the data collection ingestion endpoint in log analytics.
     * 
     * @return the dataCollectionEndpoint value.
     */
    public String dataCollectionEndpoint() {
        return this.dataCollectionEndpoint;
    }

    /**
     * Set the dataCollectionEndpoint property: Represents the data collection ingestion endpoint in log analytics.
     * 
     * @param dataCollectionEndpoint the dataCollectionEndpoint value to set.
     * @return the DcrConfiguration object itself.
     */
    public DcrConfiguration withDataCollectionEndpoint(String dataCollectionEndpoint) {
        this.dataCollectionEndpoint = dataCollectionEndpoint;
        return this;
    }

    /**
     * Get the dataCollectionRuleImmutableId property: The data collection rule immutable id, the rule defines the
     * transformation and data destination.
     * 
     * @return the dataCollectionRuleImmutableId value.
     */
    public String dataCollectionRuleImmutableId() {
        return this.dataCollectionRuleImmutableId;
    }

    /**
     * Set the dataCollectionRuleImmutableId property: The data collection rule immutable id, the rule defines the
     * transformation and data destination.
     * 
     * @param dataCollectionRuleImmutableId the dataCollectionRuleImmutableId value to set.
     * @return the DcrConfiguration object itself.
     */
    public DcrConfiguration withDataCollectionRuleImmutableId(String dataCollectionRuleImmutableId) {
        this.dataCollectionRuleImmutableId = dataCollectionRuleImmutableId;
        return this;
    }

    /**
     * Get the streamName property: The stream we are sending the data to.
     * 
     * @return the streamName value.
     */
    public String streamName() {
        return this.streamName;
    }

    /**
     * Set the streamName property: The stream we are sending the data to.
     * 
     * @param streamName the streamName value to set.
     * @return the DcrConfiguration object itself.
     */
    public DcrConfiguration withStreamName(String streamName) {
        this.streamName = streamName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (dataCollectionEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property dataCollectionEndpoint in model DcrConfiguration"));
        }
        if (dataCollectionRuleImmutableId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property dataCollectionRuleImmutableId in model DcrConfiguration"));
        }
        if (streamName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property streamName in model DcrConfiguration"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DcrConfiguration.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("dataCollectionEndpoint", this.dataCollectionEndpoint);
        jsonWriter.writeStringField("dataCollectionRuleImmutableId", this.dataCollectionRuleImmutableId);
        jsonWriter.writeStringField("streamName", this.streamName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DcrConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DcrConfiguration if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DcrConfiguration.
     */
    public static DcrConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DcrConfiguration deserializedDcrConfiguration = new DcrConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("dataCollectionEndpoint".equals(fieldName)) {
                    deserializedDcrConfiguration.dataCollectionEndpoint = reader.getString();
                } else if ("dataCollectionRuleImmutableId".equals(fieldName)) {
                    deserializedDcrConfiguration.dataCollectionRuleImmutableId = reader.getString();
                } else if ("streamName".equals(fieldName)) {
                    deserializedDcrConfiguration.streamName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDcrConfiguration;
        });
    }
}
