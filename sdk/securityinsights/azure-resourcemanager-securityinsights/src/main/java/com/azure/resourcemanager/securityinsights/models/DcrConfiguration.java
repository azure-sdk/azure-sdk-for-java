// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * The configuration of the destination of the data.
 */
@Fluent
public final class DcrConfiguration {
    /*
     * Represents the data collection ingestion endpoint in log analytics.
     */
    @JsonProperty(value = "dataCollectionEndpoint", required = true)
    private String dataCollectionEndpoint;

    /*
     * The data collection rule immutable id, the rule defines the transformation and data destination.
     */
    @JsonProperty(value = "dataCollectionRuleImmutableId", required = true)
    private String dataCollectionRuleImmutableId;

    /*
     * The stream we are sending the data to.
     */
    @JsonProperty(value = "streamName", required = true)
    private String streamName;

    /**
     * Creates an instance of DcrConfiguration class.
     */
    public DcrConfiguration() {
    }

    /**
     * Get the dataCollectionEndpoint property: Represents the data collection ingestion endpoint in log analytics.
     * 
     * @return the dataCollectionEndpoint value.
     */
    public String dataCollectionEndpoint() {
        return this.dataCollectionEndpoint;
    }

    /**
     * Set the dataCollectionEndpoint property: Represents the data collection ingestion endpoint in log analytics.
     * 
     * @param dataCollectionEndpoint the dataCollectionEndpoint value to set.
     * @return the DcrConfiguration object itself.
     */
    public DcrConfiguration withDataCollectionEndpoint(String dataCollectionEndpoint) {
        this.dataCollectionEndpoint = dataCollectionEndpoint;
        return this;
    }

    /**
     * Get the dataCollectionRuleImmutableId property: The data collection rule immutable id, the rule defines the
     * transformation and data destination.
     * 
     * @return the dataCollectionRuleImmutableId value.
     */
    public String dataCollectionRuleImmutableId() {
        return this.dataCollectionRuleImmutableId;
    }

    /**
     * Set the dataCollectionRuleImmutableId property: The data collection rule immutable id, the rule defines the
     * transformation and data destination.
     * 
     * @param dataCollectionRuleImmutableId the dataCollectionRuleImmutableId value to set.
     * @return the DcrConfiguration object itself.
     */
    public DcrConfiguration withDataCollectionRuleImmutableId(String dataCollectionRuleImmutableId) {
        this.dataCollectionRuleImmutableId = dataCollectionRuleImmutableId;
        return this;
    }

    /**
     * Get the streamName property: The stream we are sending the data to.
     * 
     * @return the streamName value.
     */
    public String streamName() {
        return this.streamName;
    }

    /**
     * Set the streamName property: The stream we are sending the data to.
     * 
     * @param streamName the streamName value to set.
     * @return the DcrConfiguration object itself.
     */
    public DcrConfiguration withStreamName(String streamName) {
        this.streamName = streamName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (dataCollectionEndpoint() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property dataCollectionEndpoint in model DcrConfiguration"));
        }
        if (dataCollectionRuleImmutableId() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property dataCollectionRuleImmutableId in model DcrConfiguration"));
        }
        if (streamName() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property streamName in model DcrConfiguration"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DcrConfiguration.class);
}
