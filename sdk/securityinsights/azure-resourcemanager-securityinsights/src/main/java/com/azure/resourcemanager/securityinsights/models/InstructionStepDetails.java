// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Instruction step details, to be displayed in the Instructions steps section in the connector's page in Sentinel
 * Portal.
 */
@Fluent
public final class InstructionStepDetails implements JsonSerializable<InstructionStepDetails> {
    /*
     * Gets or sets the instruction type parameters settings.
     */
    private Object parameters;

    /*
     * Gets or sets the instruction type name.
     */
    private String type;

    /**
     * Creates an instance of InstructionStepDetails class.
     */
    public InstructionStepDetails() {
    }

    /**
     * Get the parameters property: Gets or sets the instruction type parameters settings.
     * 
     * @return the parameters value.
     */
    public Object parameters() {
        return this.parameters;
    }

    /**
     * Set the parameters property: Gets or sets the instruction type parameters settings.
     * 
     * @param parameters the parameters value to set.
     * @return the InstructionStepDetails object itself.
     */
    public InstructionStepDetails withParameters(Object parameters) {
        this.parameters = parameters;
        return this;
    }

    /**
     * Get the type property: Gets or sets the instruction type name.
     * 
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Set the type property: Gets or sets the instruction type name.
     * 
     * @param type the type value to set.
     * @return the InstructionStepDetails object itself.
     */
    public InstructionStepDetails withType(String type) {
        this.type = type;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (parameters() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property parameters in model InstructionStepDetails"));
        }
        if (type() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property type in model InstructionStepDetails"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(InstructionStepDetails.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeUntypedField("parameters", this.parameters);
        jsonWriter.writeStringField("type", this.type);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of InstructionStepDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of InstructionStepDetails if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the InstructionStepDetails.
     */
    public static InstructionStepDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            InstructionStepDetails deserializedInstructionStepDetails = new InstructionStepDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("parameters".equals(fieldName)) {
                    deserializedInstructionStepDetails.parameters = reader.readUntyped();
                } else if ("type".equals(fieldName)) {
                    deserializedInstructionStepDetails.type = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedInstructionStepDetails;
        });
    }
}
