// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.securityinsights.fluent.ExportJobsClient;
import com.azure.resourcemanager.securityinsights.fluent.models.ExportJobInner;
import com.azure.resourcemanager.securityinsights.models.ExportJob;
import com.azure.resourcemanager.securityinsights.models.ExportJobs;

public final class ExportJobsImpl implements ExportJobs {
    private static final ClientLogger LOGGER = new ClientLogger(ExportJobsImpl.class);

    private final ExportJobsClient innerClient;

    private final com.azure.resourcemanager.securityinsights.SecurityInsightsManager serviceManager;

    public ExportJobsImpl(
        ExportJobsClient innerClient,
        com.azure.resourcemanager.securityinsights.SecurityInsightsManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<ExportJob> list(String resourceGroupName, String workspaceName, String exportConnectionId) {
        PagedIterable<ExportJobInner> inner =
            this.serviceClient().list(resourceGroupName, workspaceName, exportConnectionId);
        return Utils.mapPage(inner, inner1 -> new ExportJobImpl(inner1, this.manager()));
    }

    public PagedIterable<ExportJob> list(
        String resourceGroupName, String workspaceName, String exportConnectionId, Context context) {
        PagedIterable<ExportJobInner> inner =
            this.serviceClient().list(resourceGroupName, workspaceName, exportConnectionId, context);
        return Utils.mapPage(inner, inner1 -> new ExportJobImpl(inner1, this.manager()));
    }

    public Response<ExportJob> getWithResponse(
        String resourceGroupName,
        String workspaceName,
        String exportConnectionId,
        String exportJobId,
        Context context) {
        Response<ExportJobInner> inner =
            this
                .serviceClient()
                .getWithResponse(resourceGroupName, workspaceName, exportConnectionId, exportJobId, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ExportJobImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ExportJob get(
        String resourceGroupName, String workspaceName, String exportConnectionId, String exportJobId) {
        ExportJobInner inner =
            this.serviceClient().get(resourceGroupName, workspaceName, exportConnectionId, exportJobId);
        if (inner != null) {
            return new ExportJobImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ExportJob getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = Utils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String exportConnectionId = Utils.getValueFromIdByName(id, "exportConnections");
        if (exportConnectionId == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'exportConnections'.", id)));
        }
        String exportJobId = Utils.getValueFromIdByName(id, "exportJobs");
        if (exportJobId == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'exportJobs'.", id)));
        }
        return this
            .getWithResponse(resourceGroupName, workspaceName, exportConnectionId, exportJobId, Context.NONE)
            .getValue();
    }

    public Response<ExportJob> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = Utils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String exportConnectionId = Utils.getValueFromIdByName(id, "exportConnections");
        if (exportConnectionId == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'exportConnections'.", id)));
        }
        String exportJobId = Utils.getValueFromIdByName(id, "exportJobs");
        if (exportJobId == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'exportJobs'.", id)));
        }
        return this.getWithResponse(resourceGroupName, workspaceName, exportConnectionId, exportJobId, context);
    }

    private ExportJobsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.securityinsights.SecurityInsightsManager manager() {
        return this.serviceManager;
    }

    public ExportJobImpl define(String name) {
        return new ExportJobImpl(name, this.manager());
    }
}
