// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.implementation;

import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.securityinsights.fluent.models.WorkspaceManagerAssignmentInner;
import com.azure.resourcemanager.securityinsights.models.AssignmentItem;
import com.azure.resourcemanager.securityinsights.models.ProvisioningState;
import com.azure.resourcemanager.securityinsights.models.WorkspaceManagerAssignment;
import java.time.OffsetDateTime;
import java.util.Collections;
import java.util.List;

public final class WorkspaceManagerAssignmentImpl
    implements WorkspaceManagerAssignment, WorkspaceManagerAssignment.Definition, WorkspaceManagerAssignment.Update {
    private WorkspaceManagerAssignmentInner innerObject;

    private final com.azure.resourcemanager.securityinsights.SecurityInsightsManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String etag() {
        return this.innerModel().etag();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public String targetResourceName() {
        return this.innerModel().targetResourceName();
    }

    public OffsetDateTime lastJobEndTime() {
        return this.innerModel().lastJobEndTime();
    }

    public ProvisioningState lastJobProvisioningState() {
        return this.innerModel().lastJobProvisioningState();
    }

    public List<AssignmentItem> items() {
        List<AssignmentItem> inner = this.innerModel().items();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public WorkspaceManagerAssignmentInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.securityinsights.SecurityInsightsManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String workspaceName;

    private String workspaceManagerAssignmentName;

    public WorkspaceManagerAssignmentImpl withExistingWorkspace(String resourceGroupName, String workspaceName) {
        this.resourceGroupName = resourceGroupName;
        this.workspaceName = workspaceName;
        return this;
    }

    public WorkspaceManagerAssignment create() {
        this.innerObject = serviceManager.serviceClient()
            .getWorkspaceManagerAssignments()
            .createOrUpdateWithResponse(resourceGroupName, workspaceName, workspaceManagerAssignmentName,
                this.innerModel(), Context.NONE)
            .getValue();
        return this;
    }

    public WorkspaceManagerAssignment create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getWorkspaceManagerAssignments()
            .createOrUpdateWithResponse(resourceGroupName, workspaceName, workspaceManagerAssignmentName,
                this.innerModel(), context)
            .getValue();
        return this;
    }

    WorkspaceManagerAssignmentImpl(String name,
        com.azure.resourcemanager.securityinsights.SecurityInsightsManager serviceManager) {
        this.innerObject = new WorkspaceManagerAssignmentInner();
        this.serviceManager = serviceManager;
        this.workspaceManagerAssignmentName = name;
    }

    public WorkspaceManagerAssignmentImpl update() {
        return this;
    }

    public WorkspaceManagerAssignment apply() {
        this.innerObject = serviceManager.serviceClient()
            .getWorkspaceManagerAssignments()
            .createOrUpdateWithResponse(resourceGroupName, workspaceName, workspaceManagerAssignmentName,
                this.innerModel(), Context.NONE)
            .getValue();
        return this;
    }

    public WorkspaceManagerAssignment apply(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getWorkspaceManagerAssignments()
            .createOrUpdateWithResponse(resourceGroupName, workspaceName, workspaceManagerAssignmentName,
                this.innerModel(), context)
            .getValue();
        return this;
    }

    WorkspaceManagerAssignmentImpl(WorkspaceManagerAssignmentInner innerObject,
        com.azure.resourcemanager.securityinsights.SecurityInsightsManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.workspaceName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "workspaces");
        this.workspaceManagerAssignmentName
            = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "workspaceManagerAssignments");
    }

    public WorkspaceManagerAssignment refresh() {
        this.innerObject = serviceManager.serviceClient()
            .getWorkspaceManagerAssignments()
            .getWithResponse(resourceGroupName, workspaceName, workspaceManagerAssignmentName, Context.NONE)
            .getValue();
        return this;
    }

    public WorkspaceManagerAssignment refresh(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getWorkspaceManagerAssignments()
            .getWithResponse(resourceGroupName, workspaceName, workspaceManagerAssignmentName, context)
            .getValue();
        return this;
    }

    public WorkspaceManagerAssignmentImpl withTargetResourceName(String targetResourceName) {
        this.innerModel().withTargetResourceName(targetResourceName);
        return this;
    }

    public WorkspaceManagerAssignmentImpl withItems(List<AssignmentItem> items) {
        this.innerModel().withItems(items);
        return this;
    }
}
