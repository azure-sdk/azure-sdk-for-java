// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.securityinsights.models.SystemStatusType;
import com.azure.resourcemanager.securityinsights.models.SystemsConfiguration;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * The properties of the system.
 */
@Fluent
public final class SystemProperties implements JsonSerializable<SystemProperties> {
    /*
     * The status of the system.
     */
    private SystemStatusType status;

    /*
     * The configuration of the system.
     */
    private SystemsConfiguration configuration;

    /*
     * The displayName property.
     */
    private String displayName;

    /*
     * The lastModifiedTimeUtc property.
     */
    private OffsetDateTime lastModifiedTimeUtc;

    /**
     * Creates an instance of SystemProperties class.
     */
    public SystemProperties() {
    }

    /**
     * Get the status property: The status of the system.
     * 
     * @return the status value.
     */
    public SystemStatusType status() {
        return this.status;
    }

    /**
     * Set the status property: The status of the system.
     * 
     * @param status the status value to set.
     * @return the SystemProperties object itself.
     */
    public SystemProperties withStatus(SystemStatusType status) {
        this.status = status;
        return this;
    }

    /**
     * Get the configuration property: The configuration of the system.
     * 
     * @return the configuration value.
     */
    public SystemsConfiguration configuration() {
        return this.configuration;
    }

    /**
     * Set the configuration property: The configuration of the system.
     * 
     * @param configuration the configuration value to set.
     * @return the SystemProperties object itself.
     */
    public SystemProperties withConfiguration(SystemsConfiguration configuration) {
        this.configuration = configuration;
        return this;
    }

    /**
     * Get the displayName property: The displayName property.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: The displayName property.
     * 
     * @param displayName the displayName value to set.
     * @return the SystemProperties object itself.
     */
    public SystemProperties withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the lastModifiedTimeUtc property: The lastModifiedTimeUtc property.
     * 
     * @return the lastModifiedTimeUtc value.
     */
    public OffsetDateTime lastModifiedTimeUtc() {
        return this.lastModifiedTimeUtc;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (configuration() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property configuration in model SystemProperties"));
        } else {
            configuration().validate();
        }
        if (displayName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property displayName in model SystemProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(SystemProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("configuration", this.configuration);
        jsonWriter.writeStringField("displayName", this.displayName);
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SystemProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SystemProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SystemProperties.
     */
    public static SystemProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SystemProperties deserializedSystemProperties = new SystemProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("configuration".equals(fieldName)) {
                    deserializedSystemProperties.configuration = SystemsConfiguration.fromJson(reader);
                } else if ("displayName".equals(fieldName)) {
                    deserializedSystemProperties.displayName = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedSystemProperties.status = SystemStatusType.fromString(reader.getString());
                } else if ("lastModifiedTimeUtc".equals(fieldName)) {
                    deserializedSystemProperties.lastModifiedTimeUtc = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSystemProperties;
        });
    }
}
