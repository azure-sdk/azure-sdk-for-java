// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Model for API authentication for Oracle.
 */
@Fluent
public final class OracleAuthModel extends CcpAuthConfig {
    /*
     * The auth type
     */
    private CcpAuthType type = CcpAuthType.ORACLE;

    /*
     * Oracle tenant ID
     */
    private String tenantId;

    /*
     * Oracle user ID
     */
    private String userId;

    /*
     * Public Fingerprint
     */
    private String publicFingerprint;

    /*
     * Content of the PRM file
     */
    private String pemFile;

    /**
     * Creates an instance of OracleAuthModel class.
     */
    public OracleAuthModel() {
    }

    /**
     * Get the type property: The auth type.
     * 
     * @return the type value.
     */
    @Override
    public CcpAuthType type() {
        return this.type;
    }

    /**
     * Get the tenantId property: Oracle tenant ID.
     * 
     * @return the tenantId value.
     */
    public String tenantId() {
        return this.tenantId;
    }

    /**
     * Set the tenantId property: Oracle tenant ID.
     * 
     * @param tenantId the tenantId value to set.
     * @return the OracleAuthModel object itself.
     */
    public OracleAuthModel withTenantId(String tenantId) {
        this.tenantId = tenantId;
        return this;
    }

    /**
     * Get the userId property: Oracle user ID.
     * 
     * @return the userId value.
     */
    public String userId() {
        return this.userId;
    }

    /**
     * Set the userId property: Oracle user ID.
     * 
     * @param userId the userId value to set.
     * @return the OracleAuthModel object itself.
     */
    public OracleAuthModel withUserId(String userId) {
        this.userId = userId;
        return this;
    }

    /**
     * Get the publicFingerprint property: Public Fingerprint.
     * 
     * @return the publicFingerprint value.
     */
    public String publicFingerprint() {
        return this.publicFingerprint;
    }

    /**
     * Set the publicFingerprint property: Public Fingerprint.
     * 
     * @param publicFingerprint the publicFingerprint value to set.
     * @return the OracleAuthModel object itself.
     */
    public OracleAuthModel withPublicFingerprint(String publicFingerprint) {
        this.publicFingerprint = publicFingerprint;
        return this;
    }

    /**
     * Get the pemFile property: Content of the PRM file.
     * 
     * @return the pemFile value.
     */
    public String pemFile() {
        return this.pemFile;
    }

    /**
     * Set the pemFile property: Content of the PRM file.
     * 
     * @param pemFile the pemFile value to set.
     * @return the OracleAuthModel object itself.
     */
    public OracleAuthModel withPemFile(String pemFile) {
        this.pemFile = pemFile;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (tenantId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property tenantId in model OracleAuthModel"));
        }
        if (userId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property userId in model OracleAuthModel"));
        }
        if (publicFingerprint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property publicFingerprint in model OracleAuthModel"));
        }
        if (pemFile() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property pemFile in model OracleAuthModel"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(OracleAuthModel.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("tenantId", this.tenantId);
        jsonWriter.writeStringField("userId", this.userId);
        jsonWriter.writeStringField("publicFingerprint", this.publicFingerprint);
        jsonWriter.writeStringField("pemFile", this.pemFile);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OracleAuthModel from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OracleAuthModel if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the OracleAuthModel.
     */
    public static OracleAuthModel fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OracleAuthModel deserializedOracleAuthModel = new OracleAuthModel();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("tenantId".equals(fieldName)) {
                    deserializedOracleAuthModel.tenantId = reader.getString();
                } else if ("userId".equals(fieldName)) {
                    deserializedOracleAuthModel.userId = reader.getString();
                } else if ("publicFingerprint".equals(fieldName)) {
                    deserializedOracleAuthModel.publicFingerprint = reader.getString();
                } else if ("pemFile".equals(fieldName)) {
                    deserializedOracleAuthModel.pemFile = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedOracleAuthModel.type = CcpAuthType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOracleAuthModel;
        });
    }
}
