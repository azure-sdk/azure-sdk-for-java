// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Model for API authentication for Oracle.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type")
@JsonTypeName("Oracle")
@Fluent
public final class OracleAuthModel extends CcpAuthConfig {
    /*
     * Oracle tenant ID
     */
    @JsonProperty(value = "tenantId", required = true)
    private String tenantId;

    /*
     * Oracle user ID
     */
    @JsonProperty(value = "userId", required = true)
    private String userId;

    /*
     * Public Fingerprint
     */
    @JsonProperty(value = "publicFingerprint", required = true)
    private String publicFingerprint;

    /*
     * Content of the PRM file
     */
    @JsonProperty(value = "pemFile", required = true)
    private String pemFile;

    /**
     * Creates an instance of OracleAuthModel class.
     */
    public OracleAuthModel() {
    }

    /**
     * Get the tenantId property: Oracle tenant ID.
     * 
     * @return the tenantId value.
     */
    public String tenantId() {
        return this.tenantId;
    }

    /**
     * Set the tenantId property: Oracle tenant ID.
     * 
     * @param tenantId the tenantId value to set.
     * @return the OracleAuthModel object itself.
     */
    public OracleAuthModel withTenantId(String tenantId) {
        this.tenantId = tenantId;
        return this;
    }

    /**
     * Get the userId property: Oracle user ID.
     * 
     * @return the userId value.
     */
    public String userId() {
        return this.userId;
    }

    /**
     * Set the userId property: Oracle user ID.
     * 
     * @param userId the userId value to set.
     * @return the OracleAuthModel object itself.
     */
    public OracleAuthModel withUserId(String userId) {
        this.userId = userId;
        return this;
    }

    /**
     * Get the publicFingerprint property: Public Fingerprint.
     * 
     * @return the publicFingerprint value.
     */
    public String publicFingerprint() {
        return this.publicFingerprint;
    }

    /**
     * Set the publicFingerprint property: Public Fingerprint.
     * 
     * @param publicFingerprint the publicFingerprint value to set.
     * @return the OracleAuthModel object itself.
     */
    public OracleAuthModel withPublicFingerprint(String publicFingerprint) {
        this.publicFingerprint = publicFingerprint;
        return this;
    }

    /**
     * Get the pemFile property: Content of the PRM file.
     * 
     * @return the pemFile value.
     */
    public String pemFile() {
        return this.pemFile;
    }

    /**
     * Set the pemFile property: Content of the PRM file.
     * 
     * @param pemFile the pemFile value to set.
     * @return the OracleAuthModel object itself.
     */
    public OracleAuthModel withPemFile(String pemFile) {
        this.pemFile = pemFile;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (tenantId() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property tenantId in model OracleAuthModel"));
        }
        if (userId() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property userId in model OracleAuthModel"));
        }
        if (publicFingerprint() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property publicFingerprint in model OracleAuthModel"));
        }
        if (pemFile() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property pemFile in model OracleAuthModel"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(OracleAuthModel.class);
}
