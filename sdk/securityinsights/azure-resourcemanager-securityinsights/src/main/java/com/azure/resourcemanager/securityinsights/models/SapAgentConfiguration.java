// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Describes the configuration of a SAP Docker agent.
 */
@Fluent
public final class SapAgentConfiguration extends AgentConfiguration {
    /*
     * Type of the agent
     */
    private AgentType type = AgentType.SAP;

    /*
     * The name of the docker agent.
     * only letters with numbers, underscores and hyphens are allowed
     * example: "my-agent"
     */
    private String agentContainerName;

    /*
     * The SDK path (a file not a folder) on the agent machine.
     * example: "/path/to/nwrfc750P_8-70002755.zip"
     */
    private String sdkPath;

    /*
     * The SNC path (a folder not a file) on the agent machine.
     * example: "/path/to/snc"
     */
    private String sncPath;

    /*
     * The key vault resource id to access the key vault.
     * example:
     * "/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.KeyVault/vaults/myVault"
     */
    private String keyVaultResourceId;

    /*
     * The key mode of the agent.
     * ManagedIdentity|ApplicationIdentity are the options
     */
    private KeyVaultAuthenticationMode keyVaultAuthenticationMode;

    /*
     * The secret source of the agent.
     * AzureKeyVault are the options
     */
    private SecretSource secretSource;

    /**
     * Creates an instance of SapAgentConfiguration class.
     */
    public SapAgentConfiguration() {
    }

    /**
     * Get the type property: Type of the agent.
     * 
     * @return the type value.
     */
    @Override
    public AgentType type() {
        return this.type;
    }

    /**
     * Get the agentContainerName property: The name of the docker agent.
     * only letters with numbers, underscores and hyphens are allowed
     * example: "my-agent".
     * 
     * @return the agentContainerName value.
     */
    public String agentContainerName() {
        return this.agentContainerName;
    }

    /**
     * Set the agentContainerName property: The name of the docker agent.
     * only letters with numbers, underscores and hyphens are allowed
     * example: "my-agent".
     * 
     * @param agentContainerName the agentContainerName value to set.
     * @return the SapAgentConfiguration object itself.
     */
    public SapAgentConfiguration withAgentContainerName(String agentContainerName) {
        this.agentContainerName = agentContainerName;
        return this;
    }

    /**
     * Get the sdkPath property: The SDK path (a file not a folder) on the agent machine.
     * example: "/path/to/nwrfc750P_8-70002755.zip".
     * 
     * @return the sdkPath value.
     */
    public String sdkPath() {
        return this.sdkPath;
    }

    /**
     * Set the sdkPath property: The SDK path (a file not a folder) on the agent machine.
     * example: "/path/to/nwrfc750P_8-70002755.zip".
     * 
     * @param sdkPath the sdkPath value to set.
     * @return the SapAgentConfiguration object itself.
     */
    public SapAgentConfiguration withSdkPath(String sdkPath) {
        this.sdkPath = sdkPath;
        return this;
    }

    /**
     * Get the sncPath property: The SNC path (a folder not a file) on the agent machine.
     * example: "/path/to/snc".
     * 
     * @return the sncPath value.
     */
    public String sncPath() {
        return this.sncPath;
    }

    /**
     * Set the sncPath property: The SNC path (a folder not a file) on the agent machine.
     * example: "/path/to/snc".
     * 
     * @param sncPath the sncPath value to set.
     * @return the SapAgentConfiguration object itself.
     */
    public SapAgentConfiguration withSncPath(String sncPath) {
        this.sncPath = sncPath;
        return this;
    }

    /**
     * Get the keyVaultResourceId property: The key vault resource id to access the key vault.
     * example:
     * "/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.KeyVault/vaults/myVault".
     * 
     * @return the keyVaultResourceId value.
     */
    public String keyVaultResourceId() {
        return this.keyVaultResourceId;
    }

    /**
     * Set the keyVaultResourceId property: The key vault resource id to access the key vault.
     * example:
     * "/subscriptions/d0cfe6b2-9ac0-4464-9919-dccaee2e48c0/resourceGroups/myRg/providers/Microsoft.KeyVault/vaults/myVault".
     * 
     * @param keyVaultResourceId the keyVaultResourceId value to set.
     * @return the SapAgentConfiguration object itself.
     */
    public SapAgentConfiguration withKeyVaultResourceId(String keyVaultResourceId) {
        this.keyVaultResourceId = keyVaultResourceId;
        return this;
    }

    /**
     * Get the keyVaultAuthenticationMode property: The key mode of the agent.
     * ManagedIdentity|ApplicationIdentity are the options.
     * 
     * @return the keyVaultAuthenticationMode value.
     */
    public KeyVaultAuthenticationMode keyVaultAuthenticationMode() {
        return this.keyVaultAuthenticationMode;
    }

    /**
     * Set the keyVaultAuthenticationMode property: The key mode of the agent.
     * ManagedIdentity|ApplicationIdentity are the options.
     * 
     * @param keyVaultAuthenticationMode the keyVaultAuthenticationMode value to set.
     * @return the SapAgentConfiguration object itself.
     */
    public SapAgentConfiguration withKeyVaultAuthenticationMode(KeyVaultAuthenticationMode keyVaultAuthenticationMode) {
        this.keyVaultAuthenticationMode = keyVaultAuthenticationMode;
        return this;
    }

    /**
     * Get the secretSource property: The secret source of the agent.
     * AzureKeyVault are the options.
     * 
     * @return the secretSource value.
     */
    public SecretSource secretSource() {
        return this.secretSource;
    }

    /**
     * Set the secretSource property: The secret source of the agent.
     * AzureKeyVault are the options.
     * 
     * @param secretSource the secretSource value to set.
     * @return the SapAgentConfiguration object itself.
     */
    public SapAgentConfiguration withSecretSource(SecretSource secretSource) {
        this.secretSource = secretSource;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeStringField("agentContainerName", this.agentContainerName);
        jsonWriter.writeStringField("sdkPath", this.sdkPath);
        jsonWriter.writeStringField("sncPath", this.sncPath);
        jsonWriter.writeStringField("keyVaultResourceId", this.keyVaultResourceId);
        jsonWriter.writeStringField("keyVaultAuthenticationMode",
            this.keyVaultAuthenticationMode == null ? null : this.keyVaultAuthenticationMode.toString());
        jsonWriter.writeStringField("secretSource", this.secretSource == null ? null : this.secretSource.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SapAgentConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SapAgentConfiguration if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SapAgentConfiguration.
     */
    public static SapAgentConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SapAgentConfiguration deserializedSapAgentConfiguration = new SapAgentConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedSapAgentConfiguration.type = AgentType.fromString(reader.getString());
                } else if ("agentContainerName".equals(fieldName)) {
                    deserializedSapAgentConfiguration.agentContainerName = reader.getString();
                } else if ("sdkPath".equals(fieldName)) {
                    deserializedSapAgentConfiguration.sdkPath = reader.getString();
                } else if ("sncPath".equals(fieldName)) {
                    deserializedSapAgentConfiguration.sncPath = reader.getString();
                } else if ("keyVaultResourceId".equals(fieldName)) {
                    deserializedSapAgentConfiguration.keyVaultResourceId = reader.getString();
                } else if ("keyVaultAuthenticationMode".equals(fieldName)) {
                    deserializedSapAgentConfiguration.keyVaultAuthenticationMode
                        = KeyVaultAuthenticationMode.fromString(reader.getString());
                } else if ("secretSource".equals(fieldName)) {
                    deserializedSapAgentConfiguration.secretSource = SecretSource.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSapAgentConfiguration;
        });
    }
}
