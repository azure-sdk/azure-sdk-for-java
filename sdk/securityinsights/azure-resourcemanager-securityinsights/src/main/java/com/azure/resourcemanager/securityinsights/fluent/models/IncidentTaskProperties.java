// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.securityinsights.models.ClientInfo;
import com.azure.resourcemanager.securityinsights.models.IncidentTaskStatus;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * The IncidentTaskProperties model.
 */
@Fluent
public final class IncidentTaskProperties implements JsonSerializable<IncidentTaskProperties> {
    /*
     * The title of the task
     */
    private String title;

    /*
     * The description of the task
     */
    private String description;

    /*
     * The status property.
     */
    private IncidentTaskStatus status;

    /*
     * The time the task was created
     */
    private OffsetDateTime createdTimeUtc;

    /*
     * The last time the task was updated
     */
    private OffsetDateTime lastModifiedTimeUtc;

    /*
     * Information on the client (user or application) that made some action
     */
    private ClientInfo createdBy;

    /*
     * Information on the client (user or application) that made some action
     */
    private ClientInfo lastModifiedBy;

    /**
     * Creates an instance of IncidentTaskProperties class.
     */
    public IncidentTaskProperties() {
    }

    /**
     * Get the title property: The title of the task.
     * 
     * @return the title value.
     */
    public String title() {
        return this.title;
    }

    /**
     * Set the title property: The title of the task.
     * 
     * @param title the title value to set.
     * @return the IncidentTaskProperties object itself.
     */
    public IncidentTaskProperties withTitle(String title) {
        this.title = title;
        return this;
    }

    /**
     * Get the description property: The description of the task.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: The description of the task.
     * 
     * @param description the description value to set.
     * @return the IncidentTaskProperties object itself.
     */
    public IncidentTaskProperties withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the status property: The status property.
     * 
     * @return the status value.
     */
    public IncidentTaskStatus status() {
        return this.status;
    }

    /**
     * Set the status property: The status property.
     * 
     * @param status the status value to set.
     * @return the IncidentTaskProperties object itself.
     */
    public IncidentTaskProperties withStatus(IncidentTaskStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Get the createdTimeUtc property: The time the task was created.
     * 
     * @return the createdTimeUtc value.
     */
    public OffsetDateTime createdTimeUtc() {
        return this.createdTimeUtc;
    }

    /**
     * Get the lastModifiedTimeUtc property: The last time the task was updated.
     * 
     * @return the lastModifiedTimeUtc value.
     */
    public OffsetDateTime lastModifiedTimeUtc() {
        return this.lastModifiedTimeUtc;
    }

    /**
     * Get the createdBy property: Information on the client (user or application) that made some action.
     * 
     * @return the createdBy value.
     */
    public ClientInfo createdBy() {
        return this.createdBy;
    }

    /**
     * Set the createdBy property: Information on the client (user or application) that made some action.
     * 
     * @param createdBy the createdBy value to set.
     * @return the IncidentTaskProperties object itself.
     */
    public IncidentTaskProperties withCreatedBy(ClientInfo createdBy) {
        this.createdBy = createdBy;
        return this;
    }

    /**
     * Get the lastModifiedBy property: Information on the client (user or application) that made some action.
     * 
     * @return the lastModifiedBy value.
     */
    public ClientInfo lastModifiedBy() {
        return this.lastModifiedBy;
    }

    /**
     * Set the lastModifiedBy property: Information on the client (user or application) that made some action.
     * 
     * @param lastModifiedBy the lastModifiedBy value to set.
     * @return the IncidentTaskProperties object itself.
     */
    public IncidentTaskProperties withLastModifiedBy(ClientInfo lastModifiedBy) {
        this.lastModifiedBy = lastModifiedBy;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (title() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property title in model IncidentTaskProperties"));
        }
        if (status() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property status in model IncidentTaskProperties"));
        }
        if (createdBy() != null) {
            createdBy().validate();
        }
        if (lastModifiedBy() != null) {
            lastModifiedBy().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(IncidentTaskProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("title", this.title);
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeJsonField("createdBy", this.createdBy);
        jsonWriter.writeJsonField("lastModifiedBy", this.lastModifiedBy);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of IncidentTaskProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of IncidentTaskProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the IncidentTaskProperties.
     */
    public static IncidentTaskProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            IncidentTaskProperties deserializedIncidentTaskProperties = new IncidentTaskProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("title".equals(fieldName)) {
                    deserializedIncidentTaskProperties.title = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedIncidentTaskProperties.status = IncidentTaskStatus.fromString(reader.getString());
                } else if ("description".equals(fieldName)) {
                    deserializedIncidentTaskProperties.description = reader.getString();
                } else if ("createdTimeUtc".equals(fieldName)) {
                    deserializedIncidentTaskProperties.createdTimeUtc = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastModifiedTimeUtc".equals(fieldName)) {
                    deserializedIncidentTaskProperties.lastModifiedTimeUtc = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("createdBy".equals(fieldName)) {
                    deserializedIncidentTaskProperties.createdBy = ClientInfo.fromJson(reader);
                } else if ("lastModifiedBy".equals(fieldName)) {
                    deserializedIncidentTaskProperties.lastModifiedBy = ClientInfo.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedIncidentTaskProperties;
        });
    }
}
