// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * What suggestions should be taken to complete the recommendation.
 */
@Fluent
public final class RecommendedSuggestion implements JsonSerializable<RecommendedSuggestion> {
    /*
     * Id of the suggestion type.
     */
    private String suggestionTypeId;

    /*
     * Title of the suggestion.
     */
    private String title;

    /*
     * Description of the suggestion.
     */
    private String description;

    /*
     * Action of the suggestion.
     */
    private String action;

    /*
     * Collection of additional properties for the suggestion.
     */
    private Map<String, String> additionalProperties;

    /**
     * Creates an instance of RecommendedSuggestion class.
     */
    public RecommendedSuggestion() {
    }

    /**
     * Get the suggestionTypeId property: Id of the suggestion type.
     * 
     * @return the suggestionTypeId value.
     */
    public String suggestionTypeId() {
        return this.suggestionTypeId;
    }

    /**
     * Set the suggestionTypeId property: Id of the suggestion type.
     * 
     * @param suggestionTypeId the suggestionTypeId value to set.
     * @return the RecommendedSuggestion object itself.
     */
    public RecommendedSuggestion withSuggestionTypeId(String suggestionTypeId) {
        this.suggestionTypeId = suggestionTypeId;
        return this;
    }

    /**
     * Get the title property: Title of the suggestion.
     * 
     * @return the title value.
     */
    public String title() {
        return this.title;
    }

    /**
     * Set the title property: Title of the suggestion.
     * 
     * @param title the title value to set.
     * @return the RecommendedSuggestion object itself.
     */
    public RecommendedSuggestion withTitle(String title) {
        this.title = title;
        return this;
    }

    /**
     * Get the description property: Description of the suggestion.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: Description of the suggestion.
     * 
     * @param description the description value to set.
     * @return the RecommendedSuggestion object itself.
     */
    public RecommendedSuggestion withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the action property: Action of the suggestion.
     * 
     * @return the action value.
     */
    public String action() {
        return this.action;
    }

    /**
     * Set the action property: Action of the suggestion.
     * 
     * @param action the action value to set.
     * @return the RecommendedSuggestion object itself.
     */
    public RecommendedSuggestion withAction(String action) {
        this.action = action;
        return this;
    }

    /**
     * Get the additionalProperties property: Collection of additional properties for the suggestion.
     * 
     * @return the additionalProperties value.
     */
    public Map<String, String> additionalProperties() {
        return this.additionalProperties;
    }

    /**
     * Set the additionalProperties property: Collection of additional properties for the suggestion.
     * 
     * @param additionalProperties the additionalProperties value to set.
     * @return the RecommendedSuggestion object itself.
     */
    public RecommendedSuggestion withAdditionalProperties(Map<String, String> additionalProperties) {
        this.additionalProperties = additionalProperties;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (suggestionTypeId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property suggestionTypeId in model RecommendedSuggestion"));
        }
        if (title() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property title in model RecommendedSuggestion"));
        }
        if (description() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property description in model RecommendedSuggestion"));
        }
        if (action() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property action in model RecommendedSuggestion"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(RecommendedSuggestion.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("suggestionTypeId", this.suggestionTypeId);
        jsonWriter.writeStringField("title", this.title);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeStringField("action", this.action);
        jsonWriter.writeMapField("additionalProperties", this.additionalProperties,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RecommendedSuggestion from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RecommendedSuggestion if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RecommendedSuggestion.
     */
    public static RecommendedSuggestion fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RecommendedSuggestion deserializedRecommendedSuggestion = new RecommendedSuggestion();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("suggestionTypeId".equals(fieldName)) {
                    deserializedRecommendedSuggestion.suggestionTypeId = reader.getString();
                } else if ("title".equals(fieldName)) {
                    deserializedRecommendedSuggestion.title = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedRecommendedSuggestion.description = reader.getString();
                } else if ("action".equals(fieldName)) {
                    deserializedRecommendedSuggestion.action = reader.getString();
                } else if ("additionalProperties".equals(fieldName)) {
                    Map<String, String> additionalProperties = reader.readMap(reader1 -> reader1.getString());
                    deserializedRecommendedSuggestion.additionalProperties = additionalProperties;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRecommendedSuggestion;
        });
    }
}
