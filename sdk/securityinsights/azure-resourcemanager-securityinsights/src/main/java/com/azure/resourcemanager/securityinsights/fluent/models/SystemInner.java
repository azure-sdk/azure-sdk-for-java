// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.securityinsights.models.ResourceWithEtag;
import com.azure.resourcemanager.securityinsights.models.SystemStatusType;
import com.azure.resourcemanager.securityinsights.models.SystemsConfiguration;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;

/**
 * Describes the system within the agent.
 */
@Fluent
public final class SystemInner extends ResourceWithEtag {
    /*
     * The properties of the system.
     */
    @JsonProperty(value = "properties", required = true)
    private SystemProperties innerProperties = new SystemProperties();

    /**
     * Creates an instance of SystemInner class.
     */
    public SystemInner() {
    }

    /**
     * Get the innerProperties property: The properties of the system.
     * 
     * @return the innerProperties value.
     */
    private SystemProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SystemInner withEtag(String etag) {
        super.withEtag(etag);
        return this;
    }

    /**
     * Get the status property: The status of the system.
     * 
     * @return the status value.
     */
    public SystemStatusType status() {
        return this.innerProperties() == null ? null : this.innerProperties().status();
    }

    /**
     * Set the status property: The status of the system.
     * 
     * @param status the status value to set.
     * @return the SystemInner object itself.
     */
    public SystemInner withStatus(SystemStatusType status) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SystemProperties();
        }
        this.innerProperties().withStatus(status);
        return this;
    }

    /**
     * Get the configuration property: The configuration of the system.
     * 
     * @return the configuration value.
     */
    public SystemsConfiguration configuration() {
        return this.innerProperties() == null ? null : this.innerProperties().configuration();
    }

    /**
     * Set the configuration property: The configuration of the system.
     * 
     * @param configuration the configuration value to set.
     * @return the SystemInner object itself.
     */
    public SystemInner withConfiguration(SystemsConfiguration configuration) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SystemProperties();
        }
        this.innerProperties().withConfiguration(configuration);
        return this;
    }

    /**
     * Get the displayName property: The displayName property.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.innerProperties() == null ? null : this.innerProperties().displayName();
    }

    /**
     * Set the displayName property: The displayName property.
     * 
     * @param displayName the displayName value to set.
     * @return the SystemInner object itself.
     */
    public SystemInner withDisplayName(String displayName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SystemProperties();
        }
        this.innerProperties().withDisplayName(displayName);
        return this;
    }

    /**
     * Get the lastModifiedTimeUtc property: The lastModifiedTimeUtc property.
     * 
     * @return the lastModifiedTimeUtc value.
     */
    public OffsetDateTime lastModifiedTimeUtc() {
        return this.innerProperties() == null ? null : this.innerProperties().lastModifiedTimeUtc();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (innerProperties() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property innerProperties in model SystemInner"));
        } else {
            innerProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(SystemInner.class);
}
