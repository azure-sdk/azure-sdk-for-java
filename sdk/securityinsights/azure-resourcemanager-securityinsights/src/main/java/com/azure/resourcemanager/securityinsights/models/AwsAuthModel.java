// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Model for API authentication with AWS.
 */
@Fluent
public final class AwsAuthModel extends CcpAuthConfig {
    /*
     * The auth type
     */
    private CcpAuthType type = CcpAuthType.AWS;

    /*
     * AWS STS assume role ARN
     */
    private String roleArn;

    /*
     * AWS STS assume role external ID. This is used to prevent the confused deputy problem:
     * 'https://docs.aws.amazon.com/IAM/latest/UserGuide/confused-deputy.html'
     */
    private String externalId;

    /**
     * Creates an instance of AwsAuthModel class.
     */
    public AwsAuthModel() {
    }

    /**
     * Get the type property: The auth type.
     * 
     * @return the type value.
     */
    @Override
    public CcpAuthType type() {
        return this.type;
    }

    /**
     * Get the roleArn property: AWS STS assume role ARN.
     * 
     * @return the roleArn value.
     */
    public String roleArn() {
        return this.roleArn;
    }

    /**
     * Set the roleArn property: AWS STS assume role ARN.
     * 
     * @param roleArn the roleArn value to set.
     * @return the AwsAuthModel object itself.
     */
    public AwsAuthModel withRoleArn(String roleArn) {
        this.roleArn = roleArn;
        return this;
    }

    /**
     * Get the externalId property: AWS STS assume role external ID. This is used to prevent the confused deputy
     * problem: 'https://docs.aws.amazon.com/IAM/latest/UserGuide/confused-deputy.html'.
     * 
     * @return the externalId value.
     */
    public String externalId() {
        return this.externalId;
    }

    /**
     * Set the externalId property: AWS STS assume role external ID. This is used to prevent the confused deputy
     * problem: 'https://docs.aws.amazon.com/IAM/latest/UserGuide/confused-deputy.html'.
     * 
     * @param externalId the externalId value to set.
     * @return the AwsAuthModel object itself.
     */
    public AwsAuthModel withExternalId(String externalId) {
        this.externalId = externalId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (roleArn() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property roleArn in model AwsAuthModel"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(AwsAuthModel.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("roleArn", this.roleArn);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeStringField("externalId", this.externalId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AwsAuthModel from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AwsAuthModel if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AwsAuthModel.
     */
    public static AwsAuthModel fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AwsAuthModel deserializedAwsAuthModel = new AwsAuthModel();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("roleArn".equals(fieldName)) {
                    deserializedAwsAuthModel.roleArn = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedAwsAuthModel.type = CcpAuthType.fromString(reader.getString());
                } else if ("externalId".equals(fieldName)) {
                    deserializedAwsAuthModel.externalId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAwsAuthModel;
        });
    }
}
