// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Represents the connector's Filtered providers. */
@Fluent
public final class MtpFilteredProviders {
    /*
     * Alerts filtered providers. When filters are not applied, all alerts will stream through the MTP pipeline, still
     * in private preview for all products EXCEPT MDA and MDI, which are in GA state.
     */
    @JsonProperty(value = "alerts", required = true)
    private List<MtpProvider> alerts;

    /** Creates an instance of MtpFilteredProviders class. */
    public MtpFilteredProviders() {
    }

    /**
     * Get the alerts property: Alerts filtered providers. When filters are not applied, all alerts will stream through
     * the MTP pipeline, still in private preview for all products EXCEPT MDA and MDI, which are in GA state.
     *
     * @return the alerts value.
     */
    public List<MtpProvider> alerts() {
        return this.alerts;
    }

    /**
     * Set the alerts property: Alerts filtered providers. When filters are not applied, all alerts will stream through
     * the MTP pipeline, still in private preview for all products EXCEPT MDA and MDI, which are in GA state.
     *
     * @param alerts the alerts value to set.
     * @return the MtpFilteredProviders object itself.
     */
    public MtpFilteredProviders withAlerts(List<MtpProvider> alerts) {
        this.alerts = alerts;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (alerts() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property alerts in model MtpFilteredProviders"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(MtpFilteredProviders.class);
}
