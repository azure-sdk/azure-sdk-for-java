// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Represents the connector's Filtered providers.
 */
@Fluent
public final class MtpFilteredProviders implements JsonSerializable<MtpFilteredProviders> {
    /*
     * Alerts filtered providers. When filters are not applied, all alerts will stream through the MTP pipeline, still
     * in private preview for all products EXCEPT MDA and MDI, which are in GA state.
     */
    private List<MtpProvider> alerts;

    /**
     * Creates an instance of MtpFilteredProviders class.
     */
    public MtpFilteredProviders() {
    }

    /**
     * Get the alerts property: Alerts filtered providers. When filters are not applied, all alerts will stream through
     * the MTP pipeline, still in private preview for all products EXCEPT MDA and MDI, which are in GA state.
     * 
     * @return the alerts value.
     */
    public List<MtpProvider> alerts() {
        return this.alerts;
    }

    /**
     * Set the alerts property: Alerts filtered providers. When filters are not applied, all alerts will stream through
     * the MTP pipeline, still in private preview for all products EXCEPT MDA and MDI, which are in GA state.
     * 
     * @param alerts the alerts value to set.
     * @return the MtpFilteredProviders object itself.
     */
    public MtpFilteredProviders withAlerts(List<MtpProvider> alerts) {
        this.alerts = alerts;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (alerts() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property alerts in model MtpFilteredProviders"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(MtpFilteredProviders.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("alerts", this.alerts,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MtpFilteredProviders from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MtpFilteredProviders if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MtpFilteredProviders.
     */
    public static MtpFilteredProviders fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MtpFilteredProviders deserializedMtpFilteredProviders = new MtpFilteredProviders();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("alerts".equals(fieldName)) {
                    List<MtpProvider> alerts = reader.readArray(reader1 -> MtpProvider.fromString(reader1.getString()));
                    deserializedMtpFilteredProviders.alerts = alerts;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMtpFilteredProviders;
        });
    }
}
