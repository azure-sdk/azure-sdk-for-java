// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The error description for why a publication failed.
 */
@Fluent
public final class Error implements JsonSerializable<Error> {
    /*
     * The member resource name for which the publication error occured
     */
    private String memberResourceName;

    /*
     * The error message
     */
    private String errorMessage;

    /**
     * Creates an instance of Error class.
     */
    public Error() {
    }

    /**
     * Get the memberResourceName property: The member resource name for which the publication error occured.
     * 
     * @return the memberResourceName value.
     */
    public String memberResourceName() {
        return this.memberResourceName;
    }

    /**
     * Set the memberResourceName property: The member resource name for which the publication error occured.
     * 
     * @param memberResourceName the memberResourceName value to set.
     * @return the Error object itself.
     */
    public Error withMemberResourceName(String memberResourceName) {
        this.memberResourceName = memberResourceName;
        return this;
    }

    /**
     * Get the errorMessage property: The error message.
     * 
     * @return the errorMessage value.
     */
    public String errorMessage() {
        return this.errorMessage;
    }

    /**
     * Set the errorMessage property: The error message.
     * 
     * @param errorMessage the errorMessage value to set.
     * @return the Error object itself.
     */
    public Error withErrorMessage(String errorMessage) {
        this.errorMessage = errorMessage;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (memberResourceName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property memberResourceName in model Error"));
        }
        if (errorMessage() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property errorMessage in model Error"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(Error.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("memberResourceName", this.memberResourceName);
        jsonWriter.writeStringField("errorMessage", this.errorMessage);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Error from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Error if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Error.
     */
    public static Error fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Error deserializedError = new Error();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("memberResourceName".equals(fieldName)) {
                    deserializedError.memberResourceName = reader.getString();
                } else if ("errorMessage".equals(fieldName)) {
                    deserializedError.errorMessage = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedError;
        });
    }
}
