// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Model for API authentication for working with service bus or storage account.
 */
@Fluent
public final class GenericBlobSbsAuthModel extends CcpAuthConfig {
    /*
     * The auth type
     */
    private CcpAuthType type = CcpAuthType.SERVICE_BUS;

    /*
     * Credentials for service bus namespace, keyvault uri for access key
     */
    private Map<String, String> credentialsConfig;

    /*
     * Credentials for storage account, keyvault uri for access key
     */
    private Map<String, String> storageAccountCredentialsConfig;

    /**
     * Creates an instance of GenericBlobSbsAuthModel class.
     */
    public GenericBlobSbsAuthModel() {
    }

    /**
     * Get the type property: The auth type.
     * 
     * @return the type value.
     */
    @Override
    public CcpAuthType type() {
        return this.type;
    }

    /**
     * Get the credentialsConfig property: Credentials for service bus namespace, keyvault uri for access key.
     * 
     * @return the credentialsConfig value.
     */
    public Map<String, String> credentialsConfig() {
        return this.credentialsConfig;
    }

    /**
     * Set the credentialsConfig property: Credentials for service bus namespace, keyvault uri for access key.
     * 
     * @param credentialsConfig the credentialsConfig value to set.
     * @return the GenericBlobSbsAuthModel object itself.
     */
    public GenericBlobSbsAuthModel withCredentialsConfig(Map<String, String> credentialsConfig) {
        this.credentialsConfig = credentialsConfig;
        return this;
    }

    /**
     * Get the storageAccountCredentialsConfig property: Credentials for storage account, keyvault uri for access key.
     * 
     * @return the storageAccountCredentialsConfig value.
     */
    public Map<String, String> storageAccountCredentialsConfig() {
        return this.storageAccountCredentialsConfig;
    }

    /**
     * Set the storageAccountCredentialsConfig property: Credentials for storage account, keyvault uri for access key.
     * 
     * @param storageAccountCredentialsConfig the storageAccountCredentialsConfig value to set.
     * @return the GenericBlobSbsAuthModel object itself.
     */
    public GenericBlobSbsAuthModel
        withStorageAccountCredentialsConfig(Map<String, String> storageAccountCredentialsConfig) {
        this.storageAccountCredentialsConfig = storageAccountCredentialsConfig;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeMapField("credentialsConfig", this.credentialsConfig,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeMapField("storageAccountCredentialsConfig", this.storageAccountCredentialsConfig,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GenericBlobSbsAuthModel from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GenericBlobSbsAuthModel if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the GenericBlobSbsAuthModel.
     */
    public static GenericBlobSbsAuthModel fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GenericBlobSbsAuthModel deserializedGenericBlobSbsAuthModel = new GenericBlobSbsAuthModel();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedGenericBlobSbsAuthModel.type = CcpAuthType.fromString(reader.getString());
                } else if ("credentialsConfig".equals(fieldName)) {
                    Map<String, String> credentialsConfig = reader.readMap(reader1 -> reader1.getString());
                    deserializedGenericBlobSbsAuthModel.credentialsConfig = credentialsConfig;
                } else if ("storageAccountCredentialsConfig".equals(fieldName)) {
                    Map<String, String> storageAccountCredentialsConfig
                        = reader.readMap(reader1 -> reader1.getString());
                    deserializedGenericBlobSbsAuthModel.storageAccountCredentialsConfig
                        = storageAccountCredentialsConfig;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedGenericBlobSbsAuthModel;
        });
    }
}
