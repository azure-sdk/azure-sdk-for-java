// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.securityinsights.fluent.models.ActionInner;
import java.io.IOException;

/**
 * Represents an unlock user action.
 */
@Fluent
public final class UnlockUserAction extends ActionInner {
    /*
     * The actions kind
     */
    private ListActionKind kind = ListActionKind.UNLOCK_USER;

    /*
     * The user to unlock
     */
    private String user;

    /*
     * The reason of the failure of the action. Empty if the action is successful.
     */
    private String failureReason;

    /**
     * Creates an instance of UnlockUserAction class.
     */
    public UnlockUserAction() {
    }

    /**
     * Get the kind property: The actions kind.
     * 
     * @return the kind value.
     */
    @Override
    public ListActionKind kind() {
        return this.kind;
    }

    /**
     * Get the user property: The user to unlock.
     * 
     * @return the user value.
     */
    public String user() {
        return this.user;
    }

    /**
     * Set the user property: The user to unlock.
     * 
     * @param user the user value to set.
     * @return the UnlockUserAction object itself.
     */
    public UnlockUserAction withUser(String user) {
        this.user = user;
        return this;
    }

    /**
     * Get the failureReason property: The reason of the failure of the action. Empty if the action is successful.
     * 
     * @return the failureReason value.
     */
    public String failureReason() {
        return this.failureReason;
    }

    /**
     * Set the failureReason property: The reason of the failure of the action. Empty if the action is successful.
     * 
     * @param failureReason the failureReason value to set.
     * @return the UnlockUserAction object itself.
     */
    public UnlockUserAction withFailureReason(String failureReason) {
        this.failureReason = failureReason;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        jsonWriter.writeStringField("user", this.user);
        jsonWriter.writeStringField("failureReason", this.failureReason);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UnlockUserAction from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UnlockUserAction if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the UnlockUserAction.
     */
    public static UnlockUserAction fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            UnlockUserAction deserializedUnlockUserAction = new UnlockUserAction();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("kind".equals(fieldName)) {
                    deserializedUnlockUserAction.kind = ListActionKind.fromString(reader.getString());
                } else if ("user".equals(fieldName)) {
                    deserializedUnlockUserAction.user = reader.getString();
                } else if ("failureReason".equals(fieldName)) {
                    deserializedUnlockUserAction.failureReason = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUnlockUserAction;
        });
    }
}
