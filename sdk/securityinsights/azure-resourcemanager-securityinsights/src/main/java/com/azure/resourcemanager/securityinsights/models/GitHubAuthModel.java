// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Model for API authentication for GitHub. For this authentication first we need to approve the Router app (Microsoft
 * Security DevOps) to access the GitHub account, Then we only need the InstallationId to get the access token from
 * https://api.github.com/app/installations/{installId}/access_tokens.
 */
@Fluent
public final class GitHubAuthModel extends CcpAuthConfig {
    /*
     * The auth type
     */
    private CcpAuthType type = CcpAuthType.GIT_HUB;

    /*
     * The GitHubApp auth installation id.
     */
    private String installationId;

    /**
     * Creates an instance of GitHubAuthModel class.
     */
    public GitHubAuthModel() {
    }

    /**
     * Get the type property: The auth type.
     * 
     * @return the type value.
     */
    @Override
    public CcpAuthType type() {
        return this.type;
    }

    /**
     * Get the installationId property: The GitHubApp auth installation id.
     * 
     * @return the installationId value.
     */
    public String installationId() {
        return this.installationId;
    }

    /**
     * Set the installationId property: The GitHubApp auth installation id.
     * 
     * @param installationId the installationId value to set.
     * @return the GitHubAuthModel object itself.
     */
    public GitHubAuthModel withInstallationId(String installationId) {
        this.installationId = installationId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeStringField("installationId", this.installationId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GitHubAuthModel from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GitHubAuthModel if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the GitHubAuthModel.
     */
    public static GitHubAuthModel fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GitHubAuthModel deserializedGitHubAuthModel = new GitHubAuthModel();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedGitHubAuthModel.type = CcpAuthType.fromString(reader.getString());
                } else if ("installationId".equals(fieldName)) {
                    deserializedGitHubAuthModel.installationId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedGitHubAuthModel;
        });
    }
}
