// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * Represents a condition used to query for TI objects.
 */
@Fluent
public final class ConditionProperties {
    /*
     * The STIX type for the objects returned by this query.
     */
    @JsonProperty(value = "stixObjectType", access = JsonProperty.Access.WRITE_ONLY)
    private String stixObjectType;

    /*
     * The list of clauses to be evaluated in disjunction or conjunction base on the specified top level connective
     * operator.
     */
    @JsonProperty(value = "clauses", required = true)
    private List<ConditionClause> clauses;

    /*
     * The top level connective operator for this condition.
     */
    @JsonProperty(value = "conditionConnective")
    private Connective conditionConnective;

    /**
     * Creates an instance of ConditionProperties class.
     */
    public ConditionProperties() {
    }

    /**
     * Get the stixObjectType property: The STIX type for the objects returned by this query.
     * 
     * @return the stixObjectType value.
     */
    public String stixObjectType() {
        return this.stixObjectType;
    }

    /**
     * Get the clauses property: The list of clauses to be evaluated in disjunction or conjunction base on the
     * specified top level connective operator.
     * 
     * @return the clauses value.
     */
    public List<ConditionClause> clauses() {
        return this.clauses;
    }

    /**
     * Set the clauses property: The list of clauses to be evaluated in disjunction or conjunction base on the
     * specified top level connective operator.
     * 
     * @param clauses the clauses value to set.
     * @return the ConditionProperties object itself.
     */
    public ConditionProperties withClauses(List<ConditionClause> clauses) {
        this.clauses = clauses;
        return this;
    }

    /**
     * Get the conditionConnective property: The top level connective operator for this condition.
     * 
     * @return the conditionConnective value.
     */
    public Connective conditionConnective() {
        return this.conditionConnective;
    }

    /**
     * Set the conditionConnective property: The top level connective operator for this condition.
     * 
     * @param conditionConnective the conditionConnective value to set.
     * @return the ConditionProperties object itself.
     */
    public ConditionProperties withConditionConnective(Connective conditionConnective) {
        this.conditionConnective = conditionConnective;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (clauses() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property clauses in model ConditionProperties"));
        } else {
            clauses().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ConditionProperties.class);
}
