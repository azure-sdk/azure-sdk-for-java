// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.securityinsights.models.DataConnectorTenantId;
import com.azure.resourcemanager.securityinsights.models.MtpDataConnectorDataTypes;
import com.azure.resourcemanager.securityinsights.models.MtpFilteredProviders;
import java.io.IOException;

/**
 * MTP (Microsoft Threat Protection) data connector properties.
 */
@Fluent
public final class MtpDataConnectorProperties extends DataConnectorTenantId {
    /*
     * The available data types for the connector.
     */
    private MtpDataConnectorDataTypes dataTypes;

    /*
     * The available filtered providers for the connector.
     */
    private MtpFilteredProviders filteredProviders;

    /**
     * Creates an instance of MtpDataConnectorProperties class.
     */
    public MtpDataConnectorProperties() {
    }

    /**
     * Get the dataTypes property: The available data types for the connector.
     * 
     * @return the dataTypes value.
     */
    public MtpDataConnectorDataTypes dataTypes() {
        return this.dataTypes;
    }

    /**
     * Set the dataTypes property: The available data types for the connector.
     * 
     * @param dataTypes the dataTypes value to set.
     * @return the MtpDataConnectorProperties object itself.
     */
    public MtpDataConnectorProperties withDataTypes(MtpDataConnectorDataTypes dataTypes) {
        this.dataTypes = dataTypes;
        return this;
    }

    /**
     * Get the filteredProviders property: The available filtered providers for the connector.
     * 
     * @return the filteredProviders value.
     */
    public MtpFilteredProviders filteredProviders() {
        return this.filteredProviders;
    }

    /**
     * Set the filteredProviders property: The available filtered providers for the connector.
     * 
     * @param filteredProviders the filteredProviders value to set.
     * @return the MtpDataConnectorProperties object itself.
     */
    public MtpDataConnectorProperties withFilteredProviders(MtpFilteredProviders filteredProviders) {
        this.filteredProviders = filteredProviders;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MtpDataConnectorProperties withTenantId(String tenantId) {
        super.withTenantId(tenantId);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (dataTypes() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property dataTypes in model MtpDataConnectorProperties"));
        } else {
            dataTypes().validate();
        }
        if (filteredProviders() != null) {
            filteredProviders().validate();
        }
        if (tenantId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property tenantId in model MtpDataConnectorProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(MtpDataConnectorProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("tenantId", tenantId());
        jsonWriter.writeJsonField("dataTypes", this.dataTypes);
        jsonWriter.writeJsonField("filteredProviders", this.filteredProviders);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MtpDataConnectorProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MtpDataConnectorProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MtpDataConnectorProperties.
     */
    public static MtpDataConnectorProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MtpDataConnectorProperties deserializedMtpDataConnectorProperties = new MtpDataConnectorProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("tenantId".equals(fieldName)) {
                    deserializedMtpDataConnectorProperties.withTenantId(reader.getString());
                } else if ("dataTypes".equals(fieldName)) {
                    deserializedMtpDataConnectorProperties.dataTypes = MtpDataConnectorDataTypes.fromJson(reader);
                } else if ("filteredProviders".equals(fieldName)) {
                    deserializedMtpDataConnectorProperties.filteredProviders = MtpFilteredProviders.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMtpDataConnectorProperties;
        });
    }
}
