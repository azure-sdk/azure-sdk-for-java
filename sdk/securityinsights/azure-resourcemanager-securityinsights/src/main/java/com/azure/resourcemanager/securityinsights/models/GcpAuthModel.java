// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Model for API authentication for all GCP kind connectors.
 */
@Fluent
public final class GcpAuthModel extends CcpAuthConfig {
    /*
     * The auth type
     */
    private CcpAuthType type = CcpAuthType.GCP;

    /*
     * GCP Service Account Email
     */
    private String serviceAccountEmail;

    /*
     * GCP Project Number
     */
    private String projectNumber;

    /*
     * GCP Workload Identity Provider ID
     */
    private String workloadIdentityProviderId;

    /**
     * Creates an instance of GcpAuthModel class.
     */
    public GcpAuthModel() {
    }

    /**
     * Get the type property: The auth type.
     * 
     * @return the type value.
     */
    @Override
    public CcpAuthType type() {
        return this.type;
    }

    /**
     * Get the serviceAccountEmail property: GCP Service Account Email.
     * 
     * @return the serviceAccountEmail value.
     */
    public String serviceAccountEmail() {
        return this.serviceAccountEmail;
    }

    /**
     * Set the serviceAccountEmail property: GCP Service Account Email.
     * 
     * @param serviceAccountEmail the serviceAccountEmail value to set.
     * @return the GcpAuthModel object itself.
     */
    public GcpAuthModel withServiceAccountEmail(String serviceAccountEmail) {
        this.serviceAccountEmail = serviceAccountEmail;
        return this;
    }

    /**
     * Get the projectNumber property: GCP Project Number.
     * 
     * @return the projectNumber value.
     */
    public String projectNumber() {
        return this.projectNumber;
    }

    /**
     * Set the projectNumber property: GCP Project Number.
     * 
     * @param projectNumber the projectNumber value to set.
     * @return the GcpAuthModel object itself.
     */
    public GcpAuthModel withProjectNumber(String projectNumber) {
        this.projectNumber = projectNumber;
        return this;
    }

    /**
     * Get the workloadIdentityProviderId property: GCP Workload Identity Provider ID.
     * 
     * @return the workloadIdentityProviderId value.
     */
    public String workloadIdentityProviderId() {
        return this.workloadIdentityProviderId;
    }

    /**
     * Set the workloadIdentityProviderId property: GCP Workload Identity Provider ID.
     * 
     * @param workloadIdentityProviderId the workloadIdentityProviderId value to set.
     * @return the GcpAuthModel object itself.
     */
    public GcpAuthModel withWorkloadIdentityProviderId(String workloadIdentityProviderId) {
        this.workloadIdentityProviderId = workloadIdentityProviderId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (serviceAccountEmail() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property serviceAccountEmail in model GcpAuthModel"));
        }
        if (projectNumber() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property projectNumber in model GcpAuthModel"));
        }
        if (workloadIdentityProviderId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property workloadIdentityProviderId in model GcpAuthModel"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(GcpAuthModel.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("serviceAccountEmail", this.serviceAccountEmail);
        jsonWriter.writeStringField("projectNumber", this.projectNumber);
        jsonWriter.writeStringField("workloadIdentityProviderId", this.workloadIdentityProviderId);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GcpAuthModel from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GcpAuthModel if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the GcpAuthModel.
     */
    public static GcpAuthModel fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GcpAuthModel deserializedGcpAuthModel = new GcpAuthModel();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("serviceAccountEmail".equals(fieldName)) {
                    deserializedGcpAuthModel.serviceAccountEmail = reader.getString();
                } else if ("projectNumber".equals(fieldName)) {
                    deserializedGcpAuthModel.projectNumber = reader.getString();
                } else if ("workloadIdentityProviderId".equals(fieldName)) {
                    deserializedGcpAuthModel.workloadIdentityProviderId = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedGcpAuthModel.type = CcpAuthType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedGcpAuthModel;
        });
    }
}
