// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeId;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Model for API authentication for all GCP kind connectors.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = "type", defaultImpl = GcpAuthModel.class, visible = true)
@JsonTypeName("GCP")
@Fluent
public final class GcpAuthModel extends CcpAuthConfig {
    /*
     * The auth type
     */
    @JsonTypeId
    @JsonProperty(value = "type", required = true)
    private CcpAuthType type = CcpAuthType.GCP;

    /*
     * GCP Service Account Email
     */
    @JsonProperty(value = "serviceAccountEmail", required = true)
    private String serviceAccountEmail;

    /*
     * GCP Project Number
     */
    @JsonProperty(value = "projectNumber", required = true)
    private String projectNumber;

    /*
     * GCP Workload Identity Provider ID
     */
    @JsonProperty(value = "workloadIdentityProviderId", required = true)
    private String workloadIdentityProviderId;

    /**
     * Creates an instance of GcpAuthModel class.
     */
    public GcpAuthModel() {
    }

    /**
     * Get the type property: The auth type.
     * 
     * @return the type value.
     */
    @Override
    public CcpAuthType type() {
        return this.type;
    }

    /**
     * Get the serviceAccountEmail property: GCP Service Account Email.
     * 
     * @return the serviceAccountEmail value.
     */
    public String serviceAccountEmail() {
        return this.serviceAccountEmail;
    }

    /**
     * Set the serviceAccountEmail property: GCP Service Account Email.
     * 
     * @param serviceAccountEmail the serviceAccountEmail value to set.
     * @return the GcpAuthModel object itself.
     */
    public GcpAuthModel withServiceAccountEmail(String serviceAccountEmail) {
        this.serviceAccountEmail = serviceAccountEmail;
        return this;
    }

    /**
     * Get the projectNumber property: GCP Project Number.
     * 
     * @return the projectNumber value.
     */
    public String projectNumber() {
        return this.projectNumber;
    }

    /**
     * Set the projectNumber property: GCP Project Number.
     * 
     * @param projectNumber the projectNumber value to set.
     * @return the GcpAuthModel object itself.
     */
    public GcpAuthModel withProjectNumber(String projectNumber) {
        this.projectNumber = projectNumber;
        return this;
    }

    /**
     * Get the workloadIdentityProviderId property: GCP Workload Identity Provider ID.
     * 
     * @return the workloadIdentityProviderId value.
     */
    public String workloadIdentityProviderId() {
        return this.workloadIdentityProviderId;
    }

    /**
     * Set the workloadIdentityProviderId property: GCP Workload Identity Provider ID.
     * 
     * @param workloadIdentityProviderId the workloadIdentityProviderId value to set.
     * @return the GcpAuthModel object itself.
     */
    public GcpAuthModel withWorkloadIdentityProviderId(String workloadIdentityProviderId) {
        this.workloadIdentityProviderId = workloadIdentityProviderId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (serviceAccountEmail() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property serviceAccountEmail in model GcpAuthModel"));
        }
        if (projectNumber() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property projectNumber in model GcpAuthModel"));
        }
        if (workloadIdentityProviderId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property workloadIdentityProviderId in model GcpAuthModel"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(GcpAuthModel.class);
}
