// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.securityinsights.models.Flag;
import com.azure.resourcemanager.securityinsights.models.MetadataAuthor;
import com.azure.resourcemanager.securityinsights.models.MetadataCategories;
import com.azure.resourcemanager.securityinsights.models.MetadataDependencies;
import com.azure.resourcemanager.securityinsights.models.MetadataSource;
import com.azure.resourcemanager.securityinsights.models.MetadataSupport;
import com.azure.resourcemanager.securityinsights.models.PackageBaseProperties;
import com.azure.resourcemanager.securityinsights.models.PackageKind;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.LocalDate;
import java.util.List;

/**
 * Describes package properties.
 */
@Fluent
public final class ProductPackageProperties extends PackageBaseProperties {
    /*
     * The version of the installed package, null or absent means not installed.
     */
    @JsonProperty(value = "installedVersion")
    private String installedVersion;

    /*
     * The metadata resource id.
     */
    @JsonProperty(value = "metadataResourceId")
    private String metadataResourceId;

    /*
     * The json of the ARM template to deploy. Expandable.
     */
    @JsonProperty(value = "packagedContent")
    private Object packagedContent;

    /**
     * Creates an instance of ProductPackageProperties class.
     */
    public ProductPackageProperties() {
    }

    /**
     * Get the installedVersion property: The version of the installed package, null or absent means not installed.
     * 
     * @return the installedVersion value.
     */
    public String installedVersion() {
        return this.installedVersion;
    }

    /**
     * Set the installedVersion property: The version of the installed package, null or absent means not installed.
     * 
     * @param installedVersion the installedVersion value to set.
     * @return the ProductPackageProperties object itself.
     */
    public ProductPackageProperties withInstalledVersion(String installedVersion) {
        this.installedVersion = installedVersion;
        return this;
    }

    /**
     * Get the metadataResourceId property: The metadata resource id.
     * 
     * @return the metadataResourceId value.
     */
    public String metadataResourceId() {
        return this.metadataResourceId;
    }

    /**
     * Set the metadataResourceId property: The metadata resource id.
     * 
     * @param metadataResourceId the metadataResourceId value to set.
     * @return the ProductPackageProperties object itself.
     */
    public ProductPackageProperties withMetadataResourceId(String metadataResourceId) {
        this.metadataResourceId = metadataResourceId;
        return this;
    }

    /**
     * Get the packagedContent property: The json of the ARM template to deploy. Expandable.
     * 
     * @return the packagedContent value.
     */
    public Object packagedContent() {
        return this.packagedContent;
    }

    /**
     * Set the packagedContent property: The json of the ARM template to deploy. Expandable.
     * 
     * @param packagedContent the packagedContent value to set.
     * @return the ProductPackageProperties object itself.
     */
    public ProductPackageProperties withPackagedContent(Object packagedContent) {
        this.packagedContent = packagedContent;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProductPackageProperties withContentId(String contentId) {
        super.withContentId(contentId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProductPackageProperties withContentProductId(String contentProductId) {
        super.withContentProductId(contentProductId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProductPackageProperties withContentKind(PackageKind contentKind) {
        super.withContentKind(contentKind);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProductPackageProperties withContentSchemaVersion(String contentSchemaVersion) {
        super.withContentSchemaVersion(contentSchemaVersion);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProductPackageProperties withIsNew(Flag isNew) {
        super.withIsNew(isNew);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProductPackageProperties withIsPreview(Flag isPreview) {
        super.withIsPreview(isPreview);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProductPackageProperties withIsFeatured(Flag isFeatured) {
        super.withIsFeatured(isFeatured);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProductPackageProperties withIsDeprecated(Flag isDeprecated) {
        super.withIsDeprecated(isDeprecated);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProductPackageProperties withVersion(String version) {
        super.withVersion(version);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProductPackageProperties withDisplayName(String displayName) {
        super.withDisplayName(displayName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProductPackageProperties withDescription(String description) {
        super.withDescription(description);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProductPackageProperties withPublisherDisplayName(String publisherDisplayName) {
        super.withPublisherDisplayName(publisherDisplayName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProductPackageProperties withSource(MetadataSource source) {
        super.withSource(source);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProductPackageProperties withAuthor(MetadataAuthor author) {
        super.withAuthor(author);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProductPackageProperties withSupport(MetadataSupport support) {
        super.withSupport(support);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProductPackageProperties withDependencies(MetadataDependencies dependencies) {
        super.withDependencies(dependencies);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProductPackageProperties withProviders(List<String> providers) {
        super.withProviders(providers);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProductPackageProperties withFirstPublishDate(LocalDate firstPublishDate) {
        super.withFirstPublishDate(firstPublishDate);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProductPackageProperties withLastPublishDate(LocalDate lastPublishDate) {
        super.withLastPublishDate(lastPublishDate);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProductPackageProperties withCategories(MetadataCategories categories) {
        super.withCategories(categories);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProductPackageProperties withThreatAnalysisTactics(List<String> threatAnalysisTactics) {
        super.withThreatAnalysisTactics(threatAnalysisTactics);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProductPackageProperties withThreatAnalysisTechniques(List<String> threatAnalysisTechniques) {
        super.withThreatAnalysisTechniques(threatAnalysisTechniques);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProductPackageProperties withIcon(String icon) {
        super.withIcon(icon);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }
}
