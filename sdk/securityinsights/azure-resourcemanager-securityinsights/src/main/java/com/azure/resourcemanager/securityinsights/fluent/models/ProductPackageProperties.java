// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.securityinsights.models.Flag;
import com.azure.resourcemanager.securityinsights.models.MetadataAuthor;
import com.azure.resourcemanager.securityinsights.models.MetadataCategories;
import com.azure.resourcemanager.securityinsights.models.MetadataDependencies;
import com.azure.resourcemanager.securityinsights.models.MetadataSource;
import com.azure.resourcemanager.securityinsights.models.MetadataSupport;
import com.azure.resourcemanager.securityinsights.models.PackageBaseProperties;
import com.azure.resourcemanager.securityinsights.models.PackageKind;
import java.io.IOException;
import java.time.LocalDate;
import java.util.List;
import java.util.Objects;

/**
 * Describes package properties.
 */
@Fluent
public final class ProductPackageProperties extends PackageBaseProperties {
    /*
     * The version of the installed package, null or absent means not installed.
     */
    private String installedVersion;

    /*
     * The metadata resource id.
     */
    private String metadataResourceId;

    /*
     * The json of the ARM template to deploy. Expandable.
     */
    private Object packagedContent;

    /**
     * Creates an instance of ProductPackageProperties class.
     */
    public ProductPackageProperties() {
    }

    /**
     * Get the installedVersion property: The version of the installed package, null or absent means not installed.
     * 
     * @return the installedVersion value.
     */
    public String installedVersion() {
        return this.installedVersion;
    }

    /**
     * Set the installedVersion property: The version of the installed package, null or absent means not installed.
     * 
     * @param installedVersion the installedVersion value to set.
     * @return the ProductPackageProperties object itself.
     */
    public ProductPackageProperties withInstalledVersion(String installedVersion) {
        this.installedVersion = installedVersion;
        return this;
    }

    /**
     * Get the metadataResourceId property: The metadata resource id.
     * 
     * @return the metadataResourceId value.
     */
    public String metadataResourceId() {
        return this.metadataResourceId;
    }

    /**
     * Set the metadataResourceId property: The metadata resource id.
     * 
     * @param metadataResourceId the metadataResourceId value to set.
     * @return the ProductPackageProperties object itself.
     */
    public ProductPackageProperties withMetadataResourceId(String metadataResourceId) {
        this.metadataResourceId = metadataResourceId;
        return this;
    }

    /**
     * Get the packagedContent property: The json of the ARM template to deploy. Expandable.
     * 
     * @return the packagedContent value.
     */
    public Object packagedContent() {
        return this.packagedContent;
    }

    /**
     * Set the packagedContent property: The json of the ARM template to deploy. Expandable.
     * 
     * @param packagedContent the packagedContent value to set.
     * @return the ProductPackageProperties object itself.
     */
    public ProductPackageProperties withPackagedContent(Object packagedContent) {
        this.packagedContent = packagedContent;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProductPackageProperties withContentId(String contentId) {
        super.withContentId(contentId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProductPackageProperties withContentProductId(String contentProductId) {
        super.withContentProductId(contentProductId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProductPackageProperties withContentKind(PackageKind contentKind) {
        super.withContentKind(contentKind);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProductPackageProperties withContentSchemaVersion(String contentSchemaVersion) {
        super.withContentSchemaVersion(contentSchemaVersion);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProductPackageProperties withIsNew(Flag isNew) {
        super.withIsNew(isNew);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProductPackageProperties withIsPreview(Flag isPreview) {
        super.withIsPreview(isPreview);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProductPackageProperties withIsFeatured(Flag isFeatured) {
        super.withIsFeatured(isFeatured);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProductPackageProperties withIsDeprecated(Flag isDeprecated) {
        super.withIsDeprecated(isDeprecated);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProductPackageProperties withVersion(String version) {
        super.withVersion(version);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProductPackageProperties withDisplayName(String displayName) {
        super.withDisplayName(displayName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProductPackageProperties withDescription(String description) {
        super.withDescription(description);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProductPackageProperties withPublisherDisplayName(String publisherDisplayName) {
        super.withPublisherDisplayName(publisherDisplayName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProductPackageProperties withSource(MetadataSource source) {
        super.withSource(source);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProductPackageProperties withAuthor(MetadataAuthor author) {
        super.withAuthor(author);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProductPackageProperties withSupport(MetadataSupport support) {
        super.withSupport(support);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProductPackageProperties withDependencies(MetadataDependencies dependencies) {
        super.withDependencies(dependencies);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProductPackageProperties withProviders(List<String> providers) {
        super.withProviders(providers);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProductPackageProperties withFirstPublishDate(LocalDate firstPublishDate) {
        super.withFirstPublishDate(firstPublishDate);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProductPackageProperties withLastPublishDate(LocalDate lastPublishDate) {
        super.withLastPublishDate(lastPublishDate);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProductPackageProperties withCategories(MetadataCategories categories) {
        super.withCategories(categories);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProductPackageProperties withThreatAnalysisTactics(List<String> threatAnalysisTactics) {
        super.withThreatAnalysisTactics(threatAnalysisTactics);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProductPackageProperties withThreatAnalysisTechniques(List<String> threatAnalysisTechniques) {
        super.withThreatAnalysisTechniques(threatAnalysisTechniques);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProductPackageProperties withIcon(String icon) {
        super.withIcon(icon);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (source() != null) {
            source().validate();
        }
        if (author() != null) {
            author().validate();
        }
        if (support() != null) {
            support().validate();
        }
        if (dependencies() != null) {
            dependencies().validate();
        }
        if (categories() != null) {
            categories().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("contentId", contentId());
        jsonWriter.writeStringField("contentProductId", contentProductId());
        jsonWriter.writeStringField("contentKind", contentKind() == null ? null : contentKind().toString());
        jsonWriter.writeStringField("contentSchemaVersion", contentSchemaVersion());
        jsonWriter.writeStringField("isNew", isNew() == null ? null : isNew().toString());
        jsonWriter.writeStringField("isPreview", isPreview() == null ? null : isPreview().toString());
        jsonWriter.writeStringField("isFeatured", isFeatured() == null ? null : isFeatured().toString());
        jsonWriter.writeStringField("isDeprecated", isDeprecated() == null ? null : isDeprecated().toString());
        jsonWriter.writeStringField("version", version());
        jsonWriter.writeStringField("displayName", displayName());
        jsonWriter.writeStringField("description", description());
        jsonWriter.writeStringField("publisherDisplayName", publisherDisplayName());
        jsonWriter.writeJsonField("source", source());
        jsonWriter.writeJsonField("author", author());
        jsonWriter.writeJsonField("support", support());
        jsonWriter.writeJsonField("dependencies", dependencies());
        jsonWriter.writeArrayField("providers", providers(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("firstPublishDate", Objects.toString(firstPublishDate(), null));
        jsonWriter.writeStringField("lastPublishDate", Objects.toString(lastPublishDate(), null));
        jsonWriter.writeJsonField("categories", categories());
        jsonWriter.writeArrayField("threatAnalysisTactics", threatAnalysisTactics(),
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("threatAnalysisTechniques", threatAnalysisTechniques(),
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("icon", icon());
        jsonWriter.writeStringField("installedVersion", this.installedVersion);
        jsonWriter.writeStringField("metadataResourceId", this.metadataResourceId);
        jsonWriter.writeUntypedField("packagedContent", this.packagedContent);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ProductPackageProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ProductPackageProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ProductPackageProperties.
     */
    public static ProductPackageProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ProductPackageProperties deserializedProductPackageProperties = new ProductPackageProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("contentId".equals(fieldName)) {
                    deserializedProductPackageProperties.withContentId(reader.getString());
                } else if ("contentProductId".equals(fieldName)) {
                    deserializedProductPackageProperties.withContentProductId(reader.getString());
                } else if ("contentKind".equals(fieldName)) {
                    deserializedProductPackageProperties.withContentKind(PackageKind.fromString(reader.getString()));
                } else if ("contentSchemaVersion".equals(fieldName)) {
                    deserializedProductPackageProperties.withContentSchemaVersion(reader.getString());
                } else if ("isNew".equals(fieldName)) {
                    deserializedProductPackageProperties.withIsNew(Flag.fromString(reader.getString()));
                } else if ("isPreview".equals(fieldName)) {
                    deserializedProductPackageProperties.withIsPreview(Flag.fromString(reader.getString()));
                } else if ("isFeatured".equals(fieldName)) {
                    deserializedProductPackageProperties.withIsFeatured(Flag.fromString(reader.getString()));
                } else if ("isDeprecated".equals(fieldName)) {
                    deserializedProductPackageProperties.withIsDeprecated(Flag.fromString(reader.getString()));
                } else if ("version".equals(fieldName)) {
                    deserializedProductPackageProperties.withVersion(reader.getString());
                } else if ("displayName".equals(fieldName)) {
                    deserializedProductPackageProperties.withDisplayName(reader.getString());
                } else if ("description".equals(fieldName)) {
                    deserializedProductPackageProperties.withDescription(reader.getString());
                } else if ("publisherDisplayName".equals(fieldName)) {
                    deserializedProductPackageProperties.withPublisherDisplayName(reader.getString());
                } else if ("source".equals(fieldName)) {
                    deserializedProductPackageProperties.withSource(MetadataSource.fromJson(reader));
                } else if ("author".equals(fieldName)) {
                    deserializedProductPackageProperties.withAuthor(MetadataAuthor.fromJson(reader));
                } else if ("support".equals(fieldName)) {
                    deserializedProductPackageProperties.withSupport(MetadataSupport.fromJson(reader));
                } else if ("dependencies".equals(fieldName)) {
                    deserializedProductPackageProperties.withDependencies(MetadataDependencies.fromJson(reader));
                } else if ("providers".equals(fieldName)) {
                    List<String> providers = reader.readArray(reader1 -> reader1.getString());
                    deserializedProductPackageProperties.withProviders(providers);
                } else if ("firstPublishDate".equals(fieldName)) {
                    deserializedProductPackageProperties.withFirstPublishDate(
                        reader.getNullable(nonNullReader -> LocalDate.parse(nonNullReader.getString())));
                } else if ("lastPublishDate".equals(fieldName)) {
                    deserializedProductPackageProperties.withLastPublishDate(
                        reader.getNullable(nonNullReader -> LocalDate.parse(nonNullReader.getString())));
                } else if ("categories".equals(fieldName)) {
                    deserializedProductPackageProperties.withCategories(MetadataCategories.fromJson(reader));
                } else if ("threatAnalysisTactics".equals(fieldName)) {
                    List<String> threatAnalysisTactics = reader.readArray(reader1 -> reader1.getString());
                    deserializedProductPackageProperties.withThreatAnalysisTactics(threatAnalysisTactics);
                } else if ("threatAnalysisTechniques".equals(fieldName)) {
                    List<String> threatAnalysisTechniques = reader.readArray(reader1 -> reader1.getString());
                    deserializedProductPackageProperties.withThreatAnalysisTechniques(threatAnalysisTechniques);
                } else if ("icon".equals(fieldName)) {
                    deserializedProductPackageProperties.withIcon(reader.getString());
                } else if ("installedVersion".equals(fieldName)) {
                    deserializedProductPackageProperties.installedVersion = reader.getString();
                } else if ("metadataResourceId".equals(fieldName)) {
                    deserializedProductPackageProperties.metadataResourceId = reader.getString();
                } else if ("packagedContent".equals(fieldName)) {
                    deserializedProductPackageProperties.packagedContent = reader.readUntyped();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedProductPackageProperties;
        });
    }
}
