// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.securityinsights.models.AttackTactic;
import com.azure.resourcemanager.securityinsights.models.ProvisioningState;
import com.azure.resourcemanager.securityinsights.models.ResourceWithEtag;
import com.azure.resourcemanager.securityinsights.models.SummaryStatus;
import com.azure.resourcemanager.securityinsights.models.Type;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/** Represents a Summary in Azure Security Insights. */
@Fluent
public final class SummaryInner extends ResourceWithEtag {
    /*
     * Summary properties
     */
    @JsonProperty(value = "properties")
    private SummaryProperties innerProperties;

    /** Creates an instance of SummaryInner class. */
    public SummaryInner() {
    }

    /**
     * Get the innerProperties property: Summary properties.
     *
     * @return the innerProperties value.
     */
    private SummaryProperties innerProperties() {
        return this.innerProperties;
    }

    /** {@inheritDoc} */
    @Override
    public SummaryInner withEtag(String etag) {
        super.withEtag(etag);
        return this;
    }

    /**
     * Get the summaryId property: The ID (a GUID) of the summary.
     *
     * @return the summaryId value.
     */
    public String summaryId() {
        return this.innerProperties() == null ? null : this.innerProperties().summaryId();
    }

    /**
     * Set the summaryId property: The ID (a GUID) of the summary.
     *
     * @param summaryId the summaryId value to set.
     * @return the SummaryInner object itself.
     */
    public SummaryInner withSummaryId(String summaryId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SummaryProperties();
        }
        this.innerProperties().withSummaryId(summaryId);
        return this;
    }

    /**
     * Get the summaryName property: The name of the summary.
     *
     * @return the summaryName value.
     */
    public String summaryName() {
        return this.innerProperties() == null ? null : this.innerProperties().summaryName();
    }

    /**
     * Set the summaryName property: The name of the summary.
     *
     * @param summaryName the summaryName value to set.
     * @return the SummaryInner object itself.
     */
    public SummaryInner withSummaryName(String summaryName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SummaryProperties();
        }
        this.innerProperties().withSummaryName(summaryName);
        return this;
    }

    /**
     * Get the sourceInfo property: The source info for the summary.
     *
     * @return the sourceInfo value.
     */
    public Map<String, String> sourceInfo() {
        return this.innerProperties() == null ? null : this.innerProperties().sourceInfo();
    }

    /**
     * Set the sourceInfo property: The source info for the summary.
     *
     * @param sourceInfo the sourceInfo value to set.
     * @return the SummaryInner object itself.
     */
    public SummaryInner withSourceInfo(Map<String, String> sourceInfo) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SummaryProperties();
        }
        this.innerProperties().withSourceInfo(sourceInfo);
        return this;
    }

    /**
     * Get the searchKey property: The search key is used to optimize query performance when using summaries for joins
     * with other data. For example, enable a column with IP addresses to be the designated SearchKey field, then use
     * this field as the key field when joining to other event data by IP address.
     *
     * @return the searchKey value.
     */
    public String searchKey() {
        return this.innerProperties() == null ? null : this.innerProperties().searchKey();
    }

    /**
     * Set the searchKey property: The search key is used to optimize query performance when using summaries for joins
     * with other data. For example, enable a column with IP addresses to be the designated SearchKey field, then use
     * this field as the key field when joining to other event data by IP address.
     *
     * @param searchKey the searchKey value to set.
     * @return the SummaryInner object itself.
     */
    public SummaryInner withSearchKey(String searchKey) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SummaryProperties();
        }
        this.innerProperties().withSearchKey(searchKey);
        return this;
    }

    /**
     * Get the tactics property: A list of relevant MITRE attacks.
     *
     * @return the tactics value.
     */
    public List<AttackTactic> tactics() {
        return this.innerProperties() == null ? null : this.innerProperties().tactics();
    }

    /**
     * Set the tactics property: A list of relevant MITRE attacks.
     *
     * @param tactics the tactics value to set.
     * @return the SummaryInner object itself.
     */
    public SummaryInner withTactics(List<AttackTactic> tactics) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SummaryProperties();
        }
        this.innerProperties().withTactics(tactics);
        return this;
    }

    /**
     * Get the techniques property: The list of techniques for summary.
     *
     * @return the techniques value.
     */
    public List<String> techniques() {
        return this.innerProperties() == null ? null : this.innerProperties().techniques();
    }

    /**
     * Set the techniques property: The list of techniques for summary.
     *
     * @param techniques the techniques value to set.
     * @return the SummaryInner object itself.
     */
    public SummaryInner withTechniques(List<String> techniques) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SummaryProperties();
        }
        this.innerProperties().withTechniques(techniques);
        return this;
    }

    /**
     * Get the relationName property: The relation name for the summary.
     *
     * @return the relationName value.
     */
    public String relationName() {
        return this.innerProperties() == null ? null : this.innerProperties().relationName();
    }

    /**
     * Set the relationName property: The relation name for the summary.
     *
     * @param relationName the relationName value to set.
     * @return the SummaryInner object itself.
     */
    public SummaryInner withRelationName(String relationName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SummaryProperties();
        }
        this.innerProperties().withRelationName(relationName);
        return this;
    }

    /**
     * Get the relationId property: The relation ID (GUID) for the summary.
     *
     * @return the relationId value.
     */
    public String relationId() {
        return this.innerProperties() == null ? null : this.innerProperties().relationId();
    }

    /**
     * Set the relationId property: The relation ID (GUID) for the summary.
     *
     * @param relationId the relationId value to set.
     * @return the SummaryInner object itself.
     */
    public SummaryInner withRelationId(String relationId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SummaryProperties();
        }
        this.innerProperties().withRelationId(relationId);
        return this;
    }

    /**
     * Get the summaryDescription property: The description for the summary.
     *
     * @return the summaryDescription value.
     */
    public String summaryDescription() {
        return this.innerProperties() == null ? null : this.innerProperties().summaryDescription();
    }

    /**
     * Set the summaryDescription property: The description for the summary.
     *
     * @param summaryDescription the summaryDescription value to set.
     * @return the SummaryInner object itself.
     */
    public SummaryInner withSummaryDescription(String summaryDescription) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SummaryProperties();
        }
        this.innerProperties().withSummaryDescription(summaryDescription);
        return this;
    }

    /**
     * Get the rawContent property: The raw content that represents to summary items to create.
     *
     * @return the rawContent value.
     */
    public String rawContent() {
        return this.innerProperties() == null ? null : this.innerProperties().rawContent();
    }

    /**
     * Set the rawContent property: The raw content that represents to summary items to create.
     *
     * @param rawContent the rawContent value to set.
     * @return the SummaryInner object itself.
     */
    public SummaryInner withRawContent(String rawContent) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SummaryProperties();
        }
        this.innerProperties().withRawContent(rawContent);
        return this;
    }

    /**
     * Get the type property: The type of the summary.
     *
     * @return the type value.
     */
    public Type typePropertiesType() {
        return this.innerProperties() == null ? null : this.innerProperties().type();
    }

    /**
     * Set the type property: The type of the summary.
     *
     * @param type the type value to set.
     * @return the SummaryInner object itself.
     */
    public SummaryInner withTypePropertiesType(Type type) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SummaryProperties();
        }
        this.innerProperties().withType(type);
        return this;
    }

    /**
     * Get the tenantId property: The tenantId where the summary belongs to.
     *
     * @return the tenantId value.
     */
    public String tenantId() {
        return this.innerProperties() == null ? null : this.innerProperties().tenantId();
    }

    /**
     * Set the tenantId property: The tenantId where the summary belongs to.
     *
     * @param tenantId the tenantId value to set.
     * @return the SummaryInner object itself.
     */
    public SummaryInner withTenantId(String tenantId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SummaryProperties();
        }
        this.innerProperties().withTenantId(tenantId);
        return this;
    }

    /**
     * Get the summaryStatus property: The status of the Summary : Active, Deleted.
     *
     * @return the summaryStatus value.
     */
    public SummaryStatus summaryStatus() {
        return this.innerProperties() == null ? null : this.innerProperties().summaryStatus();
    }

    /**
     * Set the summaryStatus property: The status of the Summary : Active, Deleted.
     *
     * @param summaryStatus the summaryStatus value to set.
     * @return the SummaryInner object itself.
     */
    public SummaryInner withSummaryStatus(SummaryStatus summaryStatus) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SummaryProperties();
        }
        this.innerProperties().withSummaryStatus(summaryStatus);
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning state of the Dynamic Summary resource.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
