// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.implementation;

import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.securityinsights.fluent.models.IncidentCreationRuleInner;
import com.azure.resourcemanager.securityinsights.models.ClientInfo;
import com.azure.resourcemanager.securityinsights.models.IncidentCreationRule;
import com.azure.resourcemanager.securityinsights.models.IncidentCreationRuleCondition;
import com.azure.resourcemanager.securityinsights.models.IncidentCreationRuleGroupingConfiguration;
import java.time.OffsetDateTime;
import java.util.Collections;
import java.util.List;

public final class IncidentCreationRuleImpl
    implements IncidentCreationRule, IncidentCreationRule.Definition, IncidentCreationRule.Update {
    private IncidentCreationRuleInner innerObject;

    private final com.azure.resourcemanager.securityinsights.SecurityInsightsManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String etag() {
        return this.innerModel().etag();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public String displayName() {
        return this.innerModel().displayName();
    }

    public String description() {
        return this.innerModel().description();
    }

    public int order() {
        return this.innerModel().order();
    }

    public List<IncidentCreationRuleCondition> conditions() {
        List<IncidentCreationRuleCondition> inner = this.innerModel().conditions();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public boolean createIncident() {
        return this.innerModel().createIncident();
    }

    public IncidentCreationRuleGroupingConfiguration groupingConfiguration() {
        return this.innerModel().groupingConfiguration();
    }

    public boolean enabled() {
        return this.innerModel().enabled();
    }

    public OffsetDateTime lastModifiedTimeUtc() {
        return this.innerModel().lastModifiedTimeUtc();
    }

    public OffsetDateTime createdTimeUtc() {
        return this.innerModel().createdTimeUtc();
    }

    public ClientInfo lastModifiedBy() {
        return this.innerModel().lastModifiedBy();
    }

    public ClientInfo createdBy() {
        return this.innerModel().createdBy();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public IncidentCreationRuleInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.securityinsights.SecurityInsightsManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String workspaceName;

    private String incidentCreationRuleId;

    public IncidentCreationRuleImpl withExistingWorkspace(String resourceGroupName, String workspaceName) {
        this.resourceGroupName = resourceGroupName;
        this.workspaceName = workspaceName;
        return this;
    }

    public IncidentCreationRule create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getIncidentCreationRules()
                .createOrUpdateWithResponse(
                    resourceGroupName, workspaceName, incidentCreationRuleId, this.innerModel(), Context.NONE)
                .getValue();
        return this;
    }

    public IncidentCreationRule create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getIncidentCreationRules()
                .createOrUpdateWithResponse(
                    resourceGroupName, workspaceName, incidentCreationRuleId, this.innerModel(), context)
                .getValue();
        return this;
    }

    IncidentCreationRuleImpl(
        String name, com.azure.resourcemanager.securityinsights.SecurityInsightsManager serviceManager) {
        this.innerObject = new IncidentCreationRuleInner();
        this.serviceManager = serviceManager;
        this.incidentCreationRuleId = name;
    }

    public IncidentCreationRuleImpl update() {
        return this;
    }

    public IncidentCreationRule apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getIncidentCreationRules()
                .createOrUpdateWithResponse(
                    resourceGroupName, workspaceName, incidentCreationRuleId, this.innerModel(), Context.NONE)
                .getValue();
        return this;
    }

    public IncidentCreationRule apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getIncidentCreationRules()
                .createOrUpdateWithResponse(
                    resourceGroupName, workspaceName, incidentCreationRuleId, this.innerModel(), context)
                .getValue();
        return this;
    }

    IncidentCreationRuleImpl(
        IncidentCreationRuleInner innerObject,
        com.azure.resourcemanager.securityinsights.SecurityInsightsManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.workspaceName = Utils.getValueFromIdByName(innerObject.id(), "workspaces");
        this.incidentCreationRuleId = Utils.getValueFromIdByName(innerObject.id(), "incidentCreationRules");
    }

    public IncidentCreationRule refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getIncidentCreationRules()
                .getWithResponse(resourceGroupName, workspaceName, incidentCreationRuleId, Context.NONE)
                .getValue();
        return this;
    }

    public IncidentCreationRule refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getIncidentCreationRules()
                .getWithResponse(resourceGroupName, workspaceName, incidentCreationRuleId, context)
                .getValue();
        return this;
    }

    public IncidentCreationRuleImpl withDisplayName(String displayName) {
        this.innerModel().withDisplayName(displayName);
        return this;
    }

    public IncidentCreationRuleImpl withOrder(int order) {
        this.innerModel().withOrder(order);
        return this;
    }

    public IncidentCreationRuleImpl withCreateIncident(boolean createIncident) {
        this.innerModel().withCreateIncident(createIncident);
        return this;
    }

    public IncidentCreationRuleImpl withEnabled(boolean enabled) {
        this.innerModel().withEnabled(enabled);
        return this;
    }

    public IncidentCreationRuleImpl withEtag(String etag) {
        this.innerModel().withEtag(etag);
        return this;
    }

    public IncidentCreationRuleImpl withDescription(String description) {
        this.innerModel().withDescription(description);
        return this;
    }

    public IncidentCreationRuleImpl withConditions(List<IncidentCreationRuleCondition> conditions) {
        this.innerModel().withConditions(conditions);
        return this;
    }

    public IncidentCreationRuleImpl withGroupingConfiguration(
        IncidentCreationRuleGroupingConfiguration groupingConfiguration) {
        this.innerModel().withGroupingConfiguration(groupingConfiguration);
        return this;
    }

    public IncidentCreationRuleImpl withLastModifiedBy(ClientInfo lastModifiedBy) {
        this.innerModel().withLastModifiedBy(lastModifiedBy);
        return this;
    }

    public IncidentCreationRuleImpl withCreatedBy(ClientInfo createdBy) {
        this.innerModel().withCreatedBy(createdBy);
        return this;
    }
}
