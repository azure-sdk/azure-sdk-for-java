// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.securityinsights.models.WarningBody;
import java.io.IOException;

/**
 * Warning response structure.
 */
@Immutable
public final class WarningInner implements JsonSerializable<WarningInner> {
    /*
     * Warning data.
     */
    private WarningBody warning;

    /**
     * Creates an instance of WarningInner class.
     */
    public WarningInner() {
    }

    /**
     * Get the warning property: Warning data.
     * 
     * @return the warning value.
     */
    public WarningBody warning() {
        return this.warning;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (warning() != null) {
            warning().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WarningInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of WarningInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the WarningInner.
     */
    public static WarningInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WarningInner deserializedWarningInner = new WarningInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("warning".equals(fieldName)) {
                    deserializedWarningInner.warning = WarningBody.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedWarningInner;
        });
    }
}
