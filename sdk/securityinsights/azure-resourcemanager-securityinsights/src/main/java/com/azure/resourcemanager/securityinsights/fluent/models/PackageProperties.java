// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.securityinsights.models.Flag;
import com.azure.resourcemanager.securityinsights.models.MetadataAuthor;
import com.azure.resourcemanager.securityinsights.models.MetadataCategories;
import com.azure.resourcemanager.securityinsights.models.MetadataDependencies;
import com.azure.resourcemanager.securityinsights.models.MetadataSource;
import com.azure.resourcemanager.securityinsights.models.MetadataSupport;
import com.azure.resourcemanager.securityinsights.models.PackageBaseProperties;
import com.azure.resourcemanager.securityinsights.models.PackageKind;
import java.time.LocalDate;
import java.util.List;

/** Describes package properties. */
@Fluent
public final class PackageProperties extends PackageBaseProperties {
    /** Creates an instance of PackageProperties class. */
    public PackageProperties() {
    }

    /** {@inheritDoc} */
    @Override
    public PackageProperties withContentId(String contentId) {
        super.withContentId(contentId);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public PackageProperties withContentProductId(String contentProductId) {
        super.withContentProductId(contentProductId);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public PackageProperties withContentKind(PackageKind contentKind) {
        super.withContentKind(contentKind);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public PackageProperties withContentSchemaVersion(String contentSchemaVersion) {
        super.withContentSchemaVersion(contentSchemaVersion);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public PackageProperties withIsNew(Flag isNew) {
        super.withIsNew(isNew);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public PackageProperties withIsPreview(Flag isPreview) {
        super.withIsPreview(isPreview);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public PackageProperties withIsFeatured(Flag isFeatured) {
        super.withIsFeatured(isFeatured);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public PackageProperties withVersion(String version) {
        super.withVersion(version);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public PackageProperties withDisplayName(String displayName) {
        super.withDisplayName(displayName);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public PackageProperties withDescription(String description) {
        super.withDescription(description);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public PackageProperties withPublisherDisplayName(String publisherDisplayName) {
        super.withPublisherDisplayName(publisherDisplayName);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public PackageProperties withSource(MetadataSource source) {
        super.withSource(source);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public PackageProperties withAuthor(MetadataAuthor author) {
        super.withAuthor(author);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public PackageProperties withSupport(MetadataSupport support) {
        super.withSupport(support);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public PackageProperties withDependencies(MetadataDependencies dependencies) {
        super.withDependencies(dependencies);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public PackageProperties withProviders(List<String> providers) {
        super.withProviders(providers);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public PackageProperties withFirstPublishDate(LocalDate firstPublishDate) {
        super.withFirstPublishDate(firstPublishDate);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public PackageProperties withLastPublishDate(LocalDate lastPublishDate) {
        super.withLastPublishDate(lastPublishDate);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public PackageProperties withCategories(MetadataCategories categories) {
        super.withCategories(categories);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public PackageProperties withThreatAnalysisTactics(List<String> threatAnalysisTactics) {
        super.withThreatAnalysisTactics(threatAnalysisTactics);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public PackageProperties withThreatAnalysisTechniques(List<String> threatAnalysisTechniques) {
        super.withThreatAnalysisTechniques(threatAnalysisTechniques);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public PackageProperties withIcon(String icon) {
        super.withIcon(icon);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }
}
