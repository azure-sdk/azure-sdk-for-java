// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.securityinsights.models.Flag;
import com.azure.resourcemanager.securityinsights.models.MetadataAuthor;
import com.azure.resourcemanager.securityinsights.models.MetadataCategories;
import com.azure.resourcemanager.securityinsights.models.MetadataDependencies;
import com.azure.resourcemanager.securityinsights.models.MetadataSource;
import com.azure.resourcemanager.securityinsights.models.MetadataSupport;
import com.azure.resourcemanager.securityinsights.models.PackageBaseProperties;
import com.azure.resourcemanager.securityinsights.models.PackageKind;
import java.io.IOException;
import java.time.LocalDate;
import java.util.List;
import java.util.Objects;

/**
 * Describes package properties.
 */
@Fluent
public final class PackageProperties extends PackageBaseProperties {
    /**
     * Creates an instance of PackageProperties class.
     */
    public PackageProperties() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PackageProperties withContentId(String contentId) {
        super.withContentId(contentId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PackageProperties withContentProductId(String contentProductId) {
        super.withContentProductId(contentProductId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PackageProperties withContentKind(PackageKind contentKind) {
        super.withContentKind(contentKind);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PackageProperties withContentSchemaVersion(String contentSchemaVersion) {
        super.withContentSchemaVersion(contentSchemaVersion);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PackageProperties withIsNew(Flag isNew) {
        super.withIsNew(isNew);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PackageProperties withIsPreview(Flag isPreview) {
        super.withIsPreview(isPreview);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PackageProperties withIsFeatured(Flag isFeatured) {
        super.withIsFeatured(isFeatured);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PackageProperties withIsDeprecated(Flag isDeprecated) {
        super.withIsDeprecated(isDeprecated);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PackageProperties withVersion(String version) {
        super.withVersion(version);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PackageProperties withDisplayName(String displayName) {
        super.withDisplayName(displayName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PackageProperties withDescription(String description) {
        super.withDescription(description);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PackageProperties withPublisherDisplayName(String publisherDisplayName) {
        super.withPublisherDisplayName(publisherDisplayName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PackageProperties withSource(MetadataSource source) {
        super.withSource(source);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PackageProperties withAuthor(MetadataAuthor author) {
        super.withAuthor(author);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PackageProperties withSupport(MetadataSupport support) {
        super.withSupport(support);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PackageProperties withDependencies(MetadataDependencies dependencies) {
        super.withDependencies(dependencies);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PackageProperties withProviders(List<String> providers) {
        super.withProviders(providers);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PackageProperties withFirstPublishDate(LocalDate firstPublishDate) {
        super.withFirstPublishDate(firstPublishDate);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PackageProperties withLastPublishDate(LocalDate lastPublishDate) {
        super.withLastPublishDate(lastPublishDate);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PackageProperties withCategories(MetadataCategories categories) {
        super.withCategories(categories);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PackageProperties withThreatAnalysisTactics(List<String> threatAnalysisTactics) {
        super.withThreatAnalysisTactics(threatAnalysisTactics);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PackageProperties withThreatAnalysisTechniques(List<String> threatAnalysisTechniques) {
        super.withThreatAnalysisTechniques(threatAnalysisTechniques);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PackageProperties withIcon(String icon) {
        super.withIcon(icon);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (source() != null) {
            source().validate();
        }
        if (author() != null) {
            author().validate();
        }
        if (support() != null) {
            support().validate();
        }
        if (dependencies() != null) {
            dependencies().validate();
        }
        if (categories() != null) {
            categories().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("contentId", contentId());
        jsonWriter.writeStringField("contentProductId", contentProductId());
        jsonWriter.writeStringField("contentKind", contentKind() == null ? null : contentKind().toString());
        jsonWriter.writeStringField("contentSchemaVersion", contentSchemaVersion());
        jsonWriter.writeStringField("isNew", isNew() == null ? null : isNew().toString());
        jsonWriter.writeStringField("isPreview", isPreview() == null ? null : isPreview().toString());
        jsonWriter.writeStringField("isFeatured", isFeatured() == null ? null : isFeatured().toString());
        jsonWriter.writeStringField("isDeprecated", isDeprecated() == null ? null : isDeprecated().toString());
        jsonWriter.writeStringField("version", version());
        jsonWriter.writeStringField("displayName", displayName());
        jsonWriter.writeStringField("description", description());
        jsonWriter.writeStringField("publisherDisplayName", publisherDisplayName());
        jsonWriter.writeJsonField("source", source());
        jsonWriter.writeJsonField("author", author());
        jsonWriter.writeJsonField("support", support());
        jsonWriter.writeJsonField("dependencies", dependencies());
        jsonWriter.writeArrayField("providers", providers(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("firstPublishDate", Objects.toString(firstPublishDate(), null));
        jsonWriter.writeStringField("lastPublishDate", Objects.toString(lastPublishDate(), null));
        jsonWriter.writeJsonField("categories", categories());
        jsonWriter.writeArrayField("threatAnalysisTactics", threatAnalysisTactics(),
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("threatAnalysisTechniques", threatAnalysisTechniques(),
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("icon", icon());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PackageProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PackageProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the PackageProperties.
     */
    public static PackageProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PackageProperties deserializedPackageProperties = new PackageProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("contentId".equals(fieldName)) {
                    deserializedPackageProperties.withContentId(reader.getString());
                } else if ("contentProductId".equals(fieldName)) {
                    deserializedPackageProperties.withContentProductId(reader.getString());
                } else if ("contentKind".equals(fieldName)) {
                    deserializedPackageProperties.withContentKind(PackageKind.fromString(reader.getString()));
                } else if ("contentSchemaVersion".equals(fieldName)) {
                    deserializedPackageProperties.withContentSchemaVersion(reader.getString());
                } else if ("isNew".equals(fieldName)) {
                    deserializedPackageProperties.withIsNew(Flag.fromString(reader.getString()));
                } else if ("isPreview".equals(fieldName)) {
                    deserializedPackageProperties.withIsPreview(Flag.fromString(reader.getString()));
                } else if ("isFeatured".equals(fieldName)) {
                    deserializedPackageProperties.withIsFeatured(Flag.fromString(reader.getString()));
                } else if ("isDeprecated".equals(fieldName)) {
                    deserializedPackageProperties.withIsDeprecated(Flag.fromString(reader.getString()));
                } else if ("version".equals(fieldName)) {
                    deserializedPackageProperties.withVersion(reader.getString());
                } else if ("displayName".equals(fieldName)) {
                    deserializedPackageProperties.withDisplayName(reader.getString());
                } else if ("description".equals(fieldName)) {
                    deserializedPackageProperties.withDescription(reader.getString());
                } else if ("publisherDisplayName".equals(fieldName)) {
                    deserializedPackageProperties.withPublisherDisplayName(reader.getString());
                } else if ("source".equals(fieldName)) {
                    deserializedPackageProperties.withSource(MetadataSource.fromJson(reader));
                } else if ("author".equals(fieldName)) {
                    deserializedPackageProperties.withAuthor(MetadataAuthor.fromJson(reader));
                } else if ("support".equals(fieldName)) {
                    deserializedPackageProperties.withSupport(MetadataSupport.fromJson(reader));
                } else if ("dependencies".equals(fieldName)) {
                    deserializedPackageProperties.withDependencies(MetadataDependencies.fromJson(reader));
                } else if ("providers".equals(fieldName)) {
                    List<String> providers = reader.readArray(reader1 -> reader1.getString());
                    deserializedPackageProperties.withProviders(providers);
                } else if ("firstPublishDate".equals(fieldName)) {
                    deserializedPackageProperties.withFirstPublishDate(
                        reader.getNullable(nonNullReader -> LocalDate.parse(nonNullReader.getString())));
                } else if ("lastPublishDate".equals(fieldName)) {
                    deserializedPackageProperties.withLastPublishDate(
                        reader.getNullable(nonNullReader -> LocalDate.parse(nonNullReader.getString())));
                } else if ("categories".equals(fieldName)) {
                    deserializedPackageProperties.withCategories(MetadataCategories.fromJson(reader));
                } else if ("threatAnalysisTactics".equals(fieldName)) {
                    List<String> threatAnalysisTactics = reader.readArray(reader1 -> reader1.getString());
                    deserializedPackageProperties.withThreatAnalysisTactics(threatAnalysisTactics);
                } else if ("threatAnalysisTechniques".equals(fieldName)) {
                    List<String> threatAnalysisTechniques = reader.readArray(reader1 -> reader1.getString());
                    deserializedPackageProperties.withThreatAnalysisTechniques(threatAnalysisTechniques);
                } else if ("icon".equals(fieldName)) {
                    deserializedPackageProperties.withIcon(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPackageProperties;
        });
    }
}
