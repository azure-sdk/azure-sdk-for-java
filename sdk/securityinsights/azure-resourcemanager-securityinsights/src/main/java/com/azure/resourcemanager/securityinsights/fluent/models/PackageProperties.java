// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.securityinsights.models.ContentMetadataAuthor;
import com.azure.resourcemanager.securityinsights.models.ContentMetadataCategories;
import com.azure.resourcemanager.securityinsights.models.ContentMetadataDependencies;
import com.azure.resourcemanager.securityinsights.models.ContentMetadataSource;
import com.azure.resourcemanager.securityinsights.models.ContentMetadataSupport;
import com.azure.resourcemanager.securityinsights.models.Flag;
import com.azure.resourcemanager.securityinsights.models.PackageKind;
import com.azure.resourcemanager.securityinsights.models.PackagePropertiesPackageItems;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.LocalDate;
import java.util.List;

/** Describes package properties. */
@Fluent
public final class PackageProperties {
    /*
     * The package id
     */
    @JsonProperty(value = "packageId", required = true)
    private String packageId;

    /*
     * The package kind
     */
    @JsonProperty(value = "packageKind", required = true)
    private PackageKind packageKind;

    /*
     * The version of the installed package, null or absent means not installed.
     */
    @JsonProperty(value = "installedVersion")
    private String installedVersion;

    /*
     * Flag indicates if this is a newly published package.
     */
    @JsonProperty(value = "isNew")
    private Flag isNew;

    /*
     * Flag indicates if this package is in preview.
     */
    @JsonProperty(value = "isPreview")
    private Flag isPreview;

    /*
     * Flag indicates if this package is among the featured list.
     */
    @JsonProperty(value = "isFeatured")
    private Flag isFeatured;

    /*
     * the latest version number of the package
     */
    @JsonProperty(value = "version", required = true)
    private String version;

    /*
     * The display name of the package
     */
    @JsonProperty(value = "displayName", required = true)
    private String displayName;

    /*
     * The description of the package
     */
    @JsonProperty(value = "description")
    private String description;

    /*
     * The source of the package
     */
    @JsonProperty(value = "source")
    private ContentMetadataSource source;

    /*
     * The author of the package
     */
    @JsonProperty(value = "author")
    private ContentMetadataAuthor author;

    /*
     * The support tier of the package
     */
    @JsonProperty(value = "support")
    private ContentMetadataSupport support;

    /*
     * The support tier of the package
     */
    @JsonProperty(value = "dependencies")
    private ContentMetadataDependencies dependencies;

    /*
     * Providers for the package item
     */
    @JsonProperty(value = "providers")
    private List<String> providers;

    /*
     * first publish date package item
     */
    @JsonProperty(value = "firstPublishDate")
    private LocalDate firstPublishDate;

    /*
     * last publish date for the package item
     */
    @JsonProperty(value = "lastPublishDate")
    private LocalDate lastPublishDate;

    /*
     * The categories of the package
     */
    @JsonProperty(value = "categories")
    private ContentMetadataCategories categories;

    /*
     * the tactics the resource covers
     */
    @JsonProperty(value = "threatAnalysisTactics")
    private List<String> threatAnalysisTactics;

    /*
     * the techniques the resource covers, these have to be aligned with the tactics being used
     */
    @JsonProperty(value = "threatAnalyticsTechniques")
    private List<String> threatAnalyticsTechniques;

    /*
     * the icon identifier. this id can later be fetched from the content metadata
     */
    @JsonProperty(value = "icon")
    private String icon;

    /*
     * The JSON object of the package items.
     */
    @JsonProperty(value = "packageItems")
    private PackagePropertiesPackageItems packageItems;

    /** Creates an instance of PackageProperties class. */
    public PackageProperties() {
    }

    /**
     * Get the packageId property: The package id.
     *
     * @return the packageId value.
     */
    public String packageId() {
        return this.packageId;
    }

    /**
     * Set the packageId property: The package id.
     *
     * @param packageId the packageId value to set.
     * @return the PackageProperties object itself.
     */
    public PackageProperties withPackageId(String packageId) {
        this.packageId = packageId;
        return this;
    }

    /**
     * Get the packageKind property: The package kind.
     *
     * @return the packageKind value.
     */
    public PackageKind packageKind() {
        return this.packageKind;
    }

    /**
     * Set the packageKind property: The package kind.
     *
     * @param packageKind the packageKind value to set.
     * @return the PackageProperties object itself.
     */
    public PackageProperties withPackageKind(PackageKind packageKind) {
        this.packageKind = packageKind;
        return this;
    }

    /**
     * Get the installedVersion property: The version of the installed package, null or absent means not installed.
     *
     * @return the installedVersion value.
     */
    public String installedVersion() {
        return this.installedVersion;
    }

    /**
     * Set the installedVersion property: The version of the installed package, null or absent means not installed.
     *
     * @param installedVersion the installedVersion value to set.
     * @return the PackageProperties object itself.
     */
    public PackageProperties withInstalledVersion(String installedVersion) {
        this.installedVersion = installedVersion;
        return this;
    }

    /**
     * Get the isNew property: Flag indicates if this is a newly published package.
     *
     * @return the isNew value.
     */
    public Flag isNew() {
        return this.isNew;
    }

    /**
     * Set the isNew property: Flag indicates if this is a newly published package.
     *
     * @param isNew the isNew value to set.
     * @return the PackageProperties object itself.
     */
    public PackageProperties withIsNew(Flag isNew) {
        this.isNew = isNew;
        return this;
    }

    /**
     * Get the isPreview property: Flag indicates if this package is in preview.
     *
     * @return the isPreview value.
     */
    public Flag isPreview() {
        return this.isPreview;
    }

    /**
     * Set the isPreview property: Flag indicates if this package is in preview.
     *
     * @param isPreview the isPreview value to set.
     * @return the PackageProperties object itself.
     */
    public PackageProperties withIsPreview(Flag isPreview) {
        this.isPreview = isPreview;
        return this;
    }

    /**
     * Get the isFeatured property: Flag indicates if this package is among the featured list.
     *
     * @return the isFeatured value.
     */
    public Flag isFeatured() {
        return this.isFeatured;
    }

    /**
     * Set the isFeatured property: Flag indicates if this package is among the featured list.
     *
     * @param isFeatured the isFeatured value to set.
     * @return the PackageProperties object itself.
     */
    public PackageProperties withIsFeatured(Flag isFeatured) {
        this.isFeatured = isFeatured;
        return this;
    }

    /**
     * Get the version property: the latest version number of the package.
     *
     * @return the version value.
     */
    public String version() {
        return this.version;
    }

    /**
     * Set the version property: the latest version number of the package.
     *
     * @param version the version value to set.
     * @return the PackageProperties object itself.
     */
    public PackageProperties withVersion(String version) {
        this.version = version;
        return this;
    }

    /**
     * Get the displayName property: The display name of the package.
     *
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: The display name of the package.
     *
     * @param displayName the displayName value to set.
     * @return the PackageProperties object itself.
     */
    public PackageProperties withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the description property: The description of the package.
     *
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: The description of the package.
     *
     * @param description the description value to set.
     * @return the PackageProperties object itself.
     */
    public PackageProperties withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the source property: The source of the package.
     *
     * @return the source value.
     */
    public ContentMetadataSource source() {
        return this.source;
    }

    /**
     * Set the source property: The source of the package.
     *
     * @param source the source value to set.
     * @return the PackageProperties object itself.
     */
    public PackageProperties withSource(ContentMetadataSource source) {
        this.source = source;
        return this;
    }

    /**
     * Get the author property: The author of the package.
     *
     * @return the author value.
     */
    public ContentMetadataAuthor author() {
        return this.author;
    }

    /**
     * Set the author property: The author of the package.
     *
     * @param author the author value to set.
     * @return the PackageProperties object itself.
     */
    public PackageProperties withAuthor(ContentMetadataAuthor author) {
        this.author = author;
        return this;
    }

    /**
     * Get the support property: The support tier of the package.
     *
     * @return the support value.
     */
    public ContentMetadataSupport support() {
        return this.support;
    }

    /**
     * Set the support property: The support tier of the package.
     *
     * @param support the support value to set.
     * @return the PackageProperties object itself.
     */
    public PackageProperties withSupport(ContentMetadataSupport support) {
        this.support = support;
        return this;
    }

    /**
     * Get the dependencies property: The support tier of the package.
     *
     * @return the dependencies value.
     */
    public ContentMetadataDependencies dependencies() {
        return this.dependencies;
    }

    /**
     * Set the dependencies property: The support tier of the package.
     *
     * @param dependencies the dependencies value to set.
     * @return the PackageProperties object itself.
     */
    public PackageProperties withDependencies(ContentMetadataDependencies dependencies) {
        this.dependencies = dependencies;
        return this;
    }

    /**
     * Get the providers property: Providers for the package item.
     *
     * @return the providers value.
     */
    public List<String> providers() {
        return this.providers;
    }

    /**
     * Set the providers property: Providers for the package item.
     *
     * @param providers the providers value to set.
     * @return the PackageProperties object itself.
     */
    public PackageProperties withProviders(List<String> providers) {
        this.providers = providers;
        return this;
    }

    /**
     * Get the firstPublishDate property: first publish date package item.
     *
     * @return the firstPublishDate value.
     */
    public LocalDate firstPublishDate() {
        return this.firstPublishDate;
    }

    /**
     * Set the firstPublishDate property: first publish date package item.
     *
     * @param firstPublishDate the firstPublishDate value to set.
     * @return the PackageProperties object itself.
     */
    public PackageProperties withFirstPublishDate(LocalDate firstPublishDate) {
        this.firstPublishDate = firstPublishDate;
        return this;
    }

    /**
     * Get the lastPublishDate property: last publish date for the package item.
     *
     * @return the lastPublishDate value.
     */
    public LocalDate lastPublishDate() {
        return this.lastPublishDate;
    }

    /**
     * Set the lastPublishDate property: last publish date for the package item.
     *
     * @param lastPublishDate the lastPublishDate value to set.
     * @return the PackageProperties object itself.
     */
    public PackageProperties withLastPublishDate(LocalDate lastPublishDate) {
        this.lastPublishDate = lastPublishDate;
        return this;
    }

    /**
     * Get the categories property: The categories of the package.
     *
     * @return the categories value.
     */
    public ContentMetadataCategories categories() {
        return this.categories;
    }

    /**
     * Set the categories property: The categories of the package.
     *
     * @param categories the categories value to set.
     * @return the PackageProperties object itself.
     */
    public PackageProperties withCategories(ContentMetadataCategories categories) {
        this.categories = categories;
        return this;
    }

    /**
     * Get the threatAnalysisTactics property: the tactics the resource covers.
     *
     * @return the threatAnalysisTactics value.
     */
    public List<String> threatAnalysisTactics() {
        return this.threatAnalysisTactics;
    }

    /**
     * Set the threatAnalysisTactics property: the tactics the resource covers.
     *
     * @param threatAnalysisTactics the threatAnalysisTactics value to set.
     * @return the PackageProperties object itself.
     */
    public PackageProperties withThreatAnalysisTactics(List<String> threatAnalysisTactics) {
        this.threatAnalysisTactics = threatAnalysisTactics;
        return this;
    }

    /**
     * Get the threatAnalyticsTechniques property: the techniques the resource covers, these have to be aligned with the
     * tactics being used.
     *
     * @return the threatAnalyticsTechniques value.
     */
    public List<String> threatAnalyticsTechniques() {
        return this.threatAnalyticsTechniques;
    }

    /**
     * Set the threatAnalyticsTechniques property: the techniques the resource covers, these have to be aligned with the
     * tactics being used.
     *
     * @param threatAnalyticsTechniques the threatAnalyticsTechniques value to set.
     * @return the PackageProperties object itself.
     */
    public PackageProperties withThreatAnalyticsTechniques(List<String> threatAnalyticsTechniques) {
        this.threatAnalyticsTechniques = threatAnalyticsTechniques;
        return this;
    }

    /**
     * Get the icon property: the icon identifier. this id can later be fetched from the content metadata.
     *
     * @return the icon value.
     */
    public String icon() {
        return this.icon;
    }

    /**
     * Set the icon property: the icon identifier. this id can later be fetched from the content metadata.
     *
     * @param icon the icon value to set.
     * @return the PackageProperties object itself.
     */
    public PackageProperties withIcon(String icon) {
        this.icon = icon;
        return this;
    }

    /**
     * Get the packageItems property: The JSON object of the package items.
     *
     * @return the packageItems value.
     */
    public PackagePropertiesPackageItems packageItems() {
        return this.packageItems;
    }

    /**
     * Set the packageItems property: The JSON object of the package items.
     *
     * @param packageItems the packageItems value to set.
     * @return the PackageProperties object itself.
     */
    public PackageProperties withPackageItems(PackagePropertiesPackageItems packageItems) {
        this.packageItems = packageItems;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (packageId() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property packageId in model PackageProperties"));
        }
        if (packageKind() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property packageKind in model PackageProperties"));
        }
        if (version() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property version in model PackageProperties"));
        }
        if (displayName() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property displayName in model PackageProperties"));
        }
        if (source() != null) {
            source().validate();
        }
        if (author() != null) {
            author().validate();
        }
        if (support() != null) {
            support().validate();
        }
        if (dependencies() != null) {
            dependencies().validate();
        }
        if (categories() != null) {
            categories().validate();
        }
        if (packageItems() != null) {
            packageItems().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(PackageProperties.class);
}
