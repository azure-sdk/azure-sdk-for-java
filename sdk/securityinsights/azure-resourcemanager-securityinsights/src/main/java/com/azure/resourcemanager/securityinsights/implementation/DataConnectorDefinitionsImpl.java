// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.securityinsights.fluent.DataConnectorDefinitionsClient;
import com.azure.resourcemanager.securityinsights.fluent.models.DataConnectorDefinitionInner;
import com.azure.resourcemanager.securityinsights.models.DataConnectorDefinition;
import com.azure.resourcemanager.securityinsights.models.DataConnectorDefinitions;

public final class DataConnectorDefinitionsImpl implements DataConnectorDefinitions {
    private static final ClientLogger LOGGER = new ClientLogger(DataConnectorDefinitionsImpl.class);

    private final DataConnectorDefinitionsClient innerClient;

    private final com.azure.resourcemanager.securityinsights.SecurityInsightsManager serviceManager;

    public DataConnectorDefinitionsImpl(DataConnectorDefinitionsClient innerClient,
        com.azure.resourcemanager.securityinsights.SecurityInsightsManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<DataConnectorDefinition> list(String resourceGroupName, String workspaceName) {
        PagedIterable<DataConnectorDefinitionInner> inner = this.serviceClient().list(resourceGroupName, workspaceName);
        return Utils.mapPage(inner, inner1 -> new DataConnectorDefinitionImpl(inner1, this.manager()));
    }

    public PagedIterable<DataConnectorDefinition> list(String resourceGroupName, String workspaceName,
        Context context) {
        PagedIterable<DataConnectorDefinitionInner> inner
            = this.serviceClient().list(resourceGroupName, workspaceName, context);
        return Utils.mapPage(inner, inner1 -> new DataConnectorDefinitionImpl(inner1, this.manager()));
    }

    public Response<DataConnectorDefinition> getWithResponse(String resourceGroupName, String workspaceName,
        String dataConnectorDefinitionName, Context context) {
        Response<DataConnectorDefinitionInner> inner = this.serviceClient().getWithResponse(resourceGroupName,
            workspaceName, dataConnectorDefinitionName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new DataConnectorDefinitionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public DataConnectorDefinition get(String resourceGroupName, String workspaceName,
        String dataConnectorDefinitionName) {
        DataConnectorDefinitionInner inner
            = this.serviceClient().get(resourceGroupName, workspaceName, dataConnectorDefinitionName);
        if (inner != null) {
            return new DataConnectorDefinitionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<DataConnectorDefinition> createOrUpdateWithResponse(String resourceGroupName, String workspaceName,
        String dataConnectorDefinitionName, DataConnectorDefinitionInner connectorDefinitionInput, Context context) {
        Response<DataConnectorDefinitionInner> inner = this.serviceClient().createOrUpdateWithResponse(
            resourceGroupName, workspaceName, dataConnectorDefinitionName, connectorDefinitionInput, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new DataConnectorDefinitionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public DataConnectorDefinition createOrUpdate(String resourceGroupName, String workspaceName,
        String dataConnectorDefinitionName, DataConnectorDefinitionInner connectorDefinitionInput) {
        DataConnectorDefinitionInner inner = this.serviceClient().createOrUpdate(resourceGroupName, workspaceName,
            dataConnectorDefinitionName, connectorDefinitionInput);
        if (inner != null) {
            return new DataConnectorDefinitionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteWithResponse(String resourceGroupName, String workspaceName,
        String dataConnectorDefinitionName, Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, workspaceName, dataConnectorDefinitionName,
            context);
    }

    public void delete(String resourceGroupName, String workspaceName, String dataConnectorDefinitionName) {
        this.serviceClient().delete(resourceGroupName, workspaceName, dataConnectorDefinitionName);
    }

    private DataConnectorDefinitionsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.securityinsights.SecurityInsightsManager manager() {
        return this.serviceManager;
    }
}
