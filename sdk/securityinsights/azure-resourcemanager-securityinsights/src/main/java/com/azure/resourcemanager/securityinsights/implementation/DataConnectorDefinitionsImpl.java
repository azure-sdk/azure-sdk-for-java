// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.securityinsights.fluent.DataConnectorDefinitionsClient;
import com.azure.resourcemanager.securityinsights.fluent.models.ConnectorDefinitionBaseArmCollectionWrapperInner;
import com.azure.resourcemanager.securityinsights.fluent.models.ConnectorDefinitionBaseArmObjectWrapperInner;
import com.azure.resourcemanager.securityinsights.models.ConnectorDefinitionBaseArmCollectionWrapper;
import com.azure.resourcemanager.securityinsights.models.ConnectorDefinitionBaseArmObjectWrapper;
import com.azure.resourcemanager.securityinsights.models.DataConnectorDefinitions;

public final class DataConnectorDefinitionsImpl implements DataConnectorDefinitions {
    private static final ClientLogger LOGGER = new ClientLogger(DataConnectorDefinitionsImpl.class);

    private final DataConnectorDefinitionsClient innerClient;

    private final com.azure.resourcemanager.securityinsights.SecurityInsightsManager serviceManager;

    public DataConnectorDefinitionsImpl(
        DataConnectorDefinitionsClient innerClient,
        com.azure.resourcemanager.securityinsights.SecurityInsightsManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<ConnectorDefinitionBaseArmCollectionWrapper> listWithResponse(
        String resourceGroupName, String workspaceName, Context context) {
        Response<ConnectorDefinitionBaseArmCollectionWrapperInner> inner =
            this.serviceClient().listWithResponse(resourceGroupName, workspaceName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ConnectorDefinitionBaseArmCollectionWrapperImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ConnectorDefinitionBaseArmCollectionWrapper list(String resourceGroupName, String workspaceName) {
        ConnectorDefinitionBaseArmCollectionWrapperInner inner =
            this.serviceClient().list(resourceGroupName, workspaceName);
        if (inner != null) {
            return new ConnectorDefinitionBaseArmCollectionWrapperImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ConnectorDefinitionBaseArmObjectWrapper> getWithResponse(
        String resourceGroupName, String workspaceName, String dataConnectorDefinitionName, Context context) {
        Response<ConnectorDefinitionBaseArmObjectWrapperInner> inner =
            this
                .serviceClient()
                .getWithResponse(resourceGroupName, workspaceName, dataConnectorDefinitionName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ConnectorDefinitionBaseArmObjectWrapperImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ConnectorDefinitionBaseArmObjectWrapper get(
        String resourceGroupName, String workspaceName, String dataConnectorDefinitionName) {
        ConnectorDefinitionBaseArmObjectWrapperInner inner =
            this.serviceClient().get(resourceGroupName, workspaceName, dataConnectorDefinitionName);
        if (inner != null) {
            return new ConnectorDefinitionBaseArmObjectWrapperImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteWithResponse(
        String resourceGroupName, String workspaceName, String dataConnectorDefinitionName, Context context) {
        return this
            .serviceClient()
            .deleteWithResponse(resourceGroupName, workspaceName, dataConnectorDefinitionName, context);
    }

    public void delete(String resourceGroupName, String workspaceName, String dataConnectorDefinitionName) {
        this.serviceClient().delete(resourceGroupName, workspaceName, dataConnectorDefinitionName);
    }

    public ConnectorDefinitionBaseArmObjectWrapper getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = Utils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String dataConnectorDefinitionName = Utils.getValueFromIdByName(id, "dataConnectorDefinitions");
        if (dataConnectorDefinitionName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'dataConnectorDefinitions'.",
                                id)));
        }
        return this
            .getWithResponse(resourceGroupName, workspaceName, dataConnectorDefinitionName, Context.NONE)
            .getValue();
    }

    public Response<ConnectorDefinitionBaseArmObjectWrapper> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = Utils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String dataConnectorDefinitionName = Utils.getValueFromIdByName(id, "dataConnectorDefinitions");
        if (dataConnectorDefinitionName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'dataConnectorDefinitions'.",
                                id)));
        }
        return this.getWithResponse(resourceGroupName, workspaceName, dataConnectorDefinitionName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = Utils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String dataConnectorDefinitionName = Utils.getValueFromIdByName(id, "dataConnectorDefinitions");
        if (dataConnectorDefinitionName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'dataConnectorDefinitions'.",
                                id)));
        }
        this.deleteWithResponse(resourceGroupName, workspaceName, dataConnectorDefinitionName, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = Utils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String dataConnectorDefinitionName = Utils.getValueFromIdByName(id, "dataConnectorDefinitions");
        if (dataConnectorDefinitionName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'dataConnectorDefinitions'.",
                                id)));
        }
        return this.deleteWithResponse(resourceGroupName, workspaceName, dataConnectorDefinitionName, context);
    }

    private DataConnectorDefinitionsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.securityinsights.SecurityInsightsManager manager() {
        return this.serviceManager;
    }

    public ConnectorDefinitionBaseArmObjectWrapperImpl define(String name) {
        return new ConnectorDefinitionBaseArmObjectWrapperImpl(name, this.manager());
    }
}
