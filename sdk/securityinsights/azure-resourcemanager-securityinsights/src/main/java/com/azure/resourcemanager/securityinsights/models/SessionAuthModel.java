// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Model for API authentication with session cookie.
 */
@Fluent
public final class SessionAuthModel extends CcpAuthConfig {
    /*
     * The auth type
     */
    private CcpAuthType type = CcpAuthType.SESSION;

    /*
     * The user name attribute key value.
     */
    private Map<String, String> username;

    /*
     * The password attribute name.
     */
    private Map<String, String> password;

    /*
     * Query parameters to session service endpoint.
     */
    private Map<String, Object> queryParameters;

    /*
     * Indicating whether API key is set in HTTP POST payload.
     */
    private Boolean isPostPayloadJson;

    /*
     * HTTP request headers to session service endpoint.
     */
    private Map<String, String> headers;

    /*
     * Session timeout in minutes.
     */
    private Integer sessionTimeoutInMinutes;

    /*
     * Session id attribute name from HTTP response header.
     */
    private String sessionIdName;

    /*
     * HTTP request URL to session service endpoint.
     */
    private String sessionLoginRequestUri;

    /**
     * Creates an instance of SessionAuthModel class.
     */
    public SessionAuthModel() {
    }

    /**
     * Get the type property: The auth type.
     * 
     * @return the type value.
     */
    @Override
    public CcpAuthType type() {
        return this.type;
    }

    /**
     * Get the username property: The user name attribute key value.
     * 
     * @return the username value.
     */
    public Map<String, String> username() {
        return this.username;
    }

    /**
     * Set the username property: The user name attribute key value.
     * 
     * @param username the username value to set.
     * @return the SessionAuthModel object itself.
     */
    public SessionAuthModel withUsername(Map<String, String> username) {
        this.username = username;
        return this;
    }

    /**
     * Get the password property: The password attribute name.
     * 
     * @return the password value.
     */
    public Map<String, String> password() {
        return this.password;
    }

    /**
     * Set the password property: The password attribute name.
     * 
     * @param password the password value to set.
     * @return the SessionAuthModel object itself.
     */
    public SessionAuthModel withPassword(Map<String, String> password) {
        this.password = password;
        return this;
    }

    /**
     * Get the queryParameters property: Query parameters to session service endpoint.
     * 
     * @return the queryParameters value.
     */
    public Map<String, Object> queryParameters() {
        return this.queryParameters;
    }

    /**
     * Set the queryParameters property: Query parameters to session service endpoint.
     * 
     * @param queryParameters the queryParameters value to set.
     * @return the SessionAuthModel object itself.
     */
    public SessionAuthModel withQueryParameters(Map<String, Object> queryParameters) {
        this.queryParameters = queryParameters;
        return this;
    }

    /**
     * Get the isPostPayloadJson property: Indicating whether API key is set in HTTP POST payload.
     * 
     * @return the isPostPayloadJson value.
     */
    public Boolean isPostPayloadJson() {
        return this.isPostPayloadJson;
    }

    /**
     * Set the isPostPayloadJson property: Indicating whether API key is set in HTTP POST payload.
     * 
     * @param isPostPayloadJson the isPostPayloadJson value to set.
     * @return the SessionAuthModel object itself.
     */
    public SessionAuthModel withIsPostPayloadJson(Boolean isPostPayloadJson) {
        this.isPostPayloadJson = isPostPayloadJson;
        return this;
    }

    /**
     * Get the headers property: HTTP request headers to session service endpoint.
     * 
     * @return the headers value.
     */
    public Map<String, String> headers() {
        return this.headers;
    }

    /**
     * Set the headers property: HTTP request headers to session service endpoint.
     * 
     * @param headers the headers value to set.
     * @return the SessionAuthModel object itself.
     */
    public SessionAuthModel withHeaders(Map<String, String> headers) {
        this.headers = headers;
        return this;
    }

    /**
     * Get the sessionTimeoutInMinutes property: Session timeout in minutes.
     * 
     * @return the sessionTimeoutInMinutes value.
     */
    public Integer sessionTimeoutInMinutes() {
        return this.sessionTimeoutInMinutes;
    }

    /**
     * Set the sessionTimeoutInMinutes property: Session timeout in minutes.
     * 
     * @param sessionTimeoutInMinutes the sessionTimeoutInMinutes value to set.
     * @return the SessionAuthModel object itself.
     */
    public SessionAuthModel withSessionTimeoutInMinutes(Integer sessionTimeoutInMinutes) {
        this.sessionTimeoutInMinutes = sessionTimeoutInMinutes;
        return this;
    }

    /**
     * Get the sessionIdName property: Session id attribute name from HTTP response header.
     * 
     * @return the sessionIdName value.
     */
    public String sessionIdName() {
        return this.sessionIdName;
    }

    /**
     * Set the sessionIdName property: Session id attribute name from HTTP response header.
     * 
     * @param sessionIdName the sessionIdName value to set.
     * @return the SessionAuthModel object itself.
     */
    public SessionAuthModel withSessionIdName(String sessionIdName) {
        this.sessionIdName = sessionIdName;
        return this;
    }

    /**
     * Get the sessionLoginRequestUri property: HTTP request URL to session service endpoint.
     * 
     * @return the sessionLoginRequestUri value.
     */
    public String sessionLoginRequestUri() {
        return this.sessionLoginRequestUri;
    }

    /**
     * Set the sessionLoginRequestUri property: HTTP request URL to session service endpoint.
     * 
     * @param sessionLoginRequestUri the sessionLoginRequestUri value to set.
     * @return the SessionAuthModel object itself.
     */
    public SessionAuthModel withSessionLoginRequestUri(String sessionLoginRequestUri) {
        this.sessionLoginRequestUri = sessionLoginRequestUri;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (username() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property username in model SessionAuthModel"));
        }
        if (password() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property password in model SessionAuthModel"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(SessionAuthModel.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeMapField("userName", this.username, (writer, element) -> writer.writeString(element));
        jsonWriter.writeMapField("password", this.password, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeMapField("queryParameters", this.queryParameters,
            (writer, element) -> writer.writeUntyped(element));
        jsonWriter.writeBooleanField("isPostPayloadJson", this.isPostPayloadJson);
        jsonWriter.writeMapField("headers", this.headers, (writer, element) -> writer.writeString(element));
        jsonWriter.writeNumberField("sessionTimeoutInMinutes", this.sessionTimeoutInMinutes);
        jsonWriter.writeStringField("sessionIdName", this.sessionIdName);
        jsonWriter.writeStringField("sessionLoginRequestUri", this.sessionLoginRequestUri);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SessionAuthModel from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SessionAuthModel if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SessionAuthModel.
     */
    public static SessionAuthModel fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SessionAuthModel deserializedSessionAuthModel = new SessionAuthModel();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("userName".equals(fieldName)) {
                    Map<String, String> username = reader.readMap(reader1 -> reader1.getString());
                    deserializedSessionAuthModel.username = username;
                } else if ("password".equals(fieldName)) {
                    Map<String, String> password = reader.readMap(reader1 -> reader1.getString());
                    deserializedSessionAuthModel.password = password;
                } else if ("type".equals(fieldName)) {
                    deserializedSessionAuthModel.type = CcpAuthType.fromString(reader.getString());
                } else if ("queryParameters".equals(fieldName)) {
                    Map<String, Object> queryParameters = reader.readMap(reader1 -> reader1.readUntyped());
                    deserializedSessionAuthModel.queryParameters = queryParameters;
                } else if ("isPostPayloadJson".equals(fieldName)) {
                    deserializedSessionAuthModel.isPostPayloadJson = reader.getNullable(JsonReader::getBoolean);
                } else if ("headers".equals(fieldName)) {
                    Map<String, String> headers = reader.readMap(reader1 -> reader1.getString());
                    deserializedSessionAuthModel.headers = headers;
                } else if ("sessionTimeoutInMinutes".equals(fieldName)) {
                    deserializedSessionAuthModel.sessionTimeoutInMinutes = reader.getNullable(JsonReader::getInt);
                } else if ("sessionIdName".equals(fieldName)) {
                    deserializedSessionAuthModel.sessionIdName = reader.getString();
                } else if ("sessionLoginRequestUri".equals(fieldName)) {
                    deserializedSessionAuthModel.sessionLoginRequestUri = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSessionAuthModel;
        });
    }
}
