// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Information regarding pull request for protected branches.
 */
@Immutable
public final class PullRequest implements JsonSerializable<PullRequest> {
    /*
     * URL of pull request
     */
    private String url;

    /*
     * State of the pull request
     */
    private State state;

    /**
     * Creates an instance of PullRequest class.
     */
    public PullRequest() {
    }

    /**
     * Get the url property: URL of pull request.
     * 
     * @return the url value.
     */
    public String url() {
        return this.url;
    }

    /**
     * Get the state property: State of the pull request.
     * 
     * @return the state value.
     */
    public State state() {
        return this.state;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PullRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PullRequest if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the PullRequest.
     */
    public static PullRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PullRequest deserializedPullRequest = new PullRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("url".equals(fieldName)) {
                    deserializedPullRequest.url = reader.getString();
                } else if ("state".equals(fieldName)) {
                    deserializedPullRequest.state = State.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPullRequest;
        });
    }
}
